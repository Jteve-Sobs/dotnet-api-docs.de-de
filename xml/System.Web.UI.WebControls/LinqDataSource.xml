<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ec2add6e757b49d41558673c1f3075215dbb42be" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86626940" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.DataSourceControl, System.Web.DynamicData.IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.DataSourceControl implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits DataSourceControl&#xA;Implements IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::DataSourceControl, System::Web::DynamicData::IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit DataSourceControl&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit ContextDataSource&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.DefaultEvent("Selecting")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultEvent("Selecting")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.DefaultProperty("ContextTypeName")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultProperty("ContextTypeName")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName Language="C#">[System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.ico")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.ico")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Web.UI.ParseChildren(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Web.UI.ParseChildren(true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Web.UI.PersistChildren(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Web.UI.PersistChildren(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Ermöglicht die Verwendung von LINQ (Language-Integrated Query) auf einer ASP.NET-Webseite durch Markuptext, um Daten von einem Datenobjekt abzurufen und diese zu ändern.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inhalte dieses Themas:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [Reihenfolge der Operationen](#order_of_operations)  
  
-   [Anordnen von Daten](#ordering_data)  
  
-   [Gruppieren von Daten](#grouping_data)  
  
-   [Datenänderungen](#data_modifications)  
  
-   [Auswerten von Werten zur Laufzeit](#evaluating_value_at_run_time)  
  
-   [Arbeiten mit gespeicherten Prozeduren](#working_with_stored_procedures)  
  
-   [Deklarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Language-Integrated Query (LINQ) ist eine Abfrage Syntax, die eine Reihe von Abfrage Operatoren definiert, die das Durchlaufen von Übergängen, Filtern und Projektions Vorgängen auf deklarative Weise in beliebigen Ausdrücken ermöglichen. NET-basierte Programmiersprache. Das Datenobjekt kann eine Speicher interne Datensammlung oder ein Objekt sein, das Daten aus einer Datenbank darstellt. Sie können die Daten abrufen oder ändern, ohne für jeden Vorgang SQL-Befehle schreiben zu müssen.  
  
 Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement ermöglicht es Ihnen, LINQ auf einer ASP.NET-Webseite zu verwenden, indem Sie Eigenschaften im Markup Text festlegen. Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement verwendet LINQ to SQL, um die Daten Befehle automatisch zu generieren. Weitere Informationen zu LINQ to SQL finden Sie unter [LINQ to SQL](/dotnet/framework/data/adonet/sql/linq/).  
  
 Wenn Sie Daten aus einer Speicher internen Datensammlung abrufen, legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> Eigenschaft auf die Klasse fest, die die Datensammlung enthält. Sie legen die- <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft auf die Eigenschaft oder das Feld fest, das die Datensammlung zurückgibt. Beispielsweise könnten Sie über eine Klasse mit dem Namen verfügen `Person` , die eine Eigenschaft mit dem Namen enthält `FavoriteCities` , die ein Array von Zeichen folgen Werten zurückgibt. Legen Sie in diesem Fall die <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> -Eigenschaft auf fest, `Person` und legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft auf fest `FavoriteCities` .  
  
 Beim Abfragen einer Datenbank müssen Sie zuerst Entitäts Klassen erstellen, die die Datenbank und die zugehörigen Tabellen darstellen. Sie können das- [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] Hilfsprogramm oder das SqlMetal.exe Hilfsprogramm verwenden, um diese Klassen zu generieren. Anschließend legen Sie die <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> -Eigenschaft auf die Klasse fest, die die Datenbank darstellt, und legen die- <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft auf die-Eigenschaft fest, die die Datenbanktabelle darstellt.  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a>Reihenfolge der Operationen  
 Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement wendet Daten Vorgänge in der folgenden Reihenfolge an:  
  
1.  Where (geben Sie an, welche Datensätze zurückgegeben werden sollen).  
  
2.  Order by (Sortieren).  
  
3.  Gruppieren nach (aggregierte Datensätze, die Werte gemeinsam verwenden).  
  
4.  Ordnen Sie Gruppen nach (Sortieren Sie gruppierte Daten).  
  
5.  Select (geben Sie an, welche Felder oder Eigenschaften zurückgegeben werden sollen).  
  
6.  Automatisch sortieren (Sortieren von Datensätzen nach einer vom Benutzer ausgewählten Eigenschaft).  
  
7.  Automatische Seite (Abrufen einer Teilmenge der Datensätze, die vom Benutzer ausgewählt wurden).  
  
 Sie können der-Eigenschaft Bedingungen hinzufügen <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> , um die Datensätze zu filtern, die von einer Abfrage zurückgegeben werden. Wenn die- <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Eigenschaft nicht festgelegt ist, ruft das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement jeden Datensatz aus dem Datenobjekt ab.  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a>Anordnen von Daten  
 Verwenden Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Eigenschaft, um die Namen der Eigenschaften aus den zurückgegebenen Daten anzugeben, nach denen sortiert werden soll.  
  
> [!NOTE]
>  Wenn Sie das <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement mit [!INCLUDE[ss2k](~/includes/ss2k-md.md)] oder verwenden [!INCLUDE[ssEW](~/includes/ssew-md.md)] und die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Eigenschaft auf festgelegt ist `true` , müssen Sie einen Wert in der- <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Eigenschaft angeben. Standardmäßig ist die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Eigenschaft `true` . Wenn Sie der-Eigenschaft einen Wert zuweisen <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> , müssen Sie auch alle Identitäts Spalten in die Liste der Eigenschaften einschließen, die in der Abfrage zurückgegeben werden.  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a>Gruppieren von Daten  
 Mithilfe der- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft können Sie angeben, welche Eigenschaften verwendet werden, um Datensätze mit den gleichen Werten zu konsolidieren. Wenn Sie Daten gruppieren, können Sie `Key` `It` die Eigenschaften und, die dynamisch erstellt werden, in die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft einschließen. Die- `Key` Eigenschaft verweist auf die Werte in der Eigenschaft oder den Eigenschaften, die zum Gruppieren der Daten verwendet wurden. Wenn Sie z. b. nach einer-Eigenschaft mit dem Namen gruppieren `Category` , enthält die- `Key` Eigenschaft alle eindeutigen Werte in der- `Category` Eigenschaft. Die- `It` Eigenschaft verweist auf eine Auflistung einzelner Datensätze in einer Gruppierung von Daten. Sie können die-Eigenschaft durchlaufen `It` , um die einzelnen Datensätze abzurufen, die im Gruppierungs Vorgang konsolidiert wurden. Wenn Sie z. b. nach einer-Eigenschaft mit dem Namen gruppieren `Category` , enthält die- `It` Eigenschaft alle einzelnen Datensätze, die einen gemeinsamen Wert in der- `Category` Eigenschaft haben.  
  
 Verwenden Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> Eigenschaft, um die Eigenschaften anzugeben, die zum Sortieren der gruppierten Daten verwendet werden sollen. Wenn Sie Daten gruppieren, gibt die-Eigenschaft an, <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> wie die einzelnen Datensätze in den gruppierten Daten sortiert werden.  
  
 Standardmäßig ruft das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement Werte für alle Eigenschaften aus einem Datenobjekt ab. Verwenden Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft, um anzugeben, welche Eigenschaften zurückgegeben werden sollen, wenn Sie mit einer Teilmenge der verfügbaren Eigenschaften arbeiten möchten. Der SELECT-Vorgang wird nach den WHERE-, Order by-und Group by-Vorgängen angewendet. Wenn Sie also einen Aliasnamen in einer SELECT-Klausel erstellen, ist der Alias in den anderen Klauseln nicht verfügbar.  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a>Datenänderungen  
 Sie können angeben, ob Datenänderungen mithilfe der <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> Eigenschaften, und aktiviert werden <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> . Die Benutzeroberfläche zum Ändern von Daten von einem <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement wird in der Regel über ein Daten gebundenes Steuerelement bereitgestellt, z. b. ein- <xref:System.Web.UI.WebControls.DetailsView> Steuerelement Zusätzlich zum Festlegen von <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> , <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> oder <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> auf `true` sind die folgenden Bedingungen erforderlich, um automatische Datenänderungen zu aktivieren:  
  
-   Der <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft kann kein Wert zugewiesen werden.  
  
-   Der <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft kann kein Wert zugewiesen werden.  
  
-   Die Klasse, die der-Eigenschaft zugewiesen ist, <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> muss von abgeleitet werden <xref:System.Data.Linq.DataContext> .  
  
-   Die Eigenschaft, die der-Eigenschaft zugewiesen ist, <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> muss von abgeleitet werden <xref:System.Data.Linq.Table%601> .  
  
 Sie können auf zwei Arten einschränken, welche Eigenschaften in einem Daten gebundenen Steuerelement angezeigt werden. Sie können entweder die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft auf eine Teilmenge von Eigenschaften festlegen, oder Sie können die Felder für ein Daten gebundenes Steuerelement durch Hinzufügen von-Steuer <xref:System.Web.UI.WebControls.DataControlField> Elementen definieren. Wenn Sie jedoch die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft festlegen, bedeutet dies, dass automatische Aktualisierungs-, Einfüge-und Löschvorgänge nicht aktiviert werden können. Wenn Sie automatische Datenänderungen aktivieren möchten, während Sie mit einer Teilmenge der verfügbaren Eigenschaften arbeiten, legen Sie die-Eigenschaft nicht fest <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> . Rufen Sie stattdessen alle Eigenschaften aus dem Datenobjekt ab, und verwalten Sie mithilfe des Daten gebundenen Steuer Elements, welche angezeigt werden. Wenn Sie das <xref:System.Web.UI.WebControls.DetailsView> Steuerelement oder das-Steuerelement verwenden <xref:System.Web.UI.WebControls.GridView> , müssen Sie auch die-Eigenschaft oder die-Eigenschaft <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> auf festlegen <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> `false` . Dadurch wird verhindert, dass das Daten gebundene Steuerelement automatisch Schaltflächen zum Bearbeiten und Löschen der Daten einschließt. Alle Werte, die nicht im Daten gebundenen Steuerelement angezeigt werden, werden im Ansichts Zustand gespeichert. Sie werden bei der Datenaktualisierung unverändert an die Datenquelle übermittelt.  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a>Auswerten von Werten zur Laufzeit  
 Wenn Sie Werte zur Laufzeit zum Anordnen, Filtern oder Gruppieren von Werten auswerten müssen, können Sie den-,-,-oder-Auflistungen Parameter hinzufügen <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> .  
  
 Wenn Sie Standardwerte angeben möchten, können Sie der Auflistung Parameter hinzufügen <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> .  
  
 Wenn Sie Werte vor der Ausführung des Daten Vorgangs überprüfen oder ändern möchten, können Sie die-,-,- <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> oder-Ereignisse verarbeiten <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> <xref:System.Web.UI.WebControls.LinqDataSource.Updating> . Sie können diese Ereignisse auch verarbeiten, um den Daten Vorgang abzubrechen oder Validierungs Fehler zu untersuchen, die aufgetreten sind, als Sie Eigenschaften in der Datenklasse basierend auf Benutzereingaben festgelegt haben.  
  
 Um Werte zu überprüfen, nachdem der Daten Vorgang abgeschlossen wurde, behandeln Sie die <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> Ereignisse,, <xref:System.Web.UI.WebControls.LinqDataSource.Selected> oder <xref:System.Web.UI.WebControls.LinqDataSource.Updated> .  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a>Arbeiten mit gespeicherten Prozeduren  
 Sie verwenden das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement, um Daten aus einer gespeicherten Prozedur abzurufen, indem Sie einen Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> Ereignis erstellen. Im-Ereignishandler wird die-Methode in der Datenkontext Klasse aufgerufen, die die gespeicherte Prozedur darstellt, und das Ergebnis wird auf die- <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> Eigenschaft des-Objekts festgelegt <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> . Wenn Sie automatische Aktualisierungs-, Einfüge-und Löschvorgänge für die Daten aktivieren möchten, muss der Typ, der von der-Methode zurückgegeben wird, mit dem in der-Eigenschaft angegebenen Typ identisch sein <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> . Weitere Informationen zum Erstellen von Datenkontext Methoden finden Sie unter Gewusst [wie: Erstellen von DataContext-Methoden, die gespeicherten Prozeduren und Funktionen zugeordnet sind (O/R-Designer)](https://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Deklarative Syntax  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 Das folgende Beispiel zeigt ein- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement, das Daten aus einer Entitäts Klasse mit dem Namen abruft `Products` . Die Entitäts Klasse wurde möglicherweise mit dem- [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] oder dem-SqlMetal.exe-Hilfsprogramm generiert. Die- <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Eigenschaft wird so festgelegt, dass nur Datensätze zurückgegeben werden, deren- `Price` Eigenschaft größer als 50 ist. Ein- <xref:System.Web.UI.WebControls.GridView> Steuerelement ist an das-Steuerelement gebunden <xref:System.Web.UI.WebControls.LinqDataSource> , um die Daten anzuzeigen.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 Das folgende Beispiel zeigt ein <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement, mit dem Benutzerdaten Sätze in der Datenquelle aktualisieren, löschen und einfügen können. Ein <xref:System.Web.UI.WebControls.DetailsView> -Steuerelement ist an das <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement gebunden und ermöglicht es Benutzern, die Daten anzuzeigen und zu ändern. Beachten Sie, dass keine SQL-Befehle erforderlich sind, um die Datensätze auszuwählen, zu aktualisieren, zu löschen oder einzufügen.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 Das folgende Beispiel zeigt einen Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> Ereignis, das das Datenobjekt auf Grundlage eines Werts auf der Webseite festlegt.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 Das folgende Beispiel zeigt ein <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement, das für das Gruppieren nach zwei Spalten konfiguriert ist. Die `Key` -Eigenschaft verweist auf ein-Objekt, das über zwei Eigenschaften verfügt: `ProductCategory` und `Color` . Das durch dargestellte Objekt `It` wird in umbenannt (Alias) `Products` . Das umbenannte `Products` Objekt enthält eine Sammlung der einzelnen Datensätze in einer Gruppierung. Jede Instanz enthält alle Spalten aus der `Products` Tabelle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 Das folgende Beispiel zeigt zwei- <xref:System.Web.UI.WebControls.ListView> Steuerelemente, die die Daten aus dem- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement im vorherigen Beispiel anzeigen. Ein <xref:System.Web.UI.WebControls.ListView> Steuerelement zeigt die gruppierten Daten an, und das andere <xref:System.Web.UI.WebControls.ListView> Steuerelement zeigt die einzelnen Namen von Produkten an, die zu dieser Gruppe gehören. Die-Eigenschaft des Daten gebundenen Steuer Elements <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> wird auf festgelegt `Products` . Dies ist der Alias für das- `It` Objekt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/data/adonet/sql/linq/">LINQ to SQL</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelement basierend auf Werten in der <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />-Auflistung dynamisch eine Order By-Klausel erstellt.</summary>
        <value><see langword="true" /> , wenn das- <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> Steuerelement die Order By-Klausel erstellt, andernfalls <see langword="false" /> . Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> Eigenschaft auf festlegen `true` , <xref:System.Web.UI.WebControls.LinqDataSource> erstellt das-Steuerelement dynamisch eine ORDER BY-Klausel, die auf den Werten in der-Auflistung basiert <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> . Das <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement sortiert die Daten nach dem ersten Parameter und sortiert dann zusätzlich die Daten für jeden zusätzlichen Parameter. Parameter, die `null` oder einen leeren Wert enthalten, sind nicht in der ORDER BY-Klausel enthalten.  
  
 Sie legen die-Eigenschaft nicht fest <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> , wenn auf festgelegt ist `true` , da der Parser die Order By-Klausel dynamisch erstellt. Das <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement löst eine Ausnahme aus <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> , wenn auf festgelegt ist `true` und die- <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Eigenschaft Werte zugewiesen werden.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt ein- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> , bei dem auf festgelegt ist `true` . In der Auflistung ist ein-Parameter enthalten <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> , der die Daten basierend auf dem Eigenschaftsnamen sortiert, den ein Benutzer aus einem Steuerelement auswählt <xref:System.Web.UI.WebControls.DropDownList> .  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelement anhand von in der <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />-Auflistung definierten Werten dynamisch eine Where-Klausel erstellt, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn das <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelement die Where-Klausel erstellt, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> Eigenschaft auf festlegen `true` , <xref:System.Web.UI.WebControls.LinqDataSource> erstellt das-Steuerelement die WHERE-Klausel dynamisch aus den Parametern in der <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> -Auflistung. Für jeden Parameter, den Sie der Auflistung hinzufügen, muss die- <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> <xref:System.Web.UI.WebControls.Parameter.Name%2A> Eigenschaft auf einen Wert festgelegt werden, der mit einer Eigenschaft in dem Datenobjekt übereinstimmt, das abgefragt wird. Die automatisch generierte WHERE-Klausel überprüft, ob der in der-Auflistung angegebene Wert <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> gleich dem Wert der entsprechenden-Eigenschaft im Datenobjekt ist. Wenn Sie mehr als einen Parameter angeben, werden die Parameter mit einer logischen `AND` Operation verknüpft. Parameter, die `null` oder einen leeren Wert enthalten, sind nicht in der WHERE-Klausel enthalten.  
  
 Die automatisch generierte <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> -Klausel kann nur auf Gleichheit testen und Parameter nur mit dem- `AND` Vorgang verknüpfen. Legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> Eigenschaft nicht auf fest, `true` Wenn Sie eine Bedingung hinzufügen müssen, die nicht auf Gleichheit überprüft wird, oder wenn Sie Parameter mit dem Vorgang verknüpfen müssen `OR` . Sie können diese Aufgaben ausführen, indem Sie die <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> -Eigenschaft auf festlegen `false` und Platzhalter in der- <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Eigenschaft für jeden Parameter in der Auflistung hinzufügen <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> . Stellen Sie in der- <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Eigenschaft jedem Platzhalter Namen das @-Symbol voran.  
  
 Wenn die-Eigenschaft auf festgelegt ist, wird die-Eigenschaft nicht festgelegt <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> `true` , da der Parser die WHERE-Klausel dynamisch erstellt. Das <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement löst eine Ausnahme aus, wenn die <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> -Eigenschaft ist `true` und die- <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Eigenschaft Werte zugewiesen werden.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt ein- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> , bei dem auf festgelegt ist `true` . Ein- <xref:System.Web.UI.WebControls.GridView> Steuerelement ist an das-Steuerelement gebunden <xref:System.Web.UI.WebControls.LinqDataSource> , um die Daten anzuzeigen, die von der Abfrage zurückgegeben werden. Ein <xref:System.Web.UI.WebControls.DropDownList> Steuerelement ist enthalten, das mit drei Werten aufgefüllt wird. Ein-Parameter ist in der Auflistung <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> mit dem Namen enthalten, der auf festgelegt ist und mit `Category,` einer der Eigenschaften des Datenobjekts übereinstimmt. Die- <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> Eigenschaft wird auf die ID des-Steuer Elements festgelegt <xref:System.Web.UI.WebControls.DropDownList> . Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement erstellt automatisch die- <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Eigenschaft zum Filtern von Datensätzen basierend auf dem Wert, den der Benutzer aus dem Steuerelement auswählt <xref:System.Web.UI.WebControls.DropDownList> . Die Abfrage gibt die Datensätze zurück, deren- `Category` Eigenschaft mit dem Wert übereinstimmt, den der Benutzer aus dem Steuerelement ausgewählt hat <xref:System.Web.UI.WebControls.DropDownList> .  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelement die Navigation durch Abschnitte der Daten zur Laufzeit unterstützt, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn der Benutzer die Daten durchlaufen kann, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Eigenschaft auf fest `true` , um das Paging im Steuerelement zu aktivieren <xref:System.Web.UI.WebControls.LinqDataSource> . Damit der Benutzer die Daten durchlaufen kann, verbinden Sie ein Daten gebundenes Steuerelement, das die-Schnittstelle für das Paging an das-Steuerelement bereitstellt <xref:System.Web.UI.WebControls.LinqDataSource> . Wenn die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Eigenschaft auf festgelegt ist `true` , ruft das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement nur genügend Datensätze für eine Seite im Daten gebundenen Steuerelement ab. Er verwendet die <xref:System.Linq.Enumerable.Skip%2A> -Methode und die- <xref:System.Linq.Enumerable.Take%2A> Methode, um die Datensätze für die aktuelle Seite abzurufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement gezeigt, bei dem die <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> -Eigenschaft auf festgelegt `true` ist, und ein-Steuerelement, <xref:System.Web.UI.WebControls.GridView> das an das <xref:System.Web.UI.WebControls.LinqDataSource> Die- <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> Eigenschaft des- <xref:System.Web.UI.WebControls.GridView> Steuer Elements wird auf festgelegt, `true` um die Schnittstelle bereitzustellen, über die Benutzer die Daten durchlaufen können.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelement das Sortieren der Daten zur Laufzeit unterstützt, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn der Benutzer die Daten sortieren kann, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement unterstützt zwei Ansätze zum Sortieren von Daten. Sie können die <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> -Eigenschaft verwenden, um die Lauf Zeit Sortierung zu aktivieren, oder Sie können die- <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Eigenschaft festlegen, um die Sortierung zur Entwurfszeit zu definieren.  
  
 Legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> Eigenschaft auf fest, `true` um das Sortieren in einem Steuerelement zu aktivieren <xref:System.Web.UI.WebControls.LinqDataSource> , das auf dem Sortier Ausdruck aus einem Daten gebundenen Steuerelement basiert. Das Daten gebundene Steuerelement stellt die-Schnittstelle bereit, mit der der Benutzer zur Laufzeit auswählen kann, welche Eigenschaft für die Sortierung verwendet werden soll.  
  
 Sie können die Reihenfolge, in der die Daten zurückgegeben werden, Programm gesteuert festlegen, indem Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Eigenschaft auf die Eigenschaft oder Eigenschaften festlegen, die für die Sortierung Wenn die <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> -Eigenschaft auf eine-Eigenschaft und die-Eigenschaft auf festgelegt ist <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> `true` , wird der Sortier Ausdruck aus dem Daten gebundenen Steuerelement nach dem Ausdruck in der- <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Eigenschaft angewendet. Daher wird dadurch die endgültige Sortierung der Daten bestimmt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement gezeigt, bei dem die <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> -Eigenschaft auf festgelegt `true` ist, und ein-Steuerelement, <xref:System.Web.UI.WebControls.GridView> das an das <xref:System.Web.UI.WebControls.LinqDataSource> Die- <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> Eigenschaft des- <xref:System.Web.UI.WebControls.GridView> Steuer Elements wird auf festgelegt, `true` um die Schnittstelle bereitzustellen, mit der Benutzer die Daten sortieren können.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, nachdem eine Instanz des Kontexttypobjekts erstellt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln Sie das- <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> Ereignis, um das Kontexttyp Objekt zu untersuchen, oder untersuchen Sie Ausnahmen, die beim Erstellen des Objekts ausgelöst werden Sie rufen das Context Type-Objekt aus der- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft des- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Objekts ab, das diesem Ereignis zugeordnet ist. Sie rufen die Ausnahme, die während der Datenoperation aus ausgelöst wurde die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft.  
  
 Das Context Type-Objekt wird bei SELECT-, Update-, INSERT-und DELETE-Vorgängen erstellt und in der gesamten Anforderung wieder verwendet.  
  
 Es gibt ein Mal, wenn das Ereignis nicht ausgelöst wird. Dies ist, wenn Sie programmgesteuert festlegen der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft auf ein Objekt während der <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> Ereignis. Eine weitere Bedingung ist, dass die ursprünglichen Werte nicht im Ansichtszustand, oder das Objekt in gespeichert werden die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft implementiert die <xref:System.Data.Linq.ITable> Schnittstelle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, bevor eine Instanz des Kontexttypobjekts erstellt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig erstellt das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement eine Instanz des Typs, der in der- <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> Eigenschaft angegeben ist. Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement ruft den Parameter losen Konstruktor des Datenkontext Objekts auf, um eine Instanz des-Objekts zu erstellen. Es ist möglich, dass Sie einen nicht parameterlosen Konstruktor verwenden müssen, oder Sie müssen ein-Objekt erstellen, das sich von dem in der-Eigenschaft angegebenen unterscheidet <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> . In diesem Fall müssen Sie das <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> -Ereignis behandeln und das Datenkontext Objekt manuell erstellen.  
  
 Das Context Type-Objekt wird bei SELECT-, Update-, INSERT-und DELETE-Vorgängen erstellt.  
  
 Es gibt ein Mal, wenn das Ereignis nicht ausgelöst wird. Dies ist, wenn Sie programmgesteuert festlegen, die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft auf ein Objekt in einem Ereignishandler für die <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> Ereignis. Eine weitere Bedingung ist, dass die ursprünglichen Werte nicht im Ansichtszustand, oder das Objekt in gespeichert werden die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft implementiert die <xref:System.Data.Linq.ITable> Schnittstelle.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie das Datenkontext Objekt mithilfe eines nicht parameterlosen Konstruktors während des-Ereignisses erstellt wird <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> . Der Code weist das-Objekt der- <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> Eigenschaft zu.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor dem Freigeben des Kontexttypobjekts auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie behandeln das- <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> Ereignis, um das Objekt manuell zu löschen, oder um eine Bereinigung durchzuführen, die für das Objekt spezifisch ist, bevor das Objekt zerstört wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public string ContextTypeName { get; set; }" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextTypeName As String" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Typs mit der Eigenschaft ab, deren Wert die abzurufenden Daten aufweist, oder legt diesen fest.</summary>
        <value>Der Name der Klasse, von der Daten abgerufen werden sollen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie das-Steuerelement verwenden, <xref:System.Web.UI.WebControls.LinqDataSource> um Daten aus einer Speicher internen Datensammlung oder einer Datenbank abzurufen, müssen Sie zwei Eigenschaften angeben. Der erste ist eine Datenkontext Klasse, die die Datenquelle darstellt. Die zweite ist eine Eigenschaft in der Datenkontext Klasse, die die Daten enthält. Legen Sie die <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> -Eigenschaft auf den Namen der Datenkontext Klasse fest, und legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft auf die Datensammlung fest, die die Daten enthält.  
  
 Wenn Sie z. b. Daten aus einer Datenbank abrufen, legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> Eigenschaft auf den Namen der Klasse fest, die die Datenbank darstellt. Legen Sie außerdem die- <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft auf die-Eigenschaft fest, die die Tabelle in der Datenbank darstellt. Um Klassen aus einer Datenbank zu generieren, verwenden [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] Sie das-oder das-SqlMetal.exe Hilfsprogramm, um diese Klassen automatisch zu generieren.  
  
 Wenn Sie Daten aus einer Datensammlung im Arbeitsspeicher abrufen, z. b. ein Array, legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> Eigenschaft auf den Namen der Klasse fest, die die Array-Eigenschaft enthält. Legen Sie dann die- <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft auf die-Eigenschaft fest, die das Array abruft.  
  
 Um automatische Aktualisierungs-, Einfüge-oder Löschvorgänge über das-Steuerelement zu aktivieren <xref:System.Web.UI.WebControls.LinqDataSource> , muss die der-Eigenschaft zugewiesene Klasse <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> von abgeleitet werden <xref:System.Data.Linq.DataContext> . Außerdem muss die Eigenschaft, die der-Eigenschaft zugewiesen ist, <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> von abgeleitet werden <xref:System.Data.Linq.Table%601> . Wenn Sie automatische Aktualisierungs-, Einfüge-oder Löschvorgänge nicht aktivieren müssen, können Sie den Namen eines beliebigen Klassen Typs der Eigenschaft zuweisen <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> .  
  
 Weitere Informationen zum Auswählen von Daten aus einer Instanz einer Klasse finden Sie unter der- <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die- <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> Eigenschaft auf eine Klasse festgelegt wird, die ein Zeichen folgen Array enthält. Außerdem wird gezeigt, wie die-Eigenschaft auf eine Klasse (generiert von) festgelegt wird [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] , die eine Datenbank darstellt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 Die Klasse `ExampleDataContext` mit dem Namen, die die Datenbanktabelle darstellt, wird in diesem Beispiel nicht gezeigt. Damit dieses Beispiel funktioniert, müssen Sie diese Klasse erstellen, indem Sie eine LINQ to SQL-Klasse mit dem Namen example. dbml hinzufügen und eine Tabelle mit dem Namen Movie auf das ziehen [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] . Eine Klasse namens `ExampleDataContext` mit einer-Eigenschaft mit dem Namen `Movies` wird generiert.  
  
 Das folgende Beispiel zeigt die-Klasse `MovieLibrary` mit dem Namen, auf die im-Steuerelement verwiesen wird <xref:System.Web.UI.WebControls.LinqDataSource> .  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/linq/">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberSignature Language="F#" Value="override this.CreateQueryableView : unit -&gt; System.Web.UI.WebControls.QueryableDataSourceView" Usage="linqDataSource.CreateQueryableView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine abfragbare Ansicht zurück.</summary>
        <returns>Eine abfragbare Ansicht.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView" Usage="linqDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" />-Klasse, die mit diesem Steuerelement verknüpft ist.</summary>
        <returns>Ein Objekt, das als Schnittstelle für datengebundene Steuerelemente fungiert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um eine benutzerdefinierte Ansicht bereitzustellen, können Sie diese Methode in einer abgeleiteten Klasse überschreiben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Die Zeilenschlüsselwerte für die zu löschenden Datensätze.</param>
        <param name="oldValues">Die Zeilenwerte, die ausgewertet werden, um Datenkonflikte zu erkennen.</param>
        <summary>Führt einen Löschvorgang aus.</summary>
        <returns>Die Anzahl der vom Löschvorgang betroffenen Datensätze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel müssen Sie die-Methode nicht <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> aus Ihrem Code abrufen. Wenn Sie ein- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement mit einem Daten gebundenen Steuerelement verwenden, ruft das Daten gebundene Steuerelement automatisch die- <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> Methode auf, wenn der Benutzeraktionen zum Löschen eines Datensatzes durchführt. Sie rufen die- <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> Methode explizit auf, wenn Sie einen eigenen Prozess zum Löschen von Daten erstellen möchten. Beispielsweise können Sie die-Methode aufzurufen, <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> Wenn Sie einen Datensatz auf der Grundlage eines Ereignisses außerhalb des Daten gebundenen Steuer Elements löschen möchten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Löschvorgang abgeschlossen ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln Sie das- <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> Ereignis, um Ausnahmen vom Löschvorgang abzufangen, oder, um Ausgabeparameter zu überprüfen, nachdem der Vorgang abgeschlossen wurde. Sie können die Ausgabeparameter aus dem- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Objekt abrufen, das an Ereignishandler übermittelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft wird von der <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Klasse nicht verwendet.</summary>
        <value>Eine Auflistung von Parametern.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem Löschvorgang ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln Sie das- <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> Ereignis, um das zu löschende Objekt zu überprüfen, Daten Validierungs Fehler von der Datenklasse zu untersuchen, einen Wert vor dem Löschvorgang zu ändern oder den Löschvorgang abzubrechen. Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement übergibt ein- <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Objekt an Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> Ereignis. Das <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> -Objekt enthält die Daten, die gelöscht werden, und ermöglicht es Ihnen, den Löschvorgang abzubrechen. Wenn die Datenklasse eine- <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> Ausnahme auslöst, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> enthält das-Objekt diese Ausnahme in der- <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> Eigenschaft.  
  
 Wenn eine Ausnahme in einem Ereignishandler für das-Ereignis ausgelöst wird <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> , muss die Ausnahme in diesem Ereignishandler behandelt werden. Die-Ausnahme wird nicht an einen Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> Ereignis (über die- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft des- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Objekts) übermittelt. Die- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft enthält nur die Ausnahmen, die nach dem-Ereignis ausgelöst werden <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> .  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> Ereignis. Der Code bricht den Löschvorgang auf der Grundlage einer Eigenschaft in der <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> Eigenschaft und eines Werts von der Webseite ab. Wenn in dem Beispiel die- `OnSale` Eigenschaft auf festgelegt ist `true` , muss der Benutzer ein-Steuerelement auswählen, <xref:System.Web.UI.WebControls.CheckBox> um zu bestätigen, dass ein Datensatz gelöscht werden sollte.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Datensätze über das <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelement gelöscht werden können, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn automatische Löschvorgänge aktiviert sind, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> Eigenschaft auf fest, `true` Wenn Sie es Benutzern ermöglichen möchten, einen Daten Satz über das-Steuerelement zu löschen <xref:System.Web.UI.WebControls.LinqDataSource> . Wenn <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> `true` den Wert hat, <xref:System.Web.UI.WebControls.LinqDataSource> verwendet das Steuerelement LINQ to SQL, um automatisch den Befehl zum Löschen der Daten zu erstellen. Sie müssen eine Schnittstelle einschließen, mit der Benutzer einen zu löschenden Datensatz auswählen können, z. b. ein- <xref:System.Web.UI.WebControls.DetailsView> Steuerelement.  
  
 Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement unterstützt keine automatischen Löschvorgänge, wenn die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft oder die- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft festgelegt ist. In diesem Fall löst das <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement eine Ausnahme aus, wenn versucht wird, einen Löschvorgang durchgeführt wird.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt ein <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement, <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> für das auf festgelegt ist `true` . Ein <xref:System.Web.UI.WebControls.DetailsView> -Steuerelement zeigt die Daten an und erstellt eine Schaltfläche, mit der Benutzer einen Datensatz löschen können.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/linq/">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Datensätze über das <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelement eingefügt werden können, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn automatische Einfügevorgänge aktiviert sind, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> Eigenschaft auf fest, `true` Wenn Sie es Benutzern ermöglichen möchten, einen neuen Daten Satz über das-Steuerelement einzufügen <xref:System.Web.UI.WebControls.LinqDataSource> . Wenn den Wert <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> `true` hat, <xref:System.Web.UI.WebControls.LinqDataSource> verwendet das Steuerelement LINQ to SQL, um automatisch den Befehl zum Einfügen der Daten zu erstellen. Sie müssen eine Schnittstelle einschließen, mit der Benutzer einen neuen Datensatz einfügen können, z. b. ein- <xref:System.Web.UI.WebControls.DetailsView> Steuerelement.  
  
 Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement unterstützt keine automatischen INSERT-Vorgänge, wenn die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft oder die- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft festgelegt ist. In diesem Fall löst das <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement eine Ausnahme aus, wenn ein Einfügevorgang versucht wird.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt ein <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> für das auf festgelegt ist `true` . Ein <xref:System.Web.UI.WebControls.DetailsView> Steuerelement zeigt die Daten an und zeigt eine Schaltfläche an, die das Steuerelement in den Einfügemodus wechselt, in dem Benutzer einen neuen Datensatz erstellen und speichern  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/linq/">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableObjectTracking : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert ab, der angibt, ob Änderungen am Datenkontextobjekt nachverfolgt werden, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn Änderungen am Datenkontextobjekt nachverfolgt werden; andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> Eigenschaft wird nur verwendet, wenn Daten aus einem LINQ to SQL-Datenkontext Objekt ausgewählt werden.  
  
 Wenn Sie mit schreibgeschützten Daten interagieren, wird durch Festlegen der- <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> Eigenschaft auf die `false` Leistung verbessert, da die Daten nicht zwischengespeichert werden, um zu ermitteln, ob Sie geändert wurden. Allerdings wird auch die verzögerte Abfrage Ausführung deaktiviert. Diese Eigenschaft muss auf festgelegt werden, `true` Wenn Sie die verzögerte Abfrage Ausführung verwenden möchten.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Datensätze über das <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelement aktualisiert werden können, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn automatische Aktualisierungsvorgänge aktiviert sind, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> Eigenschaft auf fest, `true` Wenn Sie es Benutzern ermöglichen möchten, einen Daten Satz mithilfe des-Steuer Elements zu aktualisieren <xref:System.Web.UI.WebControls.LinqDataSource> . Wenn <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> `true` den Wert hat, <xref:System.Web.UI.WebControls.LinqDataSource> verwendet das Steuerelement LINQ to SQL, um automatisch den Befehl zum Aktualisieren der Daten zu erstellen. Sie müssen eine Schnittstelle einschließen, mit der Benutzer einen Datensatz aktualisieren können, z. b. ein- <xref:System.Web.UI.WebControls.DetailsView> Steuerelement.  
  
 Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement unterstützt keine automatischen Update Vorgänge, wenn die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft oder die- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft festgelegt ist. In diesem Fall löst das <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement eine Ausnahme aus, wenn versucht wird, einen Aktualisierungs Vorgang durchgeführt wird.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt ein <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement, <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> für das auf festgelegt ist `true` . Ein <xref:System.Web.UI.WebControls.DetailsView> -Steuerelement zeigt die Daten an und erstellt eine Schaltfläche, mit der Benutzer einen Datensatz aktualisieren können.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="linqDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="viewName">Der Name der abzurufenden Ansicht, standardmäßig „DefaultView“.</param>
        <summary>Gibt die dem <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Objekt zugeordnete Datenquellenansicht zurück.</summary>
        <returns>Die dem <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Objekt zugeordnete Datenquellenansicht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement unterstützt nur eine Datenquellen Sicht. Das- <xref:System.Web.UI.WebControls.LinqDataSourceView> Objekt hat den Standardnamen "DefaultView". Das <xref:System.Web.UI.WebControls.LinqDataSourceView> -Objekt definiert die Funktionen des Datenquellen-Steuer Elements, ruft Daten aus der zugrunde liegenden Datenbank ab und führt Vorgänge wie Sortieren, einfügen, löschen und aktualisieren aus.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><p>ViewName ist NULL („Nothing“ in Visual Basic) oder etwas anderes, aber nicht „DefaultView“.</p></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Übersicht über das LinqDataSource-Webserver Steuerelement</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Überblick über den ASP.NET-Datenzugriff</related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="linqDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Collection von Namen zurück, die die Liste der Ansichtsobjekte darstellt, die dem <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelement zugeordnet sind.</summary>
        <returns>Eine Auflistung mit einem Element, das den Namen "DefaultView" enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement unterstützt nur eine Ansicht der zugrunde liegenden Daten mit dem Namen `DefaultView` . Die- `GetViewNames` Methode gibt daher eine Auflistung mit nur einem-Element zurück, das diesen Ansichts Namen enthält.

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Übersicht über das LinqDataSource-Webserver Steuerelement</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Überblick über den ASP.NET-Datenzugriff</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die zum Gruppieren der abgerufenen Daten verwendeten Eigenschaften angibt, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die zum Erstellen der Group By-Klausel verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mithilfe der- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft können Sie angeben, welche Eigenschaften zum Konsolidieren von Datensätzen mit denselben Werten verwendet werden. Wenn Sie z. b. die- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft auf festlegen `Name` , werden alle Datensätze in der Abfrage, die denselben- `Name` Eigenschafts Wert aufweisen, als einzelner konsolidierte Datensatz zurückgegeben.  
  
 Sie können der-Eigenschaft mehr als eine Eigenschaft zuweisen, <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> indem Sie alle Eigenschaften in der `new` Funktion einschließen und jede Eigenschaft mit einem Komma trennen. Um z. b. nach den Eigenschaften zu gruppieren `Name` und anschließend `Category` die- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft auf festzulegen `new(Name, Category)` .  
  
 Die Werte in der-Eigenschaft, die für die Gruppierung verwendet werden, werden über eine generierte Eigenschaft mit dem Namen zurückgegeben `Key` . Sie fügen die- `Key` Eigenschaft in die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft ein, um die gruppierten Werte abzurufen. Sie können die- `Key` Eigenschaft mit dem-Schlüsselwort auf einen Alias festlegen `As` , Sie müssen jedoch keinen Alias verwenden. Beispielsweise können Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft auf eine Eigenschaft mit dem Namen festlegen `Category` . Sie können die konsolidierten Werte aus der- `Category` Eigenschaft abrufen, indem Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft auf festlegen `new(Key As ProductCategory)` .  
  
 Sie können auf die einzelnen Datensätze in einer Gruppierung zugreifen, indem Sie die- `It` Eigenschaft in die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft einschließen. Die- `It` Eigenschaft enthält eine Auflistung von Datensätzen, die in der gruppierten Eigenschaft einen Wert gemeinsam verwenden. Sie können die-Eigenschaft durchlaufen `It` , um die einzelnen Datensätze abzurufen.  
  
 Die- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft wird häufig mit Aggregations Methoden verwendet. Sie können die folgenden Aggregat Methoden verwenden:  
  
-   `Count()`  
  
-   `Average(` *Spalte* `)`  
  
-   `Sum(` *Spalte* `)`  
  
-   `Max(` *Spalte* `)`  
  
-   `Min(` *Spalte* `)`  
  
-   `Where(`*Bedingung*`)`  
  
-   `Any()`  
  
-   `All(`*Bedingung*`)`  
  
 Weitere Informationen finden Sie unter [Übersicht über das LinqDataSource-Webserver Steuer](https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)) Element und Gewusst [wie: Gruppieren und Aggregieren von Daten mit dem LinqDataSource-Steuer](https://docs.microsoft.com/previous-versions/aspnet/bb470251(v=vs.100))Element.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein-Steuerelement gezeigt <xref:System.Web.UI.WebControls.LinqDataSource> , das die zurückgegebenen Daten durch eine Eigenschaft mit dem Namen gruppiert `Category` . Sie gibt die freigegebenen Werte zurück und berechnet den Durchschnittspreis für die gruppierten Datensätze.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 Das folgende Beispiel zeigt ein <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement, das für das Gruppieren nach zwei Spalten konfiguriert ist. Die `Key` -Eigenschaft verweist auf ein-Objekt, das über zwei Eigenschaften verfügt: `ProductCategory` und `Color` . Das durch dargestellte Objekt `It` wird umbenannt `Products` . Das umbenannte `Products` Objekt enthält eine Sammlung der einzelnen Datensätze in einer Gruppierung, und jede Instanz enthält alle Spalten aus der Tabelle "Products".  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 Im folgenden Beispiel werden zwei- <xref:System.Web.UI.WebControls.ListView> Steuerelemente zum Anzeigen der Daten aus dem- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement im vorherigen Beispiel gezeigt. Ein <xref:System.Web.UI.WebControls.ListView> Steuerelement zeigt die gruppierten Daten an, und das andere <xref:System.Web.UI.WebControls.ListView> Steuerelement zeigt die einzelnen Namen von Produkten an, die zu dieser Gruppe gehören. Die-Eigenschaft des Daten gebundenen Steuer Elements <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> wird auf festgelegt `Products` . Dies ist der Alias für das- `It` Objekt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung der zum Erstellen der Group By-Klausel verwendeten Parameter ab.</summary>
        <value>Die Parameter, die zum Erstellen der Group By-Klausel verwendet werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement verwendet Parameter in der Auflistung <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> , um die Group By-Klausel zur Laufzeit zu erstellen. In der Regel verwenden Sie die <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> Sammlung nicht zum Gruppieren von Daten. Stattdessen können Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft verwenden. Sie verwenden die Auflistung <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> nur, wenn ein Wert in der Group By-Klausel zur Laufzeit festgelegt werden muss und dieser Wert kein Eigenschaftsname ist. Verwenden Sie beispielsweise die-Auflistung, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> um Daten abhängig davon zu gruppieren, ob die- `LastName` Eigenschaft in den Datensätzen einem vom Benutzer bereitgestellten Wert entspricht.  
  
 Wenn Sie Daten nach einer Eigenschaft gruppieren möchten und diese Eigenschaft nicht zur Laufzeit festgelegt werden muss, können Sie die Gruppierungs Eigenschaft in der-Eigenschaft definieren <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> . Wenn Sie z. b. Werte aus einer Datenbanktabelle zurückgeben möchten `LastName` , die nach gruppiert ist, legen <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Sie auf "LastName" ohne Parameter fest. Wenn Sie Daten dynamisch nach einer Eigenschaft gruppieren möchten, erstellen Sie einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> -Ereignis, und passen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft nach Bedarf an.  
  
 Der Name einer Eigenschaft kann nicht als Wert für einen Parameter in der Auflistung zugewiesen werden <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> . Sie fügen der Auflistung Parameter hinzu, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> Wenn Sie der-Eigenschaft eine Bedingung hinzufügen möchten <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> , die zur Laufzeit festgelegt werden muss.  
  
 Um Werte in der Auflistung festzulegen <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> , weisen Sie jedem Parameter einen Namen zu, und fügen Sie dann einen Platzhalter in der- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft für den benannten Parameter hinzu. Weisen Sie in der Group By-Klausel jedem Parameternamen das @-Symbol zu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="member this.Insert : System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">Die Zeilenwerte, die in die Datenquelle eingefügt werden sollen.</param>
        <summary>Führt einen Einfügevorgang aus.</summary>
        <returns>Die Anzahl der vom Einfügevorgang betroffenen Zeilen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel müssen Sie die-Methode nicht <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> aus Ihrem Code abrufen. Das Daten gebundene Steuerelement ruft automatisch die- <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> Methode auf, wenn der Benutzeraktionen zum Einfügen eines neuen Datensatzes durchführt. Sie rufen die- <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> Methode explizit auf, wenn Sie einen eigenen Prozess zum Einfügen von Daten erstellen möchten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein neuer Datensatz Programm gesteuert in die Datenquelle eingefügt wird, nachdem der Benutzer auf eine Schaltfläche geklickt hat. Der Code übergibt ein- <xref:System.Collections.Specialized.ListDictionary> Objekt, das Standardwerte enthält, an die- <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> Methode.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 Das folgende Beispiel zeigt das Markup für das vorherige Beispiel.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Einfügevorgang abgeschlossen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln Sie das- <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> Ereignis, um Ausnahmen aus dem Einfügevorgang abzufangen oder die Werte zu überprüfen, nachdem der Einfügevorgang abgeschlossen wurde. Sie können die neuen Werte durch das- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Objekt abrufen, das an Ereignishandler übermittelt wird. Beispielsweise können Sie das- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Objekt verwenden, um die von einer Datenbank generierte Identitäts Eigenschaft für einen neuen Datensatz abzurufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein Ereignishandler für das-Ereignis erstellt wird <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> , das auf Ausnahmen prüft und die Identity-Eigenschaft für den neuen Datensatz abruft.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem Einfügevorgang ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln Sie das- <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> Ereignis, um das einzufügende Objekt zu überprüfen, Daten Validierungs Fehler von der Datenklasse zu untersuchen, einen Wert vor dem Einfügevorgang zu ändern oder den Einfügevorgang abzubrechen. Das- <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Objekt, das an Ereignishandler für dieses Ereignis übermittelt wird, enthält das neue-Objekt, das in die Datenquelle eingefügt wird.  
  
 Wenn während des Einfügevorgangs ein Validierungs Fehler auftritt, enthält das- <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Objekt die Validierungs Ausnahmen, die von der Datenklasse ausgelöst werden. Ein Validierungs Fehler tritt auf, wenn der einzufügende Wert nicht mit dem Typ der Eigenschaft in der Datenklasse identisch ist, oder wenn er keine benutzerdefinierte Validierungs Überprüfung übergibt. In einem Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> -Ereignis können Sie die Validierungs Ausnahmen abrufen und entsprechende Maßnahmen ergreifen.  
  
 Wenn eine Ausnahme in einem Ereignishandler für das-Ereignis ausgelöst wird <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> , muss die Ausnahme in diesem Ereignishandler behandelt werden. Die-Ausnahme wird nicht an einen Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> Ereignis (über die- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft des- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Objekts) übermittelt. Die- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft enthält nur die Ausnahmen, die nach dem-Ereignis ausgelöst werden <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> .  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> Ereignis, mit dem Daten vor dem Einfügevorgang geändert werden. Das-Objekt aus der- <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> Eigenschaft wird in einen Typ mit dem Namen umgewandelt `Product` . Die- `DateModified` Eigenschaft des- `Product` Objekts wird auf das aktuelle Datum und die aktuelle Uhrzeit festgelegt.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 Das folgende Beispiel zeigt einen Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> Ereignis, das Validierungs Ausnahmen abruft.  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 Im vorherigen Beispiel werden Validierungs Ausnahmen abgerufen. Eine Ausnahme kann ausgelöst werden, wenn ein Wert nicht mit dem Typ der Eigenschaft identisch ist. Sie kann auch von einer angepassten Prüfung wie der im folgenden Beispiel ausgelöst werden. Die- `OnAgeChanging` Methode überprüft, ob die Zahl für die- `Age` Eigenschaft nicht negativ ist.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung der während eines Einfügevorgangs verwendeten Parameter ab.</summary>
        <value>Die Parameter, die während eines Einfügevorgangs verwendet werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalerweise werden die Werte, die für einen Einfügevorgang benötigt werden, <xref:System.Web.UI.WebControls.LinqDataSource> über das Daten gebundene Steuerelement an das-Steuerelement übermittelt. Sie können INSERT-Parameter angeben, wenn Sie einen Standardwert angeben oder definieren möchten, ob leere Werte in konvertiert werden sollen `null` . Sie müssen keinen Parameter für jeden Wert angeben, der eingefügt wird, sondern nur für die Werte, die behandelt werden müssen, wenn der Benutzer keinen Wert bereitstellt.  
  
 Die Werte, die Sie in der Auflistung angeben, <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> werden nur für Felder verwendet, die in der Datenquelle definiert sind, aber nicht im Daten Steuerelement gebunden sind. Nehmen wir beispielsweise an, dass eine Datenbanktabelle Spalten mit den Namen Name, address und PostalCode aufweist, aber ein <xref:System.Web.UI.WebControls.ListView> an die Tabelle gebundenes Steuerelement ist nur an die Felder Name und Adresse gebunden. Die Werte in der Auflistung werden <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> nur für das PostalCode-Feld verwendet. Sie werden nicht für das Feld Name und Adresse verwendet. Dies gilt auch, wenn für diese Felder kein Wert eingegeben wurde. Wenn das Daten gebundene Steuerelement Felder für alle Felder in der Datenquelle automatisch generiert, werden keine Werte aus der Auflistung <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> verwendet.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt ein- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement mit einem-Parameter, der einen Standardwert in der-Auflistung bereitstellt <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> . Wenn der Benutzer keinen Wert für die-Eigenschaft bereitstellt `Category` , wird der Standardwert, der vom-Parameter bereitgestellt wird, in der-Datenbank gespeichert.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="linqDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="savedState">Ein Objekt, das den Zustand des <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelements darstellt.</param>
        <summary>Lädt den Zustand der beizubehaltenden Werte im <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Die- `LoadViewState` Methode wird verwendet, um den zuvor gespeicherten Ansichts Zustand des-Steuer Elements zu laden <xref:System.Web.UI.WebControls.LinqDataSource> .

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Übersicht über das LinqDataSource-Webserver Steuerelement</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Überblick über den ASP.NET-Datenzugriff</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="linqDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Initialisiert das <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Objekt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="linqDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />-Objekt, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.Control.Unload" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die zum Anordnen der abgerufenen Daten verwendeten Felder angibt, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die zum Erstellen der ORDER BY-Klausel verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Eigenschaft, um anzugeben, welche Eigenschaften aus den zurückgegebenen Daten für die Sortierung verwendet werden sollen. Die-Eigenschaft zum Sortieren der Daten muss in der ursprünglichen Datenquelle vorhanden sein, aber Sie muss nicht in der-Eigenschaft enthalten sein <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> . Sie können einer `Ascending` Eigenschaft in der Zeichenfolge ein Leerzeichen und,, oder hinzufügen, um `ASC` anzugeben, `Descending` `DESC` <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> wie die geordneten Daten zurückgegeben werden.  
  
 Sie können in der-Eigenschaft mehr als eine Eigenschaft angeben, indem Sie die <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> einzelnen Eigenschaften durch ein Komma voneinander trennen. Wenn Sie z. b. nach Eigenschaften namens und sortieren möchten `LastName` `FirstName` , legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Eigenschaft auf "LastName, FirstName" fest.  
  
> [!NOTE]
>  Wenn Sie das <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement mit [!INCLUDE[ss2k](~/includes/ss2k-md.md)] oder verwenden [!INCLUDE[ssEW](~/includes/ssew-md.md)] und die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Eigenschaft auf festgelegt ist `true` , müssen Sie einen Wert in der- <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Eigenschaft angeben. Standardmäßig ist die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Eigenschaft `true` . Wenn Sie der-Eigenschaft einen Wert zuweisen <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> , müssen Sie auch alle Identitäts Spalten in die Liste der Eigenschaften einschließen, die in der Abfrage zurückgegeben werden.  
  
 Wenn die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> Eigenschaft auf festgelegt ist `true` , kann ein Daten gebundenes Steuerelement zur Laufzeit einen Sortier Ausdruck an das-Steuerelement übergeben <xref:System.Web.UI.WebControls.LinqDataSource> . Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement wendet den Sortier Ausdruck aus dem Daten gebundenen Steuerelement an, nachdem die-Eigenschaft angewendet wurde <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> . Daher werden die Daten gemäß dem Sortier Ausdruck aus dem Daten gebundenen Steuerelement zurückgegeben.  
  
   
  
## Examples  
 Im folgenden Beispiel werden Daten in umgekehrter alphabetischer Reihenfolge basierend auf den Werten in der-Eigenschaft zurückgegeben `Category` .  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung der zum Erstellen der Order By-Klausel verwendeten Parameter ab.</summary>
        <value>Die Parameter, die zum Erstellen der ORDER BY-Klausel verwendet werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement verwendet Parameter in der Auflistung <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> , um zur Laufzeit die Order By-Klausel zu erstellen. In der Regel legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> Eigenschaft auf fest, `true` Wenn Sie der Auflistung Parameter hinzufügen <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> . Wenn die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> Eigenschaft auf festgelegt ist `true` , wird jeder Parameter in der-Auflistung <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> der ORDER BY-Klausel in der Sequenz hinzugefügt, die in der-Auflistung angegeben ist <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> . Wenn die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> Eigenschaft ist `true` , müssen die Parameter nicht benannt werden, da Sie nacheinander angewendet werden und nicht mit einem Platzhalter übereinstimmen.  
  
 Wenn Sie in der ORDER BY-Klausel keinen Wert zur Laufzeit festlegen müssen, müssen Sie die Auflistung nicht verwenden <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> . Sie können die Felder definieren, die zum Anordnen der Daten in der Eigenschaft verwendet werden sollen <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> . Wenn Sie z. b. Werte aus einer Datenbanktabelle zurückgeben möchten, die nach geordnet `LastName` ist, legen <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Sie auf "LastName" ohne Parameter fest.  
  
 Sie können Parameter in der Auflistung festlegen <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> und die Parameter den Platzhaltern in der <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Eigenschaft zuordnen, aber dieser Ansatz hat eine beschränkte Anwendung. Wenn Sie diesen Ansatz verwenden, können die Parameter in der Auflistung keinen <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> Spaltennamen darstellen. Sie können einen Parameter auf einen Wert festlegen und diesen Wert dann mit Werten in einer Eigenschaft vergleichen. Beispielsweise können Sie die Daten abhängig davon sortieren, ob die Werte in einer-Eigenschaft kleiner als der Lauf Zeitwert sind, der durch den-Parameter dargestellt wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Web.UI.WebControls.LinqDataSource>-Steuerelement gezeigt, bei dem die <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>-Eigenschaft auf `true` festgelegt ist. In der Auflistung ist ein-Parameter enthalten <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> , der die Daten basierend auf dem Eigenschaftsnamen sortiert, den ein Benutzer aus einem Steuerelement auswählt <xref:System.Web.UI.WebControls.DropDownList> .  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Felder ab, die für das Sortieren von gruppierten Daten verwendet werden, oder legt sie fest.</summary>
        <value>Eine Zeichenfolge, die zum Erstellen der Order Groups By-Klausel verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> Eigenschaft, um anzugeben, wie die Gruppen von Daten sortiert werden. Beispielsweise können Sie nach der `CategoryID` -Eigenschaft gruppieren und dann jede Kategorie-ID-Gruppe nach dem Durchschnitt der- `Price` Eigenschaft sortieren.  
  
 Sie können die- <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> Eigenschaft nur festlegen, wenn Sie die Daten gruppiert haben. Wenn Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> Eigenschaft ohne Festlegen der- <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Eigenschaft festlegen, löst das-Steuerelement eine-Ausnahme aus <xref:System.Web.UI.WebControls.LinqDataSource> .  
  
 Die Eigenschaft, die zum Sortieren der Daten verwendet wird, muss entweder eine Eigenschaft sein, die zum Gruppieren der Daten verwendet wird, oder das Ergebnis einer Aggregations Funktion für die gruppierten Daten. Um anzugeben, wie die Daten sortiert werden sollen, können Sie einem Eigenschaftsnamen in der Zeichenfolge ein Leerzeichen und die Zeichenfolge "Aufsteigend", "ASC", "absteigend" oder "Debug" hinzufügen <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> .  
  
 Sie können in der-Eigenschaft mehr als eine Eigenschaft angeben <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> . Trennen Sie jede Eigenschaft durch ein Komma.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie die Daten mit zwei Eigenschaften gruppiert werden und wie die gruppierten Daten mithilfe einer dieser Eigenschaften sortiert werden. Die Daten aus einer Tabelle mit dem Namen `Products` werden mithilfe der Eigenschaften `CategoryID` und gruppiert `Discontinued` . Die gruppierten Daten werden nach der- `CategoryID` Eigenschaft sortiert.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 Das folgende Beispiel zeigt, wie die Daten mithilfe einer-Eigenschaft gruppiert werden und wie Sie anhand der Ergebnisse einer Aggregations Funktion sortiert wird. Die Daten aus der `Products` Tabelle werden mithilfe der- `CategoryID` Eigenschaft gruppiert. Sie wird basierend auf dem Durchschnitt der- `UnitPrice` Eigenschaft in jeder Gruppe sortiert.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung der zum Erstellen der Order Groups By-Klausel verwendeten Parameter ab.</summary>
        <value>Die Parameter, die zum Erstellen der Order Groups By-Klausel verwendet werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement verwendet Parameter in der Auflistung, um zur <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> Laufzeit die Order Groups By-Klausel zu erstellen.  
  
 Sie fügen der Auflistung Werte <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> nur hinzu, wenn Sie Werte zur Laufzeit in der Order Groups By-Klausel festlegen müssen. Mithilfe der-Eigenschaft können Sie die Felder definieren, die verwendet werden, um die Daten zu sortieren <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> .  
  
 Sie können Parameter in der Auflistung festlegen <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> und die Parameter den Platzhaltern in der <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> Eigenschaft zuordnen. Wenn Sie diesen Ansatz verwenden, können die Parameter in der Auflistung jedoch keinen <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> Spaltennamen darstellen; Sie müssen Werte darstellen. Sie können einen Parameter auf einen Wert festlegen und diesen Wert dann mit einer Eigenschaft vergleichen. Beispielsweise können Sie die Daten abhängig davon sortieren, ob die Werte in einer-Eigenschaft kleiner als der Lauf Zeitwert sind, der durch den-Parameter dargestellt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="linqDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Speichert den aktuellen Ansichtszustand des <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelements.</summary>
        <returns>Ein Objekt, das den gespeicherten Zustand des <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelements enthält.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Übersicht über das LinqDataSource-Webserver Steuerelement</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Überblick über den ASP.NET-Datenzugriff</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Eigenschaften und berechneten Werte ab, in den abgerufenen Daten eingeschlossen sind, oder legt diese fest.</summary>
        <value>Eine Zeichenfolge, die zum Erstellen der Select-Klausel verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie die-Eigenschaft nicht festlegen <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> , ruft das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement alle Eigenschaften (Datenspalten) aus dem Datenobjekt ab. Mit der- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft können Sie eine Teilmenge von Eigenschaften aus dem-Objekt abrufen oder neue Werte berechnen, wenn die Daten abgerufen werden.  
  
 Sie geben an, welche Eigenschaften abgerufen werden sollen, indem Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft auf die Namen der Eigenschaften festlegen, die Sie in die zurückgegebenen Daten einschließen möchten.  
  
 Wenn Sie eine Teilmenge von Eigenschaften aus dem Datenobjekt abrufen, erstellt das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement dynamisch eine-Klasse, die nur die Eigenschaften enthält, die Sie in der- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft angeben. Eine Klasse wird auch dynamisch erstellt, wenn Sie Eigenschaften berechnen, die keine Eigenschaften im Datenobjekt sind. In diesen Fällen ist das von der Abfrage zurückgegebene-Objekt keine Instanz der-Klasse, die in der- <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft angegeben ist. Stattdessen müssen Sie die- `new` Methode in der- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft verwenden, um anzugeben, dass eine neue Klasse von der Abfrage zurückgegeben wird. Um beispielsweise nur die `FirstName` -Eigenschaft und die- `LastName` Eigenschaft aus einem Objekt zurückzugeben, das mehr als diese Eigenschaften enthält, legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft auf fest `new(FirstName, LastName)` . Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement erstellt dynamisch die neue-Klasse, die Sie in der-Methode angegeben haben `new` .  
  
 Sie können das `As` Schlüsselwort verwenden, um einen Alias einem ausgewählten Wert zuzuweisen. Wenn Sie einen Alias zuweisen, müssen Sie die Aliasing-Eigenschaften in die- `new` Methode einschließen. Alle Daten gebundenen Steuerelemente, die an die Ergebnisse aus dem-Steuerelement gebunden <xref:System.Web.UI.WebControls.LinqDataSource> werden, müssen vom Alias auf die-Eigenschaft verweisen. Wenn Sie z. b. die <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> -Eigenschaft auf festlegen `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)` , kann das Daten gebundene Steuerelement auf zwei Eigenschaften zugreifen: `SalesRegion` und `RevenueThousands` .  
  
 Die- `new` Funktion wird in der- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft gemäß den in der folgenden Tabelle aufgeführten Bedingungen verwendet.  
  
|Auswählen|Verwendung von "New"|Beispiel|  
|------------|----------------|-------------|  
|Einzelne Eigenschaft.|`new` nicht erforderlich.|`Select="Category"`|  
|Mehrere Eigenschaften.|`new` erforderlich.|`Select="new(Category, Name)"`|  
|Einzelne oder mehrere Eigenschaften, die einen Alias aufweisen.|`new` erforderlich.|`Select="new(Category As CategoryGroup)"`|  
  
 Wenn Sie automatische Datenänderungen aktivieren möchten, aber nicht alle Eigenschaften aus dem Datenobjekt anzeigen möchten, legen Sie die-Eigenschaft nicht fest <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> . Verwalten Sie stattdessen die Anzeige über das Daten gebundene Steuerelement. Wenn Sie das- <xref:System.Web.UI.WebControls.DetailsView> Steuerelement oder das-Steuerelement verwenden <xref:System.Web.UI.WebControls.GridView> , müssen Sie auch die- <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> Eigenschaft oder die- <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> Eigenschaft auf festlegen `false` . Alle Werte, die nicht im Daten gebundenen Steuerelement angezeigt werden, werden im Ansichts Zustand gespeichert. Sie werden bei der Datenaktualisierung unverändert an die Datenquelle übermittelt.  
  
 Wenn Sie Daten in der Abfrage gruppieren, können Sie Aggregat Methoden in die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft einschließen. Sie können die folgenden Aggregat Methoden verwenden:  
  
-   `Count()`  
  
-   `Average(` *Spalte* `)`  
  
-   `Sum(` *Spalte* `)`  
  
-   `Max(` *Spalte* `)`  
  
-   `Min(` *Spalte* `)`  
  
-   `Where(`*Bedingung*`)`  
  
-   `Any()`  
  
-   `All(`*Bedingung*`)`  
  
 Weitere Informationen finden Sie unter [Übersicht über das LinqDataSource-Webserver Steuer](https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)) Element und Gewusst [wie: Gruppieren und Aggregieren von Daten mit dem LinqDataSource-Steuer](https://docs.microsoft.com/previous-versions/aspnet/bb470251(v=vs.100))Element.  
  
 Wenn Sie Daten gruppieren, können Sie `Key` `It` die Eigenschaften und, die dynamisch erstellt werden, in die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft einschließen. Die- `Key` Eigenschaft verweist auf die Werte in der Eigenschaft oder den Eigenschaften, die zum Gruppieren der Daten verwendet wurden. Wenn Sie z. b. nach einer-Eigenschaft mit dem Namen gruppieren `Category` , enthält die- `Key` Eigenschaft jeden eindeutigen Wert in der- `Category` Eigenschaft. Die- `It` Eigenschaft verweist auf eine Auflistung einzelner Datensätze in einer Gruppierung von Daten. Sie können die-Eigenschaft durchlaufen `It` , um die einzelnen Datensätze abzurufen, die im Gruppierungs Vorgang konsolidiert wurden. Wenn Sie z. b. nach einer-Eigenschaft mit dem Namen gruppieren `Category` , enthält die- `It` Eigenschaft alle einzelnen Datensätze, die einen gemeinsamen Wert in der- `Category` Eigenschaft haben.  
  
 Wenn Sie das- `It` Schlüsselwort beim <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Gruppieren von Daten in die-Eigenschaft einschließen, müssen Sie dem Schlüsselwort einen Alias zuweisen `It` . Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement löst eine Ausnahme aus, wenn keinen `It` Alias hat. Sie können dem Schlüsselwort einen Alias zuweisen `Key` , dies ist jedoch nicht erforderlich.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft auf eine Teilmenge der Eigenschaften im Datenobjekt festgelegt wird.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 Im folgenden Beispiel wird gezeigt, wie Sie Werte in einer Eigenschaft abrufen, die zum Gruppieren von Daten verwendet wurde, und um den Durchschnitt für die gruppierten Datensätze abzurufen. Das- `Key` Schlüsselwort enthält die Eigenschaft, die zum Gruppieren von Daten verwendet wurde. In diesem Beispiel `Key` enthält die freigegebenen Werte aus der- `ProductCategory` Eigenschaft.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Datenabrufvorgang abgeschlossen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln Sie das- <xref:System.Web.UI.WebControls.LinqDataSource.Selected> Ereignis, um Ausnahmen des Datenabruf Vorgangs abzufangen oder um das Datenobjekt zu untersuchen, nachdem der Abruf Vorgang abgeschlossen wurde. Das-Objekt ist für das- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Objekt verfügbar, das an Ereignishandler übermittelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem Datenabrufvorgang ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln Sie das- <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> Ereignis, um die folgenden Aufgaben auszuführen:  
  
-   Ändern Sie die Parameter für den Datenabruf.  
  
-   Generieren Sie die Abfrageprogramm gesteuert.  
  
-   Ändern Sie die Werte für Sortieren oder Paging.  
  
-   Führen Sie eine benutzerdefinierte Sortierung oder Paging aus.  
  
-   Brechen Sie den Datenabruf Vorgang ab.  
  
 Das- <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Objekt, das an Ereignishandler für dieses Ereignis übermittelt wird, enthält die Parameter für den Datenabruf Vorgang. Sie können die Parameter im- <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> Ereignishandler ändern, bevor die Abfrage ausgeführt wird, oder Sie können ein neues Resultset erstellen und es der- <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> Eigenschaft zuweisen.  
  
 Die Möglichkeit, benutzerdefinierte Sortierungen oder Paging in Handlern für dieses Ereignis zu implementieren, kann durch das Steuerelement eingeschränkt werden, das an gebunden ist <xref:System.Web.UI.WebControls.LinqDataSource> . Wenn z. b. auf die Spaltenüberschrift eines <xref:System.Web.UI.WebControls.GridView> Steuer Elements geklickt wird, führt das Steuerelement eine automatische Sortierung aus, die die im Ereignishandler feststehende Reihenfolge überschreiben kann.  
  
 Wenn eine Ausnahme in einem Ereignishandler für das-Ereignis ausgelöst wird <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> , muss die Ausnahme in diesem Ereignishandler behandelt werden. Die-Ausnahme wird nicht an einen Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Selected> Ereignis (über die- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft des- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Objekts) übermittelt. Die- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft enthält nur die Ausnahmen, die nach dem-Ereignis ausgelöst werden <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> .  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> Ereignis. Der Handler erstellt eine Abfrage, die Werte aus einem Array von Zeichen folgen Werten auf der Webseite abruft.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 Im folgenden Beispiel wird gezeigt, wie die-Eigenschaft dem- <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> Objekt zugewiesen wird, das von einer Methode zurückgegeben wird, die eine gespeicherte Prozedur darstellt.  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung der während eines Datenabrufvorgangs verwendeten Parameter ab.</summary>
        <value>Die Parameter, die zum Erstellen der Select-Klausel verwendet werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement verwendet Parameter in der Auflistung <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> , um die SELECT-Klausel zur Laufzeit zu erstellen. Sie fügen der Auflistung Parameter hinzu, <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> Wenn Sie Lauf Zeit Werte in der SELECT-Klausel verwenden möchten. Beispielsweise können Sie der Auflistung einen Parameter hinzufügen <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> , um eine Eigenschaft im Profil des Benutzers darzustellen. Anschließend können Sie diese Eigenschaft und einen Wert aus der Datenquelle verwenden, um einen neuen Wert zu berechnen.  
  
 Wenn Sie in der SELECT-Klausel keinen Wert zur Laufzeit festlegen müssen, müssen Sie die Auflistung nicht verwenden <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> . Sie können die Eigenschaften definieren, die in der-Eigenschaft abgerufen werden sollen <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> . Um z. b. den `FirstName` -Wert und den- `LastName` Wert aus einer Datenbanktabelle zurückzugeben, legen <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Sie auf "FirstName, LastName" ohne Parameter fest.  
  
 Um Werte in der Auflistung festzulegen <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> , fügen Sie in der- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft für den benannten Parameter einen Platzhalter hinzu. Weisen Sie in der SELECT-Klausel jedem Parameternamen das @-Symbol zu.  
  
 Sie können einen-Parameter in der-Auflistung nicht verwenden <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> , um einen Eigenschaftsnamen darzustellen. Um die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft dynamisch auf den Namen einer Eigenschaft festzulegen, erstellen Sie einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> -Ereignis, und passen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Eigenschaft nach Bedarf an.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein vom Benutzer bereitgestellter Wert verwendet wird, um einen Wert in den zurückgegebenen Daten zu berechnen. Der Benutzer kann einen Wert in das Textfeld eingeben, der die Anzahl der Produktionstage darstellt. Dieser Wert wird durch einen Wert aus einer Datenbank dividiert, der die Anzahl der Tage für die Produktion eines Produkts darstellt. Der zurückgegebene Wert gibt an, wie viele Produkte innerhalb der angegebenen Anzahl von Tagen gefertigt werden können. Die Eingabe des Benutzers ist in der-Auflistung im SELECT-Befehl enthalten <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> .  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Daten von der Datenquelle im Ansichtszustand gespeichert werden sollen, um sicherzustellen, dass die Daten nicht vor dem Aktualisieren oder Löschen von einem anderen Prozess geändert wurden.</summary>
        <value><see langword="true" />, wenn die Werte im Ansichtszustand gespeichert werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Aktualisierungs-und Löschvorgänge aktiviert wurden, speichert das Steuerelement standardmäßig <xref:System.Web.UI.WebControls.LinqDataSource> die ursprünglichen Werte für alle Datensätze im Ansichts Zustand. Das <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement speichert Werte für alle Primärschlüssel und alle Eigenschaften, die nicht mit dem-Attribut markiert sind `UpdateCheck.Never` `Column` . Sie legen die- `UpdateCheck` Eigenschaft des- `Column` Attributs in fest [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] .  
  
 Bevor LINQ to SQL aktualisiert oder löscht, werden die Werte im Ansichts Zustand anhand der aktuellen Werte in der Datenquelle überprüft. Wenn die Werte nicht identisch sind, hat sich der Datenquellen Daten Satz geändert. In diesem Fall löst LINQ to SQL eine Ausnahme aus und wird nicht mit dem Aktualisierungs-oder Löschvorgang fortgesetzt. Weitere Informationen zu LINQ to SQL finden Sie unter [LINQ to SQL](/dotnet/framework/data/adonet/sql/linq/).  
  
 Wenn die ursprünglichen Werte im Ansichts Zustand gespeichert werden, kann dies dazu führen, dass die Seitengröße unnötig groß wird und sensible Daten für böswillige Benutzer verfügbar gemacht werden. Sie können das Speichern von Werten im Ansichts Zustand deaktivieren, indem Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> Eigenschaft auf festlegen `false` . Wenn Sie dies tun, müssen Sie eine eigene Methode bereitstellen, um sicherzustellen, dass sich die Daten nicht geändert haben. Wenn Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> Eigenschaft auf festlegen `false` , werden die ursprünglichen Werte im Ansichts Zustand für das Daten gebundene Steuerelement nicht beibehalten. In diesem Fall kann LINQ to SQL die Integrität der Daten nicht überprüfen. LINQ to SQL löst eine Ausnahme aus, die einen Daten Konflikt angibt, auch wenn sich die Daten in der Datenquelle nicht geändert haben.  
  
 Wenn die zugrunde liegende Datenquelle ein Zeitstempel-Feld enthält, das während eines Updates automatisch aktualisiert wird, können Sie nur diesen Wert im Ansichts Zustand speichern. In diesem Fall wird die Zeitstempel-Eigenschaft in der Entitäts Klasse auf festgelegt, `IsVersion=true` und alle Eigenschaften werden auf festgelegt `UpdateCheck.Never` . Da ein Zeitstempel-Feld automatisch von der Datenbank aktualisiert wird, wenn sich Daten in diesem Datensatz ändern, bestimmt LINQ to SQL anhand dieses Werts, wenn sich die Daten geändert haben. Dadurch wird die Größe des Ansichts Zustands reduziert, und es werden keine sensiblen Daten verfügbar gemacht. LINQ to SQL überprüft die Datenkonsistenz, indem er den Zeitstempel-Wert im Ansichts Zustand mit dem Zeitstempel-Wert in der Datenbank vergleicht. Weitere Informationen finden Sie unter Exemplarische Vorgehensweise [: Verwenden eines Zeitstempels mit dem LinqDataSource-Steuerelement, um die Datenintegrität zu überprüfen](https://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/linq/">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Web::DynamicData::IDynamicDataSource::ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.ContextType : Type with get, set" Usage="System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Der Typ, der der Klasse zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.WebControls.LinqDataSource>-Instanz in eine <xref:System.Web.DynamicData.IDynamicDataSource>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System::Web::DynamicData::IDynamicDataSource::EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.EntitySetName : string with get, set" Usage="System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Der Name der Entität.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.WebControls.LinqDataSource>-Instanz in eine <xref:System.Web.DynamicData.IDynamicDataSource>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.Exception : EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; " Usage="member this.System.Web.DynamicData.IDynamicDataSource.Exception : System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.WebControls.LinqDataSource>-Instanz in eine <xref:System.Web.DynamicData.IDynamicDataSource>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Eigenschaft oder des Felds in der Datenkontextklasse für die Datenauflistung ab oder legt diese fest.</summary>
        <value>Eine Zeichenfolge, die den Namen der Eigenschaft mit der Datenauflistung enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft auf den Namen der Eigenschaft oder des Felds fest, das die Daten darstellt, die Sie abrufen möchten. Wenn Sie eine Verbindung mit einer Datenbanktabelle herstellen, ist der Name der Eigenschaft in der Regel mit dem Namen der Tabelle identisch. Wenn Sie eine Verbindung mit einer in-Memory-Datensammlung herstellen, legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft auf den Namen der Eigenschaft oder des Felds fest, das bzw. das die Datensammlung zurückgibt.  
  
 Sie können eine Eigenschaft, die einen beliebigen Typ zurückgibt, der- <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft für Abruf Vorgänge zuweisen. Wenn das Objekt, das von der-Eigenschaft dargestellt wird, nicht implementiert, umschließt <xref:System.Collections.IEnumerable> das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement automatisch das-Objekt in einer Instanz eines- <xref:System.Collections.IEnumerable> Objekts.  
  
 Um automatische Update-, INSERT-oder DELETE-Vorgänge zu aktivieren, muss die Klasse, die der-Eigenschaft zugewiesen ist, <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> von abgeleitet werden, und die-Eigenschaft, die der- <xref:System.Data.Linq.DataContext> Eigenschaft zugewiesen ist, <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> muss von abgeleitet sein <xref:System.Data.Linq.Table%601> .  
  
 Weitere Informationen zum Auswählen von Daten aus einer Instanz einer Klasse finden Sie unter der- <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt zwei-Steuer <xref:System.Web.UI.WebControls.LinqDataSource> Elemente. In einem <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement wird die- <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft auf eine Eigenschaft in einer Klasse festgelegt. Diese Eigenschaft gibt ein Array von Zeichen folgen zurück. Im anderen <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement wird die- <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft auf eine Eigenschaft festgelegt, die eine Datenbanktabelle darstellt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 Die Klasse `ExampleDataContext` mit dem Namen, die die Datenbanktabelle darstellt, wird in diesem Beispiel nicht gezeigt. Damit dieses Beispiel funktioniert, müssen Sie diese Klasse erstellen, indem Sie eine LINQ to SQL Klasse mit dem Namen example. dbml hinzufügen und eine Tabelle mit dem Namen Movie auf das ziehen [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] . Eine Klasse namens `ExampleDataContext` mit einer-Eigenschaft mit dem Namen `Movies` wird generiert.  
  
 Das folgende Beispiel zeigt die-Klasse `MovieLibrary` mit dem Namen, auf die im-Steuerelement verwiesen wird <xref:System.Web.UI.WebControls.LinqDataSource> .  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="linqDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verfolgt Änderungen des Ansichtszustands für das <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Steuerelement, sodass die Änderungen im <see cref="T:System.Web.UI.StateBag" />-Objekt für das Steuerelement gespeichert werden können.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Übersicht über das LinqDataSource-Webserver Steuerelement</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Überblick über den ASP.NET-Datenzugriff</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Die Zeilenschlüsselwerte für die zu aktualisierenden Datensätze.</param>
        <param name="values">Die Zeilenwerte, die in der Datenquelle aktualisiert werden sollen.</param>
        <param name="oldValues">Die Zeilenwerte, die ausgewertet werden, um Datenkonflikte zu erkennen.</param>
        <summary>Führt einen Aktualisierungsvorgang aus.</summary>
        <returns>Die Anzahl der vom Aktualisierungsvorgang betroffenen Datensätze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel müssen Sie die-Methode nicht <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> aus Ihrem Code abrufen. Das Daten gebundene Steuerelement ruft automatisch die- <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> Methode auf, wenn der Benutzeraktionen zum Aktualisieren eines Datensatzes durchführt. Sie rufen die- <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> Methode explizit auf, wenn Sie einen eigenen Prozess zum Aktualisieren von Daten erstellen möchten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein Datensatz in der Datenquelle Programm gesteuert aktualisiert wird, nachdem der Benutzer auf eine Schaltfläche geklickt hat. Der Code übergibt ein <xref:System.Collections.Specialized.ListDictionary> -Objekt, das den Schlüsselwert enthält, ein <xref:System.Collections.Specialized.ListDictionary> -Objekt, das die ursprünglichen Werte enthält, und ein-Objekt, <xref:System.Collections.Specialized.ListDictionary> das die neuen Werte enthält, an die- <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> Methode.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 Das folgende Beispiel zeigt das Markup für das vorherige Beispiel.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Aktualisierungsvorgang abgeschlossen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln Sie das- <xref:System.Web.UI.WebControls.LinqDataSource.Updated> Ereignis, um Ausnahmen vom Aktualisierungs Vorgang zu erfassen oder um die Werte der Ausgabeparameter nach Abschluss des Aktualisierungs Vorgangs zu überprüfen. Die Ausgabeparameter sind über das- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Objekt verfügbar, das an Ereignishandler übermittelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Auflistung wird von der <see cref="T:System.Web.UI.WebControls.LinqDataSource" />-Klasse nicht verwendet.</summary>
        <value>Eine Auflistung von Parametern.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem Aktualisierungsvorgang ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln Sie das- <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis, um das zu Aktualisier Ende Objekt zu überprüfen, Daten Validierungs Fehler der Datenklasse zu untersuchen, einen Wert vor dem Aktualisierungs Vorgang zu ändern oder den Aktualisierungs Vorgang abzubrechen. Das <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> -Objekt, das an Ereignishandler übermittelt wird, enthält sowohl das ursprüngliche-Objekt als auch das aktualisierte-Objekt.  
  
 Wenn während des Aktualisierungs Vorgangs ein Validierungs Fehler auftritt, <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> enthält das-Objekt die Validierungs Ausnahmen, die von der Datenklasse ausgelöst werden. Ein Validierungs Fehler tritt auf, wenn ein zu aktualisierenden Wert nicht mit dem Typ der Eigenschaft in der Datenklasse identisch ist, oder wenn er keine benutzerdefinierte Validierungs Überprüfung übergibt. In einem Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Updating> -Ereignis können Sie die Validierungs Ausnahmen abrufen und entsprechende Maßnahmen ergreifen.  
  
 Wenn eine Ausnahme in einem Ereignishandler für das-Ereignis ausgelöst wird <xref:System.Web.UI.WebControls.LinqDataSource.Updating> , muss die Ausnahme in diesem Ereignishandler behandelt werden. Die-Ausnahme wird nicht an einen Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Updated> Ereignis (über die- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft des- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Objekts) übermittelt. Die- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft enthält nur die Ausnahmen, die nach dem-Ereignis ausgelöst werden <xref:System.Web.UI.WebControls.LinqDataSource.Updating> .  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis. Der Code vergleicht Eigenschaften aus der <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> -Eigenschaft und der- <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> Eigenschaft, um festzustellen, ob sich ein Wert geändert hat. Wenn der Wert geändert wurde, wird ein Wert der- <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> Eigenschaft auf festgelegt `true` .  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 Das folgende Beispiel zeigt einen Ereignishandler für das- <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis, das Validierungs Ausnahmen abruft.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 Im vorherigen Beispiel werden Validierungs Ausnahmen abgerufen. Eine Ausnahme kann ausgelöst werden, wenn ein Wert nicht mit dem Typ der Eigenschaft identisch ist. Sie kann auch von einer angepassten Prüfung wie der im folgenden Beispiel ausgelöst werden. Die- `OnAgeChanging` Methode überprüft, ob die Zahl für die- `Age` Eigenschaft nicht negativ ist.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die Bedingungen angibt, die erfüllt sein müssen, damit ein Datensatz in die angerufenen Daten einbezogen wird.</summary>
        <value>Eine Zeichenfolge, die zum Erstellen der Where-Klausel verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Eigenschaft, um die Bedingungen für den Datensatz anzugeben, der von einer Abfrage zurückgegeben werden soll. Die Syntax für die- <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Eigenschaft ist identisch mit der Syntax für eine LINQ-WHERE-Klausel in c#.  
  
 Sie geben einen Ausdruck an, der zu einem booleschen Wert führt, und wenn der Ausdruck `true` für eine bestimmte Zeile ergibt, wird die Zeile in das Resultset eingeschlossen. Ausdrücke bestehen aus Spaltennamen, Vergleichs Operatoren und Werten, mit denen verglichen werden soll, wie im folgenden Beispiel gezeigt:  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 Wenn Sie mehrere Ausdrücke angeben möchten, die durch logische `AND` or `OR` -Operatoren verknüpft sind, verwenden Sie `&&` als logischen AND-Operator und `||` als logischen OR-Operator, wie im folgenden Beispiel gezeigt:  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 Wenn Sie eine Eigenschaft mit einem literalzeichenfolgenwert testen möchten, muss der Literalzeichenfolgen-Wert in doppelte Anführungszeichen eingeschlossen werden. Um dies in Markup zu erreichen, müssen Sie den- <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> klauselwert in einfache Anführungszeichen einschließen, wie im folgenden Beispiel gezeigt:  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 Verwenden Sie zum Testen eines literalen Zeichen folgen Werts im Code Escapezeichen, die für die Sprache geeignet sind, die Sie verwenden, um doppelte Anführungszeichen einzufügen, wie im folgenden Beispiel gezeigt:  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 Wenn Sie testen möchten, ob eine Zeichenfolge größer als oder kleiner als eine andere Zeichenfolge ist, müssen Sie Methoden der-Klasse verwenden, <xref:System.String> anstatt `<` or `>` -Operatoren zwischen dem Spaltennamen und dem Zeichen folgen Wert zu verwenden. In den folgenden Beispielen wird veranschaulicht, wie Zeilen ausgewählt werden, die Kategoriewerte aufweisen, die kleiner als, kleiner oder gleich, größer als oder größer oder gleich "Sport" sind:  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 Sie können auch andere Methoden der <xref:System.String> -Klasse verwenden, wie z <xref:System.String.StartsWith%2A> <xref:System.String.EndsWith%2A> . b., und <xref:System.String.Contains%2A> . Weitere Informationen zum Vergleichen von Zeichen folgen finden Sie unter [vergleichen](/dotnet/standard/base-types/comparing)von Zeichen folgen. Weitere Informationen zur Syntax der WHERE-Klausel finden Sie unter [c#-Operatoren](/dotnet/csharp/language-reference/operators/) und [WHERE-Klausel](/dotnet/csharp/language-reference/keywords/where-clause).  
  
 Zusätzlich zum Filtern basierend auf statischen Werten, die Sie beim Erstellen der Webseite definieren, können Sie auf der Grundlage dynamischer Werte filtern, die zur Laufzeit ausgewertet werden. In diesem Fall fügen Sie einen benannten Parameter in die <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Eigenschaft ein, der als Platzhalter für den Wert fungiert. Dann fügen Sie der Auflistung einen Parameter mit dem entsprechenden Namen hinzu <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> .  
  
 Alternativ können Sie die <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> -Eigenschaft auf festlegen `true` und die Parameter in der Auflistung definieren <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> . Wenn die- <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> Eigenschaft ist `true` , müssen Sie die benannten Parameter nicht in die- <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Eigenschaft einschließen. Stattdessen generiert das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement automatisch die WHERE-Klausel aus den Parametern in der- <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Eigenschaft.  
  
 Weitere Informationen zum Filtern von Daten finden Sie unter Exemplarische Vorgehensweise [: auswählen und Filtern einer Teilmenge von Daten mit LinqDataSource-und GridView-Steuerelementen](https://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205).  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die von einer Abfrage zurückgegebenen Daten basierend auf einer statischen Bedingung gefiltert werden.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 Das folgende Beispiel zeigt, wie die Daten anhand eines Werts gefiltert werden, der vom Benutzer zur Laufzeit bereitgestellt wird. In diesem Beispiel <xref:System.Web.UI.WebControls.DropDownList> werden ein-Steuerelement und ein- <xref:System.Web.UI.WebControls.GridView> Steuerelement auf der Seite angezeigt. Wenn der Benutzer einen der Werte im Steuerelement auswählt <xref:System.Web.UI.WebControls.DropDownList> , <xref:System.Web.UI.WebControls.LinqDataSource> wählt das Steuerelement aus der `Products` Tabelle nur Zeilen aus, deren `UserPrice` Werte gleich dem ausgewählten Wert sind. Das- <xref:System.Web.UI.WebControls.GridView> Steuerelement zeigt dann die gefilterten Daten an.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung von Parametern ab, die zum Erstellen der Where-Klausel verwendet werden.</summary>
        <value>Eine Auflistung der Parameter, die zum Erstellen der Where-Klausel in der <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" />-Eigenschaft verwendet werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement verwendet Parameter in der Auflistung <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> , um die WHERE-Klausel zur Laufzeit zu erstellen. Sie fügen der Auflistung Parameter hinzu, <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Wenn Sie eine oder mehrere der Bedingungen in der WHERE-Klausel Programm gesteuert festlegen möchten. Beispielsweise können Sie eine Datenbanktabelle nach Datensätzen suchen, deren Nachname gleich dem Wert eines-Steuer Elements ist <xref:System.Web.UI.WebControls.TextBox> . In diesem Fall fügen Sie der-Auflistung <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> für den Textfeldwert einen-Parameter hinzu.  
  
 Wenn Sie in der WHERE-Klausel keinen Wert zur Laufzeit festlegen müssen, müssen Sie die-Auflistung nicht verwenden <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> . Sie können die Felder definieren, die in der-Eigenschaft abgerufen werden sollen <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> . Um z. b. Werte aus einer Datenbanktabelle zurückzugeben, in der `LastName` "Adams" im Markup entspricht, legen Sie die- <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Eigenschaft `'LastName = "Adams"'` ohne Parameter auf fest.  
  
 Um Werte in der Auflistung festzulegen <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> , weisen Sie jedem Parameter einen Namen zu, und fügen Sie dann der- <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Eigenschaft für diesen Parameter einen Platzhalter hinzu. Weisen Sie in der WHERE-Klausel jedem Parameternamen das @-Symbol zu.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die-Auflistung verwendet wird <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> , um die WHERE-Klausel dynamisch zu erstellen. Das- <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement gibt alle Datensätze mit einem Wert in der `Price` Spalte zurück, der größer ist als der Wert, der vom Benutzer in einem-Steuerelement ausgewählt wurde <xref:System.Web.UI.WebControls.DropDownList> .  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

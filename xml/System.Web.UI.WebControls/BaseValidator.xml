<Type Name="BaseValidator" FullName="System.Web.UI.WebControls.BaseValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0365df0568ee43a6b32501234a8371bf0b86e8a8" /><Meta Name="ms.sourcegitcommit" Value="f9576bf8c61e3d46834aeeff50f858359f2a99ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/09/2020" /><Meta Name="ms.locfileid" Value="77107355" /></Metadata><TypeSignature Language="C#" Value="public abstract class BaseValidator : System.Web.UI.WebControls.Label, System.Web.UI.IValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BaseValidator extends System.Web.UI.WebControls.Label implements class System.Web.UI.IValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BaseValidator&#xA;Inherits Label&#xA;Implements IValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class BaseValidator abstract : System::Web::UI::WebControls::Label, System::Web::UI::IValidator" />
  <TypeSignature Language="F#" Value="type BaseValidator = class&#xA;    inherit Label&#xA;    interface IValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Label</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IValidator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ErrorMessage")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fungiert als die abstrakte Basisklasse für Validierungssteuerelemente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.UI.WebControls.BaseValidator>-Klasse stellt die Kern Implementierung für alle Validierungs Steuerelemente bereit. Validierungs Steuerelemente werden verwendet, um Benutzereingaben in einem zugeordneten Eingabe Steuerelement zu validieren. Wenn der Benutzer einen Wert eingibt, der die Überprüfung nicht besteht, zeigt das Validierungs Steuerelement eine Fehlermeldung an. Da ein Validierungs Steuerelement vom Eingabe Steuerelement getrennt ist, können Sie die Fehlermeldung an beliebiger Stelle auf der Seite relativ zum Eingabe Steuerelement positionieren. ASP.net bietet mehrere Validierungs Steuerelemente, die bestimmte Validierungs Typen ausführen. In der folgenden Tabelle werden diese Steuerelemente beschrieben.

|Validierungs Steuerelement|BESCHREIBUNG|
|------------------------|-----------------|
|<xref:System.Web.UI.WebControls.CompareValidator>|Überprüft einen Wert mit dem in ein anderes Eingabe Steuerelement eingegebenen Wert, mit einem konstanten Wert oder mit einem ordnungsgemäßen Datentyp, indem die <xref:System.Web.UI.WebControls.CompareValidator.Operator%2A?displayProperty=nameWithType>-Eigenschaft auf <xref:System.Web.UI.WebControls.ValidationCompareOperator.DataTypeCheck?displayProperty=nameWithType>festgelegt wird.|
|<xref:System.Web.UI.WebControls.CustomValidator>|Überprüft einen Wert mithilfe einer vom Benutzer bereitgestellten benutzerdefinierten Validierungs Routine.|
|<xref:System.Web.UI.WebControls.RangeValidator>|Überprüft, ob ein Wert innerhalb eines Wertebereichs liegt.|
|<xref:System.Web.UI.WebControls.RegularExpressionValidator>|Überprüft einen Wert mithilfe eines regulären Ausdrucks.|
|<xref:System.Web.UI.WebControls.RequiredFieldValidator>|Überprüft, ob ein Wert in ein Pflichtfeld eingegeben wurde.|

 Validierungs Steuerelemente validieren immer das zugeordnete Eingabe Steuerelement auf dem Server. Validierungs Steuerelemente verfügen auch über eine vollständige Client seitige Implementierung, die Skript aktivierte Browser (z. b. Microsoft Internet Explorer, Version 4,0 und höher) ermöglicht, eine Validierung auf dem Client auszuführen. Die Client seitige Validierung verbessert den Validierungsprozess, indem die Benutzereingaben überprüft werden, bevor Sie an den Server gesendet werden. Dies ermöglicht das Erkennen von Fehlern auf dem Client, bevor das Formular gesendet wird. Dadurch wird der Roundtrip von Informationen vermieden, die für die serverseitige Validierung erforderlich sind.

 Mehrere Validierungs Steuerelemente können mit einem einzelnen Eingabe Steuerelement verwendet werden, um verschiedene Kriterien zu überprüfen. Beispielsweise können Sie mehrere Validierungs Steuerelemente auf ein <xref:System.Web.UI.WebControls.TextBox> Steuerelement anwenden. Sie können ein <xref:System.Web.UI.WebControls.RangeValidator>-Steuerelement verwenden, um sicherzustellen, dass der im <xref:System.Web.UI.WebControls.TextBox> Steuerelement eingegebene Wert innerhalb eines festgelegten Bereichs liegt, und ein <xref:System.Web.UI.WebControls.RequiredFieldValidator> Steuerelement, um sicherzustellen, dass der Benutzer einen Wert eingibt

 ASP.net bietet zahlreiche Steuerelemente, die die Möglichkeit haben, zurück an den Server zu senden. Wenn für eines dieser Steuerelemente die `CausesValidation`-Eigenschaft auf `true`festgelegt ist, wird die Validierung ausgeführt, wenn das Steuerelement an den Server zurückgesendet wird. Die folgenden Steuerelemente können an den Server zurückgesendet werden:

-   <xref:System.Web.UI.WebControls.BulletedList?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.Button?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.CheckBox?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.CheckBoxList?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlButton?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlInputButton?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlInputImage?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.ImageButton?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.LinkButton?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>

> [!NOTE]
>  Einige dieser Steuerelemente werden nur dann an den Server zurückgesendet, wenn die `AutoPostBack`-Eigenschaft auf `true`festgelegt ist.

 Diese Steuerelemente verfügen jeweils über eine `ValidationGroup`-Eigenschaft, die bei Festlegung nur die Validierungs Steuerelemente innerhalb der angegebenen Gruppe überprüft, wenn das Steuerelement ein Postback an den Server auslöst. Wenn Sie Validierungs Steuerelemente gruppieren möchten, legen Sie die <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A>-Eigenschaft der einzelnen Validierungs Steuerelemente auf denselben Wert fest.

 Um ein Eingabe Steuerelement einem Validierungs Steuerelement zuzuordnen, verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A>-Eigenschaft. Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.Text%2A>-Eigenschaft, um den Text anzugeben, der bei einem Überprüfungs Fehler in einem Validierungs Steuerelement angezeigt werden soll. Sie können auch eine Zusammenfassung aller Steuerelemente anzeigen, bei denen die Überprüfung auf der Seite mit einem <xref:System.Web.UI.WebControls.ValidationSummary>-Steuerelement fehlschlägt. Um den Text anzugeben, der in einem <xref:System.Web.UI.WebControls.ValidationSummary> Steuerelement angezeigt werden soll, verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A>-Eigenschaft.

> [!NOTE]
>  Wenn Sie die <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A>-Eigenschaft festlegen, ohne die <xref:System.Web.UI.WebControls.BaseValidator.Text%2A>-Eigenschaft festzulegen, wird der Wert der Eigenschaft <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> auch im Validierungs Steuerelement angezeigt.

 Wenn Sie Validierungs Steuerelement-Steuerelemente verwenden, sollten Sie immer die Ergebnisse der serverseitigen Validierung überprüfen, bevor Sie die Verarbeitung durchführen. Nach einem Postback, aber bevor die Ereignis Methoden aufgerufen werden, ruft die Seite die Prüfungs-Steuerelemente auf und aggregiert ihre Ergebnisse in der <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType>-Eigenschaft. (Sie können auch die Prüfungs-Steuerelemente explizit mit der `Validate`-Methode aufzurufen.) In Ihrem eigenen Code sollten Sie überprüfen, ob die <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType>-Eigenschaft `true` vor der Verarbeitung von Eingaben zurückgibt. Obwohl Skript aktivierte Browser möglicherweise verhindern, dass ein Postback auf dem Client ausgeführt wird, wenn bei der Überprüfung ein Fehler aufgetreten ist, sollten Sie vor der Verarbeitung validierter Daten immer auch <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> in Servercode prüfen.

 Sie können die Validierung auch manuell ausführen. Verwenden Sie die <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType>-Methode, um alle Validierungs Steuerelemente auf der Seite zu überprüfen. Einzelne Validierungs Steuerelemente können mithilfe der <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A>-Methode des Steuer Elements überprüft werden.

> [!NOTE]
>  Wenn Sie die <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType>-Eigenschaft in einer `Page_Load`-Methode verwenden, müssen Sie zunächst die <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType>-Methode explizit aufzurufen. Da die Überprüfung nach dem <xref:System.Web.UI.Control.Load?displayProperty=nameWithType>-Ereignis für die Seite, aber vor dem Ereignishandler für die `Click`-oder `Command`-Ereignisse erfolgt, wird die <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType>-Eigenschaft erst aktualisiert, wenn die <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType>-Methode aufgerufen wird. Als Alternative können Sie den Code im-Ereignishandler für die `Click` oder `Command` Ereignis anstelle der `Page_Load`-Methode platzieren.

 Nicht alle Webserver Steuerelemente unterstützen Validierungs Steuerelemente. Die Standard Steuerelemente, die mit einem Validierungs Steuerelement validiert werden können, sind:

-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.FileUpload?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlInputFile?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlInputPassword?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlInputText?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlSelect?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlTextArea?displayProperty=nameWithType>

> [!NOTE]
>  Damit ein Eingabe Steuerelement überprüft werden kann, muss das <xref:System.Web.UI.ValidationPropertyAttribute?displayProperty=nameWithType>-Attribut auf das-Steuerelement angewendet werden.

> [!NOTE]
>  Wenn Sie Validierungs Steuerelement-Steuerelemente verwenden, die von <xref:System.Web.UI.WebControls.BaseValidator> innerhalb eines <xref:System.Web.UI.UpdatePanel> Steuer Elements abgeleitet werden, stellen Sie sicher, dass sich das Validierungs Steuerelement und das Steuerelement, dem es zugeordnet ist, im gleichen Bereich befinden. Weitere Informationen zur Verwendung des <xref:System.Web.UI.UpdatePanel>-Steuer Elements für Teil Aktualisierungen von Seiten finden Sie unter [Übersicht über das Teil Rendering von Seiten](https://docs.microsoft.com/previous-versions/aspnet/bb386573(v=vs.100)).

 Wenn die Überprüfung fehlschlägt, können Sie den Fokus auf das zugeordnete Eingabe Steuerelement festlegen, indem Sie die <xref:System.Web.UI.WebControls.BaseValidator.SetFocusOnError%2A>-Eigenschaft auf `true`festlegen.

 Eine Liste der anfänglichen Eigenschaftswerte für eine Instanz von <xref:System.Web.UI.WebControls.BaseValidator>finden Sie im <xref:System.Web.UI.WebControls.BaseValidator.%23ctor%2A>-Konstruktor.

## <a name="accessibility"></a>Barrierefreiheit
 Weitere Informationen zur Verwendung dieses Steuerelement so konfigurieren, dass sie Markup generiert, das Accessibility Standards entspricht, finden Sie unter [Barrierefreiheit in Visual Studio und ASP.NET](https://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) und [ASP.NET-Steuerelemente und Barrierefreiheit](https://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).



## Examples
 Im folgenden Codebeispiel wird veranschaulicht, wie mehrere Validierungs Steuerelemente verwendet werden, um zu überprüfen, ob der Benutzer einen gültigen Wert in einem <xref:System.Web.UI.WebControls.TextBox> Steuerelement eingibt.

> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]

 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Wenn Sie von der <see cref="T:System.Web.UI.WebControls.BaseValidator" />-Klasse erben, müssen Sie den folgenden Member überschreiben: <see cref="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />.</para></block>
    <altmember cref="T:System.Web.UI.WebControls.CompareValidator" />
    <altmember cref="T:System.Web.UI.WebControls.CustomValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RangeValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RegularExpressionValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
    <altmember cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.Text" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BaseValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BaseValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Web.UI.WebControls.BaseValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Dieser Konstruktor wird nicht direkt aufgerufen. Validierungs Steuerelemente, die von dieser Klasse erben, können diesen Konstruktor aus ihren eigenen Konstruktoren abrufen, um die Basis Eigenschaften zu initialisieren.

 In der folgenden Tabelle werden die anfänglichen Eigenschaftswerte für eine Instanz von <xref:System.Web.UI.WebControls.BaseValidator>angezeigt.

|Eigenschaft|Anfangswert|
|--------------|-------------------|
|<xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A>|`true`|
|<xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A>|<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>|
|<xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A>|`true`|
|<xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A>|`false`|

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CompareValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RangeValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RegularExpressionValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RequiredFieldValidator.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="baseValidator.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Ein <see cref="T:System.Web.UI.HtmlTextWriter" />, der den Ausgabestream für das Rendering von HTML-Inhalten auf dem Client darstellt.</param>
        <summary>Fügt dem angegebenen <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt die HTML-Attribute und -Stile hinzu, die für das Steuerelement gerendert werden sollen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender%2A>-Methode wird verwendet, um die Attribute des Steuer Elements im HTML-Tag für das-Steuerelement zu erzeugen. Diese Methode wird in der Regel von Steuerelement Entwicklern in abgeleiteten Klassen überschrieben, um die entsprechenden Attribute und Stile in den <xref:System.Web.UI.HtmlTextWriter> Ausgabestream für ein Steuerelement einzufügen.

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie die <see cref="M:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" /> Methode überschreiben, stellen Sie sicher, dass Sie die entsprechende Methode in der Basisklasse aufzurufen. Andernfalls werden die Attribute, die in der Basisklasse enthalten sind, nicht gerendert.</para></block>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="AssociatedControlID">
      <MemberSignature Language="C#" Value="public override string AssociatedControlID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssociatedControlID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.AssociatedControlID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property AssociatedControlID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssociatedControlID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AssociatedControlID : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.AssociatedControlID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft wird nicht unterstützt.</summary>
        <value>Diese Eigenschaft wird nicht unterstützt und löst immer eine <see cref="T:System.NotSupportedException" /> aus.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Diese Eigenschaft wird nicht unterstützt. Diese Eigenschaft wird nur für die Basis <xref:System.Web.UI.WebControls.Label> Klasse unterstützt.

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Es wurde versucht, diese Eigenschaft festzulegen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.Label.AssociatedControlID" />
      </Docs>
    </Member>
    <Member MemberName="CheckControlValidationProperty">
      <MemberSignature Language="C#" Value="protected void CheckControlValidationProperty (string name, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckControlValidationProperty(string name, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckControlValidationProperty (name As String, propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckControlValidationProperty(System::String ^ name, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.CheckControlValidationProperty : string * string -&gt; unit" Usage="baseValidator.CheckControlValidationProperty (name, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Das zu überprüfende Steuerelement.</param>
        <param name="propertyName">Zusätzlicher Text für die Beschreibung der Ausnahmequelle, wenn bei dieser Methode eine Ausnahme ausgelöst wird.</param>
        <summary>Überprüft, ob sich das angegebene Steuerelement auf der Seite befindet und Validierungseigenschaften enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty%2A>-Methode ist eine Hilfsmethode, die hauptsächlich von der <xref:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid%2A>-Methode verwendet wird, um zu überprüfen, ob sich das angegebene Steuerelement auf der Seite befindet und Validierungs Eigenschaften Diese Methode gibt keinen Wert zurück, um das Ergebnis zu melden. Stattdessen löst Sie eine Ausnahme aus, wenn die Überprüfung fehlschlägt.

> [!NOTE]
>  Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet.

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Das angegebene Steuerelement kann nicht gefunden werden.

Oder

Dem angegebenen Steuerelement ist kein <see cref="T:System.Web.UI.ValidationPropertyAttribute" />-Attribut zugeordnet, daher kann es nicht mit einem Validierungssteuerelement geprüft werden.</exception>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected virtual bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ControlPropertiesValid();" />
      <MemberSignature Language="F#" Value="abstract member ControlPropertiesValid : unit -&gt; bool&#xA;override this.ControlPropertiesValid : unit -&gt; bool" Usage="baseValidator.ControlPropertiesValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bestimmt, ob das von der <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />-Eigenschaft angegebene Steuerelement ein gültiges Steuerelement ist.</summary>
        <returns><see langword="true" />, wenn das von <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> angegebene Steuerelement ein gültiges Steuerelement ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid%2A>-Methode ist eine Hilfsmethode, die in erster Linie von der <xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A>-Eigenschaft verwendet wird, um zu bestimmen, ob die <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> Eigenschaft ein gültiges Eingabe Steuerelement Um ein gültiges Eingabe Steuerelement zu sein, muss die <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A>-Eigenschaft auf einen Wert festgelegt werden, und dieser Wert muss ein Steuerelement auf der Seite sein, die die Validierung unterstützt.

> [!NOTE]
>  Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet.

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Für die <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />-Eigenschaft ist kein Wert angegeben.

Oder

Das von der <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />-Eigenschaft angegebene Eingabesteuerelement wurde auf der Seite nicht gefunden.

Oder

Dem durch die <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />-Eigenschaft angegebenen Eingabesteuerelement ist kein <see cref="T:System.Web.UI.ValidationPropertyAttribute" />-Attribut zugeordnet. Daher kann es nicht mit einem Validierungssteuerelement geprüft werden.</exception>
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      </Docs>
    </Member>
    <Member MemberName="ControlToValidate">
      <MemberSignature Language="C#" Value="public string ControlToValidate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ControlToValidate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlToValidate As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ControlToValidate { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ControlToValidate : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.ValidatedControlConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.IDReferenceProperty</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das zu überprüfende Eingabesteuerelement ab oder legt dieses fest.</summary>
        <value>Das zu überprüfende Eingabesteuerelement. Der Standardwert ist <see cref="F:System.String.Empty" /> und gibt an, dass diese Eigenschaft nicht festgelegt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A>-Eigenschaft, um das zu überprüfende Eingabe Steuerelement anzugeben. Diese Eigenschaft muss auf die ID eines Eingabe Steuer Elements für alle Validierungs Steuerelemente festgelegt werden, außer auf das <xref:System.Web.UI.WebControls.CustomValidator> Steuerelement, das leer bleiben kann. Wenn Sie kein gültiges Eingabe Steuerelement angeben, wird eine Ausnahme ausgelöst, wenn die Seite gerendert wird. Die ID muss auf ein Steuerelement innerhalb desselben Containers verweisen wie das Validierungs Steuerelement. Sie muss sich in derselben Seite oder in einem Benutzer Steuerelement befinden, oder Sie muss sich in derselben Vorlage eines Steuer Elements mit Vorlagen befinden.

 Die Standard Steuerelemente, die überprüft werden können, sind:

-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.FileUpload?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlInputFile?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlInputPassword?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlInputText?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlSelect?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlTextArea?displayProperty=nameWithType>

> [!NOTE]
>  Damit ein Eingabe Steuerelement überprüft werden kann, muss das <xref:System.Web.UI.ValidationPropertyAttribute?displayProperty=nameWithType>-Attribut auf das-Steuerelement angewendet werden.

 Alle Validierungs Steuerelemente, außer dem <xref:System.Web.UI.WebControls.RequiredFieldValidator>-Steuerelement, übergeben die Validierung, wenn das von der <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A>-Eigenschaft angegebene Eingabe Steuerelement keinen Text enthält. Wenn Sie ein <xref:System.Web.UI.WebControls.CustomValidator>-Steuerelement verwenden, werden die Client seitigen und serverseitigen Validierungs Funktionen nicht als bezeichnet.

 Diese Eigenschaft kann nicht durch Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).



## Examples
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A>-Eigenschaft verwendet wird, um das zu validierende Eingabe Steuerelement anzugeben.

 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="T:System.Web.UI.WebControls.CustomValidator" />
      </Docs>
    </Member>
    <Member MemberName="DetermineRenderUplevel">
      <MemberSignature Language="C#" Value="protected virtual bool DetermineRenderUplevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DetermineRenderUplevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DetermineRenderUplevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool DetermineRenderUplevel();" />
      <MemberSignature Language="F#" Value="abstract member DetermineRenderUplevel : unit -&gt; bool&#xA;override this.DetermineRenderUplevel : unit -&gt; bool" Usage="baseValidator.DetermineRenderUplevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bestimmt, ob das Validierungssteuerelement eine clientseitige Validierung ausführen kann.</summary>
        <returns><see langword="true" />, wenn das Validierungssteuerelement eine clientseitige Validierung ausführen kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel%2A>-Methode ist eine Hilfsfunktion, die in erster Linie von der <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A>-Eigenschaft verwendet wird, um zu bestimmen, ob der Client Browser Client Skripts unterstützt. Damit diese Eigenschaft `true`zurückgibt, müssen die folgenden Bedingungen erfüllt sein:

-   Für den Browser ist das Client Skript aktiviert.

-   Die <xref:System.Web.HttpBrowserCapabilitiesBase.W3CDomVersion%2A>-Eigenschaft des <xref:System.Web.HttpBrowserCapabilitiesBase>-Objekts, das in der <xref:System.Web.HttpRequest.Browser%2A?displayProperty=nameWithType>-Eigenschaft gespeichert ist, ist 1 oder höher.

-   Die <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A>-Eigenschaft des <xref:System.Web.HttpBrowserCapabilitiesBase>-Objekts, das in der <xref:System.Web.HttpRequest.Browser%2A?displayProperty=nameWithType>-Eigenschaft gespeichert ist, ist 1,2 oder höher.

    > [!NOTE]
    >  Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet.

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ValidatorDisplay Display { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ValidatorDisplay Display" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Display" />
      <MemberSignature Language="VB.NET" Value="Public Property Display As ValidatorDisplay" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ValidatorDisplay Display { System::Web::UI::WebControls::ValidatorDisplay get(); void set(System::Web::UI::WebControls::ValidatorDisplay value); };" />
      <MemberSignature Language="F#" Value="member this.Display : System.Web.UI.WebControls.ValidatorDisplay with get, set" Usage="System.Web.UI.WebControls.BaseValidator.Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ValidatorDisplay</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Anzeigeverhalten der Fehlermeldung in einem Validierungssteuerelement ab oder legt dieses fest.</summary>
        <value>Einer der <see cref="T:System.Web.UI.WebControls.ValidatorDisplay" />-Werte. Standardwert: <see langword="Static" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.Display%2A>-Eigenschaft, um das Anzeigeverhalten der Fehlermeldung im Validierungs Steuerelement anzugeben. In der folgenden Tabelle werden die verschiedenen Werte aufgelistet, die verwendet werden können.

|Anzeigeverhalten|BESCHREIBUNG|
|----------------------|-----------------|
|`None`|Die Validierungs Meldung wird nie Inline angezeigt.|
|`Static`|Der Speicherplatz für die Validierungs Meldung wird im Seitenlayout zugeordnet.|
|`Dynamic`|Der Speicherplatz für die Validierungs Nachricht wird der Seite dynamisch hinzugefügt, wenn die Validierung fehlschlägt.|

> [!NOTE]
>  Das Anzeigeverhalten hängt davon ab, ob die Client seitige Validierung durchgeführt wird. Wenn die Client seitige Validierung nicht aktiv ist (da Sie vom Browser nicht unterstützt wird oder weil Sie mithilfe der <xref:System.Web.UI.Page.ClientTarget%2A?displayProperty=nameWithType> Page-Direktive oder <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A>-Eigenschaft deaktiviert wurde), Verhalten sich `ValidatorDisplay.Static` und `ValidatorDisplay.Dynamic` auf die gleiche Weise: die Fehlermeldung nimmt nur dann Speicherplatz auf, wenn Sie angezeigt wird. Die Möglichkeit, Speicherplatz für die Nachricht dynamisch zuzuweisen, wenn Sie nicht angezeigt wird (`ValidatorDisplay.Dynamic`), funktioniert nur bei der Client seitigen Validierung.

 Diese Eigenschaft kann nicht durch Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).



## Examples
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.BaseValidator.Display%2A>-Eigenschaft verwendet wird, um anzugeben, dass der Bereich für die Validierungs Nachricht bei einem Überprüfungs Fehler dynamisch zur Webseite hinzugefügt wird.

> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der angegebene Wert ist keiner der <see cref="T:System.Web.UI.WebControls.ValidatorDisplay" />-Werte.</exception>
        <altmember cref="T:System.Web.UI.WebControls.ValidatorDisplay" />
      </Docs>
    </Member>
    <Member MemberName="EnableClientScript">
      <MemberSignature Language="C#" Value="public bool EnableClientScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableClientScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableClientScript As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableClientScript { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableClientScript : bool with get, set" Usage="System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Validierung auf dem Client aktiviert ist, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Validierung auf dem Client aktiviert ist, andernfalls <see langword="false" />. Standardwert: <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A>-Eigenschaft, um anzugeben, ob die Client seitige Validierung aktiviert ist.

 Validierungs Steuerelemente führen immer eine Überprüfung auf dem Server durch. Außerdem verfügen Sie über eine vollständige Client seitige Implementierung, mit der von DHTML unterstützte Browser (z. b. Microsoft Internet Explorer 4,0 und höher) eine Validierung auf dem Client durchführen können. Die Client seitige Validierung verbessert den Validierungsprozess, indem die Benutzereingaben überprüft werden, bevor Sie an den Server gesendet werden. Dies ermöglicht das Erkennen von Fehlern auf dem Client, bevor das Formular gesendet wird. Dadurch wird der Roundtrip von Informationen vermieden, die für die serverseitige Validierung erforderlich sind.

 Standardmäßig ist dieser Wert auf `true`festgelegt, wodurch die Client seitige Validierung aktiviert wird, wenn Sie vom Browser unterstützt wird. Sie können die Client seitige Validierung auf Steuerelement Basis deaktivieren. Dies ist hilfreich, wenn die dynamische Aktualisierung auf dem Client Probleme mit dem Layout der Seite verursacht oder wenn Sie vor der Überprüfung einigen Servercode ausführen möchten.

 Diese Eigenschaft kann nicht durch Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).



## Examples
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A>-Eigenschaft verwendet wird, um die Client seitige Validierung zu deaktivieren, sodass die Zufallszahlen auf dem Server generiert werden können.

> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public override bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Web.UI.WebControls.BaseValidator.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Validierungssteuerelement aktiviert ist, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn das Validierungssteuerelement aktiviert ist, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A>-Eigenschaft, um anzugeben, ob das Validierungs Steuerelement aktiviert ist. Sie können das Validierungs Steuerelement deaktivieren, indem Sie diese Eigenschaft auf `false`festlegen.

 Wenn Sie entweder die <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> oder die <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A>-Eigenschaft auf `false` festlegen, wird die Überprüfung nicht ausgeführt. Dies bewirkt, dass die <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A>-Eigenschaft immer zu `true`ausgewertet wird.

 Die <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A>-Eigenschaft unterscheidet sich geringfügig von der <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType>-Eigenschaft. Wenn die <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType>-Eigenschaft für ein Validierungs Steuerelement auf `true`festgelegt ist, die <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A>-Eigenschaft jedoch auf `false`festgelegt ist, wird das Validierungs Steuerelement immer noch für die Client seitige Validierung, aber in einem deaktivierten Zustand gerendert. Anschließend können Sie das Validierungs Steuerelement auf dem Client mithilfe des DHTML-Skripts erneut aktivieren.



## Examples
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A>-Eigenschaft verwendet wird, um die Validierungs Steuerelemente auf der Webseite mithilfe von Server seitigem Code zu aktivieren oder zu deaktivieren.

> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[Classic BaseValidator.Enabled Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator.Enabled Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator.Enabled Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator.Enabled Example/VB/sourcevb.aspx#1)]

 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A>-Eigenschaft verwendet wird, um die Validierungs Steuerelemente auf der Webseite mithilfe des Client seitigen Codes zu aktivieren oder zu deaktivieren.

<!-- TODO: review snippet reference  [!CODE [Classic BaseValidator.Enabled Example2#1](Classic BaseValidator.Enabled Example2#1)]  -->

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorMessage">
      <MemberSignature Language="C#" Value="public string ErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ErrorMessage : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IValidator.ErrorMessage</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Text für die Fehlermeldung ab, die in einem <see cref="T:System.Web.UI.WebControls.ValidationSummary" />-Steuerelement angezeigt wird, wenn die Validierung fehlschlägt, oder legt diesen Text fest.</summary>
        <value>Die Fehlermeldung, die in einem <see cref="T:System.Web.UI.WebControls.ValidationSummary" />-Steuerelement angezeigt wird, wenn die Validierung fehlschlägt. Der Standardwert ist eine leere Zeichenfolge (""), die angibt, dass diese Eigenschaft nicht festgelegt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Wenn Sie ein <xref:System.Web.UI.WebControls.ValidationSummary> Steuerelement verwenden, verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A>-Eigenschaft, um den Text anzugeben, der im <xref:System.Web.UI.WebControls.ValidationSummary>-Steuerelement angezeigt werden soll, wenn die Validierung für das aktuelle Validierungs Steuerelement Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.Text%2A>-Eigenschaft, um den Text anzugeben, der im Validierungs Steuerelement selbst angezeigt werden soll.

> [!NOTE]
>  Wenn Sie die <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A>-Eigenschaft festlegen, ohne die <xref:System.Web.UI.WebControls.BaseValidator.Text%2A>-Eigenschaft festzulegen, wird der Wert der Eigenschaft <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> auch im Validierungs Steuerelement angezeigt.

 Der Wert dieser Eigenschaft, wenn festgelegt, kann mithilfe eines Designers Tools automatisch zu einer Ressourcendatei gespeichert werden. Weitere Informationen finden Sie unter <xref:System.ComponentModel.LocalizableAttribute>-und [ASP.NET-Globalisierung und-Lokalisierung](https://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).



## Examples
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A>-Eigenschaft verwendet wird, um unterschiedliche Meldungen für das <xref:System.Web.UI.WebControls.ValidationSummary> Steuerelement und die <xref:System.Web.UI.WebControls.RequiredFieldValidator>-und <xref:System.Web.UI.WebControls.CompareValidator>-Steuerelemente anzugeben.

> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.Text" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected abstract bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="abstract member EvaluateIsValid : unit -&gt; bool" Usage="baseValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beim Überschreiben in einer abgeleiteten Klasse enthält diese Methode den Code, um zu bestimmen, ob der Wert im Eingabesteuerelement gültig ist.</summary>
        <returns><see langword="true" />, wenn der Wert im Eingabesteuerelement gültig ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid%2A>-Methode, um zu bestimmen, ob der Wert im Eingabe Steuerelement, das von der <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A>-Eigenschaft angegeben wird

> [!NOTE]
>  Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet.

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie müssen diese Methode in einer abgeleiteten Klasse implementieren, um zurückzugeben, ob der Wert im Eingabe Steuerelement gültig ist.</para></block>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.Validate" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Web.UI.WebControls.BaseValidator.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Red")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Farbe der bei einer fehlgeschlagenen Validierung angezeigten Meldung ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Color" />, die die Farbe der bei fehlgeschlagener Validierung angezeigten Meldung darstellt. Der Standardwert lautet <see cref="P:System.Drawing.Color.Red" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A>-Eigenschaft, um eine benutzerdefinierte Textfarbe für die Meldung anzugeben, die bei einem Überprüfungs Fehler im Validierungs Steuerelement angezeigt wird.



## Examples
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A>-Eigenschaft verwendet wird, um die Validierungs Nachricht in blau anzuzeigen.

> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[Classic BaseValidator.ForeColor Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator.ForeColor Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator.ForeColor Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator.ForeColor Example/VB/sourcevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="GetControlRenderID">
      <MemberSignature Language="C#" Value="protected string GetControlRenderID (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetControlRenderID(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetControlRenderID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetControlRenderID (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetControlRenderID(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetControlRenderID : string -&gt; string" Usage="baseValidator.GetControlRenderID name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Steuerelements, dessen Client-ID abgerufen werden soll.</param>
        <summary>Ruft die Client-ID des angegebenen Steuerelements ab.</summary>
        <returns>Die Client-ID des angegebenen Steuerelements.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.GetControlRenderID%2A>-Methode, um die Client-ID des angegebenen Steuer Elements zu erhalten. Weitere Informationen finden Sie unter <xref:System.Web.UI.Control.ClientID%2A>.

> [!NOTE]
>  Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet.

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ClientID" />
      </Docs>
    </Member>
    <Member MemberName="GetControlValidationValue">
      <MemberSignature Language="C#" Value="protected string GetControlValidationValue (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetControlValidationValue(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetControlValidationValue (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetControlValidationValue(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetControlValidationValue : string -&gt; string" Usage="baseValidator.GetControlValidationValue name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Eingabesteuerelements, dessen Wert abgerufen werden soll.</param>
        <summary>Ruft den Wert ab, der dem angegebenen Eingabesteuerelement zugeordnet ist.</summary>
        <returns>Der Wert, der dem angegebenen Eingabesteuerelement zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue%2A>-Methode, um den Wert zu erhalten, der dem angegebenen Eingabe Steuerelement zugeordnet ist, unabhängig vom Typ des Steuer Elements. Sie können diese Methode z. b. verwenden, um den Wert in einem <xref:System.Web.UI.WebControls.TextBox>-Steuerelement sowie den Wert des ausgewählten Elements aus einem <xref:System.Web.UI.WebControls.ListBox>-Steuerelement zu erhalten. Wenn das angegebene Steuerelement nicht gefunden werden kann, wird `null` zurückgegeben.

> [!NOTE]
>  Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet.

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetValidationProperty">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.PropertyDescriptor GetValidationProperty (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.PropertyDescriptor GetValidationProperty(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValidationProperty (component As Object) As PropertyDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::PropertyDescriptor ^ GetValidationProperty(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="static member GetValidationProperty : obj -&gt; System.ComponentModel.PropertyDescriptor" Usage="System.Web.UI.WebControls.BaseValidator.GetValidationProperty component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">Ein <see cref="T:System.Object" />, das das Steuerelement darstellt, dessen Validierungseigenschaft abgerufen werden soll.</param>
        <summary>Bestimmt die Validierungseigenschaft eines Steuerelements (falls vorhanden).</summary>
        <returns>Ein <see cref="T:System.ComponentModel.PropertyDescriptor" />, der die Validierungseigenschaft des Steuerelements enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.UI.WebControls.BaseValidator.GetValidationProperty%2A>-Methode ist eine Hilfsfunktion, die die Validierungs Eigenschaft des angegebenen Eingabe Steuer Elements abruft.

> [!NOTE]
>  Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet.

 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="IsUnobtrusive">
      <MemberSignature Language="C#" Value="protected bool IsUnobtrusive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnobtrusive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.IsUnobtrusive" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsUnobtrusive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsUnobtrusive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnobtrusive : bool" Usage="System.Web.UI.WebControls.BaseValidator.IsUnobtrusive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Steuerelement unaufdringliches JavaScript generiert.</summary>
        <value><see langword="true" />, wenn das Steuerelement unaufdringliches JavaScript generiert, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Diese Eigenschaft gibt `false` zurück, wenn der <xref:System.Web.UI.Page.UnobtrusiveValidationMode%2A>-Eigenschafts Wert <xref:System.Web.UI.UnobtrusiveValidationMode.None>ist. Andernfalls gibt diese Eigenschaft `true` zurück.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValid { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool with get, set" Usage="System.Web.UI.WebControls.BaseValidator.IsValid" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IValidator.IsValid</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das zugeordnete Eingabesteuerelement die Validierung erfolgreich absolviert, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn das zugeordnete Eingabesteuerelement die Validierung erfolgreich besteht, andernfalls <see langword="false" />. Standardwert: <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A>-Eigenschaft, um zu bestimmen, ob das zugeordnete Eingabe Steuerelement die Validierung

> [!CAUTION]
>  Da der Standardwert dieser Eigenschaft `true`ist, wird `true` zurückgegeben, wenn Sie diese Eigenschaft Abfragen, bevor die Überprüfung ausgeführt wird. Dies kann z. b. vorkommen, wenn Sie versuchen, diese Eigenschaft im <xref:System.Web.UI.Control.Load?displayProperty=nameWithType>-Ereignis einer Seite zu verwenden.

 Die <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A>-Eigenschaft wird nur ausgewertet, wenn die <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A>-Methode aufgerufen wird. Sie können die <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A>-Methode für jedes Validierungs Steuerelement auf der Seite einzeln aufrufen oder alle gleichzeitig mit der <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType>-Methode aufrufen. Schaltflächen Steuerelemente, deren `CausesValidation`-Eigenschaft auf `true` festgelegt ist, wird auch die <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType>-Methode aufgerufen.

> [!NOTE]
>  Der Wert dieser Eigenschaft kann nach der Überprüfung manuell geändert werden. Dies ermöglicht es Ihnen, das Validierungs Ergebnis bei Bedarf zu überschreiben.

 Die <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType>-Eigenschaft für die Seite wird nur auf `true` festgelegt, wenn die <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A>-Eigenschaft für jedes Validierungs Steuerelement auf der Seite ebenfalls auf `true`festgelegt ist.

 Diese Eigenschaft kann nicht durch Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).



## Examples
 Im folgenden Codebeispiel wird veranschaulicht, wie mit der <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A>-Eigenschaft bestimmt wird, ob das zugeordnete Eingabe Steuerelement die Überprüfung übergibt.

> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[BaseValidatorIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseValidatorIsValid/CS/basevalidatorisvalidcs.aspx#1)]
 [!code-aspx-vb[BaseValidatorIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseValidatorIsValid/VB/basevalidatorisvalidvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="E:System.Web.UI.Control.Load" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.Validate" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="P:System.Web.UI.Page.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="baseValidator.OnInit e" />
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.Control.Init" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Nachdem diese Methode die <xref:System.Web.UI.Control.OnInit%2A> Methode des Basis Steuer Elements aufgerufen hat, wird die Eigenschaft <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> auf <xref:System.Drawing.Color.Red%2A> festgelegt, wenn die folgenden Bedingungen zutreffen:

-   Die <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>-Eigenschaft ist nicht bereits festgelegt.

-   Die <xref:System.Web.UI.Control.RenderingCompatibility%2A>-Eigenschaft gibt eine frühere ASP.NET-Version als `4.0`an. Standardmäßig werden in ASP.NET 4 und höheren Versionen von Prüfungs-Steuerelementen keine Fehler rot angezeigt. Informationen dazu, wie Sie die visuelle Darstellung von Prüfungs-Steuerelementen steuern können, finden Sie unter [Validieren von Benutzereingaben in ASP.net Web Pages](https://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).

 Diese Methode registriert auch das Validierungs Steuerelement auf der Seite.

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="E:System.Web.UI.Control.Init" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPreRender (e As EventArgs)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPreRender(EventArgs ^ e);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="baseValidator.OnPreRender e" />
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.Control.PreRender" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Diese Methode wurde überschrieben, um den Client Browser zu überprüfen und das Validierungs Steuerelement vor dem Rendern auf Kompatibilität zu konfigurieren.

 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).

 Mit der <xref:System.Web.UI.WebControls.BaseValidator.OnPreRender%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
        <altmember cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected override void OnUnload (EventArgs e);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnUnload (e As EventArgs)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnUnload(EventArgs ^ e);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="baseValidator.OnUnload e" />
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.Control.Unload" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Diese Methode wurde überschrieben, um die Registrierung des Validierungs Steuer Elements auf der Seite aufzuheben.

 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).

 Mit der <xref:System.Web.UI.WebControls.BaseValidator.OnUnload%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="E:System.Web.UI.Control.Unload" />
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PropertiesValid">
      <MemberSignature Language="C#" Value="protected bool PropertiesValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PropertiesValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property PropertiesValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool PropertiesValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertiesValid : bool" Usage="System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das von der <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />-Eigenschaft angegebene Steuerelement ein gültiges Steuerelement ist.</summary>
        <value><see langword="true" />, wenn das von <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> angegebene Steuerelement ein gültiges Steuerelement ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A>-Eigenschaft, um zu bestimmen, ob die <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A>-Eigenschaft ein gültiges Eingabe Steuerelement enthält. Um ein gültiges Eingabe Steuerelement zu sein, muss die <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A>-Eigenschaft auf ein-Steuerelement auf der Seite festgelegt werden.

> [!NOTE]
>  Diese Eigenschaft wird hauptsächlich von Steuerelemententwicklern verwendet.

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">In der <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />-Eigenschaft ist kein Wert angegeben.

Oder

Das von der <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />-Eigenschaft angegebene Eingabesteuerelement wurde auf der Seite nicht gefunden.</exception>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterValidatorCommonScript">
      <MemberSignature Language="C#" Value="protected void RegisterValidatorCommonScript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RegisterValidatorCommonScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RegisterValidatorCommonScript ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RegisterValidatorCommonScript();" />
      <MemberSignature Language="F#" Value="member this.RegisterValidatorCommonScript : unit -&gt; unit" Usage="baseValidator.RegisterValidatorCommonScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Registriert Code auf der Seite für eine Validierung auf dem Client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript%2A>-Methode, um Code auf der Seite zu registrieren, um die Client seitige Validierung auszuführen.

> [!NOTE]
>  Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet.

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Diese Methode wird im <see cref="E:System.Web.UI.Control.PreRender" />-Ereignishandler der abgeleiteten Klasse aufgerufen, um den Code zu registrieren, der die Client seitige Validierung ausführt.</para></block>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
      </Docs>
    </Member>
    <Member MemberName="RegisterValidatorDeclaration">
      <MemberSignature Language="C#" Value="protected virtual void RegisterValidatorDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RegisterValidatorDeclaration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RegisterValidatorDeclaration ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RegisterValidatorDeclaration();" />
      <MemberSignature Language="F#" Value="abstract member RegisterValidatorDeclaration : unit -&gt; unit&#xA;override this.RegisterValidatorDeclaration : unit -&gt; unit" Usage="baseValidator.RegisterValidatorDeclaration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Registriert eine ECMAScript-Array-Deklaration mit dem Arraynamen <see langword="Page_Validators" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration%2A>-Methode, um eine ECMAScript-Array Deklaration mithilfe des Array namens `Page_Validators`zu registrieren.

> [!NOTE]
>  Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet.

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="baseValidator.Render writer" />
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Ein <see cref="T:System.Web.UI.HtmlTextWriter" />, der den Ausgabestream für das Rendering auf dem Client enthält.</param>
        <summary>Zeigt das Steuerelement auf dem Client an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.UI.WebControls.BaseValidator.Render%2A>-Methode wird verwendet, um das HTML-Markup für ein Validierungs Steuerelement zu generieren.

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderUplevel">
      <MemberSignature Language="C#" Value="protected bool RenderUplevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderUplevel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RenderUplevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool RenderUplevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RenderUplevel : bool" Usage="System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Clientbrowser komplexe Darstellung unterstützt.</summary>
        <value><see langword="true" />, wenn der Browser keine komplexe Darstellung unterstützt, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A>-Eigenschaft, um zu bestimmen, ob der Browser des Clients "Uplevel"-Rendering unterstützt. Damit ein Browser "Uplevel"-Rendering unterstützt, muss er Microsoft Internet Explorer Dokumentobjektmodell (DOM) Version 4 oder höher und ECMAScript-Version 1,2 oder höher unterstützen.

> [!NOTE]
>  Diese Eigenschaft wird hauptsächlich von Steuerelemententwicklern verwendet.

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="SetFocusOnError">
      <MemberSignature Language="C#" Value="public bool SetFocusOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SetFocusOnError" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.SetFocusOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property SetFocusOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SetFocusOnError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SetFocusOnError : bool with get, set" Usage="System.Web.UI.WebControls.BaseValidator.SetFocusOnError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das durch die <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />-Eigenschaft angegebene Steuerelement den Fokus erhält, wenn die Validierung fehlschlägt.</summary>
        <value><see langword="true" />, um den Fokus auf das von <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> angegebene Steuerelement festzulegen, wenn die Validierung fehlschlägt, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.SetFocusOnError%2A>-Eigenschaft, um anzugeben, ob der Fokus automatisch auf das Steuerelement festgelegt wird, das durch die <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A>-Eigenschaft angegeben wird Dadurch kann der Benutzer das entsprechende Steuerelement schnell aktualisieren.

 Wenn mehrere Validierungs Steuerelemente fehlschlagen und diese Eigenschaft auf `true`festgelegt ist, erhält das in der <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A>-Eigenschaft für das erste Validierungs Steuerelement angegebene Steuerelement den Fokus.

 Diese Eigenschaft kann nicht durch Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Text ab, der im Validierungssteuerelement angezeigt wird, wenn die Validierung fehlschlägt, oder legt diesen Text fest.</summary>
        <value>Der Text, der im Validierungssteuerelement angezeigt wird, wenn die Validierung fehlschlägt. Der Standardwert ist eine leere Zeichenfolge ("") und gibt an, dass diese Eigenschaft nicht festgelegt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.Text%2A>-Eigenschaft, um den Text anzugeben, der bei einem Überprüfungs Fehler in einem Validierungs Steuerelement angezeigt wird. Sie können auch eine Zusammenfassung aller Steuerelemente anzeigen, bei denen die Überprüfung auf der Seite mit einem <xref:System.Web.UI.WebControls.ValidationSummary>-Steuerelement fehlschlägt. Um den Text anzugeben, der in einem <xref:System.Web.UI.WebControls.ValidationSummary> Steuerelement angezeigt werden soll, verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A>-Eigenschaft.

> [!NOTE]
>  Wenn Sie die <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A>-Eigenschaft festlegen, ohne die <xref:System.Web.UI.WebControls.BaseValidator.Text%2A>-Eigenschaft festzulegen, wird der Wert der Eigenschaft <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> auch im Validierungs Steuerelement angezeigt.

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.Validate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Validate();" />
      <MemberSignature Language="F#" Value="abstract member Validate : unit -&gt; unit&#xA;override this.Validate : unit -&gt; unit" Usage="baseValidator.Validate " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IValidator.Validate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt die Validierung für das zugeordnete Eingabesteuerelement durch und aktualisiert die <see cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />-Eigenschaft.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A>-Methode, um die Validierung für das zugeordnete Eingabe Steuerelement auszuführen. Mit dieser Methode können Sie Programm gesteuert eine Validierung für das Eingabe Steuerelement ausführen. Die <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A>-Eigenschaft wird automatisch mit den Validierungs Ergebnissen aktualisiert.



## Examples
 Ein Beispiel für die <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> Methode, die in einer abgeleiteten Klasse verwendet wird, finden Sie in der Übersicht über die <xref:System.Web.UI.WebControls.CompareValidator>-Klasse.

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationGroup : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Validierungsgruppe ab, zu der dieses Validierungssteuerelement gehört, oder legt den Namen fest.</summary>
        <value>Der Name der Validierungsgruppe, zu der dieses Validierungssteuerelement gehört. Der Standardwert ist eine leere Zeichenfolge ("") und gibt an, dass diese Eigenschaft nicht festgelegt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ASP.net bietet zahlreiche Steuerelemente, die die Möglichkeit haben, zurück an den Server zu senden. Wenn für eines dieser Steuerelemente die `CausesValidation`-Eigenschaft auf `true`festgelegt ist, wird die Validierung ausgeführt, wenn das Steuerelement an den Server zurückgesendet wird. Die folgenden Steuerelemente können an den Server zurückgesendet werden:

-   <xref:System.Web.UI.WebControls.BulletedList?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.Button?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.CheckBox?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.CheckBoxList?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlButton?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlInputButton?displayProperty=nameWithType>

-   <xref:System.Web.UI.HtmlControls.HtmlInputImage?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.ImageButton?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.LinkButton?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>

-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>

> [!NOTE]
>  Einige dieser Steuerelemente werden nur dann an den Server zurückgesendet, wenn die `AutoPostBack`-Eigenschaft auf `true`festgelegt ist.

 Diese Steuerelemente verfügen jeweils über eine `ValidationGroup`-Eigenschaft, die bei Festlegung nur die Validierungs Steuerelemente innerhalb der angegebenen Gruppe überprüft, wenn das Steuerelement ein Postback an den Server auslöst. Verwenden Sie die <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A>-Eigenschaft, um einer Validierungs Gruppe ein Validierungs Steuerelement zuzuweisen. Die <xref:System.Web.UI.Page>-Klasse macht auch eine <xref:System.Web.UI.Page.GetValidators%2A>-Methode und eine <xref:System.Web.UI.Page.Validate%2A>-Methode verfügbar, die einen <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> Eingabeparameter akzeptieren.

 Diese Eigenschaft kann nicht durch Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).



## Examples
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A>-Eigenschaft verwendet wird, um einer Gruppe ein Validierungs Steuerelement zuzuweisen.

> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[BaseValidatorValidationGroup#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseValidatorValidationGroup/CS/BaseValidatorValidationGroupcs.aspx#1)]
 [!code-aspx-vb[BaseValidatorValidationGroup#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseValidatorValidationGroup/VB/BaseValidatorValidationGroupvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" />
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.ValidationGroup" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="M:System.Web.UI.Page.GetValidators(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>

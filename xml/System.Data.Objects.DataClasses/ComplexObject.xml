<Type Name="ComplexObject" FullName="System.Data.Objects.DataClasses.ComplexObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="08d9dc381c1908e5106e4e70c3be528e8caaa9c5" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52209390" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ComplexObject : System.Data.Objects.DataClasses.StructuralObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ComplexObject extends System.Data.Objects.DataClasses.StructuralObject" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.ComplexObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ComplexObject&#xA;Inherits StructuralObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComplexObject abstract : System::Data::Objects::DataClasses::StructuralObject" />
  <TypeSignature Language="F#" Value="type ComplexObject = class&#xA;    inherit StructuralObject" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.StructuralObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.DataContract(IsReference=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Basisklasse für komplexe Typen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.ComplexObject> implementiert die grundlegende Funktionalität für komplexe Typen. Weitere Informationen finden Sie unter [Objekte mit komplexen Typen](https://msdn.microsoft.com/library/34d5c570-a891-42b8-80ae-20e96eedc3af).  
  
 Wenn Sie benutzerdefinierte Datenklassen mit einem konzeptionellen Modell zu implementieren, es wird empfohlen, die Datenklassen, die komplexe Typen darstellen, erben <xref:System.Data.Objects.DataClasses.ComplexObject>. Weitere Informationen finden Sie unter [Anpassen von Objekten](https://msdn.microsoft.com/library/af6f07ce-2261-4c65-87cf-d018ad082921).  
  
 Ein komplexer Typ kann eine Eigenschaft eines Entitätstyps oder eines anderen komplexen Typs sein.  
  
 Komplexe Typen werden von nicht skalaren Eigenschaften von Entitätstypen zurückgegeben. Damit können skalare Eigenschaften innerhalb der Entitäten organisiert werden. Wie Entitäten bestehen komplexe Typen aus skalaren Eigenschaften oder anderen Eigenschaften von komplexem Typ. Ein komplexer Typ kann nicht ohne zugeordnete Entitätstyp verwendet werden. Da komplexe Typen nicht über Schlüssel verfügen, können Objekte komplexer Typen ohne zugeordnete Entitätstyp verwaltet werden. Weitere Informationen finden Sie unter [Objekte mit komplexen Typen](https://msdn.microsoft.com/library/34d5c570-a891-42b8-80ae-20e96eedc3af).  
  
   
  
## Examples  
 Im folgenden Beispiel der benutzerdefinierten Datenklasse `OrderInfo` erbt <xref:System.Data.Objects.DataClasses.ComplexObject> zugeordnet ist, und die `OrderInfo` im konzeptionellen Modell definierten komplexen Typ.  
  
 [!code-csharp[DP EntityObject Concepts#EntityObject](~/samples/snippets/csharp/VS_Snippets_Data/DP EntityObject Concepts/CS/SalesObjects.cs#entityobject)]
 [!code-vb[DP EntityObject Concepts#EntityObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP EntityObject Concepts/VB/SalesObjects.vb#entityobject)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-complex-types.md">Gewusst wie: Ausführen einer Abfrage, die komplexe Typen (EntityClient) zurückgibt.</related>
    <related type="Article" href="https://msdn.microsoft.com/library/b13b24d5-05d1-4746-b0d2-5472796240c6(v=vs.90)">Gewusst wie: Definieren eines Modells mit komplexen Typen (Entity Framework)</related>
    <related type="Article" href="https://msdn.microsoft.com/library/525ffa1c-524e-40bd-bb80-2929aec8c8d8(v=vs.90)">Gewusst wie: Hinzufügen und Ändern von Objekten mit komplexen Typen (Entity Framework)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ComplexObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.ComplexObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ComplexObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Instanz von <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportPropertyChanged">
      <MemberSignature Language="C#" Value="protected override sealed void ReportPropertyChanged (string property);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ReportPropertyChanged(string property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ReportPropertyChanged (property As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ReportPropertyChanged(System::String ^ property);" />
      <MemberSignature Language="F#" Value="override this.ReportPropertyChanged : string -&gt; unit" Usage="complexObject.ReportPropertyChanged property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property">Der Name der geänderten Eigenschaft.</param>
        <summary>Benachrichtigt den Änderungsprotokollierer über die Änderung einer Eigenschaft eines komplexen Objekts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein komplexer Typ mit den Entity Data Model-Tools generiert wird die <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged%2A> Methode wird aufgerufen, nachdem die Änderung einer Eigenschaft, die in den zwischengespeicherten Wert bestätigen die <xref:System.Data.Objects.DataClasses.IEntityChangeTracker> als der ursprüngliche Wert der Eigenschaft.  
  
 Von dieser Methode wird die <xref:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged%2A>-Methode im System zur Änderungsnachverfolgung aufgerufen.  
  
 Zum Nachverfolgen von Änderungen, die an einer Eigenschaft eines benutzerdefinierten komplexen Objekts vorgenommen werden, muss die <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged%2A>-Methode aufgerufen werden. Dieses Vorgehen ist ratsam, wenn das komplexe Objekt von <xref:System.Data.Objects.DataClasses.ComplexObject> erbt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="property" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReportPropertyChanging">
      <MemberSignature Language="C#" Value="protected override sealed void ReportPropertyChanging (string property);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ReportPropertyChanging(string property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ReportPropertyChanging (property As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ReportPropertyChanging(System::String ^ property);" />
      <MemberSignature Language="F#" Value="override this.ReportPropertyChanging : string -&gt; unit" Usage="complexObject.ReportPropertyChanging property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property">Der Name der Eigenschaft, die geändert wird.</param>
        <summary>Benachrichtigt den Änderungsprotokollierer über die ausstehende Änderung einer Eigenschaft eines komplexen Objekts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein komplexer Typ mit den Entity Data Model-Tools generiert wird die <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging%2A> Methode wird aufgerufen, bevor die Änderung einer Eigenschaft zum Zwischenspeichern des aktuellen Wert der Eigenschaft in der <xref:System.Data.Objects.DataClasses.IEntityChangeTracker> , damit dieser Wert als ursprünglichen Wert für die Eigenschaft verwendet werden kann.  
  
 Von dieser Methode wird die <xref:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging%2A>-Methode im System zur Änderungsnachverfolgung aufgerufen.  
  
 Zum Nachverfolgen von Änderungen, die an einer Eigenschaft eines benutzerdefinierten komplexen Objekts vorgenommen werden, muss die <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging%2A>-Methode aufgerufen werden. Dieses Vorgehen ist ratsam, wenn das komplexe Objekt von <xref:System.Data.Objects.DataClasses.ComplexObject> erbt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="property" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
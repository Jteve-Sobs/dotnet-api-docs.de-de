<Type Name="MouseGesture" FullName="System.Windows.Input.MouseGesture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7c68b7aa45e2198deaf821a7467a0178ecb0888f" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78840810" /></Metadata><TypeSignature Language="C#" Value="public class MouseGesture : System.Windows.Input.InputGesture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MouseGesture extends System.Windows.Input.InputGesture" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.MouseGesture" />
  <TypeSignature Language="VB.NET" Value="Public Class MouseGesture&#xA;Inherits InputGesture" />
  <TypeSignature Language="C++ CLI" Value="public ref class MouseGesture : System::Windows::Input::InputGesture" />
  <TypeSignature Language="F#" Value="type MouseGesture = class&#xA;    inherit InputGesture" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputGesture</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.MouseGestureConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.MouseGestureValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert eine Mauseingabebewegung, die zum Aufrufen eines Befehls verwendet werden kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anders als bei einer <xref:System.Windows.Input.KeyGesture>muss ein <xref:System.Windows.Input.MouseAction> nicht mit <xref:System.Windows.Input.ModifierKeys> gekoppelt werden, damit es sich um eine gültige <xref:System.Windows.Input.MouseGesture>handelt.  
  
 Eine <xref:System.Windows.Input.MouseGesture> kann über eine <xref:System.Windows.Input.MouseBinding> an eine <xref:System.Windows.Input.RoutedCommand> (oder andere <xref:System.Windows.Input.ICommand> Implementierungen) gebunden werden, sodass der Befehl beim Auftreten des <xref:System.Windows.Input.MouseGesture> aufgerufen wird.  
  
 Bei <xref:System.Windows.Input.MouseGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Attribut Verwendungen ist die Eigenschaft, die in der Regel in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] festgelegt wird, <xref:System.Windows.Input.MouseBinding.Gesture%2A>, in Fällen, in denen die Geste sowohl eine Maus Aktion als auch einen oder mehrere modifiziererschlüssel darstellen kann. Sie können auch die <xref:System.Windows.Input.MouseBinding.Gesture%2A>-Eigenschaft auf eine Maus Aktion festlegen. Im Allgemeinen wird empfohlen, dass Sie nur das <xref:System.Windows.Input.KeyBinding.Gesture%2A> Attribut aus [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwenden, anstatt <xref:System.Windows.Input.MouseBinding.MouseAction%2A>festzulegen, auch wenn Sie keine modifiziererer angeben. Dadurch wird Mehrdeutigkeit vermieden, die optimierte Syntax bereitstellt und die einfachste Darstellung der Serialisierung bereitstellt.  
  
 <xref:System.Windows.Input.MouseGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Objekt Element Verwendungen sind zwar möglich, aber nicht üblich, da Sie normalerweise die Eigenschaft <xref:System.Windows.Input.MouseBinding.Gesture%2A> von <xref:System.Windows.Input.MouseBinding> Inline festlegen können, ohne die Eigenschafts Element Syntax zu verwenden.  
  
<a name="xamlAttributeUsage_MouseGesture"></a>   
## <a name="xaml-attribute-usage"></a>Verwendung von XAML-Attributen  
  
```  
<object property="mouseAction"/>  
- or -  
<object property="oneOrMoreModifierKeys+mouseAction"/>  
```  
  
<a name="xamlValues_MouseGesture"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 `mouseAction`  
 <xref:System.Windows.Input.MouseAction>  
  
 Eine einzelne Maus Aktion.  
  
 `oneOrMoreModifierKeys`  
 Mindestens ein modifiziererschlüssel, der durch die <xref:System.Windows.Input.ModifierKeys>-Enumeration definiert wird. Wenn mehr als eine Modifizierertaste angegeben wird, wird für jede Modifizierertaste das Zeichen "+" getrennt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Input.MouseGesture> erstellt und einem <xref:System.Windows.Input.RoutedCommand> mithilfe eines <xref:System.Windows.Input.MouseBinding>zugeordnet wird.  Wenn beim Klicken auf das Mausrad geklickt wird, während die <xref:System.Windows.Input.ModifierKeys.Control> Taste gedrückt wird, wird der <xref:System.Windows.Input.ApplicationCommands.Open%2A> aufgerufen.  
  
 [!code-xaml[commandlibrarysnippets#MouseBindingMouseGestureXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#mousebindingmousegesturexaml)]  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedtoinputbinding)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedtoinputbinding)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.MouseGesture" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseGesture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseGesture.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseGesture();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.MouseGesture" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseGesture (System.Windows.Input.MouseAction mouseAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.MouseAction mouseAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mouseAction As MouseAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseGesture(System::Windows::Input::MouseAction mouseAction);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.MouseGesture : System.Windows.Input.MouseAction -&gt; System.Windows.Input.MouseGesture" Usage="new System.Windows.Input.MouseGesture mouseAction" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="mouseAction" Type="System.Windows.Input.MouseAction" />
      </Parameters>
      <Docs>
        <param name="mouseAction">Die dieser Bewegung zugeordnete Aktion.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.MouseGesture" />-Klasse mit dem angegebenen <see cref="T:System.Windows.Input.MouseAction" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="mouseAction" /> ist kein gültiger <see cref="T:System.Windows.Input.MouseAction" />-Wert.</exception>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseGesture (System.Windows.Input.MouseAction mouseAction, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.MouseAction mouseAction, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mouseAction As MouseAction, modifiers As ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseGesture(System::Windows::Input::MouseAction mouseAction, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.MouseGesture : System.Windows.Input.MouseAction * System.Windows.Input.ModifierKeys -&gt; System.Windows.Input.MouseGesture" Usage="new System.Windows.Input.MouseGesture (mouseAction, modifiers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mouseAction" Type="System.Windows.Input.MouseAction" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="mouseAction">Die dieser Bewegung zugeordnete Aktion.</param>
        <param name="modifiers">Die dieser Bewegung zugeordneten Modifizierer.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.MouseGesture" />-Klasse unter Verwendung der angegebenen <see cref="T:System.Windows.Input.MouseAction" /> und des angegebenen <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="mouseAction" /> ist kein gültiger <see cref="T:System.Windows.Input.MouseAction" />-Wert. 
- oder - 
 <paramref name="modifiers" /> ist kein gültiger <see cref="T:System.Windows.Input.ModifierKeys" />-Wert.</exception>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Matches(object targetElement, class System.Windows.Input.InputEventArgs inputEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Matches (targetElement As Object, inputEventArgs As InputEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Matches(System::Object ^ targetElement, System::Windows::Input::InputEventArgs ^ inputEventArgs);" />
      <MemberSignature Language="F#" Value="override this.Matches : obj * System.Windows.Input.InputEventArgs -&gt; bool" Usage="mouseGesture.Matches (targetElement, inputEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetElement" Type="System.Object" />
        <Parameter Name="inputEventArgs" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetElement">Das Ziel.</param>
        <param name="inputEventArgs">Die Eingabeereignisdaten, die mit dieser Bewegung verglichen werden sollen.</param>
        <summary>Bestimmt, ob diese <see cref="T:System.Windows.Input.MouseGesture" /> der Eingabe entspricht, die dem angegebenen <see cref="T:System.Windows.Input.InputEventArgs" />-Objekt zugeordnet ist.</summary>
        <returns><see langword="true" />, wenn die Ereignisdaten dieser <see cref="T:System.Windows.Input.MouseGesture" /> entsprechen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie überprüfen können, ob eine <xref:System.Windows.Input.MouseGesture> mit der Eingabe übereinstimmt, die einer Instanz einer <xref:System.Windows.Input.InputEventArgs>zugeordnet ist. Ein <xref:System.Windows.UIElement.MouseDown> Ereignishandler vergleicht die Ereignisdaten mit der <xref:System.Windows.Input.MouseGesture> mithilfe der <xref:System.Windows.Input.MouseGesture.Matches%2A>-Methode.  
  
 [!code-csharp[commandlibrarysnippets#KeyDownHandlerMouseGestureMatches](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keydownhandlermousegesturematches)]
 [!code-vb[commandlibrarysnippets#KeyDownHandlerMouseGestureMatches](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keydownhandlermousegesturematches)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseGesture.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); void set(System::Windows::Input::ModifierKeys value); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys with get, set" Usage="System.Windows.Input.MouseGesture.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die dieser <see cref="T:System.Windows.Input.MouseGesture" /> zugeordneten Modifizierertasten ab oder legt diese fest.</summary>
        <value>Die dieser Bewegung zugeordneten Modifizierertasten. Der Standardwert ist <see cref="F:System.Windows.Input.ModifierKeys.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anders als bei einer <xref:System.Windows.Input.KeyGesture>muss ein <xref:System.Windows.Input.MouseAction> nicht mit <xref:System.Windows.Input.ModifierKeys> gekoppelt werden, damit es sich um eine gültige <xref:System.Windows.Input.MouseGesture>handelt.  
  
 <xref:System.Windows.Input.ModifierKeys> ist eine Bitfeldenumeration, daher ist es möglich, dass mehrere Modifizierertasten gleichzeitig gedrückt werden. Verwenden Sie bitvorgänge, um den exakten Satz von Modifizierertasten zu bestimmen.  
  
<a name="xamlAttributeUsage_Modifiers"></a>   
## <a name="xaml-attribute-usage"></a>Verwendung von XAML-Attributen  
  
```  
<object Modifiers="oneOrMoreModifierKeys"/>  
```  
  
<a name="xamlValues_Modifiers"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 *oneormoremodifierkeys*  
 Mindestens ein modifiziererschlüssel, der durch die <xref:System.Windows.Input.ModifierKeys>-Enumeration definiert ist, ist durch ein "+"-Zeichen getrennt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Input.MouseGesture> erstellt und einem <xref:System.Windows.Input.RoutedCommand> mithilfe eines <xref:System.Windows.Input.MouseBinding>zugeordnet wird.  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedtoinputbinding)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedtoinputbinding)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="MouseAction">
      <MemberSignature Language="C#" Value="public System.Windows.Input.MouseAction MouseAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.MouseAction MouseAction" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseGesture.MouseAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MouseAction As MouseAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::MouseAction MouseAction { System::Windows::Input::MouseAction get(); void set(System::Windows::Input::MouseAction value); };" />
      <MemberSignature Language="F#" Value="member this.MouseAction : System.Windows.Input.MouseAction with get, set" Usage="System.Windows.Input.MouseGesture.MouseAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die dieser Bewegung zugeordnete <see cref="T:System.Windows.Input.MouseAction" /> ab oder legt diese fest.</summary>
        <value>Die dieser Bewegung zugeordnete Mausaktion. Der Standardwert ist <see cref="F:System.Windows.Input.MouseAction.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anders als bei einer <xref:System.Windows.Input.KeyGesture>muss ein <xref:System.Windows.Input.MouseAction> nicht mit <xref:System.Windows.Input.ModifierKeys> gekoppelt werden, damit es sich um eine gültige <xref:System.Windows.Input.MouseGesture>handelt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Input.MouseGesture> erstellt und einem <xref:System.Windows.Input.RoutedCommand> mithilfe eines <xref:System.Windows.Input.MouseBinding>zugeordnet wird.  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedtoinputbinding)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedtoinputbinding)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
  </Members>
</Type>

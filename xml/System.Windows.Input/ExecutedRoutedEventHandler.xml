<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5cb12a2cc5ed353d695ecbf78462a4227628d38d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37505196" /></Metadata><TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type ExecutedRoutedEventHandler = delegate of obj * ExecutedRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Das Objekt, an das der Ereignishandler angefügt ist.</param>
    <param name="e">Die Ereignisdaten.</param>
    <summary>Stellt die Methode für die Behandlung der Routingereignisse <see cref="E:System.Windows.Input.CommandBinding.Executed" /> und <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> sowie verwandter angefügter Ereignisse dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Delegat enthält die Implementierungslogik für eine <xref:System.Windows.Input.RoutedCommand>.  Trennen die Implementierungslogik des Befehls können den Befehl aus, um aus verschiedenen Quellen und Typen aufgerufen werden und ermöglicht die Zentralisierung der Befehlslogik.  
  
 Dieser Delegat wird auch zum <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> und <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>, welche sind angefügte Ereignisse auf die <xref:System.Windows.Input.CommandManager> Klasse, die ein Großteil der befehlsgebungsinfrastruktur implementiert. Aber die meisten praktischen Handler verarbeiten die <xref:System.Windows.Input.CommandBinding.Executed> Ereignisse aus einem bestimmten <xref:System.Windows.Input.CommandBinding>und nicht als für die Arbeit an der <xref:System.Windows.Input.CommandManager> Ebene.  
  
 In <xref:System.Windows.Input.ExecutedRoutedEventArgs>, die folgenden Eigenschaften sind im Allgemeinen von Interesse sind, wenn Sie einen Ereignishandler für ein Routingereignis schreiben, die aus einer ausgeführten Befehl ergibt:  
  
-   <xref:System.Windows.RoutedEventArgs.Source%2A> Gibt das Ziel, in dem der Befehl ausgeführt wurde. Nachdem der Befehl ausgeführt wurde, stellen Sie auch sich die <xref:System.Windows.RoutedEventArgs.Source%2A> mehr in der Regel in weitergeleitet Ereignisse – Begriffe, wie das Objekt, das ein Ereignis ausgelöst hat.  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> meldet die Anweisung ausgeführte Befehl. Diese Eigenschaft ist nützlich, bei Verwendung von befehlsbindungen, und wenn Sie Handler schreiben, die potenziell mehrere Befehle zu verarbeiten.  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> meldet alle befehlsspezifischen-Parameter, die vom ausgeführten Befehl übergeben wurden. Nicht alle Befehle verwenden oder befehlsspezifische Parameter erwartet.  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> meldet, ob das Routingereignis, das von den ausgeführten Befehl geführt haben, bereits von einem anderen Element entlang der Route behandelt wurde. Für Routingereignishandler, ist es eine empfohlene Vorgehensweise, um Ereignishandler zu erhalten, die sinnvolle Tasks ausführen, bei der Behandlung des Ereignisses festgelegt <xref:System.Windows.RoutedEventArgs.Handled%2A> zu `true`. Dies verhindert, dass typische Handler für das Ereignis behandeln, die das Ereignis erneut Weiter, entlang der Route. Weitere Informationen zur Behandlung der Routingereignisse finden Sie unter [Markieren von Routingereignissen als behandelt und Klassenbehandlung](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Dieser Delegat stellt auch den Handler für <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> und <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>, welche sind angefügte Ereignisse auf die <xref:System.Windows.Input.CommandManager> Klasse, die ein Großteil der befehlsgebungsinfrastruktur implementiert. Aber die meisten praktischen Handler verarbeiten die <xref:System.Windows.Input.CommandBinding.Executed> Ereignisse aus einem bestimmten <xref:System.Windows.Input.CommandBinding>und nicht als für die Arbeit an der <xref:System.Windows.Input.CommandManager> Ebene.  
  
 Weitere Informationen über Befehle finden Sie unter [Befehlsübersicht](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 In diesem Beispiel wird ein <xref:System.Windows.Input.ExecutedRoutedEventHandler> eine visuelle Eigenschaft für das Ziel, die festlegt, wenn der Befehl ausgeführt wird. Das Beispiel enthält auch die <xref:System.Windows.Input.CanExecuteRoutedEventHandler> für den gleichen Befehl.  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>
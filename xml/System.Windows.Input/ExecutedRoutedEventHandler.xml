<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2cf57493a4b4f642c9cc3a5a79bf434f69af3721" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82497371" /></Metadata><TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type ExecutedRoutedEventHandler = delegate of obj * ExecutedRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Das Objekt, an das der Ereignishandler angefügt ist.</param>
    <param name="e">Die Ereignisdaten.</param>
    <summary>Stellt die Methode für die Behandlung der Routingereignisse <see cref="E:System.Windows.Input.CommandBinding.Executed" /> und <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> sowie verwandter angefügter Ereignisse dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Delegat enthält die Implementierungs Logik für eine <xref:System.Windows.Input.RoutedCommand>.  Durch das Trennen der Implementierungs Logik vom Befehl kann der Befehl aus unterschiedlichen Quellen und Typen aufgerufen werden, und es wird die Zentralisierung der Befehls Logik ermöglicht.  
  
 Dieser Delegat wird auch für <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> und <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>verwendet, bei denen es sich um angefügte Ereignisse in der <xref:System.Windows.Input.CommandManager>-Klasse handelt, die einen Großteil der Befehls Infrastruktur implementiert. Die meisten praktischen Handler behandeln jedoch die <xref:System.Windows.Input.CommandBinding.Executed> Ereignisse von einem bestimmten <xref:System.Windows.Input.CommandBinding>, anstatt auf <xref:System.Windows.Input.CommandManager> Ebene zu arbeiten.  
  
 In <xref:System.Windows.Input.ExecutedRoutedEventArgs>sind die folgenden Eigenschaften im Allgemeinen von Interesse, wenn Sie einen Ereignishandler für ein Routing Ereignis schreiben, das sich aus einem ausgeführten Befehl ergibt:  
  
-   <xref:System.Windows.RoutedEventArgs.Source%2A> gibt das Ziel an, in dem der Befehl ausgeführt wurde. Nachdem der Befehl ausgeführt wurde, können Sie sich auch die <xref:System.Windows.RoutedEventArgs.Source%2A> allgemeineres in den Begriffen von Routing Ereignissen vorstellen, als das Objekt, das ein Routing Ereignis ausgelöst hat.  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> meldet den Befehl, der ausgeführt hat. Diese Eigenschaft ist nützlich, wenn Sie Befehls Bindungen verwenden und Handler schreiben, die potenziell mehrere Befehle verarbeiten können.  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> meldet alle Befehls spezifischen Parameter, die vom ausführenden Befehl übermittelt wurden. Nicht alle Befehle verwenden oder erwarten Befehls spezifische Parameter.  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> meldet, ob das Routing Ereignis, das aufgrund des ausgeführten Befehls entstanden ist, bereits von einem anderen Element entlang der Route behandelt wurde. Bei Routing Ereignis Handlern empfiehlt es sich, Handler zu verwenden, die bei der Behandlung des Ereignisses sinnvolle Aufgaben ausführen, um <xref:System.Windows.RoutedEventArgs.Handled%2A> auf `true`festzulegen. Dadurch wird verhindert, dass typische Handler für das Ereignis das Ereignis weiter entlang der Route verarbeiten. Weitere Informationen zum Verarbeiten von Routing Ereignissen finden Sie unter Markieren von Routing [Ereignissen als behandelt und Klassen Behandlung](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Dieser Delegat stellt auch Handler für <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> und <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>dar, bei denen es sich um angefügte Ereignisse in der <xref:System.Windows.Input.CommandManager>-Klasse handelt, die einen Großteil der Befehls Infrastruktur implementiert. Die meisten praktischen Handler behandeln jedoch die <xref:System.Windows.Input.CommandBinding.Executed> Ereignisse von einem bestimmten <xref:System.Windows.Input.CommandBinding>, anstatt auf <xref:System.Windows.Input.CommandManager> Ebene zu arbeiten.  
  
 Weitere Informationen über Befehle finden Sie unter [Befehlsübersicht](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 In diesem Beispiel wird ein <xref:System.Windows.Input.ExecutedRoutedEventHandler> erstellt, mit dem beim Ausführen des Befehls eine visuelle Eigenschaft für das Ziel festgelegt wird. Das Beispiel enthält auch die <xref:System.Windows.Input.CanExecuteRoutedEventHandler> für denselben Befehl.  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>

<Type Name="CommandManager" FullName="System.Windows.Input.CommandManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="174db82edff5383f90d1d46c76c2a625f61f628a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30650314" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CommandManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CommandManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CommandManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CommandManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandManager sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="ad98e-101">Stellt Dienstprogrammmethoden für Befehle bereit, um <see cref="T:System.Windows.Input.CommandBinding" />- und <see cref="T:System.Windows.Input.InputBinding" />-Objekte für Klassenbesitzer und Befehle zu registrieren sowie Ereignishandler für Befehle hinzuzufügen und zu entfernen und stellt Dienste zum Abfragen des Befehlsstatus bereit.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad98e-101">Provides command related utility methods that register <see cref="T:System.Windows.Input.CommandBinding" /> and <see cref="T:System.Windows.Input.InputBinding" /> objects for class owners and commands, add and remove command event handlers, and provides services for querying the status of a command.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad98e-102">Die <xref:System.Windows.Input.CommandManager> ist verantwortlich für die Verwaltung von weitergeleiteten Befehlen.</span><span class="sxs-lookup"><span data-stu-id="ad98e-102">The <xref:System.Windows.Input.CommandManager> is responsible for managing routed commands.</span></span>  <span data-ttu-id="ad98e-103">Weitere Informationen über Befehle finden Sie unter [Befehle (Übersicht)](~/docs/framework/wpf/advanced/commanding-overview.md).</span><span class="sxs-lookup"><span data-stu-id="ad98e-103">For more information about commanding, see [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).</span></span>  
  
 <span data-ttu-id="ad98e-104">Verwendung <xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A> zum Registrieren einer <xref:System.Windows.Input.CommandBinding> auf eine Klasse im Gegensatz zu einer Instanz.</span><span class="sxs-lookup"><span data-stu-id="ad98e-104">Use <xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A> to register a <xref:System.Windows.Input.CommandBinding> to a class as opposed to an instance.</span></span>  
  
 <span data-ttu-id="ad98e-105">Verwendung <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> zum Registrieren einer <xref:System.Windows.Input.InputBinding> auf eine Klasse im Gegensatz zu einer Instanz.</span><span class="sxs-lookup"><span data-stu-id="ad98e-105">Use <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> to register an <xref:System.Windows.Input.InputBinding> to a class as opposed to an instance.</span></span>  
  
 <span data-ttu-id="ad98e-106">Die <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> Methode erzwingt die <xref:System.Windows.Input.CommandManager> zum Auslösen der <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="ad98e-106">The <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method forces the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.</span></span>  <span data-ttu-id="ad98e-107">Die <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis weist eine Befehlsquelle, um den Befehl Abfragen, um zu bestimmen, ob der Befehl ausgeführt werden kann oder nicht zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="ad98e-107">The <xref:System.Windows.Input.CommandManager.RequerySuggested> event informs a command source to query the command it is associated with to determine whether or not the command can execute.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ICommandSource" />
    <altmember cref="T:System.Windows.Input.ICommand" />
  </Docs>
  <Members>
    <Member MemberName="AddCanExecuteHandler">
      <MemberSignature Language="C#" Value="public static void AddCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddCanExecuteHandler(class System.Windows.UIElement element, class System.Windows.Input.CanExecuteRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddCanExecuteHandler (element As UIElement, handler As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddCanExecuteHandler(System::Windows::UIElement ^ element, System::Windows::Input::CanExecuteRoutedEventHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="ad98e-108">Das Element, an das <c>handler</c> angefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-108">The element to attach <c>handler</c> to.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="ad98e-109">Der ausführbare Handler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-109">The can execute handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad98e-110">Fügt den angegebenen <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> an das angegebene Element an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-110">Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ad98e-111">Das folgende Beispiel erstellt eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> und ein <xref:System.Windows.Input.ExecutedRoutedEventHandler> und angefügt, um eine <xref:System.Windows.Controls.Button> also eine Befehlsquelle für die <xref:System.Windows.Input.ApplicationCommands.Help%2A> Befehl.</span><span class="sxs-lookup"><span data-stu-id="ad98e-111">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 <span data-ttu-id="ad98e-112">Zunächst wird die <xref:System.Windows.Controls.Button> erstellt und zugeordnet wird die <xref:System.Windows.Input.ApplicationCommands.Help%2A> Befehl.</span><span class="sxs-lookup"><span data-stu-id="ad98e-112">First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  
  
 <span data-ttu-id="ad98e-113">Als Nächstes wird die <xref:System.Windows.Input.CanExecuteRoutedEventHandler> und <xref:System.Windows.Input.ExecutedRoutedEventHandler> erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="ad98e-113">Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  
  
 <span data-ttu-id="ad98e-114">Und schließlich werden die Handler an angefügt der <xref:System.Windows.Controls.Button> mithilfe der <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> und <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="ad98e-114">And finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ad98e-115">
            <paramref name="element" /> oder <paramref name="handler" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-115">
              <paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="AddExecutedHandler">
      <MemberSignature Language="C#" Value="public static void AddExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddExecutedHandler(class System.Windows.UIElement element, class System.Windows.Input.ExecutedRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddExecutedHandler (element As UIElement, handler As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddExecutedHandler(System::Windows::UIElement ^ element, System::Windows::Input::ExecutedRoutedEventHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="ad98e-116">Das Element, an das <c>handler</c> angefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-116">The element to attach <c>handler</c> to.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="ad98e-117">Der ausgeführte Handler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-117">The executed handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad98e-118">Fügt den angegebenen <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> an das angegebene Element an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-118">Attaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> to the specified element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ad98e-119">Das folgende Beispiel erstellt eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> und ein <xref:System.Windows.Input.ExecutedRoutedEventHandler> und angefügt, um eine <xref:System.Windows.Controls.Button> also eine Befehlsquelle für die <xref:System.Windows.Input.ApplicationCommands.Help%2A> Befehl.</span><span class="sxs-lookup"><span data-stu-id="ad98e-119">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 <span data-ttu-id="ad98e-120">Zunächst wird die <xref:System.Windows.Controls.Button> erstellt und zugeordnet wird die <xref:System.Windows.Input.ApplicationCommands.Help%2A> Befehl.</span><span class="sxs-lookup"><span data-stu-id="ad98e-120">First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  
  
 <span data-ttu-id="ad98e-121">Als Nächstes wird die <xref:System.Windows.Input.CanExecuteRoutedEventHandler> und <xref:System.Windows.Input.ExecutedRoutedEventHandler> erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="ad98e-121">Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  
  
 <span data-ttu-id="ad98e-122">Und schließlich werden die Handler an angefügt der <xref:System.Windows.Controls.Button> mithilfe der <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> und <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="ad98e-122">And finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ad98e-123">
            <paramref name="element" /> oder <paramref name="handler" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-123">
              <paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="AddPreviewCanExecuteHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewCanExecuteHandler(class System.Windows.UIElement element, class System.Windows.Input.CanExecuteRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewCanExecuteHandler (element As UIElement, handler As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewCanExecuteHandler(System::Windows::UIElement ^ element, System::Windows::Input::CanExecuteRoutedEventHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="ad98e-124">Das Element, an das <c>handler</c> angefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-124">The element to attach <c>handler</c> to.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="ad98e-125">Der ausführbare Handler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-125">The can execute handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad98e-126">Fügt den angegebenen <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> an das angegebene Element an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-126">Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ad98e-127">Das folgende Beispiel erstellt eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> und ein <xref:System.Windows.Input.ExecutedRoutedEventHandler> und angefügt, um eine <xref:System.Windows.Controls.Button> also eine Befehlsquelle für die <xref:System.Windows.Input.ApplicationCommands.Help%2A> Befehl.</span><span class="sxs-lookup"><span data-stu-id="ad98e-127">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 <span data-ttu-id="ad98e-128">Zunächst wird die <xref:System.Windows.Controls.Button> erstellt und zugeordnet wird die <xref:System.Windows.Input.ApplicationCommands.Help%2A> Befehl.</span><span class="sxs-lookup"><span data-stu-id="ad98e-128">First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  
  
 <span data-ttu-id="ad98e-129">Als Nächstes wird die <xref:System.Windows.Input.CanExecuteRoutedEventHandler> und <xref:System.Windows.Input.ExecutedRoutedEventHandler> erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="ad98e-129">Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  
  
 <span data-ttu-id="ad98e-130">Schließlich werden die Handler an angefügt der <xref:System.Windows.Controls.Button> mithilfe der <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> und <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="ad98e-130">Finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ad98e-131">
            <paramref name="element" /> oder <paramref name="handler" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-131">
              <paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="AddPreviewExecutedHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewExecutedHandler(class System.Windows.UIElement element, class System.Windows.Input.ExecutedRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewExecutedHandler (element As UIElement, handler As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewExecutedHandler(System::Windows::UIElement ^ element, System::Windows::Input::ExecutedRoutedEventHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="ad98e-132">Das Element, an das <c>handler</c> angefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-132">The element to attach <c>handler</c> to.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="ad98e-133">Der ausführbare Handler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-133">The can execute handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad98e-134">Fügt den angegebenen <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> an das angegebene Element an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-134">Attaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> to the specified element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ad98e-135">Das folgende Beispiel erstellt eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> und ein <xref:System.Windows.Input.ExecutedRoutedEventHandler> und angefügt, um eine <xref:System.Windows.Controls.Button> also eine Befehlsquelle für die <xref:System.Windows.Input.ApplicationCommands.Help%2A> Befehl.</span><span class="sxs-lookup"><span data-stu-id="ad98e-135">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 <span data-ttu-id="ad98e-136">Zunächst wird die <xref:System.Windows.Controls.Button> erstellt und zugeordnet wird die <xref:System.Windows.Input.ApplicationCommands.Help%2A> Befehl.</span><span class="sxs-lookup"><span data-stu-id="ad98e-136">First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  
  
 <span data-ttu-id="ad98e-137">Als Nächstes wird die <xref:System.Windows.Input.CanExecuteRoutedEventHandler> und <xref:System.Windows.Input.ExecutedRoutedEventHandler> erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="ad98e-137">Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  
  
 <span data-ttu-id="ad98e-138">Schließlich werden die Handler an angefügt der <xref:System.Windows.Controls.Button> mithilfe der <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> und <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="ad98e-138">Finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ad98e-139">
            <paramref name="element" /> oder <paramref name="handler" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-139">
              <paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="see AddCanExecuteHandler, and RemoveCanExecuteHandler" />
      <MemberSignature Language="ILAsm" Value="see AddCanExecuteHandler, and RemoveCanExecuteHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.CanExecute" />
      <MemberSignature Language="VB.NET" Value="see AddCanExecuteHandler, and RemoveCanExecuteHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent CanExecuteEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent CanExecuteEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.CommandManager.CanExecuteEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CanExecuteEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ CanExecuteEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad98e-140">Bezeichnet das angefügte <see cref="E:System.Windows.Input.CommandManager.CanExecute" />-Ereignis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-140">Identifies the <see cref="E:System.Windows.Input.CommandManager.CanExecute" /> attached event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Executed">
      <MemberSignature Language="C#" Value="see AddExecutedHandler, and RemoveExecutedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddExecutedHandler, and RemoveExecutedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.Executed" />
      <MemberSignature Language="VB.NET" Value="see AddExecutedHandler, and RemoveExecutedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ExecutedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ExecutedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.CommandManager.ExecutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ExecutedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ExecutedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad98e-141">Bezeichnet das angefügte <see cref="E:System.Windows.Input.CommandManager.Executed" />-Ereignis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-141">Identifies the <see cref="E:System.Windows.Input.CommandManager.Executed" /> attached event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateRequerySuggested">
      <MemberSignature Language="C#" Value="public static void InvalidateRequerySuggested ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InvalidateRequerySuggested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InvalidateRequerySuggested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InvalidateRequerySuggested();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad98e-142">Zwingt den <see cref="T:System.Windows.Input.CommandManager" /> das <see cref="E:System.Windows.Input.CommandManager.RequerySuggested" />-Ereignis auszulösen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-142">Forces the <see cref="T:System.Windows.Input.CommandManager" /> to raise the <see cref="E:System.Windows.Input.CommandManager.RequerySuggested" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad98e-143">Die <xref:System.Windows.Input.CommandManager> zahlt nur auf bestimmte Bedingungen feststellen, wenn das Befehlsziel geändert hat, z. B. die Änderung in den Tastaturfokus.</span><span class="sxs-lookup"><span data-stu-id="ad98e-143">The <xref:System.Windows.Input.CommandManager> only pays attention to certain conditions in determining when the command target has changed, such as change in keyboard focus.</span></span>  <span data-ttu-id="ad98e-144">In Situationen, in denen die <xref:System.Windows.Input.CommandManager> bestimmt eine Änderung der Bedingungen, die dazu führen, einen Befehl nicht dass ausgeführt werden, können nicht ausreichend <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> aufgerufen werden, um zu erzwingen der <xref:System.Windows.Input.CommandManager> zum Auslösen der <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="ad98e-144">In situations where the <xref:System.Windows.Input.CommandManager> does not sufficiently determine a change in conditions that cause a command to not be able to execute, <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> can be called to force the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad98e-145">Im folgenden Beispiel wird eine <xref:System.Windows.Threading.DispatcherTimer> in regelmäßigen Abständen Aufrufen <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> Erzwingen der <xref:System.Windows.Input.CommandManager> zum Auslösen der <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="ad98e-145">The following example uses a <xref:System.Windows.Threading.DispatcherTimer> to periodically call <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> to force the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.</span></span>  
  
 [!code-csharp[InvalidateRequeryWithDispatcherTimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[InvalidateRequeryWithDispatcherTimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecute">
      <MemberSignature Language="C#" Value="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.PreviewCanExecute" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecuteEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewCanExecuteEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewCanExecuteEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.CommandManager.PreviewCanExecuteEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewCanExecuteEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewCanExecuteEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad98e-146">Bezeichnet das angefügte <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" />-Ereignis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-146">Identifies the <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> attached event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewExecuted">
      <MemberSignature Language="C#" Value="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.PreviewExecuted" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewExecutedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewExecutedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewExecutedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.CommandManager.PreviewExecutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewExecutedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewExecutedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad98e-147">Bezeichnet das angefügte <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" />-Ereignis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-147">Identifies the <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> attached event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassCommandBinding">
      <MemberSignature Language="C#" Value="public static void RegisterClassCommandBinding (Type type, System.Windows.Input.CommandBinding commandBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassCommandBinding(class System.Type type, class System.Windows.Input.CommandBinding commandBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassCommandBinding(Type ^ type, System::Windows::Input::CommandBinding ^ commandBinding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="commandBinding" Type="System.Windows.Input.CommandBinding" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="ad98e-148">Die Klasse, für die <c>commandBinding</c> registriert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-148">The class with which to register <c>commandBinding</c>.</span>
          </span>
        </param>
        <param name="commandBinding">
          <span data-ttu-id="ad98e-149">Die Befehlsbindung, die registriert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-149">The command binding to register.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad98e-150">Registriert eine <see cref="T:System.Windows.Input.CommandBinding" /> mit dem angegebenen Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-150">Registers a <see cref="T:System.Windows.Input.CommandBinding" /> with the specified type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad98e-151">Diese Methode ermöglicht eine <xref:System.Windows.Input.CommandBinding> anstelle einer Instanz einer Klasse mit einer Klasse zugeordnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ad98e-151">This method enables a <xref:System.Windows.Input.CommandBinding> to be associated with a class instead than an instance of a class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ad98e-152">
            <paramref name="type" /> oder <paramref name="commandBinding" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-152">
              <paramref name="type" /> or <paramref name="commandBinding" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassInputBinding">
      <MemberSignature Language="C#" Value="public static void RegisterClassInputBinding (Type type, System.Windows.Input.InputBinding inputBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassInputBinding(class System.Type type, class System.Windows.Input.InputBinding inputBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassInputBinding(Type ^ type, System::Windows::Input::InputBinding ^ inputBinding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="inputBinding" Type="System.Windows.Input.InputBinding" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="ad98e-153">Der Typ, mit dem <c>inputBinding</c> registriert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-153">The type to register <c>inputBinding</c> with.</span>
          </span>
        </param>
        <param name="inputBinding">
          <span data-ttu-id="ad98e-154">Die Eingabebindung, die registriert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-154">The input binding to register.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad98e-155">Registriert die angegebene <see cref="T:System.Windows.Input.InputBinding" /> für den angegebenen Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-155">Registers the specified <see cref="T:System.Windows.Input.InputBinding" /> with the specified type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad98e-156">Diese Methode ermöglicht eine <xref:System.Windows.Input.InputBinding> eines Typs statt einer Instanz einer Klasse zugeordnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ad98e-156">This method enables an <xref:System.Windows.Input.InputBinding> to be associated with a type instead of an instance of a class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ad98e-157">
            <paramref name="type" /> oder <paramref name="inputBinding" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-157">
              <paramref name="type" /> or <paramref name="inputBinding" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCanExecuteHandler">
      <MemberSignature Language="C#" Value="public static void RemoveCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveCanExecuteHandler(class System.Windows.UIElement element, class System.Windows.Input.CanExecuteRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveCanExecuteHandler (element As UIElement, handler As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveCanExecuteHandler(System::Windows::UIElement ^ element, System::Windows::Input::CanExecuteRoutedEventHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="ad98e-158">Das Element, aus dem <c>handler</c> entfernt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-158">The element to remove <c>handler</c> from.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="ad98e-159">Der ausführbare Handler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-159">The can execute handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad98e-160">Trennt den angegebenen <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> vom angegebenen Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-160">Detaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> from the specified element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ad98e-161">Im folgende Beispiel wird getrennt eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> und ein <xref:System.Windows.Input.ExecutedRoutedEventHandler> die hatte zuvor zu angefügt wurde eine <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="ad98e-161">The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ad98e-162">
            <paramref name="element" /> oder <paramref name="handler" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-162">
              <paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="RemoveExecutedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveExecutedHandler(class System.Windows.UIElement element, class System.Windows.Input.ExecutedRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveExecutedHandler (element As UIElement, handler As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveExecutedHandler(System::Windows::UIElement ^ element, System::Windows::Input::ExecutedRoutedEventHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="ad98e-163">Das Element, aus dem <c>handler</c> entfernt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-163">The element to remove <c>handler</c> from.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="ad98e-164">Der ausgeführte Handler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-164">The executed handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad98e-165">Trennt den angegebenen <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> vom angegebenen Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-165">Detaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> from the specified element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ad98e-166">Im folgende Beispiel wird getrennt eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> und ein <xref:System.Windows.Input.ExecutedRoutedEventHandler> die hatte zuvor zu angefügt wurde eine <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="ad98e-166">The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ad98e-167">
            <paramref name="element" /> oder <paramref name="handler" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-167">
              <paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewCanExecuteHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewCanExecuteHandler(class System.Windows.UIElement element, class System.Windows.Input.CanExecuteRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewCanExecuteHandler (element As UIElement, handler As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewCanExecuteHandler(System::Windows::UIElement ^ element, System::Windows::Input::CanExecuteRoutedEventHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="ad98e-168">Das Element, aus dem <c>handler</c> entfernt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-168">The element to remove <c>handler</c> from.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="ad98e-169">Der ausführbare Handler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-169">The can execute handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad98e-170">Trennt den angegebenen <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> vom angegebenen Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-170">Detaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> from the specified element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ad98e-171">Im folgende Beispiel wird getrennt eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> und ein <xref:System.Windows.Input.ExecutedRoutedEventHandler> die hatte zuvor zu angefügt wurde eine <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="ad98e-171">The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ad98e-172">
            <paramref name="element" /> oder <paramref name="handler" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-172">
              <paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewExecutedHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewExecutedHandler(class System.Windows.UIElement element, class System.Windows.Input.ExecutedRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewExecutedHandler (element As UIElement, handler As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewExecutedHandler(System::Windows::UIElement ^ element, System::Windows::Input::ExecutedRoutedEventHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="ad98e-173">Das Element, aus dem <c>handler</c> entfernt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-173">The element to remove <c>handler</c> from.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="ad98e-174">Der ausgeführte Handler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-174">The executed handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad98e-175">Trennt den angegebenen <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> vom angegebenen Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-175">Detaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> from the specified element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ad98e-176">Im folgende Beispiel wird getrennt eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> und ein <xref:System.Windows.Input.ExecutedRoutedEventHandler> die hatte zuvor zu angefügt wurde eine <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="ad98e-176">The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ad98e-177">
            <paramref name="element" /> oder <paramref name="handler" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-177">
              <paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="RequerySuggested">
      <MemberSignature Language="C#" Value="public static event EventHandler RequerySuggested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RequerySuggested" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.RequerySuggested" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event RequerySuggested As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ RequerySuggested;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad98e-178">Tritt ein, wenn der <see cref="T:System.Windows.Input.CommandManager" /> Bedingungen erkennt, die eine Befehlsausführung beeinflussen könnten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad98e-178">Occurs when the <see cref="T:System.Windows.Input.CommandManager" /> detects conditions that might change the ability of a command to execute.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad98e-179">Dieses Ereignis hält die Verbindung mit dem Ereignishandler als einen schwachen Verweis.</span><span class="sxs-lookup"><span data-stu-id="ad98e-179">This event holds onto the handler as a weak reference.</span></span> <span data-ttu-id="ad98e-180">Objekte, die für dieses Ereignis lauscht sollten einen starken Verweis an ihren Ereignishandler Dies wird Garbage Collection zu verhindern.</span><span class="sxs-lookup"><span data-stu-id="ad98e-180">Objects that listen for this event should keep a strong reference to their event handler to avoid it being garbage collected.</span></span> <span data-ttu-id="ad98e-181">Dies kann erfolgen, da Sie ein privates Feld und den Handler als des Werts zugewiesen werden, vor oder nach dem Anfügen an dieses Ereignis.</span><span class="sxs-lookup"><span data-stu-id="ad98e-181">This can be accomplished by having a private field and assigning the handler as the value before or after attaching to this event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
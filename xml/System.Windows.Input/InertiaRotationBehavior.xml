<Type Name="InertiaRotationBehavior" FullName="System.Windows.Input.InertiaRotationBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d69e912aee5b83d7c45b496bf33171f37357123" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69172368" /></Metadata><TypeSignature Language="C#" Value="public class InertiaRotationBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InertiaRotationBehavior extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InertiaRotationBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Class InertiaRotationBehavior" />
  <TypeSignature Language="C++ CLI" Value="public ref class InertiaRotationBehavior" />
  <TypeSignature Language="F#" Value="type InertiaRotationBehavior = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Steuert die Verlangsamung einer Drehungsanpassung bei Trägheit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Input.InertiaRotationBehavior> -Klasse gibt an, wie sich eine Rotations Bearbeitung verhält, wenn Sie Trägheit ist.  Verwenden Sie <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior%2A> die-Eigenschaft <xref:System.Windows.UIElement.ManipulationInertiaStarting> im-Ereignis, um folgende Aktionen durchzuführen:  
  
-   Legen Sie die anfängliche Geschwindigkeit der Trägheit fest, wenn Sie beginnt, <xref:System.Windows.Input.InertiaRotationBehavior.InitialVelocity%2A> indem Sie die-Eigenschaft festlegen.  
  
-   Geben Sie die gewünschte Drehung der Bearbeitung an, wenn die Trägheit beendet <xref:System.Windows.Input.InertiaRotationBehavior.DesiredRotation%2A> wird, indem Sie die-Eigenschaft festlegen.  
  
-   Geben Sie die gewünschte Verlangsamung der Trägheit durch Festlegen der <xref:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration%2A> -Eigenschaft an.  
  
 Legen Sie entweder <xref:System.Windows.Input.InertiaRotationBehavior.DesiredRotation%2A> <xref:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration%2A>oder fest, aber nicht beides. Wenn Sie eine dieser Eigenschaften festlegen, wird die andere Eigenschaft in <xref:System.Double.NaN?displayProperty=nameWithType> geändert, wenn Sie über einen Wert verfügt.  
  
 Weitere Informationen zu Manipulationen finden Sie unter Übersicht über die [Eingabe](~/docs/framework/wpf/advanced/input-overview.md).  Ein Beispiel für eine Anwendung, die auf Manipulationen antwortet, finden [Sie unter Exemplarische Vorgehensweise: Erstellen Ihrer ersten Touchscreen-](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)Anwendung.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt den <xref:System.Windows.UIElement.ManipulationInertiaStarting> Ereignishandler und legt die gewünschte Verlangsamung für Übersetzung, Erweiterung und Drehung fest, die während der Trägheit verwendet werden. Dieses Beispiel ist Teil eines größeren Beispiels in [exemplarischen Vorgehensweise: Erstellen Ihrer ersten Touchscreen-](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)Anwendung.  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InertiaRotationBehavior ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InertiaRotationBehavior.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InertiaRotationBehavior();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.InertiaRotationBehavior" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DesiredDeceleration">
      <MemberSignature Language="C#" Value="public double DesiredDeceleration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 DesiredDeceleration" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration" />
      <MemberSignature Language="VB.NET" Value="Public Property DesiredDeceleration As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double DesiredDeceleration { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.DesiredDeceleration : double with get, set" Usage="System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Rate, um die die Drehung verlangsamt wird, in Grad pro quadrierter Millisekunde ab oder legt diese fest.</summary>
        <value>Die Rate, um die die Drehung verlangsamt wird, in Grad pro quadrierter Millisekunde. Die Standardeinstellung ist <see cref="F:System.Double.NaN" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration%2A> die-Eigenschaft, um die gewünschte Verlangsamung der Trägheit anzugeben. Legen Sie entweder <xref:System.Windows.Input.InertiaRotationBehavior.DesiredRotation%2A> <xref:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration%2A>oder fest, aber nicht beides. Wenn Sie eine dieser Eigenschaften festlegen, wird die andere Eigenschaft in <xref:System.Double.NaN?displayProperty=nameWithType> geändert, wenn Sie über einen Wert verfügt.  
  
 Weitere Informationen zu Manipulationen finden Sie unter Übersicht über die [Eingabe](~/docs/framework/wpf/advanced/input-overview.md).  Ein Beispiel für eine Anwendung, die auf Manipulationen antwortet, finden [Sie unter Exemplarische Vorgehensweise: Erstellen Ihrer ersten Touchscreen-](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)Anwendung.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft ist auf unendlich festgelegt.  
  
- oder - 
Die Eigenschaft ist auf <see cref="F:System.Double.NaN" /> festgelegt.</exception>
      </Docs>
    </Member>
    <Member MemberName="DesiredRotation">
      <MemberSignature Language="C#" Value="public double DesiredRotation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 DesiredRotation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InertiaRotationBehavior.DesiredRotation" />
      <MemberSignature Language="VB.NET" Value="Public Property DesiredRotation As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double DesiredRotation { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.DesiredRotation : double with get, set" Usage="System.Windows.Input.InertiaRotationBehavior.DesiredRotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft am Ende der Trägheitsbewegung die Drehung in Grad ab oder legt sie fest.</summary>
        <value>Die Drehung am Ende der Trägheitsbewegung in Grad. Die Standardeinstellung ist <see cref="F:System.Double.NaN" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Windows.Input.InertiaRotationBehavior.DesiredRotation%2A> die-Eigenschaft, um die gewünschte Drehung der Bearbeitung anzugeben, wenn Trägheit endet. Legen Sie entweder <xref:System.Windows.Input.InertiaRotationBehavior.DesiredRotation%2A> <xref:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration%2A>oder fest, aber nicht beides. Wenn Sie eine dieser Eigenschaften festlegen, wird die andere Eigenschaft in <xref:System.Double.NaN?displayProperty=nameWithType> geändert, wenn Sie über einen Wert verfügt.  
  
 Weitere Informationen zu Manipulationen finden Sie unter Übersicht über die [Eingabe](~/docs/framework/wpf/advanced/input-overview.md).  Ein Beispiel für eine Anwendung, die auf Manipulationen antwortet, finden [Sie unter Exemplarische Vorgehensweise: Erstellen Ihrer ersten Touchscreen-](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)Anwendung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialVelocity">
      <MemberSignature Language="C#" Value="public double InitialVelocity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 InitialVelocity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InertiaRotationBehavior.InitialVelocity" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialVelocity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double InitialVelocity { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.InitialVelocity : double with get, set" Usage="System.Windows.Input.InertiaRotationBehavior.InitialVelocity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft zu Beginn der Trägheitsphase die Anfangsrate der Drehung ab oder legt sie fest.</summary>
        <value>Die Anfangsrate der Drehung zu Beginn der Trägheitsphase.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Manipulationen finden Sie unter Übersicht über die [Eingabe](~/docs/framework/wpf/advanced/input-overview.md).  Ein Beispiel für eine Anwendung, die auf Manipulationen antwortet, finden [Sie unter Exemplarische Vorgehensweise: Erstellen Ihrer ersten Touchscreen-](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)Anwendung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

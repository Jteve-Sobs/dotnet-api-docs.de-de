<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3c23ce5e4e5f8cabe9dbfcc860cb524d68d330f4" /><Meta Name="ms.sourcegitcommit" Value="f828282420515ef705e09bbdb6c22116df98b5e3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="82497553" /></Metadata><TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventHandler = delegate of obj * CanExecuteRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender"><span data-ttu-id="99046-101">Das Befehlsziel, das den Handler aufruft.</span><span class="sxs-lookup"><span data-stu-id="99046-101">The command target that is invoking the handler.</span></span></param>
    <param name="e"><span data-ttu-id="99046-102">Die Ereignisdaten.</span><span class="sxs-lookup"><span data-stu-id="99046-102">The event data.</span></span></param>
    <summary><span data-ttu-id="99046-103">Stellt die Methode zur Behandlung des <see cref="E:System.Windows.Input.CommandBinding.CanExecute" />-Ereignisses dar.</span><span class="sxs-lookup"><span data-stu-id="99046-103">Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99046-104"><xref:System.Windows.Input.CanExecuteRoutedEventHandler>Bestimmt, ob der Befehl, der der Ereignis Quelle zugeordnet ist, im Befehls Ziel ausgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="99046-104">The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determines if the command associated with the event source is able to execute on the command target.</span></span> <span data-ttu-id="99046-105">Wenn der Befehl über eine Befehls Quelle verfügt, mit der ein Ziel angegeben wird, können die Ziel Informationen über abgerufen werden `sender` .</span><span class="sxs-lookup"><span data-stu-id="99046-105">If the command has a command source that specifies a target, then the target information can be obtained through `sender`.</span></span> <span data-ttu-id="99046-106">Wenn <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> nicht festgelegt ist, ist das Element mit dem Tastaturfokus das Ziel und kann auch über abgerufen werden `sender` .</span><span class="sxs-lookup"><span data-stu-id="99046-106">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set, the element with keyboard focus is the target, and can also be obtained through `sender`.</span></span>  <span data-ttu-id="99046-107">Wenn festgestellt wird, dass der Befehl auf dem Ziel ausgeführt werden kann, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> sollte die-Eigenschaft auf festgelegt werden, `true` andernfalls muss Sie auf festgelegt werden `false` .</span><span class="sxs-lookup"><span data-stu-id="99046-107">If it is determined that the command can execute on the target, then the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> property should be set to `true`; otherwise, set it to `false`.</span></span>  
  
 <span data-ttu-id="99046-108">Sie müssen sich nicht auf Ereignisdaten verlassen, um den Befehl, die Quelle und das Ziel zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="99046-108">You do not need to rely on event data to determine the command, source, and target.</span></span> <span data-ttu-id="99046-109">Sie können die Verwendung des Handlers auf bekannte Befehls Aufrufe beschränken. Dies ist jedoch schwieriger zu bewerkstelligen, wenn die Befehlsstruktur häufig auf dem Befehls Routing basiert, um denselben Befehl für aufeinander folgende potenzielle Ziele in einer Ereignis Route auszuführen.</span><span class="sxs-lookup"><span data-stu-id="99046-109">You can limit the usage of the handler to known possible command invocations, although this is more difficult to accomplish if your command structure relies extensively on the command routing to execute the same command on successive potential targets in an event route.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99046-110">Das folgende Beispiel zeigt einen <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , der <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> auf festlegt `true` .</span><span class="sxs-lookup"><span data-stu-id="99046-110">The following example shows a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>

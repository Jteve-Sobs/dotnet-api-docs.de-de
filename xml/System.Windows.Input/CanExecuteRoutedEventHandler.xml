<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a252bc967121eea51fe378caf080a9b7c5a519bc" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37505118" /></Metadata><TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventHandler = delegate of obj * CanExecuteRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Das Befehlsziel, das den Handler aufruft.</param>
    <param name="e">Die Ereignisdaten.</param>
    <summary>Stellt die Methode zur Behandlung des <see cref="E:System.Windows.Input.CommandBinding.CanExecute" />-Ereignisses dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Input.CanExecuteRoutedEventHandler> bestimmt, ob die Ereignisquelle zugeordnete Befehl für das Befehlsziel ausführen kann. Wenn der Befehl umfasst eine Befehlsquelle, der angibt, ein Ziel, die Informationen erhalten Sie über `sender`. Wenn die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> ist nicht festgelegt ist, wird das Element mit dem Tastaturfokus das Ziel, und kann auch über abgerufen werden `sender`.  Wenn festgestellt wird, dass der Befehl werden, auf dem Ziel ausgeführt kann, und klicken Sie dann die <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> Eigenschaft sollte festgelegt werden, um `true`ist, andernfalls legen Sie ihn auf `false`.  
  
 Sie müssen sich nicht von Ereignisdaten, um zu bestimmen, der Befehl, Quelle und Ziel abhängig zu sein. Sie können die Verwendung des Handlers, bekannten möglich Befehl aufrufen, beschränken, obwohl dies schwieriger ist zu erreichen, wenn die Befehlsstruktur häufig basiert auf das Befehlsrouting zum Ausführen desselben Befehls auf aufeinander folgende potenziellen Zielen eines in einem Ereignis Route.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> festlegt <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> zu `true`.  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>
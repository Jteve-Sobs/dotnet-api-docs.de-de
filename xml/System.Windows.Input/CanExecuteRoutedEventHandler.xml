<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d59f4554561d75bef1c57729e43a1f1ef365511f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69173326" /></Metadata><TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventHandler = delegate of obj * CanExecuteRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Das Befehlsziel, das den Handler aufruft.</param>
    <param name="e">Die Ereignisdaten.</param>
    <summary>Stellt die Methode zur Behandlung des <see cref="E:System.Windows.Input.CommandBinding.CanExecute" />-Ereignisses dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> Bestimmt, ob der Befehl, der der Ereignis Quelle zugeordnet ist, im Befehls Ziel ausgeführt werden kann. Wenn der Befehl über eine Befehls Quelle verfügt, mit der ein Ziel angegeben wird, können die Ziel Informationen `sender`über abgerufen werden. Wenn nicht festgelegt `sender` ist,istdasElementmitdemTastaturfokusdasZielundkannauchüberabgerufenwerden.<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>  Wenn festgestellt wird, dass der Befehl auf dem Ziel ausgeführt werden kann, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> sollte die-Eigenschaft auf `true`festgelegt werden, andernfalls muss `false`Sie auf festgelegt werden.  
  
 Sie müssen sich nicht auf Ereignisdaten verlassen, um den Befehl, die Quelle und das Ziel zu ermitteln. Sie können die Verwendung des Handlers auf bekannte Befehls Aufrufe beschränken. Dies ist jedoch schwieriger zu bewerkstelligen, wenn die Befehlsstruktur in großem Umfang auf das Befehls Routing angewiesen ist, denselben Befehl für aufeinander folgende potenzielle Ziele in einem Ereignis auszuführen. Seeweg.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , der <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> auf `true`festlegt.  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>

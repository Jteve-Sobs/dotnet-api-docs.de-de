<Type Name="Manipulation" FullName="System.Windows.Input.Manipulation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d58ece5b58b019f39d0ccaa6abd695ee82d60488" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82496643" /></Metadata><TypeSignature Language="C#" Value="public static class Manipulation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Manipulation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Manipulation" />
  <TypeSignature Language="VB.NET" Value="Public Class Manipulation" />
  <TypeSignature Language="C++ CLI" Value="public ref class Manipulation abstract sealed" />
  <TypeSignature Language="F#" Value="type Manipulation = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8ead6-101">Enthält Methoden, mit denen Informationen zu einer Bearbeitung abgerufen und aktualisiert werden.</span><span class="sxs-lookup"><span data-stu-id="8ead6-101">Contains methods to get and update information about a manipulation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ead6-102">Eine Manipulation tritt auf, wenn die Fingereingabe als physische Aktion interpretiert wird, die auf ein Objekt angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="8ead6-102">A manipulation occurs when touch is interpreted as a physical action that is applied to an object.</span></span> <span data-ttu-id="8ead6-103">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] interpretieren Bearbeitungsereignisse die Eingabe als Übersetzungs-, Erweiterungs- und Drehungsmanipualtion.</span><span class="sxs-lookup"><span data-stu-id="8ead6-103">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], manipulation events interpret input as a translation, expansion, or rotation manipulation.</span></span> <span data-ttu-id="8ead6-104">Sie interagieren in der Regel mit Manipulationen durch die Manipulations Ereignisse, die auf dem <xref:System.Windows.UIElement>definiert sind.</span><span class="sxs-lookup"><span data-stu-id="8ead6-104">You usually interact with manipulations through the manipulation events that are defined on the <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="8ead6-105">Die <xref:System.Windows.Input.Manipulation>-Klasse definiert jedoch statische Methoden, die Sie verwenden können, um mit Manipulationen zu interagieren.</span><span class="sxs-lookup"><span data-stu-id="8ead6-105">However, the <xref:System.Windows.Input.Manipulation> class defines static methods that you can use to interact with manipulations.</span></span>  
  
 <span data-ttu-id="8ead6-106">Weitere Informationen zu Manipulationen finden Sie unter [Übersicht](~/docs/framework/wpf/advanced/input-overview.md)über die Eingabe.</span><span class="sxs-lookup"><span data-stu-id="8ead6-106">For more information about manipulations, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span> <span data-ttu-id="8ead6-107">Ein Beispiel für eine Anwendung, die auf Manipulationen antwortet, finden Sie unter Exemplarische Vorgehensweise [: Erstellen der ersten Fingereingabe Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span><span class="sxs-lookup"><span data-stu-id="8ead6-107">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddManipulator">
      <MemberSignature Language="C#" Value="public static void AddManipulator (System.Windows.UIElement element, System.Windows.Input.IManipulator manipulator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddManipulator(class System.Windows.UIElement element, class System.Windows.Input.IManipulator manipulator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.AddManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddManipulator (element As UIElement, manipulator As IManipulator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddManipulator(System::Windows::UIElement ^ element, System::Windows::Input::IManipulator ^ manipulator);" />
      <MemberSignature Language="F#" Value="static member AddManipulator : System.Windows.UIElement * System.Windows.Input.IManipulator -&gt; unit" Usage="System.Windows.Input.Manipulation.AddManipulator (element, manipulator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="manipulator" Type="System.Windows.Input.IManipulator" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8ead6-108">Das dem Manipulator zuzuordnende Element.</span><span class="sxs-lookup"><span data-stu-id="8ead6-108">The element to associate the manipulator with.</span></span></param>
        <param name="manipulator"><span data-ttu-id="8ead6-109">Das Objekt, das die Position der Eingabe bereitstellt, die eine Bearbeitung erstellt oder dieser hinzugefügt wird.</span><span class="sxs-lookup"><span data-stu-id="8ead6-109">The object that provides the position of the input that creates or is added to a manipulation.</span></span></param>
        <summary><span data-ttu-id="8ead6-110">Ordnet ein <see cref="T:System.Windows.Input.IManipulator" />-Objekt dem angegebenen Element zu.</span><span class="sxs-lookup"><span data-stu-id="8ead6-110">Associates a <see cref="T:System.Windows.Input.IManipulator" /> object with the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ead6-111">Wenn `element` bereits eine Bearbeitung zugeordnet ist, wird `manipulator` der vorhandenen Bearbeitung hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="8ead6-111">If `element` already has a manipulation associated with it, `manipulator` is added to the existing manipulation.</span></span> <span data-ttu-id="8ead6-112">Andernfalls wird eine neue Bearbeitung erstellt.</span><span class="sxs-lookup"><span data-stu-id="8ead6-112">Otherwise, a new manipulation is created.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ead6-113"><paramref name="element" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="8ead6-113"><paramref name="element" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ead6-114">- oder -</span><span class="sxs-lookup"><span data-stu-id="8ead6-114">-or-</span></span> 
 <span data-ttu-id="8ead6-115"><paramref name="manipulator" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="8ead6-115"><paramref name="manipulator" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ead6-116">Die <see cref="P:System.Windows.UIElement.IsManipulationEnabled" />-Eigenschaft für Element ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ead6-116">The <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> property on element is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompleteManipulation">
      <MemberSignature Language="C#" Value="public static void CompleteManipulation (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompleteManipulation(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.CompleteManipulation(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CompleteManipulation (element As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompleteManipulation(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="static member CompleteManipulation : System.Windows.UIElement -&gt; unit" Usage="System.Windows.Input.Manipulation.CompleteManipulation element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8ead6-117">Das Element, auf dem die Bearbeitung abgeschlossen werden soll.</span><span class="sxs-lookup"><span data-stu-id="8ead6-117">The element on which to complete manipulation.</span></span></param>
        <summary><span data-ttu-id="8ead6-118">Schließt die aktive Bearbeitung auf dem angegebenen Element ab.</span><span class="sxs-lookup"><span data-stu-id="8ead6-118">Completes the active manipulation on the specified element.</span></span> <span data-ttu-id="8ead6-119">Bei Aufruf wird die Bearbeitungseingabe nicht mehr verfolgt und die Trägheit auf den angegebenen Elementen angehalten.</span><span class="sxs-lookup"><span data-stu-id="8ead6-119">When called, manipulation input is no longer tracked and inertia on the specified element stops.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ead6-120">Wenn die <xref:System.Windows.Input.Manipulation.CompleteManipulation%2A>-Methode aufgerufen wird, wird das <xref:System.Windows.UIElement.ManipulationCompleted>-Ereignis ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="8ead6-120">When the <xref:System.Windows.Input.Manipulation.CompleteManipulation%2A> method is called, the <xref:System.Windows.UIElement.ManipulationCompleted> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManipulationContainer">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement GetManipulationContainer (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.IInputElement GetManipulationContainer(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.GetManipulationContainer(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetManipulationContainer (element As UIElement) As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::IInputElement ^ GetManipulationContainer(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="static member GetManipulationContainer : System.Windows.UIElement -&gt; System.Windows.IInputElement" Usage="System.Windows.Input.Manipulation.GetManipulationContainer element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8ead6-121">Das Element, auf dem eine aktive Bearbeitung vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="8ead6-121">The element on which there is an active manipulation.</span></span></param>
        <summary><span data-ttu-id="8ead6-122">Ruft den Container ab, der die Koordinaten für die Bearbeitung definiert.</span><span class="sxs-lookup"><span data-stu-id="8ead6-122">Gets the container that defines the coordinates for the manipulation.</span></span></summary>
        <returns><span data-ttu-id="8ead6-123">Der Container, der den Koordinatenraum definiert.</span><span class="sxs-lookup"><span data-stu-id="8ead6-123">The container that defines the coordinate space.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManipulationMode">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.ManipulationModes GetManipulationMode (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Input.ManipulationModes GetManipulationMode(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.GetManipulationMode(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetManipulationMode (element As UIElement) As ManipulationModes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Input::ManipulationModes GetManipulationMode(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="static member GetManipulationMode : System.Windows.UIElement -&gt; System.Windows.Input.ManipulationModes" Usage="System.Windows.Input.Manipulation.GetManipulationMode element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationModes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8ead6-124">Das Element, für das der Bearbeitungsmodus abgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="8ead6-124">The element for which to get the manipulation mode.</span></span></param>
        <summary><span data-ttu-id="8ead6-125">Ruft das <see cref="T:System.Windows.Input.ManipulationModes" />-Objekt für das angegebene Element ab.</span><span class="sxs-lookup"><span data-stu-id="8ead6-125">Gets the <see cref="T:System.Windows.Input.ManipulationModes" /> for the specified element.</span></span></summary>
        <returns><span data-ttu-id="8ead6-126">Einer der Enumerationswerte.</span><span class="sxs-lookup"><span data-stu-id="8ead6-126">One of the enumeration values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManipulationPivot">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.ManipulationPivot GetManipulationPivot (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Input.ManipulationPivot GetManipulationPivot(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.GetManipulationPivot(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetManipulationPivot (element As UIElement) As ManipulationPivot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Input::ManipulationPivot ^ GetManipulationPivot(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="static member GetManipulationPivot : System.Windows.UIElement -&gt; System.Windows.Input.ManipulationPivot" Usage="System.Windows.Input.Manipulation.GetManipulationPivot element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationPivot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8ead6-127">Das Element, auf dem eine Bearbeitung vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="8ead6-127">The element on which there is a manipulation.</span></span></param>
        <summary><span data-ttu-id="8ead6-128">Gibt ein Objekt zurück, das beschreibt, wie eine Drehung mit einem Punkt der Benutzereingabe auftritt.</span><span class="sxs-lookup"><span data-stu-id="8ead6-128">Returns an object that describes how a rotation occurs with one point of user input.</span></span></summary>
        <returns><span data-ttu-id="8ead6-129">Ein Objekt, das beschreibt, wie eine Drehung mit einem Punkt der Benutzereingabe auftritt.</span><span class="sxs-lookup"><span data-stu-id="8ead6-129">An object that describes how a rotation occurs with one point of user input.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationActive">
      <MemberSignature Language="C#" Value="public static bool IsManipulationActive (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsManipulationActive(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.IsManipulationActive(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsManipulationActive (element As UIElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsManipulationActive(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="static member IsManipulationActive : System.Windows.UIElement -&gt; bool" Usage="System.Windows.Input.Manipulation.IsManipulationActive element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8ead6-130">Das zu überprüfende Element.</span><span class="sxs-lookup"><span data-stu-id="8ead6-130">The element to check.</span></span></param>
        <summary><span data-ttu-id="8ead6-131">Ruft einen Wert ab, der angibt, ob dem angegebenen Element eine Bearbeitung zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="8ead6-131">Gets a value that indicates whether a manipulation is associated with the specified element.</span></span></summary>
        <returns><span data-ttu-id="8ead6-132"><see langword="true" />, wenn eine Bearbeitung dem angegebenen Element zugeordnet ist; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ead6-132"><see langword="true" /> if a manipulation is associated with the specified element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveManipulator">
      <MemberSignature Language="C#" Value="public static void RemoveManipulator (System.Windows.UIElement element, System.Windows.Input.IManipulator manipulator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveManipulator(class System.Windows.UIElement element, class System.Windows.Input.IManipulator manipulator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.RemoveManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveManipulator (element As UIElement, manipulator As IManipulator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveManipulator(System::Windows::UIElement ^ element, System::Windows::Input::IManipulator ^ manipulator);" />
      <MemberSignature Language="F#" Value="static member RemoveManipulator : System.Windows.UIElement * System.Windows.Input.IManipulator -&gt; unit" Usage="System.Windows.Input.Manipulation.RemoveManipulator (element, manipulator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="manipulator" Type="System.Windows.Input.IManipulator" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8ead6-133">Das Element, aus dem der zugeordnete Manipulator entfernt werden soll.</span><span class="sxs-lookup"><span data-stu-id="8ead6-133">The element to remove the associated manipulator from.</span></span></param>
        <param name="manipulator"><span data-ttu-id="8ead6-134">Das Objekt, das die Position der Eingabe bereitstellt.</span><span class="sxs-lookup"><span data-stu-id="8ead6-134">The object that provides the position of the input.</span></span></param>
        <summary><span data-ttu-id="8ead6-135">Entfernt die Zuordnung zwischen dem angegebenen <see cref="T:System.Windows.Input.IManipulator" />-Objekt und dem Element.</span><span class="sxs-lookup"><span data-stu-id="8ead6-135">Removes the association between the specified <see cref="T:System.Windows.Input.IManipulator" /> object and the element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManipulationContainer">
      <MemberSignature Language="C#" Value="public static void SetManipulationContainer (System.Windows.UIElement element, System.Windows.IInputElement container);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetManipulationContainer(class System.Windows.UIElement element, class System.Windows.IInputElement container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.SetManipulationContainer(System.Windows.UIElement,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetManipulationContainer (element As UIElement, container As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetManipulationContainer(System::Windows::UIElement ^ element, System::Windows::IInputElement ^ container);" />
      <MemberSignature Language="F#" Value="static member SetManipulationContainer : System.Windows.UIElement * System.Windows.IInputElement -&gt; unit" Usage="System.Windows.Input.Manipulation.SetManipulationContainer (element, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="container" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8ead6-136">Das Element, dem die Bearbeitung zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="8ead6-136">The element with which the manipulation is associated.</span></span></param>
        <param name="container"><span data-ttu-id="8ead6-137">Der Container, der den Koordinatenraum definiert.</span><span class="sxs-lookup"><span data-stu-id="8ead6-137">The container that defines the coordinate space.</span></span></param>
        <summary><span data-ttu-id="8ead6-138">Legt das Element fest, das die Koordinaten für die Bearbeitung des angegebenen Elements definiert.</span><span class="sxs-lookup"><span data-stu-id="8ead6-138">Sets the element that defines the coordinates for the manipulation of the specified element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManipulationMode">
      <MemberSignature Language="C#" Value="public static void SetManipulationMode (System.Windows.UIElement element, System.Windows.Input.ManipulationModes mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetManipulationMode(class System.Windows.UIElement element, valuetype System.Windows.Input.ManipulationModes mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.SetManipulationMode(System.Windows.UIElement,System.Windows.Input.ManipulationModes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetManipulationMode (element As UIElement, mode As ManipulationModes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetManipulationMode(System::Windows::UIElement ^ element, System::Windows::Input::ManipulationModes mode);" />
      <MemberSignature Language="F#" Value="static member SetManipulationMode : System.Windows.UIElement * System.Windows.Input.ManipulationModes -&gt; unit" Usage="System.Windows.Input.Manipulation.SetManipulationMode (element, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="mode" Type="System.Windows.Input.ManipulationModes" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8ead6-139">Das Element, für das der Bearbeitungsmodus festgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="8ead6-139">The element on which to set the manipulation mode.</span></span></param>
        <param name="mode"><span data-ttu-id="8ead6-140">Der neue Bearbeitungsmodus.</span><span class="sxs-lookup"><span data-stu-id="8ead6-140">The new manipulation mode.</span></span></param>
        <summary><span data-ttu-id="8ead6-141">Legt den Modus der Bearbeitung für das angegebene Element fest.</span><span class="sxs-lookup"><span data-stu-id="8ead6-141">Sets the mode of manipulation for the specified element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManipulationParameter">
      <MemberSignature Language="C#" Value="public static void SetManipulationParameter (System.Windows.UIElement element, System.Windows.Input.Manipulations.ManipulationParameters2D parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetManipulationParameter(class System.Windows.UIElement element, class System.Windows.Input.Manipulations.ManipulationParameters2D parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.SetManipulationParameter(System.Windows.UIElement,System.Windows.Input.Manipulations.ManipulationParameters2D)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetManipulationParameter (element As UIElement, parameter As ManipulationParameters2D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetManipulationParameter(System::Windows::UIElement ^ element, System::Windows::Input::Manipulations::ManipulationParameters2D ^ parameter);" />
      <MemberSignature Language="F#" Value="static member SetManipulationParameter : System.Windows.UIElement * System.Windows.Input.Manipulations.ManipulationParameters2D -&gt; unit" Usage="System.Windows.Input.Manipulation.SetManipulationParameter (element, parameter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="parameter" Type="System.Windows.Input.Manipulations.ManipulationParameters2D" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8ead6-142">Das Element, das über die Bearbeitung verfügt, der der Parameter hinzugefügt wird.</span><span class="sxs-lookup"><span data-stu-id="8ead6-142">The element that has the manipulation that the parameter is added to.</span></span></param>
        <param name="parameter"><span data-ttu-id="8ead6-143">Der Parameter, der hinzugefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="8ead6-143">The parameter to add.</span></span></param>
        <summary><span data-ttu-id="8ead6-144">Fügt der Bearbeitung des angegebenen Elements Parameter hinzu.</span><span class="sxs-lookup"><span data-stu-id="8ead6-144">Adds parameters to the manipulation of the specified element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManipulationPivot">
      <MemberSignature Language="C#" Value="public static void SetManipulationPivot (System.Windows.UIElement element, System.Windows.Input.ManipulationPivot pivot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetManipulationPivot(class System.Windows.UIElement element, class System.Windows.Input.ManipulationPivot pivot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.SetManipulationPivot(System.Windows.UIElement,System.Windows.Input.ManipulationPivot)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetManipulationPivot (element As UIElement, pivot As ManipulationPivot)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetManipulationPivot(System::Windows::UIElement ^ element, System::Windows::Input::ManipulationPivot ^ pivot);" />
      <MemberSignature Language="F#" Value="static member SetManipulationPivot : System.Windows.UIElement * System.Windows.Input.ManipulationPivot -&gt; unit" Usage="System.Windows.Input.Manipulation.SetManipulationPivot (element, pivot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="pivot" Type="System.Windows.Input.ManipulationPivot" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8ead6-145">Das Element, das über eine aktive Bearbeitung verfügt.</span><span class="sxs-lookup"><span data-stu-id="8ead6-145">The element that has an active manipulation.</span></span></param>
        <param name="pivot"><span data-ttu-id="8ead6-146">Ein Objekt, das das Pivot beschreibt.</span><span class="sxs-lookup"><span data-stu-id="8ead6-146">An object that describes the pivot.</span></span></param>
        <summary><span data-ttu-id="8ead6-147">Legt das Pivot der Einpunktbearbeitung des angegebenen Elements fest.</span><span class="sxs-lookup"><span data-stu-id="8ead6-147">Sets the pivot of the single-point manipulation of the specified element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartInertia">
      <MemberSignature Language="C#" Value="public static void StartInertia (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartInertia(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.StartInertia(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartInertia (element As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartInertia(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="static member StartInertia : System.Windows.UIElement -&gt; unit" Usage="System.Windows.Input.Manipulation.StartInertia element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8ead6-148">Das Element, auf dem die Trägheit gestartet werden soll.</span><span class="sxs-lookup"><span data-stu-id="8ead6-148">The element on which to begin inertia.</span></span></param>
        <summary><span data-ttu-id="8ead6-149">Beendet die Bearbeitung und startet die Trägheit auf dem angegebenen Element.</span><span class="sxs-lookup"><span data-stu-id="8ead6-149">Stops the manipulation and begins inertia on the specified element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

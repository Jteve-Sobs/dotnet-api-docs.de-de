<Type Name="ManipulationDelta" FullName="System.Windows.Input.ManipulationDelta">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8b2f56d6718137b85c12747a8df64332b25a32ed" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70477616" /></Metadata><TypeSignature Language="C#" Value="public class ManipulationDelta" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ManipulationDelta extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ManipulationDelta" />
  <TypeSignature Language="VB.NET" Value="Public Class ManipulationDelta" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManipulationDelta" />
  <TypeSignature Language="F#" Value="type ManipulationDelta = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Enthält Transformationsdaten, die akkumuliert werden, wenn Manipulationsereignisse auftreten.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Input.ManipulationDelta> -Klasse enthält Informationen zu den Änderungen an der Position einer Bearbeitung.  [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]interpretiert die Änderungen als <xref:System.Windows.Input.ManipulationDelta.Translation%2A>, <xref:System.Windows.Input.ManipulationDelta.Expansion%2A>oder <xref:System.Windows.Input.ManipulationDelta.Rotation%2A>. Wenn das <xref:System.Windows.UIElement.ManipulationDelta> -Ereignis in einem <xref:System.Windows.UIElement>auftritt, verwenden Sie die- <xref:System.Windows.Input.ManipulationDelta> Eigenschaften für ein-Objekt, um das Objekt zu transformieren, das bearbeitet werden soll.  Die <xref:System.Windows.Input.ManipulationDeltaEventArgs> -Klasse stellt zwei Eigenschaften des <xref:System.Windows.Input.ManipulationDelta>- <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> Typs <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>bereit: und.  
  
 Weitere Informationen zu Manipulationen finden Sie unter Übersicht über die [Eingabe](~/docs/framework/wpf/advanced/input-overview.md).  Ein Beispiel für eine Anwendung, die auf Manipulationen antwortet, finden Sie unter Exemplarische Vorgehensweise [: Erstellen der ersten Fingereingabe Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Windows.UIElement.ManipulationDelta> -Ereignis.  Im Beispiel werden die <xref:System.Windows.Input.ManipulationDelta.Translation%2A>Eigenschaften <xref:System.Windows.Input.ManipulationDelta.Scale%2A>, und <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> zum Verschieben, Ändern der Größe und zum Drehen eines <xref:System.Windows.Shapes.Rectangle>-Eigenschaft angewendet. Dieses Beispiel ist Teil eines größeren Beispiels in Exemplarische Vorgehensweise [: Erstellen Ihrer ersten Touchscreen-Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManipulationDelta (System.Windows.Vector translation, double rotation, System.Windows.Vector scale, System.Windows.Vector expansion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Vector translation, float64 rotation, valuetype System.Windows.Vector scale, valuetype System.Windows.Vector expansion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDelta.#ctor(System.Windows.Vector,System.Double,System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (translation As Vector, rotation As Double, scale As Vector, expansion As Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManipulationDelta(System::Windows::Vector translation, double rotation, System::Windows::Vector scale, System::Windows::Vector expansion);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.ManipulationDelta : System.Windows.Vector * double * System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Input.ManipulationDelta" Usage="new System.Windows.Input.ManipulationDelta (translation, rotation, scale, expansion)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="translation" Type="System.Windows.Vector" />
        <Parameter Name="rotation" Type="System.Double" />
        <Parameter Name="scale" Type="System.Windows.Vector" />
        <Parameter Name="expansion" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="translation">Die lineare Bewegung der Manipulation in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</param>
        <param name="rotation">Die Manipulationsdrehung in Grad.</param>
        <param name="scale">Der Betrag, um den die Größe geändert wurde, als Multiplikator.</param>
        <param name="expansion">Die Betrag, um den die Größe geändert wurde, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.ManipulationDelta" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expansion">
      <MemberSignature Language="C#" Value="public System.Windows.Vector Expansion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Vector Expansion" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDelta.Expansion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Expansion As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Vector Expansion { System::Windows::Vector get(); };" />
      <MemberSignature Language="F#" Value="member this.Expansion : System.Windows.Vector" Usage="System.Windows.Input.ManipulationDelta.Expansion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Betrag, um den die Größe geändert wurde, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] ab oder legt ihn fest.</summary>
        <value>Die Betrag, um den die Größe geändert wurde, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl <xref:System.Windows.Input.ManipulationDelta.Scale%2A> die <xref:System.Windows.Input.ManipulationDelta.Expansion%2A> -Eigenschaft als auch die-Eigenschaft melden eine Bearbeitungs Änderung.  Der Unterschied zwischen den beiden ist die Art und Weise, in der der Wert gemeldet wird.  Die <xref:System.Windows.Input.ManipulationDelta.Expansion%2A> -Eigenschaft meldet die Bearbeitungs Änderung in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. Die <xref:System.Windows.Input.ManipulationDelta.Scale%2A> -Eigenschaft meldet den Wert als Multiplikator.  Wenn <xref:System.Windows.Input.ManipulationDelta.Scale%2A> 0,5 ist, wird die Manipulation so interpretiert, dass die Größe um 50% verringert wird.  Wenn <xref:System.Windows.Input.ManipulationDelta.Scale%2A> den Wert 2 hat, wird die Manipulation so interpretiert, dass die Größe um 100 Prozent erhöht wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotation">
      <MemberSignature Language="C#" Value="public double Rotation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Rotation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDelta.Rotation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rotation As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Rotation { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Rotation : double" Usage="System.Windows.Input.ManipulationDelta.Rotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Manipulationsdrehung in Grad ab oder legt diese fest.</summary>
        <value>Die Manipulationsdrehung in Grad.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> -Eigenschaft meldet die Art und Weise, wie eine Manipulation als Drehung um eine Achse interpretiert wird.  Die Achse ist in der Regel der Punkt zwischen den beiden Kontaktpunkten, die die Manipulation initiiert haben.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Windows.UIElement.ManipulationDelta> -Ereignis.  Im Beispiel werden die <xref:System.Windows.Input.ManipulationDelta.Translation%2A>Eigenschaften <xref:System.Windows.Input.ManipulationDelta.Scale%2A>, und <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> zum Verschieben, Ändern der Größe und zum Drehen eines <xref:System.Windows.Shapes.Rectangle>-Eigenschaft angewendet. Dieses Beispiel ist Teil eines größeren Beispiels in Exemplarische Vorgehensweise [: Erstellen Ihrer ersten Touchscreen-Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public System.Windows.Vector Scale { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Vector Scale" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDelta.Scale" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scale As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Vector Scale { System::Windows::Vector get(); };" />
      <MemberSignature Language="F#" Value="member this.Scale : System.Windows.Vector" Usage="System.Windows.Input.ManipulationDelta.Scale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Betrag, um den die Größe geändert wurde, als Multiplikator ab oder legt diesen fest.</summary>
        <value>Der Betrag, um den die Größe geändert wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl <xref:System.Windows.Input.ManipulationDelta.Scale%2A> die <xref:System.Windows.Input.ManipulationDelta.Expansion%2A> -Eigenschaft als auch die-Eigenschaft melden eine Bearbeitungs Änderung.  Der Unterschied zwischen den beiden ist die Art und Weise, in der der Wert gemeldet wird.  Die <xref:System.Windows.Input.ManipulationDelta.Scale%2A> -Eigenschaft meldet den Wert als Multiplikator.  Wenn <xref:System.Windows.Input.ManipulationDelta.Scale%2A> 0,5 ist, wird die Manipulation so interpretiert, dass die Größe um 50% verringert wird.  Wenn <xref:System.Windows.Input.ManipulationDelta.Scale%2A> den Wert 2 hat, wird die Manipulation so interpretiert, dass die Größe um 100 Prozent erhöht wird. Die <xref:System.Windows.Input.ManipulationDelta.Expansion%2A> -Eigenschaft meldet die Bearbeitungs Änderung in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Windows.UIElement.ManipulationDelta> -Ereignis.  Im Beispiel werden die <xref:System.Windows.Input.ManipulationDelta.Translation%2A>Eigenschaften <xref:System.Windows.Input.ManipulationDelta.Scale%2A>, und <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> zum Verschieben, Ändern der Größe und zum Drehen eines <xref:System.Windows.Shapes.Rectangle>-Eigenschaft angewendet. Dieses Beispiel ist Teil eines größeren Beispiels in Exemplarische Vorgehensweise [: Erstellen Ihrer ersten Touchscreen-Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translation">
      <MemberSignature Language="C#" Value="public System.Windows.Vector Translation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Vector Translation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDelta.Translation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Translation As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Vector Translation { System::Windows::Vector get(); };" />
      <MemberSignature Language="F#" Value="member this.Translation : System.Windows.Vector" Usage="System.Windows.Input.ManipulationDelta.Translation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die lineare Geschwindigkeit der Manipulation ab oder legt sie fest.</summary>
        <value>Die lineare Bewegung der Manipulation in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Input.ManipulationDelta.Translation%2A> -Eigenschaft meldet die Art und Weise, wie eine Manipulation als horizontal und vertikal auf dem Bildschirm interpretiert wird.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Windows.UIElement.ManipulationDelta> -Ereignis.  Im Beispiel werden die <xref:System.Windows.Input.ManipulationDelta.Translation%2A>Eigenschaften <xref:System.Windows.Input.ManipulationDelta.Scale%2A>, und <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> zum Verschieben, Ändern der Größe und zum Drehen eines <xref:System.Windows.Shapes.Rectangle>-Eigenschaft angewendet. Dieses Beispiel ist Teil eines größeren Beispiels in Exemplarische Vorgehensweise [: Erstellen Ihrer ersten Touchscreen-Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

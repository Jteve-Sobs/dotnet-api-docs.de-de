<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5398d07f5cc946557f3affd7e3b0eef8b5ce6779" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83922884" /></Metadata><TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Daten für die Routingereignisse <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> und <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel Ruft eine Befehls Quelle, z. b. <xref:System.Windows.Controls.MenuItem>, die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>-Methode für einen <xref:System.Windows.Input.RoutedCommand> auf, um zu bestimmen, ob der Befehl für das aktuelle Befehls Ziel ausgeführt werden kann oder nicht.  Wenn <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> auf `false` von einem Ereignishandler festgelegt ist, wird die Befehls Quelle deaktiviert.  Wenn beispielsweise ein <xref:System.Windows.Controls.MenuItem> als Befehls Quelle für einen Befehl fungiert und der Befehl nicht für das aktuelle Befehls Ziel ausgeführt werden kann, wird der <xref:System.Windows.Controls.MenuItem> grau.  
  
 Das Ereignis <xref:System.Windows.Input.ICommand.CanExecuteChanged> benachrichtigt eine Befehls Quelle, wenn sich die Fähigkeit eines auszuführenden Befehls möglicherweise geändert hat.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> erstellt, die nur `true` zurückgibt, wenn das Befehls Ziel ein-Steuerelement ist.  Zuerst wird <xref:System.Windows.RoutedEventArgs.Source%2A> in eine <xref:System.Windows.Controls.Control>umgewandelt.  Wenn <xref:System.Windows.RoutedEventArgs.Source%2A> ein <xref:System.Windows.Controls.Control>ist, wird <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> auf `true`festgelegt. Andernfalls wird Sie auf `false`festgelegt.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanExecute : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt diesen fest, der angibt, ob der diesem Ereignis zugeordnete <see cref="T:System.Windows.Input.RoutedCommand" /> für das Befehlsziel ausgeführt werden kann.</summary>
        <value><see langword="true" />, wenn das Ereignis für das Befehlsziel ausgeführt werden kann, andernfalls <see langword="false" />.  Standardwert: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Viele Befehls Quellen, z. b. <xref:System.Windows.Controls.MenuItem> und <xref:System.Windows.Controls.Button>, werden deaktiviert, wenn <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> `false` und aktiviert ist, wenn die <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> `true`ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> erstellt, die nur true zurückgibt, wenn das Befehls Ziel ein-Steuerelement ist.  Zuerst werden die <xref:System.Windows.RoutedEventArgs.Source%2A> Ereignisdaten in eine <xref:System.Windows.Controls.Control>umgewandelt.  Wenn es sich um einen <xref:System.Windows.Controls.Control>handelt, wird <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> auf `true`festgelegt. Andernfalls wird Sie auf `false`festgelegt.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den diesem Ereignis zugeordneten Befehl ab.</summary>
        <value>Der Befehl. Sofern es sich nicht um einen benutzerdefinierten Befehl handelt, ist dies i. d. R. ein <see cref="T:System.Windows.Input.RoutedCommand" />. Es gibt keinen Standardwert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu den Befehls Informationen finden Sie in der [Befehls Übersicht](/dotnet/framework/wpf/advanced/commanding-overview).  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> erstellt, die mehrere Befehle verarbeitet.  Wenn die <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A>-Eigenschaft gleich dem <xref:System.Windows.Input.MediaCommands.Play%2A>-Befehl ist und die-Methode `IsPlaying` `false`zurückgibt, wird <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> auf `true`festgelegt. Andernfalls wird <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> auf `false`festgelegt.  Wenn die <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A>-Eigenschaft gleich dem <xref:System.Windows.Input.MediaCommands.Stop%2A>-Befehl ist und die-Methode `IsPlaying` `true`zurückgibt, wird <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> auf `true`festgelegt. Andernfalls wird <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> auf `false`festgelegt.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueRouting : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob das Eingabe-Routingereignis, das den Befehl aufgerufen hat, weiterhin durch die Elementstruktur weitergeleitet werden soll.</summary>
        <value><see langword="true" />, wenn das Routingereignis weiterhin durch die Elementstruktur weitergeleitet werden soll, andernfalls <see langword="false" />.   Standardwert: <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="canExecuteRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die befehlsspezifischen Daten ab.</summary>
        <value>Die Befehlsdaten.  Standardwert: <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Command-Parameter wird verwendet, um bestimmte Informationen an den Befehl zu übergeben, wenn er ausgeführt wird.  Der Typ der Daten wird durch den-Befehl definiert.  
  
 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> können `null`werden. Viele Befehle verarbeiten oder erwarten keine Befehlsparameter.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Controls.Button> als Befehls Quelle für einen benutzerdefinierten Befehl verwendet wird.  Die <xref:System.Windows.Input.ICommandSource.Command%2A>-Eigenschaft des <xref:System.Windows.Controls.Button> wird auf die benutzerdefinierte <xref:System.Windows.Input.RoutedCommand> `customCommand` festgelegt, und der <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> wird verwendet, um den Wert der <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>-Eigenschaft eines <xref:System.Windows.Controls.Slider> Steuer Elements zu übergeben.  Dies ist durch die Verwendung von Datenbindung zum Binden der <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> an die <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>-Eigenschaft.  Der Konverter im Bindungs Ausdruck ist eine benutzerdefinierte <xref:System.Windows.Data.IValueConverter> die <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> in eine <xref:System.Int32> konvertiert, bevor Sie an den <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>gebunden wird.  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>

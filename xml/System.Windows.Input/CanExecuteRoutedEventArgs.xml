<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bc179f903cf033a5f812e4600ee0744cc09ff4a4" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86651250" /></Metadata><TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ea790-101">Stellt Daten für die Routingereignisse <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> und <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> bereit.</span><span class="sxs-lookup"><span data-stu-id="ea790-101">Provides data for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> and <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> routed events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea790-102">In der Regel Ruft eine Befehls Quelle, z. b <xref:System.Windows.Controls.MenuItem> ., die- <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methode für einen <xref:System.Windows.Input.RoutedCommand> auf, um zu bestimmen, ob der Befehl für das aktuelle Befehls Ziel ausgeführt werden kann oder nicht.</span><span class="sxs-lookup"><span data-stu-id="ea790-102">Typically, a command source, such a <xref:System.Windows.Controls.MenuItem>, will call the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> to determine if the command can or cannot execute on the current command target.</span></span>  <span data-ttu-id="ea790-103">Wenn <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> `false` von einem Ereignishandler auf festgelegt ist, wird die Befehls Quelle deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="ea790-103">If <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false` from an event handler, the command source will disable itself.</span></span>  <span data-ttu-id="ea790-104">Wenn z. b. ein <xref:System.Windows.Controls.MenuItem> als Befehls Quelle für einen Befehl fungiert und der Befehl nicht für das aktuelle Befehls Ziel ausgeführt werden kann, <xref:System.Windows.Controls.MenuItem> wird das ausgegraut.</span><span class="sxs-lookup"><span data-stu-id="ea790-104">For example, if a <xref:System.Windows.Controls.MenuItem> is acting as the command source for a command and the command cannot execute on the current command target, then the <xref:System.Windows.Controls.MenuItem> will gray itself out.</span></span>  
  
 <span data-ttu-id="ea790-105">Das <xref:System.Windows.Input.ICommand.CanExecuteChanged> Ereignis benachrichtigt eine Befehls Quelle, wenn sich die Fähigkeit eines auszuführenden Befehls möglicherweise geändert hat.</span><span class="sxs-lookup"><span data-stu-id="ea790-105">The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies a command source when the ability of a command to execute may have changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ea790-106">Im folgenden Beispiel wird eine erstellt <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , die nur zurückgibt, `true` Wenn das Befehls Ziel ein-Steuerelement ist.</span><span class="sxs-lookup"><span data-stu-id="ea790-106">The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that returns `true` only if the command target is a control.</span></span>  <span data-ttu-id="ea790-107">Zuerst <xref:System.Windows.RoutedEventArgs.Source%2A> wird in ein umgewandelt <xref:System.Windows.Controls.Control> .</span><span class="sxs-lookup"><span data-stu-id="ea790-107">First, <xref:System.Windows.RoutedEventArgs.Source%2A> is cast to a <xref:System.Windows.Controls.Control>.</span></span>  <span data-ttu-id="ea790-108">Wenn <xref:System.Windows.RoutedEventArgs.Source%2A> ein ist <xref:System.Windows.Controls.Control> , <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> wird auf festgelegt `true` . andernfalls wird es auf festgelegt `false` .</span><span class="sxs-lookup"><span data-stu-id="ea790-108">If <xref:System.Windows.RoutedEventArgs.Source%2A> is a <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanExecute : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea790-109">Ruft einen Wert ab oder legt diesen fest, der angibt, ob der diesem Ereignis zugeordnete <see cref="T:System.Windows.Input.RoutedCommand" /> für das Befehlsziel ausgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="ea790-109">Gets or sets a value that indicates whether the <see cref="T:System.Windows.Input.RoutedCommand" /> associated with this event can be executed on the command target.</span></span></summary>
        <value><span data-ttu-id="ea790-110"><see langword="true" />, wenn das Ereignis für das Befehlsziel ausgeführt werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ea790-110"><see langword="true" /> if the event can be executed on the command target; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="ea790-111">Der Standardwert ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ea790-111">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea790-112">Viele Befehls Quellen, z. b. <xref:System.Windows.Controls.MenuItem> und <xref:System.Windows.Controls.Button> , werden deaktiviert, wenn <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> ist `false` und aktiviert ist, wenn den <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> `true` Wert hat.</span><span class="sxs-lookup"><span data-stu-id="ea790-112">Many command sources, such as <xref:System.Windows.Controls.MenuItem> and <xref:System.Windows.Controls.Button>, are disabled when <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `false` and enabled when the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ea790-113">Im folgenden Beispiel wird eine erstellt <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , die nur true zurückgibt, wenn das Befehls Ziel ein-Steuerelement ist.</span><span class="sxs-lookup"><span data-stu-id="ea790-113">The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that only returns true if the command target is a control.</span></span>  <span data-ttu-id="ea790-114">Zuerst werden die <xref:System.Windows.RoutedEventArgs.Source%2A> Ereignisdaten in einen umgewandelt <xref:System.Windows.Controls.Control> .</span><span class="sxs-lookup"><span data-stu-id="ea790-114">First the <xref:System.Windows.RoutedEventArgs.Source%2A> event data is cast to a <xref:System.Windows.Controls.Control>.</span></span>  <span data-ttu-id="ea790-115">Wenn der Wert ist <xref:System.Windows.Controls.Control> , <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> wird auf festgelegt, `true` andernfalls wird er auf festgelegt `false` .</span><span class="sxs-lookup"><span data-stu-id="ea790-115">If it is a <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea790-116">Ruft den diesem Ereignis zugeordneten Befehl ab.</span><span class="sxs-lookup"><span data-stu-id="ea790-116">Gets the command associated with this event.</span></span></summary>
        <value><span data-ttu-id="ea790-117">Der Befehl.</span><span class="sxs-lookup"><span data-stu-id="ea790-117">The command.</span></span> <span data-ttu-id="ea790-118">Sofern es sich nicht um einen benutzerdefinierten Befehl handelt, ist dies i. d. R. ein <see cref="T:System.Windows.Input.RoutedCommand" />.</span><span class="sxs-lookup"><span data-stu-id="ea790-118">Unless the command is a custom command, this is generally a <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span> <span data-ttu-id="ea790-119">Es gibt keinen Standardwert.</span><span class="sxs-lookup"><span data-stu-id="ea790-119">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea790-120">Weitere Informationen zu den Befehls Informationen finden Sie in der [Befehls Übersicht](/dotnet/framework/wpf/advanced/commanding-overview).</span><span class="sxs-lookup"><span data-stu-id="ea790-120">For more information on commanding, see the [Commanding Overview](/dotnet/framework/wpf/advanced/commanding-overview).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ea790-121">Im folgenden Beispiel wird eine erstellt <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , die mehrere Befehle verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="ea790-121">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which handles multiple commands.</span></span>  <span data-ttu-id="ea790-122">Wenn die <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> -Eigenschaft gleich dem <xref:System.Windows.Input.MediaCommands.Play%2A> -Befehl und die-Methode `IsPlaying` zurückgibt `false` , <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> wird auf festgelegt `true` <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> . andernfalls wird auf festgelegt `false` .</span><span class="sxs-lookup"><span data-stu-id="ea790-122">If the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> property is equal to the <xref:System.Windows.Input.MediaCommands.Play%2A> command and the method `IsPlaying` returns `false`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.</span></span>  <span data-ttu-id="ea790-123">Wenn die <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> -Eigenschaft gleich dem <xref:System.Windows.Input.MediaCommands.Stop%2A> -Befehl und die-Methode `IsPlaying` zurückgibt `true` , <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> wird auf festgelegt `true` <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> . andernfalls wird auf festgelegt `false` .</span><span class="sxs-lookup"><span data-stu-id="ea790-123">If the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> property is equal to the <xref:System.Windows.Input.MediaCommands.Stop%2A> command and the method `IsPlaying` returns `true`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueRouting : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea790-124">Bestimmt, ob das Eingabe-Routingereignis, das den Befehl aufgerufen hat, weiterhin durch die Elementstruktur weitergeleitet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ea790-124">Determines whether the input routed event that invoked the command should continue to route through the element tree.</span></span></summary>
        <value><span data-ttu-id="ea790-125"><see langword="true" />, wenn das Routingereignis weiterhin durch die Elementstruktur weitergeleitet werden soll, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ea790-125"><see langword="true" /> if the routed event should continue to route through element tree; otherwise, <see langword="false" />.</span></span>   <span data-ttu-id="ea790-126">Der Standardwert ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ea790-126">The default value is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="canExecuteRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea790-127">Ruft die befehlsspezifischen Daten ab.</span><span class="sxs-lookup"><span data-stu-id="ea790-127">Gets the command specific data.</span></span></summary>
        <value><span data-ttu-id="ea790-128">Die Befehlsdaten.</span><span class="sxs-lookup"><span data-stu-id="ea790-128">The command data.</span></span>  <span data-ttu-id="ea790-129">Der Standardwert ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ea790-129">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea790-130">Der Command-Parameter wird verwendet, um bestimmte Informationen an den Befehl zu übergeben, wenn er ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="ea790-130">The command parameter is used to pass specific information to the command when it is executed.</span></span>  <span data-ttu-id="ea790-131">Der Typ der Daten wird durch den-Befehl definiert.</span><span class="sxs-lookup"><span data-stu-id="ea790-131">The type of the data is defined by the command.</span></span>  
  
 <span data-ttu-id="ea790-132"><xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A>kann sein `null` .</span><span class="sxs-lookup"><span data-stu-id="ea790-132"><xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> can be `null`.</span></span> <span data-ttu-id="ea790-133">Viele Befehle verarbeiten oder erwarten keine Befehlsparameter.</span><span class="sxs-lookup"><span data-stu-id="ea790-133">Many commands do not process or expect command parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ea790-134">Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Controls.Button> als Befehls Quelle für einen benutzerdefinierten Befehl verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ea790-134">The following example shows up to use a <xref:System.Windows.Controls.Button> as the command source for a custom command.</span></span>  <span data-ttu-id="ea790-135">Die <xref:System.Windows.Input.ICommandSource.Command%2A> -Eigenschaft des <xref:System.Windows.Controls.Button> wird auf die benutzerdefinierte festgelegt, <xref:System.Windows.Input.RoutedCommand> `customCommand` und <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> wird verwendet, um den Wert der-Eigenschaft eines-Steuer Elements zu übergeben <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> <xref:System.Windows.Controls.Slider> .</span><span class="sxs-lookup"><span data-stu-id="ea790-135">The <xref:System.Windows.Input.ICommandSource.Command%2A> property of the <xref:System.Windows.Controls.Button> is set to the custom <xref:System.Windows.Input.RoutedCommand> called `customCommand` and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass the value of the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of a <xref:System.Windows.Controls.Slider> control.</span></span>  <span data-ttu-id="ea790-136">Dies ist die Durchführung der Verwendung von Datenbindung, um das <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> an die-Eigenschaft zu binden <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> .</span><span class="sxs-lookup"><span data-stu-id="ea790-136">This is accomplishment by using databinding to bind the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> to the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property.</span></span>  <span data-ttu-id="ea790-137">Der Konverter im Bindungs Ausdruck ist ein benutzerdefiniertes <xref:System.Windows.Data.IValueConverter> , das <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> in eine konvertiert, <xref:System.Int32> bevor es an den gebunden wird <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> .</span><span class="sxs-lookup"><span data-stu-id="ea790-137">The converter in the binding expression is a custom <xref:System.Windows.Data.IValueConverter> which converts <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> into an <xref:System.Int32> before binding it to the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>

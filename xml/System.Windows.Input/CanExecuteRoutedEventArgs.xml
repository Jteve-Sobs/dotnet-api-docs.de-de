<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4b8dddd7cb69affee96be90bc72d1409afcef3d8" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39751766" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Daten für die Routingereignisse <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> und <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel eine Befehlsquelle, solche eine <xref:System.Windows.Controls.MenuItem>, ruft der <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methode für eine <xref:System.Windows.Input.RoutedCommand> um zu bestimmen, ob der Befehl kann nicht auf das aktuelle Befehlsziel ausgeführt werden kann.  Wenn <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> nastaven NA hodnotu `false` von einem Ereignishandler, die Befehlsquelle deaktiviert.  Z. B. wenn ein <xref:System.Windows.Controls.MenuItem> dient als Befehlsquelle für einen Befehl und den Befehl auf das aktuelle Befehlsziel ausgeführt werden kann und dann die <xref:System.Windows.Controls.MenuItem> wird gray selbst heraus.  
  
 Die <xref:System.Windows.Input.ICommand.CanExecuteChanged> Ereignis eine Befehlsquelle benachrichtigt, wenn sich die Möglichkeit eines Befehls zum ausführen kann.  
  
   
  
## Examples  
 Im folgenden Beispiel erstellt eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> zurückgibt `true` nur dann, wenn das Ziel des Befehls ein Steuerelement ist.  Zuerst <xref:System.Windows.RoutedEventArgs.Source%2A> umgewandelt wird eine <xref:System.Windows.Controls.Control>.  Wenn <xref:System.Windows.RoutedEventArgs.Source%2A> ist eine <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> nastaven NA hodnotu `true`ist, andernfalls wird festgelegt `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanExecute : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt diesen fest, der angibt, ob der diesem Ereignis zugeordnete <see cref="T:System.Windows.Input.RoutedCommand" /> für das Befehlsziel ausgeführt werden kann.</summary>
        <value>
          <see langword="true" />, wenn das Ereignis für das Befehlsziel ausgeführt werden kann, andernfalls <see langword="false" />.  Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Viele Quellen, z. B. Befehl <xref:System.Windows.Controls.MenuItem> und <xref:System.Windows.Controls.Button>, sind deaktiviert, wenn <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> ist `false` und aktiviert, wenn die <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> ist `true`.  
  
   
  
## Examples  
 Im folgenden Beispiel erstellt eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , die nur gibt true zurück, wenn das Ziel des Befehls ein Steuerelement ist.  Erste die <xref:System.Windows.RoutedEventArgs.Source%2A> Ereignisdaten der Umwandlung in einen <xref:System.Windows.Controls.Control>.  Ist dies eine <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> nastaven NA hodnotu `true`ist, andernfalls wird er auf festgelegt `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den diesem Ereignis zugeordneten Befehl ab.</summary>
        <value>Der Befehl. Sofern es sich nicht um einen benutzerdefinierten Befehl handelt, ist dies i. d. R. ein <see cref="T:System.Windows.Input.RoutedCommand" />. Es ist kein Standardwert vorhanden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen über Befehle finden Sie unter den [Befehlsübersicht](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Windows.Input.CanExecuteRoutedEventHandler> mehrere Befehle behandelt.  Wenn die <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> Eigenschaft entspricht der <xref:System.Windows.Input.MediaCommands.Play%2A> Befehls- und die `IsPlaying` gibt `false`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> nastaven NA hodnotu `true`ist, andernfalls <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> nastaven NA hodnotu `false`.  Wenn die <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> Eigenschaft entspricht der <xref:System.Windows.Input.MediaCommands.Stop%2A> Befehls- und die `IsPlaying` gibt `true`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> nastaven NA hodnotu `true`ist, andernfalls <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> nastaven NA hodnotu `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueRouting : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob das Eingabe-Routingereignis, das den Befehl aufgerufen hat, weiterhin durch die Elementstruktur weitergeleitet werden soll.</summary>
        <value>
          <see langword="true" />, wenn das Routingereignis weiterhin durch die Elementstruktur weitergeleitet werden soll, andernfalls <see langword="false" />.   Der Standardwert ist <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="canExecuteRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die befehlsspezifischen Daten ab.</summary>
        <value>Die Befehlsdaten.  Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Befehlsparameter wird verwendet, um spezifische Informationen für den Befehl übergeben, bei der Ausführung.  Der Typ der Daten wird durch den Befehl definiert.  
  
 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> kann `null`. Viele Befehle zu verarbeiten oder erwarten, dass Befehlsparameter nicht.  
  
   
  
## Examples  
 Im folgende Beispiel wird mit einem <xref:System.Windows.Controls.Button> als Befehlsquelle für einen benutzerdefinierten Befehl.  Die <xref:System.Windows.Input.ICommandSource.Command%2A> Eigenschaft der <xref:System.Windows.Controls.Button> festgelegt ist, auf die benutzerdefinierte <xref:System.Windows.Input.RoutedCommand> aufgerufen `customComand` und die <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> wird verwendet, um den Wert der übergeben der <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> Eigenschaft eine <xref:System.Windows.Controls.Slider> Steuerelement.  Dies ist die Leistung mithilfe von Datenbindung zum Binden der <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> auf die <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> Eigenschaft.  Der Konverter in den Bindungsausdruck ist eine benutzerdefinierte <xref:System.Windows.Data.IValueConverter> welche konvertiert <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> in einer <xref:System.Int32> vor dem Binden an die <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>
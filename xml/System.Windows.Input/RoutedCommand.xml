<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d7469aafedfab5bf01be9f8214fc44809973b73" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30659624" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="25773-101">Definiert einen Befehl, der <see cref="T:System.Windows.Input.ICommand" /> implementiert und die Elementstruktur durchläuft.</span>
      <span class="sxs-lookup">
        <span data-stu-id="25773-101">Defines a command that implements <see cref="T:System.Windows.Input.ICommand" /> and is routed through the element tree.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25773-102">Die <xref:System.Windows.Input.RoutedCommand.Execute%2A> und <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methoden auf eine <xref:System.Windows.Input.RoutedCommand> die Anwendungslogik für den Befehl nicht enthalten, wie bei einer typischen der Fall ist <xref:System.Windows.Input.ICommand>, aber stattdessen diese Methoden lösen Ereignisse, die die Elementstruktur sucht ein Objekt mit Durchlaufen einer <xref:System.Windows.Input.CommandBinding>.</span><span class="sxs-lookup"><span data-stu-id="25773-102">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="25773-103">Der Ereignishandler angefügt wird, um die <xref:System.Windows.Input.CommandBinding> enthalten die Befehlslogik.</span><span class="sxs-lookup"><span data-stu-id="25773-103">The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.</span></span>  
  
 <span data-ttu-id="25773-104">Die <xref:System.Windows.Input.RoutedCommand.Execute%2A> -Methode löst das <xref:System.Windows.Input.CommandManager.PreviewExecuted> und <xref:System.Windows.Input.CommandManager.Executed> Ereignisse.</span><span class="sxs-lookup"><span data-stu-id="25773-104">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.</span></span>  <span data-ttu-id="25773-105">Die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> -Methode löst das <xref:System.Windows.Input.CommandManager.PreviewCanExecute> und <xref:System.Windows.Input.CommandManager.CanExecute> Ereignisse.</span><span class="sxs-lookup"><span data-stu-id="25773-105">The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.</span></span>  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="25773-106">Verwendung von XAML-Attributen</span><span class="sxs-lookup"><span data-stu-id="25773-106">XAML Attribute Usage</span></span>  
 <span data-ttu-id="25773-107">\<*Objekt* *Eigenschaft*= "*PredefinedCommandName*" / ></span><span class="sxs-lookup"><span data-stu-id="25773-107">\<*object* *property*="*predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="25773-108">\- oder –</span><span class="sxs-lookup"><span data-stu-id="25773-108">\- or -</span></span>  
  
 <span data-ttu-id="25773-109">\<*Objekt* *Eigenschaft*= "*PredefinedClassName*.* PredefinedCommandName*"/ ></span><span class="sxs-lookup"><span data-stu-id="25773-109">\<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="25773-110">\- oder –</span><span class="sxs-lookup"><span data-stu-id="25773-110">\- or -</span></span>  
  
 <span data-ttu-id="25773-111">\<*Objekt* *Eigenschaft*= "{ *CustomClassName*.* CustomCommandName*} "/ ></span><span class="sxs-lookup"><span data-stu-id="25773-111">\<*object* *property*="{ *customClassName*.*customCommandName*}"/></span></span>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a><span data-ttu-id="25773-112">XAML-Werte</span><span class="sxs-lookup"><span data-stu-id="25773-112">XAML Values</span></span>  
 <span data-ttu-id="25773-113">*predefinedClassName*</span><span class="sxs-lookup"><span data-stu-id="25773-113">*predefinedClassName*</span></span>  
 <span data-ttu-id="25773-114">Einer der vordefinierten Befehlsklassen.</span><span class="sxs-lookup"><span data-stu-id="25773-114">One of the predefined command classes.</span></span>  
  
 <span data-ttu-id="25773-115">*predefinedCommandName*</span><span class="sxs-lookup"><span data-stu-id="25773-115">*predefinedCommandName*</span></span>  
 <span data-ttu-id="25773-116">Einer der vordefinierten Befehle.</span><span class="sxs-lookup"><span data-stu-id="25773-116">One of the predefined commands.</span></span>  
  
 <span data-ttu-id="25773-117">*customClassName*</span><span class="sxs-lookup"><span data-stu-id="25773-117">*customClassName*</span></span>  
 <span data-ttu-id="25773-118">Eine benutzerdefinierte Klasse, die den benutzerdefinierten Befehl enthält.</span><span class="sxs-lookup"><span data-stu-id="25773-118">A custom class which contains the custom command.</span></span> <span data-ttu-id="25773-119">Benutzerdefinierte Klassen im Allgemeinen erfordern eine `xlmns` Präfix-Zuordnung; Siehe [XAML-Namespaces und Namespace-Zuordnung für WPF-XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="25773-119">Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="25773-120">*customCommandName*</span><span class="sxs-lookup"><span data-stu-id="25773-120">*customCommandName*</span></span>  
 <span data-ttu-id="25773-121">Einen benutzerdefinierten Befehl.</span><span class="sxs-lookup"><span data-stu-id="25773-121">A custom command.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="25773-122">Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.RoutedCommand" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-122">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="25773-123">Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.RoutedCommand" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-123">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="25773-124">Der deklarierte Name für die Serialisierung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-124">Declared name for serialization.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="25773-125">Der Typ, der den Befehl registriert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-125">The type which is registering the command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25773-126">Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.RoutedCommand" />-Klasse mit dem angegebenen Namen und dem angegebenen Besitzertyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-126">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name and owner type.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="25773-127">
            <paramref name="name" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-127">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="25773-128">
            <paramref name="ownerType" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-128">
              <paramref name="ownerType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="25773-129">Der deklarierte Name für die Serialisierung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-129">Declared name for serialization.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="25773-130">Der Typ, der den Befehl registriert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-130">The type that is registering the command.</span>
          </span>
        </param>
        <param name="inputGestures">
          <span data-ttu-id="25773-131">Die Standardeingabeaktionen, die mit diesem Befehl verknüpft sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-131">Default input gestures associated with this command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25773-132">Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.RoutedCommand" />-Klasse mit dem angegebenen Namen, dem angegebenen Besitzertyp und der angegebenen Auflistung von Eingabeaktionen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-132">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name, owner type, and collection of gestures.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="25773-133">
            <paramref name="name" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-133">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="25773-134">Die Länge von <paramref name="name" /> ist 0 (null).</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-134">the length of <paramref name="name" /> is zero</span>
          </span>
          <span data-ttu-id="25773-135">\- oder –</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-135">\- or -</span>
          </span>
          <span data-ttu-id="25773-136">
            <paramref name="ownerType" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-136">
              <paramref name="ownerType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="25773-137">Ein benutzerdefinierter Datentyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-137">A user defined data type.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="25773-138">Das Ziel des Befehls.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-138">The command target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25773-139">Ermittelt, ob dieser <see cref="T:System.Windows.Input.RoutedCommand" /> im aktuellen Zustand ausgeführt werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-139">Determines whether this <see cref="T:System.Windows.Input.RoutedCommand" /> can execute in its current state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="25773-140">
            <see langword="true" />, wenn der Befehl für das aktuelle Befehlsziel ausgeführt werden kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-140">
              <see langword="true" /> if the command can execute on the current command target; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25773-141">Die eigentliche Logik, die bestimmt, wenn eine <xref:System.Windows.Input.RoutedCommand> kann in der aktuellen ausführen Befehlsziel ist nicht Bestandteil der <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methoden, vielmehr <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> löst die <xref:System.Windows.Input.CommandManager.PreviewCanExecute> und die <xref:System.Windows.Input.CommandManager.CanExecute> Ereignisse, die tunnel und Blasendiagrammen durch Element Struktur, der für ein Objekt mit einem <xref:System.Windows.Input.CommandBinding>.</span><span class="sxs-lookup"><span data-stu-id="25773-141">The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="25773-142">Wenn eine <xref:System.Windows.Input.CommandBinding> für diesen <xref:System.Windows.Input.RoutedCommand> gefunden wird, und klicken Sie dann die <xref:System.Windows.Input.CanExecuteRoutedEventHandler> angefügt <xref:System.Windows.Input.CommandBinding> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="25773-142">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="25773-143">Diese Handler stellen die Programmierlogik zu bestimmen, ob die <xref:System.Windows.Input.RoutedCommand> ausgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="25773-143">These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.</span></span>  
  
 <span data-ttu-id="25773-144">Die <xref:System.Windows.Input.CommandManager.PreviewCanExecute> und <xref:System.Windows.Input.CommandManager.PreviewExecuted> Ereignisse werden ausgelöst, auf die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span><span class="sxs-lookup"><span data-stu-id="25773-144">The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="25773-145">Wenn die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> nicht festgelegt ist, auf die <xref:System.Windows.Input.ICommandSource>, <xref:System.Windows.Input.CommandManager.PreviewCanExecute> und <xref:System.Windows.Input.CommandManager.CanExecute> Ereignisse werden ausgelöst, auf das Element mit dem Tastaturfokus.</span><span class="sxs-lookup"><span data-stu-id="25773-145">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25773-146">Im folgende Beispiel wird eine <xref:System.Windows.Input.ICommand.CanExecuteChanged> -Ereignishandler aus eine benutzerdefinierte Implementierung von <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="25773-146">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="25773-147">`this.Command` In diesem Beispiel wird die <xref:System.Windows.Input.ICommandSource.Command%2A> Eigenschaft auf die <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="25773-147">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="25773-148">Wenn der Befehl nicht ist `null`, der Befehl umgewandelt wird eine <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="25773-148">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="25773-149">Wenn der Befehl ist eine <xref:System.Windows.Input.RoutedCommand>, die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methode wird aufgerufen, und übergeben der <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> und die <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="25773-149">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="25773-150">Befehl ist keine <xref:System.Windows.Input.RoutedCommand>, der Umwandlung in einen <xref:System.Windows.Input.ICommand> und die <xref:System.Windows.Input.ICommand.CanExecute%2A> Methode wird aufgerufen, und übergeben der <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="25773-150">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="25773-151">Wenn die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> -Methode zurückkehrt `true`, klicken Sie dann das Steuerelement aktiviert ist; andernfalls ist das Steuerelement deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="25773-151">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disable.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="25773-152">
            <paramref name="target" /> ist kein <see cref="T:System.Windows.UIElement" /> und keine <see cref="T:System.Windows.ContentElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-152">
              <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="25773-153">Tritt ein, wenn vom Befehl-Manager Änderungen an der Befehlsquelle erkannt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-153">Occurs when changes to the command source are detected by the command manager.</span>
          </span>
          <span data-ttu-id="25773-154">Diese Änderungen beeinflussen die Ausführung des Befehls für das aktuelle Befehlsziel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-154">These changes often affect whether the command should execute on the current command target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25773-155">Die <xref:System.Windows.Input.RoutedCommand> überwacht die <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis, das ausgelöst wird, indem Sie die <xref:System.Windows.Input.CommandManager>.</span><span class="sxs-lookup"><span data-stu-id="25773-155">The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>.</span></span> <span data-ttu-id="25773-156">Die <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis wird ausgelöst, wenn Bedingungen erfüllt sind, die möglicherweise ändern, der angibt, ob der Befehl ausgeführt wird, z. B. eine Änderung in den Tastaturfokus.</span><span class="sxs-lookup"><span data-stu-id="25773-156">The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.</span></span>  <span data-ttu-id="25773-157">Wenn der Befehl empfängt die <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis auslöst, es der <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="25773-157">When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  <span data-ttu-id="25773-158">Im Allgemeinen die Befehlsquelle für dieses Ereignis und die Abfrage überwacht die <xref:System.Windows.Input.RoutedCommand> über die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="25773-158">Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.</span></span>  <span data-ttu-id="25773-159">Die meisten Befehlsquellen werden selbst deaktiviert, wenn der Befehl kann, als Teil ihrer Befehl-Bindung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="25773-159">Most command sources will disable themselves if the command cannot be executed, as part of their command binding.</span></span>  <span data-ttu-id="25773-160">Ein Beispiel hierfür ist, wenn eine <xref:System.Windows.Controls.MenuItem> ausgegraut wird, wenn der Befehl ausgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="25773-160">An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.</span></span>  
  
 <span data-ttu-id="25773-161">In einigen Situationen die <xref:System.Windows.Input.CommandManager> ist nicht bekannt, der eine Änderung in Bedingungen, die die Fähigkeit zur Ausführung eines Befehls ändert.</span><span class="sxs-lookup"><span data-stu-id="25773-161">In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.</span></span>  <span data-ttu-id="25773-162">In diesen Fällen können Sie erzwingen die <xref:System.Windows.Input.CommandManager> , löst die <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis durch Aufrufen der <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> -Methode, dies wird wiederum dazu führen, dass die <xref:System.Windows.Input.RoutedCommand> zum Auslösen der <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="25773-162">In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25773-163">Im folgende Beispiel wird eine <xref:System.Windows.Input.ICommand.CanExecuteChanged> -Ereignishandler aus eine benutzerdefinierte Implementierung von <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="25773-163">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="25773-164">`this.Command` In diesem Beispiel wird die <xref:System.Windows.Input.ICommandSource.Command%2A> Eigenschaft auf die <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="25773-164">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="25773-165">Wenn der Befehl nicht ist `null`, der Befehl umgewandelt wird eine <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="25773-165">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="25773-166">Wenn der Befehl ist eine <xref:System.Windows.Input.RoutedCommand>, die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methode wird aufgerufen, und übergeben der <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> und die <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="25773-166">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="25773-167">Befehl ist keine <xref:System.Windows.Input.RoutedCommand>, der Umwandlung in einen <xref:System.Windows.Input.ICommand> und die <xref:System.Windows.Input.ICommand.CanExecute%2A> Methode wird aufgerufen, und übergeben der <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="25773-167">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="25773-168">Wenn die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> -Methode zurückkehrt `true`, klicken Sie dann das Steuerelement aktiviert ist; andernfalls ist das Steuerelement deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="25773-168">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="25773-169">Der benutzerdefinierte Parameter zur Übergabe an den Handler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-169">User defined parameter to be passed to the handler.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="25773-170">Das Element, ab dem nach Befehlshandlern gesucht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-170">Element at which to begin looking for command handlers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25773-171">Führt den <see cref="T:System.Windows.Input.RoutedCommand" /> für das aktuelle Befehlsziel aus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-171">Executes the <see cref="T:System.Windows.Input.RoutedCommand" /> on the current command target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25773-172">Die eigentliche Logik, die ausgeführt wird die <xref:System.Windows.Input.RoutedCommand> ist nicht Bestandteil der <xref:System.Windows.Input.RoutedCommand.Execute%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="25773-172">The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.</span></span>  <span data-ttu-id="25773-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> Löst das <xref:System.Windows.Input.CommandManager.PreviewExecuted> und <xref:System.Windows.Input.CommandManager.Executed> -Ereignisse, die Tunnel und Blasendiagramme über das Element Struktur sucht ein Objekt mit einem <xref:System.Windows.Input.CommandBinding>.</span><span class="sxs-lookup"><span data-stu-id="25773-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="25773-174">Wenn eine <xref:System.Windows.Input.CommandBinding> für diesen <xref:System.Windows.Input.RoutedCommand> gefunden wird, und klicken Sie dann die <xref:System.Windows.Input.ExecutedRoutedEventHandler> angefügt <xref:System.Windows.Input.CommandBinding> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="25773-174">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="25773-175">Diese Handler stellen die Programmierlogik, die führt die <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="25773-175">These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 <span data-ttu-id="25773-176">Die <xref:System.Windows.Input.CommandManager.PreviewExecuted> und <xref:System.Windows.Input.CommandManager.Executed> Ereignisse werden ausgelöst, auf die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span><span class="sxs-lookup"><span data-stu-id="25773-176">The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="25773-177">Wenn die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> nicht festgelegt ist, auf die <xref:System.Windows.Input.ICommandSource>, <xref:System.Windows.Input.CommandManager.PreviewExecuted> und <xref:System.Windows.Input.CommandManager.Executed> Ereignisse werden ausgelöst, auf das Element mit dem Tastaturfokus.</span><span class="sxs-lookup"><span data-stu-id="25773-177">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25773-178">Im folgende Beispiel wird eine benutzerdefinierte Implementierung von <xref:System.Windows.Input.ICommandSource> Beispiel.</span><span class="sxs-lookup"><span data-stu-id="25773-178">The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.</span></span>  
  
 <span data-ttu-id="25773-179">`this.Command` In diesem Beispiel befindet sich die Befehlseigenschaft auf die <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="25773-179">`this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="25773-180">Wenn der Befehl nicht null ist, wird der Befehl zum umgewandelt eine <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="25773-180">If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="25773-181">Wird jedoch eine <xref:System.Windows.Input.RoutedCommand>, und klicken Sie dann die <xref:System.Windows.Input.RoutedCommand.Execute%2A> Methode wird aufgerufen, und übergeben der <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> und die <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="25773-181">If it is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="25773-182">Ist der Befehl keine <xref:System.Windows.Input.RoutedCommand>, der Umwandlung in einen <xref:System.Windows.Input.ICommand> und die <xref:System.Windows.Input.ICommand.Execute%2A> Methode wird aufgerufen, und übergeben der <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="25773-182">If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="25773-183">
            <paramref name="target" /> ist kein <see cref="T:System.Windows.UIElement" /> und keine <see cref="T:System.Windows.ContentElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-183">
              <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="25773-184">Ruft die Auflistung von <see cref="T:System.Windows.Input.InputGesture" />-Objekten ab, die mit diesem Befehl verknüpft sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-184">Gets the collection of <see cref="T:System.Windows.Input.InputGesture" /> objects that are associated with this command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="25773-185">Die Eingabeaktionen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-185">The input gestures.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="25773-186">Im folgende Beispiel wird gezeigt, wie das Hinzufügen eines neuen <xref:System.Windows.Input.MouseGesture> zu einem <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="25773-186">The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="25773-187">Ruft den Namen des Befehls ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-187">Gets the name of the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="25773-188">Der Name des Befehls.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-188">The name of the command.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25773-189">Diese Eigenschaft kann verwendet werden, beim Verweisen auf eine <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="25773-189">This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="25773-190">Ruft den Typ ab, der für den Befehl registriert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-190">Gets the type that is registered with the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="25773-191">Der Typ des Befehlsbesitzers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-191">The type of the command owner.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="25773-192">Vom Befehl verwendete Daten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-192">Data used by the command.</span>
          </span>
          <span data-ttu-id="25773-193">Wenn der Befehl keine Datenübergabe erfordert, kann das Objekt auf <see langword="null" /> festgelegt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-193">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25773-194">Eine Beschreibung dieser Member finden Sie unter <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-194">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="25773-195">
            <see langword="true" />, wenn der Befehl ausgeführt werden kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-195">
              <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25773-196">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="25773-196">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="25773-197">Er kann nur verwendet werden, wenn die <xref:System.Windows.Input.RoutedCommand>-Instanz in eine <xref:System.Windows.Input.ICommand>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="25773-197">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="25773-198">Vom Befehl verwendete Daten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-198">Data used by the command.</span>
          </span>
          <span data-ttu-id="25773-199">Wenn der Befehl keine Datenübergabe erfordert, kann das Objekt auf <see langword="null" /> festgelegt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-199">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25773-200">Eine Beschreibung dieser Member finden Sie unter <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25773-200">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25773-201">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="25773-201">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="25773-202">Er kann nur verwendet werden, wenn die <xref:System.Windows.Input.RoutedCommand>-Instanz in eine <xref:System.Windows.Input.ICommand>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="25773-202">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25773-203">Siehe auch</span><span class="sxs-lookup"><span data-stu-id="25773-203">See Also</span></span>  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
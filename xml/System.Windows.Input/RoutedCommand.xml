<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d7469aafedfab5bf01be9f8214fc44809973b73" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30659624" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert einen Befehl, der <see cref="T:System.Windows.Input.ICommand" /> implementiert und die Elementstruktur durchläuft.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Input.RoutedCommand.Execute%2A> und <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methoden auf eine <xref:System.Windows.Input.RoutedCommand> die Anwendungslogik für den Befehl nicht enthalten, wie bei einer typischen der Fall ist <xref:System.Windows.Input.ICommand>, aber stattdessen diese Methoden lösen Ereignisse, die die Elementstruktur sucht ein Objekt mit Durchlaufen einer <xref:System.Windows.Input.CommandBinding>.  Der Ereignishandler angefügt wird, um die <xref:System.Windows.Input.CommandBinding> enthalten die Befehlslogik.  
  
 Die <xref:System.Windows.Input.RoutedCommand.Execute%2A> -Methode löst das <xref:System.Windows.Input.CommandManager.PreviewExecuted> und <xref:System.Windows.Input.CommandManager.Executed> Ereignisse.  Die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> -Methode löst das <xref:System.Windows.Input.CommandManager.PreviewCanExecute> und <xref:System.Windows.Input.CommandManager.CanExecute> Ereignisse.  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a>Verwendung von XAML-Attributen  
 \<*Objekt* *Eigenschaft*= "*PredefinedCommandName*" / >  
  
 \- oder –  
  
 \<*Objekt* *Eigenschaft*= "*PredefinedClassName*.* PredefinedCommandName*"/ >  
  
 \- oder –  
  
 \<*Objekt* *Eigenschaft*= "{ *CustomClassName*.* CustomCommandName*} "/ >  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 *predefinedClassName*  
 Einer der vordefinierten Befehlsklassen.  
  
 *predefinedCommandName*  
 Einer der vordefinierten Befehle.  
  
 *customClassName*  
 Eine benutzerdefinierte Klasse, die den benutzerdefinierten Befehl enthält. Benutzerdefinierte Klassen im Allgemeinen erfordern eine `xlmns` Präfix-Zuordnung; Siehe [XAML-Namespaces und Namespace-Zuordnung für WPF-XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  
  
 *customCommandName*  
 Einen benutzerdefinierten Befehl.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.RoutedCommand" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.RoutedCommand" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Der deklarierte Name für die Serialisierung.</param>
        <param name="ownerType">Der Typ, der den Befehl registriert.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.RoutedCommand" />-Klasse mit dem angegebenen Namen und dem angegebenen Besitzertyp.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ownerType" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">Der deklarierte Name für die Serialisierung.</param>
        <param name="ownerType">Der Typ, der den Befehl registriert.</param>
        <param name="inputGestures">Die Standardeingabeaktionen, die mit diesem Befehl verknüpft sind.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.RoutedCommand" />-Klasse mit dem angegebenen Namen, dem angegebenen Besitzertyp und der angegebenen Auflistung von Eingabeaktionen.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Die Länge von <paramref name="name" /> ist 0 (null).  
  
 \- oder –  
  
 <paramref name="ownerType" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">Ein benutzerdefinierter Datentyp.</param>
        <param name="target">Das Ziel des Befehls.</param>
        <summary>Ermittelt, ob dieser <see cref="T:System.Windows.Input.RoutedCommand" /> im aktuellen Zustand ausgeführt werden kann.</summary>
        <returns>
          <see langword="true" />, wenn der Befehl für das aktuelle Befehlsziel ausgeführt werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die eigentliche Logik, die bestimmt, wenn eine <xref:System.Windows.Input.RoutedCommand> kann in der aktuellen ausführen Befehlsziel ist nicht Bestandteil der <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methoden, vielmehr <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> löst die <xref:System.Windows.Input.CommandManager.PreviewCanExecute> und die <xref:System.Windows.Input.CommandManager.CanExecute> Ereignisse, die tunnel und Blasendiagrammen durch Element Struktur, der für ein Objekt mit einem <xref:System.Windows.Input.CommandBinding>.  Wenn eine <xref:System.Windows.Input.CommandBinding> für diesen <xref:System.Windows.Input.RoutedCommand> gefunden wird, und klicken Sie dann die <xref:System.Windows.Input.CanExecuteRoutedEventHandler> angefügt <xref:System.Windows.Input.CommandBinding> aufgerufen wird.  Diese Handler stellen die Programmierlogik zu bestimmen, ob die <xref:System.Windows.Input.RoutedCommand> ausgeführt werden kann.  
  
 Die <xref:System.Windows.Input.CommandManager.PreviewCanExecute> und <xref:System.Windows.Input.CommandManager.PreviewExecuted> Ereignisse werden ausgelöst, auf die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  Wenn die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> nicht festgelegt ist, auf die <xref:System.Windows.Input.ICommandSource>, <xref:System.Windows.Input.CommandManager.PreviewCanExecute> und <xref:System.Windows.Input.CommandManager.CanExecute> Ereignisse werden ausgelöst, auf das Element mit dem Tastaturfokus.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine <xref:System.Windows.Input.ICommand.CanExecuteChanged> -Ereignishandler aus eine benutzerdefinierte Implementierung von <xref:System.Windows.Input.ICommandSource>.  
  
 `this.Command` In diesem Beispiel wird die <xref:System.Windows.Input.ICommandSource.Command%2A> Eigenschaft auf die <xref:System.Windows.Input.ICommandSource>.  Wenn der Befehl nicht ist `null`, der Befehl umgewandelt wird eine <xref:System.Windows.Input.RoutedCommand>.  Wenn der Befehl ist eine <xref:System.Windows.Input.RoutedCommand>, die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methode wird aufgerufen, und übergeben der <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> und die <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  Befehl ist keine <xref:System.Windows.Input.RoutedCommand>, der Umwandlung in einen <xref:System.Windows.Input.ICommand> und die <xref:System.Windows.Input.ICommand.CanExecute%2A> Methode wird aufgerufen, und übergeben der <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 Wenn die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> -Methode zurückkehrt `true`, klicken Sie dann das Steuerelement aktiviert ist; andernfalls ist das Steuerelement deaktivieren.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> ist kein <see cref="T:System.Windows.UIElement" /> und keine <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn vom Befehl-Manager Änderungen an der Befehlsquelle erkannt werden. Diese Änderungen beeinflussen die Ausführung des Befehls für das aktuelle Befehlsziel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Input.RoutedCommand> überwacht die <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis, das ausgelöst wird, indem Sie die <xref:System.Windows.Input.CommandManager>. Die <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis wird ausgelöst, wenn Bedingungen erfüllt sind, die möglicherweise ändern, der angibt, ob der Befehl ausgeführt wird, z. B. eine Änderung in den Tastaturfokus.  Wenn der Befehl empfängt die <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis auslöst, es der <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> Ereignis.  Im Allgemeinen die Befehlsquelle für dieses Ereignis und die Abfrage überwacht die <xref:System.Windows.Input.RoutedCommand> über die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methode.  Die meisten Befehlsquellen werden selbst deaktiviert, wenn der Befehl kann, als Teil ihrer Befehl-Bindung ausgeführt werden.  Ein Beispiel hierfür ist, wenn eine <xref:System.Windows.Controls.MenuItem> ausgegraut wird, wenn der Befehl ausgeführt werden kann.  
  
 In einigen Situationen die <xref:System.Windows.Input.CommandManager> ist nicht bekannt, der eine Änderung in Bedingungen, die die Fähigkeit zur Ausführung eines Befehls ändert.  In diesen Fällen können Sie erzwingen die <xref:System.Windows.Input.CommandManager> , löst die <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis durch Aufrufen der <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> -Methode, dies wird wiederum dazu führen, dass die <xref:System.Windows.Input.RoutedCommand> zum Auslösen der <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> Ereignis.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine <xref:System.Windows.Input.ICommand.CanExecuteChanged> -Ereignishandler aus eine benutzerdefinierte Implementierung von <xref:System.Windows.Input.ICommandSource>.  
  
 `this.Command` In diesem Beispiel wird die <xref:System.Windows.Input.ICommandSource.Command%2A> Eigenschaft auf die <xref:System.Windows.Input.ICommandSource>.  Wenn der Befehl nicht ist `null`, der Befehl umgewandelt wird eine <xref:System.Windows.Input.RoutedCommand>.  Wenn der Befehl ist eine <xref:System.Windows.Input.RoutedCommand>, die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methode wird aufgerufen, und übergeben der <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> und die <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  Befehl ist keine <xref:System.Windows.Input.RoutedCommand>, der Umwandlung in einen <xref:System.Windows.Input.ICommand> und die <xref:System.Windows.Input.ICommand.CanExecute%2A> Methode wird aufgerufen, und übergeben der <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 Wenn die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> -Methode zurückkehrt `true`, klicken Sie dann das Steuerelement aktiviert ist; andernfalls ist das Steuerelement deaktiviert.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">Der benutzerdefinierte Parameter zur Übergabe an den Handler.</param>
        <param name="target">Das Element, ab dem nach Befehlshandlern gesucht werden soll.</param>
        <summary>Führt den <see cref="T:System.Windows.Input.RoutedCommand" /> für das aktuelle Befehlsziel aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die eigentliche Logik, die ausgeführt wird die <xref:System.Windows.Input.RoutedCommand> ist nicht Bestandteil der <xref:System.Windows.Input.RoutedCommand.Execute%2A> Methoden.  <xref:System.Windows.Input.RoutedCommand.Execute%2A> Löst das <xref:System.Windows.Input.CommandManager.PreviewExecuted> und <xref:System.Windows.Input.CommandManager.Executed> -Ereignisse, die Tunnel und Blasendiagramme über das Element Struktur sucht ein Objekt mit einem <xref:System.Windows.Input.CommandBinding>.  Wenn eine <xref:System.Windows.Input.CommandBinding> für diesen <xref:System.Windows.Input.RoutedCommand> gefunden wird, und klicken Sie dann die <xref:System.Windows.Input.ExecutedRoutedEventHandler> angefügt <xref:System.Windows.Input.CommandBinding> aufgerufen wird.  Diese Handler stellen die Programmierlogik, die führt die <xref:System.Windows.Input.RoutedCommand>.  
  
 Die <xref:System.Windows.Input.CommandManager.PreviewExecuted> und <xref:System.Windows.Input.CommandManager.Executed> Ereignisse werden ausgelöst, auf die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  Wenn die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> nicht festgelegt ist, auf die <xref:System.Windows.Input.ICommandSource>, <xref:System.Windows.Input.CommandManager.PreviewExecuted> und <xref:System.Windows.Input.CommandManager.Executed> Ereignisse werden ausgelöst, auf das Element mit dem Tastaturfokus.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine benutzerdefinierte Implementierung von <xref:System.Windows.Input.ICommandSource> Beispiel.  
  
 `this.Command` In diesem Beispiel befindet sich die Befehlseigenschaft auf die <xref:System.Windows.Input.ICommandSource>.  Wenn der Befehl nicht null ist, wird der Befehl zum umgewandelt eine <xref:System.Windows.Input.RoutedCommand>.  Wird jedoch eine <xref:System.Windows.Input.RoutedCommand>, und klicken Sie dann die <xref:System.Windows.Input.RoutedCommand.Execute%2A> Methode wird aufgerufen, und übergeben der <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> und die <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  Ist der Befehl keine <xref:System.Windows.Input.RoutedCommand>, der Umwandlung in einen <xref:System.Windows.Input.ICommand> und die <xref:System.Windows.Input.ICommand.Execute%2A> Methode wird aufgerufen, und übergeben der <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> ist kein <see cref="T:System.Windows.UIElement" /> und keine <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung von <see cref="T:System.Windows.Input.InputGesture" />-Objekten ab, die mit diesem Befehl verknüpft sind.</summary>
        <value>Die Eingabeaktionen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie das Hinzufügen eines neuen <xref:System.Windows.Input.MouseGesture> zu einem <xref:System.Windows.Input.RoutedCommand>.  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Befehls ab.</summary>
        <value>Der Name des Befehls.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft kann verwendet werden, beim Verweisen auf eine <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ ab, der für den Befehl registriert wird.</summary>
        <value>Der Typ des Befehlsbesitzers.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Vom Befehl verwendete Daten.  Wenn der Befehl keine Datenübergabe erfordert, kann das Objekt auf <see langword="null" /> festgelegt werden.</param>
        <summary>Eine Beschreibung dieser Member finden Sie unter <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</summary>
        <returns>
          <see langword="true" />, wenn der Befehl ausgeführt werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Input.RoutedCommand>-Instanz in eine <xref:System.Windows.Input.ICommand>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Vom Befehl verwendete Daten.  Wenn der Befehl keine Datenübergabe erfordert, kann das Objekt auf <see langword="null" /> festgelegt werden.</param>
        <summary>Eine Beschreibung dieser Member finden Sie unter <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Input.RoutedCommand>-Instanz in eine <xref:System.Windows.Input.ICommand>-Schnittstelle umgewandelt wird.  
  
   
  
## Examples  
 Siehe auch  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f7fadcdafce5ad529fb81d09c855223af16a077c" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83521869" /></Metadata><TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <TypeSignature Language="F#" Value="type RoutedCommand = class&#xA;    interface ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b22d5-101">Definiert einen Befehl, der <see cref="T:System.Windows.Input.ICommand" /> implementiert und durch die Elementstruktur weitergeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="b22d5-101">Defines a command that implements <see cref="T:System.Windows.Input.ICommand" /> and is routed through the element tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b22d5-102">Die Methoden <xref:System.Windows.Input.RoutedCommand.Execute%2A> und <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> in einem <xref:System.Windows.Input.RoutedCommand> enthalten nicht die Anwendungslogik für den Befehl, wie es bei einem typischen <xref:System.Windows.Input.ICommand>der Fall ist. stattdessen werden diese Methoden Ereignisse auslassen, die die Elementstruktur durchlaufen, um nach einem Objekt mit einem <xref:System.Windows.Input.CommandBinding>zu suchen.</span><span class="sxs-lookup"><span data-stu-id="b22d5-102">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="b22d5-103">Die an den <xref:System.Windows.Input.CommandBinding> angefügten Ereignishandler enthalten die Befehls Logik.</span><span class="sxs-lookup"><span data-stu-id="b22d5-103">The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.</span></span>  
  
 <span data-ttu-id="b22d5-104">Mit der <xref:System.Windows.Input.RoutedCommand.Execute%2A>-Methode werden die Ereignisse <xref:System.Windows.Input.CommandManager.PreviewExecuted> und <xref:System.Windows.Input.CommandManager.Executed> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="b22d5-104">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.</span></span>  <span data-ttu-id="b22d5-105">Mit der <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>-Methode werden die Ereignisse <xref:System.Windows.Input.CommandManager.PreviewCanExecute> und <xref:System.Windows.Input.CommandManager.CanExecute> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="b22d5-105">The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.</span></span>  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="b22d5-106">Verwendung von XAML-Attributen</span><span class="sxs-lookup"><span data-stu-id="b22d5-106">XAML Attribute Usage</span></span>  
 <span data-ttu-id="b22d5-107">\<*Object* - *Eigenschaft*= "*predefinedcommandname*"/></span><span class="sxs-lookup"><span data-stu-id="b22d5-107">\<*object* *property*="*predefinedCommandName*"/></span></span>  
  
<span data-ttu-id="b22d5-108">Oder</span><span class="sxs-lookup"><span data-stu-id="b22d5-108">-or-</span></span>
  
 <span data-ttu-id="b22d5-109">\<*Object* - *Eigenschaft*= "*predefinedclassname*. *predefinedcommandname*"/></span><span class="sxs-lookup"><span data-stu-id="b22d5-109">\<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/></span></span>  
  
<span data-ttu-id="b22d5-110">Oder</span><span class="sxs-lookup"><span data-stu-id="b22d5-110">-or-</span></span>
  
 <span data-ttu-id="b22d5-111">\<*Objekt* *Eigenschaft*= "{ *customclassname*. *customcommandname*} "/></span><span class="sxs-lookup"><span data-stu-id="b22d5-111">\<*object* *property*="{ *customClassName*.*customCommandName*}"/></span></span>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a><span data-ttu-id="b22d5-112">XAML-Werte</span><span class="sxs-lookup"><span data-stu-id="b22d5-112">XAML Values</span></span>  
 <span data-ttu-id="b22d5-113">*predefinedclassname*</span><span class="sxs-lookup"><span data-stu-id="b22d5-113">*predefinedClassName*</span></span>  
 <span data-ttu-id="b22d5-114">Eine der vordefinierten Befehls Klassen.</span><span class="sxs-lookup"><span data-stu-id="b22d5-114">One of the predefined command classes.</span></span>  
  
 <span data-ttu-id="b22d5-115">*predefinedcommandname*</span><span class="sxs-lookup"><span data-stu-id="b22d5-115">*predefinedCommandName*</span></span>  
 <span data-ttu-id="b22d5-116">Einer der vordefinierten Befehle.</span><span class="sxs-lookup"><span data-stu-id="b22d5-116">One of the predefined commands.</span></span>  
  
 <span data-ttu-id="b22d5-117">*customclassname*</span><span class="sxs-lookup"><span data-stu-id="b22d5-117">*customClassName*</span></span>  
 <span data-ttu-id="b22d5-118">Eine benutzerdefinierte Klasse, die den benutzerdefinierten Befehl enthält.</span><span class="sxs-lookup"><span data-stu-id="b22d5-118">A custom class which contains the custom command.</span></span> <span data-ttu-id="b22d5-119">Benutzerdefinierte Klassen erfordern im Allgemeinen eine `xlmns` Präfix Zuordnung. Weitere Informationen finden Sie unter [XAML-Namespaces und Namespace Zuordnung für WPF-XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="b22d5-119">Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="b22d5-120">*customcommandname*</span><span class="sxs-lookup"><span data-stu-id="b22d5-120">*customCommandName*</span></span>  
 <span data-ttu-id="b22d5-121">Ein benutzerdefinierter Befehl.</span><span class="sxs-lookup"><span data-stu-id="b22d5-121">A custom command.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b22d5-122">Initialisiert eine neue Instanz der Klasse <see cref="T:System.Windows.Input.RoutedCommand" />.</span><span class="sxs-lookup"><span data-stu-id="b22d5-122">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b22d5-123">Initialisiert eine neue Instanz der Klasse <see cref="T:System.Windows.Input.RoutedCommand" />.</span><span class="sxs-lookup"><span data-stu-id="b22d5-123">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="b22d5-124">Der deklarierte Name für die Serialisierung.</span><span class="sxs-lookup"><span data-stu-id="b22d5-124">Declared name for serialization.</span></span></param>
        <param name="ownerType"><span data-ttu-id="b22d5-125">Der Typ, der den Befehl registriert.</span><span class="sxs-lookup"><span data-stu-id="b22d5-125">The type which is registering the command.</span></span></param>
        <summary><span data-ttu-id="b22d5-126">Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.RoutedCommand" />-Klasse mit dem angegebenen Namen und Besitzertyp.</span><span class="sxs-lookup"><span data-stu-id="b22d5-126">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name and owner type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b22d5-127"><paramref name="name" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="b22d5-127"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b22d5-128"><paramref name="ownerType" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="b22d5-128"><paramref name="ownerType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type * System.Windows.Input.InputGestureCollection -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType, inputGestures)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="b22d5-129">Der deklarierte Name für die Serialisierung.</span><span class="sxs-lookup"><span data-stu-id="b22d5-129">Declared name for serialization.</span></span></param>
        <param name="ownerType"><span data-ttu-id="b22d5-130">Der Typ, der den Befehl registriert.</span><span class="sxs-lookup"><span data-stu-id="b22d5-130">The type that is registering the command.</span></span></param>
        <param name="inputGestures"><span data-ttu-id="b22d5-131">Die Standardeingabeaktionen, die mit diesem Befehl verknüpft sind.</span><span class="sxs-lookup"><span data-stu-id="b22d5-131">Default input gestures associated with this command.</span></span></param>
        <summary><span data-ttu-id="b22d5-132">Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.RoutedCommand" />-Klasse mit dem angegebenen Namen, dem angegebenen Besitzertyp und der angegebenen Auflistung von Eingabeaktionen.</span><span class="sxs-lookup"><span data-stu-id="b22d5-132">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name, owner type, and collection of gestures.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b22d5-133"><paramref name="name" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="b22d5-133"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b22d5-134">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="b22d5-134">the length of <paramref name="name" /> is zero</span></span> 
<span data-ttu-id="b22d5-135">Oder</span><span class="sxs-lookup"><span data-stu-id="b22d5-135">-or-</span></span> 
 <span data-ttu-id="b22d5-136"><paramref name="ownerType" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="b22d5-136"><paramref name="ownerType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.CanExecute : obj * System.Windows.IInputElement -&gt; bool" Usage="routedCommand.CanExecute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="b22d5-137">Ein benutzerdefinierter Datentyp.</span><span class="sxs-lookup"><span data-stu-id="b22d5-137">A user defined data type.</span></span></param>
        <param name="target"><span data-ttu-id="b22d5-138">Das Befehlsziel.</span><span class="sxs-lookup"><span data-stu-id="b22d5-138">The command target.</span></span></param>
        <summary><span data-ttu-id="b22d5-139">Ermittelt, ob dieser <see cref="T:System.Windows.Input.RoutedCommand" /> im aktuellen Zustand ausgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="b22d5-139">Determines whether this <see cref="T:System.Windows.Input.RoutedCommand" /> can execute in its current state.</span></span></summary>
        <returns><span data-ttu-id="b22d5-140"><see langword="true" />, wenn der Befehl für das aktuelle Befehlsziel ausgeführt werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b22d5-140"><see langword="true" /> if the command can execute on the current command target; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b22d5-141">Die tatsächliche Logik, die bestimmt, ob eine <xref:System.Windows.Input.RoutedCommand> für das aktuelle Befehls Ziel ausgeführt werden kann, ist nicht in den <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Methoden enthalten, sondern <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> das <xref:System.Windows.Input.CommandManager.PreviewCanExecute> und die <xref:System.Windows.Input.CommandManager.CanExecute> Ereignisse auslöst, bei denen ein Tunnel und eine Blase durch die Elementstruktur gesucht wird, die nach einem-Objekt mit <xref:System.Windows.Input.CommandBinding>suchen.</span><span class="sxs-lookup"><span data-stu-id="b22d5-141">The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="b22d5-142">Wenn eine <xref:System.Windows.Input.CommandBinding> für diese <xref:System.Windows.Input.RoutedCommand> gefunden wird, wird die an <xref:System.Windows.Input.CommandBinding> angefügte <xref:System.Windows.Input.CanExecuteRoutedEventHandler> aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="b22d5-142">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="b22d5-143">Diese Handler stellen die Programmierlogik bereit, um zu bestimmen, ob die <xref:System.Windows.Input.RoutedCommand> ausgeführt werden kann oder nicht.</span><span class="sxs-lookup"><span data-stu-id="b22d5-143">These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.</span></span>  
  
 <span data-ttu-id="b22d5-144">Die <xref:System.Windows.Input.CommandManager.PreviewCanExecute>-und <xref:System.Windows.Input.CommandManager.PreviewExecuted> Ereignisse werden auf dem <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="b22d5-144">The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="b22d5-145">Wenn die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> für die <xref:System.Windows.Input.ICommandSource>nicht festgelegt ist, werden die Ereignisse <xref:System.Windows.Input.CommandManager.PreviewCanExecute> und <xref:System.Windows.Input.CommandManager.CanExecute> für das Element mit dem Tastaturfokus ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="b22d5-145">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b22d5-146">Das folgende Beispiel ist ein <xref:System.Windows.Input.ICommand.CanExecuteChanged> Ereignishandler aus einer benutzerdefinierten Implementierung von <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="b22d5-146">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="b22d5-147">`this.Command` in diesem Beispiel ist die Eigenschaft <xref:System.Windows.Input.ICommandSource.Command%2A> in der <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="b22d5-147">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="b22d5-148">Wenn der Befehl nicht `null`ist, wird der Befehl in eine <xref:System.Windows.Input.RoutedCommand>umgewandelt.</span><span class="sxs-lookup"><span data-stu-id="b22d5-148">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="b22d5-149">Wenn der Befehl ein <xref:System.Windows.Input.RoutedCommand>ist, wird die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>-Methode aufgerufen, wobei die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> und die <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="b22d5-149">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="b22d5-150">Wenn der Befehl kein <xref:System.Windows.Input.RoutedCommand>ist, wird er in einen <xref:System.Windows.Input.ICommand> umgewandelt, und die <xref:System.Windows.Input.ICommand.CanExecute%2A>-Methode wird als übergeben der <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="b22d5-150">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="b22d5-151">Wenn die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>-Methode `true`zurückgibt, ist das Steuerelement aktiviert. Andernfalls ist das Steuerelement deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="b22d5-151">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disable.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b22d5-152"><paramref name="target" /> ist kein <see cref="T:System.Windows.UIElement" /> und keine <see cref="T:System.Windows.ContentElement" />.</span><span class="sxs-lookup"><span data-stu-id="b22d5-152"><paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberSignature Language="F#" Value="member this.CanExecuteChanged : EventHandler " Usage="member this.CanExecuteChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Input.ICommand.CanExecuteChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b22d5-153">Tritt ein, wenn vom Befehl-Manager Änderungen an der Befehlsquelle erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="b22d5-153">Occurs when changes to the command source are detected by the command manager.</span></span> <span data-ttu-id="b22d5-154">Diese Änderungen beeinflussen die Ausführung des Befehls für das aktuelle Befehlsziel.</span><span class="sxs-lookup"><span data-stu-id="b22d5-154">These changes often affect whether the command should execute on the current command target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b22d5-155">Der <xref:System.Windows.Input.RoutedCommand> lauscht auf das <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis, das vom <xref:System.Windows.Input.CommandManager>ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="b22d5-155">The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>.</span></span> <span data-ttu-id="b22d5-156">Das <xref:System.Windows.Input.CommandManager.RequerySuggested> Ereignis wird immer dann ausgelöst, wenn Bedingungen erfüllt sind, die möglicherweise ändern, ob der Befehl ausgeführt werden soll, z. b. eine Änderung im Tastaturfokus.</span><span class="sxs-lookup"><span data-stu-id="b22d5-156">The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.</span></span>  <span data-ttu-id="b22d5-157">Wenn der Befehl das <xref:System.Windows.Input.CommandManager.RequerySuggested>-Ereignis empfängt, löst es das <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged>-Ereignis aus.</span><span class="sxs-lookup"><span data-stu-id="b22d5-157">When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  <span data-ttu-id="b22d5-158">Im allgemeinen lauscht die Befehls Quelle auf dieses Ereignis und fragt die <xref:System.Windows.Input.RoutedCommand> mithilfe der <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>-Methode ab.</span><span class="sxs-lookup"><span data-stu-id="b22d5-158">Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.</span></span>  <span data-ttu-id="b22d5-159">Die meisten Befehls Quellen deaktivieren sich selbst, wenn der Befehl nicht ausgeführt werden kann, sondern als Teil der Befehls Bindung.</span><span class="sxs-lookup"><span data-stu-id="b22d5-159">Most command sources will disable themselves if the command cannot be executed, as part of their command binding.</span></span>  <span data-ttu-id="b22d5-160">Dies ist beispielsweise der Fall, wenn ein <xref:System.Windows.Controls.MenuItem> abgeblendet wird, wenn der Befehl nicht ausgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="b22d5-160">An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.</span></span>  
  
 <span data-ttu-id="b22d5-161">In einigen Situationen ist die <xref:System.Windows.Input.CommandManager> nicht auf eine Änderung der Bedingungen aufmerksam, durch die die Ausführungsfähigkeit eines Befehls geändert wird.</span><span class="sxs-lookup"><span data-stu-id="b22d5-161">In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.</span></span>  <span data-ttu-id="b22d5-162">In diesen Fällen können Sie erzwingen, dass der <xref:System.Windows.Input.CommandManager> das <xref:System.Windows.Input.CommandManager.RequerySuggested>-Ereignis auslöst, indem Sie die <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>-Methode aufrufen. Dies bewirkt wiederum, dass die <xref:System.Windows.Input.RoutedCommand> das <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> Ereignis auslöst.</span><span class="sxs-lookup"><span data-stu-id="b22d5-162">In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b22d5-163">Das folgende Beispiel ist ein <xref:System.Windows.Input.ICommand.CanExecuteChanged> Ereignishandler aus einer benutzerdefinierten Implementierung von <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="b22d5-163">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="b22d5-164">`this.Command` in diesem Beispiel ist die Eigenschaft <xref:System.Windows.Input.ICommandSource.Command%2A> in der <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="b22d5-164">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="b22d5-165">Wenn der Befehl nicht `null`ist, wird der Befehl in eine <xref:System.Windows.Input.RoutedCommand>umgewandelt.</span><span class="sxs-lookup"><span data-stu-id="b22d5-165">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="b22d5-166">Wenn der Befehl ein <xref:System.Windows.Input.RoutedCommand>ist, wird die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>-Methode aufgerufen, wobei die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> und die <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="b22d5-166">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="b22d5-167">Wenn der Befehl kein <xref:System.Windows.Input.RoutedCommand>ist, wird er in einen <xref:System.Windows.Input.ICommand> umgewandelt, und die <xref:System.Windows.Input.ICommand.CanExecute%2A>-Methode wird als übergeben der <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="b22d5-167">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="b22d5-168">Wenn die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>-Methode `true`zurückgibt, ist das Steuerelement aktiviert. Andernfalls ist das Steuerelement deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="b22d5-168">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.Execute : obj * System.Windows.IInputElement -&gt; unit" Usage="routedCommand.Execute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="b22d5-169">Der benutzerdefinierte Parameter zur Übergabe an den Handler.</span><span class="sxs-lookup"><span data-stu-id="b22d5-169">User defined parameter to be passed to the handler.</span></span></param>
        <param name="target"><span data-ttu-id="b22d5-170">Das Element, ab dem nach Befehlshandlern gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="b22d5-170">Element at which to begin looking for command handlers.</span></span></param>
        <summary><span data-ttu-id="b22d5-171">Führt den <see cref="T:System.Windows.Input.RoutedCommand" /> für das aktuelle Befehlsziel aus.</span><span class="sxs-lookup"><span data-stu-id="b22d5-171">Executes the <see cref="T:System.Windows.Input.RoutedCommand" /> on the current command target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b22d5-172">Die tatsächliche Logik, die die <xref:System.Windows.Input.RoutedCommand> ausführt, ist nicht in den <xref:System.Windows.Input.RoutedCommand.Execute%2A>-Methoden enthalten.</span><span class="sxs-lookup"><span data-stu-id="b22d5-172">The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.</span></span>  <span data-ttu-id="b22d5-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> löst die Ereignisse <xref:System.Windows.Input.CommandManager.PreviewExecuted> und <xref:System.Windows.Input.CommandManager.Executed> aus, bei denen ein Tunnel und eine Blase durch die Elementstruktur durchsucht wird, die nach einem Objekt mit einem <xref:System.Windows.Input.CommandBinding>sucht.</span><span class="sxs-lookup"><span data-stu-id="b22d5-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="b22d5-174">Wenn eine <xref:System.Windows.Input.CommandBinding> für diese <xref:System.Windows.Input.RoutedCommand> gefunden wird, wird die an <xref:System.Windows.Input.CommandBinding> angefügte <xref:System.Windows.Input.ExecutedRoutedEventHandler> aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="b22d5-174">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="b22d5-175">Diese Handler stellen die Programmierlogik bereit, die die <xref:System.Windows.Input.RoutedCommand>ausführt.</span><span class="sxs-lookup"><span data-stu-id="b22d5-175">These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 <span data-ttu-id="b22d5-176">Die <xref:System.Windows.Input.CommandManager.PreviewExecuted>-und <xref:System.Windows.Input.CommandManager.Executed> Ereignisse werden auf dem <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="b22d5-176">The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="b22d5-177">Wenn die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> für die <xref:System.Windows.Input.ICommandSource>nicht festgelegt ist, werden die Ereignisse <xref:System.Windows.Input.CommandManager.PreviewExecuted> und <xref:System.Windows.Input.CommandManager.Executed> für das Element mit dem Tastaturfokus ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="b22d5-177">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b22d5-178">Das folgende Beispiel basiert auf einer benutzerdefinierten Implementierung von <xref:System.Windows.Input.ICommandSource>-Beispiel.</span><span class="sxs-lookup"><span data-stu-id="b22d5-178">The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.</span></span>  
  
 <span data-ttu-id="b22d5-179">`this.Command` in diesem Beispiel ist die Befehls Eigenschaft für die <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="b22d5-179">`this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="b22d5-180">Wenn der Befehl nicht NULL ist, wird der Befehl in eine <xref:System.Windows.Input.RoutedCommand>umgewandelt.</span><span class="sxs-lookup"><span data-stu-id="b22d5-180">If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="b22d5-181">Wenn es sich um einen <xref:System.Windows.Input.RoutedCommand>handelt, wird die <xref:System.Windows.Input.RoutedCommand.Execute%2A>-Methode aufgerufen, wobei die <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> und die <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="b22d5-181">If it is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="b22d5-182">Wenn der Befehl keine <xref:System.Windows.Input.RoutedCommand>ist, wird er in eine <xref:System.Windows.Input.ICommand> umgewandelt, und die <xref:System.Windows.Input.ICommand.Execute%2A>-Methode wird als übergeben der <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="b22d5-182">If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b22d5-183"><paramref name="target" /> ist kein <see cref="T:System.Windows.UIElement" /> und keine <see cref="T:System.Windows.ContentElement" />.</span><span class="sxs-lookup"><span data-stu-id="b22d5-183"><paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputGestures : System.Windows.Input.InputGestureCollection" Usage="System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b22d5-184">Ruft die Auflistung von <see cref="T:System.Windows.Input.InputGesture" />-Objekten ab, die mit diesem Befehl verknüpft sind.</span><span class="sxs-lookup"><span data-stu-id="b22d5-184">Gets the collection of <see cref="T:System.Windows.Input.InputGesture" /> objects that are associated with this command.</span></span></summary>
        <value><span data-ttu-id="b22d5-185">Die Eingabeaktionen.</span><span class="sxs-lookup"><span data-stu-id="b22d5-185">The input gestures.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b22d5-186">Im folgenden Beispiel wird gezeigt, wie einer <xref:System.Windows.Input.RoutedCommand>ein neuer <xref:System.Windows.Input.MouseGesture> hinzugefügt wird.</span><span class="sxs-lookup"><span data-stu-id="b22d5-186">The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Input.RoutedCommand.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b22d5-187">Ruft den Namen des Befehls ab.</span><span class="sxs-lookup"><span data-stu-id="b22d5-187">Gets the name of the command.</span></span></summary>
        <value><span data-ttu-id="b22d5-188">Der Name des Befehls.</span><span class="sxs-lookup"><span data-stu-id="b22d5-188">The name of the command.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b22d5-189">Diese Eigenschaft kann verwendet werden, wenn auf eine <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="b22d5-189">This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b22d5-190">Ruft den Typ ab, der für den Befehl registriert wird.</span><span class="sxs-lookup"><span data-stu-id="b22d5-190">Gets the type that is registered with the command.</span></span></summary>
        <value><span data-ttu-id="b22d5-191">Der Typ des Befehlsbesitzers.</span><span class="sxs-lookup"><span data-stu-id="b22d5-191">The type of the command owner.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Input.ICommand.CanExecute : obj -&gt; bool&#xA;override this.System.Windows.Input.ICommand.CanExecute : obj -&gt; bool" Usage="routedCommand.System.Windows.Input.ICommand.CanExecute parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.CanExecute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="b22d5-192">Vom Befehl verwendete Daten.</span><span class="sxs-lookup"><span data-stu-id="b22d5-192">Data used by the command.</span></span>  <span data-ttu-id="b22d5-193">Wenn der Befehl keine Datenübergabe erfordert, kann das Objekt auf <see langword="null" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="b22d5-193">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b22d5-194">Eine Beschreibung dieser Member finden Sie unter <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="b22d5-194">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span></span></summary>
        <returns><span data-ttu-id="b22d5-195"><see langword="true" />, wenn der Befehl ausgeführt werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b22d5-195"><see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b22d5-196">Dieser Member ist eine explizite Schnittstellen-Memberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="b22d5-196">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b22d5-197">Er kann nur verwendet werden, wenn die <xref:System.Windows.Input.RoutedCommand>-Instanz in eine <xref:System.Windows.Input.ICommand>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="b22d5-197">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Input.ICommand.Execute : obj -&gt; unit&#xA;override this.System.Windows.Input.ICommand.Execute : obj -&gt; unit" Usage="routedCommand.System.Windows.Input.ICommand.Execute parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.Execute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="b22d5-198">Vom Befehl verwendete Daten.</span><span class="sxs-lookup"><span data-stu-id="b22d5-198">Data used by the command.</span></span>  <span data-ttu-id="b22d5-199">Wenn der Befehl keine Datenübergabe erfordert, kann das Objekt auf <see langword="null" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="b22d5-199">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b22d5-200">Eine Beschreibung dieser Member finden Sie unter <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="b22d5-200">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b22d5-201">Dieser Member ist eine explizite Schnittstellen-Memberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="b22d5-201">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b22d5-202">Er kann nur verwendet werden, wenn die <xref:System.Windows.Input.RoutedCommand>-Instanz in eine <xref:System.Windows.Input.ICommand>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="b22d5-202">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b22d5-203">Weitere Informationen</span><span class="sxs-lookup"><span data-stu-id="b22d5-203">See Also</span></span>  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

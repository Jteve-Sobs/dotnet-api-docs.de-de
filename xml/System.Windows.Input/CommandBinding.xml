<Type Name="CommandBinding" FullName="System.Windows.Input.CommandBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0a64e994304d3f5d70263b6e61d8ae74e12edaec" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73399819" /></Metadata><TypeSignature Language="C#" Value="public class CommandBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandBinding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CommandBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class CommandBinding" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandBinding" />
  <TypeSignature Language="F#" Value="type CommandBinding = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Bindet einen <see cref="T:System.Windows.Input.RoutedCommand" /> an die Ereignishandler, die den Befehl implementieren.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Input.CommandBinding> ordnet dem <xref:System.Windows.Input.CommandBinding.PreviewExecuted>einen Befehl /<xref:System.Windows.Input.CommandBinding.Executed> und <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/Ereignisse zu, die den Status des Befehls implementieren und bestimmen.<xref:System.Windows.Input.CommandBinding.CanExecute>  
  
 Wenn die <xref:System.Windows.Input.RoutedCommand.Execute%2A>-oder <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>-Methode einer <xref:System.Windows.Input.RoutedCommand> aufgerufen wird, werden die <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> oder <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/-Ereignisse für das Befehls Ziel ausgelöst.<xref:System.Windows.Input.CommandBinding.CanExecute>  Wenn das Befehls Ziel über eine <xref:System.Windows.Input.CommandBinding> für den Befehl verfügt, werden die entsprechenden Handler aufgerufen.  Wenn das Befehls Ziel keine <xref:System.Windows.Input.CommandBinding> für den Befehl aufweist, werden die Ereignisse durch die Elementstruktur weitergeleitet, bis ein Element mit <xref:System.Windows.Input.CommandBinding> gefunden wird.  
  
 Eine <xref:System.Windows.Input.CommandBinding> kann nur mit einer <xref:System.Windows.Input.ICommand> verwendet werden, bei der es sich nicht um eine <xref:System.Windows.Input.RoutedCommand>handelt.  Dies liegt daran, dass ein <xref:System.Windows.Input.CommandBinding> den Befehl an die <xref:System.Windows.Input.ExecutedRoutedEventHandler> und die <xref:System.Windows.Input.CanExecuteRoutedEventHandler> bindet, die auf das <xref:System.Windows.Input.CommandManager.Executed>-und <xref:System.Windows.Input.CommandManager.CanExecute> Routing Ereignisse lauschen, die ausgelöst werden, wenn die <xref:System.Windows.Input.RoutedCommand.Execute%2A>-Methode und <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>-Methode der <xref:System.Windows.Input.RoutedCommand> aufgerufen werden.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.CommandBinding" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.CommandBinding" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding command" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
      </Parameters>
      <Docs>
        <param name="command">Der Befehl, auf dem der neue <see cref="T:System.Windows.Input.RoutedCommand" /> basieren soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.CommandBinding" />-Klasse, indem der angegebene <see cref="T:System.Windows.Input.ICommand" /> verwendet wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand * System.Windows.Input.ExecutedRoutedEventHandler -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding (command, executed)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command">Der Befehl, auf dem der neue <see cref="T:System.Windows.Input.RoutedCommand" /> basieren soll.</param>
        <param name="executed">Der Handler für das <see cref="E:System.Windows.Input.CommandBinding.Executed" />-Ereignis für den neuen <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.CommandBinding" />-Klasse mit dem angegebenen <see cref="T:System.Windows.Input.ICommand" /> und dem angegebenen <see cref="E:System.Windows.Input.CommandBinding.Executed" />-Ereignishandler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed, class System.Windows.Input.CanExecuteRoutedEventHandler canExecute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler, canExecute As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed, System::Windows::Input::CanExecuteRoutedEventHandler ^ canExecute);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand * System.Windows.Input.ExecutedRoutedEventHandler * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding (command, executed, canExecute)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
        <Parameter Name="canExecute" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command">Der Befehl, auf dem der neue <see cref="T:System.Windows.Input.RoutedCommand" /> basieren soll.</param>
        <param name="executed">Der Handler für das <see cref="E:System.Windows.Input.CommandBinding.Executed" />-Ereignis für den neuen <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
        <param name="canExecute">Der Handler für das <see cref="E:System.Windows.Input.CommandBinding.CanExecute" />-Ereignis für den neuen <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.CommandBinding" />-Klasse mit dem angegebenen <see cref="T:System.Windows.Input.ICommand" /> sowie dem angegebenen <see cref="E:System.Windows.Input.CommandBinding.Executed" />-Ereignishandler und dem angegebenen <see cref="E:System.Windows.Input.CommandBinding.CanExecute" />-Ereignishandler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler CanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecute As CanExecuteRoutedEventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ CanExecute;" />
      <MemberSignature Language="F#" Value="member this.CanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " Usage="member this.CanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event CanExecute As CanExecuteRoutedEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der dieser <see cref="T:System.Windows.Input.CommandBinding" /> zugeordnete Befehl eine Überprüfung initiiert, um zu ermitteln, ob der Befehl für das Befehlsziel ausgeführt werden kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>-Methode in einem <xref:System.Windows.Input.RoutedCommand> aufgerufen wird, wird das <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>-Ereignis für das Befehls Ziel ausgelöst.  Wenn das Ereignis nicht behandelt wird, wird das <xref:System.Windows.Input.CommandBinding.CanExecute>-Ereignis ausgelöst.  Wenn das Befehls Ziel eine <xref:System.Windows.Input.CommandBinding> für den Befehl aufweist, wird der <xref:System.Windows.Input.CommandBinding.CanExecute> Handler für dieses <xref:System.Windows.Input.CommandBinding> aufgerufen.  Wenn das Befehls Ziel nicht über eine <xref:System.Windows.Input.CommandBinding> für den Befehl verfügt, führt das <xref:System.Windows.Input.CommandBinding.CanExecute>-Ereignis eine Blasen Eingabe der Elementstruktur aus, die nach einem Element mit einem <xref:System.Windows.Input.CommandBinding>, das dem Befehl zugeordnet ist, sucht.  
  
<a name="routedEventInfo_CanExecute"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  
|Routing Strategie|Blasen|  
|delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   Das entsprechende tunnelingereignis ist <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Windows.Input.CommandBinding> erstellt, die dem <xref:System.Windows.Input.ApplicationCommands.Open%2A> Befehl eine <xref:System.Windows.Input.ExecutedRoutedEventHandler> und einen <xref:System.Windows.Input.CanExecuteRoutedEventArgs> Handler zuordnet.  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 Das folgende Beispiel zeigt die <xref:System.Windows.Input.CanExecuteRoutedEventHandler>, mit der <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> auf `true`festgelegt wird.  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CommandBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.CommandBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Windows.Input.ICommand" /> ab, die diesem <see cref="T:System.Windows.Input.CommandBinding" /> zugeordnet sind, oder legt diese fest.</summary>
        <value>Der dieser Bindung zugeordnete Befehl.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Windows.Input.CommandBinding> erstellt, die dem <xref:System.Windows.Input.ApplicationCommands.Open%2A> Befehl eine <xref:System.Windows.Input.ExecutedRoutedEventHandler> und einen <xref:System.Windows.Input.CanExecuteRoutedEventArgs> Handler zuordnet.  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 Das folgende Beispiel zeigt die <xref:System.Windows.Input.CanExecuteRoutedEventHandler>, mit der <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> auf `true`festgelegt wird.  
  
 [!code-csharp[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 Das folgende Beispiel zeigt die <xref:System.Windows.Input.ExecutedRoutedEventHandler>, die eine <xref:System.Windows.MessageBox> erstellt, wenn der Befehl ausgeführt wird.  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Executed">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler Executed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler Executed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.Executed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Executed As ExecutedRoutedEventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ Executed;" />
      <MemberSignature Language="F#" Value="member this.Executed : System.Windows.Input.ExecutedRoutedEventHandler " Usage="member this.Executed : System.Windows.Input.ExecutedRoutedEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event Executed As ExecutedRoutedEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Befehl, der dieser <see cref="T:System.Windows.Input.CommandBinding" /> zugeordnet ist, ausgeführt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine <xref:System.Windows.Input.RoutedCommand> ausgeführt wird, löst Sie das <xref:System.Windows.Input.CommandBinding.PreviewExecuted>-Ereignis für das Befehls Ziel aus.  Wenn das <xref:System.Windows.Input.CommandBinding.PreviewExecuted>-Ereignis nicht behandelt wird, wird das <xref:System.Windows.Input.CommandBinding.Executed>-Ereignis für das Befehls Ziel ausgelöst.  Wenn das Befehls Ziel eine <xref:System.Windows.Input.CommandBinding> für den jeweiligen Befehl aufweist, wird der <xref:System.Windows.Input.CommandBinding.Executed> Handler für dieses <xref:System.Windows.Input.CommandBinding> aufgerufen.  Wenn das Befehls Ziel keine <xref:System.Windows.Input.CommandBinding> für diesen bestimmten Befehl aufweist, wird das <xref:System.Windows.Input.CommandBinding.Executed>-Ereignis die Elementstruktur aufblasen, die nach einem Element sucht, dem ein <xref:System.Windows.Input.CommandBinding> zugeordnet ist, das mit dem Befehl verknüpft ist.  Wenn ein <xref:System.Windows.Input.CommandBinding> nicht gefunden wird, wird der Befehl nicht behandelt.  
  
<a name="routedEventInfo_Executed"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  
|Routing Strategie|Blasen|  
|delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   Das entsprechende tunnelingereignis ist <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Windows.Input.CommandBinding> erstellt, die dem <xref:System.Windows.Input.ApplicationCommands.Open%2A> Befehl eine <xref:System.Windows.Input.ExecutedRoutedEventHandler> und einen <xref:System.Windows.Input.CanExecuteRoutedEventArgs> Handler zuordnet.  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 Das folgende Beispiel zeigt die <xref:System.Windows.Input.ExecutedRoutedEventHandler>, die eine <xref:System.Windows.MessageBox> erstellt, wenn der Befehl ausgeführt wird.  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewCanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewCanExecute As CanExecuteRoutedEventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ PreviewCanExecute;" />
      <MemberSignature Language="F#" Value="member this.PreviewCanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " Usage="member this.PreviewCanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewCanExecute As CanExecuteRoutedEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der dieser <see cref="T:System.Windows.Input.CommandBinding" /> zugeordnete Befehl eine Überprüfung initiiert, um zu ermitteln, ob der Befehl für das aktuelle Befehlsziel ausgeführt werden kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>-Methode für eine <xref:System.Windows.Input.RoutedCommand> aufgerufen wird, wird das <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>-Ereignis für das Befehls Ziel ausgelöst, wenn das Befehls Ziel über eine <xref:System.Windows.Input.CommandBinding> für den Befehl verfügt. Anschließend wird der <xref:System.Windows.Input.CommandBinding.CanExecute> Handler für diese <xref:System.Windows.Input.CommandBinding> aufgerufen.  Wenn das Befehls Ziel nicht über eine <xref:System.Windows.Input.CommandBinding> für den Befehl verfügt, führt das <xref:System.Windows.Input.CommandBinding.CanExecute>-Ereignis eine Blasen Eingabe der Elementstruktur aus, die nach einem Element mit einem <xref:System.Windows.Input.CommandBinding>, das dem Befehl zugeordnet ist, sucht.  Wenn das Ereignis nicht behandelt wird, wird das <xref:System.Windows.Input.CommandBinding.CanExecute>-Ereignis ausgelöst.  
  
<a name="routedEventInfo_PreviewCanExecute"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  
|Routing Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   Das entsprechende Bubblingereignis ist <xref:System.Windows.Input.CommandBinding.CanExecute>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewExecuted">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewExecuted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewExecuted As ExecutedRoutedEventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ PreviewExecuted;" />
      <MemberSignature Language="F#" Value="member this.PreviewExecuted : System.Windows.Input.ExecutedRoutedEventHandler " Usage="member this.PreviewExecuted : System.Windows.Input.ExecutedRoutedEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewExecuted As ExecutedRoutedEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Befehl, der dieser <see cref="T:System.Windows.Input.CommandBinding" /> zugeordnet ist, ausgeführt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine <xref:System.Windows.Input.RoutedCommand> ausgeführt wird, löst Sie das <xref:System.Windows.Input.CommandBinding.PreviewExecuted>-Ereignis für das Befehls Ziel aus.  Wenn das Befehls Ziel über eine <xref:System.Windows.Input.CommandBinding> für den Befehl verfügt, wird der <xref:System.Windows.Input.CommandBinding.PreviewExecuted> Handler für diese <xref:System.Windows.Input.CommandBinding> aufgerufen.  Wenn das Befehls Ziel nicht über eine <xref:System.Windows.Input.CommandBinding> für den Befehl verfügt, wird das <xref:System.Windows.Input.CommandBinding.PreviewExecuted>-Ereignis in der Elementstruktur nach einem Element mit einem <xref:System.Windows.Input.CommandBinding>, das dem Befehl zugeordnet ist, nach unten Tunneln.  Wenn das Vorschau Ereignis nicht behandelt wird, wird das <xref:System.Windows.Input.CommandBinding.Executed>-Ereignis für das Befehls Ziel ausgelöst.  
  
<a name="routedEventInfo_PreviewExecuted"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  
|Routing Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   Das entsprechende Bubblingereignis ist <xref:System.Windows.Input.CommandBinding.Executed>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="KeyGesture" FullName="System.Windows.Input.KeyGesture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bad0a28c8c2e6be4a282aba0b5f688860f65741c" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48677071" /></Metadata><TypeSignature Language="C#" Value="public class KeyGesture : System.Windows.Input.InputGesture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyGesture extends System.Windows.Input.InputGesture" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyGesture" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyGesture&#xA;Inherits InputGesture" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyGesture : System::Windows::Input::InputGesture" />
  <TypeSignature Language="F#" Value="type KeyGesture = class&#xA;    inherit InputGesture" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputGesture</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert eine Tastenkombination, die verwendet werden kann, um einen Befehl aufzurufen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen eine <xref:System.Windows.Input.KeyGesture> muss mit einem oder mehreren zugehörigen <xref:System.Windows.Input.ModifierKeys>. Die Ausnahmen von dieser Regel werden die Funktionstasten und Zehnertastatur, die möglicherweise eine gültige <xref:System.Windows.Input.KeyGesture> selbst. Sie können z. B. Erstellen einer <xref:System.Windows.Input.KeyGesture> verwenden nur die Taste F12, aber verwenden Sie das "X" im Schlüssel eine <xref:System.Windows.Input.KeyGesture> muss es mit einer Modifizierertaste kombiniert werden.  
  
 Im Allgemeinen können Sie  
  
 Können Sie eine <xref:System.Windows.Input.KeyBinding> binden ein <xref:System.Windows.Input.KeyGesture> auf eine <xref:System.Windows.Input.ICommand>, sodass der Befehl aufgerufen wird bei der <xref:System.Windows.Input.KeyGesture> tritt auf.  
  
 Für <xref:System.Windows.Input.KeyGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Verwendungen, die Eigenschaft, die in der Regel auf [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ist <xref:System.Windows.Input.KeyBinding.Gesture%2A>, in Fällen, in dem die Tastenkombination, sowohl ein standard-Schlüssel und Modifizierertaste darstellt. Sie können auch Festlegen der <xref:System.Windows.Input.KeyBinding.Gesture%2A> Eigenschaft nur einer Steuertaste oder nur einen Modifizierer Tastenkombination. Allerdings ist es eher üblich, dass das Festlegen der <xref:System.Windows.Input.KeyBinding.Key%2A> Eigenschaft, wenn die beabsichtigte befehlsbindung einer Steuertaste mit keine Modifizierer ist oder <xref:System.Windows.Input.KeyBinding.Modifiers%2A> Zusatztasten nur ist der beabsichtigte befehlsbindung.  
  
<a name="xamlAttributeUsage_KeyGesture"></a>   
## <a name="xaml-attribute-usage"></a>Verwendung von XAML-Attributen  
  
```  
<object property="oneOrMoreModifierKeys+key"/>  
- or -  
<object property="functionKey"/>  
```  
  
<a name="xamlValues_KeyGesture"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 `functionKey`  
 <xref:System.Windows.Input.Key>  
  
 Eine einzelnen Schlüsselwert, der die Funktionstasten (F1-12) oder die Zehnertastatur sein muss.  
  
 `oneOrMoreModifierKeys`  
 Eine oder mehrere Modifizierertasten, die von definiert die <xref:System.Windows.Input.ModifierKeys> Enumeration, die ein "+"-Zeichen als Trennzeichen.  
  
 `key`  
 <xref:System.Windows.Input.Key>  
  
 Ein einzelner Schlüssel-Wert.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie binden die <xref:System.Windows.Input.ApplicationCommands.Close%2A> Befehl eine <xref:System.Windows.Input.KeyGesture> mithilfe einer <xref:System.Windows.Input.KeyBinding>.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 Das folgende Beispiel zeigt, wie Sie mit <xref:System.Windows.Input.KeyGesture> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. Beachten Sie, dass die [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Nutzung direkt deklariert keine `<KeyGesture>` Element. Dass Objektelementverwendung nicht möglich ist, da <xref:System.Windows.Input.KeyGesture> macht einen öffentlichen Standardkonstruktor nicht verfügbar. Stattdessen die [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Datensyntax enthält die Typeconverter-Verhalten, deklarieren eine gesamte <xref:System.Windows.Input.KeyGesture> Inline als die `Gesture` Attributwert.  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.InputGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.KeyGesture" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key">Die dieser Tastenkombination zugeordnete Taste.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.KeyGesture" />-Klasse mit der angegebenen <see cref="T:System.Windows.Input.Key" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen eine <xref:System.Windows.Input.KeyGesture> muss mit einem oder mehreren zugehörigen <xref:System.Windows.Input.ModifierKeys>.  Die Ausnahmen von dieser Regel werden die Funktionstasten und Zehnertastatur, die möglicherweise eine gültige <xref:System.Windows.Input.KeyGesture> selbst.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie diesen Konstruktor verwenden, zum Erstellen einer <xref:System.Windows.Input.KeyGesture> und ordnen Sie sie einer <xref:System.Windows.Input.KeyBinding>.  Der <xref:System.Windows.Input.KeyBinding> wird dann hinzugefügt, um die <xref:System.Windows.Input.InputBindingCollection> von einer <xref:System.Windows.Window>.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithnomodifier)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithnomodifier)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="key" /> ist kein gültiger <see cref="T:System.Windows.Input.Key" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> ist kein gültiger <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="key">Die der Tastenkombination zugeordnete Taste.</param>
        <param name="modifiers">Die der Tastenkombination zugeordneten Modifizierertasten.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.KeyGesture" />-Klasse mit den angegebenen <see cref="T:System.Windows.Input.Key" /> und dem angegebenen <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen eine <xref:System.Windows.Input.KeyGesture> muss mit einem oder mehreren zugehörigen <xref:System.Windows.Input.ModifierKeys>. Die Ausnahmen von dieser Regel werden die Funktionstasten und Zehnertastatur, die möglicherweise eine gültige <xref:System.Windows.Input.KeyGesture> selbst.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie diesen Konstruktor verwenden, zum Erstellen einer <xref:System.Windows.Input.KeyGesture> und ordnen Sie sie einer <xref:System.Windows.Input.KeyBinding>. Der <xref:System.Windows.Input.KeyBinding> wird dann hinzugefügt, um die <xref:System.Windows.Input.InputBindingCollection> von einer <xref:System.Windows.Window>.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" /> ist kein gültiges <see cref="T:System.Windows.Input.ModifierKeys" />.  
  
- oder -  
 <paramref name="key" /> ist kein gültiger <see cref="T:System.Windows.Input.Key" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> und <paramref name="modifiers" /> bilden keine gültige <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers, string displayString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers, System::String ^ displayString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys * string -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers, displayString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
        <Parameter Name="displayString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Die der Tastenkombination zugeordnete Taste.</param>
        <param name="modifiers">Die der Tastenkombination zugeordneten Modifizierertasten.</param>
        <param name="displayString">Eine Zeichenfolgendarstellung des <see cref="T:System.Windows.Input.KeyGesture" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.KeyGesture" />-Klasse mit der angegebenen <see cref="T:System.Windows.Input.Key" />, <see cref="T:System.Windows.Input.ModifierKeys" /> und der Anzeigezeichenfolge.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Input.KeyGesture.DisplayString%2A> -Eigenschaftensatz auf die `displayString` Parameter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" /> ist kein gültiges <see cref="T:System.Windows.Input.ModifierKeys" />.  
  
- oder -  
 <paramref name="key" /> ist kein gültiger <see cref="T:System.Windows.Input.Key" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="displayString" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> und <paramref name="modifiers" /> bilden keine gültige <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="DisplayString">
      <MemberSignature Language="C#" Value="public string DisplayString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.DisplayString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayString : string" Usage="System.Windows.Input.KeyGesture.DisplayString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Zeichenfolgendarstellung dieser <see cref="T:System.Windows.Input.KeyGesture" /> ab.</summary>
        <value>Die Anzeigezeichenfolge für diese <see cref="T:System.Windows.Input.KeyGesture" />. Der Standardwert ist <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Zeichenfolge im Konstruktor nicht festgelegt wurde, wird eine leere Zeichenfolge zurückgegeben.  
  
 Wenn diese Eigenschaft leer ist, ist die <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> Methode gibt eine Zeichenfolge, die erstellt werden, aus der <xref:System.Windows.Input.KeyGesture.Key%2A> und <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplayStringForCulture">
      <MemberSignature Language="C#" Value="public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDisplayStringForCulture(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDisplayStringForCulture (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDisplayStringForCulture(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetDisplayStringForCulture : System.Globalization.CultureInfo -&gt; string" Usage="keyGesture.GetDisplayStringForCulture culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Die kulturspezifischen Informationen.</param>
        <summary>Gibt eine Zeichenfolge zurück, die verwendet werden kann, um die <see cref="T:System.Windows.Input.KeyGesture" /> anzuzeigen.</summary>
        <returns>Die anzuzeigende Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Anzeigezeichenfolge durch den Konstruktor festgelegt wurde, der Zeichenfolge zurückgegeben wird; Andernfalls wird eine Zeichenfolge erstellt, aus der <xref:System.Windows.Input.KeyGesture.Key%2A> und <xref:System.Windows.Input.KeyGesture.Modifiers%2A> mit alle notwendigen Konvertierungen gesteuert durch das angegebene <xref:System.Globalization.CultureInfo> Objekt.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyGesture.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Taste ab, die dieser <see cref="T:System.Windows.Input.KeyGesture" /> zugeordnet ist.</summary>
        <value>Die der Tastenkombination zugeordnete Taste.  Der Standardwert ist <see cref="F:System.Windows.Input.Key.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen eine <xref:System.Windows.Input.KeyGesture> muss mit einem oder mehreren zugehörigen <xref:System.Windows.Input.ModifierKeys>.  Die Ausnahmen von dieser Regel werden die Funktionstasten und Zehnertastatur, die möglicherweise eine gültige <xref:System.Windows.Input.KeyGesture> selbst.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Matches(object targetElement, class System.Windows.Input.InputEventArgs inputEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Matches(System::Object ^ targetElement, System::Windows::Input::InputEventArgs ^ inputEventArgs);" />
      <MemberSignature Language="F#" Value="override this.Matches : obj * System.Windows.Input.InputEventArgs -&gt; bool" Usage="keyGesture.Matches (targetElement, inputEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetElement" Type="System.Object" />
        <Parameter Name="inputEventArgs" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetElement">Das Ziel.</param>
        <param name="inputEventArgs">Die Eingabeereignisdaten, mit denen diese Tastenkombination verglichen werden soll.</param>
        <summary>Bestimmt, ob diese <see cref="T:System.Windows.Input.KeyGesture" /> der Eingabe entspricht, die dem angegebenen <see cref="T:System.Windows.Input.InputEventArgs" />-Objekt zugeordnet ist.</summary>
        <returns><see langword="true" />, wenn die Ereignisdaten dieser <see cref="T:System.Windows.Input.KeyGesture" /> entsprechen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `targetElement` kann verwendet werden, stellen eine spezifischere Entscheidung, ob ein Befehl für ein bestimmtes Element aufgerufen werden soll.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie testen, ob eine <xref:System.Windows.Input.KeyGesture> der Eingabe entspricht, verknüpft mit einer Instanz von einem <xref:System.Windows.Input.InputEventArgs>. Ein <xref:System.Windows.UIElement.KeyDown> -Ereignishandler wird erstellt, die die Ereignisdaten mit vergleicht die <xref:System.Windows.Input.KeyGesture> mithilfe der <xref:System.Windows.Input.KeyGesture.Matches%2A> Methode.  
  
 [!code-csharp[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keydownhandlerkeygesturematches)]
 [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keydownhandlerkeygesturematches)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys" Usage="System.Windows.Input.KeyGesture.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die dieser <see cref="T:System.Windows.Input.KeyGesture" /> zugeordneten Modifizierertasten ab.</summary>
        <value>Die der Tastenkombination zugeordneten Modifizierertasten. Der Standardwert ist <see cref="F:System.Windows.Input.ModifierKeys.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen eine <xref:System.Windows.Input.KeyGesture> muss mit einem oder mehreren zugehörigen <xref:System.Windows.Input.ModifierKeys>. Die Ausnahmen von dieser Regel werden die Funktionstasten und Zehnertastatur, die möglicherweise eine gültige <xref:System.Windows.Input.KeyGesture> selbst. Sie können z. B. Erstellen einer <xref:System.Windows.Input.KeyGesture> verwenden nur die Taste F12, aber verwenden Sie das "X" im Schlüssel eine <xref:System.Windows.Input.KeyGesture> muss es mit einer Modifizierertaste kombiniert werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
  </Members>
</Type>
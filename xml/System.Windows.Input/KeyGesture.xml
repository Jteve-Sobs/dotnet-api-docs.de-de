<Type Name="KeyGesture" FullName="System.Windows.Input.KeyGesture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d29cb408f471fb99a5c05ab3430d8dedb5acf5ca" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82496851" /></Metadata><TypeSignature Language="C#" Value="public class KeyGesture : System.Windows.Input.InputGesture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyGesture extends System.Windows.Input.InputGesture" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyGesture" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyGesture&#xA;Inherits InputGesture" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyGesture : System::Windows::Input::InputGesture" />
  <TypeSignature Language="F#" Value="type KeyGesture = class&#xA;    inherit InputGesture" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputGesture</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert eine Tastenkombination, die verwendet werden kann, um einen Befehl aufzurufen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen muss eine <xref:System.Windows.Input.KeyGesture> einem oder mehreren <xref:System.Windows.Input.ModifierKeys>zugeordnet werden. Die Ausnahmen für diese Regel sind die Funktionsschlüssel und die numerischen Tastatur-Schlüssel, die selbst gültige <xref:System.Windows.Input.KeyGesture> sein können. Beispielsweise können Sie eine <xref:System.Windows.Input.KeyGesture> erstellen, indem Sie nur die F12-Taste verwenden, aber um die X-Taste in einer <xref:System.Windows.Input.KeyGesture> zu verwenden, muss Sie mit einer Modifizierertaste gekoppelt werden.  
  
 Im Allgemeinen können Sie  
  
 Sie können eine <xref:System.Windows.Input.KeyBinding> verwenden, um eine <xref:System.Windows.Input.KeyGesture> an eine <xref:System.Windows.Input.ICommand>zu binden, sodass der Befehl aufgerufen wird, wenn die <xref:System.Windows.Input.KeyGesture> auftritt.  
  
 Bei <xref:System.Windows.Input.KeyGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Verwendungen ist die Eigenschaft, die in der Regel in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] festgelegt ist, <xref:System.Windows.Input.KeyBinding.Gesture%2A>, in Fällen, in denen die Geste sowohl einen Standardschlüssel als auch eine Modifizierertaste darstellt. Sie können auch festlegen, dass die <xref:System.Windows.Input.KeyBinding.Gesture%2A>-Eigenschaft nur eine Funktionstaste oder nur eine modifiziererschlüsselkombination ist. Es ist jedoch eher üblich, die <xref:System.Windows.Input.KeyBinding.Key%2A>-Eigenschaft festzulegen, wenn die beabsichtigte Befehls Bindung ein Funktionsschlüssel ohne Modifizierer ist, oder <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, wenn die beabsichtigte Befehls Bindung nur für modifiziererschlüssel vorgesehen ist.  
  
<a name="xamlAttributeUsage_KeyGesture"></a>   
## <a name="xaml-attribute-usage"></a>Verwendung von XAML-Attributen  
  
```  
<object property="oneOrMoreModifierKeys+key"/>  
- or -  
<object property="functionKey"/>  
```  
  
<a name="xamlValues_KeyGesture"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 `functionKey`  
 <xref:System.Windows.Input.Key>  
  
 Ein einzelner Schlüsselwert, bei dem es sich um einen der Funktionsschlüssel (F1-12) oder um numerische Tastatur-Schlüssel handeln muss.  
  
 `oneOrMoreModifierKeys`  
 Mindestens ein modifiziererschlüssel, der durch die <xref:System.Windows.Input.ModifierKeys>-Enumeration definiert ist, ist durch ein "+"-Zeichen getrennt.  
  
 `key`  
 <xref:System.Windows.Input.Key>  
  
 Ein einzelner Schlüsselwert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie der <xref:System.Windows.Input.ApplicationCommands.Close%2A>-Befehl mithilfe eines <xref:System.Windows.Input.KeyBinding>an eine <xref:System.Windows.Input.KeyGesture> gebunden wird.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 Im folgenden Beispiel wird gezeigt, wie <xref:System.Windows.Input.KeyGesture> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet wird. Beachten Sie, dass die [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Verwendung nicht direkt ein `<KeyGesture>`-Element deklariert. Die Verwendung des Objekt Elements ist nicht möglich, da <xref:System.Windows.Input.KeyGesture> keinen öffentlichen Parameter losen Konstruktor verfügbar macht. Stattdessen verwendet die [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Verwendung das TypeConverter-Verhalten, um eine gesamte <xref:System.Windows.Input.KeyGesture> Inline als `Gesture` Attribut Wert zu deklarieren.  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.InputGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.KeyGesture" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key">Die dieser Tastenkombination zugeordnete Taste.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.KeyGesture" />-Klasse mit dem angegebenen <see cref="T:System.Windows.Input.Key" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen muss eine <xref:System.Windows.Input.KeyGesture> einem oder mehreren <xref:System.Windows.Input.ModifierKeys>zugeordnet werden.  Die Ausnahmen für diese Regel sind die Funktionsschlüssel und die numerischen Tastatur-Schlüssel, die selbst gültige <xref:System.Windows.Input.KeyGesture> sein können.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie dieser Konstruktor verwendet wird, um eine <xref:System.Windows.Input.KeyGesture> zu erstellen und Sie einer <xref:System.Windows.Input.KeyBinding>zuzuordnen.  Der <xref:System.Windows.Input.KeyBinding> wird dann der <xref:System.Windows.Input.InputBindingCollection> eines <xref:System.Windows.Window>hinzugefügt.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithnomodifier)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithnomodifier)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="key" /> ist kein gültiger <see cref="T:System.Windows.Input.Key" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> ist kein gültiger <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Key, modifiers As ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="key">Die der Tastenkombination zugeordnete Taste.</param>
        <param name="modifiers">Die der Tastenkombination zugeordneten Modifizierertasten.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.KeyGesture" />-Klasse mit den angegebenen <see cref="T:System.Windows.Input.Key" /> und dem angegebenen <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen muss eine <xref:System.Windows.Input.KeyGesture> einem oder mehreren <xref:System.Windows.Input.ModifierKeys>zugeordnet werden. Die Ausnahmen für diese Regel sind die Funktionsschlüssel und die numerischen Tastatur-Schlüssel, die selbst gültige <xref:System.Windows.Input.KeyGesture> sein können.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie dieser Konstruktor verwendet wird, um eine <xref:System.Windows.Input.KeyGesture> zu erstellen und Sie einer <xref:System.Windows.Input.KeyBinding>zuzuordnen. Der <xref:System.Windows.Input.KeyBinding> wird dann der <xref:System.Windows.Input.InputBindingCollection> eines <xref:System.Windows.Window>hinzugefügt.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" /> ist kein gültiges <see cref="T:System.Windows.Input.ModifierKeys" />.  
  
- oder - 
 <paramref name="key" /> ist kein gültiger <see cref="T:System.Windows.Input.Key" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> und <paramref name="modifiers" /> bilden keine gültige <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers, string displayString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Key, modifiers As ModifierKeys, displayString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers, System::String ^ displayString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys * string -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers, displayString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
        <Parameter Name="displayString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Die der Tastenkombination zugeordnete Taste.</param>
        <param name="modifiers">Die der Tastenkombination zugeordneten Modifizierertasten.</param>
        <param name="displayString">Eine Zeichenfolgendarstellung von <see cref="T:System.Windows.Input.KeyGesture" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.KeyGesture" />-Klasse mit der angegebenen <see cref="T:System.Windows.Input.Key" />, <see cref="T:System.Windows.Input.ModifierKeys" /> und der Anzeigezeichenfolge.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Input.KeyGesture.DisplayString%2A>-Eigenschaft wird auf den `displayString`-Parameter festgelegt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" /> ist kein gültiges <see cref="T:System.Windows.Input.ModifierKeys" />.  
  
- oder - 
 <paramref name="key" /> ist kein gültiger <see cref="T:System.Windows.Input.Key" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="displayString" /> ist <see langword="null" /></exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> und <paramref name="modifiers" /> bilden keine gültige <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="DisplayString">
      <MemberSignature Language="C#" Value="public string DisplayString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.DisplayString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayString : string" Usage="System.Windows.Input.KeyGesture.DisplayString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Zeichenfolgendarstellung dieser <see cref="T:System.Windows.Input.KeyGesture" /> ab.</summary>
        <value>Die Anzeigezeichenfolge für diese <see cref="T:System.Windows.Input.KeyGesture" />. Standardwert: <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn keine Anzeige Zeichenfolge im Konstruktor festgelegt wurde, wird eine leere Zeichenfolge zurückgegeben.  
  
 Wenn diese Eigenschaft leer ist, gibt die <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>-Methode eine Zeichenfolge zurück, die aus dem <xref:System.Windows.Input.KeyGesture.Key%2A> und <xref:System.Windows.Input.KeyGesture.Modifiers%2A>erstellt wurde.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplayStringForCulture">
      <MemberSignature Language="C#" Value="public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDisplayStringForCulture(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDisplayStringForCulture (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDisplayStringForCulture(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetDisplayStringForCulture : System.Globalization.CultureInfo -&gt; string" Usage="keyGesture.GetDisplayStringForCulture culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Die kulturspezifischen Informationen.</param>
        <summary>Gibt eine Zeichenfolge zurück, die verwendet werden kann, um die <see cref="T:System.Windows.Input.KeyGesture" /> anzuzeigen.</summary>
        <returns>Die anzuzeigende Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Anzeige Zeichenfolge vom Konstruktor festgelegt wurde, wird diese Zeichenfolge zurückgegeben. Andernfalls wird eine Zeichenfolge aus dem <xref:System.Windows.Input.KeyGesture.Key%2A> erstellt und <xref:System.Windows.Input.KeyGesture.Modifiers%2A>, wobei alle notwendigen Konvertierungen durch das angegebene <xref:System.Globalization.CultureInfo> Objekt gesteuert werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyGesture.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Taste ab, die dieser <see cref="T:System.Windows.Input.KeyGesture" /> zugeordnet ist.</summary>
        <value>Die der Tastenkombination zugeordnete Taste.  Standardwert: <see cref="F:System.Windows.Input.Key.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen muss eine <xref:System.Windows.Input.KeyGesture> einem oder mehreren <xref:System.Windows.Input.ModifierKeys>zugeordnet werden.  Die Ausnahmen für diese Regel sind die Funktionsschlüssel und die numerischen Tastatur-Schlüssel, die selbst gültige <xref:System.Windows.Input.KeyGesture> sein können.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Matches(object targetElement, class System.Windows.Input.InputEventArgs inputEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Matches (targetElement As Object, inputEventArgs As InputEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Matches(System::Object ^ targetElement, System::Windows::Input::InputEventArgs ^ inputEventArgs);" />
      <MemberSignature Language="F#" Value="override this.Matches : obj * System.Windows.Input.InputEventArgs -&gt; bool" Usage="keyGesture.Matches (targetElement, inputEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetElement" Type="System.Object" />
        <Parameter Name="inputEventArgs" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetElement">Das Ziel.</param>
        <param name="inputEventArgs">Die Eingabeereignisdaten, mit denen diese Tastenkombination verglichen werden soll.</param>
        <summary>Bestimmt, ob diese <see cref="T:System.Windows.Input.KeyGesture" /> der Eingabe entspricht, die dem angegebenen <see cref="T:System.Windows.Input.InputEventArgs" />-Objekt zugeordnet ist.</summary>
        <returns><see langword="true" />, wenn die Ereignisdaten dieser <see cref="T:System.Windows.Input.KeyGesture" /> entsprechen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `targetElement` kann verwendet werden, um eine spezifischere Entscheidung darüber zu treffen, ob ein Befehl für ein bestimmtes Element aufgerufen werden soll.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie überprüfen können, ob eine <xref:System.Windows.Input.KeyGesture> mit der Eingabe übereinstimmt, die einer Instanz einer <xref:System.Windows.Input.InputEventArgs>zugeordnet ist. Es wird ein <xref:System.Windows.UIElement.KeyDown> Ereignishandler erstellt, der die Ereignisdaten mit dem <xref:System.Windows.Input.KeyGesture> mithilfe der <xref:System.Windows.Input.KeyGesture.Matches%2A>-Methode vergleicht.  
  
 [!code-csharp[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keydownhandlerkeygesturematches)]
 [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keydownhandlerkeygesturematches)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys" Usage="System.Windows.Input.KeyGesture.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die dieser <see cref="T:System.Windows.Input.KeyGesture" /> zugeordneten Modifizierertasten ab.</summary>
        <value>Die der Tastenkombination zugeordneten Modifizierertasten. Standardwert: <see cref="F:System.Windows.Input.ModifierKeys.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen muss eine <xref:System.Windows.Input.KeyGesture> einem oder mehreren <xref:System.Windows.Input.ModifierKeys>zugeordnet werden. Die Ausnahmen für diese Regel sind die Funktionsschlüssel und die numerischen Tastatur-Schlüssel, die selbst gültige <xref:System.Windows.Input.KeyGesture> sein können. Beispielsweise können Sie eine <xref:System.Windows.Input.KeyGesture> erstellen, indem Sie nur die F12-Taste verwenden, aber um die X-Taste in einer <xref:System.Windows.Input.KeyGesture> zu verwenden, muss Sie mit einer Modifizierertaste gekoppelt werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ManipulationInertiaStartingEventArgs" FullName="System.Windows.Input.ManipulationInertiaStartingEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b91105137e47d2230f425b5bbaaaee311d7bd88b" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82496578" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManipulationInertiaStartingEventArgs : System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManipulationInertiaStartingEventArgs extends System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ManipulationInertiaStartingEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManipulationInertiaStartingEventArgs&#xA;Inherits InputEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManipulationInertiaStartingEventArgs sealed : System::Windows::Input::InputEventArgs" />
  <TypeSignature Language="F#" Value="type ManipulationInertiaStartingEventArgs = class&#xA;    inherit InputEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Daten für das <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" />-Ereignis bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können das <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>-Objekt verwenden, um das Trägheits Verhalten einer Manipulation anzugeben. Sie können das Verhalten der Trägheits für jede Art von Manipulation separat angeben, indem Sie die Eigenschaften <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.TranslationBehavior%2A>, <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.ExpansionBehavior%2A>und <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior%2A> verwenden. Jede Eigenschaft ist ein Objekttyp, der das Verhalten der Trägheits darstellt, und in jedem Fall können Sie Folgendes angeben:  
  
-   Die anfängliche Geschwindigkeit der Trägheit, wenn Sie beginnt.  
  
-   Die gewünschte Position der Bearbeitung, wenn Trägheit endet.  
  
-   Die gewünschte Verlangsamung der Trägheit.  
  
 In der Regel geben Sie entweder die gewünschte Position der Bearbeitung an, wenn Trägheit endet, oder die gewünschte Verlangsamung der Trägheit, aber nicht beides.  
  
 Weitere Informationen zu Manipulationen finden Sie unter Übersicht über die [Eingabe](~/docs/framework/wpf/advanced/input-overview.md).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt den <xref:System.Windows.UIElement.ManipulationInertiaStarting> Ereignishandler und legt die gewünschte Verlangsamung für Übersetzung, Erweiterung und Drehung fest, die während der Trägheit verwendet werden. Dieses Beispiel ist Teil eines größeren Beispiels in Exemplarische Vorgehensweise [: Erstellen Ihrer ersten Touchscreen-Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public bool Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationInertiaStartingEventArgs.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Function Cancel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Cancel();" />
      <MemberSignature Language="F#" Value="member this.Cancel : unit -&gt; bool" Usage="manipulationInertiaStartingEventArgs.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bricht die Bearbeitung ab.</summary>
        <returns><see langword="true" />, wenn die Bearbeitung erfolgreich abgebrochen wurde; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Methode erfolgreich ist, sendet der Standard <xref:System.Windows.Input.TouchDevice> vorherige Berührungs Ereignisse als MouseDown-, MouseMove-oder MouseUp-Ereignisse an das Element, und zukünftige Bearbeitungs Ereignisse treten nicht auf.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpansionBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InertiaExpansionBehavior ExpansionBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InertiaExpansionBehavior ExpansionBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.ExpansionBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property ExpansionBehavior As InertiaExpansionBehavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InertiaExpansionBehavior ^ ExpansionBehavior { System::Windows::Input::InertiaExpansionBehavior ^ get(); void set(System::Windows::Input::InertiaExpansionBehavior ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExpansionBehavior : System.Windows.Input.InertiaExpansionBehavior with get, set" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.ExpansionBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InertiaExpansionBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Rate der Verlangsamung der Erweiterungsträgheitsbewegung fest.</summary>
        <value>Die Rate der Verlangsamung einer Erweiterungsträgheitsbewegung</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.ExpansionBehavior%2A>-Eigenschaft, um folgende Aktionen durchzuführen:  
  
-   Legen Sie die anfängliche Geschwindigkeit der Trägheit fest, wenn Sie beginnt, indem Sie die <xref:System.Windows.Input.InertiaExpansionBehavior.InitialVelocity%2A>-Eigenschaft festlegen.  
  
-   Geben Sie die gewünschte Erweiterung der Bearbeitung an, wenn Trägheit endet, indem Sie die <xref:System.Windows.Input.InertiaExpansionBehavior.DesiredExpansion%2A>-Eigenschaft festlegen.  
  
-   Geben Sie die gewünschte Verlangsamung der Trägheit an, indem Sie die <xref:System.Windows.Input.InertiaExpansionBehavior.DesiredDeceleration%2A>-Eigenschaft festlegen.  
  
 Normalerweise legen Sie entweder die <xref:System.Windows.Input.InertiaExpansionBehavior.DesiredExpansion%2A> oder die <xref:System.Windows.Input.InertiaExpansionBehavior.DesiredDeceleration%2A>fest, jedoch nicht beide.  
  
 Weitere Informationen zu Manipulationen finden Sie unter Übersicht über die [Eingabe](~/docs/framework/wpf/advanced/input-overview.md). Ein Beispiel für eine Anwendung, die auf Manipulationen antwortet, finden Sie unter Exemplarische Vorgehensweise [: Erstellen der ersten Fingereingabe Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialVelocities">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationVelocities InitialVelocities { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationVelocities InitialVelocities" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.InitialVelocities" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InitialVelocities As ManipulationVelocities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationVelocities ^ InitialVelocities { System::Windows::Input::ManipulationVelocities ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InitialVelocities : System.Windows.Input.ManipulationVelocities" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.InitialVelocities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationVelocities</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Raten der Änderungen an der Bearbeitung ab, die vor dem Beginn der Trägheit auftreten.</summary>
        <value>Die Raten der Änderungen an der Bearbeitung, die vor dem Beginn der Trägheit auftreten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Manipulationen finden Sie unter Übersicht über die [Eingabe](~/docs/framework/wpf/advanced/input-overview.md). Ein Beispiel für eine Anwendung, die auf Manipulationen antwortet, finden Sie unter Exemplarische Vorgehensweise [: Erstellen der ersten Fingereingabe Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationInertiaStartingEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="manipulationInertiaStartingEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="genericTarget">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationContainer">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement ManipulationContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement ManipulationContainer" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationContainer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManipulationContainer As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ ManipulationContainer { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ManipulationContainer : System.Windows.IInputElement" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Container ab, zu dem die <see cref="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin" />-Eigenschaft relativ ist.</summary>
        <value>Der Container, zu dem die <see cref="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin" />-Eigenschaft relativ ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Manipulationen finden Sie unter Übersicht über die [Eingabe](~/docs/framework/wpf/advanced/input-overview.md). Ein Beispiel für eine Anwendung, die auf Manipulationen antwortet, finden Sie unter Exemplarische Vorgehensweise [: Erstellen der ersten Fingereingabe Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point ManipulationOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point ManipulationOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property ManipulationOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point ManipulationOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.ManipulationOrigin : System.Windows.Point with get, set" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Punkt ab, an dem die Bearbeitung entstanden ist, oder legt ihn fest.</summary>
        <value>Der Punkt, an dem die Bearbeitung entstanden ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn mehr als ein Kontaktpunkt die Manipulation initiiert hat, stellt die <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationOrigin%2A>-Eigenschaft den Punkt zwischen allen Kontaktpunkten dar.  
  
 Weitere Informationen zu Manipulationen finden Sie unter Übersicht über die [Eingabe](~/docs/framework/wpf/advanced/input-overview.md). Ein Beispiel für eine Anwendung, die auf Manipulationen antwortet, finden Sie unter Exemplarische Vorgehensweise [: Erstellen der ersten Fingereingabe Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Manipulators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt; Manipulators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.IManipulator&gt; Manipulators" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.Manipulators" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Manipulators As IEnumerable(Of IManipulator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ Manipulators { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Manipulators : seq&lt;System.Windows.Input.IManipulator&gt;" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.Manipulators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von Objekten ab, die die Fingereingabekontakte für die Manipulation darstellt.</summary>
        <value>Eine Auflistung von Objekten, die die Fingereingabekontakte für die Manipulation darstellt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InertiaRotationBehavior RotationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InertiaRotationBehavior RotationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property RotationBehavior As InertiaRotationBehavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InertiaRotationBehavior ^ RotationBehavior { System::Windows::Input::InertiaRotationBehavior ^ get(); void set(System::Windows::Input::InertiaRotationBehavior ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RotationBehavior : System.Windows.Input.InertiaRotationBehavior with get, set" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InertiaRotationBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Rate der Verlangsamung einer rotierenden Trägheitsbewegung ab oder legt sie fest.</summary>
        <value>Die Rate der Verlangsamung einer rotierenden Trägheitsbewegung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior%2A>-Eigenschaft, um folgende Aktionen durchzuführen:  
  
-   Legen Sie die anfängliche Geschwindigkeit der Trägheit fest, wenn Sie beginnt, indem Sie die <xref:System.Windows.Input.InertiaRotationBehavior.InitialVelocity%2A>-Eigenschaft festlegen.  
  
-   Geben Sie die gewünschte Drehung der Bearbeitung an, wenn die Trägheit endet, indem Sie die <xref:System.Windows.Input.InertiaRotationBehavior.DesiredRotation%2A>-Eigenschaft festlegen.  
  
-   Geben Sie die gewünschte Verlangsamung der Trägheit an, indem Sie die <xref:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration%2A>-Eigenschaft festlegen.  
  
 Normalerweise legen Sie entweder die <xref:System.Windows.Input.InertiaRotationBehavior.DesiredRotation%2A> oder die <xref:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration%2A>fest, jedoch nicht beide.  
  
 Weitere Informationen zu Manipulationen finden Sie unter Übersicht über die [Eingabe](~/docs/framework/wpf/advanced/input-overview.md). Ein Beispiel für eine Anwendung, die auf Manipulationen antwortet, finden Sie unter Exemplarische Vorgehensweise [: Erstellen der ersten Fingereingabe Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInertiaParameter">
      <MemberSignature Language="C#" Value="public void SetInertiaParameter (System.Windows.Input.Manipulations.InertiaParameters2D parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInertiaParameter(class System.Windows.Input.Manipulations.InertiaParameters2D parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationInertiaStartingEventArgs.SetInertiaParameter(System.Windows.Input.Manipulations.InertiaParameters2D)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInertiaParameter (parameter As InertiaParameters2D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInertiaParameter(System::Windows::Input::Manipulations::InertiaParameters2D ^ parameter);" />
      <MemberSignature Language="F#" Value="member this.SetInertiaParameter : System.Windows.Input.Manipulations.InertiaParameters2D -&gt; unit" Usage="manipulationInertiaStartingEventArgs.SetInertiaParameter parameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Windows.Input.Manipulations.InertiaParameters2D" />
      </Parameters>
      <Docs>
        <param name="parameter">Das Objekt, das das Verhalten einer Bearbeitung während der Trägheit angibt.</param>
        <summary>Gibt das Verhalten einer Bearbeitung während der Trägheit an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen diese Methode normalerweise nicht aufrufen. Verwenden Sie stattdessen die Eigenschaften der <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="parameter" /> ist <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="TranslationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InertiaTranslationBehavior TranslationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InertiaTranslationBehavior TranslationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.TranslationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property TranslationBehavior As InertiaTranslationBehavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InertiaTranslationBehavior ^ TranslationBehavior { System::Windows::Input::InertiaTranslationBehavior ^ get(); void set(System::Windows::Input::InertiaTranslationBehavior ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TranslationBehavior : System.Windows.Input.InertiaTranslationBehavior with get, set" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.TranslationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InertiaTranslationBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Rate der Verlangsamung einer linearen Trägheitsbewegung ab oder legt sie fest.</summary>
        <value>Die Rate der Verlangsamung einer linearen Trägheitsbewegung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.TranslationBehavior%2A>-Eigenschaft, um folgende Aktionen durchzuführen:  
  
-   Legen Sie die anfängliche Geschwindigkeit der Trägheit fest, wenn Sie beginnt, indem Sie die <xref:System.Windows.Input.InertiaTranslationBehavior.InitialVelocity%2A>-Eigenschaft festlegen.  
  
-   Geben Sie die gewünschte Position der Bearbeitung an, wenn die Trägheit endet, indem Sie die <xref:System.Windows.Input.InertiaTranslationBehavior.DesiredDisplacement%2A>-Eigenschaft festlegen.  
  
-   Geben Sie die gewünschte Verlangsamung der Trägheit an, indem Sie die <xref:System.Windows.Input.InertiaTranslationBehavior.DesiredDeceleration%2A>-Eigenschaft festlegen.  
  
 Normalerweise legen Sie entweder die <xref:System.Windows.Input.InertiaTranslationBehavior.DesiredDisplacement%2A> oder die <xref:System.Windows.Input.InertiaTranslationBehavior.DesiredDeceleration%2A>fest, jedoch nicht beide.  
  
 Weitere Informationen zu Manipulationen finden Sie unter Übersicht über die [Eingabe](~/docs/framework/wpf/advanced/input-overview.md). Ein Beispiel für eine Anwendung, die auf Manipulationen antwortet, finden Sie unter Exemplarische Vorgehensweise [: Erstellen der ersten Fingereingabe Anwendung](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

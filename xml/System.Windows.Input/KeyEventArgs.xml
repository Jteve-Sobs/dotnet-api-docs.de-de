<Type Name="KeyEventArgs" FullName="System.Windows.Input.KeyEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1fa1194998ffc53194b16bd42c5939d0a06b2ffe" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36506876" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class KeyEventArgs : System.Windows.Input.KeyboardEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.Windows.Input.KeyboardEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyEventArgs&#xA;Inherits KeyboardEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyEventArgs : System::Windows::Input::KeyboardEventArgs" />
  <TypeSignature Language="F#" Value="type KeyEventArgs = class&#xA;    inherit KeyboardEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.KeyboardEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b79a0-101">Provides data for the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> routed events, as well as related attached and Preview events.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b79a0-101">Provides data for the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> routed events, as well as related attached and Preview events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b79a0-102">Diese Ereignisdatenklasse wird mit den folgenden angefügten Ereignissen verwendet:</span><span class="sxs-lookup"><span data-stu-id="b79a0-102">This event data class is used with the following attached events:</span></span>  
  
-   <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>  
  
 <span data-ttu-id="b79a0-103">Diese Ereignisdatenklasse wird auch mit den folgenden Routingereignissen für Basiselemente verwendet.</span><span class="sxs-lookup"><span data-stu-id="b79a0-103">This event data class is also used with the following routed events on base elements.</span></span> <span data-ttu-id="b79a0-104">Diese weitergeleitete Ereignisse weiterleiten, die zuvor aufgelisteten angefügte Ereignisse damit diese mehr zugegriffen werden kann, das Modell der allgemeinen Element im [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="b79a0-104">These routed events forward the previously listed attached events to make them more accessible to the general element model in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span>  
  
-   <xref:System.Windows.UIElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=nameWithType>  
  
 <span data-ttu-id="b79a0-105">Angefügte Ereignisse und die Ereignisse weitergeleitet Basiselement nutzen ihre Ereignisdaten und die bubbling und tunneling-Versionen Routingereignisse Ereignisdaten auch freigeben.</span><span class="sxs-lookup"><span data-stu-id="b79a0-105">The attached events and the base element routed events share their event data, and the bubbling and tunneling versions of the routed events also share event data.</span></span> <span data-ttu-id="b79a0-106">Dies kann die behandelten Eigenschaften des Ereignisses beeinträchtigen, während der Übertragung der Ereignisroute.</span><span class="sxs-lookup"><span data-stu-id="b79a0-106">This can affect the handled characteristics of the event as it travels the event route.</span></span> <span data-ttu-id="b79a0-107">Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span><span class="sxs-lookup"><span data-stu-id="b79a0-107">For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="b79a0-108">Ein Schlüssel kann in der oben und umgeschalteten Zustand oder die ab und umgeschalteten Zustand befinden.</span><span class="sxs-lookup"><span data-stu-id="b79a0-108">A key can be in both the up and toggled states or the down and toggled states.</span></span> <span data-ttu-id="b79a0-109">Aus diesem Grund bestimmen, ob ein Schlüssel oben ist oder unten nicht so einfach wie das Überprüfen ist der <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> Wert als numerischen Wert.</span><span class="sxs-lookup"><span data-stu-id="b79a0-109">For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value.</span></span> <span data-ttu-id="b79a0-110">Stattdessen sollten Sie den Wert überprüfen, Konzept, indem er als eine Flags-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="b79a0-110">Instead, you should check the value by treating it as a flag enumeration.</span></span> <span data-ttu-id="b79a0-111">Verwenden einer `AND` Vergleich des ersten Bits.</span><span class="sxs-lookup"><span data-stu-id="b79a0-111">Use an `AND` comparison of the first bit.</span></span> <span data-ttu-id="b79a0-112">Verwenden Sie alternativ die Hilfsprogramm-Eigenschaften <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, und <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> um zu bestimmen, ob ein bestimmten Schlüssel wird nach oben, unten oder umgeschalteten.</span><span class="sxs-lookup"><span data-stu-id="b79a0-112">Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyEventHandler" />
    <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
    <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.KeyboardDevice keyboard, class System.Windows.PresentationSource inputSource, int32 timestamp, valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyEventArgs(System::Windows::Input::KeyboardDevice ^ keyboard, System::Windows::PresentationSource ^ inputSource, int timestamp, System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyEventArgs : System.Windows.Input.KeyboardDevice * System.Windows.PresentationSource * int * System.Windows.Input.Key -&gt; System.Windows.Input.KeyEventArgs" Usage="new System.Windows.Input.KeyEventArgs (keyboard, inputSource, timestamp, key)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyboard" Type="System.Windows.Input.KeyboardDevice" />
        <Parameter Name="inputSource" Type="System.Windows.PresentationSource" />
        <Parameter Name="timestamp" Type="System.Int32" />
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="keyboard">
          <span data-ttu-id="b79a0-113">The logical keyboard device associated with this event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-113">The logical keyboard device associated with this event.</span>
          </span>
        </param>
        <param name="inputSource">
          <span data-ttu-id="b79a0-114">The input source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-114">The input source.</span>
          </span>
        </param>
        <param name="timestamp">
          <span data-ttu-id="b79a0-115">The time when the input occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-115">The time when the input occurred.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="b79a0-116">The key referenced by the event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-116">The key referenced by the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b79a0-117">Initializes a new instance of the <see cref="T:System.Windows.Input.KeyEventArgs" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-117">Initializes a new instance of the <see cref="T:System.Windows.Input.KeyEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="DeadCharProcessedKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key DeadCharProcessedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key DeadCharProcessedKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.DeadCharProcessedKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeadCharProcessedKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key DeadCharProcessedKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.DeadCharProcessedKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.DeadCharProcessedKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b79a0-118">Gets the key that is part of dead key composition to create a single combined character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-118">Gets the key that is part of dead key composition to create a single combined character.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b79a0-119">Der Schlüssel, die Teil der Warteschlange für unzustellbare Nachrichten Schlüssel Komposition um ein einzelnes kombiniertes Zeichen zu erstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-119">The key that is part of dead key composition to create a single combined character.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b79a0-120">Ein inaktiven Schlüssel, wenn gedrückt, kein sichtbares Zeichen erzeugt, aber gibt an, dass der Schlüssel mit dem Zeichen, die von der gedrückten Buchstabentaste für nächsten erzeugten kombiniert werden.</span><span class="sxs-lookup"><span data-stu-id="b79a0-120">A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.</span></span>  <span data-ttu-id="b79a0-121">Wenn <xref:System.Windows.Input.KeyEventArgs.Key%2A> gibt <xref:System.Windows.Input.Key.DeadCharProcessed?displayProperty=nameWithType>, Sie können diese Eigenschaft verwenden, um die tatsächlichen Schlüssel zu erhalten, der eingegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="b79a0-121">If <xref:System.Windows.Input.KeyEventArgs.Key%2A> returns <xref:System.Windows.Input.Key.DeadCharProcessed?displayProperty=nameWithType>, you can use this property to get the actual key that was entered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeProcessedKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key ImeProcessedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key ImeProcessedKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.ImeProcessedKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImeProcessedKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key ImeProcessedKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.ImeProcessedKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.ImeProcessedKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b79a0-122">Gets the keyboard key referenced by the event, if the key will be processed by an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)].</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-122">Gets the keyboard key referenced by the event, if the key will be processed by an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)].</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b79a0-123">Die <see cref="T:System.Windows.Input.Key" /> auf das Ereignis verweist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-123">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InputSource">
      <MemberSignature Language="C#" Value="public System.Windows.PresentationSource InputSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PresentationSource InputSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.InputSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputSource As PresentationSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PresentationSource ^ InputSource { System::Windows::PresentationSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputSource : System.Windows.PresentationSource" Usage="System.Windows.Input.KeyEventArgs.InputSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PresentationSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b79a0-124">Gets the input source that provided this input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-124">Gets the input source that provided this input.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b79a0-125">Die Eingabequelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-125">The input source.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="b79a0-126">zum Abrufen der Eingabequelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-126">for getting the input source.</span>
          </span>
          <span data-ttu-id="b79a0-127">Zugeordnete Enumerationen: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-127">Associated enumerations: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="keyEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">
          <span data-ttu-id="b79a0-128">The generic handler to call in a type-specific way.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-128">The generic handler to call in a type-specific way.</span>
          </span>
        </param>
        <param name="genericTarget">
          <span data-ttu-id="b79a0-129">The target to call the handler on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-129">The target to call the handler on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b79a0-130">Invokes event handlers in a type-specific way, which can increase event system efficiency.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-130">Invokes event handlers in a type-specific way, which can increase event system efficiency.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b79a0-131">Diese Implementierung wandelt den generischen Handler als eine <xref:System.Windows.Input.KeyEventHandler> und ruft ihn dann auf.</span><span class="sxs-lookup"><span data-stu-id="b79a0-131">This implementation casts the generic handler as a <xref:System.Windows.Input.KeyEventHandler> and then invokes it.</span></span> <span data-ttu-id="b79a0-132">Ausführliche Informationen zu diesem Implementierungsmuster und die Gründe dafür, finden Sie unter <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> und [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md).</span><span class="sxs-lookup"><span data-stu-id="b79a0-132">For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDown">
      <MemberSignature Language="C#" Value="public bool IsDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDown" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDown : bool" Usage="System.Windows.Input.KeyEventArgs.IsDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b79a0-133">Gets a value that indicates whether the key referenced by the event is in the down state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-133">Gets a value that indicates whether the key referenced by the event is in the down state.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b79a0-134">
            <see langword="true" /> Wenn der Schlüssel nicht ausgeführt wird; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-134">
              <see langword="true" /> if the key is down; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b79a0-135">Die <xref:System.Windows.Input.Keyboard> Klasse enthält auch Informationen über den Zustand der Tasten auf der Tastatur.</span><span class="sxs-lookup"><span data-stu-id="b79a0-135">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span> <span data-ttu-id="b79a0-136">Für die Instanz, die <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> -Methode zurück, ob ein angegebener Schlüssel ausgefallen ist.</span><span class="sxs-lookup"><span data-stu-id="b79a0-136">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method returns whether a specified key is down.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b79a0-137">Das folgende Beispiel überprüft, ob der Schlüssel mit einer Instanz von verknüpften <xref:System.Windows.Input.KeyEventArgs> gedrückt wird, indem der Zustand der der <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="b79a0-137">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisdown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisdown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsRepeat">
      <MemberSignature Language="C#" Value="public bool IsRepeat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRepeat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsRepeat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRepeat As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRepeat { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRepeat : bool" Usage="System.Windows.Input.KeyEventArgs.IsRepeat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b79a0-138">Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-138">Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b79a0-139">
            <see langword="true" /> Wenn der Schlüssel wiederholt wird. andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-139">
              <see langword="true" /> if the key is repeated; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b79a0-140">Es ist kein Standardwert vorhanden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-140">There is no default value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b79a0-141">Das folgende Beispiel überprüft, ob der Schlüssel mit einer Instanz von verknüpften <xref:System.Windows.Input.KeyEventArgs> ist ein wiederholter Schlüssel von der Zustand der der <xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="b79a0-141">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is a repeated key by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisrepeat)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisrepeat)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsToggled">
      <MemberSignature Language="C#" Value="public bool IsToggled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsToggled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsToggled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsToggled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsToggled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsToggled : bool" Usage="System.Windows.Input.KeyEventArgs.IsToggled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b79a0-142">Gets a value that indicates whether the key referenced by the event is in the toggled state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-142">Gets a value that indicates whether the key referenced by the event is in the toggled state.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b79a0-143">
            <see langword="true" /> Wenn die Taste umgeschaltet wird; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-143">
              <see langword="true" /> if the key is toggled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b79a0-144">Es ist kein Standardwert vorhanden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-144">There is no default value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b79a0-145">Die <xref:System.Windows.Input.Keyboard> Klasse enthält auch Informationen über den Zustand der Tasten auf der Tastatur.</span><span class="sxs-lookup"><span data-stu-id="b79a0-145">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span> <span data-ttu-id="b79a0-146">Für die Instanz, die <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> -Methode zurück, ob ein angegebener Schlüssel ein-oder ausgeschaltet wird.</span><span class="sxs-lookup"><span data-stu-id="b79a0-146">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method returns whether a specified key is toggled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b79a0-147">Das folgende Beispiel überprüft, ob der Schlüssel mit einer Instanz von verknüpften <xref:System.Windows.Input.KeyEventArgs> wird von der Zustand der ein-/ausgeschaltet der <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="b79a0-147">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is toggled by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsistoggled)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsistoggled)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsUp">
      <MemberSignature Language="C#" Value="public bool IsUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsUp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUp { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUp : bool" Usage="System.Windows.Input.KeyEventArgs.IsUp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b79a0-148">Gets a value that indicates whether the key referenced by the event is in the up state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-148">Gets a value that indicates whether the key referenced by the event is in the up state.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b79a0-149">
            <see langword="true" /> Wenn der Schlüssel aktiviert ist; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-149">
              <see langword="true" /> if the key is up; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b79a0-150">Es ist kein Standardwert vorhanden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-150">There is no default value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b79a0-151">Die <xref:System.Windows.Input.Keyboard> Klasse enthält auch Informationen über den Zustand der Tasten auf der Tastatur.</span><span class="sxs-lookup"><span data-stu-id="b79a0-151">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span>  <span data-ttu-id="b79a0-152">Für die Instanz, die <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> Methodenrückgabe an, ob ein angegebenes betriebsbereit ist.</span><span class="sxs-lookup"><span data-stu-id="b79a0-152">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method returns whether a specified is up.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b79a0-153">Das folgende Beispiel überprüft, ob der Schlüssel mit einer Instanz von verknüpften <xref:System.Windows.Input.KeyEventArgs> ist, indem der Zustand der der <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="b79a0-153">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is up by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisup)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisup)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b79a0-154">Gets the keyboard key associated with the event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-154">Gets the keyboard key associated with the event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b79a0-155">Die <see cref="T:System.Windows.Input.Key" /> auf das Ereignis verweist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-155">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b79a0-156">Das folgende Beispiel erstellt eine <xref:System.Windows.Input.KeyEventHandler> und überprüft, ob der Schlüssel zugeordnet der <xref:System.Windows.Input.KeyEventArgs> ist die <xref:System.Windows.Input.Key.Return> Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="b79a0-156">The following example creates a <xref:System.Windows.Input.KeyEventHandler> and checks whether the key associated with the <xref:System.Windows.Input.KeyEventArgs> is the <xref:System.Windows.Input.Key.Return> key.</span></span>  
  
 [!code-csharp[keydown#KeyDownSample](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml.cs#keydownsample)]
 [!code-vb[keydown#KeyDownSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyDown/VisualBasic/Window1.xaml.vb#keydownsample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="KeyStates">
      <MemberSignature Language="C#" Value="public System.Windows.Input.KeyStates KeyStates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.KeyStates KeyStates" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.KeyStates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyStates As KeyStates" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::KeyStates KeyStates { System::Windows::Input::KeyStates get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyStates : System.Windows.Input.KeyStates" Usage="System.Windows.Input.KeyEventArgs.KeyStates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyStates</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b79a0-157">Gets the state of the keyboard key associated with this event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-157">Gets the state of the keyboard key associated with this event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b79a0-158">Der Status des Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-158">The state of the key.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b79a0-159">Ein Schlüssel kann in der oben und umgeschalteten Zustand oder die ab und umgeschalteten Zustand befinden.</span><span class="sxs-lookup"><span data-stu-id="b79a0-159">A key can be in both the up and toggled states or the down and toggled states.</span></span> <span data-ttu-id="b79a0-160">Aus diesem Grund bestimmen, ob ein Schlüssel oben ist oder unten nicht so einfach wie das Überprüfen ist der <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> Wert als numerischen Wert.</span><span class="sxs-lookup"><span data-stu-id="b79a0-160">For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value.</span></span> <span data-ttu-id="b79a0-161">Stattdessen sollten Sie den Wert überprüfen, Konzept, indem er als eine Flags-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="b79a0-161">Instead, you should check the value by treating it as a flag enumeration.</span></span> <span data-ttu-id="b79a0-162">Verwenden einer `AND` Vergleich des ersten Bits.</span><span class="sxs-lookup"><span data-stu-id="b79a0-162">Use an `AND` comparison of the first bit.</span></span> <span data-ttu-id="b79a0-163">Verwenden Sie alternativ die Hilfsprogramm-Eigenschaften <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, und <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> um zu bestimmen, ob ein bestimmten Schlüssel wird nach oben, unten oder umgeschalteten.</span><span class="sxs-lookup"><span data-stu-id="b79a0-163">Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b79a0-164">Das folgende Beispiel überprüft, ob eine Instanz von ein Schlüssel zugeordnet <xref:System.Windows.Input.KeyEventArgs> gedrückt wird, indem eine bitweise `AND` Vergleich auf die <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> des Schlüssels und der <xref:System.Windows.Input.KeyStates.Down> -Enumerationswert.</span><span class="sxs-lookup"><span data-stu-id="b79a0-164">The following example checks whether a key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by performing a bitwise `AND` comparison on the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> of the key and the <xref:System.Windows.Input.KeyStates.Down> enumeration value.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeystatesdown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeystatesdown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="SystemKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key SystemKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key SystemKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.SystemKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SystemKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key SystemKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.SystemKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.SystemKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b79a0-165">Gets the keyboard key referenced by the event, if the key will be processed by the system.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-165">Gets the keyboard key referenced by the event, if the key will be processed by the system.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b79a0-166">Die <see cref="T:System.Windows.Input.Key" /> auf das Ereignis verweist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79a0-166">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
  </Members>
</Type>
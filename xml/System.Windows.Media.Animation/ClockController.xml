<Type Name="ClockController" FullName="System.Windows.Media.Animation.ClockController">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6b49cef34c84151a1ea6a9abf7968a87de857843" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86723127" /></Metadata><TypeSignature Language="C#" Value="public sealed class ClockController : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClockController extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ClockController" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClockController&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClockController sealed : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type ClockController = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Steuert eine <see cref="T:System.Windows.Media.Animation.Clock" /> interaktiv.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit einem <xref:System.Windows.Media.Animation.ClockController> können Sie eine interaktiv starten, anhalten, fortsetzen, suchen, überspringen, anhalten und entfernen <xref:System.Windows.Media.Animation.Clock> . Sie können die Uhren der Stamm Ebene nur interaktiv steuern.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.Clock" />
    <altmember cref="P:System.Windows.Media.Animation.Clock.Controller" />
  </Docs>
  <Members>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="clockController.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt die Ziel-<see cref="P:System.Windows.Media.Animation.ClockController.Clock" /> so fest, dass beim nächsten Ticken begonnen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode bewirkt, dass das <xref:System.Windows.Media.Animation.Clock> -Ziel so verhält, als ob die des <xref:System.Windows.Media.Animation.Timeline> -Objekts <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> auf die Zeit des nächsten Takts festgelegt wurde. Die tatsächliche Einstellung der Zeitachse <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> wird ignoriert (aber nicht geändert).  
  
 Mit dieser Methode werden die Zieluhr <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> in geändert <xref:System.Windows.Media.Animation.ClockState.Active> . Die <xref:System.Windows.Media.Animation.ClockController.Begin%2A> Methode nimmt keine angehaltene Uhr wieder auf.  
  
 Diese Methode hat keine Auswirkung auf die Zeit Steuerungsstruktur, bis das nächste Mal ein Tick verarbeitet wird. Als Nebeneffekt werden die entsprechenden Ereignisse bis dahin ebenfalls nicht ausgelöst. Durch Aufrufen dieser Methode werden <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> die <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> Ereignisse und ausgelöst.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Clock">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Clock Clock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Clock Clock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.Clock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clock As Clock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Clock ^ Clock { System::Windows::Media::Animation::Clock ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Clock : System.Windows.Media.Animation.Clock" Usage="System.Windows.Media.Animation.ClockController.Clock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Clock</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die von diesem <see cref="T:System.Windows.Media.Animation.Clock" /> gesteuerte <see cref="T:System.Windows.Media.Animation.ClockController" /> ab.</summary>
        <value>Die von diesem <see cref="T:System.Windows.Media.Animation.Clock" /> gesteuerte <see cref="T:System.Windows.Media.Animation.ClockController" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="clockController.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet das Fortschreiten der Ziel-<see cref="T:System.Windows.Media.Animation.Clock" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können einen <xref:System.Windows.Media.Animation.Clock> unabhängig vom aktuellen Zustand anhalten, und das Anhalten einer Uhr ändert nicht seinen aktuellen Zustand. Eine Uhr kann angehalten werden <xref:System.Windows.Media.Animation.ClockState.Active> , während, <xref:System.Windows.Media.Animation.ClockState.Stopped> oder ist <xref:System.Windows.Media.Animation.ClockState.Filling> . Die einzige Möglichkeit zum Anhalten einer Uhr ist die Verwendung der- <xref:System.Windows.Media.Animation.ClockController.Resume%2A> Methode. Durch das Anhalten einer Uhr werden die untergeordneten Elemente implizit angehalten.  
  
 Wenn Sie diese Methode aufrufen, wenn die Zieluhr bereits angehalten wurde, hat dies keine Auswirkungen.  
  
 Durch das Anhalten einer Uhr wird das- <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Resume" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberSignature Language="F#" Value="member this.Remove : unit -&gt; unit" Usage="clockController.Remove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt die diesem <see cref="T:System.Windows.Media.Animation.Clock" /> zugeordnete <see cref="T:System.Windows.Media.Animation.ClockController" /> aus den Eigenschaften, die sie animiert. Diese Eigenschaften werden von der Uhr und deren untergeordneten Uhren nicht mehr beeinflusst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode löst das- <xref:System.Windows.Media.Animation.Clock.RemoveRequested> Ereignis aus.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie eine Uhr entfernt und anderweitig interaktiv gesteuert wird.  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="clockController.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ermöglicht es, dass eine zuvor angehaltene <see cref="T:System.Windows.Media.Animation.Clock" /> fortgesetzt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können einen <xref:System.Windows.Media.Animation.Clock> unabhängig vom aktuellen Zustand anhalten oder fortsetzen, und das Anhalten oder Fortsetzen einer Uhr ändert nicht den aktuellen Zustand. Eine Uhr kann angehalten werden <xref:System.Windows.Media.Animation.ClockState.Active> , während, <xref:System.Windows.Media.Animation.ClockState.Stopped> oder ist <xref:System.Windows.Media.Animation.ClockState.Filling> . Die einzige Möglichkeit zum Fortsetzen einer angehaltenen Uhr ist die Verwendung der- <xref:System.Windows.Media.Animation.ClockController.Resume%2A> Methode. Durch das Fortsetzen einer Uhr werden die untergeordneten Elemente implizit fortgesetzt. Das Aufrufen dieser Methode auf einer Uhr, die nicht angehalten wird, hat keine Auswirkungen.  
  
 Durch das Fortsetzen einer angehaltenen Uhr wird das- <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.Seek : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="clockController.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Der Offset der Suche, gemessen in der Zeit der Zieluhr. Dieser Offset ist relativ zur <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> oder <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> der Uhr, abhängig vom Wert von <paramref name="origin" />.</param>
        <param name="origin">Ein Wert, der anzeigt, ob der angegebene Offset relativ zur <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> oder <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> der Zieluhr ist.</param>
        <summary>Sucht die Ziel-<see cref="P:System.Windows.Media.Animation.ClockController.Clock" /> anhand der angegebenen Menge, wenn das nächste Ticken auftritt. Wenn die Zieluhr beendet wird, erfolgt die erneute Aktivierung durch einen Suchvorgang.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei Such Vorgängen werden die <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> -oder-Einstellungen der Zeitachse dieser Uhr nicht berücksichtigt: die Uhr wird so behandelt, als ob die Zeitachse den Wert <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 und Nein aufweist <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> .  
  
 Diese Methode ändert den <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> in <xref:System.Windows.Media.Animation.ClockState.Active> . Diese Methode hat keine Auswirkung auf die Zeit Steuerungsstruktur, bis das nächste Mal ein Tick verarbeitet wird. Als Nebeneffekt werden die entsprechenden Ereignisse auch erst dann ausgelöst.  
  
 Durch das Suchen eines Storyboards werden die <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> Ereignisse und ausgelöst <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> .  
  
 Wenn die Zieluhr über untergeordnete Elemente verfügt, wird die aktuelle Uhrzeit entsprechend aktualisiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie mithilfe von suchen <xref:System.Windows.Media.Animation.ClockController> .  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Animation.TimeSeekOrigin" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="clockController.SeekAlignedToLastTick (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Der Offset der Suche, gemessen in der Zeit der Zieluhr. Dieser Offset ist relativ zur <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> oder <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> der Uhr, abhängig vom Wert von <paramref name="origin" />.</param>
        <param name="origin">Ein Wert, der anzeigt, ob der angegebene Offset relativ zur <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> oder <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> der Zieluhr ist.</param>
        <summary>Sucht sofort das Ziel <see cref="T:System.Windows.Media.Animation.Clock" /> anhand des angegebenen Betrags. Wenn die Zieluhr beendet wird, erfolgt die erneute Aktivierung durch einen Suchvorgang.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei Such Vorgängen werden die <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> -oder-Einstellungen der Zeitachse dieser Uhr nicht berücksichtigt: die Uhr wird so behandelt, als ob die Zeitachse den Wert <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 und Nein aufweist <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> .  
  
 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> richtet die Seeding Zeit der Uhr mit dem letzten Takt Strich aus. Werte werden sofort aktualisiert, um die Änderungen zu widerspiegeln <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> , obwohl der Bildschirm diese Änderungen erst dann widerspiegelt, wenn der Bildschirm aktualisiert wird.  
  
 Wenn die Zieluhr über untergeordnete Elemente verfügt, wird die aktuelle Uhrzeit entsprechend aktualisiert.  
  
 Diese Methode ändert den <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> in <xref:System.Windows.Media.Animation.ClockState.Active> .  
  
 Durch das Suchen eines Storyboards werden die <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> Ereignisse und ausgelöst <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> .  
  
   
  
## Examples  
 Im folgenden Beispiel werden sowohl die <xref:System.Windows.Media.Animation.ClockController.Seek%2A> -Methode als auch die- <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> Methode eines veranschaulicht <xref:System.Windows.Media.Animation.ClockController> .  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToFill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToFill();" />
      <MemberSignature Language="F#" Value="member this.SkipToFill : unit -&gt; unit" Usage="clockController.SkipToFill " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt die aktuelle Uhrzeit der <see cref="T:System.Windows.Media.Animation.Clock" /> des Ziels auf das Ende seines Aktivitätszeitraums fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode wird die aktuelle Uhrzeit der Zieluhr auf das Ende des aktiven Zeitraums erhöht. das Verhalten der Uhr an dieser Stelle wird durch die- <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> Einstellung von angegeben <xref:System.Windows.Media.Animation.Timeline> . Wenn die-Eigenschaft der Zeitachse <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> auf festgelegt ist <xref:System.Windows.Media.Animation.FillBehavior.HoldEnd> , wird die Uhr gefüllt. wenn die-Eigenschaft auf festgelegt ist <xref:System.Windows.Media.Animation.FillBehavior.Stop> , wird die Uhr angehalten.  
  
 Diese Methode hat nur dann Auswirkungen, wenn die Zieluhr <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> ist <xref:System.Windows.Media.Animation.ClockState.Active> .  
  
 Diese Methode hat keine Auswirkung auf die Zeit Steuerungsstruktur, bis das nächste Mal ein Tick verarbeitet wird. Als Nebeneffekt werden die entsprechenden Ereignisse auch erst dann ausgelöst.  
  
 Durch die Weiterleitung eines Storyboards auf seine Füllzeit werden die <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> Ereignisse und ausgelöst <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeedRatio">
      <MemberSignature Language="C#" Value="public double SpeedRatio { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SpeedRatio" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberSignature Language="VB.NET" Value="Public Property SpeedRatio As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double SpeedRatio { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.SpeedRatio : double with get, set" Usage="System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Interaktionsgeschwindigkeit der Ziel-<see cref="T:System.Windows.Media.Animation.Clock" /> ab oder legt sie fest.</summary>
        <value>Ein endlicher Wert größer als 0 (null), der die Interaktionsgeschwindigkeit der Zieluhr beschreibt. Der Wert wird mit dem Wert der <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> der <see cref="T:System.Windows.Media.Animation.Timeline" /> der Uhr multipliziert. Wenn beispielsweise die <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> der Zeitachse 0,5 und die <see cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" /> des <see cref="T:System.Windows.Media.Animation.ClockController" />-Objekts 3,0 beträgt, erfolgt die Bewegung entlang der Zeitachse mit 1,5-facher Normalgeschwindigkeit (0,5 * 3,0). Der Standardwert ist 1,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Festlegen dieser Eigenschaft hat bis zum nächsten Tick keine Auswirkung. Wenn Sie diese Eigenschaft festlegen und dann ihren Wert erhalten, bevor der nächste Tick auftritt, erhalten Sie den alten Wert. Diese Eigenschaft gibt den neuen Wert nach dem nächsten Tick zurück.  
  
 Wenn Sie diese Eigenschaft festlegen, wird der Wert der zugrunde liegenden Zeitachse nicht geändert <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> .  
  
 Durch Festlegen dieser Eigenschaft wird das-Ereignis der Zieluhr ausgelöst <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> .  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="clockController.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Hält den Ziel-<see cref="T:System.Windows.Media.Animation.Clock" /> an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode werden die Zieluhr <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> in geändert <xref:System.Windows.Media.Animation.Clock.Stopped%2A> .  
  
 Eine <xref:System.Windows.Media.Animation.Clock.Stopped%2A> Uhr kann mithilfe der-,-oder-Methode neu gestartet werden <xref:System.Windows.Media.Animation.ClockController.Begin%2A> <xref:System.Windows.Media.Animation.ClockController.Seek%2A> <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> .  
  
 Diese Methode hat keine Auswirkung auf die Zeit Steuerungsstruktur, bis das nächste Mal ein Tick verarbeitet wird. Als Nebeneffekt werden die entsprechenden Ereignisse auch erst dann ausgelöst.  
  
 Das Beenden einer Uhr löst das <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> -Ereignis und das- <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> Ereignis aus, aber nicht das- <xref:System.Windows.Media.Animation.Clock.Completed> Ereignis  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

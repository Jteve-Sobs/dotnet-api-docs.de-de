<Type Name="BuildRequestDataFlags" FullName="Microsoft.Build.Execution.BuildRequestDataFlags">
  <Metadata><Meta Name="ms.openlocfilehash" Value="07d660d9d347f6d88d66447c5dad20784203a17a" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86623599" /></Metadata><TypeSignature Language="C#" Value="public enum BuildRequestDataFlags" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed BuildRequestDataFlags extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Execution.BuildRequestDataFlags" />
  <TypeSignature Language="VB.NET" Value="Public Enum BuildRequestDataFlags" />
  <TypeSignature Language="C++ CLI" Value="public enum class BuildRequestDataFlags" />
  <TypeSignature Language="F#" Value="type BuildRequestDataFlags = " />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>15.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Flags]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Flags&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Flags, die zusätzliche Steuerung über die Buildanforderung bereitstellen</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks 

Das- `IgnoreExistingProjectState` Flag wird nur für die Fälle bereitgestellt, in denen der Client weiß, dass die neue Buildanforderung nicht vom Projektzustand abhängt, der von einer vorherigen Anforderung generiert wurde. Wenn Sie dieses Flag festlegen, kann dies zu einer Leistungssteigerung bei nicht kompatiblen Knoten Affinitäten führt, da MSBuild andernfalls den Projektstatus von einem Knoten zu einem anderen serialisieren muss. Das Serialisieren des Projekt Zustands kann abhängig von der Datenmenge, die das Projekt zuvor generiert hat, teuer sein.  
  
Das `IgnoreExistingProjectState` Flag hat keine Auswirkungen auf die Ziel Ergebnisse. Wenn also eine vorherige Anforderung ein Ziel erstellt hat, wird das Ziel von der neuen Anforderung nicht neu erstellt. Darüber hinaus werden keine der Projekt Zustands Mutationen, die als Folge des zuvor Erstellungs Ziels aufgetreten sind, erneut angewendet.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ClearCachesAfterBuild">
      <MemberSignature Language="C#" Value="ClearCachesAfterBuild" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Build.Execution.BuildRequestDataFlags ClearCachesAfterBuild = int32(8)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Build.Execution.BuildRequestDataFlags.ClearCachesAfterBuild" />
      <MemberSignature Language="VB.NET" Value="ClearCachesAfterBuild" />
      <MemberSignature Language="C++ CLI" Value="ClearCachesAfterBuild" />
      <MemberSignature Language="F#" Value="ClearCachesAfterBuild = 8" Usage="Microsoft.Build.Execution.BuildRequestDataFlags.ClearCachesAfterBuild" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.BuildRequestDataFlags</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>Wenn dieses Flag vorhanden ist, werden Caches einschließlich <see cref="T:Microsoft.Build.Evaluation.ProjectRootElementCacheBase" /> nach Abschluss der Buildanforderung gelöscht.  Wird verwendet, wenn bekannt ist, dass die Buildanforderung viele Zustände verändert, wie z. B. die Wiederherstellung von Paketen oder die Generierung von Teilen des Importgraphen.</summary>
      </Docs>
    </Member>
    <Member MemberName="IgnoreExistingProjectState">
      <MemberSignature Language="C#" Value="IgnoreExistingProjectState" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Build.Execution.BuildRequestDataFlags IgnoreExistingProjectState = int32(4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Build.Execution.BuildRequestDataFlags.IgnoreExistingProjectState" />
      <MemberSignature Language="VB.NET" Value="IgnoreExistingProjectState" />
      <MemberSignature Language="C++ CLI" Value="IgnoreExistingProjectState" />
      <MemberSignature Language="F#" Value="IgnoreExistingProjectState = 4" Usage="Microsoft.Build.Execution.BuildRequestDataFlags.IgnoreExistingProjectState" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.BuildRequestDataFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Wenn dieses Flag vorhanden ist und das Projekt zuvor in einem Knoten erstellt wurde, dessen Affinität mit der für diese Anforderung erforderlichen Affinität nicht kompatibel ist, ignorieren wir den Projektzustand (aber nicht die Zielergebnisse), der zuvor generiert wurde.</summary>
        <remarks>Dies ist normalerweise kein Gewünschtes Verhalten.  Sie wird nur für die Fälle bereitgestellt, in denen der Client weiß, dass die neue Buildanforderung nicht vom Projektzustand abhängt, der von einer vorherigen Anforderung generiert wurde.  Wenn Sie dieses Flag festlegen, kann dies zu einer Leistungssteigerung bei nicht kompatiblen Knoten Affinitäten führt, da MSBuild andernfalls den Projektstatus von einem Knoten zu einem anderen serialisieren müsste. Dies kann in Abhängigkeit von der Menge der Daten, die das Projekt zuvor generiert hat, teuer sein.
            
Dieses Flag hat keine Auswirkungen auf die Ziel Ergebnisse. Wenn also bereits eine vorherige Anforderung ein Ziel erstellt hat, wird die neue Anforderung nicht neu erstellt (und es werden auch keine der Projekt Zustands Mutationen erstellt, die zuvor als Folge der Erstellung dieses Ziels aufgetreten sind).</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreMissingEmptyAndInvalidImports">
      <MemberSignature Language="C#" Value="IgnoreMissingEmptyAndInvalidImports" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Build.Execution.BuildRequestDataFlags IgnoreMissingEmptyAndInvalidImports = int32(64)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Build.Execution.BuildRequestDataFlags.IgnoreMissingEmptyAndInvalidImports" />
      <MemberSignature Language="VB.NET" Value="IgnoreMissingEmptyAndInvalidImports" />
      <MemberSignature Language="C++ CLI" Value="IgnoreMissingEmptyAndInvalidImports" />
      <MemberSignature Language="F#" Value="IgnoreMissingEmptyAndInvalidImports = 64" Usage="Microsoft.Build.Execution.BuildRequestDataFlags.IgnoreMissingEmptyAndInvalidImports" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.BuildRequestDataFlags</ReturnType>
      </ReturnValue>
      <MemberValue>64</MemberValue>
      <Docs>
        <summary>Wenn dieses Flag vorhanden ist, ignorieren Projekte, die während der Erstellung des Builds geladen werden, fehlende Importe (<see cref="F:Microsoft.Build.Evaluation.ProjectLoadSettings.IgnoreMissingImports" /> und <see cref="F:Microsoft.Build.Evaluation.ProjectLoadSettings.IgnoreInvalidImports" />).
Dies ist besonders nützlich während einer Wiederherstellung, da einige Importe aus Paketen stammen könnten, die noch nicht wiederhergestellt wurden.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Build.Execution.BuildRequestDataFlags None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Build.Execution.BuildRequestDataFlags.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="Microsoft.Build.Execution.BuildRequestDataFlags.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.BuildRequestDataFlags</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Keine Flags.</summary>
      </Docs>
    </Member>
    <Member MemberName="ProvideProjectStateAfterBuild">
      <MemberSignature Language="C#" Value="ProvideProjectStateAfterBuild" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Build.Execution.BuildRequestDataFlags ProvideProjectStateAfterBuild = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Build.Execution.BuildRequestDataFlags.ProvideProjectStateAfterBuild" />
      <MemberSignature Language="VB.NET" Value="ProvideProjectStateAfterBuild" />
      <MemberSignature Language="C++ CLI" Value="ProvideProjectStateAfterBuild" />
      <MemberSignature Language="F#" Value="ProvideProjectStateAfterBuild = 2" Usage="Microsoft.Build.Execution.BuildRequestDataFlags.ProvideProjectStateAfterBuild" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.BuildRequestDataFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Wenn dieses Flag vorhanden ist, enthält das <see cref="T:Microsoft.Build.Execution.BuildResult" />, das als Antwort auf diese Anforderung ausgegeben wird, <see cref="P:Microsoft.Build.Execution.BuildResult.ProjectStateAfterBuild" />.</summary>
      </Docs>
    </Member>
    <Member MemberName="ProvideSubsetOfStateAfterBuild">
      <MemberSignature Language="C#" Value="ProvideSubsetOfStateAfterBuild" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Build.Execution.BuildRequestDataFlags ProvideSubsetOfStateAfterBuild = int32(32)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Build.Execution.BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild" />
      <MemberSignature Language="VB.NET" Value="ProvideSubsetOfStateAfterBuild" />
      <MemberSignature Language="C++ CLI" Value="ProvideSubsetOfStateAfterBuild" />
      <MemberSignature Language="F#" Value="ProvideSubsetOfStateAfterBuild = 32" Usage="Microsoft.Build.Execution.BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.BuildRequestDataFlags</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary>Wenn dieses Flag vorhanden ist, enthält das als Antwort auf diese Anforderung ausgestellte <see cref="T:Microsoft.Build.Execution.BuildResult" /> einen <see cref="P:Microsoft.Build.Execution.BuildResult.ProjectStateAfterBuild" />, der NUR die explizit angeforderten Eigenschaften, Elemente und Metadaten enthält.</summary>
      </Docs>
    </Member>
    <Member MemberName="ReplaceExistingProjectInstance">
      <MemberSignature Language="C#" Value="ReplaceExistingProjectInstance" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Build.Execution.BuildRequestDataFlags ReplaceExistingProjectInstance = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Build.Execution.BuildRequestDataFlags.ReplaceExistingProjectInstance" />
      <MemberSignature Language="VB.NET" Value="ReplaceExistingProjectInstance" />
      <MemberSignature Language="C++ CLI" Value="ReplaceExistingProjectInstance" />
      <MemberSignature Language="F#" Value="ReplaceExistingProjectInstance = 1" Usage="Microsoft.Build.Execution.BuildRequestDataFlags.ReplaceExistingProjectInstance" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.BuildRequestDataFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Wenn dieses Flag vorhanden ist, wird die vorhandene ProjectInstance im Build durch dieses ersetzt.</summary>
      </Docs>
    </Member>
    <Member MemberName="SkipNonexistentTargets">
      <MemberSignature Language="C#" Value="SkipNonexistentTargets" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Build.Execution.BuildRequestDataFlags SkipNonexistentTargets = int32(16)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Build.Execution.BuildRequestDataFlags.SkipNonexistentTargets" />
      <MemberSignature Language="VB.NET" Value="SkipNonexistentTargets" />
      <MemberSignature Language="C++ CLI" Value="SkipNonexistentTargets" />
      <MemberSignature Language="F#" Value="SkipNonexistentTargets = 16" Usage="Microsoft.Build.Execution.BuildRequestDataFlags.SkipNonexistentTargets" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.BuildRequestDataFlags</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>Wenn dieses Flag vorhanden ist, werden die Ziele auf oberster Ebene in der Buildanforderung übersprungen, sofern diese Ziele nicht im zu erstellenden Projekt definiert sind. Dies gilt nur für diese Buildanforderung (wenn ein anderes Ziel das „fehlende Ziel“ an einer anderen Stelle aufruft, führt dies nach wie vor zu einem Fehler).</summary>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <Metadata><Meta Name="ms.openlocfilehash" Value="911b5f562321df231edcf6b89e82bd8981861fad" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51893283" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.SpellCheck" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpellCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpellCheck sealed" />
  <TypeSignature Language="F#" Value="type SpellCheck = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Funktionen für die Rechtschreibprüfung in Echtzeit für Steuerelemente zur Textbearbeitung bereit, z. B. <see cref="T:System.Windows.Controls.TextBox" /> und <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie zum Aktivieren der Rechtschreibprüfung aus der <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> Eigenschaft `true` in einem Textbearbeitungssteuerelement. Wenn diese Rechtschreibprüfung aktiviert ist, werden falsch geschriebene Wörter mit einer roten Wellenlinie unterstrichen, wie in der folgenden Abbildung dargestellt. Rechtschreibprüfung wird nur unterstützt, wenn WPF ein Standardwörterbuch enthält. In [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], WPF bietet Wörterbücher für Englisch, Französisch, Deutsch und Spanisch.  
  
 ![TextBox mit Rechtschreibprüfung&#45;überprüfen](~/add/media/editing-textbox-with-spellchecking.png "Textbox mit Rechtschreibprüfung")  
  
 Um ein benutzerdefiniertes Wörterbuch hinzuzufügen, fügen Sie den Speicherort der Lexikondatei, die die <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> Auflistung.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomDictionaries As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ CustomDictionaries { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomDictionaries : System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung von Lexikonspeicherorten ab, die für die benutzerdefinierte Rechtschreibprüfung verwendet werden.</summary>
        <value>Die Auflistung von Lexikonspeicherorten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden von benutzerdefinierten Wörterbüchern Lexikondateien, die um Textdateien handelt, die eine lex-Dateierweiterung aufweisen. Jede Zeile ein Lexikondatei enthält ein einzelnes Wort, das als zulässige Rechtschreibung akzeptiert wird. Die erste Zeile der Datei kann einen Gebietsschemabezeichner (LCID) angeben, dem für das Wörterbuch gilt. Wenn das Gebietsschema nicht angegeben wird, gilt für alle Sprachen das Wörterbuch. Weitere Informationen finden Sie unter [Gebietsschema-IDs](https://go.microsoft.com/fwlink/?LinkId=165561). Das folgende Beispiel zeigt die ersten Zeilen einer Lexikon-Datei für Englisch.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 An einen oder mehrere benutzerdefinierte Wörterbücher, die für eine <xref:System.Windows.Controls.TextBox> oder für jede abgeleitete Klasse <xref:System.Windows.Controls.Primitives.TextBoxBase>, geben Sie den Speicherort der Lexikondatei durch hinzufügen den URI für die Datei, die die <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> Auflistung.  
  
> [!NOTE]
>  Mithilfe von <xref:System.Collections.IList.Insert%2A> zum Hinzufügen einer Datei, die <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> der Garbage Collection durch eine Ausnahme. Verwenden Sie stattdessen <xref:System.Collections.IList.Add%2A> und <xref:System.Collections.IList.Remove%2A> beim Aktualisieren der Sammlung.  
  
 Die Lexikondateien können eingefügt werden in der Anwendung als Inhaltsdateien auf dem lokalen Computer installiert oder in einer lokalen kompilierten Ressourcendateien referenzierten Assemblys. Sie können die Datei mithilfe der Paket-URIs verweisen. Weitere Informationen finden Sie unter [Paket-URI in WPF](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md).  
  
 Legen Sie zum Aktivieren der Rechtschreibprüfung aus der <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> Eigenschaft `true` auf eine <xref:System.Windows.Controls.TextBox> oder auf eine beliebige abgeleitete Klasse <xref:System.Windows.Controls.Primitives.TextBoxBase>. Alle benutzerdefinierten Wörterbücher, <xref:System.Windows.Controls.TextBox> zusätzlich zu den Standard-Rechtschreibprüfung verwendet werden. Weitere Informationen über die Rechtschreibprüfung finden Sie unter <xref:System.Windows.Controls.SpellCheck>.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie zwei benutzerdefinierte Wörterbücher, Hinzufügen einer <xref:System.Windows.Controls.RichTextBox>. Das erste benutzerdefinierte Wörterbuch (customwords.lex) wird in XAML hinzugefügt. Die Datei wird in der Anwendung als eine Datei mit Inhalt enthalten und in das Ausgabeverzeichnis kopiert. Verwenden der <xref:System.Uri> -Element, müssen Sie den System-Namespace enthalten.  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 Das zweite Benutzerwörterbuch (customwords2.lex) hinzugefügt wird, die <xref:System.Windows.Controls.Primitives.ButtonBase.Click> -Ereignishandler. Die Datei als Ressourcendatei enthalten ist, und klicken Sie in der Assembly mit dem Namen WPFCustomDictionary kompiliert.  
  
 [!code-xaml[WpfCustomDictionary#1](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml#1)]  
  
 [!code-csharp[WpfCustomDictionary#2](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/wpfcustomdictionary/vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
        <altmember cref="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomDictionariesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomDictionariesProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomDictionariesProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetCustomDictionaries(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetCustomDictionaries : System.Windows.Controls.Primitives.TextBoxBase -&gt; System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.GetCustomDictionaries textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Das Steuerelement für die Textbearbeitung, dessen Auflistung von Lexikondateien abgerufen wird.</param>
        <summary>Ruft die Auflistung von Lexikonspeicherorten ab, die in einem angegebenen Steuerelement für die Textbearbeitung für benutzerdefinierte Rechtschreibprüfungen verwendet werden.</summary>
        <returns>Die Auflistung von Lexikonspeicherorten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden von benutzerdefinierten Wörterbüchern Lexikondateien, die einfache Textdateien sind, die eine lex-Dateierweiterung aufweisen. Jede Zeile ein Lexikondatei enthält ein einzelnes Wort, das als zulässige Rechtschreibung akzeptiert wird. Die erste Zeile der Datei kann einen Gebietsschemabezeichner (LCID) angeben, dem für das Wörterbuch gilt. Wenn das Gebietsschema nicht angegeben wird, gilt für alle Sprachen das Wörterbuch. Weitere Informationen finden Sie unter [Gebietsschema-IDs](https://go.microsoft.com/fwlink/?LinkId=165561). Das folgende Beispiel zeigt die ersten Zeilen einer Lexikon-Datei für Englisch.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 An einen oder mehrere benutzerdefinierte Wörterbücher, die für eine <xref:System.Windows.Controls.TextBox> oder eine beliebige Klasse, die von abgeleitet <xref:System.Windows.Controls.Primitives.TextBoxBase>, geben Sie den Speicherort der Lexikondatei durch den URI für die Datei hinzufügen die <xref:System.Collections.IList> zurückgegebenes der <xref:System.Windows.Controls.SpellCheck.GetCustomDictionaries%2A> Methode.  
  
 Legen Sie zum Aktivieren der Rechtschreibprüfung aus der <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> Eigenschaft `true` auf eine <xref:System.Windows.Controls.TextBox> oder auf eine beliebige abgeleitete Klasse <xref:System.Windows.Controls.Primitives.TextBoxBase>. Alle benutzerdefinierten Wörterbücher, <xref:System.Windows.Controls.TextBox> zusätzlich zu den Standard-Rechtschreibprüfung verwendet werden. Weitere Informationen über die Rechtschreibprüfung finden Sie unter <xref:System.Windows.Controls.SpellCheck>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" /> ist <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase -&gt; bool" Usage="System.Windows.Controls.SpellCheck.GetIsEnabled textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Das zu überprüfende Steuerelement für die Textbearbeitung. Beispiele für ein solches Steuerelement sind <see cref="T:System.Windows.Controls.TextBox" /> und <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob die Rechtschreibprüfung für das angegebene Steuerelement für die Textbearbeitung aktiviert ist.</summary>
        <returns><see langword="true" />, wenn die Rechtschreibprüfung für das Textbearbeitungssteuerelement aktiviert ist, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, ob die Rechtschreibprüfung für dieses Steuerelement für die Textbearbeitung (z. B. <see cref="T:System.Windows.Controls.TextBox" /> oder <see cref="T:System.Windows.Controls.RichTextBox" />) aktiviert wird, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Rechtschreibprüfung für das Steuerelement aktiviert wird, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Abhängigkeitseigenschaft verfügt auch über eine spezielle angefügte Eigenschaft von nur-schreiben-Verwendung. Die [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Syntax zum Festlegen der Eigenschaft ist `<` *TextBoxBaseClass* **SpellCheck.IsEnabled**`="`*BoolValue* `" .../>`, wobei *TextBoxBaseClass* ist ein Objektelement für eine abgeleitete Klasse <xref:System.Windows.Controls.Primitives.TextBoxBase>, und *BoolValue* ist entweder `true` oder `false` (Groß-/Kleinschreibung / Kleinschreibung beachten). Um die Eigenschaft als angefügte Eigenschaft im Code festgelegt werden, finden Sie unter den <xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A> Methode. Es gibt keinen entsprechenden `GetIsEnabled` Accessor. Um den Wert abzurufen, rufen Sie das aktuelle <xref:System.Windows.Controls.SpellCheck> -Objekt aus der <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> -Eigenschaft, und rufen Sie anschließend den Wert des der <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> Eigenschaft aus, die <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Feld "ID"|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|Legen Sie auf der Metadaten-Eigenschaften `true`|Keiner|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.SpellCheck.IsEnabled" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, bool value);" />
      <MemberSignature Language="F#" Value="static member SetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase * bool -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetIsEnabled (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Das Textbearbeitungssteuerelement, für das die Rechtschreibprüfung aktiviert oder deaktiviert werden soll. Beispiele für ein solches Steuerelement sind <see cref="T:System.Windows.Controls.TextBox" /> und <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">Ein boolescher Wert, der angibt, ob die Rechtschreibprüfung für das Textbearbeitungssteuerelement aktiviert ist.</param>
        <summary>Aktiviert oder deaktiviert die Rechtschreibprüfung für das angegebene Textbearbeitungssteuerelement, etwa <see cref="T:System.Windows.Controls.TextBox" /> oder <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht die Verwendung einer angefügten Eigenschaft für die <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> -Eigenschaft in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. Das folgende Beispiel zeigt die [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Nutzung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetSpellingReform(System.Windows.Controls.Primitives.TextBoxBase,System.Windows.Controls.SpellingReform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSpellingReform(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, System::Windows::Controls::SpellingReform value);" />
      <MemberSignature Language="F#" Value="static member SetSpellingReform : System.Windows.Controls.Primitives.TextBoxBase * System.Windows.Controls.SpellingReform -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetSpellingReform (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Das Steuerelement für die Textbearbeitung, auf das die Rechtschreibprüfung angewendet wird. Beispiele für ein solches Steuerelement sind <see cref="T:System.Windows.Controls.TextBox" /> und <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">Der <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" />-Wert, der die Rechtschreibreformregeln bestimmt.</param>
        <summary>Bestimmt die Rechtschreibreformregeln, die von der Rechtschreibprüfung verwendet werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Rechtschreibreformregeln, die von dieser Methode zugegriffen werden, finden Sie in der Schreibweise für Französisch und Deutsch Reformen der 1990er Jahre. Diese Methode hat keine Auswirkungen, wenn er mit einer beliebigen anderen Sprache verwendet wird.  
  
 Diese Methode ermöglicht die Verwendung einer angefügten Eigenschaft für die <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> -Eigenschaft in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberSignature Language="VB.NET" Value="Public Property SpellingReform As SpellingReform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::SpellingReform SpellingReform { System::Windows::Controls::SpellingReform get(); void set(System::Windows::Controls::SpellingReform value); };" />
      <MemberSignature Language="F#" Value="member this.SpellingReform : System.Windows.Controls.SpellingReform with get, set" Usage="System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Rechtschreibreformregeln ab, die von der Rechtschreibprüfung verwendet werden, oder legt sie fest.</summary>
        <value>Die Rechtschreibreformregeln, die von der Rechtschreibprüfung verwendet werden. Der Standardwert ist <see cref="F:System.Windows.Controls.SpellingReform.PreAndPostreform" /> für Französisch und <see cref="F:System.Windows.Controls.SpellingReform.Postreform" /> für Deutsch.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Rechtschreibreformregeln, die von dieser Eigenschaft bestimmt werden, finden Sie in der Schreibweise für Französisch und Deutsch Reformen. Diese Eigenschaft hat keine Auswirkungen, wenn er mit einer beliebigen anderen Sprache verwendet wird.  
  
 Diese Abhängigkeitseigenschaft verfügt auch über eine spezielle angefügte Eigenschaft von nur-schreiben-Verwendung. Die [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Syntax zum Festlegen der Eigenschaft ist `<` *TextBoxBaseClass* **SpellCheck.SpellingReform**`="`*EnumValue* `" .../>`, wobei *TextBoxBaseClass* ist ein Objektelement für eine abgeleitete Klasse <xref:System.Windows.Controls.Primitives.TextBoxBase>, und *EnumValue* ist ein Zeichenfolgenname für den Wert der <xref:System.Windows.Controls.SpellingReform> -Enumeration. Um die Eigenschaft als angefügte Eigenschaft im Code festgelegt werden, finden Sie unter den <xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A> Methode. Es gibt keinen entsprechenden `GetSpellingReform` Accessor. Um den Wert abzurufen, rufen Sie das aktuelle <xref:System.Windows.Controls.SpellCheck> -Objekt aus der <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> -Eigenschaft, und rufen Sie anschließend den Wert des der <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> Eigenschaft aus, die <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Feld "ID"|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|Legen Sie auf der Metadaten-Eigenschaften `true`|Keiner|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SpellingReformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SpellingReformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SpellingReformProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
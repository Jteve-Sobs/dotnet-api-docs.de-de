<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fcf2137c4c51b05a5901e274d5ba109263153ba1" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69212819" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.SpellCheck" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpellCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpellCheck sealed" />
  <TypeSignature Language="F#" Value="type SpellCheck = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Funktionen für die Rechtschreibprüfung in Echtzeit für Steuerelemente für die Textbearbeitung bereit, z. B. <see cref="T:System.Windows.Controls.TextBox" /> und <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um die Rechtschreibprüfung zu aktivieren, legen <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> Sie die `true` -Eigenschaft in einem Textbearbeitungs Steuerelement auf fest. Wenn diese Rechtschreibprüfung aktiviert ist, werden falsch geschriebene Wörter mithilfe einer roten Wellenlinie unterstrichen, wie in der folgenden Abbildung dargestellt. Die Rechtschreibprüfung wird nur unterstützt, wenn WPF ein Standard Wörterbuch bereitstellt. In [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]stellt WPF Wörterbücher für Englisch, Französisch, Deutsch und Spanisch bereit.  
  
 ![Textfeld mit Rechtschreib&#45;Prüfung] (~/add/media/editing-textbox-with-spellchecking.png "Textfeld mit Rechtschreibprüfung")  
  
 Fügen Sie der-Auflistung den Speicherort der Lexikon-Datei <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> hinzu, um ein benutzerdefiniertes Wörterbuch hinzuzufügen.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomDictionaries As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ CustomDictionaries { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomDictionaries : System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung von Lexikonspeicherorten ab, die für die benutzerdefinierte Rechtschreibprüfung verwendet werden.</summary>
        <value>Die Auflistung von Lexikonspeicherorten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Benutzerdefinierte Wörterbücher verwenden Lexikon-Dateien, bei denen es sich um Textdateien mit der Erweiterung. Lex handelt. Jede Zeile einer Lexikon-Datei enthält ein einzelnes Wort, das als legitime Schreibweise akzeptiert wird. Die erste Zeile der Datei kann einen Gebiets Schema Bezeichner (Locale Identifier, LCID) angeben, für den das Wörterbuch gilt. Wenn das Gebiets Schema nicht angegeben wird, gilt das Wörterbuch für alle Sprachen. Weitere Informationen finden Sie unter Gebiets Schema- [IDs](https://go.microsoft.com/fwlink/?LinkId=165561). Das folgende Beispiel zeigt die ersten Zeilen einer Lexikon-Datei für die englische Sprache.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Geben Sie den Speicherort der Lexikon- <xref:System.Windows.Controls.TextBox> Datei an, indem Sie <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> der- <xref:System.Windows.Controls.Primitives.TextBoxBase>Auflistung den URI für die Datei hinzufügen, um eine oder mehrere benutzerdefinierte Wörterbücher für einen oder für eine beliebige Klasse anzugeben, die von abgeleitet wird.  
  
> [!NOTE]
>  Durch <xref:System.Collections.IList.Insert%2A> die<xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> Verwendung von zum Hinzufügen einer Datei zur Auflistung wird eine Ausnahme ausgelöst. Verwenden <xref:System.Collections.IList.Add%2A> Sie stattdessen und <xref:System.Collections.IList.Remove%2A> , um die Auflistung zu aktualisieren.  
  
 Die Lexikon-Dateien können in der Anwendung als Inhalts Dateien, die auf dem lokalen Computer installiert sind, oder als Ressourcen Dateien, die in eine lokale Assembly, auf die verwiesen wird, kompiliert werden Sie können mit Paket-URIs auf die Datei verweisen. Weitere Informationen finden Sie unter [Paket-URI in WPF](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md).  
  
 Um die Rechtschreibprüfung zu aktivieren, legen <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> Sie `true` die-Eigenschaft <xref:System.Windows.Controls.TextBox> für einen oder für jede Klasse, <xref:System.Windows.Controls.Primitives.TextBoxBase>die von abgeleitet wird, auf fest. Alle benutzerdefinierten Wörterbücher <xref:System.Windows.Controls.TextBox> für, die zusätzlich zur Standard Rechtschreibprüfung verwendet werden. Weitere Informationen zur Rechtschreibprüfung finden <xref:System.Windows.Controls.SpellCheck>Sie unter.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie zwei benutzerdefinierte Wörter <xref:System.Windows.Controls.RichTextBox>Bücher zu einem hinzufügen. Das erste benutzerdefinierte Wörterbuch (customwords. lex) wird in XAML hinzugefügt. Die Datei ist in der Anwendung als Inhalts Datei enthalten und in das Ausgabeverzeichnis kopiert. Um das <xref:System.Uri> -Element zu verwenden, müssen Sie den System-Namespace einschließen.  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 Das zweite benutzerdefinierte Wörterbuch (customwords2. lex) wird im <xref:System.Windows.Controls.Primitives.ButtonBase.Click> -Ereignishandler hinzugefügt. Die Datei ist als Ressourcen Datei enthalten und in der Anwendungsassembly mit dem Namen "wpfcustomdictionary" kompiliert.  
  
 [!code-xaml[WpfCustomDictionary#1](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml#1)]  
  
 [!code-csharp[WpfCustomDictionary#2](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/wpfcustomdictionary/vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
        <altmember cref="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomDictionariesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomDictionariesProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomDictionariesProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetCustomDictionaries(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetCustomDictionaries : System.Windows.Controls.Primitives.TextBoxBase -&gt; System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.GetCustomDictionaries textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Das Steuerelement für die Textbearbeitung, dessen Auflistung von Lexikondateien abgerufen wird.</param>
        <summary>Ruft die Auflistung von Lexikonspeicherorten ab, die in einem angegebenen Steuerelement für die Textbearbeitung für benutzerdefinierte Rechtschreibprüfungen verwendet werden.</summary>
        <returns>Die Auflistung von Lexikonspeicherorten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Benutzerdefinierte Wörterbücher verwenden Lexikon-Dateien, bei denen es sich um einfache Textdateien mit der Erweiterung. Lex handelt. Jede Zeile einer Lexikon-Datei enthält ein einzelnes Wort, das als legitime Schreibweise akzeptiert wird. Die erste Zeile der Datei kann einen Gebiets Schema Bezeichner (Locale Identifier, LCID) angeben, für den das Wörterbuch gilt. Wenn das Gebiets Schema nicht angegeben wird, gilt das Wörterbuch für alle Sprachen. Weitere Informationen finden Sie unter Gebiets Schema- [IDs](https://go.microsoft.com/fwlink/?LinkId=165561). Das folgende Beispiel zeigt die ersten Zeilen einer Lexikon-Datei für die englische Sprache.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Um ein oder mehrere benutzerdefinierte Wörterbücher für <xref:System.Windows.Controls.TextBox> eine oder eine beliebige Klasse anzugeben <xref:System.Windows.Controls.Primitives.TextBoxBase>, die von abgeleitet ist, geben Sie den Speicherort der Lexikon-Datei an, <xref:System.Collections.IList> indem Sie den <xref:System.Windows.Controls.SpellCheck.GetCustomDictionaries%2A> URI für die Datei der von der-Methode zurückgegebenen hinzufügen.  
  
 Um die Rechtschreibprüfung zu aktivieren, legen <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> Sie `true` die-Eigenschaft <xref:System.Windows.Controls.TextBox> für einen oder für jede Klasse, <xref:System.Windows.Controls.Primitives.TextBoxBase>die von abgeleitet wird, auf fest. Alle benutzerdefinierten Wörterbücher <xref:System.Windows.Controls.TextBox> für, die zusätzlich zur Standard Rechtschreibprüfung verwendet werden. Weitere Informationen zur Rechtschreibprüfung finden <xref:System.Windows.Controls.SpellCheck>Sie unter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" /> ist <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase -&gt; bool" Usage="System.Windows.Controls.SpellCheck.GetIsEnabled textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Das zu überprüfende Steuerelement für die Textbearbeitung. Beispielsteuerelemente sind <see cref="T:System.Windows.Controls.TextBox" /> und <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob die Rechtschreibprüfung für das angegebene Steuerelement für die Textbearbeitung aktiviert ist.</summary>
        <returns><see langword="true" />, wenn die Rechtschreibprüfung für das Textbearbeitungssteuerelement aktiviert ist, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, ob die Rechtschreibprüfung für dieses Steuerelement für die Textbearbeitung (z. B. <see cref="T:System.Windows.Controls.TextBox" /> oder <see cref="T:System.Windows.Controls.RichTextBox" />) aktiviert ist, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Rechtschreibprüfung für das Steuerelement aktiviert wird, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Abhängigkeits Eigenschaft verfügt auch über eine spezialisierte Verwendung von Schreib geschützter angefügter Eigenschaften. Die [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Syntax für das Festlegen der Eigenschaft `<`ist " *textboxbaseclass* **Rechtschreib Check. isaktivierter**`="`*boolValue*`" .../>`", wobei " *textboxbaseclass* " ein Objekt Element für eine Klasse ist, die wird von <xref:System.Windows.Controls.Primitives.TextBoxBase>abgeleitet, und *boolValue* ist `true` entweder `false` oder (Groß-/Kleinschreibung nicht beachtet). Informationen zum Festlegen der-Eigenschaft als angefügte Eigenschaft im Code finden <xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A> Sie unter der-Methode. Es ist kein passender `GetIsEnabled` Accessor vorhanden. Um den Wert zu erhalten, können Sie <xref:System.Windows.Controls.SpellCheck> das aktuelle- <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> Objekt aus der-Eigenschaft und dann den Wert <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> der-Eigenschaft <xref:System.Windows.Controls.SpellCheck>aus dieser-Eigenschaft erhalten.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.SpellCheck.IsEnabled" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, bool value);" />
      <MemberSignature Language="F#" Value="static member SetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase * bool -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetIsEnabled (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Das Steuerelement für die Textbearbeitung, für das die Rechtschreibprüfung aktiviert bzw. deaktiviert werden soll. Beispielsteuerelemente sind <see cref="T:System.Windows.Controls.TextBox" /> und <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">Ein boolescher Wert, der angibt, ob die Rechtschreibprüfung für das Steuerelement für die Textbearbeitung aktiviert ist.</param>
        <summary>Aktiviert bzw. deaktiviert die Rechtschreibprüfung für das angegebene Steuerelement für die Textbearbeitung (z. B. <see cref="T:System.Windows.Controls.TextBox" /> oder <see cref="T:System.Windows.Controls.RichTextBox" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht die Verwendung der angefügten Eigenschaft <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> für die [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]-Eigenschaft in. Das folgende Beispiel zeigt die [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Verwendung von.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetSpellingReform(System.Windows.Controls.Primitives.TextBoxBase,System.Windows.Controls.SpellingReform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSpellingReform(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, System::Windows::Controls::SpellingReform value);" />
      <MemberSignature Language="F#" Value="static member SetSpellingReform : System.Windows.Controls.Primitives.TextBoxBase * System.Windows.Controls.SpellingReform -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetSpellingReform (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Das Steuerelement für die Textbearbeitung, auf das die Rechtschreibprüfung angewendet wird. Beispielsteuerelemente sind <see cref="T:System.Windows.Controls.TextBox" /> und <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">Der <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" />-Wert, der die Rechtschreibreformregeln bestimmt.</param>
        <summary>Bestimmt die Rechtschreibreformregeln, die von der Rechtschreibprüfung verwendet werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Rechtschreibreform Regeln, auf die von dieser Methode zugegriffen wird, beziehen sich auf die französischen und deutschen Rechtschreibreform von 1990. Diese Methode hat keine Auswirkungen, wenn Sie mit einer anderen Sprache verwendet wird.  
  
 Diese Methode ermöglicht die Verwendung der angefügten Eigenschaft <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> für die [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]-Eigenschaft in.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberSignature Language="VB.NET" Value="Public Property SpellingReform As SpellingReform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::SpellingReform SpellingReform { System::Windows::Controls::SpellingReform get(); void set(System::Windows::Controls::SpellingReform value); };" />
      <MemberSignature Language="F#" Value="member this.SpellingReform : System.Windows.Controls.SpellingReform with get, set" Usage="System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Rechtschreibreformregeln ab, die von der Rechtschreibprüfung verwendet werden, oder legt diese fest.</summary>
        <value>Die Rechtschreibreformregeln, die von der Rechtschreibprüfung verwendet werden. Der Standardwert ist <see cref="F:System.Windows.Controls.SpellingReform.PreAndPostreform" /> für Französisch und <see cref="F:System.Windows.Controls.SpellingReform.Postreform" /> für Deutsch.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Rechtschreibreform Regeln, die durch diese Eigenschaft bestimmt werden, beziehen sich auf die Rechtschreibreform Französisch und Deutsch. Diese Eigenschaft hat keine Auswirkung, wenn Sie mit einer anderen Sprache verwendet wird.  
  
 Diese Abhängigkeits Eigenschaft verfügt auch über eine spezialisierte Verwendung von Schreib geschützter angefügter Eigenschaften. Die [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Syntax zum Festlegen der Eigenschaft ist `<`" *textboxbaseclass* **Rechtschreib Check. SpellingReform**`="`*enumValue*`" .../>`", wobei " *textboxbaseclass* " ein Objekt Element für eine Klasse ist. , der von <xref:System.Windows.Controls.Primitives.TextBoxBase>abgeleitet ist, und *enumValue* ist ein Zeichen folgen Name für <xref:System.Windows.Controls.SpellingReform> einen Wert der-Enumeration. Informationen zum Festlegen der-Eigenschaft als angefügte Eigenschaft im Code finden <xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A> Sie unter der-Methode. Es ist kein passender `GetSpellingReform` Accessor vorhanden. Um den Wert zu erhalten, können Sie <xref:System.Windows.Controls.SpellCheck> das aktuelle- <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> Objekt aus der-Eigenschaft und dann den Wert <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> der-Eigenschaft <xref:System.Windows.Controls.SpellCheck>aus dieser-Eigenschaft erhalten.  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SpellingReformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SpellingReformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SpellingReformProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

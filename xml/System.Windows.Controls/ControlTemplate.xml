<Type Name="ControlTemplate" FullName="System.Windows.Controls.ControlTemplate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="324f16746ddb46e5a6466e0f0481e41e883d6726" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75175364" /></Metadata><TypeSignature Language="C#" Value="public class ControlTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ControlTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type ControlTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gibt die visuelle Struktur und Verhaltensaspekte eines <see cref="T:System.Windows.Controls.Control" /> an, das für mehrere Instanzen des Steuerelements gemeinsam verwendet werden kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit der <xref:System.Windows.Controls.ControlTemplate> können Sie die visuelle Struktur eines Steuer Elements angeben. Der Autor des Steuer Elements kann die Standard <xref:System.Windows.Controls.ControlTemplate> definieren, und der Anwendungs Autor kann die <xref:System.Windows.Controls.ControlTemplate> überschreiben, um die visuelle Struktur des Steuer Elements zu rekonstruieren.  
  
 Steuerelement Vorlagen sind eines der zahlreichen Features, die vom [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Stil-und Vorlagen Modell angeboten werden. Das Format und das Vorlagen Modell bieten Ihnen sehr hohe Flexibilität, dass Sie in vielen Fällen keine eigenen Steuerelemente schreiben müssen. Wenn Sie ein Anwendungs Autor sind, der die Visualisierung Ihres Steuer Elements ändern oder die <xref:System.Windows.Controls.ControlTemplate> eines vorhandenen Steuer Elements ersetzen möchte, finden Sie in den Themen zum [formatieren und](~/docs/framework/wpf/controls/styling-and-templating.md) Erstellen von Beispielen und eine ausführliche Erörterung.  
  
 Wenn Sie ein eigenes Steuerelement schreiben, finden Sie weitere Informationen unter "Erstellen eines benutzerdefinierten Steuer Elements" in der [Übersicht über](~/docs/framework/wpf/controls/control-authoring-overview.md)die Dokument Erstellung.  
  
 Eine <xref:System.Windows.Controls.ControlTemplate> ist als eigenständige Einheit für Implementierungsdetails gedacht, die für externe Benutzer und Objekte, einschließlich Stile, unsichtbar ist. Die einzige Möglichkeit, den Inhalt der Steuerelement Vorlage zu bearbeiten, liegt innerhalb derselben Steuerelement Vorlage.  
  
<a name="xamlObjectElementUsage_VisualTree"></a>   
## <a name="xaml-property-element-usage"></a>Verwendung von XAML-Eigenschaftenelementen  
  
```xaml
<ControlTemplate>  
  <VisualTreeRootNode>
    VisualTreeNodeContents  
  </VisualTreeRootNode>  
</ControlTemplate>  
```  
  
<a name="xamlValues_VisualTree"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 *ControlTemplate*  
 Object-Element für <xref:System.Windows.Controls.ControlTemplate> oder eine abgeleitete Klasse.  
  
 *VisualTreeRootNode*  
 Ein einzelnes [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Element als unmittelbar untergeordnetes Element des <xref:System.Windows.Controls.ControlTemplate> (oder einer abgeleiteten Klasse). Vorlagen müssen einen einzelnen Stamm Knoten aufweisen. Um eine nützliche Vorlage zu generieren, wird erwartet, dass das als *VisualTreeRootNode* ausgewählte Element ein eigenes Inhalts Modell unterstützt, häufig ein Modell, das mehrere untergeordnete Elemente unterstützt.  
  
 *Visualtreenodecontent*  
 Ein oder mehrere-Elemente, die die vorgesehene Vorlage vervollständigen. Wenn das als *VisualTreeRootNode* ausgewählte Element nur ein einzelnes untergeordnetes Element unterstützt, kann nur ein Element als *visualtreenodecontent*deklariert werden. Es ist auch möglich (obwohl nicht üblich), Textinhalte bereitzustellen, wenn der ausgewählte *VisualTreeRootNode* eine Text Inhalts Eigenschaft unterstützt.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine <xref:System.Windows.Controls.Button> <xref:System.Windows.Style>, die die <xref:System.Windows.Controls.ControlTemplate> einer <xref:System.Windows.Controls.Button>festlegt:  
  
 [!code-xaml[StylingIntroSample_snippet#ButtonCT](~/samples/snippets/csharp/VS_Snippets_Wpf/StylingIntroSample_snippet/CSharp/Window1.xaml#buttonct)]     
  
 Wenn dies angewendet wird, wird der <xref:System.Windows.Controls.Button> als <xref:System.Windows.Shapes.Ellipse>angezeigt:  
  
 ![Schaltflächen-ControlTemplate-Beispiel](~/add/media/stylingintro-buttoncontroltemplate.png "Beispiel für Button-ControlTemplate")  
  
 Wenn Sie die <xref:System.Windows.Controls.Control.Template%2A>-Eigenschaft eines <xref:System.Windows.Controls.Control> auf einen neuen <xref:System.Windows.Controls.ControlTemplate> festlegen, wie im obigen Beispiel gezeigt, ersetzen Sie die gesamte Vorlage. Wie das <xref:System.Windows.Controls.Button> aussieht, wenn es im Fokus ist oder gedrückt ist, ist alles Teil der Standarddarstellung der Schaltfläche, die Sie ersetzen. Daher empfiehlt es sich, je nach Ihren Anforderungen die Definition zu platzieren, wie die Schaltfläche beim Drücken der Schaltfläche aussehen soll, usw., wie im folgenden Beispiel gezeigt:  
  
 [!code-xaml[ControlTemplateExamples#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/button.xaml#1)]  
  
 Beachten Sie, dass in diesem Beispiel auf Ressourcen verwiesen wird, die hier nicht angezeigt werden. Das vollständige Beispiel finden Sie unter [Beispiel zum Formatieren mit ControlTemplates](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating). Dieses Beispiel enthält Beispiele für Steuerelement Vorlagen für viele Steuerelemente und eignet sich am besten für den Einstieg in die Erstellung von Steuerelement Vorlagen.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Style" />
    <altmember cref="T:System.Windows.DataTemplate" />
    <altmember cref="T:System.Windows.Controls.ContentPresenter" />
    <altmember cref="T:System.Windows.Controls.ItemsPresenter" />
    <altmember cref="T:System.Windows.TemplateBindingExtension" />
    <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">Einführung in das Beispiel für formatieren und Vorlagen</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Controls.ControlTemplate" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Controls.ControlTemplate" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate(Type ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ControlTemplate : Type -&gt; System.Windows.Controls.ControlTemplate" Usage="new System.Windows.Controls.ControlTemplate targetType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">Der Typ, für den diese Vorlage bestimmt ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Controls.ControlTemplate" />-Klasse mit dem angegebenen Zieltyp.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : Type with get, set" Usage="System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Dient zum Abrufen oder Festlegen des Typs, für den diese <see cref="T:System.Windows.Controls.ControlTemplate" /> vorgesehen ist.</summary>
        <value>Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie im Ressourcenabschnitt einen eigenständigen <xref:System.Windows.Controls.ControlTemplate> haben und die <xref:System.Windows.Controls.ControlTemplate.TargetType%2A>-Eigenschaft auf einen Typ festgelegt ist, wird der <xref:System.Windows.Controls.ControlTemplate> nicht automatisch auf diesen Typ angewendet. Stattdessen müssen Sie einen `x:Key` angeben und die Vorlage explizit anwenden.  
  
 Beachten Sie außerdem, dass die <xref:System.Windows.Controls.ControlTemplate.TargetType%2A>-Eigenschaft für einen <xref:System.Windows.Controls.ControlTemplate> erforderlich ist, wenn die Vorlagen Definition eine <xref:System.Windows.Controls.ContentPresenter>enthält.  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a>Verwendung von XAML-Attributen  
  
```  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 *typeName*  
 Der Typname der Klasse. Um auf den <xref:System.Type> Namen der Klasse zu verweisen, verwenden Sie die [Markup Erweiterungen und WPF-XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung dieser Eigenschaft veranschaulicht:  
  
 [!code-xaml[ControlTemplateExamples#Label](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/label.xaml#label)]  
  
 Im obigen Beispiel wird die folgende Ressource verwendet:  
  
  
  
 Das vollständige Beispiel finden Sie unter [Beispiel zum Formatieren mit ControlTemplates](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" />-Eigenschaft darf nicht <see langword="null" /> sein, wenn die Definition der Vorlage über einen <see cref="T:System.Windows.Controls.ContentPresenter" /> verfügt.</exception>
        <exception cref="T:System.ArgumentException">Die angegebenen Typen sind nicht gültig. Der <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> eines <see cref="T:System.Windows.Controls.ControlTemplate" /> muss ein <see cref="T:System.Windows.Controls.Control" />, eine <see cref="T:System.Windows.Controls.Page" /> oder ein <see cref="T:System.Windows.Navigation.PageFunctionBase" /> sein oder von diesen erben.</exception>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von <see cref="T:System.Windows.TriggerBase" />-Objekten ab, die Eigenschaftenänderungen anwenden oder in Abhängigkeit von festgelegten Bedingungen Aktionen durchführen.</summary>
        <value>Eine Auflistung von <see cref="T:System.Windows.TriggerBase" />-Objekten. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>Verwendung von XAML-Eigenschaftenelementen  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 *oneormoretriggers*  
 Mindestens ein <xref:System.Windows.TriggerBase> Objekte (in der Regel handelt es sich hierbei um einen <xref:System.Windows.Trigger>).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung dieser Eigenschaft veranschaulicht:  
  
 [!code-xaml[ControlTemplateExamples#ToolTip](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/tooltip.xaml#tooltip)]  
  
 Im obigen Beispiel werden die folgenden Ressourcen verwendet:  
  
  
  
  
 Das vollständige Beispiel finden Sie unter [Beispiel zum Formatieren mit ControlTemplates](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating).  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">Einführung in das Beispiel für formatieren und Vorlagen</related>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="controlTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">Das Element, auf das diese Vorlage angewendet wird.</param>
        <summary>Vergleicht das auf Vorlagen basierende übergeordnete Element mit einer Reihe von Regeln.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die-Methode verwendet die folgenden Regeln:  
  
 1. Der `templatedParent` kann nicht den Typ "<xref:System.Windows.FrameworkContentElement>" aufweisen.  
  
 2. Der `templatedParent` kann nicht vom Typ <xref:System.Windows.FrameworkElement> sein, der kein <xref:System.Windows.Controls.Control>ist.  
  
 3. Der `templatedParent` darf kein <xref:System.Windows.Controls.Control> sein, der nicht mit dem <xref:System.Windows.Controls.ControlTemplate>verknüpft ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die <paramref name="templatedParent" /> darf nicht <see langword="null" /> sein.</exception>
        <exception cref="T:System.ArgumentException">Sie müssen das <see cref="T:System.Windows.Controls.ControlTemplate" /> einem <see cref="T:System.Windows.Controls.Control" /> zuordnen, indem Sie die <see cref="P:System.Windows.Controls.Control.Template" />-Eigenschaft festlegen, bevor Sie das <see cref="T:System.Windows.Controls.ControlTemplate" /> für das <see cref="T:System.Windows.Controls.Control" /> verwenden.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

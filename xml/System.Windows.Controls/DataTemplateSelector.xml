<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="08415578d870ec8318f43aa466cb7c6552eb91f5" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82357010" /></Metadata><TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <TypeSignature Language="F#" Value="type DataTemplateSelector = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Bietet eine Möglichkeit zum Auswählen einer <see cref="T:System.Windows.DataTemplate" /> auf der Grundlage des Datenobjekts und des datengebundenen Elements.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel erstellen Sie eine <xref:System.Windows.Controls.DataTemplateSelector>, wenn mehrere <xref:System.Windows.DataTemplate> für denselben Objekttyp vorhanden sind und Sie Ihre eigene Logik zum Auswählen eines <xref:System.Windows.DataTemplate> bereitstellen möchten, das auf der Grundlage der Eigenschaften der einzelnen Datenobjekte angewendet werden soll. Beachten Sie, dass Sie die <xref:System.Windows.DataTemplate.DataType%2A>-Eigenschaft für die <xref:System.Windows.DataTemplate>festlegen können, wenn Sie über Objekte unterschiedlicher Typen verfügen. Wenn Sie dies tun, müssen Sie keine <xref:System.Windows.Controls.DataTemplateSelector>erstellen. Wenn Sie über Objekte desselben Typs, aber mit unterschiedlichen Eigenschaften verfügen, können Sie auch die Verwendung einer <xref:System.Windows.DataTrigger> oder eines Daten Konverters in Erwägung gezogen. Weitere Informationen finden Sie unter [Übersicht über Datenvorlagen](~/docs/framework/wpf/data/data-templating-overview.md).  
  
 Erstellen Sie eine-Klasse, die von <xref:System.Windows.Controls.DataTemplateSelector> erbt, und überschreiben Sie die <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>-Methode, um eine Vorlagen Auswahl zu erstellen. Nachdem die Klasse definiert wurde, können Sie der Vorlagen Auswahl Eigenschaft des Elements eine Instanz der-Klasse zuweisen.  
  
   
  
## Examples  
 In diesem Beispiel ist die Bindungs Quelle eine Liste von `Task`-Objekten. Eine der Eigenschaften eines `Task` Objekts ist `Priority`. Es sind zwei Datenvorlagen definiert, `myTaskTemplate` und `importantTaskTemplate`.  
  
 Erstellen Sie eine Unterklasse von <xref:System.Windows.Controls.DataTemplateSelector>, und überschreiben Sie die <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>-Methode, um zu bestimmen, welche <xref:System.Windows.DataTemplate> basierend auf dem `Priority` Wert des Datenobjekts verwendet werden soll. Im folgenden Beispiel stellt die <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>-Methode Logik bereit, um die entsprechende Vorlage basierend auf dem Wert der `Priority`-Eigenschaft zurückzugeben. Die zurück zugebende Vorlage befindet sich in den Ressourcen des umschließenden <xref:System.Windows.Window>-Elements.  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 Wir können dann den `TaskListDataTemplateSelector` als Ressource deklarieren:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Um die Vorlagen Auswahl Ressource zu verwenden, weisen Sie Sie der <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A>-Eigenschaft des <xref:System.Windows.Controls.ListBox>zu. Der <xref:System.Windows.Controls.ListBox> Ruft die <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>-Methode der `TaskListDataTemplateSelector` für jedes der Elemente in der zugrunde liegenden Auflistung auf. Beim Aufruf wird das Datenobjekt als Elementparameter übergeben. Der <xref:System.Windows.DataTemplate>, der von der-Methode zurückgegeben wird, wird dann auf das Datenobjekt angewendet.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Das vollständige Beispiel finden Sie unter [Einführung in das Datenvorlagenbeispiel](https://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Windows.Controls.DataTemplateSelector" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberSignature Language="F#" Value="abstract member SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate&#xA;override this.SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate" Usage="dataTemplateSelector.SelectTemplate (item, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">Das Datenobjekt, für das die Vorlage ausgewählt werden soll.</param>
        <param name="container">Das datengebundene Objekt.</param>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse eine auf benutzerdefinierter Logik basierende <see cref="T:System.Windows.DataTemplate" /> zurück.</summary>
        <returns>Gibt einen <see cref="T:System.Windows.DataTemplate" />- oder <see langword="null" />-Wert zurück. Standardwert: <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel verwenden Sie eine Vorlagen Auswahl, wenn Sie für denselben Objekttyp mehr als eine Daten Vorlage definiert haben. Wenn die Bindungs Quelle z. b. eine Liste von Student-Objekten ist und Sie eine bestimmte Vorlage auf die Teilzeitstudenten anwenden möchten. Hierfür können Sie eine Klasse erstellen, die von <xref:System.Windows.Controls.DataTemplateSelector> erbt und die <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>-Methode überschreibt. Nachdem die Klasse definiert wurde, können Sie der Vorlagen Auswahl Eigenschaft des Elements eine Instanz der-Klasse zuweisen.  
  
   
  
## Examples  
 In diesem Beispiel ist die Bindungs Quelle eine Liste von `Task`-Objekten. Eine der Eigenschaften eines `Task` Objekts ist `Priority`. Es sind zwei Datenvorlagen definiert, `myTaskTemplate` und `importantTaskTemplate`.  
  
 Erstellen Sie eine Unterklasse von <xref:System.Windows.Controls.DataTemplateSelector>, und überschreiben Sie die <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>-Methode, um zu bestimmen, welche <xref:System.Windows.DataTemplate> basierend auf dem `Priority` Wert des Datenobjekts verwendet werden soll. Im folgenden Beispiel stellt die <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>-Methode Logik bereit, um die entsprechende Vorlage basierend auf dem Wert der `Priority`-Eigenschaft zurückzugeben. Die zurück zugebende Vorlage befindet sich in den Ressourcen des umschließenden <xref:System.Windows.Window>-Elements.  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 Wir können dann den `TaskListDataTemplateSelector` als Ressource deklarieren:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Um die Vorlagen Auswahl Ressource zu verwenden, weisen Sie Sie der <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A>-Eigenschaft des <xref:System.Windows.Controls.ListBox>zu. Der <xref:System.Windows.Controls.ListBox> Ruft die <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>-Methode der `TaskListDataTemplateSelector` für jedes der Elemente in der zugrunde liegenden Auflistung auf. Beim Aufruf wird das Datenobjekt als Elementparameter übergeben. Der <xref:System.Windows.DataTemplate>, der von der-Methode zurückgegeben wird, wird dann auf das Datenobjekt angewendet.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Das vollständige Beispiel finden Sie unter [Einführung in das Datenvorlagenbeispiel](https://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="WindowsFormsApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fff869e83df5b9e084a19b7bedc39aab93cf71a4" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83956620" /></Metadata><TypeSignature Language="C#" Value="public class WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WindowsFormsApplicationBase extends Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class WindowsFormsApplicationBase&#xA;Inherits ConsoleApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsFormsApplicationBase : Microsoft::VisualBasic::ApplicationServices::ConsoleApplicationBase" />
  <TypeSignature Language="F#" Value="type WindowsFormsApplicationBase = class&#xA;    inherit ConsoleApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Eigenschaften, Methoden und Ereignisse bereit, die sich auf die aktuelle Anwendung beziehen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Eigenschaften, die vom `My.Application`-Objekt verfügbar gemacht werden, geben Daten zurück, die nur mit der aktuellen Anwendung oder DLL verknüpft sind. Mit `My.Application` können keine Informationen auf Systemebene bearbeitet werden.  
  
 Das `My.Application`-Objekt besteht aus den folgenden Klassen:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> stellt Member bereit, die in allen Projekten verfügbar sind.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> stellt Mitglieder bereit, die in Windows Forms Anwendungen verfügbar sind.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> stellt Mitglieder bereit, die in Konsolen Anwendungen verfügbar sind.  
  
   
  
## Examples  
 In diesem Beispiel wird eine-Schleife zum Durchlaufen der geöffneten Formulare der Anwendung verwendet, die Formulare ausgewählt, auf die direkt über den aktuellen Thread zugegriffen werden kann, und ihre Titel werden in einem <xref:System.Windows.Forms.ListBox> Steuerelement angezeigt. Informationen dazu, wie Sie auf die geöffneten Formulare zugreifen, finden Sie unter <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms%2A>.  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 Für dieses Beispiel ist es erforderlich, dass die Windows Forms-Anwendung über das Formular `Form1` verfügt, das ein Listenfeld mit dem Namen `ListBox1`enthält.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
    <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase (Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor(Microsoft.VisualBasic.ApplicationServices.AuthenticationMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (authenticationMode As AuthenticationMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase(Microsoft::VisualBasic::ApplicationServices::AuthenticationMode authenticationMode);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.AuthenticationMode -&gt; Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" Usage="new Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase authenticationMode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="authenticationMode" Type="Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />
      </Parameters>
      <Docs>
        <param name="authenticationMode">Einer der Enumerationswerte, der die Authentifizierungsmethode der Anwendung angibt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />-Klasse mit dem angegebenen Authentifizierungsmodus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der `authenticationMode`-Parameter der <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows> Enumerationswert ist, versucht dieser Konstruktor, die <xref:System.Threading.Thread.CurrentPrincipal%2A>-Eigenschaft des aktuellen Threads auf den <xref:System.Security.Principal.WindowsPrincipal> für den aktuellen Benutzer festzulegen.  
  
 Wenn der `authenticationMode`-Parameter der <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.ApplicationDefined> Enumerationswert ist, lässt dieser Konstruktor die <xref:System.Threading.Thread.CurrentPrincipal%2A>-Eigenschaft des aktuellen Threads unverändert.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationContext">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ApplicationContext ApplicationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ApplicationContext ApplicationContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationContext As ApplicationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ApplicationContext ^ ApplicationContext { System::Windows::Forms::ApplicationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationContext : System.Windows.Forms.ApplicationContext" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ApplicationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Windows.Forms.ApplicationContext" />-Objekt für den aktuellen Thread einer Windows Forms-Anwendung ab.</summary>
        <value>Kontextinformationen über den aktuellen Thread.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dabei handelt es sich um einen erweiterten Member. Sie wird nicht in IntelliSense angezeigt, es sei denn, Sie klicken auf die Registerkarte **alle** .  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|&Windows-Dienst|Nein|  
|Website|Nein|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ApplicationContext" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DoEvents">
      <MemberSignature Language="C#" Value="public void DoEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DoEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoEvents ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DoEvents();" />
      <MemberSignature Language="F#" Value="member this.DoEvents : unit -&gt; unit" Usage="windowsFormsApplicationBase.DoEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verarbeitet alle Windows-Meldungen, die sich derzeit in der Meldungswarteschlange befinden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.DoEvents`-Methode ermöglicht der Anwendung, andere Ereignisse zu behandeln, die möglicherweise während der Codeausführung ausgelöst werden. Die `My.Application.DoEvents`-Methode hat das gleiche Verhalten wie die <xref:System.Windows.Forms.Application.DoEvents%2A>-Methode.  
  
 Wenn Sie eine Windows Forms Anwendung ausführen, wird ein neues Formular erstellt, das dann darauf wartet, dass Ereignisse behandelt werden. Jedes Mal, wenn das Formular ein Ereignis behandelt, z. b. ein Klick auf eine Schaltfläche, verarbeitet es den gesamten Code, der diesem Ereignis zugeordnet ist. Alle anderen Ereignisse warten in der Warteschlange. Während der Code das Ereignis behandelt, antwortet Ihre Anwendung nicht. Beispielsweise wird das Fenster nicht neu gezeichnet, wenn ein anderes Fenster oben gezogen wird.  
  
 Wenn Sie `My.Application.DoEvents` im Code aufzurufen, kann die Anwendung die anderen Ereignisse verarbeiten. Wenn Ihr Code z. b. einer <xref:System.Windows.Forms.ListBox> in einer Schleife Daten hinzufügt und nach jedem Schritt der Schleife `My.Application.DoEvents`aufruft, wird das Formular neu gezeichnet, wenn ein anderes Fenster darauf gezogen wird. Wenn Sie `My.Application.DoEvents` aus Ihrem Code entfernen, wird das Formular erst dann neu gezeichnet, wenn der Click-Ereignishandler der Schaltfläche die Ausführung abgeschlossen hat.  
  
 In der Regel verwenden Sie diese Methode in einer-Schleife, um Nachrichten zu verarbeiten.  
  
> [!NOTE]
>  Die `My.Application.DoEvents`-Methode verarbeitet Ereignisse nicht exakt auf die gleiche Weise wie das Formular. Verwenden Sie Multithreading, damit das Formular die Ereignisse direkt behandelt. Weitere Informationen finden Sie unter [Multithreadanwendungen](https://msdn.microsoft.com/library/a06a1a56-dd16-44e8-bc01-2c2255511bc6).  
  
> [!CAUTION]
>  Wenn eine Methode, die ein Benutzeroberflächen Ereignis behandelt, die `My.Application.DoEvents`-Methode aufruft, wird die Methode möglicherweise erneut eingegeben, bevor Sie beendet wird. Dies kann der Fall sein, wenn die `My.Application.DoEvents`-Methode Windows-Meldungen verarbeitet und Windows-Meldungen Ereignisse hervorrufen können.  
  
 In der folgenden Tabelle wird ein Beispiel für eine Aufgabe mit der `My.Application.DoEvents`-Methode aufgelistet.  
  
|To|Finden Sie unter|  
|-|-|  
|Zulassen, dass ein Formular auf Benutzeroberflächen Eingaben reagiert, während ausgelastet ist|[Exemplarische Vorgehensweise: Behandeln von Ereignissen](/dotnet/visual-basic/programming-guide/language-features/events/walkthrough-handling-events)|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|&Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird die `My.Application.DoEvents`-Methode verwendet, um die Aktualisierung der Benutzeroberfläche für `TextBox1` zu ermöglichen.  
  
 [!code-vb[VbVbalrMyApplication#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#6)]  
  
 Dieser Code sollte sich in einem Formular befinden, das über eine `TextBox1` Komponente mit einer `Text`-Eigenschaft verfügt.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="EnableVisualStyles">
      <MemberSignature Language="C#" Value="protected bool EnableVisualStyles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableVisualStyles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Property EnableVisualStyles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool EnableVisualStyles { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableVisualStyles : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob diese Anwendung die Windows XP-Stile für Fenster, Steuerelemente usw. verwendet.</summary>
        <value>Ein <see cref="T:System.Boolean" />-Wert, der angibt, ob diese Anwendung XP-Fensterstile für Fenster, Steuerelemente usw. verwendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A>-Methode verwendet diese Eigenschaft, um zu bestimmen, ob <xref:System.Windows.Forms.Application.EnableVisualStyles%2A>aufgerufen werden soll.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
      </Docs>
    </Member>
    <Member MemberName="HideSplashScreen">
      <MemberSignature Language="C#" Value="protected void HideSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void HideSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub HideSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void HideSplashScreen();" />
      <MemberSignature Language="F#" Value="member this.HideSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.HideSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Blendet den Begrüßungsbildschirm der Anwendung aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase>-Klasse erstellt den Begrüßungsbildschirm in einem separaten Thread. Diese Methode Marshalls den-Rückruf an den richtigen Thread.  
  
 Diese Methode wird aufgerufen, wenn das Hauptformular den Ladevorgang abgeschlossen hat.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
      </Docs>
    </Member>
    <Member MemberName="IsSingleInstance">
      <MemberSignature Language="C#" Value="protected bool IsSingleInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleInstance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Property IsSingleInstance As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsSingleInstance { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSingleInstance : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob diese Anwendung eine Einzelinstanzanwendung ist, oder legt diesen fest.</summary>
        <value><see langword="True" />, um anzugeben, dass diese Anwendung eine Einzelinstanzanwendung ist. Andernfalls <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run%2A>-Methode verwendet diese Eigenschaft, um zu bestimmen, ob diese Anwendung eine Einzelinstanzanwendung ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
      </Docs>
    </Member>
    <Member MemberName="MainForm">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.Form MainForm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form MainForm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Property MainForm As Form" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Forms::Form ^ MainForm { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MainForm : System.Windows.Forms.Form with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Hauptformular dieser Anwendung ab oder legt dieses fest.</summary>
        <value>Das Hauptformular für diese Anwendung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die `MainForm`-Eigenschaft, um das <xref:System.Windows.Forms.Form> Objekt zu erhalten oder festzulegen, das vom Modell zum Starten/Herunterfahren der Visual Basic Anwendung als Hauptformular der Anwendung verwendet wird.  
  
 Diese Eigenschaft unterstützt das Visual Basic Starten/Herunterfahren von Anwendungen. Weitere Informationen finden Sie unter [Übersicht über das Visual Basic-Anwendungsmodell](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model).  
  
 Die Änderungen an dieser Eigenschaft werden nicht persistent gespeichert, wenn die Anwendung geschlossen wird. Um das Hauptformular dauerhaft zu ändern, müssen Sie die Einstellung im **Projekt-Designer**ändern.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="MinimumSplashScreenDisplayTime">
      <MemberSignature Language="C#" Value="public int MinimumSplashScreenDisplayTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumSplashScreenDisplayTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumSplashScreenDisplayTime { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MinimumSplashScreenDisplayTime : int with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die minimale Zeitspanne in Millisekunden ab, für die der Begrüßungsbildschirm angezeigt wird, oder legt diese fest.</summary>
        <value>Die minimale Zeitspanne in Millisekunden, in der der Begrüßungsbildschirm angezeigt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit der `My.Application.MinimumSplashScreenDisplayTime`-Eigenschaft können Sie die Mindestzeitdauer angeben, die der Begrüßungsbildschirm der Anwendung angezeigt werden soll. Wenn das Hauptformular die Initialisierung in kürzerer Zeit als die von dieser Eigenschaft festgelegte Initialisierung abgeschlossen hat, bleibt der Begrüßungsbildschirm so lange erhalten, bis die angeforderte Zeitspanne verstrichen ist. zu diesem Zeitpunkt wird das Hauptformular angezeigt. Wenn die Anwendung länger dauert, wird der Begrüßungsbildschirm geschlossen, sobald das Hauptformular aktiv wird.  
  
 Wenn Sie der Anwendung mithilfe des Projekt-Designers einen Begrüßungsbildschirm hinzufügen, wird die `My.Application.MinimumSplashScreenDisplayTime`-Eigenschaft auf 2000 festgelegt, sodass eine minimale Anzeigezeit von zwei Sekunden angegeben wird.  
  
 Diese Eigenschaft unterstützt das Visual Basic Anwendungsmodell. Weitere Informationen finden Sie unter [Übersicht über das Visual Basic-Anwendungsmodell](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model).  
  
 Legen Sie die `My.Application.MinimumSplashScreenDisplayTime`-Eigenschaft in einer Methode fest, die die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A>-oder <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A>-Methode überschreibt. Code, der Methoden der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> Klasse überschreibt, sollte in der Datei "ApplicationEvents. vb" eingegeben werden, die standardmäßig ausgeblendet ist.  
  
| |  
|-|  
|So greifen Sie auf das Fenster "Code-Editor" zu|  
|1. Wenn Sie ein Projekt in **Projektmappen-Explorer**ausgewählt haben, klicken Sie im Menü **Projekt** auf **Eigenschaften** .<br />2. Klicken Sie auf die Registerkarte **Anwendung** .<br />3. Klicken Sie auf die Schaltfläche **Anwendungs Ereignisse anzeigen** , um den Code-Editor zu öffnen.<br /><br />Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|&Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `My.Application.MinimumSplashScreenDisplayTime`-Eigenschaft durch Überschreiben der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A>-Eigenschaft festgelegt wird.  
  
 [!code-vb[VbVbalrMyApplication#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#51)]  
  
 Für dieses Beispiel ist es erforderlich, dass das Projekt über einen Begrüßungsbildschirm verfügt.  
  
 Sie müssen diesen Code im Code-Editor-Fenster für Anwendungs Ereignisse eingeben. Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
      </Docs>
    </Member>
    <Member MemberName="NetworkAvailabilityChanged">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.NetworkAvailabilityChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NetworkAvailabilityChanged As NetworkAvailableEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::Devices::NetworkAvailableEventHandler ^ NetworkAvailabilityChanged;" />
      <MemberSignature Language="F#" Value="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " Usage="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich die Netzwerkverfügbarkeit ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung löst das `NetworkAvailabilityChanged`-Ereignis jedes Mal aus, wenn sich die Verfügbarkeit des Netzwerks ändert. Sie können die <xref:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs.IsNetworkAvailable%2A>-Eigenschaft des `e`-Parameters verwenden, um den neuen Status der Netzwerkverbindung zu erhalten. Um den aktuellen Status der Netzwerkverbindung zu erhalten, verwenden Sie die <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A>-Eigenschaft.  
  
 Dieses Ereignis wird für den Haupt Thread der Anwendung mit den anderen Benutzeroberflächen Ereignissen ausgelöst. Dadurch kann der Ereignishandler direkt auf die Benutzeroberfläche der Anwendung zugreifen. Wenn die Anwendung jedoch mit der Behandlung eines anderen Benutzeroberflächen Ereignisses beschäftigt ist, wenn dieses Ereignis ausgelöst wird, kann dieses Ereignis erst verarbeitet werden, wenn der andere Ereignishandler die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A>-Methode beendet oder aufruft.  
  
 Das Ereignis <xref:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged> bietet die gleiche Funktionalität wie dieses Ereignis, ist aber für alle Anwendungs Typen verfügbar.  
  
 Der Code für den `NetworkAvailabilityChanged` Ereignishandler wird in der Datei "ApplicationEvents. vb" gespeichert, die standardmäßig ausgeblendet ist.  
  
| |  
|-|  
|So greifen Sie auf das Code-Editor-Fenster für Anwendungs Ereignisse zu|  
|1. Wählen Sie ein Projekt aus, das in Projektmappen-Explorer ausgewählt ist **.** Klicken Sie im Menü **Projekt** auf **Eigenschaften** .<br />2. Klicken Sie auf die Registerkarte **Anwendung** .<br />3. Klicken Sie auf die Schaltfläche **Anwendungs Ereignisse anzeigen** , um den Code-Editor zu öffnen.<br /><br />Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
> [!NOTE]
>  Viele Netzwerk Hubs bieten eine Netzwerkverbindung, auch wenn der Hub von einem größeren Netzwerk getrennt ist. Folglich gibt dieses Ereignis bei verdrahteten Verbindungen an, dass die Verbindung zwischen dem Computer und einem Hub geändert wurde.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|&Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird die `SetConnectionStatus`-Methode der standardmäßigen `Form1`-Klasse aufgerufen, wenn sich die Netzwerkverfügbarkeit ändert.  
  
 Sie müssen den Code im Code-Editor-Fenster für Anwendungs Ereignisse eingeben. Um auf dieses Fenster zuzugreifen, befolgen Sie die Anweisungen im Abschnitt "Hinweise" in diesem Thema.  
  
 Das Projekt sollte ein Formular mit dem Namen `Form1`haben. Sie sollte über eine Methode namens `SetConnectionStatus` verfügen, die einen `Boolean`-Parameter annimmt.  
  
 [!code-vb[VbVbalrMyApplication#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler" />
        <altmember cref="E:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OnCreateMainForm">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateMainForm ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateMainForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateMainForm ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateMainForm();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateMainForm : unit -&gt; unit&#xA;override this.OnCreateMainForm : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnCreateMainForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ermöglicht einem Designer beim Überschreiben in einer abgeleiteten Klasse das Ausgeben von Code, mit dem der Begrüßungsbildschirm und das Hauptformular konfiguriert werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig hat diese Methode keine Auswirkungen. Wenn Sie jedoch im Visual Basic **Projekt-Designer**ein Hauptformular für die Anwendung auswählen, überschreibt der Designer diese Methode mit einer Methode, die die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A>-Eigenschaft auf eine neue Instanz des Haupt Formulars festlegt.  
  
 Diese Methode wird von der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun%2A>-Methode aufgerufen.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
      </Docs>
    </Member>
    <Member MemberName="OnCreateSplashScreen">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateSplashScreen();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateSplashScreen : unit -&gt; unit&#xA;override this.OnCreateSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnCreateSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ermöglicht einem Designer beim Überschreiben in einer abgeleiteten Klasse das Ausgeben von Code, mit dem der Begrüßungsbildschirm initialisiert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig hat diese Methode keine Auswirkungen. Wenn Sie einen Begrüßungsbildschirm für Ihre Anwendung im **Projekt-Designer** in Visual Basic auswählen, überschreibt der Designer die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A>-Methode mit einer Methode, die die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen%2A>-Eigenschaft auf eine neue Instanz des Begrüßungsbildschirmformulars festlegt.  
  
 Diese Methode wird von der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A>-Methode aufgerufen.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
      </Docs>
    </Member>
    <Member MemberName="OnInitialize">
      <MemberSignature Language="C#" Value="protected virtual bool OnInitialize (System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; commandLineArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnInitialize(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; commandLineArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnInitialize (commandLineArgs As ReadOnlyCollection(Of String)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnInitialize(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ commandLineArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialize : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; -&gt; bool&#xA;override this.OnInitialize : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; -&gt; bool" Usage="windowsFormsApplicationBase.OnInitialize commandLineArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.STAThread</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLineArgs" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="commandLineArgs">Eine schreibgeschützte Sammlung, die die Befehlszeilenargumente für die aktuelle Anwendung als Zeichenfolgen enthält.</param>
        <summary>Legt die visuellen Stile, die Textanzeigestile und den aktuellen Prinzipal für den Hauptthread der Anwendung fest (falls die Anwendung Windows-Authentifizierung verwendet) und initialisiert den Begrüßungsbildschirm, falls definiert.</summary>
        <returns>Ein <see cref="T:System.Boolean" />, der angibt, ob der Anwendungsstart fortgesetzt werden soll.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig legt diese Methode die visuellen Stile, die Textanzeigestile und den aktuellen Prinzipal für den Hauptanwendungsthread fest (wenn die Anwendung die Windows-Authentifizierung verwendet) und ruft `ShowSplashScreen` auf, wenn weder `/nosplash` noch `-nosplash` als Befehlszeilenargument verwendet werden.  
  
 Diese Methode ruft die folgenden Methoden auf:  
  
-   [https://login.microsoftonline.com/consumers/](<xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A>).  
  
-   [https://login.microsoftonline.com/consumers/](<xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A>).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
      </Docs>
    </Member>
    <Member MemberName="OnRun">
      <MemberSignature Language="C#" Value="protected virtual void OnRun ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnRun() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRun ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRun();" />
      <MemberSignature Language="F#" Value="abstract member OnRun : unit -&gt; unit&#xA;override this.OnRun : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnRun " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stellt den Startpunkt bereit, wenn die Ausführung der Hauptanwendung begonnen werden kann, nachdem die Initialisierung abgeschlossen ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig ruft diese Methode die Methoden `OnCreateMainForm` (um das Hauptformular der Anwendung zu erstellen) und `HideSplashScreen` (um den Begrüßungsbildschirm zu schließen) auf, bevor sie die Windows Forms-Nachrichtenschleife startet:  
  
-   [https://login.microsoftonline.com/consumers/](<xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A>). Stellt eine Möglichkeit für Designer bereit, Code auszugeben, der das Hauptformular initialisiert.  
  
     Standardmäßig hat diese Methode keine Auswirkungen. Wenn Sie jedoch ein Hauptformular für Ihre Anwendung im **Projekt-Designer** in Visual Basic auswählen, überschreibt der Designer die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A>-Methode mit einer Methode, die die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A>-Eigenschaft auf eine neue Instanz des Hauptformulars festlegt.  
  
-   [https://login.microsoftonline.com/consumers/](<xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen%2A>). Wenn für die Anwendung ein Begrüßungsbildschirm definiert und geöffnet ist, schließt diese Methode den Begrüßungsbildschirm.  
  
     Standardmäßig schließt diese Methode den Begrüßungsbildschirm.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberSignature Language="F#" Value="abstract member OnShutdown : unit -&gt; unit&#xA;override this.OnShutdown : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse das Ausführen von Code, wenn die Anwendung heruntergefahren wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird nicht ausgeführt, wenn ein Ausnahmefehler in der Hauptanwendung auftritt.  
  
 Standardmäßig löst diese Methode das <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown>-Ereignis aus.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual bool OnStartup (Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnStartup(class Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartup(Microsoft.VisualBasic.ApplicationServices.StartupEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStartup (eventArgs As StartupEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStartup(Microsoft::VisualBasic::ApplicationServices::StartupEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnStartup : Microsoft.VisualBasic.ApplicationServices.StartupEventArgs -&gt; bool&#xA;override this.OnStartup : Microsoft.VisualBasic.ApplicationServices.StartupEventArgs -&gt; bool" Usage="windowsFormsApplicationBase.OnStartup eventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">Die Befehlszeilenargumente der Anwendung; gibt an, ob der Anwendungsstart abgebrochen werden soll.</param>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse das Ausführen von Code, wenn die Anwendung gestartet wird.</summary>
        <returns>Ein <see cref="T:System.Boolean" />, der angibt, ob der Start der Anwendung fortgesetzt werden soll.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig löst diese Methode das <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup>-Ereignis aus. Der Ereignishandler kann die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A>-Eigenschaft des Ereignis Arguments festlegen. Wenn <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> `True`ist, gibt diese Methode `False` zurück, um den Start der Anwendung abzubrechen. Andernfalls gibt diese Methode `True` zurück.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OnStartupNextInstance">
      <MemberSignature Language="C#" Value="protected virtual void OnStartupNextInstance (Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnStartupNextInstance(class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartupNextInstance(Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStartupNextInstance (eventArgs As StartupNextInstanceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStartupNextInstance(Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnStartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs -&gt; unit&#xA;override this.OnStartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs -&gt; unit" Usage="windowsFormsApplicationBase.OnStartupNextInstance eventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">Die Befehlszeilenargumente der nachfolgenden Anwendungsinstanz; gibt an, ob die erste Anwendungsinstanz nach Beenden des Ausnahmehandlers in den Vordergrund gebracht werden soll.</param>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse das Ausführen von Code, wenn eine nachfolgende Instanz einer Einzelinstanzanwendung gestartet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig löst diese Methode das <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance>-Ereignis aus. Der Ereignishandler kann die <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A>-Eigenschaft des Ereignis Arguments festlegen. Wenn <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> `True`ist, aktiviert die-Methode das Hauptformular. Andernfalls bleibt das Hauptformular im aktuellen Zustand.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
      </Docs>
    </Member>
    <Member MemberName="OnUnhandledException">
      <MemberSignature Language="C#" Value="protected virtual bool OnUnhandledException (Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnUnhandledException(class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnUnhandledException(Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnUnhandledException (e As UnhandledExceptionEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnUnhandledException(Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs -&gt; bool&#xA;override this.OnUnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs -&gt; bool" Usage="windowsFormsApplicationBase.OnUnhandledException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Daten für das Ereignis.</param>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse das Ausführen von Code, wenn in der Anwendung eine nicht behandelte Ausnahme auftritt.</summary>
        <returns>Ein <see cref="T:System.Boolean" />, der angibt, ob das <see cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />-Ereignis ausgelöst wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig löst diese Methode das <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException>-Ereignis aus, solange kein Debugger angefügt ist und der Benutzer das `UnhandledException`-Ereignis verarbeitet. Der Ereignishandler kann die <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A>-Eigenschaft festlegen. Wenn <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> `False`ist oder das Ereignis nicht behandelt wird, wird die Anwendung bei Rückgabe vom Ausnahmehandler beendet. Andernfalls wird die Steuerung der Anwendung an die Windows Forms Nachrichten Schleife zurückgegeben.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
      </Docs>
    </Member>
    <Member MemberName="OpenForms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FormCollection OpenForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FormCollection OpenForms" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OpenForms As FormCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FormCollection ^ OpenForms { System::Windows::Forms::FormCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OpenForms : System.Windows.Forms.FormCollection" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FormCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung aller geöffneten Formulare der Anwendung ab.</summary>
        <value>Eine Auflistung, die alle geöffneten Formulare der Anwendung enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.OpenForms`-Eigenschaft ruft eine Auflistung aller geöffneten Formulare der Anwendung ab. Das Verhalten ist identisch mit der <xref:System.Windows.Forms.Application.OpenForms%2A?displayProperty=nameWithType>-Eigenschaft.  
  
> [!NOTE]
>  Die `My.Application.OpenForms`-Eigenschaft gibt alle geöffneten Formulare zurück, unabhängig davon, welcher Thread Sie geöffnet hat. Vor dem Zugriff sollten Sie die <xref:System.Windows.Forms.Control.InvokeRequired%2A>-Eigenschaft der einzelnen Formulare überprüfen. Andernfalls wird möglicherweise eine <xref:System.InvalidOperationException> Ausnahme ausgelöst.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|&Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel werden die geöffneten Formulare der Anwendung durchlaufen, diejenigen, die direkt für den aktuellen Thread zugänglich sind, ausgewählt und ihre Titel in einem <xref:System.Windows.Forms.ListBox>-Steuerelement angezeigt. Für dieses Beispiel ist es erforderlich, dass die Windows Forms-Anwendung über das Formular `Form1` verfügt, das ein Listenfeld mit dem Namen `ListBox1`enthält.  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 In diesem Beispiel werden die geöffneten Formulare der Anwendung durchlaufen, und ihre Titel werden in einem <xref:System.Windows.Forms.ListBox>-Steuerelement angezeigt.  
  
 [!code-vb[VbVbalrMyApplication#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.FormCollection" />
        <altmember cref="P:System.Windows.Forms.Application.OpenForms" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run (string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Run(string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Run (commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Run(cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberSignature Language="F#" Value="member this.Run : string[] -&gt; unit" Usage="windowsFormsApplicationBase.Run commandLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="commandLine">Die Befehlszeile von <see langword="Sub Main" />.</param>
        <summary>Richtet das Visual Basic-Anwendungsmodell ein und startet dieses.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.Run`-Methode bietet Unterstützung für das Visual Basic-Anwendungsmodell. Diese Methode sollte nur vom `Sub Main`der Anwendung aufgerufen werden. Standardmäßig ruft der `Sub Main` einer Windows Forms Anwendung diese Methode auf. Weitere Informationen finden Sie unter [Übersicht über das Visual Basic-Anwendungsmodell](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model).  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|&Windows-Dienst|Nein|  
|Website|Nein|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model">Übersicht über das Visual Basic-Anwendungsmodell</related>
      </Docs>
    </Member>
    <Member MemberName="SaveMySettingsOnExit">
      <MemberSignature Language="C#" Value="public bool SaveMySettingsOnExit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveMySettingsOnExit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveMySettingsOnExit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveMySettingsOnExit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SaveMySettingsOnExit : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob die Anwendung die Benutzereinstellungen beim Beenden speichert.</summary>
        <value><see langword="True" />, um anzugeben, dass die Anwendung die Benutzereinstellungen beim Beenden speichert. Andernfalls <see langword="False" />, um anzugeben, dass die Einstellungen nicht implizit gespeichert werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `SaveMySettingsOnExit`-Eigenschaft ermöglicht es dem Benutzer, die Einstellungen zu ändern, die zur Laufzeit von der Anwendung gespeichert werden. Einstellungsänderungen können mit der <xref:System.Configuration.ApplicationSettingsBase.Save%2A>-Methode des `My.Settings`-Objekts explizit gespeichert werden. Weitere Informationen zum Ändern und Speichern von Einstellungen finden Sie unter [Anwendungseigenschaften](https://msdn.microsoft.com/library/0ad4926f-636e-41f8-a5b1-faf9d9b0a254).  
  
 Die Änderungen an dieser Eigenschaft werden nicht persistent gespeichert, wenn die Anwendung geschlossen wird. Wenn Sie die `SaveMySettingsOnExit`-Eigenschaft dauerhaft ändern möchten, müssen Sie die Einstellung im **Projekt-Designer**ändern:  
  
| |  
|-|  
|So ändern Sie die Einstellung im Projekt-Designer|  
|1. Wählen Sie ein Projekt aus, das in **Projektmappen-Explorer**ausgewählt ist. Klicken Sie im Menü **Projekt** auf **Eigenschaften** .<br />2. Klicken Sie auf die Registerkarte **Anwendung** .<br />3. Wählen Sie " **My. Settings" beim Herunterfahren speichern aus**.|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|&Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 Dieses Beispiel besteht aus zwei Teilen.  
  
-   Die `InitializeSaveMySettingsOnExit` Unterroutine, die den aktivierten Zustand eines <xref:System.Windows.Forms.CheckBox> Steuer Elements auf den aktuellen Wert der `SaveMySettingsOnExit` Eigenschaft initialisiert.  
  
-   Die `SaveMySettingsOnExit_CheckedChanged` Unterroutine, die Änderungen an einem <xref:System.Windows.Forms.CheckBox> Steuerelement behandelt, um die `My.Application.SaveMySettingsOnExit`-Eigenschaft zu aktualisieren.  
  
 [!code-vb[VbVbalrMyApplication#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#12)]  
  
 Damit dieses Beispiel funktioniert, muss Ihre Anwendung über ein <xref:System.Windows.Forms.CheckBox>-Steuerelement mit dem Namen `SaveMySettingsOnExit`verfügen.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ShowSplashScreen">
      <MemberSignature Language="C#" Value="protected void ShowSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void ShowSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ShowSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ShowSplashScreen();" />
      <MemberSignature Language="F#" Value="member this.ShowSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.ShowSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bestimmt, ob für die Anwendung ein Begrüßungsbildschirm definiert ist. Falls ja, wird dieser angezeigt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig ruft diese Methode `OnCreateSplashScreen` auf Thread sichere Weise auf.  
  
 Die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A>-Methode enthält den Code, der den Begrüßungsbildschirm mindestens für die Dauer an Millisekunden anzeigt, die von der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A>-Eigenschaft angegeben werden. Um diese Funktion zu verwenden, müssen Sie die `My.Application.MinimumSplashScreenDisplayTime`-Eigenschaft in einer Methode festlegen, die die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A>-oder <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A>-Methode überschreibt, oder den Begrüßungsbildschirm der Anwendung mithilfe des **Projekt-Designers**hinzufügen. Weitere Informationen finden Sie unter <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A>.  
  
 Diese Methode wird von der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A>-Methode aufgerufen.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Event Shutdown As ShutdownEventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::ShutdownEventHandler ^ Shutdown;" />
      <MemberSignature Language="F#" Value="member this.Shutdown : Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler " Usage="member this.Shutdown : Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Shutdown As ShutdownEventHandler " FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Anwendung heruntergefahren wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung löst das `Shutdown`-Ereignis aus, bevor Sie beendet wird. So können Sie steuern, wie die Anwendung die Ressourcen schließt. Dieses Ereignis ist Teil des Visual Basic Anwendungs Modells. Weitere Informationen finden Sie unter [Übersicht über das Visual Basic-Anwendungsmodell](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model).  
  
 Der Code für den `Shutdown` Ereignishandler wird in der Datei "ApplicationEvents. vb" gespeichert, die standardmäßig ausgeblendet ist.  
  
| |  
|-|  
|So greifen Sie auf das Code-Editor-Fenster für Anwendungs Ereignisse zu|  
|1. Wenn Sie ein Projekt in **Projektmappen-Explorer**ausgewählt haben, klicken Sie im Menü **Projekt** auf **Eigenschaften** .<br />2. Klicken Sie auf die Registerkarte **Anwendung** .<br />3. Klicken Sie auf die Schaltfläche **Anwendungs Ereignisse anzeigen** , um den Code-Editor zu öffnen.<br /><br />Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|&Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel werden Nachrichten protokolliert, wenn die Anwendung heruntergefahren wird.  
  
 [!code-vb[VbVbalrMyApplication#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#13)]  
  
 Sie müssen den Code im Code-Editor-Fenster für Anwendungs Ereignisse eingeben. Um auf dieses Fenster zuzugreifen, befolgen Sie die Anweisungen im Abschnitt "Hinweise" in diesem Thema. Weitere Informationen finden Sie unter Gewusst [wie: Protokollieren von Meldungen beim Starten oder heruntergefahren der Anwendung](/dotnet/visual-basic/developing-apps/programming/log-info/how-to-log-messages-when-the-application-starts-or-shuts-down).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/log-info/how-to-log-messages-when-the-application-starts-or-shuts-down">Gewusst wie: Protokollieren von Meldungen beim Starten oder Beenden der Anwendung</related>
        <related type="Article" href="/visualstudio/ide/reference/application-page-project-designer-visual-basic">Seite "Anwendung", Projekt-Designer (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model">Übersicht über das Visual Basic-Anwendungsmodell</related>
      </Docs>
    </Member>
    <Member MemberName="ShutdownStyle">
      <MemberSignature Language="C#" Value="protected internal Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property ShutdownStyle As ShutdownMode" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property Microsoft::VisualBasic::ApplicationServices::ShutdownMode ShutdownStyle { Microsoft::VisualBasic::ApplicationServices::ShutdownMode get(); void set(Microsoft::VisualBasic::ApplicationServices::ShutdownMode value); };" />
      <MemberSignature Language="F#" Value="member this.ShutdownStyle : Microsoft.VisualBasic.ApplicationServices.ShutdownMode with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, wie verfahren werden soll, wenn das Hauptformular der Anwendung geschlossen wird.</summary>
        <value>Einer der Enumerationswerte, der angibt, was die Anwendung tun soll, wenn das Hauptformular geschlossen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ApplicationContext.OnMainFormClosed%2A>-Methode überprüft den Wert dieser Eigenschaft, um zu bestimmen, ob die Anwendung heruntergefahren werden soll, wenn das Hauptformular geschlossen wird, oder ob ein anderes geöffnetes Formular als neues Hauptformular herauf gestuft werden soll.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" />
      </Docs>
    </Member>
    <Member MemberName="SplashScreen">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form SplashScreen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form SplashScreen" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberSignature Language="VB.NET" Value="Public Property SplashScreen As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Form ^ SplashScreen { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SplashScreen : System.Windows.Forms.Form with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft Begrüßungsbildschirm dieser Anwendung ab oder legt diesen fest.</summary>
        <value>Der Begrüßungsbildschirm für die Anwendung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit der `My.Application.SplashScreen`-Eigenschaft können Sie das <xref:System.Windows.Forms.Form> Objekt, das von der Anwendung verwendet wird, als Begrüßungsbildschirm festlegen, das erste Grafik Formular, das angezeigt wird, während eine Anwendung gestartet wird.  
  
 Diese Eigenschaft unterstützt das Visual Basic Anwendungsmodell. Weitere Informationen finden Sie unter [Übersicht über das Visual Basic-Anwendungsmodell](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model).  
  
 Die Änderungen an dieser Eigenschaft werden nicht persistent gespeichert, wenn die Anwendung geschlossen wird. Um den Begrüßungsbildschirm dauerhaft zu ändern, müssen Sie die Einstellung im **Projekt-Designer**ändern.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|&Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel werden die `My.Application.SplashScreen`-Eigenschaft und das `My.Application.Startup`-Ereignis verwendet, um den Begrüßungsbildschirm mit Statusinformationen zu aktualisieren, wenn die Anwendung gestartet wird.  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 Für dieses Beispiel ist es erforderlich, dass das Projekt einen Begrüßungsbildschirm namens `SplashScreen1`hat. Der Begrüßungsbildschirm muss über eine Eigenschaft mit dem Namen `Status` verfügen, mit der die Benutzeroberfläche aktualisiert wird.  
  
 Sie müssen diesen Code im Code-Editor-Fenster für Anwendungs Ereignisse eingeben. Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Dieser Eigenschaft und der <see cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />-Eigenschaft ist derselbe Wert zugewiesen.</exception>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="T:System.Windows.Forms.Form" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
      <MemberSignature Language="VB.NET" Value="Public Event Startup As StartupEventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupEventHandler ^ Startup;" />
      <MemberSignature Language="F#" Value="member this.Startup : Microsoft.VisualBasic.ApplicationServices.StartupEventHandler " Usage="member this.Startup : Microsoft.VisualBasic.ApplicationServices.StartupEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Startup As StartupEventHandler " FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Anwendung gestartet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine normale Anwendung (die keine Einzel Instanz ist) löst bei jedem Start das `Startup`-Ereignis aus. Eine Einzelinstanzanwendung löst das `Startup`-Ereignis aus, wenn es nur gestartet wird, wenn die Anwendung nicht bereits aktiv ist. Andernfalls löst Sie das `StartupNextInstance`-Ereignis aus. Weitere Informationen finden Sie unter <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance>.  
  
 Dieses Ereignis ist Teil des Visual Basic Anwendungs Modells. Weitere Informationen finden Sie unter [Übersicht über das Visual Basic-Anwendungsmodell](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model).  
  
 Sie können die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A>-Eigenschaft des `e`-Parameters verwenden, um das Laden des Start Formulars einer Anwendung zu steuern. Wenn die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A>-Eigenschaft auf `True`festgelegt ist, wird das Start Formular nicht gestartet. In diesem Fall sollte Ihr Code einen alternativen Startcodepfad aufgerufen werden.  
  
 Sie können die <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A>-Eigenschaft des `e`-Parameters oder die <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A>-Eigenschaft verwenden, um auf die Befehlszeilenargumente der Anwendung zuzugreifen.  
  
 Der Code für den `Startup` Ereignishandler wird in der Datei "ApplicationEvents. vb" gespeichert, die standardmäßig ausgeblendet ist.  
  
| |  
|-|  
|So greifen Sie auf das Code-Editor-Fenster für Anwendungs Ereignisse zu|  
|1. Wenn Sie ein Projekt in **Projektmappen-Explorer**ausgewählt haben, klicken Sie im Menü **Projekt** auf **Eigenschaften** .<br />2. Klicken Sie auf die Registerkarte **Anwendung** .<br />3. Klicken Sie auf die Schaltfläche **Anwendungs Ereignisse anzeigen** , um den Code-Editor zu öffnen.<br /><br /> Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|&Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel werden die `My.Application.SplashScreen`-Eigenschaft und das `My.Application.Startup`-Ereignis verwendet, um den Begrüßungsbildschirm mit Statusinformationen zu aktualisieren, wenn die Anwendung gestartet wird.  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 Für dieses Beispiel ist es erforderlich, dass das Projekt einen Begrüßungsbildschirm namens `SplashScreen1`hat. Der Begrüßungsbildschirm muss über eine Eigenschaft mit dem Namen `Status` verfügen, mit der die Benutzeroberfläche aktualisiert wird.  
  
 Sie müssen den Code im Code-Editor-Fenster für Anwendungs Ereignisse eingeben. Um auf dieses Fenster zuzugreifen, befolgen Sie die Anweisungen im Abschnitt "Hinweise" in diesem Thema. Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
        <related type="Article" href="/visualstudio/ide/reference/application-page-project-designer-visual-basic">Seite "Anwendung", Projekt-Designer (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model">Übersicht über das Visual Basic-Anwendungsmodell</related>
      </Docs>
    </Member>
    <Member MemberName="StartupNextInstance">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      <MemberSignature Language="VB.NET" Value="Public Event StartupNextInstance As StartupNextInstanceEventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventHandler ^ StartupNextInstance;" />
      <MemberSignature Language="F#" Value="member this.StartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler " Usage="member this.StartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StartupNextInstance As StartupNextInstanceEventHandler " FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt beim Versuch ein, eine Einzelinstanzanwendung zu starten, die bereits aktiv ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Einzelinstanzanwendung löst das <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance>-Ereignis aus, wenn Sie versuchen, die Anwendung neu zu starten, wenn Sie bereits aktiv ist. Wenn eine Einzelinstanzanwendung zum ersten Mal gestartet wird, löst Sie das <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup>-Ereignis aus. Weitere Informationen finden Sie unter <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup>.  
  
 Dieses Ereignis ist Teil des Visual Basic Anwendungs Modells. Weitere Informationen finden Sie unter [Übersicht über das Visual Basic-Anwendungsmodell](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model).  
  
 Dieses Ereignis wird für den Haupt Thread der Anwendung mit den anderen Benutzeroberflächen Ereignissen ausgelöst. Dadurch kann der Ereignishandler direkt auf die Benutzeroberfläche der Anwendung zugreifen. Wenn die Anwendung jedoch mit der Behandlung eines anderen Benutzeroberflächen Ereignisses beschäftigt ist, wenn dieses Ereignis ausgelöst wird, kann dieses Ereignis erst verarbeitet werden, wenn der andere Ereignishandler die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A>-Methode beendet oder aufruft.  
  
> [!NOTE]
>  Das `StartupNextInstance`-Ereignis wird nur in Einzelinstanzanwendungen ausgelöst. Um das Verhalten einzelner Instanzen für die Anwendung zu aktivieren, müssen Sie im Projekt-Designer das Kontrollkästchen **Einzelinstanzanwendung erstellen** aktivieren.  
  
| |  
|-|  
|So erstellen Sie eine Anwendung mit einer einzelnen Instanz|  
|1. Wenn Sie ein Projekt in **Projektmappen-Explorer**ausgewählt haben, klicken Sie im Menü **Projekt** auf **Eigenschaften** .<br />2. Klicken Sie auf die Registerkarte **Anwendung** .<br />3. Aktivieren Sie das Kontrollkästchen **Einzelinstanzanwendung erstellen** .|  
  
 Sie müssen die <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A>-Eigenschaft des `e`-Parameters verwenden, um auf die Argumente für nachfolgende Versuche zum Starten einer Einzelinstanzanwendung zuzugreifen. Die <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A>-Eigenschaft stellt die Argumente bereit, mit denen die erste Instanz einer Einzelinstanzanwendung gestartet wird.  
  
 Der Code für den <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> Ereignishandler wird in der Datei "ApplicationEvents. vb" gespeichert, die standardmäßig ausgeblendet ist.  
  
| |  
|-|  
|So greifen Sie auf das Code-Editor-Fenster für Anwendungs Ereignisse zu|  
|1. Wenn Sie ein Projekt in **Projektmappen-Explorer**ausgewählt haben, klicken Sie im Menü **Projekt** auf **Eigenschaften** .<br />2. Klicken Sie auf die Registerkarte **Anwendung** .<br />3. Klicken Sie auf die Schaltfläche **Anwendungs Ereignisse anzeigen** , um den Code-Editor zu öffnen.<br /><br />Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
 In der folgenden Tabelle sind Beispiele für Aufgaben im Zusammenhang mit dem `My.Application.StartupNextInstance`-Ereignis aufgeführt.  
  
|To|Finden Sie unter|  
|-|-|  
|Überprüfen Sie die Befehlszeilenargumente der ersten Anwendungs Instanz.|<xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A>|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|Ja|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|&Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird der `e`-Parameter des Ereignis Handlers <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> verwendet, um die Befehlszeilenargumente der Anwendung zu untersuchen. Wenn ein Argument gefunden wird, das mit `/input=`beginnt, wird der Rest dieses Arguments angezeigt.  
  
 [!code-vb[VbVbalrMyApplication#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#15)]  
  
 Sie müssen den Code im Code-Editor-Fenster für Anwendungs Ereignisse eingeben. Um auf dieses Fenster zuzugreifen, befolgen Sie die Anweisungen im Abschnitt "Hinweise" in diesem Thema. Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
        <related type="Article" href="/visualstudio/ide/reference/application-page-project-designer-visual-basic">Seite "Anwendung", Projekt-Designer (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model">Übersicht über das Visual Basic-Anwendungsmodell</related>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As UnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler " Usage="member this.UnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Kommt vor, wenn in der Anwendung eine unbehandelte Ausnahme auftritt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung löst das `UnhandledException`-Ereignis aus, wenn eine nicht behandelte Ausnahme auftritt. Dieses Ereignis ist Teil des Visual Basic Anwendungs Modells. Weitere Informationen finden Sie unter [Übersicht über das Visual Basic-Anwendungsmodell](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model).  
  
 Sie können die <xref:System.Threading.ThreadExceptionEventArgs.Exception%2A>-Eigenschaft des `e`-Parameters verwenden, um auf die nicht behandelte Ausnahme zuzugreifen, die dieses Ereignis verursacht hat.  
  
 Sie können die <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A>-Eigenschaft des `e`-Parameters verwenden, um zu steuern, ob die Anwendung beendet wird. Standardmäßig ist <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> `True`. Daher wird die Anwendung beendet, nachdem der `UnhandledException`-Ereignishandler abgeschlossen wurde. Sie können den Wert auf `False` im `UnhandledException`-Ereignishandler festlegen, um die Ausführung der Anwendung zu gewährleisten und in den Wartezustand zurückzukehren.  
  
 Der Code für den `UnhandledException` Ereignishandler wird in der Datei "ApplicationEvents. vb" gespeichert, die standardmäßig ausgeblendet ist.  
  
| |  
|-|  
|So greifen Sie auf das Code-Editor-Fenster für Anwendungs Ereignisse zu|  
|1. Wenn Sie ein Projekt in **Projektmappen-Explorer**ausgewählt haben, klicken Sie im Menü **Projekt** auf **Eigenschaften** .<br />2. Klicken Sie auf die Registerkarte **Anwendung** .<br />3. Klicken Sie auf die Schaltfläche **Anwendungs Ereignisse anzeigen** , um den Code-Editor zu öffnen.|  
  
 Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
> [!NOTE]
>  Der Visual Basic-Compiler verhindert, dass Anwendungen, die für das Debuggen erstellt wurden, dieses Ereignis lösen, damit ein Debugger die nicht behandelten Ausnahmen behandeln kann. Dies bedeutet Folgendes: Wenn Sie Ihre Anwendung testen, indem Sie Sie unter dem Visual Studio-Debugger für die integrierte Entwicklungsumgebung ausführen, wird der `UnhandledException`-Ereignishandler nicht aufgerufen. Weitere Informationen zum Entwickeln von Anwendungen für das Debuggen finden Sie unter [/Debug (Visual Basic)](/dotnet/visual-basic/reference/command-line-compiler/debug).  
  
## <a name="tasks"></a>Aufgaben  
 In der folgenden Tabelle sind Beispiele für Aufgaben aufgeführt, die das `My.Application.UnhandledException`-Ereignis einschließen.  
  
|To|Finden Sie unter|  
|-|-|  
|Nicht behandelte Ausnahmen protokollieren|[Gewusst wie: Protokollieren von Ausnahmen](/dotnet/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions)|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|&Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird das `My.Application.UnhandledException`-Ereignis verwendet, um alle nicht behandelten Ausnahmen zu protokollieren.  
  
 Sie müssen den Code im Code-Editor-Fenster für Anwendungs Ereignisse eingeben. Um auf dieses Fenster zuzugreifen, befolgen Sie das in diesem Thema beschriebene Verfahren. Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 Da das `UnhandledException`-Ereignis nicht ausgelöst wird, wenn ein Debugger an die Anwendung angefügt ist, müssen Sie dieses Beispiel außerhalb der integrierten Entwicklungsumgebung von Visual Studio ausführen.  
  
 [!code-vb[VbVbalrMyApplication#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">Objekte (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model">Übersicht über das Visual Basic-Anwendungsmodell</related>
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="protected static bool UseCompatibleTextRendering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property UseCompatibleTextRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property bool UseCompatibleTextRendering { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseCompatibleTextRendering : bool" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ermöglicht einem Designer beim Überschreiben in einer abgeleiteten Klasse, für die Formulare der Anwendung die Standard-Textwiedergabe-Engine anzugeben.</summary>
        <value>[https://login.microsoftonline.com/consumers/](<see langword="Boolean" />). Der Wert <see langword="False" /> gibt an, dass die Anwendung die Standard-Textwiedergabe-Engine für [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] verwenden soll. Der Wert <see langword="True" /> gibt an, dass die Anwendung die Textwiedergabe-Engine für Visual Basic .NET 2002 und Visual Basic .NET 2003 verwenden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig gibt diese Eigenschaft `False` zurück, um anzugeben, dass die GDI-textrenderingengine für [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] für die Anwendungs Formulare verwendet werden soll. Sie können diese Eigenschaft jedoch außer Kraft setzen, um `True` zurückzugeben und anzugeben, dass die Formulare der Anwendung die GDI+-textrenderingengine verwenden, die in Visual Basic .NET 2002 und Visual Basic .NET 2003 verwendet wird.  
  
 Diese Eigenschaft wird vom <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase>-Konstruktor aufgerufen.  
  
 Code, der Methoden der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> Klasse überschreibt, sollte in der Datei "ApplicationEvents. vb" eingegeben werden, die standardmäßig ausgeblendet ist.  
  
| |  
|-|  
|So greifen Sie auf das Fenster "Code-Editor" zu|  
|1. Wenn Sie ein Projekt in **Projektmappen-Explorer**ausgewählt haben, klicken Sie im Menü **Projekt** auf **Eigenschaften** .<br />2. Klicken Sie auf die Registerkarte **Anwendung** .<br />3. Klicken Sie auf die Schaltfläche **Anwendungs Ereignisse anzeigen** , um den Code-Editor zu öffnen.<br /><br />Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die GDI+-textrenderingengine als standardrenderingmodul der Anwendung festgelegt wird, indem die-Eigenschaft <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A>  
  
```vb  
Protected Overloads Shared ReadOnly Property UseCompatibleTextRendering() As Boolean  
    Get  
        ' Use the GDI+ text rendering engine.  
        Return True  
    End Get  
End Property  
```  
  
 Sie müssen diesen Code im Code-Editor-Fenster für Anwendungs Ereignisse eingeben. Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">Erweitern des Visual Basic-Anwendungsmodells</related>
        <related type="Article" href="/visualstudio/ide/reference/application-page-project-designer-visual-basic">Seite "Anwendung", Projekt-Designer (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>

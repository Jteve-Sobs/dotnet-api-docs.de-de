<Type Name="WindowsFormsApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6e99e7475651c37048c5e5379d25bebbdce032dd" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39906008" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WindowsFormsApplicationBase extends Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class WindowsFormsApplicationBase&#xA;Inherits ConsoleApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsFormsApplicationBase : Microsoft::VisualBasic::ApplicationServices::ConsoleApplicationBase" />
  <TypeSignature Language="F#" Value="type WindowsFormsApplicationBase = class&#xA;    inherit ConsoleApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Eigenschaften, Methoden und Ereignisse bereit, die sich auf die aktuelle Anwendung beziehen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Eigenschaften verfügbar gemacht werden, indem die `My.Application` Objekt Daten zurück, die nur mit der aktuellen Anwendung oder DLL verknüpft ist. Mit `My.Application` können keine Informationen auf Systemebene bearbeitet werden.  
  
 Das `My.Application`-Objekt besteht aus den folgenden Klassen:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> stellt Member bereit, die in allen Projekten verfügbar sind.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> enthält Member, die in Windows Forms-Anwendungen verfügbar sind.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> enthält Member, die in konsolenanwendungen verfügbar sind.  
  
   
  
## Examples  
 In diesem Beispiel werden mithilfe einer Schleife zum Durchlaufen der offenen Formulare der Anwendung, wählt die Formulare, die direkt vom aktuellen Thread zugegriffen werden können und zeigt ihre Titel werden in einem <xref:System.Windows.Forms.ListBox> Steuerelement. Informationen dazu, wie Sie Zugriff auf den geöffneten Formulare, finden Sie unter <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms%2A>.  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 Dieses Beispiel erfordert, dass die Windows Forms-Anwendung ein Formular mit dem Namen `Form1` , enthält ein Listenfeld, das mit dem Namen `ListBox1`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase (Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor(Microsoft.VisualBasic.ApplicationServices.AuthenticationMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase(Microsoft::VisualBasic::ApplicationServices::AuthenticationMode authenticationMode);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.AuthenticationMode -&gt; Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" Usage="new Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase authenticationMode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="authenticationMode" Type="Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />
      </Parameters>
      <Docs>
        <param name="authenticationMode">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" /> Gibt den Authentifizierungsmodus der Anwendung an.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />-Klasse mit dem angegebenen Authentifizierungsmodus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die `authenticationMode` -Parameter ist der <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows> -Enumerationswert fest, und klicken Sie dann auf diesen Konstruktor versucht, des aktuellen Threads festlegen <xref:System.Threading.Thread.CurrentPrincipal%2A> Eigenschaft, um die <xref:System.Security.Principal.WindowsPrincipal> für den aktuellen Benutzer.  
  
 Wenn die `authenticationMode` -Parameter ist der <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.ApplicationDefined> -Enumerationswert fest, und klicken Sie dann auf diesen Konstruktor verlässt des aktuellen Threads <xref:System.Threading.Thread.CurrentPrincipal%2A> Eigenschaft unverändert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationContext">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ApplicationContext ApplicationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ApplicationContext ApplicationContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationContext As ApplicationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ApplicationContext ^ ApplicationContext { System::Windows::Forms::ApplicationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationContext : System.Windows.Forms.ApplicationContext" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ApplicationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Windows.Forms.ApplicationContext" />-Objekt für den aktuellen Thread einer Windows Forms-Anwendung ab.</summary>
        <value>Diese Eigenschaft gibt das <see cref="T:System.Windows.Forms.ApplicationContext" />-Objekt für den aktuellen Thread zurück. Dieses Objekt enthält Kontextinformationen über den Thread.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist ein erweiterter Member. Es wird nicht in IntelliSense angezeigt, es sei denn, Sie klicken Sie auf die **alle** Registerkarte.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|Nein|  
|Website|Nein|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ApplicationContext" />
      </Docs>
    </Member>
    <Member MemberName="DoEvents">
      <MemberSignature Language="C#" Value="public void DoEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DoEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoEvents ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DoEvents();" />
      <MemberSignature Language="F#" Value="member this.DoEvents : unit -&gt; unit" Usage="windowsFormsApplicationBase.DoEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verarbeitet alle Windows-Meldungen, die sich derzeit in der Meldungswarteschlange befinden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.DoEvents` -Methode kann die Anwendung andere Ereignisse zu behandeln, die beim Ausführen des Codes ausgelöst werden kann. Die `My.Application.DoEvents` Methode weist dasselbe Verhalten wie die <xref:System.Windows.Forms.Application.DoEvents%2A> Methode.  
  
 Wenn Sie eine Windows Forms-Anwendung ausführen, wird ein neues Formular, das Ereignisse behandelt werden dann wartet. Jedes Mal das Formular ein Ereignis behandelt, wie z. B. eine Schaltfläche klicken, verarbeitet den Code, die für die diesem Ereignis zugeordneten. Alle anderen Ereignisse werden in der Warteschlange warten. Während der Code das Ereignis behandelt, reagiert die Anwendung nicht. Das Fenster ist z. B. nicht neu aufgebaut, wenn ein anderes Fenster im Vordergrund gezogen wird.  
  
 Wenn Sie aufrufen `My.Application.DoEvents` in Ihrem Code Ihrer Anwendung kann die anderen Ereignisse behandelt. Wenn Ihr Code Daten fügt z. B. eine <xref:System.Windows.Forms.ListBox> in einer Schleife, und klicken Sie nach jedem Schritt der Schleife aufgerufen `My.Application.DoEvents`, das Formular neu aufgebaut, wenn es sich bei einem anderen Fenster darüber gezogen wird. Wenn Sie entfernen `My.Application.DoEvents` aus Ihrem Code das Formular nicht neu aufgebaut, bis zum Abschluss der Click-Ereignishandler der Schaltfläche ausführen.  
  
 In der Regel verwenden Sie diese Methode in einer Schleife zum Verarbeiten von Nachrichten an.  
  
> [!NOTE]
>  Die `My.Application.DoEvents` -Methode verarbeitet Ereignisse nicht in die gleiche Weise wie das Formular. Verwenden Sie multithreading, stellen das Formular, das die Ereignisse direkt verarbeiten. Weitere Informationen finden Sie unter [Multithreadanwendungen](http://msdn.microsoft.com/library/a06a1a56-dd16-44e8-bc01-2c2255511bc6).  
  
> [!CAUTION]
>  Wenn eine Methode, die einem Benutzerereignis-Benutzeroberfläche (UI) behandelt Ruft die `My.Application.DoEvents` -Methode, die Methode möglicherweise erneut eingegeben werden, vor dem Abschluss. Dies kann vorkommen, da die `My.Application.DoEvents` Methode verarbeitet Nachrichten von Windows und Windows-Meldungen Ereignisse auslösen können.  
  
 Die folgende Tabelle enthält ein Beispiel für eine Aufgabe mit der `My.Application.DoEvents` Methode.  
  
|Beschreibung|Siehe|  
|-|-|  
|Ermöglichen Sie einem Formular zur Eingabe während ausgelastet-Benutzeroberfläche zu reagieren|[Exemplarische Vorgehensweise: Behandeln von Ereignissen](~/docs/visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md)|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `My.Application.DoEvents` Methode, um die Benutzeroberfläche für zuzulassen `TextBox1` aktualisieren.  
  
 [!code-vb[VbVbalrMyApplication#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#6)]  
  
 Dieser Code muss in einem Formular, eine `TextBox1` Komponente mit einem `Text` Eigenschaft.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Steuert die Fähigkeit, auf Dateien und Ordner zuzugreifen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Steuert die Berechtigungen, die sich auf Benutzeroberflächen und die Zwischenablage beziehen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="EnableVisualStyles">
      <MemberSignature Language="C#" Value="protected bool EnableVisualStyles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableVisualStyles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Property EnableVisualStyles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool EnableVisualStyles { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableVisualStyles : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob diese Anwendung die Windows XP-Stile für Fenster, Steuerelemente usw. verwendet.</summary>
        <value>Ein <see cref="T:System.Boolean" />-Wert, der angibt, ob diese Anwendung XP-Fensterstile für Fenster, Steuerelemente usw. verwendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> Methode verwendet diese Eigenschaft bestimmt, ob die aufzurufende <xref:System.Windows.Forms.Application.EnableVisualStyles%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HideSplashScreen">
      <MemberSignature Language="C#" Value="protected void HideSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void HideSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub HideSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void HideSplashScreen();" />
      <MemberSignature Language="F#" Value="member this.HideSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.HideSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Blendet den Begrüßungsbildschirm der Anwendung aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> Klasse erstellt den Begrüßungsbildschirm in einem separaten Thread. Diese Methode marshallt den Aufruf an den richtigen Thread.  
  
 Diese Methode wird aufgerufen, wenn das Hauptformular geladen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      </Docs>
    </Member>
    <Member MemberName="IsSingleInstance">
      <MemberSignature Language="C#" Value="protected bool IsSingleInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleInstance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Property IsSingleInstance As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsSingleInstance { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSingleInstance : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob diese Anwendung eine Einzelinstanzanwendung ist.</summary>
        <value>Ein <see cref="T:System.Boolean" />-Wert, der angibt, ob diese Anwendung eine Einzelinstanzanwendung ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run%2A> Methode verwendet diese Eigenschaft, um zu bestimmen, ob diese Anwendung eine einzelinstanzanwendung ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="MainForm">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.Form MainForm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form MainForm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Property MainForm As Form" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Forms::Form ^ MainForm { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MainForm : System.Windows.Forms.Form with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Hauptformular dieser Anwendung ab oder legt dieses fest.</summary>
        <value>Ruft das Hauptformular dieser Anwendung ab oder legt dieses fest.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der `MainForm` Eigenschaft zum Abrufen oder Festlegen der <xref:System.Windows.Forms.Form> -Objekt, das das Visual Basic-Anwendung Starten/Herunterfahren als das Hauptformular der Anwendung verwendet.  
  
 Diese Eigenschaft unterstützt das Visual Basic-Anwendung Starten/Herunterfahren-Modell. Weitere Informationen finden Sie unter [Übersicht über die Visual Basic-Anwendungsmodell](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Die Änderungen an dieser Eigenschaft werden nicht beibehalten, wenn die Anwendung geschlossen wird. Um das Hauptformular permanent zu ändern, müssen Sie die Einstellung im Ändern der **Projekt-Designer**.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="MinimumSplashScreenDisplayTime">
      <MemberSignature Language="C#" Value="public int MinimumSplashScreenDisplayTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumSplashScreenDisplayTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumSplashScreenDisplayTime { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MinimumSplashScreenDisplayTime : int with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt die minimale Zeitspanne in Millisekunden, für die der Begrüßungsbildschirm angezeigt wird.</summary>
        <value>
          <see langword="Integer" /> Die minimale Zeitspanne in Millisekunden, in der der Begrüßungsbildschirm angezeigt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.MinimumSplashScreenDisplayTime` Eigenschaft können Sie angeben, die minimale Zeitspanne der Begrüßungsbildschirm angezeigt werden sollen. Wenn das Hauptformular abgeschlossen ist, wird in kürzerer Zeit als der von dieser Eigenschaft angegebene Wert initialisiert, bleibt der Begrüßungsbildschirm angezeigt, bis die angeforderte Größe des Zeiten, zu diesem, die Zeitpunkt das Hauptformular angezeigt wird. Wenn die Anwendung mehr Zeit zum Starten, wird der Begrüßungsbildschirm geschlossen, sobald das Hauptformular aktiv ist.  
  
 Wenn Sie einen Begrüßungsbildschirm der Anwendung verwenden den Projekt-Designer hinzufügen, wird die `My.Application.MinimumSplashScreenDisplayTime` -Eigenschaft auf 2000 festgelegt, sodass die minimale Zeitspanne Anzeige von zwei Sekunden.  
  
 Diese Eigenschaft unterstützt das Visual Basic-Anwendungsmodell. Weitere Informationen finden Sie unter [Übersicht über die Visual Basic-Anwendungsmodell](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Legen Sie die `My.Application.MinimumSplashScreenDisplayTime` -Eigenschaft in einer Methode, überschreibt die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> oder <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> Methode. Code, der Methoden der überschreibt die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> Klasse in der Datei "ApplicationEvents.vb" hinzu, die standardmäßig ausgeblendet ist, eingegeben werden.  
  
| |  
|-|  
|Auf das Code-Editor-Fenster zum Überschreiben von Membern|  
|1.  Klicken Sie mit ausgewähltem Projekt im **Projektmappen-Explorer**, klicken Sie auf **Eigenschaften** auf die **Projekt** Menü.<br />2.  Klicken Sie auf die Registerkarte **Anwendung** .<br />3.  Klicken Sie auf die Schaltfläche **Anwendungsereignisse anzeigen** um den Code-Editor zu öffnen.<br /><br />Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie zum Festlegen der `My.Application.MinimumSplashScreenDisplayTime` Eigenschaft durch Überschreiben der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> Eigenschaft.  
  
 [!code-vb[VbVbalrMyApplication#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#51)]  
  
 Dieses Beispiel erfordert, dass das Projekt einen Begrüßungsbildschirm ist.  
  
 Sie müssen diesen Code im Code-Editor-Fenster für Anwendungsereignisse eingeben. Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
      </Docs>
    </Member>
    <Member MemberName="NetworkAvailabilityChanged">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.NetworkAvailabilityChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NetworkAvailabilityChanged As NetworkAvailableEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::Devices::NetworkAvailableEventHandler ^ NetworkAvailabilityChanged;" />
      <MemberSignature Language="F#" Value="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " Usage="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich die Netzwerkverfügbarkeit ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung löst das `NetworkAvailabilityChanged` Ereignis jedes Mal, die die Verfügbarkeit des Netzwerks ändert. Können Sie die <xref:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs.IsNetworkAvailable%2A> Eigenschaft der `e` Parameter, um den neuen Zustand der Verbindung abzurufen. Rufen Sie den aktuellen Zustand der Verbindung mit der <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> Eigenschaft.  
  
 Dieses Ereignis wird auf den Hauptthread der Anwendung, mit den anderen UI-Ereignissen ausgelöst. Dadurch wird den Ereignishandler, die direkt auf der Benutzeroberfläche der Anwendung zugreifen. Allerdings ist die Anwendung ausgelastet ist, behandeln ein anderes Benutzeroberflächen-Ereignis, wenn dieses Ereignis ausgelöst wird, dieses Ereignis kann nicht verarbeitet werden, bis der andere Ereignishandler abgeschlossen ist, oder ruft die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> Methode.  
  
 Die <xref:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged> Ereignis bietet dieselbe Funktionalität wie dieses Ereignis jedoch für alle Anwendungstypen verfügbar ist.  
  
 Der Code für die `NetworkAvailabilityChanged` -Ereignishandler wird gespeichert, in der Datei "ApplicationEvents.vb" hinzu, die standardmäßig ausgeblendet ist.  
  
| |  
|-|  
|Um das Fenster des Code-Editor für Anwendungsereignisse zugreifen|  
|1.  Ein Projekt auswählen **Projektmappen-Explorer.** Klicken Sie auf **Eigenschaften** auf die **Projekt** Menü.<br />2.  Klicken Sie auf die Registerkarte **Anwendung** .<br />3.  Klicken Sie auf die Schaltfläche **Anwendungsereignisse anzeigen** um den Code-Editor zu öffnen.<br /><br />Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
> [!NOTE]
>  Viele Netzwerk-Hubs bieten eine Netzwerkverbindung, auch wenn der Hub aus einem größeren Netzwerk getrennt ist. Folglich gibt dieses Ereignis für verdrahtete Verbindungen ändern, in der Verbindung zwischen dem Computer und einen Hub an.  
  
> [!NOTE]
>  Die `NetworkAvailabilityChanged` Ereignis wird von Anwendungen nicht ausgelöst, wenn sie auf Windows 95 und Windows 98 ausgeführt werden, oder wenn sie nicht-Administrator unter Windows 2000 ausgeführt werden. Wenn Ihre Anwendung unter diesen Betriebssystemen ausführen kann, verwenden Sie die <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> Eigenschaft, um die netzwerkverfügbarkeit zu überprüfen.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 Dieses Beispiel ruft die `SetConnectionStatus` Methode der standardmäßigen `Form1` Klasse, wenn die netzwerkverfügbarkeit ändert.  
  
 Sie müssen den Code für Anwendungsereignisse im Code-Editor-Fenster eingeben. Um dieses Fenster zuzugreifen, befolgen Sie die Anweisungen im Abschnitt "Hinweise" der dieses Themas.  
  
 Das Projekt sollte ein Formular mit dem Namen haben `Form1`. Sie müssen eine Methode namens `SetConnectionStatus` , akzeptiert eine `Boolean` Parameter.  
  
 [!code-vb[VbVbalrMyApplication#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler" />
        <altmember cref="E:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateMainForm">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateMainForm ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateMainForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateMainForm ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateMainForm();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateMainForm : unit -&gt; unit&#xA;override this.OnCreateMainForm : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnCreateMainForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ermöglicht einem Designer beim Überschreiben in einer abgeleiteten Klasse das Ausgeben von Code, mit dem der Begrüßungsbildschirm und das Hauptformular konfiguriert werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig führt diese Methode keine Aktion. Jedoch bei der Auswahl einer Hauptformular für Ihre Anwendung in Visual Basic **Projekt-Designer**, überschreibt diese Methode mit einer Methode, die festlegt der Designer der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> Eigenschaft, um eine neue Instanz des Hauptformulars.  
  
 Diese Methode wird aufgerufen, indem die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateSplashScreen">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateSplashScreen();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateSplashScreen : unit -&gt; unit&#xA;override this.OnCreateSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnCreateSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ermöglicht einem Designer beim Überschreiben in einer abgeleiteten Klasse das Ausgeben von Code, mit dem der Begrüßungsbildschirm initialisiert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig führt diese Methode keine Aktion. Bei Auswahl ein Begrüßungsbildschirms für Ihre Anwendung in Visual Basic **Projekt-Designer**, überschreibt der Designer die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> Methode mit einer Methode, die festlegt der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen%2A> Eigenschaft, um eine neue Instanz des Formulars Splash-Bildschirm .  
  
 Diese Methode wird aufgerufen, indem die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialize">
      <MemberSignature Language="C#" Value="protected virtual bool OnInitialize (System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; commandLineArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnInitialize(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; commandLineArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnInitialize (commandLineArgs As ReadOnlyCollection(Of String)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnInitialize(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ commandLineArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialize : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; -&gt; bool&#xA;override this.OnInitialize : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; -&gt; bool" Usage="windowsFormsApplicationBase.OnInitialize commandLineArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.STAThread</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLineArgs" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="commandLineArgs">Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> vom Typ <see langword="String" />, die die Befehlszeilenargumente der aktuellen Anwendung als Zeichenfolgen enthält.</param>
        <summary>Legt die visuellen Stile, die Textanzeigestile und den aktuellen Prinzipal für den Hauptthread der Anwendung fest (falls die Anwendung Windows-Authentifizierung verwendet) und initialisiert den Begrüßungsbildschirm, falls definiert.</summary>
        <returns>Ein <see cref="T:System.Boolean" />, der angibt, ob der Anwendungsstart fortgesetzt werden soll.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig diese Methode legt fest, die visuelle Stile, die Textanzeigestile und die aktuelle Prinzipal für den Hauptthread der Anwendung (sofern die Anwendung Windows-Authentifizierung verwendet wird), und ruft `ShowSplashScreen` Wenn weder `/nosplash` noch `-nosplash` dient als ein Befehlszeilenargument.  
  
 Diese Methode ruft die folgenden Methoden:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A>  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      </Docs>
    </Member>
    <Member MemberName="OnRun">
      <MemberSignature Language="C#" Value="protected virtual void OnRun ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnRun() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRun ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRun();" />
      <MemberSignature Language="F#" Value="abstract member OnRun : unit -&gt; unit&#xA;override this.OnRun : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnRun " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stellt einen Ausgangspunkt für den Zeitpunkt bereit, zu dem die Initialisierung abgeschlossen und die Hauptanwendung bereit für die Ausführung ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig, bevor in der Windows Forms-Nachrichtenschleife, wird diese Methode ruft die `OnCreateMainForm` (zum Hauptformular der Anwendung zu erstellen) und `HideSplashScreen` (zum Schließen des Begrüßungsbildschirms) Methoden:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A> Bietet eine Möglichkeit für einen Designer zum Ausgeben von Code, der das Hauptformular initialisiert.  
  
     Standardmäßig führt diese Methode keine Aktion. Allerdings bei der Auswahl einer Hauptformular für Ihre Anwendung in Visual Basic **Projekt-Designer**, überschreibt der Designer die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A> Methode mit einer Methode, die festlegt der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> Eigenschaft, um eine neue Instanz des Hauptformulars.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen%2A> Wenn die Anwendung verfügt über ein Begrüßungsbildschirm definiert, und es geöffnet ist, schließt diese Methode den Begrüßungsbildschirm.  
  
     Standardmäßig schließt diese Methode den Begrüßungsbildschirm.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberSignature Language="F#" Value="abstract member OnShutdown : unit -&gt; unit&#xA;override this.OnShutdown : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse das Ausführen von Code, wenn die Anwendung heruntergefahren wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird nicht ausgeführt werden, wenn eine nicht behandelte Ausnahme in die Hauptassembly der Anwendung auftritt.  
  
 Standardmäßig löst diese Methode die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown> Ereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual bool OnStartup (Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnStartup(class Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartup(Microsoft.VisualBasic.ApplicationServices.StartupEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStartup (eventArgs As StartupEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStartup(Microsoft::VisualBasic::ApplicationServices::StartupEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnStartup : Microsoft.VisualBasic.ApplicationServices.StartupEventArgs -&gt; bool&#xA;override this.OnStartup : Microsoft.VisualBasic.ApplicationServices.StartupEventArgs -&gt; bool" Usage="windowsFormsApplicationBase.OnStartup eventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" /> Enthält die Befehlszeilenargumente der Anwendung und gibt an, ob der Anwendungsstart abgebrochen werden soll.</param>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse das Ausführen von Code, wenn die Anwendung gestartet wird.</summary>
        <returns>Ein <see cref="T:System.Boolean" />, der angibt, ob der Start der Anwendung fortgesetzt werden soll.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig löst diese Methode die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> Ereignis. Der Ereignishandler kann festlegen, die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft des Ereignisarguments. Wenn <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> ist `True`, gibt diese Methode `False` zum Start der Anwendung abbrechen. Andernfalls gibt diese Methode `True` zurück.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnStartupNextInstance">
      <MemberSignature Language="C#" Value="protected virtual void OnStartupNextInstance (Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnStartupNextInstance(class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartupNextInstance(Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStartupNextInstance (eventArgs As StartupNextInstanceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStartupNextInstance(Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnStartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs -&gt; unit&#xA;override this.OnStartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs -&gt; unit" Usage="windowsFormsApplicationBase.OnStartupNextInstance eventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" /> Enthält die Befehlszeilenargumente der nachfolgenden Anwendungsinstanz und gibt an, ob die erste Anwendungsinstanz nach Beendigung des Ausnahmehandlers in den Vordergrund gesetzt werden soll.</param>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse das Ausführen von Code, wenn eine nachfolgende Instanz einer Einzelinstanzanwendung gestartet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig löst diese Methode die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> Ereignis. Der Ereignishandler kann festlegen, die <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> Eigenschaft des Ereignisarguments. Wenn <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> ist `True`, die Methode aktiviert das Hauptformular. Andernfalls bleibt das Hauptformular im aktuellen Zustand.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      </Docs>
    </Member>
    <Member MemberName="OnUnhandledException">
      <MemberSignature Language="C#" Value="protected virtual bool OnUnhandledException (Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnUnhandledException(class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnUnhandledException(Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnUnhandledException (e As UnhandledExceptionEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnUnhandledException(Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs -&gt; bool&#xA;override this.OnUnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs -&gt; bool" Usage="windowsFormsApplicationBase.OnUnhandledException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
        </param>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse das Ausführen von Code, wenn in der Anwendung eine nicht behandelte Ausnahme auftritt.</summary>
        <returns>Ein <see cref="T:System.Boolean" />, der angibt, ob das <see cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />-Ereignis ausgelöst wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig löst diese Methode die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException> Ereignis solange kein Debugger angefügt ist und der Benutzer ist der Umgang mit den `UnhandledException` Ereignis. Der Ereignishandler kann festlegen, die <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> Eigenschaft. Wenn <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> ist `False`, oder wenn das Ereignis nicht behandelt wird, wird die Anwendung bei der Rückgabe aus dem Ausnahmehandler beendet. Andernfalls wird die Steuerung der Anwendung in der Windows Forms-Nachrichtenschleife zurückgegeben.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      </Docs>
    </Member>
    <Member MemberName="OpenForms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FormCollection OpenForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FormCollection OpenForms" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OpenForms As FormCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FormCollection ^ OpenForms { System::Windows::Forms::FormCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OpenForms : System.Windows.Forms.FormCollection" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FormCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung aller geöffneten Formulare der Anwendung ab.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.FormCollection" />-Objekt, das alle geöffneten Formulare der Anwendung enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.OpenForms` Eigenschaft ruft eine Auflistung der offenen Formulare aller Anwendungen ab. Das Verhalten ist identisch mit der <xref:System.Windows.Forms.Application.OpenForms%2A?displayProperty=nameWithType> Eigenschaft.  
  
> [!NOTE]
>  Die `My.Application.OpenForms` Eigenschaft gibt alle geöffneten Formulare, unabhängig von dem Thread, in dem sie geöffnet wurden. Überprüfen Sie die <xref:System.Windows.Forms.Control.InvokeRequired%2A> -Eigenschaft jedes Formulars vor dem Zugriff auf. Andernfalls wird es möglicherweise ausgelöst ein <xref:System.InvalidOperationException> Ausnahme.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel offenen Formulare der Anwendung durchläuft, wählt Sie diejenigen direkt zugegriffen werden kann, vom aktuellen Thread und zeigt ihre Titel werden in einem <xref:System.Windows.Forms.ListBox> Steuerelement. Dieses Beispiel erfordert, dass die Windows Forms-Anwendung ein Formular mit dem Namen `Form1` , enthält ein Listenfeld, das mit dem Namen `ListBox1`.  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 In diesem Beispiel durchläuft die Formulare der Anwendung geöffnet und zeigt ihre Titel in einem <xref:System.Windows.Forms.ListBox> Steuerelement.  
  
 [!code-vb[VbVbalrMyApplication#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Steuert die Berechtigungen, die auf Benutzeroberflächen und die Zwischenablage beziehen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.FormCollection" />
        <altmember cref="P:System.Windows.Forms.Application.OpenForms" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run (string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Run(string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Run (commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Run(cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberSignature Language="F#" Value="member this.Run : string[] -&gt; unit" Usage="windowsFormsApplicationBase.Run commandLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="commandLine">Array vom Typ <see langword="String" />. Die Befehlszeile von <see langword="Sub Main" />.</param>
        <summary>Richtet das Visual Basic-Anwendungsmodell ein und startet dieses.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.Run` Methode bietet Unterstützung für das Visual Basic-Anwendungsmodell. Diese Methode sollte aufgerufen werden, nur von der Anwendung `Sub Main`. In der Standardeinstellung die `Sub Main` von einer Windows Forms-Anwendung ruft diese Methode. Weitere Informationen finden Sie unter [Übersicht über die Visual Basic-Anwendungsmodell](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|Nein|  
|Website|Nein|  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Steuert die Fähigkeit, den Zugriff auf alle Umgebungsvariablen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Steuert die Fähigkeit, auf Dateien und Ordner zuzugreifen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Steuert die Fähigkeit, auf Registrierungsvariablen zugreifen zu können. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Steuert die Berechtigungen, die sich auf Benutzeroberflächen und die Zwischenablage beziehen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <permission cref="T:System.Net.WebPermission">Steuert die Zugriffsrechte für den Zugriff auf HTTP-Internetressourcen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Net.SocketPermission">Steuert die Rechte zum Herstellen oder Annehmen von Verbindungen über eine Transportadresse. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">Steuert den Zugriff auf eine Windows NT-Leistungsindikatorkomponente. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SaveMySettingsOnExit">
      <MemberSignature Language="C#" Value="public bool SaveMySettingsOnExit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveMySettingsOnExit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveMySettingsOnExit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveMySettingsOnExit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SaveMySettingsOnExit : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob die Anwendung die Benutzereinstellungen beim Beenden speichert.</summary>
        <value>
          <see langword="Boolean" />
          <see langword="True" /> gibt an, dass die Anwendung die Benutzereinstellungen beim Beenden speichert. Andernfalls werden die Einstellungen nicht implizit gespeichert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `SaveMySettingsOnExit` Eigenschaft ermöglicht dem Benutzer zu ändern, wie die Anwendung die Einstellungen zur Laufzeit speichert. Können Sie explizit die Änderungen speichern, mithilfe der <xref:System.Configuration.ApplicationSettingsBase.Save%2A> Methode der `My.Settings` Objekt. Weitere Informationen zu ändern und Speichern von Einstellungen finden Sie unter [Anwendungseigenschaften](http://msdn.microsoft.com/library/0ad4926f-636e-41f8-a5b1-faf9d9b0a254).  
  
 Die Änderungen an dieser Eigenschaft werden nicht beibehalten, wenn die Anwendung geschlossen wird. So ändern Sie die `SaveMySettingsOnExit` Eigenschaft dauerhaft, müssen Sie die Einstellung ändern in den **Projekt-Designer**:  
  
| |  
|-|  
|So ändern Sie die Einstellung im Projekt-Designer|  
|1.  Ein Projekt auswählen in **Projektmappen-Explorer**. Klicken Sie auf **Eigenschaften** auf die **Projekt** Menü.<br />2.  Klicken Sie auf die Registerkarte **Anwendung** .<br />3.  Wählen Sie **My.Settings beim Herunterfahren speichern**.|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel besteht aus zwei Teilen.  
  
-   Die `InitializeSaveMySettingsOnExit` Unterroutine, die den aktivierten Zustand des initialisiert einen <xref:System.Windows.Forms.CheckBox> Steuerelement auf den aktuellen Wert von der `SaveMySettingsOnExit` Eigenschaft.  
  
-   Die `SaveMySettingsOnExit_CheckedChanged` -Unterroutine, die Änderungen verarbeitet ein <xref:System.Windows.Forms.CheckBox> Steuerelement aktualisiert die `My.Application.SaveMySettingsOnExit` Eigenschaft.  
  
 [!code-vb[VbVbalrMyApplication#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#12)]  
  
 Für dieses Beispiel funktioniert, müssen Ihre Anwendung eine <xref:System.Windows.Forms.CheckBox> Steuerelement mit dem Namen `SaveMySettingsOnExit`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="ShowSplashScreen">
      <MemberSignature Language="C#" Value="protected void ShowSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void ShowSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ShowSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ShowSplashScreen();" />
      <MemberSignature Language="F#" Value="member this.ShowSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.ShowSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bestimmt, ob für die Anwendung ein Begrüßungsbildschirm definiert ist. Falls ja, wird dieser angezeigt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft standardmäßig `OnCreateSplashScreen` auf threadsichere Weise.  
  
 Die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> Methode enthält den Code, dem der Begrüßungsbildschirm anzeigt, Bildschirm mindestens für die Anzahl der Millisekunden, die gemäß der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A> Eigenschaft. Um diese Funktion verwenden zu können, müssen Sie festlegen der `My.Application.MinimumSplashScreenDisplayTime` -Eigenschaft in einer Methode, überschreibt die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> oder <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> -Methode oder den Begrüßungsbildschirm hinzufügen, um Ihre Anwendung mit der **Projekt-Designer**. Weitere Informationen finden Sie unter <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A>.  
  
 Diese Methode wird aufgerufen, indem die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Event Shutdown As ShutdownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::ShutdownEventHandler ^ Shutdown;" />
      <MemberSignature Language="F#" Value="member this.Shutdown : Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler " Usage="member this.Shutdown : Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Anwendung heruntergefahren wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung löst das `Shutdown` Ereignis aus, bevor er beendet wird. Dadurch können Sie steuern, wie die Ressourcen in die Anwendung geschlossen wird. Dieses Ereignis ist Teil des Modells für die Visual Basic-Anwendung. Weitere Informationen finden Sie unter [Übersicht über die Visual Basic-Anwendungsmodell](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Der Code für die `Shutdown` -Ereignishandler wird gespeichert, in der Datei "ApplicationEvents.vb" hinzu, die standardmäßig ausgeblendet ist.  
  
| |  
|-|  
|Um das Fenster des Code-Editor für Anwendungsereignisse zugreifen|  
|1.  Klicken Sie mit ausgewähltem Projekt im **Projektmappen-Explorer**, klicken Sie auf **Eigenschaften** auf die **Projekt** Menü.<br />2.  Klicken Sie auf die Registerkarte **Anwendung** .<br />3.  Klicken Sie auf die Schaltfläche **Anwendungsereignisse anzeigen** um den Code-Editor zu öffnen.<br /><br />Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel protokolliert Meldungen auf, wenn die Anwendung beendet wird.  
  
 [!code-vb[VbVbalrMyApplication#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#13)]  
  
 Sie müssen den Code für Anwendungsereignisse im Code-Editor-Fenster eingeben. Um dieses Fenster zuzugreifen, befolgen Sie die Anweisungen im Abschnitt "Hinweise" der dieses Themas. Weitere Informationen finden Sie unter [Vorgehensweise: Protokoll-Nachrichten bei der Anwendung beginnt oder beendet wird unten](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-messages-when-the-application-starts-or-shuts-down.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStyle">
      <MemberSignature Language="C#" Value="protected internal Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property ShutdownStyle As ShutdownMode" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property Microsoft::VisualBasic::ApplicationServices::ShutdownMode ShutdownStyle { Microsoft::VisualBasic::ApplicationServices::ShutdownMode get(); void set(Microsoft::VisualBasic::ApplicationServices::ShutdownMode value); };" />
      <MemberSignature Language="F#" Value="member this.ShutdownStyle : Microsoft.VisualBasic.ApplicationServices.ShutdownMode with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, wie verfahren werden soll, wenn das Hauptformular der Anwendung geschlossen wird.</summary>
        <value>Ein <see cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" />-Enumerationswert, der angibt, wie die Anwendung verfahren soll, wenn das Hauptformular geschlossen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ApplicationContext.OnMainFormClosed%2A> Methode überprüft den Wert dieser Eigenschaft, um festzustellen, ob die Anwendung heruntergefahren werden soll, wenn das Hauptformular geschlossen wird oder wenn eine andere öffnen Formular als neues Hauptformular heraufgestuft werden sollte.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" />
      </Docs>
    </Member>
    <Member MemberName="SplashScreen">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form SplashScreen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form SplashScreen" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberSignature Language="VB.NET" Value="Public Property SplashScreen As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Form ^ SplashScreen { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SplashScreen : System.Windows.Forms.Form with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft Begrüßungsbildschirm dieser Anwendung ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.Form" />-Objekt, das die Anwendung als Begrüßungsbildschirm verwendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.SplashScreen` Eigenschaft können Sie zum Abrufen oder Festlegen der <xref:System.Windows.Forms.Form> -Objekt, das die Anwendung als Begrüßungsbildschirm verwendet, die erste grafische Form, die angezeigt wird, während eine Anwendung gestartet wird.  
  
 Diese Eigenschaft unterstützt das Visual Basic-Anwendungsmodell. Weitere Informationen finden Sie unter [Übersicht über die Visual Basic-Anwendungsmodell](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Die Änderungen an dieser Eigenschaft werden nicht beibehalten, wenn die Anwendung geschlossen wird. Um den Begrüßungsbildschirm permanent zu ändern, müssen Sie die Einstellung im Ändern der **Projekt-Designer**.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `My.Application.SplashScreen` Eigenschaft und die `My.Application.Startup` Ereignis, um den Begrüßungsbildschirm mit Statusinformationen zu aktualisieren, während die Anwendung startet.  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 Dieses Beispiel erfordert, dass das Projekt einen Begrüßungsbildschirm mit dem Namen `SplashScreen1`. Der Begrüßungsbildschirm muss eine Eigenschaft namens `Status` , die die Benutzeroberfläche aktualisiert.  
  
 Sie müssen diesen Code im Code-Editor-Fenster für Anwendungsereignisse eingeben. Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Dieser Eigenschaft und der <see cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />-Eigenschaft ist derselbe Wert zugewiesen.</exception>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
      <MemberSignature Language="VB.NET" Value="Public Event Startup As StartupEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupEventHandler ^ Startup;" />
      <MemberSignature Language="F#" Value="member this.Startup : Microsoft.VisualBasic.ApplicationServices.StartupEventHandler " Usage="member this.Startup : Microsoft.VisualBasic.ApplicationServices.StartupEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Anwendung gestartet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine normale (nicht-Einzel-Instanz) Anwendung löst das `Startup` Ereignis jedes Mal, wenn er gestartet wird. Eine einzelinstanzanwendung löst die `Startup` Ereignis, wenn er startet, nur ist die Anwendung nicht bereits aktiv ist; andernfalls, es löst das `StartupNextInstance` Ereignis. Weitere Informationen finden Sie unter <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance>.  
  
 Dieses Ereignis ist Teil des Modells für die Visual Basic-Anwendung. Weitere Informationen finden Sie unter [Übersicht über die Visual Basic-Anwendungsmodell](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Können Sie die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft der `e` Parameter, um das Laden einer Anwendung Startformular steuern. Wenn die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> -Eigenschaftensatz auf `True`, des Startformulars nicht gestartet. In diesem Fall sollte der Code eine alternative Startpfad für den Code aufrufen.  
  
 Können Sie die <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> Eigenschaft der `e` Parameter oder die <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> Eigenschaft, um die Befehlszeilenargumente der Anwendung zuzugreifen.  
  
 Der Code für die `Startup` -Ereignishandler wird gespeichert, in der Datei "ApplicationEvents.vb" hinzu, die standardmäßig ausgeblendet ist.  
  
| |  
|-|  
|Um das Fenster des Code-Editor für Anwendungsereignisse zugreifen|  
|1.  Klicken Sie mit ausgewähltem Projekt im **Projektmappen-Explorer**, klicken Sie auf **Eigenschaften** auf die **Projekt** Menü.<br />2.  Klicken Sie auf die Registerkarte **Anwendung** .<br />3.  Klicken Sie auf die Schaltfläche **Anwendungsereignisse anzeigen** um den Code-Editor zu öffnen.<br /><br /> Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `My.Application.SplashScreen` Eigenschaft und die `My.Application.Startup` Ereignis, um den Begrüßungsbildschirm mit Statusinformationen zu aktualisieren, während die Anwendung startet.  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 Dieses Beispiel erfordert, dass das Projekt einen Begrüßungsbildschirm mit dem Namen `SplashScreen1`. Der Begrüßungsbildschirm muss die Eigenschaft mit dem Namen `Status` , die die Benutzeroberfläche aktualisiert.  
  
 Sie müssen den Code für Anwendungsereignisse im Code-Editor-Fenster eingeben. Um dieses Fenster zuzugreifen, befolgen Sie die Anweisungen im Abschnitt "Hinweise" der dieses Themas. Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Steuert die Möglichkeit, einen Ereignishandler für dieses Ereignis hinzuzufügen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" /></permission>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
      </Docs>
    </Member>
    <Member MemberName="StartupNextInstance">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      <MemberSignature Language="VB.NET" Value="Public Event StartupNextInstance As StartupNextInstanceEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventHandler ^ StartupNextInstance;" />
      <MemberSignature Language="F#" Value="member this.StartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler " Usage="member this.StartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt beim Versuch ein, eine Einzelinstanzanwendung zu starten, die bereits aktiv ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine einzelinstanzanwendung löst die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> Ereignis aus, wenn Sie versuchen, die die Anwendung neu gestartet, wenn sie bereits aktiv ist. Wenn eine Einzelinstanz-Anwendung zum ersten Mal gestartet wird, löst die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> Ereignis. Weitere Informationen finden Sie unter <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup>.  
  
 Dieses Ereignis ist Teil des Modells für die Visual Basic-Anwendung. Weitere Informationen finden Sie unter [Übersicht über die Visual Basic-Anwendungsmodell](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Dieses Ereignis wird auf den Hauptthread der Anwendung, mit den anderen UI-Ereignissen ausgelöst. Dadurch wird den Ereignishandler, die Benutzeroberfläche der Anwendung direkt zugreifen. Allerdings ist die Anwendung ausgelastet ist, behandeln ein anderes Benutzeroberflächen-Ereignis, wenn dieses Ereignis ausgelöst wird, dieses Ereignis kann nicht verarbeitet werden, bis der andere Ereignishandler abgeschlossen ist, oder ruft die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> Methode.  
  
> [!NOTE]
>  Die `StartupNextInstance` Ereignis wird ausgelöst, nur in einer Instanz-Anwendungen. Um eine Einzelinstanz-Verhalten für Ihre Anwendung zu aktivieren, müssen Sie überprüfen die **einzelinstanzanwendung erstellen** Kontrollkästchen im Projekt-Designer.  
  
| |  
|-|  
|Um eine einzelne Instanz der Anwendung zu machen.|  
|1.  Klicken Sie mit ausgewähltem Projekt im **Projektmappen-Explorer**, klicken Sie auf **Eigenschaften** auf die **Projekt** Menü.<br />2.  Klicken Sie auf die Registerkarte **Anwendung** .<br />3.  Wählen Sie die **einzelinstanzanwendung erstellen** Kontrollkästchen.|  
  
 Verwenden Sie die <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> Eigenschaft der `e` Parameter auf die Argumente für nachfolgende Versuche, die eine Einzelinstanz-Anwendung zu starten. Die <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> Eigenschaft stellt die Argumente verwendet, um die erste Instanz einer Einzelinstanz-Anwendung zu starten.  
  
 Der Code für die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> -Ereignishandler wird gespeichert, in der Datei "ApplicationEvents.vb" hinzu, die standardmäßig ausgeblendet ist.  
  
| |  
|-|  
|Um das Fenster des Code-Editor für Anwendungsereignisse zugreifen|  
|1.  Klicken Sie mit ausgewähltem Projekt im **Projektmappen-Explorer**, klicken Sie auf **Eigenschaften** auf die **Projekt** Menü.<br />2.  Klicken Sie auf die Registerkarte **Anwendung** .<br />3.  Klicken Sie auf die Schaltfläche **Anwendungsereignisse anzeigen** um den Code-Editor zu öffnen.<br /><br />Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
 Die folgende Tabelle enthält Beispiele für Aufgaben im Zusammenhang mit der `My.Application.StartupNextInstance` Ereignis.  
  
|Beschreibung|Siehe|  
|-|-|  
|Überprüfen Sie die Befehlszeilenargumente der die erste Anwendungsinstanz|<xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A>|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|Ja|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `e` Parameter, der die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> -Ereignishandler, um die Befehlszeilenargumente der Anwendung zu untersuchen. Wenn ein Argument gefunden wird, die mit beginnt `/input=`, der Rest des Arguments wird angezeigt.  
  
 [!code-vb[VbVbalrMyApplication#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#15)]  
  
 Sie müssen den Code für Anwendungsereignisse im Code-Editor-Fenster eingeben. Um dieses Fenster zuzugreifen, befolgen Sie die Anweisungen im Abschnitt "Hinweise" der dieses Themas. Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As UnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler " Usage="member this.UnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Kommt vor, wenn in der Anwendung eine unbehandelte Ausnahme auftritt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung löst das `UnhandledException` Ereignis aus, wenn es sich um eine unbehandelte Ausnahme auftritt. Dieses Ereignis ist Teil des Modells für die Visual Basic-Anwendung. Weitere Informationen finden Sie unter [Übersicht über die Visual Basic-Anwendungsmodell](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Können Sie die <xref:System.Threading.ThreadExceptionEventArgs.Exception%2A> Eigenschaft der `e` Parameter, die nicht behandelte Ausnahme auf, die dieses Ereignis verursacht hat.  
  
 Können Sie die <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> Eigenschaft der `e` Parameter zu steuern, ob die Anwendung beendet wird. In der Standardeinstellung <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> ist `True`. Aus diesem Grund die Anwendung beendet wird, nachdem die `UnhandledException` -Ereignishandler. Sie können den Wert festlegen, um `False` in die `UnhandledException` Ereignishandler behalten Sie die Anwendung ausgeführt wird, und in einem Wartezustand zurückliefern.  
  
 Der Code für die `UnhandledException` -Ereignishandler wird gespeichert, in der Datei "ApplicationEvents.vb" hinzu, die standardmäßig ausgeblendet ist.  
  
| |  
|-|  
|Um das Fenster des Code-Editor für Anwendungsereignisse zugreifen|  
|1.  Klicken Sie mit ausgewähltem Projekt im **Projektmappen-Explorer**, klicken Sie auf **Eigenschaften** auf die **Projekt** Menü.<br />2.  Klicken Sie auf die Registerkarte **Anwendung** .<br />3.  Klicken Sie auf die Schaltfläche **Anwendungsereignisse anzeigen** um den Code-Editor zu öffnen.|  
  
 Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
> [!NOTE]
>  Visual Basic-Compiler wird verhindert, dass Anwendungen, die erstellt werden, für das Debuggen von Auslösen dieses Ereignisses, zum Aktivieren von eines Debuggers, die nicht behandelten Ausnahmen zu behandeln. Dies bedeutet, dass Sie Ihre Anwendung testen werden, indem Sie ihn im Debugger integrierte Entwicklungsumgebung: Visual Studio ausführen Ihrer `UnhandledException` -Ereignishandler wird nicht aufgerufen werden. Weitere Informationen zum Erstellen von Anwendungen für das Debuggen finden Sie unter ["/ Debug" (Visual Basic)](~/docs/visual-basic/reference/command-line-compiler/debug.md).  
  
## <a name="tasks"></a>Aufgaben  
 Die folgende Tabelle enthält Beispiele für Aufgaben, bei denen die `My.Application.UnhandledException` Ereignis.  
  
|Beschreibung|Siehe|  
|-|-|  
|Melden Sie sich nicht behandelte Ausnahmen|[Gewusst wie: Protokollieren von Ausnahmen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|Nein|  
|Konsolenanwendung|Nein|  
|Windows Forms-Steuerelementbibliothek|Nein|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|Nein|  
|Website|Nein|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `My.Application.UnhandledException` Ereignis melden Sie sich eine nicht behandelte Ausnahmen.  
  
 Sie müssen den Code für Anwendungsereignisse im Code-Editor-Fenster eingeben. Führen Sie dieses Fenster für den Zugriff auf das Verfahren im Abschnitt mit Hinweisen dieses Themas aus. Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 Da die `UnhandledException` Ereignis nicht ausgelöst, wenn ein Debugger an die Anwendung angefügt ist, müssen Sie in diesem Beispiel wird außerhalb der Visual Studio integrierte Entwicklungsumgebung ausführen.  
  
 [!code-vb[VbVbalrMyApplication#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#17)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Steuert die Möglichkeit, einen Ereignishandler für dieses Ereignis hinzuzufügen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="protected static bool UseCompatibleTextRendering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property UseCompatibleTextRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property bool UseCompatibleTextRendering { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseCompatibleTextRendering : bool" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ermöglicht einem Designer beim Überschreiben in einer abgeleiteten Klasse, für die Formulare der Anwendung die Standard-Textwiedergabe-Engine anzugeben.</summary>
        <value>
          <see langword="Boolean" /> Der Wert <see langword="False" /> gibt an, dass die Anwendung die Standard-Textwiedergabe-Engine für [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] verwenden soll. Der Wert <see langword="True" /> gibt an, dass die Anwendung die Textwiedergabe-Engine für Visual Basic .NET 2002 und Visual Basic .NET 2003 verwenden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig gibt diese Eigenschaft `False` an, dass von den GDI-Text, der rendering-Engine für [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] für Formulare der Anwendung verwendet werden. Sie können jedoch diese zurückzugebende Eigenschaft überschreiben `True` und angeben, dass die Formulare der Anwendung die GDI +-Textwiedergabe-Engine, die in Visual Basic .NET 2002 und Visual Basic .NET 2003 verwendet wird.  
  
 Diese Eigenschaft wird aufgerufen, indem die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> Konstruktor.  
  
 Code, der Methoden der überschreibt die <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> Klasse in der Datei "ApplicationEvents.vb" hinzu, die standardmäßig ausgeblendet ist, eingegeben werden.  
  
| |  
|-|  
|Auf das Code-Editor-Fenster zum Überschreiben von Membern|  
|1.  Klicken Sie mit ausgewähltem Projekt im **Projektmappen-Explorer**, klicken Sie auf **Eigenschaften** auf die **Projekt** Menü.<br />2.  Klicken Sie auf die Registerkarte **Anwendung** .<br />3.  Klicken Sie auf die Schaltfläche **Anwendungsereignisse anzeigen** um den Code-Editor zu öffnen.<br /><br />Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die GDI +-Textwiedergabe-Engine als der Anwendung-Standard-Rendering-Engine festgelegt, durch Überschreiben der <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A> Eigenschaft.  
  
```vb  
Protected Overloads Shared ReadOnly Property UseCompatibleTextRendering() As Boolean  
    Get  
        ' Use the GDI+ text rendering engine.  
        Return True  
    End Get  
End Property  
```  
  
 Sie müssen diesen Code im Code-Editor-Fenster für Anwendungsereignisse eingeben. Weitere Informationen finden Sie unter [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
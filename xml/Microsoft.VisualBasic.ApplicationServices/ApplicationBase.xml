<Type Name="ApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.ApplicationBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="db65a06afe8a575fa2ab89f82d1c8398bc6baac5" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51939433" /></Metadata><TypeSignature Language="C#" Value="public class ApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ApplicationBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationBase" />
  <TypeSignature Language="F#" Value="type ApplicationBase = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Eigenschaften, Methoden und Ereignisse bereit, die sich auf die aktuelle Anwendung beziehen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Eigenschaften verfügbar gemacht werden, indem die `My.Application` Objekt Daten zurück, die nur mit der aktuellen Anwendung oder DLL verknüpft ist. Mit `My.Application` können keine Informationen auf Systemebene bearbeitet werden.  
  
 Das `My.Application`-Objekt besteht aus den folgenden Klassen:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> stellt Member bereit, die in allen Projekten verfügbar sind.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> enthält Member, die in Windows Forms-Anwendungen verfügbar sind.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> enthält Member, die in konsolenanwendungen verfügbar sind.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `My.Application.GetEnvironmentVariable` Methode zum Abrufen und den Wert der PATH-Umgebungsvariablen, anzeigen, wenn dieser Wert verfügbar ist. Andernfalls wird eine Meldung, die angibt, dass die PATH-Umgebungsvariable nicht vorhanden ist.  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ChangeCulture">
      <MemberSignature Language="C#" Value="public void ChangeCulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeCulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeCulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeCulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeCulture : string -&gt; unit" Usage="applicationBase.ChangeCulture cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName"><see langword="String" />. Der Name der Kultur als Zeichenfolge. Eine Liste der möglichen Namen finden Sie unter <see cref="T:System.Globalization.CultureInfo" />.</param>
        <summary>Ändert die Kultur, die vom aktuellen Thread für die Bearbeitung und Formatierung von Zeichenfolgen verwendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.ChangeCulture` Methode ändert des aktuellen Threads <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft. <xref:System.Threading.Thread.CurrentCulture%2A> Bestimmt die Standardformate für Datum, Uhrzeit, Währung, Zahlen, die Sortierreihenfolge von Texten, Vergleich von Zeichenfolgen und Groß-/Kleinschreibung für alle Berechnungen auf diesem Thread an.  
  
 Um die aktuelle Kultur abzurufen, können Sie die <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture%2A> Eigenschaft oder das <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft.  
  
 Die <xref:System.Threading.Thread.CurrentCulture%2A> Einstellung unterscheidet sich von der Spracheinstellung. Sie enthält nur Daten, die im Zusammenhang mit Standardeinstellungen für eine geografische Region. Aus diesem Grund die <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft kann nur festgelegt werden, auf eine bestimmte Kultur oder der <xref:System.Globalization.CultureInfo.InvariantCulture%2A>.  
  
 Verwenden der `My.Application.ChangeUICulture` Methode, um die Kultur ändern, die der aktuelle Thread zum Abrufen von kulturspezifischen Ressourcen verwendet.  
  
> [!IMPORTANT]
>  Die `My.Application.ChangeCulture` Methode erfordert eine <xref:System.Security.Permissions.SecurityPermission> mit der <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> festgelegt. Bearbeiten von Threads ist aufgrund der mit Threads verbundenen Sicherheitszustands riskant. Aus diesem Grund sollte dieser Berechtigung nur nach Bedarf für vertrauenswürdigen Code erteilt werden. Sie können die Kultur eines Threads in teilweise vertrauenswürdigem Code nicht ändern.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows Forms-Steuerelementbibliothek|**Ja**|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie das Ändern der Kultur ändert der Zeichenfolgendarstellung von Datumsangaben.  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> ist kein gültiger Kulturname.</exception>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ChangeUICulture">
      <MemberSignature Language="C#" Value="public void ChangeUICulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeUICulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeUICulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeUICulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeUICulture : string -&gt; unit" Usage="applicationBase.ChangeUICulture cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName"><see langword="String" />. Der Name der Kultur als Zeichenfolge. Eine Liste der möglichen Namen finden Sie unter <see cref="T:System.Globalization.CultureInfo" />.</param>
        <summary>Ändert die Kultur, die der aktuelle Thread zum Abrufen von kulturspezifischen Ressourcen verwendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.ChangeUICulture` Methode ändert des aktuellen Threads <xref:System.Threading.Thread.CurrentUICulture%2A> Eigenschaft. Die <xref:System.Threading.Thread.CurrentUICulture%2A> -Eigenschaft bestimmt die Kultur, die von der Ressourcen-Manager und die `My.Resources` Objekt; sie verwendet diese Informationen, um kulturspezifische Ressourcen zur Laufzeit zu suchen.  
  
 Um die aktuelle UI-Kultur abzurufen, können Sie die <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture%2A> Eigenschaft oder das <xref:System.Threading.Thread.CurrentUICulture%2A> Eigenschaft.  
  
 Verwenden der `My.Application.ChangeCulture` Methode, um die Kultur ändern, die der aktuelle Thread für die Bearbeitung und Formatierung von Zeichenfolgen verwendet.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows Forms-Steuerelementbibliothek|**Ja**|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `My.Application.ChangeUICulture` Methode zum Festlegen der Kultur, die die `My.Resources` Objekt verwendet wird, zum Abrufen von Ressourcen.  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 Für dieses Beispiel funktioniert, müssen Ihre Anwendung eine Zeichenfolge, die mit dem Namen `Message` in die Ressourcendatei der Anwendung einer Datei, und die Anwendung sollte die Kultur Französisch-Version der Ressourcendatei, verfügen `Resources.fr-FR.resx`. Weitere Informationen finden Sie unter [Vorgehensweise: Hinzufügen oder Entfernen von Ressourcen](https://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d).  
  
 Wenn die Anwendung keinen die Kultur Französisch-Version der Ressourcendatei, die `My.Resources` Objekt ruft die Ressource ab, aus der Ressourcendatei für die Standardkultur.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> ist kein gültiger Kulturname.</exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Kultur ab, die der aktuelle Thread für die Bearbeitung und Formatierung von Zeichenfolgen verwendet.</summary>
        <value>Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das die Kultur darstellt, die der aktuelle Thread für die Bearbeitung und Formatierung von Zeichenfolgen verwendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.CurrentCulture` -Eigenschaft ruft die <xref:System.Globalization.CultureInfo> -Objekt, das der aktuelle Thread für die Bearbeitung und Formatierung von Zeichenfolgen verwendet. Dieses Objekt ist identisch mit dem Kennwort, das zurückgegeben werden, indem die <xref:System.Threading.Thread.CurrentCulture%2A> -Eigenschaft, die viele der Zeichenfolgen beziehen Berechnungen für diesen Thread steuert. Die <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft bestimmt die Standardformate für Datumsangaben, Uhrzeiten, Währungen und Zahlen. Es bestimmt außerdem, wie Sortieren und vergleichen Sie Zeichenfolgen profitieren.  
  
 Um die Kultur ändern möchten, können Sie die <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture%2A> Methode oder einem anderen zuweisen <xref:System.Globalization.CultureInfo> -Objekt an die <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft.  
  
 Die <xref:System.Threading.Thread.CurrentCulture%2A> Einstellung unterscheidet sich von der Spracheinstellung. Sie enthält nur Daten, die im Zusammenhang mit Standardeinstellungen für eine geografische Region.  
  
 Verwenden der `My.Application.CurrentUICulture` Eigenschaft, um die Kultur abzurufen, die der aktuelle Thread zum Abrufen von kulturspezifischen Ressourcen verwendet.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows Forms-Steuerelementbibliothek|**Ja**|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die Kultur wirkt sich die Zeichenfolgendarstellung von Datumsangaben auf.  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentVariable">
      <MemberSignature Language="C#" Value="public string GetEnvironmentVariable (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetEnvironmentVariable(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.GetEnvironmentVariable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnvironmentVariable (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEnvironmentVariable(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetEnvironmentVariable : string -&gt; string" Usage="applicationBase.GetEnvironmentVariable name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ein <see langword="String" />, der den Namen der Umgebungsvariablen enthält.</param>
        <summary>Gibt den Wert der angegebenen Umgebungsvariablen zurück.</summary>
        <returns>Ein <see langword="String" />, der den Wert der Umgebungsvariablen mit dem Namen <paramref name="name" /> enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.GetEnvironmentVariable` Methode gibt zurück, die Umgebungsvariable mit dem Namen `name`. Diese Methode ähnelt <xref:System.Environment.GetEnvironmentVariable%28System.String%29?displayProperty=nameWithType>, außer dass diese Methode löst eine Ausnahme aus, wenn die Umgebungsvariable angegeben `name` ist nicht vorhanden.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows Forms-Steuerelementbibliothek|**Ja**|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `My.Application.GetEnvironmentVariable` Methode zum Abrufen und Anzeigen von den Wert der PATH-Umgebungsvariablen, falls verfügbar. Andernfalls wird eine Meldung gibt an, dass die PATH-Umgebungsvariable nicht vorhanden ist.  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">Die von <paramref name="name" /> angegebene Umgebungsvariable ist nicht vorhanden.</exception>
        <exception cref="T:System.Security.SecurityException">Der aufrufende Code verfügt über keine <see cref="T:System.Security.Permissions.EnvironmentPermission" /> mit <see langword="Read" />-Zugriff.</exception>
        <altmember cref="M:System.Environment.GetEnvironmentVariable(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Info As AssemblyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ Info { Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.AssemblyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das Eigenschaften zum Abrufen von Informationen über die Assembly der Anwendung bereitstellt, z. B. die Versionsnummer, Beschreibung usw.</summary>
        <value>Das <see cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" />-Objekt der aktuellen Anwendung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel verwendet die `My.Application.Info.Version` Eigenschaft, um die Version der Anwendung anzuzeigen.  
  
 [!code-vb[VbVbalrMyApplication#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.Log Log { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.Log Log" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Log As Log" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::Log ^ Log { Microsoft::VisualBasic::Logging::Log ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Log : Microsoft.VisualBasic.Logging.Log" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.Log</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das Eigenschaften und Methoden zum Schreiben von Ereignis- und Ausnahmeinformationen an die Protokollüberwachung der Anwendung bereitstellt.</summary>
        <value>Das <see cref="T:Microsoft.VisualBasic.Logging.Log" />-Objekt der aktuellen Anwendung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel zeigt die Verwendung der `My.Application.Log.WriteEntry` -Methode zum Protokollieren von Ablaufprotokollinformationen. Weitere Informationen finden Sie unter [Vorgehensweise: Schreiben von Protokollmeldungen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo UICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo UICulture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ UICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UICulture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Kultur ab, die der aktuelle Thread zum Abrufen von kulturspezifischen Ressourcen verwendet.</summary>
        <value>Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das die Kultur darstellt, die der aktuelle Thread zum Abrufen von kulturspezifischen Ressourcen verwendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.CurrentUICulture` -Eigenschaft ruft die <xref:System.Globalization.CultureInfo> Objekt, mit der aktuelle Thread, die zum Abrufen von kulturspezifischen Ressourcen verwendet. Dieses Objekt ist identisch mit dem Kennwort, das zurückgegeben werden, indem die <xref:System.Threading.Thread.CurrentUICulture%2A> Eigenschaft. Die <xref:System.Threading.Thread.CurrentUICulture%2A> -Eigenschaft bestimmt die Kultur, die von der Ressourcen-Manager und die `My.Resources` -Objekt, das Informationen, die kulturspezifische Ressourcen zur Laufzeit sucht.  
  
 Um die Kultur ändern möchten, können Sie die <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A> Methode oder einem anderen zuweisen <xref:System.Globalization.CultureInfo> -Objekt an die <xref:System.Threading.Thread.CurrentUICulture%2A> Eigenschaft.  
  
 Die <xref:System.Threading.Thread.CurrentCulture%2A> Einstellung unterscheidet sich von der Spracheinstellung. Sie enthält nur Daten, die im Zusammenhang mit Standardeinstellungen für eine geografische Region.  
  
 Verwenden der `My.Application.CurrentCulture` Eigenschaft, um die Kultur abzurufen, die der aktuelle Thread für die Bearbeitung und Formatierung von Zeichenfolgen verwendet.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows Forms-Steuerelementbibliothek|**Ja**|  
|Websteuerelementbibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `My.Application.CurrentCulture` Eigenschaft, um die aktuelle Kultur zwischenzuspeichern, bevor sie mit <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A>. Die `My.Application.ChangeUICulture` Methode legt der Kultur, die die `My.Resources` Objekt verwendet wird, zum Abrufen von Ressourcen.  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 Für dieses Beispiel funktioniert, müssen Ihre Anwendung eine Zeichenfolge, die mit dem Namen `Message` in die Ressourcendatei der Anwendung einer Datei, und die Anwendung sollte die Kultur Französisch-Version der Ressourcendatei, verfügen `Resources.fr-FR.resx`. Weitere Informationen finden Sie unter [Vorgehensweise: Hinzufügen oder Entfernen von Ressourcen](https://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d).  
  
 Wenn die Anwendung keinen die Kultur Französisch-Version der Ressourcendatei, die `My.Resources` Objekt ruft die Ressource ab, aus der Ressourcendatei für die Standardkultur.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/my-resources-object.md">My.Resources-Objekt (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
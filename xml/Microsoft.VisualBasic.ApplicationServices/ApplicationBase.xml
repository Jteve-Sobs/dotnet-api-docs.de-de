<Type Name="ApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.ApplicationBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3e7c3a9f1bb8665f33152a18109485c6f014c215" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70348315" /></Metadata><TypeSignature Language="C#" Value="public class ApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ApplicationBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationBase" />
  <TypeSignature Language="F#" Value="type ApplicationBase = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Eigenschaften, Methoden und Ereignisse bereit, die sich auf die aktuelle Anwendung beziehen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Eigenschaften, die vom `My.Application` -Objekt verfügbar gemacht werden, geben Daten zurück, die nur mit der aktuellen Anwendung oder DLL verknüpft sind. Mit `My.Application` können keine Informationen auf Systemebene bearbeitet werden.  
  
 Das `My.Application`-Objekt besteht aus den folgenden Klassen:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> stellt Member bereit, die in allen Projekten verfügbar sind.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase>stellt Member bereit, die in Windows Forms-Anwendungen verfügbar sind.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase>stellt Member bereit, die in Konsolen Anwendungen verfügbar sind.  
  
   
  
## Examples  
 In diesem Beispiel wird `My.Application.GetEnvironmentVariable` die-Methode verwendet, um den Wert der PATH-Umgebungsvariablen zu erhalten und anzuzeigen, wenn dieser Wert verfügbar ist. Andernfalls wird eine Meldung angezeigt, die angibt, dass die PATH-Umgebungsvariable nicht vorhanden ist.  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationBase();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ChangeCulture">
      <MemberSignature Language="C#" Value="public void ChangeCulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ChangeCulture(string cultureName) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeCulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeCulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeCulture : string -&gt; unit" Usage="applicationBase.ChangeCulture cultureName" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeCulture(string cultureName) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName"><see langword="String" />. Der Name der Kultur als Zeichenfolge. Eine Liste der möglichen Namen finden Sie unter <see cref="T:System.Globalization.CultureInfo" />.</param>
        <summary>Ändert die Kultur, die vom aktuellen Thread für die Bearbeitung und Formatierung von Zeichenfolgen verwendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.ChangeCulture` -Methode ändert die- <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft des aktuellen Threads. <xref:System.Threading.Thread.CurrentCulture%2A>bestimmt die Standardformate für Datumsangaben, Uhrzeiten, Währungen, Ziffern, Sortierreihenfolge von Text, Zeichen folgen Vergleiche und die Groß-/Kleinschreibung für alle Berechnungen in diesem Thread.  
  
 Zum Abrufen der aktuellen Kultur können Sie die <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture%2A> -Eigenschaft oder die <xref:System.Threading.Thread.CurrentCulture%2A> -Eigenschaft verwenden.  
  
 Diese <xref:System.Threading.Thread.CurrentCulture%2A> Einstellung unterscheidet sich von einer Spracheinstellung. Sie enthält nur Daten, die sich auf die Standardeinstellungen für eine geografische Region beziehen. Daher kann die <xref:System.Threading.Thread.CurrentCulture%2A> -Eigenschaft nur auf eine bestimmte Kultur oder <xref:System.Globalization.CultureInfo.InvariantCulture%2A>auf festgelegt werden.  
  
 Verwenden Sie `My.Application.ChangeUICulture` die-Methode, um die Kultur zu ändern, die der aktuelle Thread zum Abrufen von kulturspezifischen Ressourcen verwendet.  
  
> [!IMPORTANT]
>  Die `My.Application.ChangeCulture` Methode erfordert eine <xref:System.Security.Permissions.SecurityPermission> mit dem <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> Satz. Das Manipulieren von Threads ist aufgrund des mit Threads verbundenen Sicherheitszustands gefährlich. Daher sollte diese Berechtigung nur bei Bedarf für vertrauenswürdigen Code erteilt werden. In semivertrauens würdigem Code können Sie die Kultur eines Threads nicht ändern.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows Forms-Steuerelementbibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die Änderung der Kultur die Zeichen folgen Darstellung von Datumsangaben ändert.  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> ist kein gültiger Kulturname.</exception>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ChangeUICulture">
      <MemberSignature Language="C#" Value="public void ChangeUICulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ChangeUICulture(string cultureName) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeUICulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeUICulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeUICulture : string -&gt; unit" Usage="applicationBase.ChangeUICulture cultureName" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeUICulture(string cultureName) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName"><see langword="String" />. Der Name der Kultur als Zeichenfolge. Eine Liste der möglichen Namen finden Sie unter <see cref="T:System.Globalization.CultureInfo" />.</param>
        <summary>Ändert die Kultur, die der aktuelle Thread zum Abrufen von kulturspezifischen Ressourcen verwendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.ChangeUICulture` -Methode ändert die- <xref:System.Threading.Thread.CurrentUICulture%2A> Eigenschaft des aktuellen Threads. Die <xref:System.Threading.Thread.CurrentUICulture%2A> -Eigenschaft bestimmt die Kultur, die von der Ressourcen-Manager `My.Resources` und dem-Objekt verwendet wird. diese Informationen werden verwendet, um zur Laufzeit Kultur abhängige Ressourcen zu suchen.  
  
 Um die aktuelle UI-Kultur abzurufen, können Sie die <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture%2A> -Eigenschaft oder <xref:System.Threading.Thread.CurrentUICulture%2A> die-Eigenschaft verwenden.  
  
 Verwenden Sie `My.Application.ChangeCulture` die-Methode, um die Kultur zu ändern, die der aktuelle Thread für die Zeichen folgen Bearbeitung und Zeichen folgen Formatierung verwendet.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows Forms-Steuerelementbibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird `My.Application.ChangeUICulture` die-Methode verwendet, um die `My.Resources` Kulturfest zulegen, die vom Objekt zum Abrufen von Ressourcen verwendet wird.  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 Damit dieses Beispiel funktioniert, muss Ihre Anwendung über eine Zeichenfolge mit `Message` dem Namen in der Ressourcen Datei der Anwendung verfügen, und die Anwendung sollte über die französische Kultur Version der Ressourcen `Resources.fr-FR.resx`Datei verfügen. Weitere Informationen finden Sie unter [Vorgehensweise: Hinzufügen oder entfernen](https://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d)von Ressourcen.  
  
 Wenn die Anwendung nicht über die französische Kultur Version der Ressourcen Datei verfügt, ruft das `My.Resources` -Objekt die Ressource aus der Standard-Culture-Ressourcen Datei ab.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> ist kein gültiger Kulturname.</exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Kultur ab, die der aktuelle Thread für die Bearbeitung und Formatierung von Zeichenfolgen verwendet.</summary>
        <value>Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das die Kultur darstellt, die der aktuelle Thread für die Bearbeitung und Formatierung von Zeichenfolgen verwendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.CurrentCulture` -Eigenschaft ruft <xref:System.Globalization.CultureInfo> das-Objekt ab, das der aktuelle Thread für die Zeichen folgen Bearbeitung und Zeichen folgen Formatierung verwendet. Dieses Objekt ist mit dem von der <xref:System.Threading.Thread.CurrentCulture%2A> -Eigenschaft zurückgegebenen identisch, das viele der Zeichen folgen bezogenen Berechnungen in diesem Thread steuert. Die <xref:System.Threading.Thread.CurrentCulture%2A> -Eigenschaft bestimmt die Standardformate für Datumsangaben, Uhrzeiten, Währungen und Zahlen. Außerdem wird festgelegt, wie Zeichen folgen sortiert, verglichen und groß geschrieben werden.  
  
 Um die Kultur zu ändern, können Sie die <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture%2A> -Methode verwenden oder der <xref:System.Globalization.CultureInfo> <xref:System.Threading.Thread.CurrentCulture%2A> -Eigenschaft ein anderes-Objekt zuweisen.  
  
 Diese <xref:System.Threading.Thread.CurrentCulture%2A> Einstellung unterscheidet sich von einer Spracheinstellung. Sie enthält nur Daten, die sich auf die Standardeinstellungen für eine geografische Region beziehen.  
  
 Verwenden Sie `My.Application.CurrentUICulture` die-Eigenschaft, um die Kultur abzurufen, die der aktuelle Thread zum Abrufen von kulturspezifischen Ressourcen verwendet.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows Forms-Steuerelementbibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 Dieses Beispiel zeigt, wie sich die Kultur auf die Zeichen folgen Darstellung von Datums Werten auswirkt.  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentVariable">
      <MemberSignature Language="C#" Value="public string GetEnvironmentVariable (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetEnvironmentVariable(string name) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.GetEnvironmentVariable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnvironmentVariable (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEnvironmentVariable(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetEnvironmentVariable : string -&gt; string" Usage="applicationBase.GetEnvironmentVariable name" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetEnvironmentVariable(string name) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ein <see langword="String" />, der den Namen der Umgebungsvariablen enthält.</param>
        <summary>Gibt den Wert der angegebenen Umgebungsvariablen zurück.</summary>
        <returns>Ein <see langword="String" />, der den Wert der Umgebungsvariablen mit dem Namen <paramref name="name" /> enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.GetEnvironmentVariable` -Methode gibt die Umgebungsvariable mit dem `name`Namen zurück. Diese Methode ähnelt <xref:System.Environment.GetEnvironmentVariable%28System.String%29?displayProperty=nameWithType>, mit der Ausnahme, dass diese Methode eine Ausnahme auslöst, wenn die durch `name` angegebene Umgebungsvariable nicht vorhanden ist.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows Forms-Steuerelementbibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird `My.Application.GetEnvironmentVariable` die-Methode verwendet, um den Wert der PATH-Umgebungsvariablen zu erhalten und anzuzeigen, falls verfügbar. Andernfalls wird eine Meldung angezeigt, die besagt, dass die PATH-Umgebungsvariable nicht vorhanden ist.  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">Die von <paramref name="name" /> angegebene Umgebungsvariable ist nicht vorhanden.</exception>
        <exception cref="T:System.Security.SecurityException">Der aufrufende Code verfügt über keine <see cref="T:System.Security.Permissions.EnvironmentPermission" /> mit <see langword="Read" />-Zugriff.</exception>
        <altmember cref="M:System.Environment.GetEnvironmentVariable(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Info As AssemblyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ Info { Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.AssemblyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das Eigenschaften zum Abrufen von Informationen über die Assembly der Anwendung bereitstellt, z. B. die Versionsnummer, Beschreibung usw.</summary>
        <value>Das <see cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" />-Objekt der aktuellen Anwendung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 In diesem Beispiel wird `My.Application.Info.Version` die-Eigenschaft verwendet, um die Version der Anwendung anzuzeigen.  
  
 [!code-vb[VbVbalrMyApplication#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.Log Log { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.Log Log" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Log As Log" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::Log ^ Log { Microsoft::VisualBasic::Logging::Log ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Log : Microsoft.VisualBasic.Logging.Log" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.Log</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das Eigenschaften und Methoden zum Schreiben von Ereignis- und Ausnahmeinformationen an die Protokollüberwachung der Anwendung bereitstellt.</summary>
        <value>Das <see cref="T:Microsoft.VisualBasic.Logging.Log" />-Objekt der aktuellen Anwendung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel zeigt die Verwendung der `My.Application.Log.WriteEntry` -Methode zum Protokollieren von Ablaufprotokollinformationen. Weitere Informationen finden Sie unter [Vorgehensweise: Schreiben Sie Protokoll](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)Meldungen.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo UICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo UICulture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ UICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UICulture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Kultur ab, die der aktuelle Thread zum Abrufen von kulturspezifischen Ressourcen verwendet.</summary>
        <value>Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das die Kultur darstellt, die der aktuelle Thread zum Abrufen von kulturspezifischen Ressourcen verwendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Application.CurrentUICulture` -Eigenschaft ruft <xref:System.Globalization.CultureInfo> das-Objekt ab, das der aktuelle Thread zum Abrufen von kulturspezifischen Ressourcen verwendet. Dieses Objekt ist mit dem Objekt identisch, das von <xref:System.Threading.Thread.CurrentUICulture%2A> der-Eigenschaft zurückgegeben wird. Die <xref:System.Threading.Thread.CurrentUICulture%2A> -Eigenschaft bestimmt die Kultur, die von der Ressourcen-Manager `My.Resources` und dem Objekt verwendet wird, um Informationen zu erhalten, die für die Suche nach Kultur abhängigen Ressourcen zur Laufzeit erforderlich sind.  
  
 Um die Kultur zu ändern, können Sie die <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A> -Methode verwenden oder der <xref:System.Globalization.CultureInfo> <xref:System.Threading.Thread.CurrentUICulture%2A> -Eigenschaft ein anderes-Objekt zuweisen.  
  
 Diese <xref:System.Threading.Thread.CurrentCulture%2A> Einstellung unterscheidet sich von einer Spracheinstellung. Sie enthält nur Daten, die sich auf die Standardeinstellungen für eine geografische Region beziehen.  
  
 Verwenden Sie `My.Application.CurrentCulture` die-Eigenschaft, um die Kultur, die der aktuelle Thread für Zeichen folgen Bearbeitung und Zeichen folgen Formatierung verwendet, zu erhalten.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows Forms-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows Forms-Steuerelementbibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A>wird `My.Application.CurrentCulture` die-Eigenschaft verwendet, um die aktuelle Kultur zwischenzuspeichern, bevor Sie mit geändert wird. Die `My.Application.ChangeUICulture` -Methode legt die Kulturfest `My.Resources` , die vom-Objekt zum Abrufen von Ressourcen verwendet wird.  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 Damit dieses Beispiel funktioniert, muss Ihre Anwendung über eine Zeichenfolge mit `Message` dem Namen in der Ressourcen Datei der Anwendung verfügen, und die Anwendung sollte über die französische Kultur Version der Ressourcen `Resources.fr-FR.resx`Datei verfügen. Weitere Informationen finden Sie unter [Vorgehensweise: Hinzufügen oder entfernen](https://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d)von Ressourcen.  
  
 Wenn die Anwendung nicht über die französische Kultur Version der Ressourcen Datei verfügt, ruft das `My.Resources` -Objekt die Ressource aus der Standard-Culture-Ressourcen Datei ab.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/my-resources-object.md">My. Resources-Objekt (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>

<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CustomAttributeTypedArgument.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b5d1ec529757045ee60974de7538e486877eb0ff.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5d1ec529757045ee60974de7538e486877eb0ff</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>Represents an argument of a custom attribute in the reflection-only context, or an element of an array argument.</source>
          <target state="translated">Stellt ein Argument eines benutzerdefinierten Attributs im Reflection-Only-Kontext oder ein Element eines Arrayarguments dar.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>, and so on.</source>
          <target state="translated">Code, der in den ReflectionOnly Kontext überprüft wird kann nicht ausgeführt werden, daher es nicht immer möglich ist, benutzerdefinierte Attribute zu untersuchen, durch das Erstellen von Instanzen von sie und anschließend untersucht werden, deren Eigenschaften und Methoden wie <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>usw. .</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.</source>
          <target state="translated">Wenn der Code für den Attributtyp selbst in den reflektionsbezogenen Kontext geladen wird, kann sie nicht ausgeführt werden.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structure is used by the <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class to provide access to the type and value of a positional argument specified for a custom attribute instance, without executing the attribute constructor.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> Struktur wird verwendet, durch die <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> Klasse, um Zugriff auf den Typ und Wert positionelle Argumente für eine Instanz des benutzerdefinierten Attributs angegeben wird, ohne den Attributkonstruktor auszuführen.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>It also provides access to the type and value of a named argument without executing the code of the corresponding property of the custom attribute type.</source>
          <target state="translated">Es bietet außerdem Zugriff auf den Typ und Wert, der ein benanntes Argument ohne den Code der entsprechenden Eigenschaft des benutzerdefinierten Attributtyps ausführen.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>The types and values of all the positional and named arguments of an attribute instance are provided by <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structures.</source>
          <target state="translated">Die Typen und Werte aller mit Feldern fester Breite und benannte Argumente eine Instanz des gebotenen sind <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> Strukturen.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>The positional attributes returned by the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A?displayProperty=nameWithType&gt;</ph> property are directly represented by <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structures, but the named arguments returned by the <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A?displayProperty=nameWithType&gt;</ph> property are represented by <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structures; to get the <ph id="ph5">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure for a named argument, use the <ph id="ph6">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Zurückgegebenes Positionsargumente der <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A?displayProperty=nameWithType&gt;</ph> die dargestellte Eigenschaft direkt <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> Strukturen, aber den benannten Argumenten zurückgegebenes der <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A?displayProperty=nameWithType&gt;</ph> -Eigenschaft dargestellte <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> Strukturen; zum Abrufen der <ph id="ph5">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> Struktur für ein benanntes Argument, verwenden die <ph id="ph6">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=nameWithType&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>If an argument is an array of values, the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> that represents the argument returns a generic <ph id="ph3">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> of <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> objects.</source>
          <target state="translated">Wenn ein Argument ein Wertearray ist die <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> Eigenschaft von der <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> , dass, stellt das Argument eine generische zurückgibt <ph id="ph3">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> von <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> Objekte.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>Each <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> object in the collection represents the corresponding element of the array.</source>
          <target state="translated">Jede <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> Objekt in der Auflistung darstellt, das entsprechende Element des Arrays.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>To create instances of the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class, use the <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> factory method.</source>
          <target state="translated">Zum Erstellen von Instanzen der <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> Klasse, verwenden Sie die <ph id="ph2">`static`</ph> <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> Factorymethode.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">Im folgende Beispiel wird ein benutzerdefiniertes Attribut mit vier Konstruktoren und vier Eigenschaften definiert.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">Zwei Eigenschaften sind schreibgeschützt und einrichten, indem Sie die Positionsparameter der Konstruktoren.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">Die anderen beiden Eigenschaften weisen Lese-/Schreibzugriff und kann nur mithilfe von Set heißen Argumente.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">Eine mit Feldern fester Breite-Eigenschaft ist ein Array von Zeichenfolgen, und eine benannte Eigenschaft ist ein Array von Ganzzahlen.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">Das Attribut wird auf die Assembly angewendet sowie auf einen in der Assembly deklarierten Typ, eine Methode dieses Typs und einen Parameter der Methode.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">In diesen Fällen werden verschiedene Konstruktoren verwendet.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">Bei der Ausführung wird die Assembly selbst in den ReflectionOnly Kontext geladen, und zeigt die benutzerdefinierten Attribute an.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">Das Attribut, das auf den Typ angewendet wird veranschaulicht, Arrayeigenschaften mit Feldern fester Breite und benannte Argumente.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Reflection.CustomAttributeTypedArgument">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)">
          <source>The value of the custom attribute argument.</source>
          <target state="translated">Der Wert des benutzerdefinierten Attributarguments.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> class with the specified value.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph>-Klasse mit dem angegebenen Wert.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)">
          <source>The <ph id="ph1">`value`</ph> parameter cannot be <ph id="ph2">`null`</ph> for this constructor, because the argument type is inferred from the type of <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Die <ph id="ph1">`value`</ph> Parameter darf nicht sein <ph id="ph2">`null`</ph> für diesen Konstruktor, da der Argumenttyp, von dem Typ des abgeleitet wird <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)">
          <source>To specify a <ph id="ph1">`null`</ph> value, use the <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument.%23ctor%28System.Type%2CSystem.Object%29&gt;</ph> constructor.</source>
          <target state="translated">Angeben einer <ph id="ph1">`null`</ph> -Wert, verwenden Sie die <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument.%23ctor%28System.Type%2CSystem.Object%29&gt;</ph> Konstruktor.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)">
          <source>This constructor is for use by inheritors of the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> class.</source>
          <target state="translated">Dieser Konstruktor ist für die Verwendung durch Erben von der <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)">
          <source>It is not intended for use in application code.</source>
          <target state="translated">Es ist nicht für die Verwendung im Code vorgesehen.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)">
          <source>The type of the custom attribute argument.</source>
          <target state="translated">Der Typ des benutzerdefinierten Attributarguments.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)">
          <source>The value of the custom attribute argument.</source>
          <target state="translated">Der Wert des benutzerdefinierten Attributarguments.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> class with the specified type and value.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph>-Klasse mit dem angegebenen Typ und Wert.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)">
          <source>This constructor is for use by inheritors of the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> class.</source>
          <target state="translated">Dieser Konstruktor ist für die Verwendung durch Erben von der <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)">
          <source>It is not intended for use in application code.</source>
          <target state="translated">Es ist nicht für die Verwendung im Code vorgesehen.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="argumentType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="argumentType" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>Gets the type of the argument or of the array argument element.</source>
          <target state="translated">Ruft den Typ des Arguments oder des Arrayargumentelements ab.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the type of the argument or of the array element.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>-Objekt, das den Typ des Arguments oder des Arrayelements darstellt.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>For simple arguments or for elements of array arguments, this property identifies the actual type of the value returned by the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> property.</source>
          <target state="translated">Für einfache Argumente oder für Elemente des Arrayargumente wird diese Eigenschaft kennzeichnet den tatsächlichen Typ, der den Rückgabewert von der <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>For array arguments, this property returns the array type, but the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> property returns a <ph id="ph2">`ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;`</ph> (<ph id="ph3">`ReadOnlyCollection(Of CustomAttributeTypedArgument)`</ph> in Visual Basic) in which each element of the collection represents the corresponding element of the array argument.</source>
          <target state="translated">Für Arrayargumente, gibt diese Eigenschaft den Arraytyp zurück, mit denen jedoch <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> Eigenschaft gibt eine <ph id="ph2">`ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;`</ph> (<ph id="ph3">`ReadOnlyCollection(Of CustomAttributeTypedArgument)`</ph> in Visual Basic) in dem jedes Element der Auflistung das entsprechende Element des Arrayarguments darstellt.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">Im folgende Beispiel wird ein benutzerdefiniertes Attribut mit vier Konstruktoren und vier Eigenschaften definiert.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">Zwei Eigenschaften sind schreibgeschützt und einrichten, indem Sie die Positionsparameter der Konstruktoren.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">Die anderen beiden Eigenschaften weisen Lese-/Schreibzugriff und kann nur mithilfe von Set heißen Argumente.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">Eine mit Feldern fester Breite-Eigenschaft ist ein Array von Zeichenfolgen, und eine benannte Eigenschaft ist ein Array von Ganzzahlen.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">Das Attribut wird auf die Assembly angewendet sowie auf einen in der Assembly deklarierten Typ, eine Methode dieses Typs und einen Parameter der Methode.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">In diesen Fällen werden verschiedene Konstruktoren verwendet.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">Bei der Ausführung wird die Assembly selbst in den ReflectionOnly Kontext geladen, und zeigt die benutzerdefinierten Attribute an.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">Das Attribut, das auf den Typ angewendet wird veranschaulicht, Arrayeigenschaften mit Feldern fester Breite und benannte Argumente.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A&gt;</ph> property is used in the <ph id="ph2">`ShowValueOrArray`</ph> method that displays custom attribute data, to display the types of attributes.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A&gt;</ph> Eigenschaft wird verwendet, der <ph id="ph2">`ShowValueOrArray`</ph> -Methode, die benutzerdefinierte Attributdaten werden angezeigt, um die Typen von Attributen anzuzeigen.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)">
          <source>Another object to compare to.</source>
          <target state="translated">Ein weiteres Objekt für den Vergleich.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)">
          <source>Indicates whether this instance and a specified object are equal.</source>
          <target state="translated">Gibt an, ob diese Instanz und ein angegebenes Objekt gleich sind.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> and this instance are the same type and represent the same value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> und diese Instanz denselben Typ aufweisen und denselben Wert darstellen, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Gibt den Hashcode für diese Instanz zurück.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.GetHashCode">
          <source>A 32-bit signed integer that is the hash code for this instance.</source>
          <target state="translated">Eine 32-Bit-Ganzzahl mit Vorzeichen. Diese ist der Hashcode für die Instanz.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> structure to the left of the equality operator.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph>-Struktur auf der linken Seite des Gleichheitsoperators.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> structure to the right of the equality operator.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph>-Struktur auf der rechten Seite des Gleichheitsoperators.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
          <source>Tests whether two <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> structures are equivalent.</source>
          <target state="translated">Testet, ob zwei <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph>-Strukturen gleich sind.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> structures are equal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die beiden <ph id="ph2">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph>-Strukturen gleich sind, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Die entsprechende Methode für diesen Operator ist <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> structure to the left of the inequality operator.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph>-Struktur auf der linken Seite des Ungleichheitsoperators.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> structure to the right of the inequality operator.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph>-Struktur auf der rechten Seite des Ungleichheitsoperators.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
          <source>Tests whether two <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> structures are different.</source>
          <target state="translated">Testet, ob zwei <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph>-Strukturen verschieden sind.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> structures are different; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die beiden <ph id="ph2">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph>-Strukturen verschieden sind; andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Die entsprechende Methode für diesen Operator ist <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.ToString">
          <source>Returns a string consisting of the argument name, the equal sign, and a string representation of the argument value.</source>
          <target state="translated">Gibt eine Zeichenfolge mit den Namen des Arguments, dem Gleichheitszeichen und einer Zeichenfolgendarstellung des Argumentwerts zurück.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeTypedArgument.ToString">
          <source>A string consisting of the argument name, the equal sign, and a string representation of the argument value.</source>
          <target state="translated">Eine Zeichenfolge mit den Namen des Arguments, dem Gleichheitszeichen und einer Zeichenfolgendarstellung des Argumentwerts.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>Gets the value of the argument for a simple argument or for an element of an array argument; gets a collection of values for an array argument.</source>
          <target state="translated">Ruft für ein einfaches Argument oder ein Element eines Arrayarguments den Wert des Arguments ab. Ruft für ein Arrayargument eine Auflistung von Werten ab.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>An object that represents the value of the argument or element, or a generic <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> objects that represent the values of an array-type argument.</source>
          <target state="translated">Ein Objekt, das den Wert des Arguments oder Elements darstellt, oder eine generische <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> von <ph id="ph2">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph>-Objekten, die die Werte eines Arraytyparguments darstellen.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> represents an array argument, this property returns a <ph id="ph2">`ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;`</ph> (<ph id="ph3">`ReadOnlyCollection(Of CustomAttributeTypedArgument)`</ph> in Visual Basic).</source>
          <target state="translated">Wenn die <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> ein Arrayarguments darstellt, gibt diese Eigenschaft eine <ph id="ph2">`ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;`</ph> (<ph id="ph3">`ReadOnlyCollection(Of CustomAttributeTypedArgument)`</ph> in Visual Basic).</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>Each element of the collection represents the corresponding element of the array argument.</source>
          <target state="translated">Jedes Element der Auflistung stellt das entsprechende Element eines Arrayarguments dar.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>The type of the value can be obtained by using the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A&gt;</ph> property.</source>
          <target state="translated">Der Typ des Werts abgerufen werden kann, mithilfe der <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A&gt;</ph> gets the actual type of the value returned by the <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> property for simple arguments or for elements of array arguments.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A&gt;</ph> Ruft den tatsächlichen Typ, der den Rückgabewert von der <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> -Eigenschaft für einfache Argumente oder für Elemente des Arrayargumente.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>It returns the array type for array arguments.</source>
          <target state="translated">Es gibt den Arraytyp für Arrayargumente zurück.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">Im folgende Beispiel wird ein benutzerdefiniertes Attribut mit vier Konstruktoren und vier Eigenschaften definiert.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">Zwei Eigenschaften sind schreibgeschützt und einrichten, indem Sie die Positionsparameter der Konstruktoren.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">Die anderen beiden Eigenschaften weisen Lese-/Schreibzugriff und kann nur mithilfe von Set heißen Argumente.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">Eine mit Feldern fester Breite-Eigenschaft ist ein Array von Zeichenfolgen, und eine benannte Eigenschaft ist ein Array von Ganzzahlen.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">Das Attribut wird auf die Assembly angewendet sowie auf einen in der Assembly deklarierten Typ, eine Methode dieses Typs und einen Parameter der Methode.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">In diesen Fällen werden verschiedene Konstruktoren verwendet.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">Bei der Ausführung wird die Assembly selbst in den ReflectionOnly Kontext geladen, und zeigt die benutzerdefinierten Attribute an.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">Das Attribut, das auf den Typ angewendet wird veranschaulicht, Arrayeigenschaften mit Feldern fester Breite und benannte Argumente.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> property is used in the <ph id="ph2">`ShowValueOrArray`</ph> method that displays custom attribute data, to display the values of attributes.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> Eigenschaft wird verwendet, der <ph id="ph2">`ShowValueOrArray`</ph> -Methode, die benutzerdefinierte Attributdaten werden angezeigt, um die Werte der Attribute anzuzeigen.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeTypedArgument.Value">
          <source><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A&gt;</ph> &amp;#124; <ph id="ph2">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A&gt;</ph> &amp;#124; <ph id="ph2">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A&gt;</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
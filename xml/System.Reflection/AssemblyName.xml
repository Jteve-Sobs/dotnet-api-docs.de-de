<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AssemblyName.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55e8d575c8f6baf9dd58560db2cd8c587433f5908.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e8d575c8f6baf9dd58560db2cd8c587433f5908</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.AssemblyName">
          <source>Describes an assembly's unique identity in full.</source>
          <target state="translated">Beschreibt die eindeutige Identität einer Assembly vollständig.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object contains information about an assembly, which you can use to bind to that assembly.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> Objekt enthält Informationen zu einer Assembly, die Sie verwenden können, um auf diese Assembly zu binden.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>An assembly's identity consists of the following:</source>
          <target state="translated">Die Identität einer Assembly umfasst Folgendes:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Simple name.</source>
          <target state="translated">Einfacher Name.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Version number.</source>
          <target state="translated">Versionsnummer.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Cryptographic key pair.</source>
          <target state="translated">Kryptografische Schlüsselpaar.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Supported culture.</source>
          <target state="translated">Unterstützte Kultur.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The simple name is typically the file name for the manifest file without its extension.</source>
          <target state="translated">Der einfache Name ist in der Regel den Dateinamen für die Manifestdatei ohne Erweiterung.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The key pair includes a public and private key, used to create strong-name signatures for assemblies.</source>
          <target state="translated">Das Schlüsselpaar enthält einen öffentlichen und privaten Schlüssel zum Erstellen von Signaturen mit starkem Namen für Assemblys verwendet.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</source>
          <target state="translated">Alle Compiler, die die common Language Runtime unterstützen, den einfachen Namen einer geschachtelten Klasse geben, und Reflektion erstellt einen ergänzten Namen bei einer Abfrage in Übereinstimmung mit den folgenden Konventionen.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Delimiter</source>
          <target state="translated">Trennzeichen</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Meaning</source>
          <target state="translated">Bedeutung</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Backslash (<ph id="ph1">\\</ph>)</source>
          <target state="translated">Umgekehrter Schrägstrich (<ph id="ph1">\\</ph>)</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Escape character.</source>
          <target state="translated">Escape-Zeichen.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Comma (,)</source>
          <target state="translated">Komma (,)</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Precedes the assembly name.</source>
          <target state="translated">Ist der Name der Assembly vorangestellt.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Plus sign (+)</source>
          <target state="translated">Pluszeichen (+)</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Precedes a nested class.</source>
          <target state="translated">Ist eine geschachtelte Klasse vorangestellt.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>For example, the fully qualified name for a class might look like this:</source>
          <target state="translated">Beispielsweise kann der vollqualifizierte Name für eine Klasse wie folgt aussehen:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>ContainingClass+NestedClass,MyAssembly</source>
          <target state="translated">ContainingClass + NestedClass, MyAssembly</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>A "++" becomes "<ph id="ph1">\\</ph><ph id="ph2">+</ph><ph id="ph3">\\</ph>+", and a "<ph id="ph4">\\</ph>" becomes "<ph id="ph5">\\</ph><ph id="ph6">\\</ph>".</source>
          <target state="translated">Ein "++" wird "<ph id="ph1">\\</ph><ph id="ph2">+</ph><ph id="ph3">\\</ph>+", und ein "<ph id="ph4">\\</ph>"wird"<ph id="ph5">\\</ph><ph id="ph6">\\</ph>".</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This qualified name can be persisted and later used to load the <ph id="ph1">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">Dieser qualifizierte Name kann beibehalten und später zum Laden der <ph id="ph1">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To search for and load a <ph id="ph1">&lt;xref:System.Type&gt;</ph>, use <ph id="ph2">&lt;xref:System.Type.GetType%2A&gt;</ph> either with the type name only or with the assembly qualified type name.</source>
          <target state="translated">Suchen und Laden einer <ph id="ph1">&lt;xref:System.Type&gt;</ph>, verwenden Sie <ph id="ph2">&lt;xref:System.Type.GetType%2A&gt;</ph> entweder mit dem Typ oder einen Namen geben nur mit der Assembly qualifizierten Typnamen.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> with the type name only will look for the <ph id="ph2">&lt;xref:System.Type&gt;</ph> in the caller's assembly and then in the System assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> mit dem Namen nur sieht für den <ph id="ph2">&lt;xref:System.Type&gt;</ph> in der Assembly des Aufrufers, und klicken Sie dann in der System-Assembly.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> with the assembly qualified type name will look for the <ph id="ph2">&lt;xref:System.Type&gt;</ph> in any assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> mit der Assembly qualifizierten Typnamen für sieht die <ph id="ph2">&lt;xref:System.Type&gt;</ph> in jeder beliebigen Assembly.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>A fully specified <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> must have the name, culture, public key or public key token, major version, minor version, build number, and revision number parameters.</source>
          <target state="translated">Eine vollständig angegebene <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> Name, Kultur, öffentlicher Schlüssel und Token des öffentlichen Schlüssels, Version, Nebenversion, Build-Nummer und Revision Nummernparameter Hauptversion benötigen.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The last four are packaged in the <ph id="ph1">&lt;xref:System.Version&gt;</ph> type.</source>
          <target state="translated">Die letzten vier werden in zusammengefasst, die <ph id="ph1">&lt;xref:System.Version&gt;</ph> Typ.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To create a simple name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>.</source>
          <target state="translated">Um einen einfachen Namen zu erstellen, erstellen eine <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> Objekt mit dem Standardkonstruktor, und legen die <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The other properties are optional.</source>
          <target state="translated">Die anderen Eigenschaften sind optional.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To create a full strong name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph>.</source>
          <target state="translated">Um einen vollständigen starken Namen zu erstellen, erstellen eine <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> Objekt mit dem Standardkonstruktor, und legen die <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> und <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The other properties are optional.</source>
          <target state="translated">Die anderen Eigenschaften sind optional.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> to set the public key and the strong name.</source>
          <target state="translated">Verwendung <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> den öffentlichen Schlüssel und den starken Namen fest.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The strong name signing always uses the <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> hash algorithm.</source>
          <target state="translated">Den starken Namen signieren immer verwendet die <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> Hashalgorithmus.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To ensure that the names are constructed correctly, use the following properties:</source>
          <target state="translated">Um sicherzustellen, dass die Namen korrekt erstellt werden, verwenden Sie die folgenden Eigenschaften:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>You can also get the name by using the <ph id="ph1">`/l`</ph> option with the <bpt id="p1">[</bpt>Gacutil.exe (Global Assembly Cache Tool)<ept id="p1">](~/docs/framework/tools/gacutil-exe-gac-tool.md)</ept></source>
          <target state="translated">Sie können auch den Namen abrufen, mithilfe der <ph id="ph1">`/l`</ph> -Option mit der <bpt id="p1">[</bpt>Gacutil.exe (Global Assembly Cache-Tool)<ept id="p1">](~/docs/framework/tools/gacutil-exe-gac-tool.md)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>For a partially specified strong name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the name and public key.</source>
          <target state="translated">Erstellen Sie für einen teilweise angegebenen starken Namen eine <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> Objekt, mit dem Standardkonstruktor, und legen Sie den Namen und den öffentlichen Schlüssel.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>An assembly created using such an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> can be signed later using the Assembly Linker (Al.exe).</source>
          <target state="translated">Eine Assembly erstellt wurde, verwenden z. B. eine <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> kann später mit den Assemblylinker (Al.exe) signiert werden.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>It is possible to specify a public key and a <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> with inconsistent values.</source>
          <target state="translated">Es ist möglich, geben Sie einen öffentlichen Schlüssel und ein <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> mit inkonsistente Werte.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This can be useful in developer scenarios.</source>
          <target state="translated">Dies kann Entwickler-Szenarien nützlich sein.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>In this case, the public key retrieved with <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> specifies the correct public key, while the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> specifies the public and private keys used during development.</source>
          <target state="translated">In diesem Fall wird der öffentliche Schlüssel mit abgerufen <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> gibt an, den richtigen öffentlichen Schlüssel an, während die <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> gibt die öffentlichen und privaten Schlüssel, die während der Entwicklung verwendet.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When the runtime detects a mismatch between the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> and the public key, it looks up in the registry the correct key that matches the public key.</source>
          <target state="translated">Wenn die Common Language Runtime erkennt einen Konflikt zwischen der <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> und der öffentliche Schlüssel diese sucht in der Registrierung den richtigen Schlüssel, der den öffentlichen Schlüssel entspricht.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The format of the display name of an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> is a comma-delimited Unicode string that begins with the name, as follows:</source>
          <target state="translated">Das Format des Anzeigenamens des ein <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> ist eine durch Trennzeichen getrennte Unicode-Zeichenfolge, die mit dem Namen wie folgt beginnt:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`Name`</ph> is the textual name of the assembly.</source>
          <target state="translated"><ph id="ph1">`Name`</ph> ist der wörtliche Name der Assembly an.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`CultureInfo`</ph> is the RFC1766-format-defined culture.</source>
          <target state="translated"><ph id="ph1">`CultureInfo`</ph> die Kultur im Format RFC1766 definiert ist.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`Major`</ph>, <ph id="ph2">`Minor`</ph>, <ph id="ph3">`Build`</ph>, and <ph id="ph4">`Revision`</ph> are the major version, minor version, build number, and revision number of the assembly.</source>
          <target state="translated"><ph id="ph1">`Major`</ph>, <ph id="ph2">`Minor`</ph>, <ph id="ph3">`Build`</ph>, und <ph id="ph4">`Revision`</ph> sind Hauptversion, Nebenversion, Build-Nummer und die Revisionsnummer der Assembly.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`StrongName`</ph> is the hexadecimal-encoded low-order 64 bits of the hash value of the public key generated using the SHA-1 hashing algorithm and the public key specified by <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`StrongName`</ph> ist die hexadezimal codierten niederwertigen 64 Bits des der Hash-Wert, der den öffentlichen Schlüssel mit dem Hashalgorithmus SHA-1 generiert und dem öffentlichen Schlüssel, der vom angegebenen <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`PublicKeyToken`</ph> is the hexadecimal-encoded public key specified by <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`PublicKeyToken`</ph> ist der hexadezimal-codierte öffentliche Schlüssel gemäß <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Hexadecimal encoding is defined as the conversion of each byte of a binary object to two hexadecimal characters, progressing from least to most significant byte.</source>
          <target state="translated">Hexadezimale Codierung wird definiert, als die Konvertierung jedes Byte der ein binäres Objekt in zwei Hexadezimalzeichen, hängen vom niedrigsten zum höchsten Byte.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Additional display values will be added as deemed necessary.</source>
          <target state="translated">Zusätzliche Anzeigewerte werden je nach Bedarf hinzugefügt.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>If the full public key is known, then PublicKey may be substituted for StrongName.</source>
          <target state="translated">Wenn der vollständigen öffentliche Schlüssel bekannt ist, kann PublicKey StrongName ersetzt werden.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Also note that except for <ph id="ph1">`Name`</ph>, which must come first, the lexical order of parameters is unimportant.</source>
          <target state="translated">Beachten Sie, dass mit Ausnahme von <ph id="ph1">`Name`</ph>, müssen zunächst die stammen, die lexikalische Reihenfolge von Parametern ist unerheblich.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>However, any parameter (<ph id="ph1">`Version`</ph>, <ph id="ph2">`Culture`</ph>, <ph id="ph3">`StrongName`</ph> or <ph id="ph4">`PublicKey`</ph>) not specifically set is considered to be omitted, and the <ph id="ph5">&lt;xref:System.Reflection.AssemblyName&gt;</ph> is then considered partial.</source>
          <target state="translated">Jedoch einen Parameter (<ph id="ph1">`Version`</ph>, <ph id="ph2">`Culture`</ph>, <ph id="ph3">`StrongName`</ph> oder <ph id="ph4">`PublicKey`</ph>) nicht ausdrücklich Satz gilt weggelassen werden, und die <ph id="ph5">&lt;xref:System.Reflection.AssemblyName&gt;</ph> als unvollständig.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When specifying partial information, Name parameters must be specified in the order described above.</source>
          <target state="translated">Wenn Sie partielle Informationen angeben, müssen die Parameter in der oben beschriebenen Reihenfolge angegeben werden.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When supplying a display name, the convention <ph id="ph1">`StrongName =null`</ph> or <ph id="ph2">`PublicKey= null`</ph> indicates that binding and matching against a simply named assembly is required.</source>
          <target state="translated">Wenn Sie einen Anzeigenamen angeben, die Konvention <ph id="ph1">`StrongName =null`</ph> oder <ph id="ph2">`PublicKey= null`</ph> gibt an, dass die Bindung und eine einfach benannte Assembly Vergleich erforderlich ist.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Additionally, the convention <ph id="ph1">`Culture= ""`</ph> (double quote representing an empty string) indicates matching against the default culture.</source>
          <target state="translated">Darüber hinaus die Konvention <ph id="ph1">`Culture= ""`</ph> (doppeltes Anführungszeichen, das eine leere Zeichenfolge darstellt) gibt an, für die Standardkultur entsprechen.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The following example shows an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for a simply named assembly with default culture.</source>
          <target state="translated">Das folgende Beispiel zeigt eine <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> für eine einfach benannte Assembly mit Standardkultur.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The following example shows a fully specified reference for a strongly named assembly with culture "en".</source>
          <target state="translated">In folgendem Beispiel wird einen vollständig angegebenen Verweis auf eine Assembly mit starkem Namen mit der Kultur „en“ dargestellt.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">Dieses Beispiel zeigt, wie mit verschiedenen Reflektionsklassen verwendet die in einer Assembly enthaltene Metadaten analysieren.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Reflection.AssemblyName">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>The following example creates a dynamic assembly named <ph id="ph1">`MyAssembly.exe`</ph> and saves it to your hard disk.</source>
          <target state="translated">Das folgende Beispiel erstellt eine dynamische Assembly mit dem Namen <ph id="ph1">`MyAssembly.exe`</ph> und speichert sie auf der Festplatte.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>After running the example, you can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the assembly metadata.</source>
          <target state="translated">Nach dem Ausführen des Beispiels können Sie die <bpt id="p1">[</bpt>Ildasm.exe (IL-Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> den Metadaten der Assembly zu untersuchen.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The display name of the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Reflection.AssemblyName.FullName" /&gt;</ph> property.</source>
          <target state="translated">Der Anzeigename der Assembly, wie von der <ph id="ph1">&lt;see cref="P:System.Reflection.AssemblyName.FullName" /&gt;</ph>-Eigenschaft zurückgegeben.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class with the specified display name.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>-Klasse mit dem angegebenen Anzeigenamen.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The supplied <ph id="ph1">`assemblyName`</ph> is parsed, and the appropriate fields of the new <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph> are initialized with values from the display name.</source>
          <target state="translated">Die angegebene <ph id="ph1">`assemblyName`</ph> analysiert wird, und die entsprechenden Felder der neuen <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph> mit Werten aus dem Anzeigenamen initialisiert werden.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>This is the recommended way of parsing display names.</source>
          <target state="translated">Dies ist die empfohlene Methode zum Analysieren von Anzeigenamen von.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>Writing your own code to parse display names is not recommended.</source>
          <target state="translated">Schreiben von Code zum Analysieren von Anzeigenamen suchen wird nicht empfohlen.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The following example creates an instance of <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> from a display name.</source>
          <target state="translated">Das folgende Beispiel erstellt eine Instanz des <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> über einen Anzeigenamen ein.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The individual elements of the display name are output to the console as properties of the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object.</source>
          <target state="translated">Die einzelnen Elemente des Anzeigenamens Ausgabe in die Konsole als Eigenschaften des sind die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is a zero length string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> ist eine Zeichenfolge der Länge 0 (null).</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.IO.IOException" /&gt;</ph>, instead.</source>
          <target state="translated">Fangen Sie in <bpt id="p1">[</bpt>.NET für Windows Store-Apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> oder der <bpt id="p2">[</bpt>portablen Klassenbibliothek<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> stattdessen die Basisklassenausnahme <ph id="ph1">&lt;see cref="T:System.IO.IOException" /&gt;</ph> ab.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The referenced assembly could not be found, or could not be loaded.</source>
          <target state="translated">Die referenzierte Assembly wurde nicht gefunden oder konnte nicht geladen werden.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.Clone">
          <source>Makes a copy of this <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> object.</source>
          <target state="translated">Erstellt eine Kopie dieses <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>-Objekts.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.Clone">
          <source>An object that is a copy of this <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> object.</source>
          <target state="translated">Ein Objekt, das eine Kopie dieses <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>-Objekts ist.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.Clone">
          <source>A new object is created, identical to the original.</source>
          <target state="translated">Ein neues Objekt ist, mit dem Original identisch erstellt.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Gets or sets the location of the assembly as a URL.</source>
          <target state="translated">Ruft den Speicherort der Assembly als URL ab oder legt diesen fest.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>A string that is the URL location of the assembly.</source>
          <target state="translated">Eine Zeichenfolge, die den Speicherort der Assembly als URL darstellt.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>When an assembly is loaded, this value can also be obtained using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.CodeBase%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Wenn eine Assembly geladen wird, diesen Wert auch erhalten mithilfe der <ph id="ph1">&lt;xref:System.Reflection.Assembly.CodeBase%2A?displayProperty=nameWithType&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>If the assembly was loaded as a byte array, this property returns the location of the caller of the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%29&gt;</ph> method overload, not the location of the loaded assembly.</source>
          <target state="translated">Wenn die Assembly als Bytearray geladen wurde, gibt diese Eigenschaft den Speicherort des Aufrufers der <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%29&gt;</ph> methodenüberladung, nicht den Speicherort der geladenen Assembly.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Do not use an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> with only the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property set.</source>
          <target state="translated">Verwenden Sie keine <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> nur mit der <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> Eigenschaftensatz.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> -Eigenschaft nicht übergibt alle Elemente der Assemblyidentität (z. B. Name oder Version), also laden tritt nicht auf gemäß Laden von Identity-Regeln, wie von der Sie erwarten die <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Instead, the assembly is loaded using load-from rules.</source>
          <target state="translated">Stattdessen wird die Assembly geladen LoadFrom-Regeln verwenden.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>For information about the disadvantages of using the load-from context, see the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> method overload or <bpt id="p1">[</bpt>Best Practices for Assembly Loading<ept id="p1">](~/docs/framework/deployment/best-practices-for-assembly-loading.md)</ept>.</source>
          <target state="translated">Informationen zu den Nachteilen der Verwendung der LoadFrom-Kontext finden Sie unter der <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> methodenüberladung oder <bpt id="p1">[</bpt>Best Practices für das Laden der Assembly<ept id="p1">](~/docs/framework/deployment/best-practices-for-assembly-loading.md)</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Im folgenden Beispiel gibt eine dynamische Assembly und speichert es in das aktuelle Verzeichnis.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property is used to specify the directory where the assembly is saved.</source>
          <target state="translated">Wenn die Assembly erstellt wird, die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> Eigenschaft wird verwendet, um das Verzeichnis anzugeben, in dem die Assembly gespeichert ist.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.ContentType">
          <source>Gets or sets a value that indicates what type of content the assembly contains.</source>
          <target state="translated">Ruft einen Wert ab oder legt einen Wert fest, der angibt, welche Art von Inhalt die Assembly enthält.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ContentType">
          <source>A value that indicates what type of content the assembly contains.</source>
          <target state="translated">Ein Wert, der angibt, welche Art von Inhalts der Assembly enthält.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>Gets or sets the culture supported by the assembly.</source>
          <target state="translated">Ruft die von der Assembly unterstützte Kultur ab oder legt diese fest.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>An object that represents the culture supported by the assembly.</source>
          <target state="translated">Ein Objekt, das die von der Assembly unterstützte Kultur darstellt.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Im folgenden Beispiel gibt eine dynamische Assembly und speichert es in das aktuelle Verzeichnis.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph> property is used to specify the culture, which is part of the assembly's display name.</source>
          <target state="translated">Wenn die Assembly erstellt wird, die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph> Eigenschaft wird verwendet, um die Kultur angeben, die Anzeigenamen der Assembly gehört.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CultureName">
          <source>Gets or sets the name of the culture associated with the assembly.</source>
          <target state="translated">Ruft den Namen der Kultur ab, die dieser Assembly zugeordnet ist, oder legt den Namen fest.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureName">
          <source>The culture name.</source>
          <target state="translated">Der Kulturname</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.EscapedCodeBase">
          <source>Gets the URI, including escape characters, that represents the codebase.</source>
          <target state="translated">Ruft den URI einschließlich Escapezeichen ab, der die CodeBase darstellt.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.EscapedCodeBase">
          <source>A URI with escape characters.</source>
          <target state="translated">Ein URI mit Escapezeichen.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Flags">
          <source>Gets or sets the attributes of the assembly.</source>
          <target state="translated">Ruft die Attribute der Assembly ab oder legt diese fest.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>A value that represents the attributes of the assembly.</source>
          <target state="translated">Ein Wert, der die Attribute der Assembly darstellt.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Im folgenden Beispiel gibt eine dynamische Assembly und speichert es in das aktuelle Verzeichnis.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Flags%2A&gt;</ph> property is used to specify that the assembly has a public key.</source>
          <target state="translated">Wenn die Assembly erstellt wird, die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Flags%2A&gt;</ph> Eigenschaft wird verwendet, um anzugeben, dass die Assembly über einen öffentlichen Schlüssel enthält.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Gets the full name of the assembly, also known as the display name.</source>
          <target state="translated">Ruft den vollständigen Namen der Assembly ab, der auch als Anzeigename bezeichnet wird.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>A string that is the full name of the assembly, also known as the display name.</source>
          <target state="translated">Eine Zeichenfolge, die den vollständigen Namen der Assembly darstellt, der auch als Anzeigename bezeichnet wird.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The display name typically consists of the simple name, version number, supported culture, and public key.</source>
          <target state="translated">Der Anzeigename besteht in der Regel den einfachen Namen, Versionsnummer, unterstützten Kultur und öffentlicher Schlüssel.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>For example:</source>
          <target state="translated">Zum Beispiel:</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Writing your own code to parse display names is not recommended.</source>
          <target state="translated">Schreiben von Code zum Analysieren von Anzeigenamen suchen wird nicht empfohlen.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Instead, pass the display name to the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.%23ctor%2A&gt;</ph> constructor, which parses it and populates the appropriate fields of the new <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph>.</source>
          <target state="translated">Stattdessen übergeben Sie den Namen, der die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.%23ctor%2A&gt;</ph> -Konstruktor, der analysiert, und füllt die entsprechenden Felder der neuen <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>When an assembly is loaded, this value can also be obtained using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Wenn eine Assembly geladen wird, diesen Wert auch erhalten mithilfe der <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Im folgenden Beispiel gibt eine dynamische Assembly und speichert es in das aktuelle Verzeichnis.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>When the assembly is created, the code example sets the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> properties, which together comprise an assembly's full name, or display name.</source>
          <target state="translated">Wenn die Assembly erstellt wird, im Codebeispiel wird die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, und <ph id="ph4">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> Eigenschaften, die zusammen bilden eine Assembly vollständigen Namen oder Anzeigenamen.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.FullName%2A&gt;</ph> property is then used to retrieve the display name.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.FullName%2A&gt;</ph> Eigenschaft wird dann verwendet, um den Anzeigenamen abzurufen.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The path for the assembly whose <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> is to be returned.</source>
          <target state="translated">Der Pfad für die Assembly, deren <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> zurückgegeben werden soll.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> for a given file.</source>
          <target state="translated">Ruft den <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> für eine angegebene Datei ab.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>An object that represents the given assembly file.</source>
          <target state="translated">Ein Objekt, das die angegebene Assemblydatei darstellt.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>This will only work if the file contains an assembly manifest.</source>
          <target state="translated">Dies funktioniert nur, wenn die Datei ein Assemblymanifest enthält.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>This method causes the file to be opened and closed, but the assembly is not added to this domain.</source>
          <target state="translated">Diese Methode bewirkt, dass die Datei geöffnet und geschlossen werden, aber die Assembly wird mit dieser Domäne nicht hinzugefügt.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The following example gets the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for an assembly on disk.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> für eine Assembly auf dem Datenträger.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>It will not run unless you replace the string "MyAssembly.exe" with the file name of an assembly (including the path, if necessary) on your hard disk.</source>
          <target state="translated">Es wird nicht ausgeführt, wenn die Zeichenfolge "MyAssembly.exe" zu ersetzen mit dem Dateinamen einer Assembly (einschließlich des Pfads, falls erforderlich) auf der Festplatte.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Alternatively, you can compile this example as "MyAssembly.exe".</source>
          <target state="translated">Alternativ können Sie dieses Beispiel als "MyAssembly.exe" kompilieren.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is invalid, such as an assembly with an invalid culture.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> ist ungültig, wie z. B. im Fall einer Assembly mit einer ungültigen Kultur.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> wurde nicht gefunden.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The caller does not have path discovery permission.</source>
          <target state="translated">Der Aufrufer verfügt nicht über die erforderlichen Berechtigungen zur Pfadsuche.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> ist keine gültige Assembly.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>An assembly or module was loaded twice with two different sets of evidence.</source>
          <target state="translated">Eine Assembly oder ein Modul wurde zweimal mit zwei unterschiedlichen Beweissätzen geladen.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>for access to information in the path.</source>
          <target state="translated">für den Zugriff auf Informationen im Pfad.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The object to be populated with serialization information.</source>
          <target state="translated">Das Objekt, das mit Serialisierungsinformationen aufgefüllt werden soll.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination context of the serialization.</source>
          <target state="translated">Der Zielkontext der Serialisierung.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Gets serialization information with all the data needed to recreate an instance of this <ph id="ph1">&lt;see langword="AssemblyName" /&gt;</ph>.</source>
          <target state="translated">Ruft Serialisierungsinformationen mit allen Daten ab, die für das erneute Erstellen einer Instanz dieses <ph id="ph1">&lt;see langword="AssemblyName" /&gt;</ph> benötigt werden.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>Gets the public key of the assembly.</source>
          <target state="translated">Ruft den öffentlichen Schlüssel der Assembly ab.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>A byte array that contains the public key of the assembly.</source>
          <target state="translated">Ein Bytearray mit dem öffentlichen Schlüssel der Assembly.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Im folgenden Beispiel gibt eine dynamische Assembly und speichert es in das aktuelle Verzeichnis.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method is used to give the assembly a public key.</source>
          <target state="translated">Wenn die Assembly erstellt wird, die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> Methode wird verwendet, um der Assembly einen öffentlichen Schlüssel zu gewähren.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is then used to retrieve the public key, which is displayed to the console.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> Methode wird dann verwendet, um den öffentlichen Schlüssel abrufen, die in der Konsole angezeigt wird.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>A public key was provided (for example, by using the <ph id="ph1">&lt;see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /&gt;</ph> method), but no public key token was provided.</source>
          <target state="translated">Es wurde ein öffentlicher Schlüssel bereitgestellt (z. B. mithilfe der <ph id="ph1">&lt;see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /&gt;</ph>-Methode), es wurde jedoch kein öffentliches Schlüsseltoken bereitgestellt.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</source>
          <target state="translated">Ruft das Token des öffentlichen Schlüssels ab, d. h. die letzten 8 Byte des SHA-1-Hashs des öffentlichen Schlüssels, mit dem die Anwendung oder Assembly signiert ist.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>A byte array that contains the public key token.</source>
          <target state="translated">Ein Bytearray, das öffentliche Schlüsseltoken enthält.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Im folgenden Beispiel gibt eine dynamische Assembly und speichert es in das aktuelle Verzeichnis.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method is used to set the assembly's public key token.</source>
          <target state="translated">Wenn die Assembly erstellt wird, die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> Methode wird verwendet, um das öffentliche Schlüsseltoken der Assembly festgelegt.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> method is then used to retrieve the public key token, which is displayed to the console.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> Methode wird dann verwendet, um das öffentliche Schlüsseltoken abzurufen, wodurch die in der Konsole angezeigt wird.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>Gets or sets the hash algorithm used by the assembly manifest.</source>
          <target state="translated">Ruft den Hashalgorithmus ab, der vom Assemblymanifest verwendet wird, oder legt diesen fest.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>The hash algorithm used by the assembly manifest.</source>
          <target state="translated">Der vom Assemblymanifest verwendete Hashalgorithmus.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property of an <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object that is returned by the <ph id="ph4">&lt;xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType&gt;</ph> method is <ph id="ph5">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType&gt;</ph> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <ph id="ph6">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Beginnend mit der <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, die <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> Eigenschaft ein <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> von zurückgegebene Objekt der <ph id="ph4">&lt;xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType&gt;</ph> Methode ist <ph id="ph5">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType&gt;</ph> Wenn ist kein Hashalgorithmus für die Assembly verwiesen wird, oder wenn der Hashalgorithmus auf den verwiesen wird Assembly wird nicht durch identifiziert die <ph id="ph6">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType&gt;</ph> Enumeration.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>In previous versions of the .NET Framework, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property returned <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType&gt;</ph> in this situation.</source>
          <target state="translated">In früheren Versionen von .NET Framework die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> zurückgegebene Eigenschaft <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType&gt;</ph> in dieser Situation.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Im folgenden Beispiel gibt eine dynamische Assembly und speichert es in das aktuelle Verzeichnis.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property is used to set the hash algorithm for the assembly manifest.</source>
          <target state="translated">Wenn die Assembly erstellt wird, die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> Eigenschaft wird verwendet, um den Hashalgorithmus für das Assemblymanifest festzulegen.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>Gets or sets the public and private cryptographic key pair that is used to create a strong name signature for the assembly.</source>
          <target state="translated">Ruft das Paar aus öffentlichem und privatem kryptografischem Schlüssel ab, mit dem eine Signatur mit starkem Namen für die Assembly erstellt wird, oder legt dieses fest.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The public and private cryptographic key pair to be used to create a strong name for the assembly.</source>
          <target state="translated">Das Paar aus öffentlichem und privatem kryptografischem Schlüssel, mit dem ein starker Name für die Assembly erstellt werden soll.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>When the runtime loads an assembly, it does not set the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> property.</source>
          <target state="translated">Wenn die Common Language Runtime eine Assembly geladen wird, ist es nicht festgelegt die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The getter for the property is only useful if the user set the property before using the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object to create a dynamic assembly, and subsequently wants to retrieve the key pair.</source>
          <target state="translated">Der Getter für die Eigenschaft ist nur dann hilfreich, wenn der Benutzer die Eigenschaft vor der Verwendung der <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> Objekt, das eine dynamische Assembly erstellt und anschließend das Schlüsselpaar abrufen möchte.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Im folgenden Beispiel gibt eine dynamische Assembly und speichert es in das aktuelle Verzeichnis.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> property is used to set the assembly's public and private cryptographic keys.</source>
          <target state="translated">Wenn die Assembly erstellt wird, die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> Eigenschaft wird verwendet, um die Assembly öffentliche und private kryptografische Schlüssel festgelegt.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>.</source>
          <target state="translated">sein.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Name">
          <source>Gets or sets the simple name of the assembly.</source>
          <target state="translated">Ruft den einfachen Namen der Assembly ab oder legt ihn fest.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Name">
          <source>This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.</source>
          <target state="translated">Dies ist üblicherweise (jedoch nicht unbedingt) der Dateiname der Manifestdatei der Assembly, abzüglich ihrer Erweiterung.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The simple name of the assembly.</source>
          <target state="translated">Der einfache Name der Assembly.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The manifest file is the file that contains the assembly manifest.</source>
          <target state="translated">Die Manifestdatei ist die Datei, die das Assemblymanifest enthält.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>For example, the simple name of a single-file assembly named "MyAssembly.dll" is "MyAssembly".</source>
          <target state="translated">Beispielsweise ist der einfache Name der eine Einzeldateiassembly mit dem Namen "MyAssembly.dll", "MyAssembly".</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Im folgenden Beispiel gibt eine dynamische Assembly und speichert es in das aktuelle Verzeichnis.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> property is used to set the simple name of the dynamic assembly.</source>
          <target state="translated">Wenn die Assembly erstellt wird, die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> Eigenschaft wird verwendet, um den einfachen Namen der dynamischen Assembly festzulegen.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
          <source>The source of the deserialization event.</source>
          <target state="translated">Die Quelle des Deserialisierungsereignisses.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface and is called back by the deserialization event when deserialization is complete.</source>
          <target state="translated">Implementiert die <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph>-Schnittstelle und wird nach Abschluss der Deserialisierung durch das Deserialisierungsereignis aufgerufen.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>Gets or sets a value that identifies the processor and bits-per-word of the platform targeted by an executable.</source>
          <target state="translated">Ruft einen Wert ab, der den Prozessor und die Bits pro Wort für die Plattform angibt, auf die eine ausführbare Datei zielt, oder legt diesen Wert fest.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>One of the enumeration values that identifies the processor and bits-per-word of the platform targeted by an executable.</source>
          <target state="translated">Einer der Enumerationswerte, der den Prozessor und die Bits pro Wort für die Plattform angibt, auf die eine ausführbare Datei zielt.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, this property always returns <ph id="ph2">&lt;xref:System.Reflection.ProcessorArchitecture.None?displayProperty=nameWithType&gt;</ph> for reference assemblies.</source>
          <target state="translated">Beginnend mit der <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, gibt diese Eigenschaft immer <ph id="ph2">&lt;xref:System.Reflection.ProcessorArchitecture.None?displayProperty=nameWithType&gt;</ph> nach Verweisassemblys.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The reference assembly name.</source>
          <target state="translated">Der Name der Referenzassembly.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The assembly name that is compared to the reference assembly.</source>
          <target state="translated">Der Assemblyname, der mit der Referenzassembly verglichen wird.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>Returns a value indicating whether two assembly names are the same.</source>
          <target state="translated">Gibt einen Wert zurück, der angibt, ob zwei Assemblynamen identisch sind.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The comparison is based on the simple assembly names.</source>
          <target state="translated">Der Vergleich basiert auf den einfachen Assemblynamen.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the simple assembly names are the same; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die einfachen Assemblynamen gleich sind; andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The comparison depends only on the simple assembly name.</source>
          <target state="translated">Der Vergleich wird nur dem einfachen Assemblynamen abhängig.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>It ignores version, culture, and public key token.</source>
          <target state="translated">Version, Kultur und öffentliches Schlüsseltoken werden dabei ignoriert.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>A byte array containing the public key of the assembly.</source>
          <target state="translated">Ein Bytearray mit dem öffentlichen Schlüssel der Assembly.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>Sets the public key identifying the assembly.</source>
          <target state="translated">Legt den öffentlichen Schlüssel zum Identifizieren der Assembly fest.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>You must also use the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method to provide a public key token.</source>
          <target state="translated">Sie müssen auch verwenden, die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> Methode, um ein öffentliches Schlüsseltoken bereitzustellen.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is called.</source>
          <target state="translated">Andernfalls ein <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> wird ausgelöst, wenn die <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> -Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Im folgenden Beispiel gibt eine dynamische Assembly und speichert es in das aktuelle Verzeichnis.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method is used to give the assembly a public key.</source>
          <target state="translated">Wenn die Assembly erstellt wird, die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> Methode wird verwendet, um der Assembly einen öffentlichen Schlüssel zu gewähren.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is then used to retrieve the public key, which is displayed to the console.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> Methode wird dann verwendet, um den öffentlichen Schlüssel abrufen, die in der Konsole angezeigt wird.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>A byte array containing the public key token of the assembly.</source>
          <target state="translated">Ein Bytearray mit dem Token des öffentlichen Schlüssels der Assembly.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</source>
          <target state="translated">Legt das Token des öffentlichen Schlüssels fest, d. h. die letzten 8 Bytes des SHA-1-Hashs des öffentlichen Schlüssels, mit dem die Anwendung oder Assembly signiert ist.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>When you set the public key by calling the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method, you must also use the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method to provide a public key token.</source>
          <target state="translated">Wenn Sie den öffentlichen Schlüssel festlegen, durch Aufrufen der <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> -Methode, müssen Sie auch verwenden die <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> Methode, um ein öffentliches Schlüsseltoken bereitzustellen.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is called.</source>
          <target state="translated">Andernfalls ein <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> wird ausgelöst, wenn die <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> -Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Im folgenden Beispiel gibt eine dynamische Assembly und speichert es in das aktuelle Verzeichnis.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method is used to set the assembly's public key token.</source>
          <target state="translated">Wenn die Assembly erstellt wird, die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> Methode wird verwendet, um das öffentliche Schlüsseltoken der Assembly festgelegt.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> method is then used to retrieve the public key token, which is displayed to the console.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> Methode wird dann verwendet, um das öffentliche Schlüsseltoken abzurufen, wodurch die in der Konsole angezeigt wird.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Für zukünftige Verwendung reserviert.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Muss IID_NULL sein.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Das übergebene Array von zuzuordnenden Namen.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Die Anzahl der zuzuordnenden Namen.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Der Gebietsschemakontext, in dem die Namen interpretiert werden sollen.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array that receives the IDs corresponding to the names.</source>
          <target state="translated">Das vom Aufrufer zugeordnete Array, das die IDs entsprechend den Namen empfängt.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Ordnet eine Reihe von Namen einer entsprechenden Reihe von Dispatchbezeichnern zu.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, finden Sie in der MSDN Library.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Spät gebundener Zugriff mithilfe der <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>-Schnittstelle in COM wird nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Die zurückzugebenden Typinformationen.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Der Gebietsschemabezeichner für die Typinformationen.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Empfängt einen Zeiger auf das angeforderte Objekt mit den Typinformationen.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Ruft die Typinformationen für ein Objekt ab, die dann zum Abrufen der Typinformationen für eine Schnittstelle verwendet werden können.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, finden Sie in der MSDN Library.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Spät gebundener Zugriff mithilfe der <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>-Schnittstelle in COM wird nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Zeigt auf einen Speicherort, der die Anzahl der Schnittstellen mit Typinformationen empfängt, die vom Objekt bereitgestellt werden.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Ruft die Anzahl der Schnittstellen mit Typinformationen ab, die von einem Objekt bereitgestellt werden (0 oder 1).</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, finden Sie in der MSDN Library.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Spät gebundener Zugriff mithilfe der <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>-Schnittstelle in COM wird nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Bezeichnet den Member.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Für zukünftige Verwendung reserviert.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Muss IID_NULL sein.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Der Gebietsschemakontext, in dem Argumente interpretiert werden sollen.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Flags, die den Kontext des Aufrufs beschreiben.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Ein Zeiger auf eine Struktur, die ein Array von Argumenten und ein Array von Argument-DISPIDs für benannte Argumente sowie Zähler für die Anzahl der Elemente in jedem Array enthält.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Ein Verweis auf den Speicherort, an dem das Ergebnis gespeichert werden soll.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Ein Zeiger auf eine Struktur mit Ausnahmeinformationen.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Der Index des ersten Arguments mit einem Fehler.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Stellt den Zugriff auf von einem Objekt verfügbar gemachte Eigenschaften und Methoden bereit.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">`IDispatch::Invoke`</ph>, finden Sie in der MSDN Library.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Spät gebundener Zugriff mithilfe der <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>-Schnittstelle in COM wird nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ToString">
          <source>Returns the full name of the assembly, also known as the display name.</source>
          <target state="translated">Gibt den vollständigen Namen der Assembly zurück, der auch als Anzeigename bezeichnet wird.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ToString">
          <source>The full name of the assembly, or the class name if the full name cannot be determined.</source>
          <target state="translated">Der vollständige Name der Assembly oder der Klassenname, wenn der vollständige Name nicht bestimmt werden kann.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ToString">
          <source>See the description of <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of the returned string.</source>
          <target state="translated">Siehe die Beschreibung der <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> für das Format der zurückgegebenen Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ToString">
          <source>The following example gets an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object for a hypothetical <ph id="ph2">`MyAssembly.exe`</ph> assembly, and then uses the <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ToString%2A&gt;</ph> method to retrieve the full assembly name, or display name.</source>
          <target state="translated">Im folgenden Beispiel wird ein <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> Objekt für eine hypothetische <ph id="ph2">`MyAssembly.exe`</ph> Assembly zugewiesen und dann verwendet der <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ToString%2A&gt;</ph> Methode zum Abrufen des vollen Assemblynamens oder Anzeigename.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Version">
          <source>Gets or sets the major, minor, build, and revision numbers of the assembly.</source>
          <target state="translated">Ruft die Haupt-, Neben-, Build- und Revisionsnummer der Assembly ab oder legt diese fest.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>An object that represents the major, minor, build, and revision numbers of the assembly.</source>
          <target state="translated">Ein Objekt, das die Haupt-, Neben-, Build- und Revisionsnummer der Assembly darstellt.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>All components of the version must be integers greater than or equal to zero.</source>
          <target state="translated">Alle Komponenten der Version müssen es sich um ganze Zahlen größer oder gleich 0 (null) sein.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>Metadata restricts the major, minor, build, and revision components for an assembly to a maximum value of <ph id="ph1">&lt;xref:System.UInt16.MaxValue?displayProperty=nameWithType&gt;</ph> - 1.</source>
          <target state="translated">Metadaten schränkt die Haupt-und Nebenversion, Build und Revisionskomponenten für eine Assembly und einem Maximalwert von <ph id="ph1">&lt;xref:System.UInt16.MaxValue?displayProperty=nameWithType&gt;</ph> - 1.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>If a component exceeds this value, no error is thrown; however, in a dynamic assembly, that component is zero.</source>
          <target state="translated">Wenn eine Komponente diesen Wert überschreitet, wird kein Fehler ausgelöst. in einer dynamischen Assembly ist diese Komponente jedoch 0 (null).</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>This section contains two examples.</source>
          <target state="translated">Dieser Abschnitt enthält zwei Beispiele.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The first example shows how to retrieve the version of the currently executing assembly.</source>
          <target state="translated">Im erste Beispiel wird gezeigt, wie die Version der aktuell ausgeführten Assembly abgerufen werden.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The second example shows how to use the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> property to specify the assembly version when you emit a dynamic assembly.</source>
          <target state="translated">Im zweite Beispiel wird gezeigt, wie die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> Eigenschaft, um die Version der Assembly anzugeben, wenn Sie eine dynamische Assembly ausgeben.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Beispiel 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The following example retrieves and displays the version numbers of the currently executing assembly and the assembly that contains the <ph id="ph1">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">Im folgenden Beispiel ruft ab und zeigt die Versionsnummern der aktuell ausgeführten Assembly und die Assembly mit der <ph id="ph1">&lt;xref:System.String&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Beispiel 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Im folgenden Beispiel gibt eine dynamische Assembly und speichert es in das aktuelle Verzeichnis.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> property is used to specify version information for the assembly.</source>
          <target state="translated">Wenn die Assembly erstellt wird, die <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> Eigenschaft wird verwendet, um Versionsinformationen für die Assembly anzugeben.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>Gets or sets the information related to the assembly's compatibility with other assemblies.</source>
          <target state="translated">Ruft die Informationen ab, die sich auf die Kompatibilität der Assembly mit anderen Assemblys beziehen, oder legt diese fest.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>A value that represents information about the assembly's compatibility with other assemblies.</source>
          <target state="translated">Ein Wert, der Informationen über die Kompatibilität der Assembly mit anderen Assemblys darstellt.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> information indicates, for example, that the assembly cannot execute side-by-side with other versions due to conflicts over a device driver.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> Informationen geben an, z. B., dass die Seite-an-Seite mit anderen Versionen kann aufgrund von Konflikten in der Assembly über einen Gerätetreiber ausgeführt werden kann.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>Currently, <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> always returns <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine?displayProperty=nameWithType&gt;</ph>, and is not used by the loader.</source>
          <target state="translated">Derzeit <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> gibt immer <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine?displayProperty=nameWithType&gt;</ph>, und wird nicht vom Ladeprogramm verwendet.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>This property is reserved for a future feature.</source>
          <target state="translated">Diese Eigenschaft ist für eine zukünftiger Funktionen reserviert.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
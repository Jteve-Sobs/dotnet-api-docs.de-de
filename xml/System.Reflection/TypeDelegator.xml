<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeDelegator.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb72a4f7885feb36b422d1bc1a67c2ca21bdc27b7a81.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4f7885feb36b422d1bc1a67c2ca21bdc27b7a81</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeDelegator">
          <source>Wraps a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object and delegates methods to that <ph id="ph2">&lt;see langword="Type" /&gt;</ph>.</source>
          <target state="translated">Umschließt ein <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>-Objekt und delegiert alle Methoden an diesen <ph id="ph2">&lt;see langword="Type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>.</source>
          <target state="translated">Von diesem Typ abgeleitet werden, und überschreiben Sie nur für die Elemente müssen Sie Anpassungen im angeben, sowie die Member, die durch das Programm erforderlich sind und noch nicht implementiert <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source><ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> derives from <ph id="ph2">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> and implements most of the properties and methods of <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> leitet sich von <ph id="ph2">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> und implementiert die meisten Eigenschaften und Methoden der <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>For each member it implements, <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> automatically delegates to the corresponding member of an internal <ph id="ph2">&lt;xref:System.Type&gt;</ph> object, which is supplied as an argument to the constructor.</source>
          <target state="translated">Für jedes Element implementiert wird, <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> automatisch auf den entsprechenden Member eines internen delegiert <ph id="ph2">&lt;xref:System.Type&gt;</ph> -Objekt, das als Argument an den Konstruktor bereitgestellt wird.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>This internal <ph id="ph1">&lt;xref:System.Type&gt;</ph> object is exposed to deriving classes by the <ph id="ph2">`protected`</ph><ph id="ph3">&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;</ph> field.</source>
          <target state="translated">Diese interne <ph id="ph1">&lt;xref:System.Type&gt;</ph> Objekt verfügbar gemacht wird, um abgeleitete Klassen durch die <ph id="ph2">`protected`</ph> <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;</ph> Feld.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>Some members of <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> have implementations even though the members themselves are simply inherited from <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">Einige Mitglieder des <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> Implementierungen verfügen, obwohl die Elemente selbst einfach geerbt werden <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>In these cases, the implementation is provided by an overridden <ph id="ph1">`protected`</ph> method that has a name that ends in "Impl".</source>
          <target state="translated">In diesen Fällen die Implementierung erfolgt durch eine überschriebene <ph id="ph1">`protected`</ph> Methode, die einen Namen besitzt, die mit "Impl" endet.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>For example, the implementation for all overloads of the <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.GetMethods%2A&gt;</ph> method is supplied by the overridden <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.GetMethodImpl%2A&gt;</ph> method.</source>
          <target state="translated">Z. B. die Implementierung für alle Überladungen der der <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.GetMethods%2A&gt;</ph> Methode wird bereitgestellt von der überschriebenen <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.GetMethodImpl%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>The implementation for inherited properties such as <ph id="ph1">&lt;xref:System.Type.IsPublic%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Type.IsNestedAssembly%2A&gt;</ph> is provided by the overridden <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A&gt;</ph> method.</source>
          <target state="translated">Die Implementierung für geerbte Eigenschaften, z. B. <ph id="ph1">&lt;xref:System.Type.IsPublic%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Type.IsNestedAssembly%2A&gt;</ph> wird bereitgestellt von der überschriebenen <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>Deriving classes can provide a public constructor that takes a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object as its parameter and simply passes that object to the <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29&gt;</ph> constructor, or can set the internal <ph id="ph3">&lt;xref:System.Type&gt;</ph> object in some other way.</source>
          <target state="translated">Abgeleitete Klassen kann einen öffentlichen Konstruktor bereitstellen, die akzeptiert eine <ph id="ph1">&lt;xref:System.Type&gt;</ph> -Objekts entsprechend der zugehörigen Parameter und übergibt Sie einfach das Objekt, das <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29&gt;</ph> -Konstruktor dynamisch generiert oder die interne festgelegt <ph id="ph3">&lt;xref:System.Type&gt;</ph> Objekt auf andere Weise.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>If a deriving class uses a member that is not implemented by <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>, it must override that member and provide an implementation.</source>
          <target state="translated">Wenn eine ableitende Klasse einen Member verwendet, die nicht von implementiert ist <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>, müssen sie diesen Member überschreiben und eine Implementierung bereitstellen.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>The simplest implementation is to call the corresponding member on the internal <ph id="ph1">&lt;xref:System.Type&gt;</ph> object exposed by the <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;</ph> field, but you can provide any implementation your application requires.</source>
          <target state="translated">Die einfachste Implementierung wird das entsprechende Element in der internen Aufrufen <ph id="ph1">&lt;xref:System.Type&gt;</ph> Objekt verfügbar gemacht werden, indem die <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;</ph> Feld, aber Sie können keine Implementierung, die die Anwendung erfordert bereit.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=nameWithType&gt;</ph> constructor).</source>
          <target state="translated">Es ist nicht notwendig, diese Member zu überschreiben, wenn sie nicht von der Anwendung verwendet werden, oder von der Bibliothek Ihre Anwendung Aufrufe funktioniert (z. B. durch die <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=nameWithType&gt;</ph> Konstruktor).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>The following virtual methods (<ph id="ph1">`Overridable`</ph> methods in Visual Basic) of <ph id="ph2">&lt;xref:System.Type&gt;</ph> are not implemented by <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>: <ph id="ph4">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Type.GetGenericArguments%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Type.GetGenericParameterConstraints%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Type.MakeByRefType%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Type.MakePointerType%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Type.GetEnumNames%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Type.GetEnumValues%2A&gt;</ph>, <ph id="ph13">&lt;xref:System.Type.GetEnumUnderlyingType%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Type.GetTypeCodeImpl%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Type.IsEnumDefined%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Type.IsEquivalentTo%2A&gt;</ph>.</source>
          <target state="translated">Die folgenden virtuellen Methoden (<ph id="ph1">`Overridable`</ph> Methoden in Visual Basic) der <ph id="ph2">&lt;xref:System.Type&gt;</ph> werden nicht von implementiert <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>: <ph id="ph4">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Type.GetGenericArguments%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Type.GetGenericParameterConstraints%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Type.MakeByRefType%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Type.MakePointerType%2A&gt;</ph> , <ph id="ph11">&lt;xref:System.Type.GetEnumNames%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Type.GetEnumValues%2A&gt;</ph>, <ph id="ph13">&lt;xref:System.Type.GetEnumUnderlyingType%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Type.GetTypeCodeImpl%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Type.IsEnumDefined%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Type.IsEquivalentTo%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>The following virtual properties (<ph id="ph1">`Overridable`</ph> properties in Visual Basic) of <ph id="ph2">&lt;xref:System.Type&gt;</ph> are not implemented by <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>: <ph id="ph4">&lt;xref:System.Type.IsGenericType%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Type.IsGenericTypeDefinition%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Type.ContainsGenericParameters%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Type.DeclaringMethod%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Type.GenericParameterAttributes%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Type.GenericParameterPosition%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Type.IsSecurityCritical%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Type.IsSecuritySafeCritical%2A&gt;</ph>, <ph id="ph13">&lt;xref:System.Type.IsSecurityTransparent%2A&gt;</ph>.</source>
          <target state="translated">Die folgenden virtuellen Eigenschaften (<ph id="ph1">`Overridable`</ph> Eigenschaften in Visual Basic) der <ph id="ph2">&lt;xref:System.Type&gt;</ph> werden nicht von implementiert <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>: <ph id="ph4">&lt;xref:System.Type.IsGenericType%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Type.IsGenericTypeDefinition%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Type.ContainsGenericParameters%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Type.DeclaringMethod%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Type.GenericParameterAttributes%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Type.GenericParameterPosition%2A&gt;</ph> , <ph id="ph11">&lt;xref:System.Type.IsSecurityCritical%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Type.IsSecuritySafeCritical%2A&gt;</ph>, <ph id="ph13">&lt;xref:System.Type.IsSecurityTransparent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeDelegator">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> class with default properties.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>-Klasse mit Standardeigenschaften.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
          <source>The instance of the class <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that encapsulates the call to the method of an object.</source>
          <target state="translated">Die Instanz der <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>-Klasse, die den Aufruf der Methode eines Objekts kapselt.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> class specifying the encapsulating instance.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>-Klasse unter Angabe der kapselnden Instanz.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
          <source>This constructor is called from a class to generate a delegate based upon the <ph id="ph1">`Type`</ph> object for the class defining the method.</source>
          <target state="translated">Dieser Konstruktor wird aufgerufen, von einer Klasse zu generieren einen Delegaten, der auf Grundlage der <ph id="ph1">`Type`</ph> Objekt für die Klasse, die die Methode definieren.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
          <source><ph id="ph1">&lt;paramref name="delegatingType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delegatingType" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.Assembly">
          <source>Gets the assembly of the implemented type.</source>
          <target state="translated">Ruft die Assembly des implementierten Typs ab.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Assembly">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> object representing the assembly of the implemented type.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph>-Objekt, das die Assembly des implementierten Typs darstellt.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Assembly">
          <source>Assemblies are the deployment units in the common language runtime.</source>
          <target state="translated">Assemblys sind die Einheiten für die Bereitstellung in der common Language Runtime.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Assembly">
          <source>Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly.</source>
          <target state="translated">Assemblys, richten Sie den Namespace für das Auflösen von Anforderungen und bestimmen, welche Ressourcen extern zur Verfügung gestellt werden und die innerhalb der Assembly zugegriffen werden kann.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Assembly">
          <source>The common language runtime can determine and locate the assembly for any running object.</source>
          <target state="translated">Die common Language Runtime bestimmen und suchen Sie die Assembly für alle ausgeführten Objekts.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.AssemblyQualifiedName">
          <source>Gets the assembly's fully qualified name.</source>
          <target state="translated">Ruft den vollqualifizierten Namen der Assembly ab.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.AssemblyQualifiedName">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> containing the assembly's fully qualified name.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="String" /&gt;</ph>, der den vollqualifizierten Namen der Assembly enthält.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.BaseType">
          <source>Gets the base type for the current type.</source>
          <target state="translated">Ruft den Basistyp für den aktuellen Typ ab.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.BaseType">
          <source>The base type for a type.</source>
          <target state="translated">Der Basistyp für einen Typ.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.BaseType">
          <source>The base type is the type from which this type directly inherits.</source>
          <target state="translated">Der Basistyp ist der Typ, von dem dieser Typ direkt erbt.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.BaseType">
          <source>Since the <ph id="ph1">&lt;xref:System.Object&gt;</ph> class type is the ultimate base class of all the other types, it is the only type that does not have a base type.</source>
          <target state="translated">Da die <ph id="ph1">&lt;xref:System.Object&gt;</ph> Klassentyp ultimate Basisklasse aller anderen Typen ist, ist dies die einzige Art, die über keinen Basistyp.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.BaseType">
          <source>In this case, <ph id="ph1">`null`</ph> is returned as the base type of the <ph id="ph2">`Object`</ph> type.</source>
          <target state="translated">In diesem Fall <ph id="ph1">`null`</ph> wird zurückgegeben, als der Basistyp der <ph id="ph2">`Object`</ph> Typ.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.FullName">
          <source>Gets the fully qualified name of the implemented type.</source>
          <target state="translated">Ruft den vollqualifizierten Namen des implementierten Typs ab.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.FullName">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> containing the type's fully qualified name.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="String" /&gt;</ph>, der den vollqualifizierten Namen des Typs enthält.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.FullName">
          <source>A string containing the fully qualified name of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
          <target state="translated">Eine Zeichenfolge, enthält der vollqualifizierte Name des aktuellen <ph id="ph1">`TypeDelegator`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
          <source>Gets the attributes assigned to the <ph id="ph1">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Ruft die der <ph id="ph1">&lt;see langword="TypeDelegator" /&gt;</ph>-Klasse zugeordneten Attribute ab.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
          <source>A <ph id="ph1">&lt;see langword="TypeAttributes" /&gt;</ph> object representing the implementation attribute flags.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="TypeAttributes" /&gt;</ph>-Objekt, das die Attributflags der Implementierung darstellt.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
          <source>This method can be used to determine if the <ph id="ph1">`TypeDelegator`</ph> is abstract, public, and so on.</source>
          <target state="translated">Diese Methode kann verwendet werden, um festzustellen, ob die <ph id="ph1">`TypeDelegator`</ph> abstrakt, öffentliche und usw. ist.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">Ein Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>-Objekten über Reflektion ermöglicht.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Wenn der <bpt id="p1">&lt;c&gt;</bpt>Binder<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="null" /&gt;</ph> ist, wird der Standardbinder verwendet.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The calling conventions.</source>
          <target state="translated">Die Aufrufkonventionen.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of type <ph id="ph1">&lt;see langword="Type" /&gt;</ph> containing a list of the parameter number, order, and types.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="Type" /&gt;</ph>, das eine Liste mit Anzahl, Reihenfolge und Typen der Parameter enthält.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Types cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>; use an appropriate <ph id="ph2">&lt;see langword="GetMethod" /&gt;</ph> method or an empty array to search for a method without parameters.</source>
          <target state="translated">Typen können nicht <ph id="ph1">&lt;see langword="null" /&gt;</ph> sein. Verwenden Sie für die Suche nach einer Methode ohne Parameter eine geeignete <ph id="ph2">&lt;see langword="GetMethod" /&gt;</ph>-Methode oder ein leeres Array.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterModifier" /&gt;</ph> having the same length as the <bpt id="p1">&lt;c&gt;</bpt>types<ept id="p1">&lt;/c&gt;</ept> array, whose elements represent the attributes associated with the parameters of the method to get.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="ParameterModifier" /&gt;</ph> mit derselben Länge wie das <bpt id="p1">&lt;c&gt;</bpt>types<ept id="p1">&lt;/c&gt;</ept>-Array, dessen Elemente die Attribute darstellen, die den Parametern der abzurufenden Methode zugeordnet sind.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Gets the constructor that implemented the <ph id="ph1">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Ruft den Konstruktor ab, der die <ph id="ph1">&lt;see langword="TypeDelegator" /&gt;</ph>-Klasse implementiert.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A <ph id="ph1">&lt;see langword="ConstructorInfo" /&gt;</ph> object for the method that matches the specified criteria, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if a match cannot be found.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="ConstructorInfo" /&gt;</ph>-Objekt für die Methode, die mit den angegebenen Kriterien übereinstimmt, oder <ph id="ph2">&lt;see langword="null" /&gt;</ph>, wenn keine Übereinstimmung gefunden werden kann.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The <ph id="ph1">`callConvention`</ph> parameter indicates the calling convention for the entry point.</source>
          <target state="translated">Die <ph id="ph1">`callConvention`</ph> Parameter gibt die Aufrufkonvention für den Einstiegspunkt an.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>If no calling convention is specified, a default <ph id="ph1">&lt;xref:System.Reflection.CallingConventions&gt;</ph> value of <ph id="ph2">`Standard`</ph> is used.</source>
          <target state="translated">Wenn keine Aufrufkonvention angegeben wird, den Standardwert <ph id="ph1">&lt;xref:System.Reflection.CallingConventions&gt;</ph> Wert <ph id="ph2">`Standard`</ph> verwendet wird.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> objects representing constructors defined for the type wrapped by the current <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Gibt ein Array von <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph>-Objekten zurück, die Konstruktoren darstellen, die für den von der aktuellen <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>-Klasse umschlossenen Typ definiert sind.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>An array of type <ph id="ph1">&lt;see langword="ConstructorInfo" /&gt;</ph> containing the specified constructors defined for this class.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="ConstructorInfo" /&gt;</ph>, das die angegebenen Konstruktoren enthält, die für diese Klasse definiert sind.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>If no constructors are defined, an empty array is returned.</source>
          <target state="translated">Wenn keine Konstruktoren definiert sind, wird ein leeres Array zurückgegeben.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.</source>
          <target state="translated">Je nach Wert eines angegebenen Parameters werden ausschließlich öffentliche Konstruktoren oder sowohl öffentliche als auch nicht öffentliche Konstruktoren zurückgegeben.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>Class initializers are available only through <ph id="ph1">`GetMember`</ph>, <ph id="ph2">`GetMembers`</ph>, <ph id="ph3">`FindMembers`</ph>, and <ph id="ph4">`GetConstructors`</ph>.</source>
          <target state="translated">Klasseninitialisierer stehen nur über <ph id="ph1">`GetMember`</ph>, <ph id="ph2">`GetMembers`</ph>, <ph id="ph3">`FindMembers`</ph>, und <ph id="ph4">`GetConstructors`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeDelegator">
          <source>Returns all the custom attributes defined for this type.</source>
          <target state="translated">Gibt alle für diesen Typ definierten benutzerdefinierten Attribute zurück.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
          <target state="translated">Gibt an, ob bei der Suche nach den Attributen die Vererbungskette dieses Typs durchsucht werden soll.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
          <source>Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.</source>
          <target state="translated">Gibt alle für diesen Typ festgelegten benutzerdefinierten Attribute zurück und gibt an, ob die Vererbungskette des Typs durchsucht werden soll.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
          <source>An array of objects containing all the custom attributes defined for this type.</source>
          <target state="translated">Ein Array von Objekten mit allen für diesen Typ definierten benutzerdefinierten Attributen enthält.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of custom attributes identified by type.</source>
          <target state="translated">Ein Array benutzerdefinierter Attribute, die durch den Typ bezeichnet werden.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
          <target state="translated">Gibt an, ob bei der Suche nach den Attributen die Vererbungskette dieses Typs durchsucht werden soll.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns an array of custom attributes identified by type.</source>
          <target state="translated">Gibt ein Array benutzerdefinierter Attribute zurück, die durch den Typ bezeichnet sind.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of objects containing the custom attributes defined in this type that match the <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> parameter, specifying whether to search the type's inheritance chain, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no custom attributes are defined on this type.</source>
          <target state="translated">Ein Array von Objekten mit in diesem Typ definierten benutzerdefinierten Attributen, die mit dem <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph>-Parameter übereinstimmen und angeben, ob die Vererbungskette des Typs durchsucht werden soll. <ph id="ph2">&lt;see langword="null" /&gt;</ph>, wenn für diesen Typ keine benutzerdefinierten Attribute festgelegt sind.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetElementType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the object encompassed or referred to by the current array, pointer or ByRef.</source>
          <target state="translated">Gibt die <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>-Klasse des Objekts zurück, das das aktuelle Array, den Zeiger oder ByRef umfasst oder auf das verwiesen wird.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetElementType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the object encompassed or referred to by the current array, pointer or <ph id="ph2">&lt;see langword="ByRef" /&gt;</ph>, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the current <ph id="ph4">&lt;see cref="T:System.Type" /&gt;</ph> is not an array, a pointer or a <ph id="ph5">&lt;see langword="ByRef" /&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>-Klasse des Objekts, das das aktuelle Array, der Zeiger oder <ph id="ph2">&lt;see langword="ByRef" /&gt;</ph> umfasst oder auf das verwiesen wird, oder <ph id="ph3">&lt;see langword="null" /&gt;</ph>, wenn die aktuelle <ph id="ph4">&lt;see cref="T:System.Type" /&gt;</ph>-Klasse kein Array, kein Zeiger und kein <ph id="ph5">&lt;see langword="ByRef" /&gt;</ph> ist.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>The name of the event to get.</source>
          <target state="translated">Der Name des abzurufenden Ereignisses.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Returns the specified event.</source>
          <target state="translated">Gibt das angegebene Ereignis zurück.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> object representing the event declared or inherited by this type with the specified name.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>-Objekt, das das von diesem Typ mit dem angegebenen Namen deklarierte oder geerbte Ereignis darstellt.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>This method returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no such event is found.</source>
          <target state="translated">Diese Methode gibt <ph id="ph1">&lt;see langword="null" /&gt;</ph> zurück, wenn kein entsprechendes Ereignis gefunden wurde.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>If <ph id="ph1">`bindingAttr`</ph> is <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.<ph id="ph3">`IgnoreCase`</ph>, the case of the <ph id="ph4">`name`</ph> parameter is ignored.</source>
          <target state="translated">Wenn <ph id="ph1">`bindingAttr`</ph> ist <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.<ph id="ph3">`IgnoreCase`</ph>, wird die Groß-/Kleinschreibung, der die <ph id="ph4">`name`</ph> Parameter wird ignoriert.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="name" /&gt;</ph>-Parameter ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeDelegator">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing all the public events declared or inherited by the current <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Gibt ein Array von <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>-Objekten zurück, die sämtliche von der aktuellen <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>-Klasse deklarierten oder geerbten öffentlichen Ereignisse darstellen.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing all the public events declared or inherited by the current <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Gibt ein Array von <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>-Objekten zurück, die sämtliche von der aktuellen <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>-Klasse deklarierten oder geerbten öffentlichen Ereignisse darstellen.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents">
          <source>Returns an array of type <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> containing all the events declared or inherited by the current type.</source>
          <target state="translated">Gibt ein Array vom Typ <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> zurück, das sämtliche vom aktuellen Typ deklarierten oder geerbten Ereignisse enthält.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents">
          <source>If there are no events, an empty array is returned.</source>
          <target state="translated">Wenn keine Ereignisse vorhanden sind, wird ein leeres Array zurückgegeben.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
          <source>Returns the events specified in <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> that are declared or inherited by the current <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Gibt die in <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> angegebenen Ereignisse zurück, die von der aktuellen <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>-Klasse deklariert oder geerbt wurden.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
          <source>An array of type <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> containing the events specified in <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>, das die in <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph> angegebenen Ereignisse enthält.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
          <source>If there are no events, an empty array is returned.</source>
          <target state="translated">Wenn keine Ereignisse vorhanden sind, wird ein leeres Array zurückgegeben.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>The name of the field to find.</source>
          <target state="translated">Der Name des zu suchenden Felds.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object representing the field with the specified name.</source>
          <target state="translated">Gibt ein <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>-Objekt zurück, das das Feld mit dem angegebenen Namen darstellt.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>A <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> object representing the field declared or inherited by this <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph> with the specified name.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph>-Objekt, das das von diesem <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph> mit dem angegebenen Namen deklarierte oder geerbte Feld darstellt.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no such field is found.</source>
          <target state="translated">Gibt <ph id="ph1">&lt;see langword="null" /&gt;</ph> zurück, wenn kein entsprechendes Feld gefunden wurde.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Use a <ph id="ph1">`bindingAttr`</ph> of <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic to return all public and nonpublic fields.</source>
          <target state="translated">Verwenden einer <ph id="ph1">`bindingAttr`</ph> von <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>. NonPublic, um alle öffentlichen und nicht öffentlichen Felder zurück.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Use <ph id="ph1">`BindingFlags.IgnoreCase`</ph> to ignore the case of the fields, as the search is case-sensitive by default.</source>
          <target state="translated">Verwendung <ph id="ph1">`BindingFlags.IgnoreCase`</ph> , um die Groß-/Kleinschreibung der Felder zu ignorieren, die standardmäßig Groß-/Kleinschreibung wird bei der Suche.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="name" /&gt;</ph>-Parameter ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects representing the data fields defined for the type wrapped by the current <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Gibt ein Array von <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>-Objekten zurück, die die Datenfelder darstellen, die für den von der aktuellen <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>-Klasse umschlossenen Typ definiert sind.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>An array of type <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> containing the fields declared or inherited by the current <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph>, das die von der aktuellen <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>-Klasse deklarierten oder geerbten Felder enthält.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>An empty array is returned if there are no matched fields.</source>
          <target state="translated">Wenn keine übereinstimmenden Felder vorhanden sind, wird ein leeres Array zurückgegeben.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.GetFields%2A&gt;</ph> method does not return fields in a particular order, such as alphabetical or declaration order.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.GetFields%2A&gt;</ph> Methode gibt keinen zurück Felder in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>Your code must not depend on the order in which fields are returned, because that order can vary.</source>
          <target state="translated">Der Code muss nicht auf die Reihenfolge, in der Felder zurückgegeben werden, abhängen, da dieser Reihenfolge variieren kann.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>Use a <ph id="ph1">`bindingAttr`</ph> of <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic to return all public and nonpublic fields.</source>
          <target state="translated">Verwenden einer <ph id="ph1">`bindingAttr`</ph> von <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>. NonPublic, um alle öffentlichen und nicht öffentlichen Felder zurück.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
          <source>The fully qualified name of the interface implemented by the current class.</source>
          <target state="translated">Der vollqualifizierte Name der von der aktuellen Klasse implementierten Schnittstelle.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the case is to be ignored; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die Groß- und Kleinschreibung ignoriert werden soll, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
          <source>Returns the specified interface implemented by the type wrapped by the current <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Gibt die angegebene Schnittstelle zurück, die durch den von der aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>-Klasse umschlossenen Typ implementiert wurde.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="Type" /&gt;</ph>-Objekt, das die von der aktuellen Klasse direkt oder indirekt implementierte Schnittstelle mit dem vollqualifizierten Namen darstellt, der mit dem angegebenen Namen übereinstimmt.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
          <source>If no interface that matches name is found, null is returned.</source>
          <target state="translated">Wenn keine mit dem Namen übereinstimmende Schnittstelle gefunden wurde, wird NULL zurückgegeben.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="name" /&gt;</ph>-Parameter ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the interface to retrieve a mapping of.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> der Schnittstelle, deren Zuordnung abgerufen werden soll.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
          <source>Returns an interface mapping for the specified interface type.</source>
          <target state="translated">Gibt eine Schnittstellenzuordnung für den angegebenen Schnittstellentyp zurück.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.InterfaceMapping" /&gt;</ph> object representing the interface mapping for <ph id="ph2">&lt;paramref name="interfaceType" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Reflection.InterfaceMapping" /&gt;</ph>-Objekt, das die Schnittstellenzuordnung für den <ph id="ph2">&lt;paramref name="interfaceType" /&gt;</ph> darstellt.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
          <source>The interface map denotes how an interface is mapped into the actual methods on a class that implements that interface.</source>
          <target state="translated">Die schnittstellenzuordnung gibt an, wie eine Schnittstelle zu den tatsächlichen Methoden einer Klasse zugeordnet ist, die diese Schnittstelle implementiert.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterfaces">
          <source>Returns all the interfaces implemented on the current class and its base classes.</source>
          <target state="translated">Gibt alle für die aktuelle Klasse und ihre Basisklassen implementierten Schnittstellen zurück.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterfaces">
          <source>An array of type <ph id="ph1">&lt;see langword="Type" /&gt;</ph> containing all the interfaces implemented on the current class and its base classes.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="Type" /&gt;</ph>, das alle für die aktuelle Klasse und ihre Basisklassen implementierten Schnittstellen enthält.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterfaces">
          <source>If none are defined, an empty array is returned.</source>
          <target state="translated">Wenn keine definiert sind, wird ein leeres Array zurückgegeben.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The name of the member to get.</source>
          <target state="translated">Der Name des abzurufenden Members.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The type of members to get.</source>
          <target state="translated">Der Typ der abzurufenden Member.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <ph id="ph1">&lt;paramref name="name" /&gt;</ph>, <ph id="ph2">&lt;paramref name="type" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="bindingAttr" /&gt;</ph>.</source>
          <target state="translated">Gibt Member (Eigenschaften, Methoden, Konstruktoren, Felder, Ereignisse und geschachtelte Typen) zurück, die durch <ph id="ph1">&lt;paramref name="name" /&gt;</ph>, <ph id="ph2">&lt;paramref name="type" /&gt;</ph> und <ph id="ph3">&lt;paramref name="bindingAttr" /&gt;</ph> angegeben werden.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>An array of type <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> containing all the members of the current class and its base class meeting the specified criteria.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>, das alle Member der aktuellen Klasse und ihrer Basisklasse enthält, die den angegebenen Kriterien entsprechen.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>If <ph id="ph1">`bindingAttr`</ph> is <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic, all the members will be considered.</source>
          <target state="translated">Wenn <ph id="ph1">`bindingAttr`</ph> ist <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>. NonPublic, werden alle Elemente berücksichtigt.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>If there are no matches, an empty array is returned.</source>
          <target state="translated">Wenn keine Übereinstimmungen vorhanden sind, wird ein leeres Array zurückgegeben.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="name" /&gt;</ph>-Parameter ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
          <source>Returns members specified by <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph>.</source>
          <target state="translated">Gibt durch <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> angegebene Member zurück.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
          <source>An array of type <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> containing all the members of the current class and its base classes that meet the <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph> filter.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>, das alle den Kriterien des <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>-Filters entsprechenden Member der aktuellen Klasse und ihrer Basisklassen enthält.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
          <source>If <ph id="ph1">`bindingAttr`</ph> is <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic, all the members will be considered.</source>
          <target state="translated">Wenn <ph id="ph1">`bindingAttr`</ph> ist <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>. NonPublic, werden alle Elemente berücksichtigt.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
          <source>If there are no matches, an empty array is returned.</source>
          <target state="translated">Wenn keine Übereinstimmungen vorhanden sind, wird ein leeres Array zurückgegeben.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The method name.</source>
          <target state="translated">Der Methodenname.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">Ein Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>-Objekten über Reflektion ermöglicht.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Wenn der <bpt id="p1">&lt;c&gt;</bpt>Binder<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="null" /&gt;</ph> ist, wird der Standardbinder verwendet.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The calling conventions.</source>
          <target state="translated">Die Aufrufkonventionen.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of type <ph id="ph1">&lt;see langword="Type" /&gt;</ph> containing a list of the parameter number, order, and types.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="Type" /&gt;</ph>, das eine Liste mit Anzahl, Reihenfolge und Typen der Parameter enthält.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Types cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>; use an appropriate <ph id="ph2">&lt;see langword="GetMethod" /&gt;</ph> method or an empty array to search for a method without parameters.</source>
          <target state="translated">Typen können nicht <ph id="ph1">&lt;see langword="null" /&gt;</ph> sein. Verwenden Sie für die Suche nach einer Methode ohne Parameter eine geeignete <ph id="ph2">&lt;see langword="GetMethod" /&gt;</ph>-Methode oder ein leeres Array.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterModifier" /&gt;</ph> having the same length as the <bpt id="p1">&lt;c&gt;</bpt>types<ept id="p1">&lt;/c&gt;</ept> array, whose elements represent the attributes associated with the parameters of the method to get.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="ParameterModifier" /&gt;</ph> mit derselben Länge wie das <bpt id="p1">&lt;c&gt;</bpt>types<ept id="p1">&lt;/c&gt;</ept>-Array, dessen Elemente die Attribute darstellen, die den Parametern der abzurufenden Methode zugeordnet sind.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</source>
          <target state="translated">Sucht nach der angegebenen Methode, deren Parameter den angegebenen Argumenttypen und -modifizierern entsprechen, und verwendet dabei die angegebenen Bindungseinschränkungen und die angegebene Aufrufkonvention.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A <ph id="ph1">&lt;see langword="MethodInfoInfo" /&gt;</ph> object for the implementation method that matches the specified criteria, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if a match cannot be found.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="MethodInfoInfo" /&gt;</ph>-Objekt für die Implementierungsmethode, die mit den angegebenen Kriterien übereinstimmt, oder <ph id="ph2">&lt;see langword="null" /&gt;</ph>, wenn keine Übereinstimmung gefunden werden kann.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The <ph id="ph1">`callConvention`</ph> parameter indicates the calling convention for the entry point.</source>
          <target state="translated">Die <ph id="ph1">`callConvention`</ph> Parameter gibt die Aufrufkonvention für den Einstiegspunkt an.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>If no <ph id="ph1">&lt;xref:System.Reflection.CallingConventions&gt;</ph> is specified, a default <ph id="ph2">`CallingConventions`</ph> value of <ph id="ph3">`Standard`</ph> is used.</source>
          <target state="translated">Wenn kein <ph id="ph1">&lt;xref:System.Reflection.CallingConventions&gt;</ph> angegeben wird, den Standardwert <ph id="ph2">`CallingConventions`</ph> Wert <ph id="ph3">`Standard`</ph> verwendet wird.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects representing specified methods of the type wrapped by the current <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Gibt ein Array von <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>-Objekten zurück, die angegebene Methoden darstellen, die für den von der aktuellen <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>-Klasse umschlossenen Typ definiert sind.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
          <source>An array of <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> objects representing the methods defined on this <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Ein Array von <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph>-Objekten, die die für diese <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>-Klasse definierten Methoden darstellen.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>The nested type's name.</source>
          <target state="translated">Der Name des geschachtelten Typs.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Returns a nested type specified by <ph id="ph1">&lt;paramref name="name" /&gt;</ph> and in <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph> that are declared or inherited by the type represented by the current <ph id="ph3">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Gibt einen geschachtelten Typ zurück, der durch die <ph id="ph1">&lt;paramref name="name" /&gt;</ph>-Eigenschaft und in der <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>-Eigenschaft angegeben wird, die durch den von der aktuellen <ph id="ph3">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>-Klasse dargestellten Typ deklariert oder geerbt werden.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>A <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object representing the nested type.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="Type" /&gt;</ph>-Objekt, das den geschachtelten Typ darstellt.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="name" /&gt;</ph>-Parameter ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>Returns the nested types specified in <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> that are declared or inherited by the type wrapped by the current <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Gibt die in der <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph>-Eigenschaft angegebenen geschachtelten Typen zurück, die durch den von der aktuellen <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>-Klasse umschlossenen Typ deklariert oder geerbt werden.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>An array of type <ph id="ph1">&lt;see langword="Type" /&gt;</ph> containing the nested types.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="Type" /&gt;</ph>, das die geschachtelten Typen enthält.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects representing properties of the type wrapped by the current <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Gibt ein Array von <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>-Objekten zurück, die Eigenschaften darstellen, die für den von der aktuellen <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>-Klasse umschlossenen Typ definiert sind.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
          <source>An array of <ph id="ph1">&lt;see langword="PropertyInfo" /&gt;</ph> objects representing properties defined on this <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Ein Array von <ph id="ph1">&lt;see langword="PropertyInfo" /&gt;</ph>-Objekten, die für diese <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>-Klasse definierte Eigenschaften darstellen.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The property to get.</source>
          <target state="translated">Die abzurufende Eigenschaft.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Eine Bitmaske, die sich auf die Ausführung der Suche auswirkt.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">Der Wert ist eine Kombination von 0 (null) oder mehr Bitflags aus den <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects via reflection.</source>
          <target state="translated">Ein Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>-Objekten über Reflektion ermöglicht.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Wenn der <bpt id="p1">&lt;c&gt;</bpt>Binder<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="null" /&gt;</ph> ist, wird der Standardbinder verwendet.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>See <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</source>
          <target state="translated">Siehe <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The return type of the property.</source>
          <target state="translated">Der Rückgabetyp der Eigenschaft.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A list of parameter types.</source>
          <target state="translated">Eine Liste von Parametertypen.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The list represents the number, order, and types of the parameters.</source>
          <target state="translated">In der Liste werden Anzahl, Reihenfolge und Typen der Parameter dargestellt.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Types cannot be null; use an appropriate <ph id="ph1">&lt;see langword="GetMethod" /&gt;</ph> method or an empty array to search for a method without parameters.</source>
          <target state="translated">Typen können nicht NULL sein. Verwenden Sie für die Suche nach einer Methode ohne Parameter eine geeignete <ph id="ph1">&lt;see langword="GetMethod" /&gt;</ph>-Methode oder ein leeres Array.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.</source>
          <target state="translated">Ein Array derselben Länge wie Typen mit Elementen, die die Attribute darstellen, die den Parametern der abzurufenden Methode zugeordnet sind.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</source>
          <target state="translated">Sucht beim Überschreiben in einer abgeleiteten Klasse unter Verwendung der angegebenen Bindungseinschränkungen nach der angegebenen Eigenschaft, deren Parameter den angegebenen Argumenttypen und -modifizierern entsprechen.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> object for the property that matches the specified criteria, or null if a match cannot be found.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>-Objekt für die Eigenschaft, die mit den angegebenen Kriterien übereinstimmt, oder NULL, wenn keine Übereinstimmung gefunden werden kann.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.GUID">
          <source>Gets the GUID (globally unique identifier) of the implemented type.</source>
          <target state="translated">Ruft die GUID (Globally Unique Identifier) des implementierten Typs ab.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.GUID">
          <source>A GUID.</source>
          <target state="translated">Ein GUID.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.GUID">
          <source>The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface.</source>
          <target state="translated">Die GUID (globally unique Identifier) ist eine eindeutige Kennung der 128-Bit-Zeichenfolge, die zur Identifizierung einer Klasse oder eine Schnittstelle.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.GUID">
          <source>It is primarily useful for interoperability between the Microsoft .NET Framework and COM.</source>
          <target state="translated">Es eignet sich hauptsächlich für die Interoperabilität zwischen Microsoft .NET Framework und COM.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.HasElementTypeImpl">
          <source>Gets a value indicating whether the current <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> encompasses or refers to another type; that is, whether the current <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is an array, a pointer or a ByRef.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob der aktuelle <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>-Typ einen anderen Typ einschließt oder darauf verweist, d. h., ob der aktuelle <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>-Typ ein Array, Zeiger oder ByRef ist.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.HasElementTypeImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is an array, a pointer or a ByRef; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>-Typ ein Array, Zeiger oder ByRef ist, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The name of the member to invoke.</source>
          <target state="translated">Der Name des aufzurufenden Members.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This may be a constructor, method, property, or field.</source>
          <target state="translated">Dies kann ein Konstruktor, eine Methode, eine Eigenschaft oder ein Feld sein.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If an empty string ("") is passed, the default member is invoked.</source>
          <target state="translated">Wenn eine leere Zeichenfolge ("") übergeben wird, wird der Standardmember aufgerufen.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The invocation attribute.</source>
          <target state="translated">Das Attribut für den Aufruf.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This must be one of the following <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph4">&lt;see langword="Static" /&gt;</ph>, <ph id="ph5">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph7">&lt;see langword="GetProperty" /&gt;</ph>, or <ph id="ph8">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">Dabei muss es sich um eine der folgenden <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>-Enumerationen handeln: <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph4">&lt;see langword="Static" /&gt;</ph>, <ph id="ph5">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph7">&lt;see langword="GetProperty" /&gt;</ph> oder <ph id="ph8">&lt;see langword="SetProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A suitable invocation attribute must be specified.</source>
          <target state="translated">Es muss ein geeignetes Aufrufattribut angegeben werden.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If a static member is to be invoked, the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag must be set.</source>
          <target state="translated">Wenn ein statischer Member aufgerufen werden soll, muss das <ph id="ph1">&lt;see langword="Static" /&gt;</ph>-Flag festgelegt werden.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects via reflection.</source>
          <target state="translated">Ein Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>-Objekten über Reflektion ermöglicht.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Wenn der <bpt id="p1">&lt;c&gt;</bpt>Binder<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="null" /&gt;</ph> ist, wird der Standardbinder verwendet.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>See <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</source>
          <target state="translated">Siehe <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The object on which to invoke the specified member.</source>
          <target state="translated">Das Objekt, für das der angegebene Member aufgerufen werden soll.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An array of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph> that contains the number, order, and type of the parameters of the member to be invoked.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, das Anzahl, Reihenfolge und Typ der Parameter des aufzurufenden Members enthält.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> contains an uninitialized <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> ein nicht initialisiertes <ph id="ph1">&lt;see langword="Object" /&gt;</ph> enthält, wird dieses als leer behandelt und kann mit dem Standardbinder auf 0, 0.0 oder eine Zeichenfolge erweitert werden.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterModifer" /&gt;</ph> that is the same length as <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>, with elements that represent the attributes associated with the arguments of the member to be invoked.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="ParameterModifer" /&gt;</ph> mit derselben Länge wie <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> und mit Elementen, die die Attribute darstellen, die den Argumenten des aufzurufenden Members zugeordnet sind.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A parameter has attributes associated with it in the member's signature.</source>
          <target state="translated">Ein Parameter verfügt über Attribute, die ihm in der Signatur des Members zugeordnet sind.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>For ByRef, use <ph id="ph1">&lt;see langword="ParameterModifer.ByRef" /&gt;</ph>, and for none, use <ph id="ph2">&lt;see langword="ParameterModifer.None" /&gt;</ph>.</source>
          <target state="translated">Verwenden Sie für ByRef <ph id="ph1">&lt;see langword="ParameterModifer.ByRef" /&gt;</ph>, für keine Attribute verwenden Sie <ph id="ph2">&lt;see langword="ParameterModifer.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The default binder does exact matching on these.</source>
          <target state="translated">Der Standardbinder sucht für diese nach genauen Entsprechungen.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Attributes such as <ph id="ph1">&lt;see langword="In" /&gt;</ph> and <ph id="ph2">&lt;see langword="InOut" /&gt;</ph> are not used in binding, and can be viewed using <ph id="ph3">&lt;see langword="ParameterInfo" /&gt;</ph>.</source>
          <target state="translated">Attribute wie <ph id="ph1">&lt;see langword="In" /&gt;</ph> und <ph id="ph2">&lt;see langword="InOut" /&gt;</ph> werden bei der Bindung nicht verwendet und können mithilfe von <ph id="ph3">&lt;see langword="ParameterInfo" /&gt;</ph> angezeigt werden.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An instance of <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> used to govern the coercion of types.</source>
          <target state="translated">Eine Instanz von <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> für die Steuerung der Umwandlung von Typen.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This is necessary, for example, to convert a string that represents 1000 to a <ph id="ph1">&lt;see langword="Double" /&gt;</ph> value, since 1000 is represented differently by different cultures.</source>
          <target state="translated">Dies ist erforderlich, um z. B. eine Zeichenfolge, die die Zahl 1000 darstellt, in einen <ph id="ph1">&lt;see langword="Double" /&gt;</ph>-Wert zu konvertieren, da die Zahl 1000 in den verschiedenen Kulturen unterschiedlich dargestellt wird.)</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> for the current thread's <ph id="ph3">&lt;see langword="CultureInfo" /&gt;</ph> is used.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="null" /&gt;</ph> ist, wird die <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> für die <ph id="ph3">&lt;see langword="CultureInfo" /&gt;</ph> des aktuellen Threads verwendet.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An array of type <ph id="ph1">&lt;see langword="String" /&gt;</ph> containing parameter names that match up, starting at element zero, with the <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> array.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see langword="String" /&gt;</ph> mit Parameternamen, die ab dem Element 0 mit dem <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>-Array übereinstimmen.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>There must be no holes in the array.</source>
          <target state="translated">Das Array darf keine Lücken aufweisen.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source><ph id="ph1">&lt;see langword="Length" /&gt;</ph> is greater than <bpt id="p1">&lt;c&gt;</bpt>namedParameters<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Length" /&gt;</ph> größer ist als <bpt id="p1">&lt;c&gt;</bpt>namedParameters<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source><ph id="ph1">&lt;see langword="Length" /&gt;</ph>, the remaining parameters are filled in order.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Length" /&gt;</ph>, die verbleibenden Parameter werden der Reihenfolge nach aufgefüllt.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Invokes the specified member.</source>
          <target state="translated">Ruft den angegebenen Member auf.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</source>
          <target state="translated">Die Methode, die aufgerufen werden soll, muss zugänglich sein und mit der angegebenen Argumentliste unter den Einschränkungen des angegebenen Binders und der Aufrufattribute die spezifischste Übereinstimmung bereitstellen.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> representing the return value of the invoked member.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, das den Rückgabewert des aufgerufenen Members darstellt.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A method will be invoked if both the following conditions are true:</source>
          <target state="translated">Eine Methode wird aufgerufen, wenn die beiden folgenden Bedingungen erfüllt sind:</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The number of parameters in the method declaration equals the number of arguments in the specified argument list (unless default arguments are defined on the member).</source>
          <target state="translated">Die Anzahl von Parametern in der Deklaration der Methode entspricht der Anzahl von Argumenten in der angegebenen Argumentliste, (es sei denn, die Standardargumente für das Element definiert sind).</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The type of each arguments can be converted by the binder to the type of the parameter.</source>
          <target state="translated">Der Typ jedes Arguments kann vom Binder in den Typ des Parameters konvertiert werden.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The binder will find all the matching methods.</source>
          <target state="translated">Der Binder findet alle übereinstimmenden Methoden.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>These methods are found based upon the type of binding requested (<ph id="ph1">`BindingFlags.MethodInvoke`</ph>, <ph id="ph2">`BindingFlags.GetProperties`</ph>, and so on).</source>
          <target state="translated">Diese Methoden werden basierend auf den Typ der Bindung, die angeforderte gefunden (<ph id="ph1">`BindingFlags.MethodInvoke`</ph>, <ph id="ph2">`BindingFlags.GetProperties`</ph>usw.).</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</source>
          <target state="translated">Der Satz von Methoden wird durch den Namen, Anzahl von Argumenten und einen Satz von Suchabfragen in der Binder definierten gefiltert.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>After the method is selected, it will be invoked.</source>
          <target state="translated">Wenn die Methode ausgewählt wurde, wird sie aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Accessibility is checked at that point.</source>
          <target state="translated">Eingabehilfen ist an diesem Punkt aktiviert.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</source>
          <target state="translated">Die Suche kann gesteuert werden durchsucht, welchen Satz von Methoden basierend auf der Eingabehilfen-Attribut, das der Methode zugeordnet.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType&gt;</ph> method is responsible for selecting the method to be invoked.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType&gt;</ph> Methode ist verantwortlich für die Auswahl der Methode, die aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The default binder selects the most specific match.</source>
          <target state="translated">Der Standardbinder wählt die spezifischste Übereinstimmung.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">Zugriffseinschränkungen für vollständig vertrauenswürdige Code ignoriert.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.</source>
          <target state="translated">D. h. private Konstruktoren, Methoden, Felder und Eigenschaften zugegriffen werden können, und Sie aufgerufen wird, mithilfe von Reflektion im Code vollständig vertrauenswürdig ist.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Currently, <ph id="ph1">`InvokeMember`</ph> performs the Microsoft .NET Framework reflection semantics for every type of object.</source>
          <target state="translated">Derzeit <ph id="ph1">`InvokeMember`</ph> führt die Reflektion-Semantik von Microsoft .NET Framework für jeden Typ des Objekts.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If the member specified by name is an array and the <ph id="ph1">`BindingFlags.GetField`</ph> flag is set on <ph id="ph2">`invokeAttr`</ph>, the <ph id="ph3">`args`</ph> array specifies the elements whose values are to be returned.</source>
          <target state="translated">Wenn das namentlich angegebene Element ein Array ist und die <ph id="ph1">`BindingFlags.GetField`</ph> Flag wird festgelegt, auf <ph id="ph2">`invokeAttr`</ph>, die <ph id="ph3">`args`</ph> Array gibt an, die Elemente, deren Werte zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>For example, the following call through <ph id="ph1">`Type`</ph> object <ph id="ph2">`t`</ph> returns the value of the first element of the string array MyArray, which is a member of the calling object:</source>
          <target state="translated">Beispielsweise der folgende Aufruf über <ph id="ph1">`Type`</ph> Objekt <ph id="ph2">`t`</ph> gibt den Wert des ersten Elements des Zeichenfolgenarrays MyArray, das Mitglied des aufrufenden Objekts ist:</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>You can use <ph id="ph1">`InvokeMember`</ph> to set one or more elements of a member array.</source>
          <target state="translated">Sie können <ph id="ph1">`InvokeMember`</ph> auf einem oder mehreren Elementen eines Memberarrays festgelegt.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>All elements are set to the same value.</source>
          <target state="translated">Alle Elemente werden auf den gleichen Wert festgelegt.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The <ph id="ph1">`args`</ph> array must be formatted as follows:</source>
          <target state="translated">Die <ph id="ph1">`args`</ph> -Array muss wie folgt formatiert:</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>For example, to set the first member of MyArray from the previous example, the syntax is as follows:</source>
          <target state="translated">Beispielsweise ist zum Festlegen des ersten Elements der MyArray aus dem vorherigen Beispiel die Syntax folgendermaßen:</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsArrayImpl">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> is an array.</source>
          <target state="translated">Gibt einen Wert zurück, der angibt, ob <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> ein Array ist.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsArrayImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is an array; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> ein Array ist, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>The type to check.</source>
          <target state="translated">Der zu überprüfende Typ.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>Returns a value that indicates whether the specified type can be assigned to this type.</source>
          <target state="translated">Gibt einen Wert zurück, der angibt, ob der angegebene Typ dem Typ zugewiesen werden kann.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified type can be assigned to this type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der angegebene Typ diesem Typ zugeordnet werden kann; andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsByRefImpl">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> is passed by reference.</source>
          <target state="translated">Gibt einen Wert zurück, der angibt, ob der <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> als Verweis übergeben wird.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsByRefImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is passed by reference; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> als Verweis übergeben wird, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsCOMObjectImpl">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> is a COM object.</source>
          <target state="translated">Gibt einen Wert zurück, der angibt, ob das <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> ein COM-Objekt ist.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsCOMObjectImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is a COM object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> ein COM-Objekt ist, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.IsConstructedGenericType">
          <source>Gets a value that indicates whether this object represents a constructed generic type.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob dieses Objekt einen konstruierten generischen Typ darstellt.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.IsConstructedGenericType">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a constructed generic type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn dieses Objekt einen konstruierten generischen Typ darstellt, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
          <target state="translated">Gibt an, ob bei der Suche nach den Attributen die Vererbungskette dieses Typs durchsucht werden soll.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
          <source>An array of custom attributes identified by type.</source>
          <target state="translated">Ein Array benutzerdefinierter Attribute, die durch den Typ bezeichnet werden.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
          <source>Indicates whether a custom attribute identified by <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is defined.</source>
          <target state="translated">Gibt an, ob ein durch <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> bezeichnetes benutzerdefiniertes Attribut definiert ist.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a custom attribute identified by <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> is defined; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn ein von <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> bezeichnetes benutzerdefiniertes Attribut definiert ist, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
          <source>The custom attribute type cannot be loaded.</source>
          <target state="translated">Der benutzerdefinierte Attributtyp kann nicht geladen werden.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsPointerImpl">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> is a pointer.</source>
          <target state="translated">Gibt einen Wert zurück, der angibt, ob das <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> ein Zeiger ist.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsPointerImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is a pointer; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> ein Zeiger ist, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsPrimitiveImpl">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> is one of the primitive types.</source>
          <target state="translated">Gibt einen Wert zurück, der angibt, ob <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> zu den primitiven Typen gehört.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsPrimitiveImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is one of the primitive types; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> zu den primitiven Typen gehört, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsValueTypeImpl">
          <source>Returns a value that indicates whether the type is a value type; that is, not a class or an interface.</source>
          <target state="translated">Gibt einen Wert zurück, der angibt, ob der Typ ein Werttyp, d. h. weder eine Klasse noch eine Schnittstelle ist.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsValueTypeImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is a value type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Typ ein Werttyp ist, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.MetadataToken">
          <source>Gets a value that identifies this entity in metadata.</source>
          <target state="translated">Ruft einen Wert ab, der diese Entität in Metadaten identifiziert.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.MetadataToken">
          <source>A value which, in combination with the module, uniquely identifies this entity in metadata.</source>
          <target state="translated">Ein Wert, der diese Entität in Verbindung mit dem Modul in Metadaten eindeutig identifiziert.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.MetadataToken">
          <source>The tokens obtained using this property can be passed to the unmanaged reflection API.</source>
          <target state="translated">Das Token mit dieser Eigenschaft können, die nicht verwaltete Reflektions-API übergeben werden.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.MetadataToken">
          <source>For more information, see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>nicht verwalteten Reflektions-API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.Module">
          <source>Gets the module that contains the implemented type.</source>
          <target state="translated">Ruft das Modul ab, das den implementierten Typ enthält.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Module">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> object representing the module of the implemented type.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph>-Objekt, das das Modul des implementierten Typs darstellt.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Module">
          <source>A module is a loadable unit that can contain type declarations and implementations.</source>
          <target state="translated">Ein Modul ist eine ladbaren Einheit, die Deklarationen von Typen und Implementierungen enthalten kann.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Module">
          <source>Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.</source>
          <target state="translated">Module enthalten genügend Informationen zum Aktivieren der common Language Runtime alle Implementierungsbits zu suchen, wenn das Modul geladen wird.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.Name">
          <source>Gets the name of the implemented type, with the path removed.</source>
          <target state="translated">Ruft den Namen des implementierten Typs ohne den Pfad ab.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Name">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> containing the type's non-qualified name.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="String" /&gt;</ph>, der den nicht gekennzeichneten Namen des Typs enthält.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Name">
          <source>A string containing the name of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
          <target state="translated">Eine Zeichenfolge, die den Namen der aktuellen <ph id="ph1">`TypeDelegator`</ph>-Klasse enthält.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Name">
          <source>Only the simple name, not the fully qualified name, is returned.</source>
          <target state="translated">Nur der einfache Name nicht den vollqualifizierten Namen wird zurückgegeben.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Name">
          <source>To get the name and the path, use <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.FullName%2A&gt;</ph>.</source>
          <target state="translated">Verwenden Sie zum Abrufen der Name und Pfad <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.FullName%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.Namespace">
          <source>Gets the namespace of the implemented type.</source>
          <target state="translated">Ruft den Namespace des implementierten Typs ab.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Namespace">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> containing the type's namespace.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="String" /&gt;</ph>, der den Namespace des Typs enthält.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Namespace">
          <source>This property gets a string containing the namespace of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
          <target state="translated">Diese Eigenschaft ruft eine Zeichenfolge mit dem Namespace des aktuellen <ph id="ph1">`TypeDelegator`</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Namespace">
          <source>For example, if the <ph id="ph1">`TypeDelegator`</ph> is <ph id="ph2">&lt;xref:System.Reflection.TypeFilter&gt;</ph>, the returned namespace is <ph id="ph3">&lt;xref:System.Reflection&gt;</ph>.</source>
          <target state="translated">Beispielsweise, wenn die <ph id="ph1">`TypeDelegator`</ph> ist <ph id="ph2">&lt;xref:System.Reflection.TypeFilter&gt;</ph>, ist der zurückgegebene Namespace <ph id="ph3">&lt;xref:System.Reflection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.TypeHandle">
          <source>Gets a handle to the internal metadata representation of an implemented type.</source>
          <target state="translated">Ruft ein Handle für die interne Metadatendarstellung eines implementierten Typs ab.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.TypeHandle">
          <source>A <ph id="ph1">&lt;see langword="RuntimeTypeHandle" /&gt;</ph> object.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="RuntimeTypeHandle" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.TypeHandle">
          <source>A type handle is a unique integer value associated with each type.</source>
          <target state="translated">Ein Typhandle ist eine eindeutige ganze Zahl-Wert, der jeden Typ zugeordnet.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.TypeHandle">
          <source>The handle is unique during the runtime.</source>
          <target state="translated">Das Handle ist während der Laufzeit eindeutig.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="F:System.Reflection.TypeDelegator.typeImpl">
          <source>A value indicating type information.</source>
          <target state="translated">Ein Wert, der Typinformationen angibt.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.UnderlyingSystemType">
          <source>Gets the underlying <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the implemented type.</source>
          <target state="translated">Ruft die zugrunde liegende <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>-Klasse ab, die den implementierten Typ darstellt.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.UnderlyingSystemType">
          <source>The underlying type.</source>
          <target state="translated">Der zugrunde liegende Typ.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
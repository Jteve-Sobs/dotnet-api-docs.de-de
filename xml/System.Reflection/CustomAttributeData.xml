<Type Name="CustomAttributeData" FullName="System.Reflection.CustomAttributeData">
  <TypeSignature Language="C#" Value="public class CustomAttributeData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CustomAttributeData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.CustomAttributeData" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomAttributeData" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomAttributeData" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b81ba-101">Ermöglicht Zugriff auf benutzerdefinierte Attributdaten für Assemblys, Module, Typen, Member und Parameter, die in den Reflection-Only-Kontext geladen werden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-101">Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b81ba-102">Code, der in den ReflectionOnly Kontext überprüft wird kann nicht ausgeführt werden, daher es nicht immer möglich ist, benutzerdefinierte Attribute zu untersuchen, durch das Erstellen von Instanzen von sie und anschließend untersucht werden, deren Eigenschaften und Methoden wie <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>, <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType>usw. .</span><span class="sxs-lookup"><span data-stu-id="b81ba-102">Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>, <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType>, and so on.</span></span> <span data-ttu-id="b81ba-103">Wenn der Code für den Attributtyp selbst in den reflektionsbezogenen Kontext geladen wird, kann sie nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-103">If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.</span></span>  
  
 <span data-ttu-id="b81ba-104">Die <xref:System.Reflection.CustomAttributeData> Klasse kann benutzerdefinierte Attribute in den ReflectionOnly Kontext durch Bereitstellen eine Abstraktion für Attribute.</span><span class="sxs-lookup"><span data-stu-id="b81ba-104">The <xref:System.Reflection.CustomAttributeData> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes.</span></span> <span data-ttu-id="b81ba-105">Die Member dieser Klasse können werden verwendet, um den Positionsargumenten abzurufen und benannte Argumente des Attributs.</span><span class="sxs-lookup"><span data-stu-id="b81ba-105">The members of this class can be used to obtain the positional arguments and named arguments of the attribute.</span></span> <span data-ttu-id="b81ba-106">Verwenden Sie die <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> eine Liste der abzurufenden Eigenschaft <xref:System.Reflection.CustomAttributeTypedArgument> Datenstrukturen, die die positionelle Argumente darstellen, und verwenden Sie die <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> eine Liste der abzurufenden Eigenschaft <xref:System.Reflection.CustomAttributeNamedArgument> Strukturen, die die benannte Argumente darstellen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-106">Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeTypedArgument> structures that represent the positional arguments, and use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeNamedArgument> structures that represent the named arguments.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b81ba-107">Die <xref:System.Reflection.CustomAttributeNamedArgument> Struktur enthält nur Informationen über die Eigenschaft des Attributs abgerufen, und legen Sie den Argumentwert.</span><span class="sxs-lookup"><span data-stu-id="b81ba-107">The <xref:System.Reflection.CustomAttributeNamedArgument> structure only provides information about the attribute property used to get and set the argument value.</span></span> <span data-ttu-id="b81ba-108">Verwenden Sie zum Abrufen von dem Typ und Wert des Arguments der <xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=nameWithType> -Eigenschaft zum Abrufen einer <xref:System.Reflection.CustomAttributeTypedArgument> Struktur.</span><span class="sxs-lookup"><span data-stu-id="b81ba-108">To obtain the type and value of the argument, use the <xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=nameWithType> property to obtain a <xref:System.Reflection.CustomAttributeTypedArgument> structure.</span></span>  
  
 <span data-ttu-id="b81ba-109">Wenn Ihnen eine <xref:System.Reflection.CustomAttributeTypedArgument> Struktur für ein Argument, ob benannten oder positionellen, verwenden die <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=nameWithType> Eigenschaft beim Abrufen des Typs und der <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType> Eigenschaft, um den Wert abzurufen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-109">When you have a <xref:System.Reflection.CustomAttributeTypedArgument> structure for an argument, whether named or positional, use the <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=nameWithType> property to get the type and the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType> property to get the value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b81ba-110">Für ein Arrayargument das <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType> Eigenschaft gibt eine generische <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> von <xref:System.Reflection.CustomAttributeTypedArgument> Objekte.</span><span class="sxs-lookup"><span data-stu-id="b81ba-110">For an array argument, the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType> property returns a generic <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Reflection.CustomAttributeTypedArgument> objects.</span></span> <span data-ttu-id="b81ba-111">Jede <xref:System.Reflection.CustomAttributeTypedArgument> Objekt in der Auflistung darstellt, das entsprechende Element des Arrays.</span><span class="sxs-lookup"><span data-stu-id="b81ba-111">Each <xref:System.Reflection.CustomAttributeTypedArgument> object in the collection represents the corresponding element of the array.</span></span>  
  
 <span data-ttu-id="b81ba-112"><xref:System.Reflection.CustomAttributeData> kann in den Ausführungskontext auch wie in den ReflectionOnly Kontext verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-112"><xref:System.Reflection.CustomAttributeData> can be used in the execution context as well as in the reflection-only context.</span></span> <span data-ttu-id="b81ba-113">Sie möchten z. B. vermeiden Sie das Laden der Assembly, die den Code für ein benutzerdefiniertes Attribut enthält.</span><span class="sxs-lookup"><span data-stu-id="b81ba-113">For example, you might want to avoid loading the assembly that contains the code for a custom attribute.</span></span> <span data-ttu-id="b81ba-114">Mithilfe der <xref:System.Reflection.CustomAttributeData> Klasse unterscheidet sich von der Verwendung von Methoden wie <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="b81ba-114">Using the <xref:System.Reflection.CustomAttributeData> class is different from using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>:</span></span>  
  
-   <span data-ttu-id="b81ba-115">Die Eigenschaften und Methoden des <xref:System.Reflection.CustomAttributeData> Geben Sie nur für die Attributinstanz nicht die Semantik des Konstruktors mit den Werten, die angegeben wurden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-115">The properties and methods of <xref:System.Reflection.CustomAttributeData> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor.</span></span> <span data-ttu-id="b81ba-116">Beispielsweise kann ein Zeichenfolgenargument eines Attributs intern in eine andere Darstellung konvertiert und in eine kanonische Form zurückgegeben werden; oder eine Eigenschaft möglicherweise Nebeneffekte, wenn die tatsächliche Attributcode ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="b81ba-116">For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.</span></span>  
  
-   <span data-ttu-id="b81ba-117">Die Eigenschaften und Methoden des <xref:System.Reflection.CustomAttributeData> , können Sie die benutzerdefinierten Attribute aus Basisklassen geerbt abzurufen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-117">The properties and methods of <xref:System.Reflection.CustomAttributeData> do not allow you to retrieve the custom attributes inherited from base classes.</span></span>  
  
 <span data-ttu-id="b81ba-118">Zum Erstellen von Instanzen der <xref:System.Reflection.CustomAttributeData> Klasse, verwenden Sie die `static` (`Shared` in Visual Basic) <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> Factorymethoden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-118">To create instances of the <xref:System.Reflection.CustomAttributeData> class, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> factory methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b81ba-119">Im folgende Beispiel wird ein benutzerdefiniertes Attribut mit vier Konstruktoren und vier Eigenschaften definiert.</span><span class="sxs-lookup"><span data-stu-id="b81ba-119">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="b81ba-120">Zwei Eigenschaften sind schreibgeschützt und einrichten, indem Sie die Positionsparameter der Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="b81ba-120">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="b81ba-121">Die anderen beiden Eigenschaften weisen Lese-/Schreibzugriff und kann nur mithilfe von Set heißen Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-121">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="b81ba-122">Eine mit Feldern fester Breite-Eigenschaft ist ein Array von Zeichenfolgen, und eine benannte Eigenschaft ist ein Array von Ganzzahlen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-122">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="b81ba-123">Das Attribut wird auf die Assembly angewendet sowie auf einen in der Assembly deklarierten Typ, eine Methode dieses Typs und einen Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="b81ba-123">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="b81ba-124">In diesen Fällen werden verschiedene Konstruktoren verwendet.</span><span class="sxs-lookup"><span data-stu-id="b81ba-124">Different constructors are used for these cases.</span></span> <span data-ttu-id="b81ba-125">Bei der Ausführung wird die Assembly selbst in den ReflectionOnly Kontext geladen, und zeigt Informationen zu den benutzerdefinierten Attributen, die angewendet wurden, und für den Typ und die darin enthaltenen Elemente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-125">When executed, the assembly loads itself into the reflection-only context and displays information about the custom attributes that were applied to it and to the type and members it contains.</span></span>  
  
 <span data-ttu-id="b81ba-126">Das Attribut, das auf den Typ angewendet wird veranschaulicht, Arrayeigenschaften mit Feldern fester Breite und benannte Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-126">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
    <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CustomAttributeData ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CustomAttributeData();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b81ba-127">Initialisiert eine neue Instanz der <see cref="T:System.Reflection.CustomAttributeData" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="b81ba-127">Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeData" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b81ba-128">Dieser Konstruktor wird von abgeleiteten Klassen aufgerufen, während der Erstellung der <xref:System.Reflection.CustomAttributeData> Objekte.</span><span class="sxs-lookup"><span data-stu-id="b81ba-128">This constructor is invoked by derived classes during the construction of <xref:System.Reflection.CustomAttributeData> objects.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="b81ba-129">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</span><span class="sxs-lookup"><span data-stu-id="b81ba-129">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="b81ba-130">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-130">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AttributeType">
      <MemberSignature Language="C#" Value="public Type AttributeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AttributeType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.CustomAttributeData.AttributeType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AttributeType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ AttributeType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b81ba-131">Ruft den Attributtyp ab.</span><span class="sxs-lookup"><span data-stu-id="b81ba-131">Gets the type of the attribute.</span></span></summary>
        <value><span data-ttu-id="b81ba-132">Der Typ des Attributs.</span><span class="sxs-lookup"><span data-stu-id="b81ba-132">The type of the attribute.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Constructor">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.ConstructorInfo Constructor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo Constructor" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.CustomAttributeData.Constructor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Constructor As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ConstructorInfo ^ Constructor { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b81ba-133">Ruft ein <see cref="T:System.Reflection.ConstructorInfo" />-Objekt ab, das den Konstruktor darstellt, der das benutzerdefinierte Attribut initialisiert hätte.</span><span class="sxs-lookup"><span data-stu-id="b81ba-133">Gets a <see cref="T:System.Reflection.ConstructorInfo" /> object that represents the constructor that would have initialized the custom attribute.</span></span></summary>
        <value><span data-ttu-id="b81ba-134">Ein Objekt, das den Konstruktor darstellt, der das benutzerdefinierte Attribut initialisiert hätte, das von der aktuellen Instanz der <see cref="T:System.Reflection.CustomAttributeData" />-Klasse dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="b81ba-134">An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <see cref="T:System.Reflection.CustomAttributeData" /> class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b81ba-135">Wenn ein Attribut mehrere Konstruktoren verfügt, gibt diese Eigenschaft nur bestimmten Konstruktor, der die vom aktuellen Attributinstanz initialisiert hätte <xref:System.Reflection.CustomAttributeData> Objekt.</span><span class="sxs-lookup"><span data-stu-id="b81ba-135">If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <xref:System.Reflection.CustomAttributeData> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b81ba-136">Im folgende Beispiel wird ein benutzerdefiniertes Attribut mit vier Konstruktoren und vier Eigenschaften definiert.</span><span class="sxs-lookup"><span data-stu-id="b81ba-136">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="b81ba-137">Zwei Eigenschaften sind schreibgeschützt und einrichten, indem Sie die Positionsparameter der Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="b81ba-137">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="b81ba-138">Die anderen beiden Eigenschaften weisen Lese-/Schreibzugriff und kann nur mithilfe von Set heißen Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-138">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="b81ba-139">Eine mit Feldern fester Breite-Eigenschaft ist ein Array von Zeichenfolgen, und eine benannte Eigenschaft ist ein Array von Ganzzahlen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-139">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="b81ba-140">Das Attribut wird auf die Assembly angewendet sowie auf einen in der Assembly deklarierten Typ, eine Methode dieses Typs und einen Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="b81ba-140">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="b81ba-141">In diesen Fällen werden verschiedene Konstruktoren verwendet.</span><span class="sxs-lookup"><span data-stu-id="b81ba-141">Different constructors are used for these cases.</span></span> <span data-ttu-id="b81ba-142">Bei der Ausführung wird die Assembly selbst in den ReflectionOnly Kontext geladen, und zeigt die benutzerdefinierten Attribute an.</span><span class="sxs-lookup"><span data-stu-id="b81ba-142">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="b81ba-143">Das Attribut, das auf den Typ angewendet wird veranschaulicht, Arrayeigenschaften mit Feldern fester Breite und benannte Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-143">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="b81ba-144">Die <xref:System.Reflection.CustomAttributeData.Constructor%2A> Eigenschaft wird verwendet, der `ShowAttributeData` Methode, die benutzerdefinierte Attributdaten anzeigt.</span><span class="sxs-lookup"><span data-stu-id="b81ba-144">The <xref:System.Reflection.CustomAttributeData.Constructor%2A> property is used in the `ShowAttributeData` method that displays custom attribute data.</span></span> <span data-ttu-id="b81ba-145">In diesem Codebeispiel wird die <xref:System.Reflection.ConstructorInfo> zurückgegeben, die von dieser Eigenschaft wird verwendet, um eine Textzeichenfolge angezeigt, die veranschaulichen, dass die Eigenschaft den Konstruktor zurück, die das Attribut zu initialisieren, würde den Konstruktor beschreibt.</span><span class="sxs-lookup"><span data-stu-id="b81ba-145">In this code example, the <xref:System.Reflection.ConstructorInfo> returned by this property is used to display a text string that describes the constructor, demonstrating that the property returns the constructor that would initialize the attribute.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="ConstructorArguments">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeTypedArgument&gt; ConstructorArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype System.Reflection.CustomAttributeTypedArgument&gt; ConstructorArguments" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.CustomAttributeData.ConstructorArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ConstructorArguments As IList(Of CustomAttributeTypedArgument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeTypedArgument&gt; ^ ConstructorArguments { System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeTypedArgument&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeTypedArgument&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b81ba-146">Ruft die Liste positioneller Argumente ab, die für die durch das <see cref="T:System.Reflection.CustomAttributeData" />-Objekt dargestellte Attributinstanz angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-146">Gets the list of positional arguments specified for the attribute instance represented by the <see cref="T:System.Reflection.CustomAttributeData" /> object.</span></span></summary>
        <value><span data-ttu-id="b81ba-147">Eine Sammlung von Strukturen, die die für die benutzerdefinierte Attributinstanz angegebenen Positionsargumente darstellen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-147">A collection of structures that represent the positional arguments specified for the custom attribute instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b81ba-148">Diese Methode ruft die positionellen Argumenten, die für die Instanz des benutzerdefinierten Attributs angegeben wurden, ohne dass das benutzerdefinierte Attributcode ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="b81ba-148">This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code.</span></span> <span data-ttu-id="b81ba-149">Folglich können sie in den ReflectionOnly Kontext verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-149">Thus, it can be used in the reflection-only context.</span></span>  
  
 <span data-ttu-id="b81ba-150">Verwenden der <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> Methode zum Abrufen der benannte Argumente, die für die Attributinstanz angegeben.</span><span class="sxs-lookup"><span data-stu-id="b81ba-150">Use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> method to get the named arguments specified for the attribute instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b81ba-151">Im folgende Beispiel wird ein benutzerdefiniertes Attribut mit vier Konstruktoren und vier Eigenschaften definiert.</span><span class="sxs-lookup"><span data-stu-id="b81ba-151">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="b81ba-152">Zwei Eigenschaften sind schreibgeschützt und einrichten, indem Sie die Positionsparameter der Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="b81ba-152">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="b81ba-153">Die anderen beiden Eigenschaften weisen Lese-/Schreibzugriff und kann nur mithilfe von Set heißen Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-153">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="b81ba-154">Eine mit Feldern fester Breite-Eigenschaft ist ein Array von Zeichenfolgen, und eine benannte Eigenschaft ist ein Array von Ganzzahlen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-154">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="b81ba-155">Das Attribut wird auf die Assembly angewendet sowie auf einen in der Assembly deklarierten Typ, eine Methode dieses Typs und einen Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="b81ba-155">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="b81ba-156">In diesen Fällen werden verschiedene Konstruktoren verwendet.</span><span class="sxs-lookup"><span data-stu-id="b81ba-156">Different constructors are used for these cases.</span></span> <span data-ttu-id="b81ba-157">Bei der Ausführung wird die Assembly selbst in den ReflectionOnly Kontext geladen, und zeigt die benutzerdefinierten Attribute an.</span><span class="sxs-lookup"><span data-stu-id="b81ba-157">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="b81ba-158">Das Attribut, das auf den Typ angewendet wird veranschaulicht, Arrayeigenschaften mit Feldern fester Breite und benannte Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-158">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="b81ba-159">Die <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> Eigenschaft wird verwendet, der `ShowAttributeData` Methode, die benutzerdefinierte Attributdaten anzeigt.</span><span class="sxs-lookup"><span data-stu-id="b81ba-159">The <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> property is used in the `ShowAttributeData` method that displays custom attribute data.</span></span> <span data-ttu-id="b81ba-160">In diesem Codebeispiel wird diese Eigenschaft verwendet, zum Anzeigen der Liste der Argumente des Konstruktors, der das Attribut initialisiert übergeben.</span><span class="sxs-lookup"><span data-stu-id="b81ba-160">In this code example, this property is used to display the list of arguments passed to the constructor that initialized the attribute.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.CustomAttributeData.NamedArguments" />
        <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="b81ba-161">Ein Objekt, das mit dieser Instanz verglichen werden soll, oder <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b81ba-161">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b81ba-162">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</span><span class="sxs-lookup"><span data-stu-id="b81ba-162">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="b81ba-163"><see langword="true" />, wenn <paramref name="obj" /> der aktuellen Instanz entspricht, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b81ba-163"><see langword="true" /> if <paramref name="obj" /> is equal to the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b81ba-164">Gibt eine Liste von <see cref="T:System.Reflection.CustomAttributeData" />-Objekten zurück, die Daten über die für das Ziel übernommenen Attribute darstellen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-164">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.Assembly target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributes(class System.Reflection.Assembly target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomAttributes (target As Assembly) As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributes(System::Reflection::Assembly ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="b81ba-165">Die Assembly, deren benutzerdefinierte Attributdaten abgerufen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-165">The assembly whose custom attribute data is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="b81ba-166">Gibt eine Liste von <see cref="T:System.Reflection.CustomAttributeData" />-Objekten zurück, die Daten zu den Attributen darstellen, die auf die Zielassembly angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-166">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target assembly.</span></span></summary>
        <returns><span data-ttu-id="b81ba-167">Eine Liste von Objekten, die Daten zu den Attributen darstellen, die auf die Zielassembly angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-167">A list of objects that represent data about the attributes that have been applied to the target assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b81ba-168">Diese Methode bietet eine Alternative zum die <xref:System.Reflection.Assembly.GetCustomAttributes%2A> Methode, die immer in den ReflectionOnly Kontext verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="b81ba-168">This method provides an alternative to the <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method that can always be used in the Reflection-only context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b81ba-169">Im folgende Beispiel wird ein benutzerdefiniertes Attribut mit vier Konstruktoren und vier Eigenschaften definiert.</span><span class="sxs-lookup"><span data-stu-id="b81ba-169">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="b81ba-170">Zwei Eigenschaften sind schreibgeschützt und einrichten, indem Sie die Positionsparameter der Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="b81ba-170">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="b81ba-171">Die anderen beiden Eigenschaften weisen Lese-/Schreibzugriff und kann nur mithilfe von Set heißen Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-171">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="b81ba-172">Eine mit Feldern fester Breite-Eigenschaft ist ein Array von Zeichenfolgen, und eine benannte Eigenschaft ist ein Array von Ganzzahlen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-172">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="b81ba-173">Das Attribut wird auf die Assembly angewendet sowie auf einen in der Assembly deklarierten Typ, eine Methode dieses Typs und einen Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="b81ba-173">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="b81ba-174">In diesen Fällen werden verschiedene Konstruktoren verwendet.</span><span class="sxs-lookup"><span data-stu-id="b81ba-174">Different constructors are used for these cases.</span></span> <span data-ttu-id="b81ba-175">Bei der Ausführung wird die Assembly selbst in den ReflectionOnly Kontext geladen, und zeigt die benutzerdefinierten Attribute an.</span><span class="sxs-lookup"><span data-stu-id="b81ba-175">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="b81ba-176">Das Attribut, das auf den Typ angewendet wird veranschaulicht, Arrayeigenschaften mit Feldern fester Breite und benannte Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-176">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="b81ba-177">Die <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> -Methode verwendet wird, `Main()` zum Abrufen der benutzerdefinierten Attribute, die auf die Assembly angewendet.</span><span class="sxs-lookup"><span data-stu-id="b81ba-177">The <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> method is used in `Main()` to get the custom attributes applied to the assembly.</span></span> <span data-ttu-id="b81ba-178">Der Rückgabewert der Methode übergeben wird, um die `ShowAttributeData` Methode.</span><span class="sxs-lookup"><span data-stu-id="b81ba-178">The return value of the method is passed to the `ShowAttributeData` method.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b81ba-179"><paramref name="target" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b81ba-179"><paramref name="target" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.MemberInfo target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributes(class System.Reflection.MemberInfo target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomAttributes (target As MemberInfo) As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributes(System::Reflection::MemberInfo ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="b81ba-180">Der Member, dessen Attributdaten abgerufen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-180">The member whose attribute data is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="b81ba-181">Gibt eine Liste von <see cref="T:System.Reflection.CustomAttributeData" />-Objekten zurück, die Daten zu den Attributen darstellen, die auf den Zielmember angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-181">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</span></span></summary>
        <returns><span data-ttu-id="b81ba-182">Eine Liste von Objekten, die Daten zu den Attributen darstellen, die auf den Zielmember angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-182">A list of objects that represent data about the attributes that have been applied to the target member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b81ba-183">Überladung dieser Methode benutzerdefinierte Attributdaten für Typen, geschachtelte Typen und Typmember, abgerufen, da die <xref:System.Type> -Klasse und die Klassen in der <xref:System.Reflection> Namespace, die Typmember darstellen, alle abgeleitet <xref:System.Reflection.MemberInfo>.</span><span class="sxs-lookup"><span data-stu-id="b81ba-183">This method overload gets custom attribute data for types, nested types, and type members, because the <xref:System.Type> class and the classes in the <xref:System.Reflection> namespace that represent type members all derive from <xref:System.Reflection.MemberInfo>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b81ba-184">Im folgende Beispiel wird ein benutzerdefiniertes Attribut mit vier Konstruktoren und vier Eigenschaften definiert.</span><span class="sxs-lookup"><span data-stu-id="b81ba-184">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="b81ba-185">Zwei Eigenschaften sind schreibgeschützt und einrichten, indem Sie die Positionsparameter der Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="b81ba-185">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="b81ba-186">Die anderen beiden Eigenschaften weisen Lese-/Schreibzugriff und kann nur mithilfe von Set heißen Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-186">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="b81ba-187">Eine mit Feldern fester Breite-Eigenschaft ist ein Array von Zeichenfolgen, und eine benannte Eigenschaft ist ein Array von Ganzzahlen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-187">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="b81ba-188">Das Attribut wird auf die Assembly angewendet sowie auf einen in der Assembly deklarierten Typ, eine Methode dieses Typs und einen Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="b81ba-188">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="b81ba-189">In diesen Fällen werden verschiedene Konstruktoren verwendet.</span><span class="sxs-lookup"><span data-stu-id="b81ba-189">Different constructors are used for these cases.</span></span> <span data-ttu-id="b81ba-190">Bei der Ausführung wird die Assembly selbst in den ReflectionOnly Kontext geladen, und zeigt die benutzerdefinierten Attribute an.</span><span class="sxs-lookup"><span data-stu-id="b81ba-190">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="b81ba-191">Das Attribut, das auf den Typ angewendet wird veranschaulicht, Arrayeigenschaften mit Feldern fester Breite und benannte Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-191">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="b81ba-192">Die <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> -Methode verwendet wird, `Main()` zum Abrufen der benutzerdefinierten Attribute, die auf einen Typ und eine Testmethode angewendet wurden (<xref:System.Type> leitet sich von <xref:System.Reflection.MemberInfo>).</span><span class="sxs-lookup"><span data-stu-id="b81ba-192">The <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> method is used in `Main()` to get the custom attributes that were applied to a type and to a test method (<xref:System.Type> derives from <xref:System.Reflection.MemberInfo>).</span></span> <span data-ttu-id="b81ba-193">Der Rückgabewert der <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> übergeben wird, um die `ShowAttributeData` Methode.</span><span class="sxs-lookup"><span data-stu-id="b81ba-193">The return value of <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> is passed to the `ShowAttributeData` method.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b81ba-194"><paramref name="target" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b81ba-194"><paramref name="target" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.Module target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributes(class System.Reflection.Module target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomAttributes (target As Module) As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributes(System::Reflection::Module ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="b81ba-195">Das Modul, dessen benutzerdefinierte Attributdaten abgerufen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-195">The module whose custom attribute data is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="b81ba-196">Gibt eine Liste von <see cref="T:System.Reflection.CustomAttributeData" />-Objekten zurück, die Daten zu den Attributen darstellen, die auf das Zielmodul angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-196">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target module.</span></span></summary>
        <returns><span data-ttu-id="b81ba-197">Eine Liste von Objekten, die Daten zu den Attributen darstellen, die auf das Zielmodul angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-197">A list of objects that represent data about the attributes that have been applied to the target module.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b81ba-198"><paramref name="target" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b81ba-198"><paramref name="target" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.ParameterInfo target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributes(class System.Reflection.ParameterInfo target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomAttributes (target As ParameterInfo) As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributes(System::Reflection::ParameterInfo ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Reflection.ParameterInfo" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="b81ba-199">Der Parameter, dessen Attributdaten abgerufen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-199">The parameter whose attribute data is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="b81ba-200">Gibt eine Liste von <see cref="T:System.Reflection.CustomAttributeData" />-Objekten zurück, die Daten zu den Attributen darstellen, die auf den Zielparameter angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-200">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target parameter.</span></span></summary>
        <returns><span data-ttu-id="b81ba-201">Eine Liste von Objekten, die Daten zu den Attributen darstellen, die auf den Zielparameter angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-201">A list of objects that represent data about the attributes that have been applied to the target parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b81ba-202">Diese Methode bietet eine Alternative zum die <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A> Methode, die immer in den ReflectionOnly Kontext verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="b81ba-202">This method provides an alternative to the <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A> method that can always be used in the Reflection-only context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b81ba-203">Im folgende Beispiel wird ein benutzerdefiniertes Attribut mit vier Konstruktoren und vier Eigenschaften definiert.</span><span class="sxs-lookup"><span data-stu-id="b81ba-203">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="b81ba-204">Zwei Eigenschaften sind schreibgeschützt und einrichten, indem Sie die Positionsparameter der Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="b81ba-204">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="b81ba-205">Die anderen beiden Eigenschaften weisen Lese-/Schreibzugriff und kann nur mithilfe von Set heißen Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-205">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="b81ba-206">Eine mit Feldern fester Breite-Eigenschaft ist ein Array von Zeichenfolgen, und eine benannte Eigenschaft ist ein Array von Ganzzahlen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-206">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="b81ba-207">Das Attribut wird auf die Assembly angewendet sowie auf einen in der Assembly deklarierten Typ, eine Methode dieses Typs und einen Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="b81ba-207">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="b81ba-208">In diesen Fällen werden verschiedene Konstruktoren verwendet.</span><span class="sxs-lookup"><span data-stu-id="b81ba-208">Different constructors are used for these cases.</span></span> <span data-ttu-id="b81ba-209">Bei der Ausführung wird die Assembly selbst in den ReflectionOnly Kontext geladen, und zeigt die benutzerdefinierten Attribute an.</span><span class="sxs-lookup"><span data-stu-id="b81ba-209">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="b81ba-210">Das Attribut, das auf den Typ angewendet wird veranschaulicht, Arrayeigenschaften mit Feldern fester Breite und benannte Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-210">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="b81ba-211">Die <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> -Methode verwendet wird, `Main()` auf einen Parameter einer Testmethode angewendeten benutzerdefinierten Attribute abgerufen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-211">The <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> method is used in `Main()` to retrieve the custom attributes applied to a parameter of a test method.</span></span> <span data-ttu-id="b81ba-212">Der Rückgabewert der <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> übergeben wird, um die `ShowAttributeData` Methode.</span><span class="sxs-lookup"><span data-stu-id="b81ba-212">The return value of <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> is passed to the `ShowAttributeData` method.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b81ba-213"><paramref name="target" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b81ba-213"><paramref name="target" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b81ba-214">Fungiert als Hashfunktion für einen besonderen Typ.</span><span class="sxs-lookup"><span data-stu-id="b81ba-214">Serves as a hash function for a particular type.</span></span></summary>
        <returns><span data-ttu-id="b81ba-215">Ein Hashcode für die aktuelle <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="b81ba-215">A hash code for the current <see cref="T:System.Object" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="NamedArguments">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeNamedArgument&gt; NamedArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype System.Reflection.CustomAttributeNamedArgument&gt; NamedArguments" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.CustomAttributeData.NamedArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NamedArguments As IList(Of CustomAttributeNamedArgument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeNamedArgument&gt; ^ NamedArguments { System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeNamedArgument&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeNamedArgument&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b81ba-216">Ruft die Liste benannter Argumente ab, die für die durch das <see cref="T:System.Reflection.CustomAttributeData" />-Objekt dargestellte Attributinstanz angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-216">Gets the list of named arguments specified for the attribute instance represented by the <see cref="T:System.Reflection.CustomAttributeData" /> object.</span></span></summary>
        <value><span data-ttu-id="b81ba-217">Eine Sammlung von Strukturen, die die für die benutzerdefinierte Attributinstanz angegebenen benannten Argumente darstellen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-217">A collection of structures that represent the named arguments specified for the custom attribute instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b81ba-218">Diese Methode ruft die benannten Argumenten, die für die Instanz des benutzerdefinierten Attributs angegeben wurden, ohne dass das benutzerdefinierte Attributcode ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="b81ba-218">This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code.</span></span> <span data-ttu-id="b81ba-219">Folglich können sie in den ReflectionOnly Kontext verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-219">Thus, it can be used in the Reflection-only context.</span></span>  
  
 <span data-ttu-id="b81ba-220">Die Liste, die zurückgegeben wird enthält nur die benannten Argumenten, die für die Attributinstanz angegeben wurden.</span><span class="sxs-lookup"><span data-stu-id="b81ba-220">The list that is returned contains only the named arguments that were specified for the attribute instance.</span></span>  
  
 <span data-ttu-id="b81ba-221">Verwenden der <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> Methode zum Abrufen der positionellen Arguments, die angegeben wurden, für die Attributinstanz.</span><span class="sxs-lookup"><span data-stu-id="b81ba-221">Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> method to get the positional arguments that were specified for the attribute instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b81ba-222">Im folgende Beispiel wird ein benutzerdefiniertes Attribut mit vier Konstruktoren und vier Eigenschaften definiert.</span><span class="sxs-lookup"><span data-stu-id="b81ba-222">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="b81ba-223">Zwei Eigenschaften sind schreibgeschützt und einrichten, indem Sie die Positionsparameter der Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="b81ba-223">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="b81ba-224">Die anderen beiden Eigenschaften weisen Lese-/Schreibzugriff und kann nur mithilfe von Set heißen Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-224">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="b81ba-225">Eine mit Feldern fester Breite-Eigenschaft ist ein Array von Zeichenfolgen, und eine benannte Eigenschaft ist ein Array von Ganzzahlen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-225">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="b81ba-226">Das Attribut wird auf die Assembly angewendet sowie auf einen in der Assembly deklarierten Typ, eine Methode dieses Typs und einen Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="b81ba-226">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="b81ba-227">In diesen Fällen werden verschiedene Konstruktoren verwendet.</span><span class="sxs-lookup"><span data-stu-id="b81ba-227">Different constructors are used for these cases.</span></span> <span data-ttu-id="b81ba-228">Bei der Ausführung wird die Assembly selbst in den ReflectionOnly Kontext geladen, und zeigt die benutzerdefinierten Attribute an.</span><span class="sxs-lookup"><span data-stu-id="b81ba-228">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="b81ba-229">Das Attribut, das auf den Typ angewendet wird veranschaulicht, Arrayeigenschaften mit Feldern fester Breite und benannte Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-229">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="b81ba-230">Die <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> Eigenschaft wird verwendet, der `ShowAttributeData` Methode, die benutzerdefinierte Attributdaten anzeigt.</span><span class="sxs-lookup"><span data-stu-id="b81ba-230">The <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> property is used in the `ShowAttributeData` method that displays custom attribute data.</span></span> <span data-ttu-id="b81ba-231">In diesem Codebeispiel wird diese Eigenschaft verwendet, um die Liste von benannten Argumenten, die für das Attribut angegebenen anzuzeigen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-231">In this code example, this property is used to display the list of named arguments specified for the attribute.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.CustomAttributeData.ConstructorArguments" />
        <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b81ba-232">Gibt eine Zeichenfolgendarstellung des benutzerdefinierten Attributs zurück.</span><span class="sxs-lookup"><span data-stu-id="b81ba-232">Returns a string representation of the custom attribute.</span></span></summary>
        <returns><span data-ttu-id="b81ba-233">Ein Zeichenfolgenwert, der das benutzerdefinierte Attribut darstellt.</span><span class="sxs-lookup"><span data-stu-id="b81ba-233">A string value that represents the custom attribute.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b81ba-234">Der Zeichenfolgenwert enthält, der Typ des Attributs, das Attributparameter und benannte Parameter.</span><span class="sxs-lookup"><span data-stu-id="b81ba-234">The string value includes the attribute type, the attribute parameters, and the named parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b81ba-235">Im folgende Beispiel wird ein benutzerdefiniertes Attribut mit vier Konstruktoren und vier Eigenschaften definiert.</span><span class="sxs-lookup"><span data-stu-id="b81ba-235">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="b81ba-236">Zwei Eigenschaften sind schreibgeschützt und einrichten, indem Sie die Positionsparameter der Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="b81ba-236">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="b81ba-237">Die anderen beiden Eigenschaften weisen Lese-/Schreibzugriff und kann nur mithilfe von Set heißen Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-237">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="b81ba-238">Eine mit Feldern fester Breite-Eigenschaft ist ein Array von Zeichenfolgen, und eine benannte Eigenschaft ist ein Array von Ganzzahlen.</span><span class="sxs-lookup"><span data-stu-id="b81ba-238">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="b81ba-239">Das Attribut wird auf die Assembly angewendet sowie auf einen in der Assembly deklarierten Typ, eine Methode dieses Typs und einen Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="b81ba-239">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="b81ba-240">In diesen Fällen werden verschiedene Konstruktoren verwendet.</span><span class="sxs-lookup"><span data-stu-id="b81ba-240">Different constructors are used for these cases.</span></span> <span data-ttu-id="b81ba-241">Bei der Ausführung wird die Assembly selbst in den ReflectionOnly Kontext geladen, und zeigt die benutzerdefinierten Attribute an.</span><span class="sxs-lookup"><span data-stu-id="b81ba-241">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="b81ba-242">Das Attribut, das auf den Typ angewendet wird veranschaulicht, Arrayeigenschaften mit Feldern fester Breite und benannte Argumente.</span><span class="sxs-lookup"><span data-stu-id="b81ba-242">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="b81ba-243">In diesem Beispiel wird die <xref:System.Reflection.CustomAttributeData.ToString%2A> Methode wird verwendet, der `ShowAttributeData` Methode, um das Attribut zu identifizieren, deren Daten angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="b81ba-243">In this example, the <xref:System.Reflection.CustomAttributeData.ToString%2A> method is used in the `ShowAttributeData` method, to identify the attribute whose data is being displayed.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
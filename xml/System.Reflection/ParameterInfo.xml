<Type Name="ParameterInfo" FullName="System.Reflection.ParameterInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="86ca3b754399c792282cbf762bf32b6bca401225" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480614" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParameterInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._ParameterInfo, System.Runtime.Serialization.IObjectReference" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit ParameterInfo extends System.Object implements class System.Reflection.ICustomAttributeProvider, class System.Runtime.InteropServices._ParameterInfo, class System.Runtime.Serialization.IObjectReference" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.ParameterInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class ParameterInfo&#xA;Implements _ParameterInfo, ICustomAttributeProvider, IObjectReference" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParameterInfo : System::Reflection::ICustomAttributeProvider, System::Runtime::InteropServices::_ParameterInfo, System::Runtime::Serialization::IObjectReference" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.ICustomAttributeProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._ParameterInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IObjectReference</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._ParameterInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="66f57-101">Ermittelt die Attribute eines Parameters und ermöglicht den Zugriff auf die Metadaten des Parameters.</span>
      <span class="sxs-lookup">
        <span data-stu-id="66f57-101">Discovers the attributes of a parameter and provides access to parameter metadata.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-102">Verwenden Sie eine Instanz des `ParameterInfo` zum Abrufen von Informationen zu den Parameterdatentyp default-Wert, und so weiter.</span><span class="sxs-lookup"><span data-stu-id="66f57-102">Use an instance of `ParameterInfo` to obtain information about the parameter's data type, default value, and so on.</span></span>  
  
 <span data-ttu-id="66f57-103"><xref:System.Reflection.MethodBase.GetParameters%2A> Gibt ein Array von `ParameterInfo` Objekte, die die Parameter einer Methode, in der Reihenfolge darstellt.</span><span class="sxs-lookup"><span data-stu-id="66f57-103"><xref:System.Reflection.MethodBase.GetParameters%2A> returns an array of `ParameterInfo` objects representing the parameters of a method, in order.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66f57-104">Dieses Beispiel zeigt, wie mit verschiedenen Reflektionsklassen verwendet die in einer Assembly enthaltene Metadaten analysieren.</span><span class="sxs-lookup"><span data-stu-id="66f57-104">This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</span></span>  
  
 [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]
 [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]
 [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="66f57-105">Dieser Typ ist threadsicher.</span>
      <span class="sxs-lookup">
        <span data-stu-id="66f57-105">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ParameterInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ParameterInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="66f57-106">Initialisiert eine neue Instanz der <see langword="ParameterInfo" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-106">Initializes a new instance of the <see langword="ParameterInfo" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.ParameterAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.ParameterAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Attributes As ParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterAttributes Attributes { System::Reflection::ParameterAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-107">Ruft die Attribute für diesen Parameter ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-107">Gets the attributes for this parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-108">Ein <see langword="ParameterAttributes" />-Objekt, das die Attribute für diesen Parameter darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-108">A <see langword="ParameterAttributes" /> object representing the attributes for this parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-109">Diese Methode verwendet die <xref:System.Reflection.ParameterInfo.AttrsImpl> Methode.</span><span class="sxs-lookup"><span data-stu-id="66f57-109">This method utilizes the <xref:System.Reflection.ParameterInfo.AttrsImpl> method.</span></span>  
  
 <span data-ttu-id="66f57-110">Zum Abrufen der <xref:System.Reflection.ParameterInfo> array zunächst die Methode oder der Konstruktor, und rufen Sie anschließend <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-110">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66f57-111">Das folgende Beispiel definiert eine Methode mit drei Parametern.</span><span class="sxs-lookup"><span data-stu-id="66f57-111">The following example defines a method with three parameters.</span></span> <span data-ttu-id="66f57-112">Er verwendet die <xref:System.Reflection.ParameterInfo.Attributes%2A> Eigenschaft, um die Attribute des zweiten Parameters abzurufen und in der Konsole angezeigt werden können.</span><span class="sxs-lookup"><span data-stu-id="66f57-112">It uses the <xref:System.Reflection.ParameterInfo.Attributes%2A> property to get the attributes of the second parameter and display them at the console.</span></span>  
  
 [!code-cpp[ParameterInfo_Attributes1#1](~/samples/snippets/cpp/VS_Snippets_CLR/ParameterInfo_Attributes1/CPP/parameterinfo_attributes1.cpp#1)]
 [!code-csharp[ParameterInfo_Attributes1#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_Attributes1/CS/parameterinfo_attributes1.cs#1)]
 [!code-vb[ParameterInfo_Attributes1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParameterInfo_Attributes1/VB/parameterinfo_attributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ParameterAttributes" />
      </Docs>
    </Member>
    <Member MemberName="AttrsImpl">
      <MemberSignature Language="C#" Value="protected System.Reflection.ParameterAttributes AttrsImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype System.Reflection.ParameterAttributes AttrsImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ParameterInfo.AttrsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected AttrsImpl As ParameterAttributes " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Reflection::ParameterAttributes AttrsImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-113">Die Attribute des Parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-113">The attributes of the parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-114">Dieses Feld ist nur für Benutzer, die von Klassen ableiten vorgesehen `ParameterInfo`.</span><span class="sxs-lookup"><span data-stu-id="66f57-114">This field is intended only for users who are deriving classes from `ParameterInfo`.</span></span>  
  
 <span data-ttu-id="66f57-115">Der Zugriff auf die Parameterattribute erfolgt über <xref:System.Reflection.ParameterInfo.Attributes%2A>.</span><span class="sxs-lookup"><span data-stu-id="66f57-115">Typical access to parameter attributes is through <xref:System.Reflection.ParameterInfo.Attributes%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassImpl">
      <MemberSignature Language="C#" Value="protected Type ClassImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Type ClassImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ParameterInfo.ClassImpl" />
      <MemberSignature Language="VB.NET" Value="Protected ClassImpl As Type " />
      <MemberSignature Language="C++ CLI" Value="protected: Type ^ ClassImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-116">Der <see langword="Type" /> des Parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-116">The <see langword="Type" /> of the parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-117">Dieses Feld ist nur für Benutzer, die von Klassen ableiten vorgesehen `ParameterInfo`.</span><span class="sxs-lookup"><span data-stu-id="66f57-117">This field is intended only for users who are deriving classes from `ParameterInfo`.</span></span>  
  
 <span data-ttu-id="66f57-118">Der Zugriff auf Parametertypen erfolgt über <xref:System.Reflection.ParameterInfo.ParameterType%2A>.</span><span class="sxs-lookup"><span data-stu-id="66f57-118">Typical access to parameter types is through <xref:System.Reflection.ParameterInfo.ParameterType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt; CustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.CustomAttributeData&gt; CustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.CustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ CustomAttributes { System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-119">Ruft eine Sammlung ab, die die benutzerdefinierten Attribute dieses Parameters enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-119">Gets a collection that contains this parameter's custom attributes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-120">Eine Sammlung, die die benutzerdefinierten Attribute dieses Parameters enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-120">A collection that contains this parameter's custom attributes.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public virtual object DefaultValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ DefaultValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-121">Ruft einen Wert ab, der den Standardwert angibt, wenn der Parameter über einen Standardwert verfügt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-121">Gets a value indicating the default value if the parameter has a default value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-122">Der Standardwert des Parameters oder <see cref="F:System.DBNull.Value" />, wenn der Parameter keinen Standardwert hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-122">The default value of the parameter, or <see cref="F:System.DBNull.Value" /> if the parameter has no default value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-123">Diese Eigenschaft wird nur im Ausführungskontext verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="66f57-123">This property is used only in the execution context.</span></span> <span data-ttu-id="66f57-124">Verwenden Sie in den ReflectionOnly Kontext, der <xref:System.Reflection.ParameterInfo.RawDefaultValue%2A> Eigenschaft stattdessen.</span><span class="sxs-lookup"><span data-stu-id="66f57-124">In the reflection-only context, use the <xref:System.Reflection.ParameterInfo.RawDefaultValue%2A> property instead.</span></span>  
  
 <span data-ttu-id="66f57-125">Der Standardwert wird verwendet, wenn Sie ein tatsächlichen Wert im Aufruf Methode nicht angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="66f57-125">The default value is used when an actual value is not specified in the method call.</span></span> <span data-ttu-id="66f57-126">Ein Parameter kann einen Standardwert, der aufweisen `null`.</span><span class="sxs-lookup"><span data-stu-id="66f57-126">A parameter can have a default value that is `null`.</span></span> <span data-ttu-id="66f57-127">Dies unterscheidet sich von der Fall, in dem ein Standardwert nicht definiert ist.</span><span class="sxs-lookup"><span data-stu-id="66f57-127">This is distinct from the case where a default value is not defined.</span></span>  
  
 <span data-ttu-id="66f57-128">Diese Methode verwendet die <xref:System.Reflection.ParameterInfo.DefaultValueImpl> Methode.</span><span class="sxs-lookup"><span data-stu-id="66f57-128">This method utilizes the <xref:System.Reflection.ParameterInfo.DefaultValueImpl> method.</span></span>  
  
 <span data-ttu-id="66f57-129">Zum Abrufen der <xref:System.Reflection.ParameterInfo> array zunächst die Methode oder der Konstruktor, und rufen Sie anschließend <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-129">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValueImpl">
      <MemberSignature Language="C#" Value="protected object DefaultValueImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family object DefaultValueImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ParameterInfo.DefaultValueImpl" />
      <MemberSignature Language="VB.NET" Value="Protected DefaultValueImpl As Object " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Object ^ DefaultValueImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-130">Der Standardwert des Parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-130">The default value of the parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-131">Dieses Feld ist nur für Benutzer, die von Klassen ableiten vorgesehen `ParameterInfo`.</span><span class="sxs-lookup"><span data-stu-id="66f57-131">This field is intended only for users who are deriving classes from `ParameterInfo`.</span></span>  
  
 <span data-ttu-id="66f57-132">Zugriff auf den Standardwert des Parameters erfolgt üblicherweise über <xref:System.Reflection.ParameterInfo.DefaultValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="66f57-132">Typical access to the default value of the parameter is through <xref:System.Reflection.ParameterInfo.DefaultValue%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-133">Ruft die benutzerdefinierten Attribute ab, die auf diesen Parameter angewendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-133">Gets the custom attributes applied to this parameter.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public virtual object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="66f57-134">Dieses Argument wird für Objekte dieses Typs ignoriert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-134">This argument is ignored for objects of this type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="66f57-135">Ruft alle benutzerdefinierten Attribute ab, die für diesen Parameter definiert sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-135">Gets all the custom attributes defined on this parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="66f57-136">Ein Array, das alle auf diesen Parameter angewendeten benutzerdefinierten Attribute enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-136">An array that contains all the custom attributes applied to this parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-137">Diese Methode ignoriert die `inherit` Parameter.</span><span class="sxs-lookup"><span data-stu-id="66f57-137">This method ignores the `inherit` parameter.</span></span> <span data-ttu-id="66f57-138">Um die Vererbungskette für Attribute zu Parametern zu suchen, verwenden Sie die entsprechenden Überladungen der <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="66f57-138">To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66f57-139">Das folgende Beispiel zeigt, wie benutzerdefinierte Attribute, die auf angewendet wurden die Parameter der Methoden können zur Laufzeit abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="66f57-139">The following example shows how custom attributes that have been applied to the parameters of methods can be retrieved at run time.</span></span> <span data-ttu-id="66f57-140">Im Beispiel definiert ein benutzerdefiniertes Attribut namens `MyAttribute` Parametern angewendet werden können.</span><span class="sxs-lookup"><span data-stu-id="66f57-140">The example defines a custom attribute named `MyAttribute` that can be applied to parameters.</span></span> <span data-ttu-id="66f57-141">Im Beispiel definiert eine Klasse namens `MyClass` mit einer Methode namens `MyMethod`, und wendet `MyAttribute` auf einen Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="66f57-141">The example then defines a class named `MyClass` with a method named `MyMethod`, and applies `MyAttribute` to a parameter of the method.</span></span>  
  
 <span data-ttu-id="66f57-142">Wenn das Beispiel ausgeführt wird, verwendet der <xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29> Methode, um die benutzerdefinierten Attribute abzurufen, die auf alle Parameter aller Methoden in angewendet wurden `MyClass`, und zeigt sie an der Konsole.</span><span class="sxs-lookup"><span data-stu-id="66f57-142">When the example is run, it uses the <xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29> method to retrieve the custom attributes that have been applied to all parameters of all methods in `MyClass`, and displays them at the console.</span></span>  
  
 [!code-cpp[ParameterInfo_GetCustomAttributes#1](~/samples/snippets/cpp/VS_Snippets_CLR/ParameterInfo_GetCustomAttributes/CPP/source.cpp#1)]
 [!code-csharp[ParameterInfo_GetCustomAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_GetCustomAttributes/CS/source.cs#1)]
 [!code-vb[ParameterInfo_GetCustomAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParameterInfo_GetCustomAttributes/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="66f57-143">Ein benutzerdefinierter Attributtyp konnte nicht geladen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-143">A custom attribute type could not be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="66f57-144">Die nach Typ identifizierten benutzerdefinierten Attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-144">The custom attributes identified by type.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="66f57-145">Dieses Argument wird für Objekte dieses Typs ignoriert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-145">This argument is ignored for objects of this type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="66f57-146">Ruft die benutzerdefinierten Attribute vom angegebenen Typ oder von abgeleiteten Typen ab, die auf diesen Parameter angewendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-146">Gets the custom attributes of the specified type or its derived types that are applied to this parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="66f57-147">Ein Array, das die benutzerdefinierten Attribute vom angegebenen Typ oder von abgeleiteten Typen enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-147">An array that contains the custom attributes of the specified type or its derived types.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-148">Diese Methode ignoriert die `inherit` Parameter.</span><span class="sxs-lookup"><span data-stu-id="66f57-148">This method ignores the `inherit` parameter.</span></span> <span data-ttu-id="66f57-149">Um die Vererbungskette für Attribute zu Parametern zu suchen, verwenden Sie die entsprechenden Überladungen der <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="66f57-149">To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="66f57-150">Der Typ muss ein vom zugrunde liegenden Laufzeitsystem bereitgestellter Typ sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-150">The type must be a type provided by the underlying runtime system.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="66f57-151">
            <paramref name="attributeType" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-151">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="66f57-152">Ein benutzerdefinierter Attributtyp konnte nicht geladen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-152">A custom attribute type could not be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributesData">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributesData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.GetCustomAttributesData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributesData () As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributesData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="66f57-153">Gibt eine Liste von <see cref="T:System.Reflection.CustomAttributeData" />-Objekten für den aktuellen Parameter zurück, die im Reflektionskontext verwendet werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-153">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects for the current parameter, which can be used in the reflection-only context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="66f57-154">Eine generische Liste von <see cref="T:System.Reflection.CustomAttributeData" />-Objekten, die Daten zu den Attributen darstellen, die auf den aktuellen Parameter angewendet wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-154">A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-155">Verwenden Sie diese Methode, um die benutzerdefinierten Attribute des Codes in den ReflectionOnly Kontext, in Fällen zu untersuchen, in dem die benutzerdefinierten Attribute selbst im Code definiert werden, die in den reflektionsbezogenen Kontext geladen wird.</span><span class="sxs-lookup"><span data-stu-id="66f57-155">Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</span></span> <span data-ttu-id="66f57-156">Methoden, z. B. <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> und <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType> kann nicht in solchen Fällen verwendet werden, da sie Instanzen der Attribute erstellen.</span><span class="sxs-lookup"><span data-stu-id="66f57-156">Methods such as <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> and <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType> cannot be used in such cases, because they create instances of the attributes.</span></span> <span data-ttu-id="66f57-157">Code in den ReflectionOnly Kontext kann nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="66f57-157">Code in the reflection-only context cannot be executed.</span></span> <span data-ttu-id="66f57-158">Weitere Informationen und Beispielcode finden Sie unter der <xref:System.Reflection.CustomAttributeData> Klasse.</span><span class="sxs-lookup"><span data-stu-id="66f57-158">For more information and example code, see the <xref:System.Reflection.CustomAttributeData> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOptionalCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetOptionalCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetOptionalCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOptionalCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetOptionalCustomModifiers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="66f57-159">Ruft die optionalen benutzerdefinierten Modifizierer des Parameters ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-159">Gets the optional custom modifiers of the parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="66f57-160">Ein Array von <see cref="T:System.Type" />-Objekten, die die optionalen benutzerdefinierten Modifizierer des aktuellen Parameters identifizieren, z.B. <see cref="T:System.Runtime.CompilerServices.IsConst" /> oder <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-160">An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-161">Die <xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A> und <xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A> Methoden für den Designer der verwalteten Compiler bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="66f57-161">The <xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="66f57-162">Weitere Informationen zu benutzerdefinierten Modifizierer, finden Sie unter <xref:System.Runtime.CompilerServices.IsBoxed> und verwandten Klassen in der <xref:System.Runtime.CompilerServices> -Namespace, und die Metadatenspezifikation in der ECMA Partition II-Dokumentation.</span><span class="sxs-lookup"><span data-stu-id="66f57-162">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace, and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="66f57-163">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](http://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](http://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="66f57-163">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRealObject">
      <MemberSignature Language="C#" Value="public object GetRealObject (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRealObject(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRealObject (context As StreamingContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetRealObject(System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="66f57-164">Der serialisierte Datenstrom, aus dem das aktuelle Objekt deserialisiert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-164">The serialized stream from which the current object is deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="66f57-165">Gibt das eigentliche zu deserialisierende Objekt anstelle des vom serialisierten Datenstrom angegebenen Objekts zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-165">Returns the real object that should be deserialized instead of the object that the serialized stream specifies.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="66f57-166">Das eigentliche Objekt, das in das Diagramm eingefügt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-166">The actual object that is put into the graph.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-167">Diese Methode implementiert die Methode <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-167">This method implements the <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">
          <span data-ttu-id="66f57-168">Die Position des Parameters in der Parameterliste des zugeordneten Members ist nicht gültig für den Typ des Members.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-168">The parameter's position in the parameter list of its associated member is not valid for that member's type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="66f57-169">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-169">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="66f57-170">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-170">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetRequiredCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetRequiredCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRequiredCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetRequiredCustomModifiers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="66f57-171">Ruft die erforderlichen benutzerdefinierten Modifizierer des Parameters ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-171">Gets the required custom modifiers of the parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="66f57-172">Ein Array von <see cref="T:System.Type" />-Objekten, die die erforderlichen benutzerdefinierten Modifizierer des aktuellen Parameters identifizieren, z.B. <see cref="T:System.Runtime.CompilerServices.IsConst" /> oder <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-172">An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-173">Die <xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A> und <xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A> Methoden für den Designer der verwalteten Compiler bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="66f57-173">The <xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="66f57-174">Weitere Informationen zu benutzerdefinierten Modifizierer, finden Sie unter <xref:System.Runtime.CompilerServices.IsBoxed> und verwandten Klassen in der <xref:System.Runtime.CompilerServices> -Namespace, und die Metadatenspezifikation in der ECMA Partition II-Dokumentation.</span><span class="sxs-lookup"><span data-stu-id="66f57-174">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace, and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="66f57-175">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](http://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](http://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="66f57-175">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDefaultValue">
      <MemberSignature Language="C#" Value="public virtual bool HasDefaultValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasDefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.HasDefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasDefaultValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasDefaultValue { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-176">Ruft einen Wert ab, der angibt, ob dieser Parameter über einen Standardwert verfügt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-176">Gets a value that indicates whether this parameter has a default value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-177">
            <see langword="true" />, wenn dieser Paramater über einen Standardwert verfügt; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-177">
              <see langword="true" /> if this parameter has a default value; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="66f57-178">Das <see langword="Type" />-Objekt, nach dem gesucht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-178">The <see langword="Type" /> object to search for.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="66f57-179">Dieses Argument wird für Objekte dieses Typs ignoriert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-179">This argument is ignored for objects of this type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="66f57-180">Bestimmt, ob das benutzerdefinierte Attribut vom angegebenen Typ oder von abgeleiteten Typen auf diesen Parameter angewendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-180">Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="66f57-181">
            <see langword="true" />, wenn eine oder mehrere Instanzen von <paramref name="attributeType" /> oder abgeleiteten Typen auf diesen Parameter angewendet werden, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-181">
              <see langword="true" /> if one or more instances of <paramref name="attributeType" /> or its derived types are applied to this parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-182">Diese Methode ignoriert die `inherit` Parameter.</span><span class="sxs-lookup"><span data-stu-id="66f57-182">This method ignores the `inherit` parameter.</span></span> <span data-ttu-id="66f57-183">Um die Vererbungskette für Attribute zu Parametern zu suchen, verwenden Sie die entsprechenden Überladungen der <xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="66f57-183">To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66f57-184">Das folgende Beispiel definiert zwei benutzerdefinierte Attribute `MyAttribute` und `MyDerivedAttribute`.</span><span class="sxs-lookup"><span data-stu-id="66f57-184">The following example defines two custom attributes, `MyAttribute` and `MyDerivedAttribute`.</span></span> <span data-ttu-id="66f57-185">`MyDerivedAttribute` wird von `MyAttribute` abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="66f57-185">`MyDerivedAttribute` is derived from `MyAttribute`.</span></span> <span data-ttu-id="66f57-186">Das Beispiel wendet diese Attribute klicken Sie dann auf die Parameter einer Methode einer Beispiel-Klasse.</span><span class="sxs-lookup"><span data-stu-id="66f57-186">The example then applies these attributes to the parameters of a method of an example class.</span></span>  
  
 <span data-ttu-id="66f57-187">Wenn das Beispiel ausgeführt wird, verwendet die <xref:System.Reflection.ParameterInfo.IsDefined%2A> Methode so testen Sie alle Parameter aller Methoden in der Beispielklasse.</span><span class="sxs-lookup"><span data-stu-id="66f57-187">When the example is run, it uses the <xref:System.Reflection.ParameterInfo.IsDefined%2A> method to test all parameters of all methods in the example class.</span></span> <span data-ttu-id="66f57-188">Es zeigt dann die Parameter, die über `MyAttribute` oder `MyDerivedAttribute`.</span><span class="sxs-lookup"><span data-stu-id="66f57-188">It then displays the parameters that have `MyAttribute` or `MyDerivedAttribute`.</span></span>  
  
 [!code-cpp[ParameterInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/cpp/VS_Snippets_CLR/ParameterInfo_GetCustomAttribute_IsDefined/CPP/ParameterInfo_GetCustomAttribute_IsDefined.cpp#1)]
 [!code-csharp[ParameterInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_GetCustomAttribute_IsDefined/CS/parameterinfo_getcustomattribute_isdefined.cs#1)]
 [!code-vb[ParameterInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParameterInfo_GetCustomAttribute_IsDefined/VB/parameterinfo_getcustomattribute_isdefined.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="66f57-189">
            <paramref name="attributeType" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-189">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="66f57-190">
            <paramref name="attributeType" /> ist kein von der Laufzeit angegebenes <see cref="T:System.Type" />-Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-190">
              <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the common language runtime.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsIn">
      <MemberSignature Language="C#" Value="public bool IsIn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIn" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.IsIn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIn { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-191">Ruft einen Wert ab, der angibt, ob dies ein Eingabeparameter ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-191">Gets a value indicating whether this is an input parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-192">
            <see langword="true" />, wenn der Parameter ein Eingabeparameter ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-192">
              <see langword="true" /> if the parameter is an input parameter; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-193">Diese Methode hängt von einem optionalen Metadatenflag ab.</span><span class="sxs-lookup"><span data-stu-id="66f57-193">This method depends on an optional metadata flag.</span></span> <span data-ttu-id="66f57-194">Dieses Flag kann vom Compiler eingefügt werden, aber der Compiler sind nicht dazu verpflichtet.</span><span class="sxs-lookup"><span data-stu-id="66f57-194">This flag can be inserted by compilers, but the compilers are not obligated to do so.</span></span>  
  
 <span data-ttu-id="66f57-195">Diese Methode verwendet die `In` flag von der `ParameterAttributes` Enumerator.</span><span class="sxs-lookup"><span data-stu-id="66f57-195">This method utilizes the `In` flag of the `ParameterAttributes` enumerator.</span></span>  
  
 <span data-ttu-id="66f57-196">Zum Abrufen der <xref:System.Reflection.ParameterInfo> array zunächst die Methode oder der Konstruktor, und rufen Sie anschließend <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-196">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66f57-197">Im folgende Beispiel wird gezeigt, wie So testen Sie die Methodenparameter für die <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, und <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType> Attribute.</span><span class="sxs-lookup"><span data-stu-id="66f57-197">The following example shows how to test method parameters for the <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, and <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType> attributes.</span></span>  
  
 <span data-ttu-id="66f57-198">Das Beispiel enthält eine `DefineMethod` Methode, der Folgendes ausführt:</span><span class="sxs-lookup"><span data-stu-id="66f57-198">The example contains a `DefineMethod` method that does the following:</span></span>  
  
-   <span data-ttu-id="66f57-199">Erstellt eine dynamische Assembly mit einem `MyType` Typ.</span><span class="sxs-lookup"><span data-stu-id="66f57-199">Creates a dynamic assembly containing a `MyType` type.</span></span>  
  
-   <span data-ttu-id="66f57-200">Fügt eine `MyMethod` aufzurufende Methode `MyType`.</span><span class="sxs-lookup"><span data-stu-id="66f57-200">Adds a `MyMethod` method to `MyType`.</span></span> <span data-ttu-id="66f57-201">`MyMethod` verfügt über drei Parameter.</span><span class="sxs-lookup"><span data-stu-id="66f57-201">`MyMethod` has three parameters.</span></span> <span data-ttu-id="66f57-202">Der erste Parameter ist definiert, mit <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, wobei der zweite mit <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, und der dritte <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-202">The first parameter is defined with <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, the second with <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, and the third with <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="66f57-203">Aufrufe <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> auf den Typ zu vervollständigen.</span><span class="sxs-lookup"><span data-stu-id="66f57-203">Calls <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> to complete the type.</span></span>  
  
 <span data-ttu-id="66f57-204">Nach der Ausführung `DefineMethod`, das Beispiel sucht die Assemblys, die derzeit geladen werden, bis die dynamische Assembly gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="66f57-204">After executing `DefineMethod`, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</span></span> <span data-ttu-id="66f57-205">Geladen `MyType` Ruft aus der Assembly eine <xref:System.Reflection.MethodInfo> -Objekt für die `MyMethod` -Methode, und die Parameter überprüft.</span><span class="sxs-lookup"><span data-stu-id="66f57-205">It loads `MyType` from the assembly, gets a <xref:System.Reflection.MethodInfo> object for the `MyMethod` method, and examines the parameters.</span></span> <span data-ttu-id="66f57-206">Im Beispiel wird die <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, und <xref:System.Reflection.ParameterInfo.IsOptional%2A> Eigenschaften zum Anzeigen von Informationen zu den Parametern.</span><span class="sxs-lookup"><span data-stu-id="66f57-206">The example uses the <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, and <xref:System.Reflection.ParameterInfo.IsOptional%2A> properties to display information about the parameters.</span></span>  
  
 [!code-cpp[ParameterInfo_IsIn_IsOut_IsOptional#1](~/samples/snippets/cpp/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/CPP/ParameterInfo_IsIn_IsOut_IsOptional.cpp#1)]
 [!code-csharp[ParameterInfo_IsIn_IsOut_IsOptional#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/CS/parameterinfo_isin_isout_isoptional.cs#1)]
 [!code-vb[ParameterInfo_IsIn_IsOut_IsOptional#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/VB/parameterinfo_isin_isout_isoptional.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLcid">
      <MemberSignature Language="C#" Value="public bool IsLcid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLcid" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.IsLcid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLcid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLcid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-207">Ruft einen Wert ab, der angibt, ob dieser Parameter ein Gebietsschemabezeichner (lcid) ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-207">Gets a value indicating whether this parameter is a locale identifier (lcid).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-208">
            <see langword="true" />, wenn der Parameter ein Gebietsschemabezeichner ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-208">
              <see langword="true" /> if the parameter is a locale identifier; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-209">Diese Methode hängt von einem optionalen Metadatenflag ab.</span><span class="sxs-lookup"><span data-stu-id="66f57-209">This method depends on an optional metadata flag.</span></span> <span data-ttu-id="66f57-210">Dieses Flag kann vom Compiler eingefügt werden, aber der Compiler sind nicht dazu verpflichtet.</span><span class="sxs-lookup"><span data-stu-id="66f57-210">This flag can be inserted by compilers, but the compilers are not obligated to do so.</span></span>  
  
 <span data-ttu-id="66f57-211">Diese Methode verwendet die `Lcid` flag von der `ParameterAttributes` Enumerator.</span><span class="sxs-lookup"><span data-stu-id="66f57-211">This method utilizes the `Lcid` flag of the `ParameterAttributes` enumerator.</span></span>  
  
 <span data-ttu-id="66f57-212">Zum Abrufen der <xref:System.Reflection.ParameterInfo> array zunächst die Methode oder der Konstruktor, und rufen Sie anschließend <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-212">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOptional">
      <MemberSignature Language="C#" Value="public bool IsOptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOptional" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.IsOptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOptional { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-213">Ruft einen Wert ab, der angibt, ob dieser Parameter optional ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-213">Gets a value indicating whether this parameter is optional.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-214">
            <see langword="true" />, wenn der Parameter optional ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-214">
              <see langword="true" /> if the parameter is optional; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-215">Diese Methode hängt von einem optionalen Metadatenflag ab.</span><span class="sxs-lookup"><span data-stu-id="66f57-215">This method depends on an optional metadata flag.</span></span> <span data-ttu-id="66f57-216">Dieses Flag kann vom Compiler eingefügt werden, aber der Compiler sind nicht dazu verpflichtet.</span><span class="sxs-lookup"><span data-stu-id="66f57-216">This flag can be inserted by compilers, but the compilers are not obligated to do so.</span></span>  
  
 <span data-ttu-id="66f57-217">Diese Methode verwendet die `Optional` flag von der `ParameterAttributes` Enumerator.</span><span class="sxs-lookup"><span data-stu-id="66f57-217">This method utilizes the `Optional` flag of the `ParameterAttributes` enumerator.</span></span>  
  
 <span data-ttu-id="66f57-218">Zum Abrufen der <xref:System.Reflection.ParameterInfo> array zunächst die Methode, und rufen Sie anschließend <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-218">To get the <xref:System.Reflection.ParameterInfo> array, first get the method and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66f57-219">Im folgende Beispiel wird gezeigt, wie So testen Sie die Methodenparameter für die <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, und <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType> Attribute.</span><span class="sxs-lookup"><span data-stu-id="66f57-219">The following example shows how to test method parameters for the <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, and <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType> attributes.</span></span>  
  
 <span data-ttu-id="66f57-220">Das Beispiel enthält eine `DefineMethod` Methode, der Folgendes ausführt:</span><span class="sxs-lookup"><span data-stu-id="66f57-220">The example contains a `DefineMethod` method that does the following:</span></span>  
  
-   <span data-ttu-id="66f57-221">Erstellt eine dynamische Assembly mit einem `MyType` Typ.</span><span class="sxs-lookup"><span data-stu-id="66f57-221">Creates a dynamic assembly containing a `MyType` type.</span></span>  
  
-   <span data-ttu-id="66f57-222">Fügt eine `MyMethod` aufzurufende Methode `MyType`.</span><span class="sxs-lookup"><span data-stu-id="66f57-222">Adds a `MyMethod` method to `MyType`.</span></span> <span data-ttu-id="66f57-223">`MyMethod` verfügt über drei Parameter.</span><span class="sxs-lookup"><span data-stu-id="66f57-223">`MyMethod` has three parameters.</span></span> <span data-ttu-id="66f57-224">Der erste Parameter ist definiert, mit <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, wobei der zweite mit <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, und der dritte <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-224">The first parameter is defined with <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, the second with <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, and the third with <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="66f57-225">Aufrufe <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> auf den Typ zu vervollständigen.</span><span class="sxs-lookup"><span data-stu-id="66f57-225">Calls <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> to complete the type.</span></span>  
  
 <span data-ttu-id="66f57-226">Nach der Ausführung `DefineMethod`, das Beispiel sucht die Assemblys, die derzeit geladen werden, bis die dynamische Assembly gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="66f57-226">After executing `DefineMethod`, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</span></span> <span data-ttu-id="66f57-227">Geladen `MyType` Ruft aus der Assembly eine <xref:System.Reflection.MethodInfo> -Objekt für die `MyMethod` -Methode, und die Parameter überprüft.</span><span class="sxs-lookup"><span data-stu-id="66f57-227">It loads `MyType` from the assembly, gets a <xref:System.Reflection.MethodInfo> object for the `MyMethod` method, and examines the parameters.</span></span> <span data-ttu-id="66f57-228">Im Beispiel wird die <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, und <xref:System.Reflection.ParameterInfo.IsOptional%2A> Eigenschaften zum Anzeigen von Informationen zu den Parametern.</span><span class="sxs-lookup"><span data-stu-id="66f57-228">The example uses the <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, and <xref:System.Reflection.ParameterInfo.IsOptional%2A> properties to display information about the parameters.</span></span>  
  
 [!code-cpp[ParameterInfo_IsIn_IsOut_IsOptional#1](~/samples/snippets/cpp/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/CPP/ParameterInfo_IsIn_IsOut_IsOptional.cpp#1)]
 [!code-csharp[ParameterInfo_IsIn_IsOut_IsOptional#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/CS/parameterinfo_isin_isout_isoptional.cs#1)]
 [!code-vb[ParameterInfo_IsIn_IsOut_IsOptional#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/VB/parameterinfo_isin_isout_isoptional.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOut">
      <MemberSignature Language="C#" Value="public bool IsOut { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOut" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.IsOut" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOut As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOut { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-229">Ruft einen Wert ab, der angibt, ob dies ein Ausgabeparameter ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-229">Gets a value indicating whether this is an output parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-230">
            <see langword="true" />, wenn der Parameter ein Ausgabeparameter ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-230">
              <see langword="true" /> if the parameter is an output parameter; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-231">Diese Methode hängt von einem optionalen Metadatenflag ab.</span><span class="sxs-lookup"><span data-stu-id="66f57-231">This method depends on an optional metadata flag.</span></span> <span data-ttu-id="66f57-232">Dieses Flag kann vom Compiler eingefügt werden, aber der Compiler sind nicht dazu verpflichtet.</span><span class="sxs-lookup"><span data-stu-id="66f57-232">This flag can be inserted by compilers, but the compilers are not obligated to do so.</span></span>  
  
 <span data-ttu-id="66f57-233">Diese Methode verwendet die `Out` flag von der `ParameterAttributes` Enumerator.</span><span class="sxs-lookup"><span data-stu-id="66f57-233">This method utilizes the `Out` flag of the `ParameterAttributes` enumerator.</span></span>  
  
 <span data-ttu-id="66f57-234">Zum Abrufen der <xref:System.Reflection.ParameterInfo> array zunächst die Methode oder der Konstruktor, und rufen Sie anschließend <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-234">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66f57-235">Im folgende Beispiel wird gezeigt, wie So testen Sie die Methodenparameter für die <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, und <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType> Attribute.</span><span class="sxs-lookup"><span data-stu-id="66f57-235">The following example shows how to test method parameters for the <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, and <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType> attributes.</span></span>  
  
 <span data-ttu-id="66f57-236">Das Beispiel enthält eine `DefineMethod` Methode, der Folgendes ausführt:</span><span class="sxs-lookup"><span data-stu-id="66f57-236">The example contains a `DefineMethod` method that does the following:</span></span>  
  
-   <span data-ttu-id="66f57-237">Erstellt eine dynamische Assembly mit einem `MyType` Typ.</span><span class="sxs-lookup"><span data-stu-id="66f57-237">Creates a dynamic assembly containing a `MyType` type.</span></span>  
  
-   <span data-ttu-id="66f57-238">Fügt eine `MyMethod` aufzurufende Methode `MyType`.</span><span class="sxs-lookup"><span data-stu-id="66f57-238">Adds a `MyMethod` method to `MyType`.</span></span> <span data-ttu-id="66f57-239">`MyMethod` verfügt über drei Parameter.</span><span class="sxs-lookup"><span data-stu-id="66f57-239">`MyMethod` has three parameters.</span></span> <span data-ttu-id="66f57-240">Der erste Parameter ist definiert, mit <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, wobei der zweite mit <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, und der dritte <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-240">The first parameter is defined with <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, the second with <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, and the third with <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="66f57-241">Aufrufe <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> auf den Typ zu vervollständigen.</span><span class="sxs-lookup"><span data-stu-id="66f57-241">Calls <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> to complete the type.</span></span>  
  
 <span data-ttu-id="66f57-242">Nach der Ausführung `DefineMethod`, das Beispiel sucht die Assemblys, die derzeit geladen werden, bis die dynamische Assembly gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="66f57-242">After executing `DefineMethod`, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</span></span> <span data-ttu-id="66f57-243">Geladen `MyType` Ruft aus der Assembly eine <xref:System.Reflection.MethodInfo> -Objekt für die `MyMethod` -Methode, und die Parameter überprüft.</span><span class="sxs-lookup"><span data-stu-id="66f57-243">It loads `MyType` from the assembly, gets a <xref:System.Reflection.MethodInfo> object for the `MyMethod` method, and examines the parameters.</span></span> <span data-ttu-id="66f57-244">Im Beispiel wird die <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, und <xref:System.Reflection.ParameterInfo.IsOptional%2A> Eigenschaften zum Anzeigen von Informationen zu den Parametern.</span><span class="sxs-lookup"><span data-stu-id="66f57-244">The example uses the <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, and <xref:System.Reflection.ParameterInfo.IsOptional%2A> properties to display information about the parameters.</span></span>  
  
 [!code-cpp[Classic ParameterInfo.IsOut Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ParameterInfo.IsOut Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ParameterInfo.IsOut Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ParameterInfo.IsOut Example/CS/source.cs#1)]
 [!code-vb[Classic ParameterInfo.IsOut Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ParameterInfo.IsOut Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRetval">
      <MemberSignature Language="C#" Value="public bool IsRetval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRetval" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.IsRetval" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRetval As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRetval { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-245">Ruft einen Wert ab, der angibt, ob dies ein <see langword="Retval" />-Parameter ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-245">Gets a value indicating whether this is a <see langword="Retval" /> parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-246">
            <see langword="true" />, wenn der Parameter <see langword="Retval" /> ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-246">
              <see langword="true" /> if the parameter is a <see langword="Retval" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-247">Diese Methode hängt von einem optionalen Metadatenflag ab.</span><span class="sxs-lookup"><span data-stu-id="66f57-247">This method depends on an optional metadata flag.</span></span> <span data-ttu-id="66f57-248">Dieses Flag kann vom Compiler eingefügt werden, aber der Compiler sind nicht dazu verpflichtet.</span><span class="sxs-lookup"><span data-stu-id="66f57-248">This flag can be inserted by compilers, but the compilers are not obligated to do so.</span></span>  
  
 <span data-ttu-id="66f57-249">Diese Methode verwendet die `Retval` flag von der `ParameterAttributes` Enumerator.</span><span class="sxs-lookup"><span data-stu-id="66f57-249">This method utilizes the `Retval` flag of the `ParameterAttributes` enumerator.</span></span>  
  
 <span data-ttu-id="66f57-250">Zum Abrufen der <xref:System.Reflection.ParameterInfo> array zunächst die Methode oder der Konstruktor, und rufen Sie anschließend <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-250">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MemberInfo Member" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.Member" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Member As MemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberInfo ^ Member { System::Reflection::MemberInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-251">Ruft einen Wert ab, der den Member angibt, in dem der Parameter implementiert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-251">Gets a value indicating the member in which the parameter is implemented.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-252">Der Member, der den durch diesen <see cref="T:System.Reflection.ParameterInfo" /> dargestellten Parameter eingesetzt hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-252">The member which implanted the parameter represented by this <see cref="T:System.Reflection.ParameterInfo" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberImpl">
      <MemberSignature Language="C#" Value="protected System.Reflection.MemberInfo MemberImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Reflection.MemberInfo MemberImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ParameterInfo.MemberImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MemberImpl As MemberInfo " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Reflection::MemberInfo ^ MemberImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-253">Der Member, in dem das Feld implementiert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-253">The member in which the field is implemented.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-254">Dieses Feld ist nur für Benutzer, die von Klassen ableiten vorgesehen `ParameterInfo`.</span><span class="sxs-lookup"><span data-stu-id="66f57-254">This field is intended only for users who are deriving classes from `ParameterInfo`.</span></span>  
  
 <span data-ttu-id="66f57-255">Der Zugriff auf den Namen des Parameters wird durch die <xref:System.Reflection.ParameterInfo.Member%2A>.</span><span class="sxs-lookup"><span data-stu-id="66f57-255">Typical access to the parameter name is through the <xref:System.Reflection.ParameterInfo.Member%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataToken">
      <MemberSignature Language="C#" Value="public virtual int MetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.MetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MetadataToken { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-256">Ruft einen Wert ab, der diesen Parameter in den Metadaten identifiziert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-256">Gets a value that identifies this parameter in metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-257">Ein Wert, der diesen Parameter in Verbindung mit dem Modul in den Metadaten eindeutig identifiziert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-257">A value which, in combination with the module, uniquely identifies this parameter in metadata.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-258">Verwenden Sie zum Abrufen des Moduls der <xref:System.Reflection.MemberInfo.Module%2A> Eigenschaft des Members, der dieser Parameter definiert.</span><span class="sxs-lookup"><span data-stu-id="66f57-258">To get the module, use the <xref:System.Reflection.MemberInfo.Module%2A> property of the member that defines this parameter.</span></span>  
  
 <span data-ttu-id="66f57-259">Das Token mit dieser Eigenschaft können auf der nicht verwalteten Reflektions-API übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="66f57-259">The tokens obtained using this property can be passed to the unmanaged Reflection API.</span></span> <span data-ttu-id="66f57-260">Weitere Informationen finden Sie unter [nicht verwalteten Reflektions-API](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span><span class="sxs-lookup"><span data-stu-id="66f57-260">For more information, please see [Unmanaged Reflection API](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-261">Ruft den Namen des Parameters ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-261">Gets the name of the parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-262">Der einfache Name dieses Parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-262">The simple name of this parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-263">Diese Eigenschaft verwendet das geschützte <xref:System.Reflection.ParameterInfo.NameImpl> Feld, und setzt ein Flag optionale Metadaten, die möglicherweise nicht in allen Compilern verfügbar.</span><span class="sxs-lookup"><span data-stu-id="66f57-263">This property utilizes the protected <xref:System.Reflection.ParameterInfo.NameImpl> field, and depends on an optional metadata flag that might not be available in all compilers.</span></span>  
  
 <span data-ttu-id="66f57-264">Zum Abrufen der <xref:System.Reflection.ParameterInfo> array zunächst die Methode oder der Konstruktor, und rufen Sie anschließend die <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="66f57-264">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call the <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="66f57-265">Wenn diese <xref:System.Reflection.ParameterInfo> steht für einen Eingabewert (d. h., wenn sie mithilfe von abgerufen wurden die <xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType> Eigenschaft), wird diese Eigenschaft `null`.</span><span class="sxs-lookup"><span data-stu-id="66f57-265">If this <xref:System.Reflection.ParameterInfo> represents a return value (that is, if it was obtained by using the <xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType> property), this property will be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66f57-266">Im folgende Beispiel wird gezeigt, wie abzurufenden <xref:System.Reflection.ParameterInfo> Objekte für die Parameter einer Methode, und verwenden Sie dann die <xref:System.Reflection.ParameterInfo.Name%2A> Eigenschaft, um die Namen der Parameter erhalten.</span><span class="sxs-lookup"><span data-stu-id="66f57-266">The following example shows how to get <xref:System.Reflection.ParameterInfo> objects for the parameters of a method, and then use the <xref:System.Reflection.ParameterInfo.Name%2A> property to obtain the parameter names.</span></span>  
  
 [!code-cpp[Classic ParameterInfo.Name Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ParameterInfo.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ParameterInfo.Name Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ParameterInfo.Name Example/CS/source.cs#1)]
 [!code-vb[Classic ParameterInfo.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ParameterInfo.Name Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameImpl">
      <MemberSignature Language="C#" Value="protected string NameImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family string NameImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ParameterInfo.NameImpl" />
      <MemberSignature Language="VB.NET" Value="Protected NameImpl As String " />
      <MemberSignature Language="C++ CLI" Value="protected: System::String ^ NameImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-267">Der Name des Parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-267">The name of the parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-268">Dieses Feld ist nur für Benutzer, die von Klassen ableiten vorgesehen `ParameterInfo`.</span><span class="sxs-lookup"><span data-stu-id="66f57-268">This field is intended only for users who are deriving classes from `ParameterInfo`.</span></span>  
  
 <span data-ttu-id="66f57-269">Der Zugriff auf den Namen des Parameters wird durch die <xref:System.Reflection.ParameterInfo.Name%2A>.</span><span class="sxs-lookup"><span data-stu-id="66f57-269">Typical access to the parameter name is through the <xref:System.Reflection.ParameterInfo.Name%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterType">
      <MemberSignature Language="C#" Value="public virtual Type ParameterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ParameterType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.ParameterType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ParameterType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ParameterType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-270">Ruft den <see langword="Type" /> dieses Parameters ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-270">Gets the <see langword="Type" /> of this parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-271">Das <see langword="Type" />-Objekt, das den <see langword="Type" /> dieses Parameters darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-271">The <see langword="Type" /> object that represents the <see langword="Type" /> of this parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-272">Diese Methode richtet sich nach der eine optionale Metadaten und kann nicht in allen Compilern verfügbar sein.</span><span class="sxs-lookup"><span data-stu-id="66f57-272">This method depends on an optional metadata and might not be available in all compilers.</span></span>  
  
 <span data-ttu-id="66f57-273">Zum Abrufen der <xref:System.Reflection.ParameterInfo> array zunächst die Methode oder der Konstruktor, und rufen Sie anschließend <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-273">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66f57-274">Im folgende Beispiel wird gezeigt, wie abzurufenden <xref:System.Reflection.ParameterInfo> Objekte für die Parameter einer Methode, und verwenden Sie dann die <xref:System.Reflection.ParameterInfo.ParameterType%2A> Eigenschaft, um den Typ jedes Parameters anzeigen.</span><span class="sxs-lookup"><span data-stu-id="66f57-274">The following example shows how to get <xref:System.Reflection.ParameterInfo> objects for the parameters of a method, and then use the <xref:System.Reflection.ParameterInfo.ParameterType%2A> property to display the type of each parameter.</span></span>  
  
 [!code-cpp[Classic ParameterInfo.ParameterType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ParameterInfo.ParameterType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ParameterInfo.ParameterType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ParameterInfo.ParameterType Example/CS/source.cs#1)]
 [!code-vb[Classic ParameterInfo.ParameterType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ParameterInfo.ParameterType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public virtual int Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Position" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Position As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Position { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-275">Ruft die nullbasierte Position des Parameters in der formalen Parameterliste ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-275">Gets the zero-based position of the parameter in the formal parameter list.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-276">Eine ganze Zahl, die die Position des Parameters in der Parameterliste darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-276">An integer representing the position this parameter occupies in the parameter list.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-277">Nur Parameter in der Methodensignatur (d. h. in der Liste der formalen Parameter) werden berücksichtigt, wenn die Position zu berechnen.</span><span class="sxs-lookup"><span data-stu-id="66f57-277">Only parameters in the method signature (that is, in the formal parameter list) are considered when calculating the position.</span></span> <span data-ttu-id="66f57-278">Z. B. Methoden, die ausgeblendeten Parameter, der darstellt `this` (`Me` in Visual Basic) wird nicht gezählt.</span><span class="sxs-lookup"><span data-stu-id="66f57-278">For instance methods, the hidden parameter that represents `this` (`Me` in Visual Basic) is not counted.</span></span>  
  
 <span data-ttu-id="66f57-279">Diese Methode verwendet die <xref:System.Reflection.ParameterInfo.PositionImpl> Methode.</span><span class="sxs-lookup"><span data-stu-id="66f57-279">This method utilizes the <xref:System.Reflection.ParameterInfo.PositionImpl> method.</span></span>  
  
 <span data-ttu-id="66f57-280">Zum Abrufen der <xref:System.Reflection.ParameterInfo> array zunächst die Methode oder der Konstruktor, und rufen Sie anschließend <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="66f57-280">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.ParameterInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="PositionImpl">
      <MemberSignature Language="C#" Value="protected int PositionImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family int32 PositionImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ParameterInfo.PositionImpl" />
      <MemberSignature Language="VB.NET" Value="Protected PositionImpl As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected: int PositionImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-281">Die nullbasierte Position des Parameters in der Parameterliste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-281">The zero-based position of the parameter in the parameter list.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-282">Dieses Feld ist nur für Benutzer, die von Klassen ableiten vorgesehen `ParameterInfo`.</span><span class="sxs-lookup"><span data-stu-id="66f57-282">This field is intended only for users who are deriving classes from `ParameterInfo`.</span></span>  
  
 <span data-ttu-id="66f57-283">Zugriff auf den Namen des Parameters erfolgt üblicherweise über <xref:System.Reflection.ParameterInfo.Position%2A>.</span><span class="sxs-lookup"><span data-stu-id="66f57-283">Typical access to the name of the parameter is through <xref:System.Reflection.ParameterInfo.Position%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RawDefaultValue">
      <MemberSignature Language="C#" Value="public virtual object RawDefaultValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object RawDefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.RawDefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RawDefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ RawDefaultValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="66f57-284">Ruft einen Wert ab, der den Standardwert angibt, wenn der Parameter über einen Standardwert verfügt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-284">Gets a value indicating the default value if the parameter has a default value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="66f57-285">Der Standardwert des Parameters oder <see cref="F:System.DBNull.Value" />, wenn der Parameter keinen Standardwert hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-285">The default value of the parameter, or <see cref="F:System.DBNull.Value" /> if the parameter has no default value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-286">Diese Eigenschaft kann in den Ausführungskontext und den ReflectionOnly Kontext verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="66f57-286">This property can be used in both the execution context and the reflection-only context.</span></span>  
  
 <span data-ttu-id="66f57-287">Der Standardwert wird verwendet, wenn Sie ein tatsächlichen Wert im Aufruf Methode nicht angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="66f57-287">The default value is used when an actual value is not specified in the method call.</span></span> <span data-ttu-id="66f57-288">Ein Parameter kann einen Standardwert, der aufweisen `null`.</span><span class="sxs-lookup"><span data-stu-id="66f57-288">A parameter can have a default value that is `null`.</span></span> <span data-ttu-id="66f57-289">Dies unterscheidet sich von der Fall, in dem ein Standardwert nicht definiert ist.</span><span class="sxs-lookup"><span data-stu-id="66f57-289">This is distinct from the case where a default value is not defined.</span></span>  
  
 <span data-ttu-id="66f57-290">Zum Abrufen der <xref:System.Reflection.ParameterInfo> array zunächst die Methode oder der Konstruktor, und rufen Sie anschließend die <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="66f57-290">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call the <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">To be added.</param>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.IsDefined">
      <MemberSignature Language="C#" Value="bool ICustomAttributeProvider.IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Reflection.ICustomAttributeProvider.IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean Implements ICustomAttributeProvider.IsDefined" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Reflection.ICustomAttributeProvider.IsDefined(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::IsDefined;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">To be added.</param>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _ParameterInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _ParameterInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_ParameterInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="66f57-291">Für zukünftige Verwendung reserviert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-291">Reserved for future use.</span>
          </span>
          <span data-ttu-id="66f57-292">Muss IID_NULL sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-292">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="66f57-293">Das übergebene Array von zuzuordnenden Namen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-293">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="66f57-294">Die Anzahl der zuzuordnenden Namen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-294">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="66f57-295">Der Gebietsschemakontext, in dem die Namen interpretiert werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-295">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="66f57-296">Das vom Aufrufer zugewiesene Array, das die IDs entsprechend den Namen empfängt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-296">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="66f57-297">Ordnet eine Reihe von Namen einer entsprechenden Reihe von Dispatchbezeichnern zu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-297">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-298">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="66f57-298">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="66f57-299">Weitere Informationen zu `IDispatch::GetIDsOfNames`, finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="66f57-299">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="66f57-300">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-300">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._ParameterInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _ParameterInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _ParameterInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_ParameterInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="66f57-301">Die zurückzugebenden Typinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-301">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="66f57-302">Der Gebietsschemabezeichner für die Typinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-302">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="66f57-303">Empfängt einen Zeiger auf das angeforderte Objekt mit den Typinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-303">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="66f57-304">Ruft die Typinformationen für ein Objekt ab, die dann zum Abrufen der Typinformationen für eine Schnittstelle verwendet werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-304">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-305">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="66f57-305">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="66f57-306">Weitere Informationen zu `IDispatch::GetTypeInfo`, finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="66f57-306">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="66f57-307">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-307">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _ParameterInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _ParameterInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_ParameterInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="66f57-308">Zeigt auf einen Speicherort, der die Anzahl der Schnittstellen mit Typinformationen empfängt, die vom Objekt bereitgestellt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-308">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="66f57-309">Ruft die Anzahl der Schnittstellen mit Typinformationen ab, die von einem Objekt bereitgestellt werden (0 oder 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-309">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-310">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="66f57-310">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="66f57-311">Weitere Informationen zu `IDispatch::GetTypeInfoCount`, finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="66f57-311">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="66f57-312">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-312">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._ParameterInfo.Invoke">
      <MemberSignature Language="C#" Value="void _ParameterInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._ParameterInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _ParameterInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._ParameterInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_ParameterInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._ParameterInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="66f57-313">Bezeichnet den Member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-313">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="66f57-314">Für zukünftige Verwendung reserviert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-314">Reserved for future use.</span>
          </span>
          <span data-ttu-id="66f57-315">Muss IID_NULL sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-315">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="66f57-316">Der Gebietsschemakontext, in dem Argumente interpretiert werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-316">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="66f57-317">Flags, die den Kontext des Aufrufs beschreiben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-317">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="66f57-318">Ein Zeiger auf eine Struktur, die ein Array von Argumenten und ein Array von Argument-DISPIDs für benannte Argumente sowie Zähler für die Anzahl der Elemente in jedem Array enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-318">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="66f57-319">Ein Verweis auf den Speicherort, an dem das Ergebnis gespeichert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-319">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="66f57-320">Ein Zeiger auf eine Struktur mit Ausnahmeinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-320">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="66f57-321">Der Index des ersten Arguments mit einem Fehler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-321">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="66f57-322">Stellt den Zugriff auf von einem Objekt verfügbar gemachte Eigenschaften und Methoden bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-322">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66f57-323">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="66f57-323">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="66f57-324">Weitere Informationen zu `IDispatch::Invoke`, finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="66f57-324">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="66f57-325">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-325">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="66f57-326">Ruft den Parametertyp und den Namen als Zeichenfolgendarstellung ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-326">Gets the parameter type and name represented as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="66f57-327">Eine Zeichenfolge, die den Typ und den Namen des Parameters enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="66f57-327">A string containing the type and the name of the parameter.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
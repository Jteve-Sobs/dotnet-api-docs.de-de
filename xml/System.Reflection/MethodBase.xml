<Type Name="MethodBase" FullName="System.Reflection.MethodBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="23a44364925adaf0829ea5e88e965e5261874844" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69276138" /></Metadata><TypeSignature Language="C#" Value="public abstract class MethodBase : System.Reflection.MemberInfo, System.Runtime.InteropServices._MethodBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit MethodBase extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._MethodBase" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MethodBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MethodBase&#xA;Inherits MemberInfo&#xA;Implements _MethodBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodBase abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_MethodBase" />
  <TypeSignature Language="F#" Value="type MethodBase = class&#xA;    inherit MemberInfo&#xA;    interface _MethodBase" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._MethodBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MethodBase))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a6b2b-101">Stellt Informationen über Methoden und Konstruktoren zur Verfügung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-101">Provides information about methods and constructors.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-102">`MethodBase`ist die Basisklasse von <xref:System.Reflection.MethodInfo> und <xref:System.Reflection.ConstructorInfo>.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-102">`MethodBase` is the base class of <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo>.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="a6b2b-103">für vollständige Vertrauenswürdigkeit für Vererber.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-103">for full trust for inheritors.</span></span> <span data-ttu-id="a6b2b-104">Diese Klasse kann von teilweise vertrauenswürdigem Code nicht geerbt werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-104">This class cannot be inherited by partially trusted code.</span></span></permission>
    <threadsafe><span data-ttu-id="a6b2b-105">Dieser Typ ist threadsicher.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-105">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="a6b2b-106"><see langword="MethodBase" />Wenn Sie von erben, müssen Sie die folgenden Member überschreiben <see cref="M:System.Reflection.MethodBase.GetParameters" />: <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" />, <see cref="P:System.Reflection.MethodBase.MethodHandle" />, <see cref="P:System.Reflection.MethodBase.Attributes" />, <see cref="P:System.Reflection.MemberInfo.Name" />, <see cref="P:System.Reflection.MemberInfo.DeclaringType" />, <see cref="P:System.Reflection.MemberInfo.MemberType" />, <see cref="P:System.Reflection.MemberInfo.ReflectedType" />, <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> , , <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />und .<see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /></span><span class="sxs-lookup"><span data-stu-id="a6b2b-106">When you inherit from <see langword="MethodBase" />, you must override the following members: <see cref="M:System.Reflection.MethodBase.GetParameters" />, <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" />, <see cref="P:System.Reflection.MethodBase.MethodHandle" />, <see cref="P:System.Reflection.MethodBase.Attributes" />, <see cref="P:System.Reflection.MemberInfo.Name" />, <see cref="P:System.Reflection.MemberInfo.DeclaringType" />, <see cref="P:System.Reflection.MemberInfo.MemberType" />, <see cref="P:System.Reflection.MemberInfo.ReflectedType" />, <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />, <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />, and <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />.</span></span></para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6b2b-107">Initialisiert eine neue Instanz der <see cref="T:System.Reflection.MethodBase" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-107">Initializes a new instance of the <see cref="T:System.Reflection.MethodBase" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a6b2b-108">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-108">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a6b2b-109">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="a6b2b-109">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.MethodAttributes" Usage="System.Reflection.MethodBase.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-110">Ruft die Attribute ab, die dieser Methode zugeordnet sind.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-110">Gets the attributes associated with this method.</span></span></summary>
        <value><span data-ttu-id="a6b2b-111">Einer der <see cref="T:System.Reflection.MethodAttributes" />-Werte.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-111">One of the <see cref="T:System.Reflection.MethodAttributes" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-112">Alle Elemente verfügen über eine Reihe von Attributen, die in Bezug auf den jeweiligen Elementtyp definiert sind.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-112">All members have a set of attributes, which are defined in relation to the specific type of member.</span></span>  
  
 <span data-ttu-id="a6b2b-113">Um das <xref:System.Reflection.MethodAttributes>zu erhalten, erhalten Sie zuerst den-Typ.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-113">To get the <xref:System.Reflection.MethodAttributes>, first get the type.</span></span> <span data-ttu-id="a6b2b-114">Get the-Methode aus dem-Typ.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-114">From the type, get the method.</span></span> <span data-ttu-id="a6b2b-115">In der-Methode erhalten Sie <xref:System.Reflection.MethodAttributes>die.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-115">From the method, get the <xref:System.Reflection.MethodAttributes>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-116">Im folgenden Codebeispiel werden die Attribute der benutzerdefinierten Methode "MyMethod" angezeigt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-116">The following code example displays the attributes of the user-defined method Mymethod.</span></span>  
  
 [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]  
  
 <span data-ttu-id="a6b2b-117">Dieser Code erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a6b2b-117">This code produces the following output:</span></span>  
  
 <span data-ttu-id="a6b2b-118">Reflection. MethodBase. Attribute-Beispiel</span><span class="sxs-lookup"><span data-stu-id="a6b2b-118">Reflection.MethodBase.Attributes Sample</span></span>  
  
 <span data-ttu-id="a6b2b-119">Mymethodbase = void MyMethod (Int32, System. String ByRef, System. String ByRef)</span><span class="sxs-lookup"><span data-stu-id="a6b2b-119">Mymethodbase = Void Mymethod(Int32, System.String ByRef, System.String ByRef)</span></span>  
  
 <span data-ttu-id="a6b2b-120">PrivateScope</span><span class="sxs-lookup"><span data-stu-id="a6b2b-120">PrivateScope</span></span>  
  
 <span data-ttu-id="a6b2b-121">FamANDAssem</span><span class="sxs-lookup"><span data-stu-id="a6b2b-121">FamANDAssem</span></span>  
  
 <span data-ttu-id="a6b2b-122">Produktreihe</span><span class="sxs-lookup"><span data-stu-id="a6b2b-122">Family</span></span>  
  
 <span data-ttu-id="a6b2b-123">Public</span><span class="sxs-lookup"><span data-stu-id="a6b2b-123">Public</span></span>  
  
 <span data-ttu-id="a6b2b-124">HideBySig</span><span class="sxs-lookup"><span data-stu-id="a6b2b-124">HideBySig</span></span>  
  
 <span data-ttu-id="a6b2b-125">ReuseSlot</span><span class="sxs-lookup"><span data-stu-id="a6b2b-125">ReuseSlot</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a6b2b-126">Verwenden Sie <see cref="P:System.Reflection.MethodBase.Attributes" /> die-Eigenschaft, um zu bestimmen <see langword="public" />, ob eine <see langword="virtual" />Methode, <see langword="private" />, <see langword="final" />, usw. ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-126">Use the <see cref="P:System.Reflection.MethodBase.Attributes" /> property to determine whether a method is <see langword="public" />, <see langword="private" />, <see langword="final" />, <see langword="virtual" />, and so on.</span></span></para></block>
        <altmember cref="T:System.Reflection.MethodAttributes" />
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberSignature Language="F#" Value="member this.CallingConvention : System.Reflection.CallingConventions" Usage="System.Reflection.MethodBase.CallingConvention" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.CallingConvention</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-127">Ruft einen Wert ab, der die Aufrufkonventionen für diese Methode angibt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-127">Gets a value indicating the calling conventions for this method.</span></span></summary>
        <value><span data-ttu-id="a6b2b-128">Die <see cref="T:System.Reflection.CallingConventions" /> für diese Methode.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-128">The <see cref="T:System.Reflection.CallingConventions" /> for this method.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Reflection.CallingConventions" />
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public virtual bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Reflection.MethodBase.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-129">Ruft einen Wert ab, der angibt, ob die generische Methode nicht zugewiesene generische Typparameter enthält.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-129">Gets a value indicating whether the generic method contains unassigned generic type parameters.</span></span></summary>
        <value><span data-ttu-id="a6b2b-130"><see langword="true" />, wenn das aktuelle <see cref="T:System.Reflection.MethodBase" />-Objekt eine generische Methode darstellt, die nicht zugewiesene generische Typparameter enthält, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-130"><see langword="true" /> if the current <see cref="T:System.Reflection.MethodBase" /> object represents a generic method that contains unassigned generic type parameters; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-131">Eine generische Methode kann nur aufgerufen werden, wenn in den Typargumenten der Methode selbst oder in einem einschließenden Typ keine generischen Typdefinitionen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-131">A generic method can be invoked only if there are no generic type definitions or open constructed types in the type arguments of the method itself or in any enclosing types.</span></span> <span data-ttu-id="a6b2b-132">Da Typen beliebig komplex sein können, ist diese rekursive Bestimmung schwierig.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-132">Because types can be arbitrarily complex, making this recursive determination is difficult.</span></span> <span data-ttu-id="a6b2b-133">Um die Wahrscheinlichkeit von Fehlern zu verringern, stellt die <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> -Eigenschaft eine Standardmethode zur Unterscheidung zwischen geschlossenen konstruierten Methoden, die aufgerufen werden können, und geöffneten erstellten Methoden zur Verfügung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-133">For convenience, and to reduce the chance of error, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed methods, which can be invoked, and open constructed methods, which cannot.</span></span> <span data-ttu-id="a6b2b-134">Wenn die <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> -Eigenschaft `true`zurückgibt, kann die-Methode nicht aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-134">If the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`, the method cannot be invoked.</span></span>  
  
 <span data-ttu-id="a6b2b-135">Die <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> -Eigenschaft sucht rekursiv nach Typparametern.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-135">The <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property searches recursively for type parameters.</span></span> <span data-ttu-id="a6b2b-136">Beispielsweise wird für jede `true` Methode in einem geöffneten Typ `A<T>` (`A(Of T)` in Visual Basic) zurückgegeben, obwohl die Methode selbst nicht generisch ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-136">For example, it returns `true` for any method in an open type `A<T>` (`A(Of T)` in Visual Basic), even though the method itself is not generic.</span></span> <span data-ttu-id="a6b2b-137">Vergleichen Sie dies mit dem Verhalten <xref:System.Reflection.MethodBase.IsGenericMethod%2A> der-Eigenschaft, die für eine solche Methode zurückgibt. `false`</span><span class="sxs-lookup"><span data-stu-id="a6b2b-137">Contrast this with the behavior of the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property, which returns `false` for such a method.</span></span>  
  
 <span data-ttu-id="a6b2b-138">Entsprechend gibt der <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property-Parameter `true` für jeden Konstruktor in einem geöffneten Typ zurück, auch wenn Konstruktoren keine eigenen Typparameter aufweisen können.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-138">Similarly, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property parameter returns `true` for any constructor in an open type, even though constructors cannot have type parameters of their own.</span></span>  
  
 <span data-ttu-id="a6b2b-139">Eine Liste der invarianten Bedingungen für Begriffe, die spezifisch für generische Methoden sind, finden <xref:System.Reflection.MethodBase.IsGenericMethod%2A> Sie unter der-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-139">For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property.</span></span> <span data-ttu-id="a6b2b-140">Eine Liste der invarianten Bedingungen für andere Begriffe, die in der generischen Reflektion verwendet <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> werden, finden Sie unter der-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-140">For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethod" />
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
        <altmember cref="P:System.Reflection.MethodBase.ContainsGenericParameters" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="methodBase.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a6b2b-141">Ein Objekt, das mit dieser Instanz verglichen werden soll, oder <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-141">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="a6b2b-142">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-142">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-143"><see langword="true" />, wenn <paramref name="obj" /> dem Typ und dem Wert dieser Instanz entspricht, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-143"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentMethod">
      <MemberSignature Language="C#" Value="public static System.Reflection.MethodBase GetCurrentMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodBase GetCurrentMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetCurrentMethod" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentMethod () As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::MethodBase ^ GetCurrentMethod();" />
      <MemberSignature Language="F#" Value="static member GetCurrentMethod : unit -&gt; System.Reflection.MethodBase" Usage="System.Reflection.MethodBase.GetCurrentMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6b2b-144">Gibt ein <see langword="MethodBase" />-Objekt zurück, das die aktuell ausgeführte Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-144">Returns a <see langword="MethodBase" /> object representing the currently executing method.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-145"><see cref="M:System.Reflection.MethodBase.GetCurrentMethod" /> ist eine statische Methode, die aus einer ausgeführten Methode aufgerufen wird und Informationen zu dieser Methode zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-145"><see cref="M:System.Reflection.MethodBase.GetCurrentMethod" /> is a static method that is called from within an executing method and that returns information about that method.</span></span>  
  
<span data-ttu-id="a6b2b-146">Ein <see langword="MethodBase" />-Objekt, das die aktuell ausgeführte Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-146">A <see langword="MethodBase" /> object representing the currently executing method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-147">Wenn die aktuell ausgeführte Methode für einen generischen Typ definiert ist <xref:System.Reflection.MethodInfo> , wird die, <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> die von zurückgegeben wird, aus der generischen <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A?displayProperty=nameWithType> Typdefinition `true`abgerufen (d. h. gibt zurück).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-147">If the currently executing method is defined on a generic type, the <xref:System.Reflection.MethodInfo> that is returned by <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> is obtained from the generic type definition (that is, <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A?displayProperty=nameWithType> returns `true`).</span></span> <span data-ttu-id="a6b2b-148">Daher spiegelt Sie nicht die Typargumente wider, die beim Aufrufen der-Methode verwendet wurden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-148">Therefore, it does not reflect the type arguments that were used when the method was called.</span></span> <span data-ttu-id="a6b2b-149">Wenn z. b. eine `M()` Methode für einen generischen Typ `C<T>` (`C(Of T)` in Visual Basic <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> ) definiert ist <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> und von `C<string>.M()`aufgerufen wird, gibt `C<T>.M()` (`C(Of T).M()` in Visual Basic) zurück.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-149">For example, if a method `M()` is defined on a generic type `C<T>` (`C(Of T)` in Visual Basic), and <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> is called from `C<string>.M()`, then <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns `C<T>.M()` (`C(Of T).M()` in Visual Basic).</span></span>  
  
 <span data-ttu-id="a6b2b-150">Wenn die derzeit ausgeführte Methode eine generische Methode ist <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> , wird die generische Methoden Definition zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-150">If the currently executing method is a generic method, <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns the generic method definition.</span></span> <span data-ttu-id="a6b2b-151">Wenn die generische Methode für einen generischen Typ definiert ist, <xref:System.Reflection.MethodInfo> wird aus der generischen Typdefinition abgerufen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-151">If the generic method is defined on a generic type, the <xref:System.Reflection.MethodInfo> is obtained from the generic type definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-152">Im folgenden Beispiel werden zwei Typen definiert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-152">The following example defines two types.</span></span> <span data-ttu-id="a6b2b-153">Der erste ist eine nicht generische Klasse, `TestClass`, enthält einen Konstruktor, eine Methode mit dem Namen `GetValue`und eine Lese-/Schreibeigenschaft mit dem Namen `GetValue`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-153">The first is a non-generic class, `TestClass`, includes a constructor, a method named `GetValue`, and a read-write property named `GetValue`.</span></span> <span data-ttu-id="a6b2b-154">Die zweite ist eine generische Klasse mit `TestClass<T>` dem Namen, die einen Konstruktor `GetValue` , eine Methode `ConvertValue<Y>`und eine generische Methode () enthält.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-154">The second is a generic class named `TestClass<T>` that includes a constructor, a `GetValue` method, and a generic method, `ConvertValue<Y>`.</span></span> <span data-ttu-id="a6b2b-155">Jeder Konstruktor, jede Methode und jeder Eigenschafts Accessor enthält einen aufzurufenden <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> -Methode.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-155">Each constructor, method, and property accessor includes a call to the <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> method.</span></span>  
  
 [!code-csharp[System.Reflection.MethodBase.GetCurrentMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Reflection.MethodBase.GetCurrentMethod/cs/GetCurentMethod1.cs#1)]
 [!code-vb[System.Reflection.MethodBase.GetCurrentMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Reflection.MethodBase.GetCurrentMethod/vb/GetCurentMethod1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="a6b2b-156">Dieser Member wurde durch einen Mechanismus mit später Bindung aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-156">This member was invoked with a late-binding mechanism.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a6b2b-157">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-157">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a6b2b-158">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="a6b2b-158">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericArguments : unit -&gt; Type[]&#xA;override this.GetGenericArguments : unit -&gt; Type[]" Usage="methodBase.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6b2b-159">Gibt ein Array von <see cref="T:System.Type" />-Objekten zurück, die die Typargumente einer generischen Methode oder die Typparameter einer generischen Methodendefinition darstellen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-159">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-160">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typargumente einer generischen Methode oder die Typparameter einer generischen Methodendefinition darstellen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-160">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</span></span> <span data-ttu-id="a6b2b-161">Gibt ein leeres Array zurück, wenn die aktuelle Methode keine generische Methode ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-161">Returns an empty array if the current method is not a generic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-162">Die Elemente des zurückgegebenen Arrays werden in der Reihenfolge angezeigt, in der Sie in der Liste der Typparameter für die generische Methode angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-162">The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.</span></span>  
  
-   <span data-ttu-id="a6b2b-163">Wenn die aktuelle Methode eine geschlossene konstruierte Methode ist (d. h. <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> , die `false`-Eigenschaft gibt zurück), enthält <xref:System.Reflection.MethodBase.GetGenericArguments%2A> das von der-Methode zurückgegebene Array die Typen, die den generischen Typparametern der generischen Methode zugewiesen wurden. Definition.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-163">If the current method is a closed constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Reflection.MethodBase.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic method definition.</span></span>  
  
-   <span data-ttu-id="a6b2b-164">Wenn die aktuelle Methode eine generische Methoden Definition ist, enthält das Array die Typparameter.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-164">If the current method is a generic method definition, the array contains the type parameters.</span></span>  
  
-   <span data-ttu-id="a6b2b-165">Wenn die aktuelle Methode eine geöffnete konstruierte Methode ist (d. h. <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> die- `true`Eigenschaft gibt zurück), in der bestimmte Typen einem Typparameter zugewiesen wurden und Typparameter von umschließenden generischen Typen einem anderen Typ zugewiesen wurden. Parameter, das Array enthält sowohl Typen als auch Typparameter.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-165">If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters.</span></span> <span data-ttu-id="a6b2b-166">Verwenden Sie <xref:System.Type.IsGenericParameter%2A> die-Eigenschaft, um sie voneinander zu informieren.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-166">Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart.</span></span> <span data-ttu-id="a6b2b-167">Eine Demonstration dieses Szenarios finden Sie im Codebeispiel für die <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> -Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-167">For a demonstration of this scenario, see the code example provided for the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property.</span></span>  
  
 <span data-ttu-id="a6b2b-168">Generische Konstruktoren werden in .NET Framework, Version 2.0, nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-168">Generic constructors are not supported in the .NET Framework version 2.0.</span></span> <span data-ttu-id="a6b2b-169">Diese Eigenschaft <xref:System.NotSupportedException> löst eine Ausnahme aus, wenn Sie in einer abgeleiteten Klasse nicht überschrieben wird, sodass eine Ausnahme ausgelöst wird <xref:System.Reflection.ConstructorInfo>, wenn die aktuelle Instanz vom Typ ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-169">This property throws <xref:System.NotSupportedException> if not overridden in a derived class, so an exception is thrown if the current instance is of type <xref:System.Reflection.ConstructorInfo>.</span></span>  
  
 <span data-ttu-id="a6b2b-170">Eine Liste der invarianten Bedingungen für Begriffe, die spezifisch für generische Methoden sind, finden <xref:System.Reflection.MethodBase.IsGenericMethod%2A> Sie unter der-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-170">For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property.</span></span> <span data-ttu-id="a6b2b-171">Eine Liste der invarianten Bedingungen für andere Begriffe, die in der generischen Reflektion verwendet <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> werden, finden Sie unter der-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-171">For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="a6b2b-172">Das aktuelle Objekt ist eine <see cref="T:System.Reflection.ConstructorInfo" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-172">The current object is a <see cref="T:System.Reflection.ConstructorInfo" />.</span></span> <span data-ttu-id="a6b2b-173">Generische Konstruktoren werden in .NET Framework, Version 2.0, nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-173">Generic constructors are not supported in the .NET Framework version 2.0.</span></span> <span data-ttu-id="a6b2b-174">Diese Ausnahme ist das Standardverhalten, wenn diese Methode nicht in einer abgeleiteten Klasse überschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-174">This exception is the default behavior if this method is not overridden in a derived class.</span></span></exception>
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
        <altmember cref="M:System.Reflection.MethodInfo.GetGenericArguments" />
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethod" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="methodBase.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6b2b-175">Gibt den Hashcode für diese Instanz zurück.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-175">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-176">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-176">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodBody">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBody GetMethodBody ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBody GetMethodBody() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetMethodBody" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMethodBody () As MethodBody" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodBody ^ GetMethodBody();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodBody : unit -&gt; System.Reflection.MethodBody&#xA;override this.GetMethodBody : unit -&gt; System.Reflection.MethodBody" Usage="methodBase.GetMethodBody " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBody</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6b2b-177">Ruft beim Überschreiben in einer abgeleiteten Klasse ein <see cref="T:System.Reflection.MethodBody" />-Objekt ab, das den Zugriff auf den MSIL-Stream, auf lokale Variablen und auf Ausnahmen für die aktuelle Methode ermöglicht.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-177">When overridden in a derived class, gets a <see cref="T:System.Reflection.MethodBody" /> object that provides access to the MSIL stream, local variables, and exceptions for the current method.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-178">Ein <see cref="T:System.Reflection.MethodBody" />-Objekt, das den Zugriff auf den MSIL-Stream, auf lokale Variablen und auf Ausnahmen für die aktuelle Methode ermöglicht.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-178">A <see cref="T:System.Reflection.MethodBody" /> object that provides access to the MSIL stream, local variables, and exceptions for the current method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-179">Sie müssen das <xref:System.Reflection.MethodBase.GetMethodBody%2A> nicht außer Kraft setzen, um es verwenden zu können.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-179">You do not have to override the <xref:System.Reflection.MethodBase.GetMethodBody%2A> in order to use it.</span></span> <span data-ttu-id="a6b2b-180">Sie können die <xref:System.Reflection.MethodBase.GetMethodBody%2A> -Methode für <xref:System.Reflection.MethodInfo> - <xref:System.Reflection.ConstructorInfo> und-Objekte aufzurufen, da die-Methode in den Lauf Zeit Versionen dieser Klassen überschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-180">You can call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method on <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo> objects, because the method is overridden in the runtime versions of these classes.</span></span> <span data-ttu-id="a6b2b-181">Beispielsweise wird die Laufzeitversion <xref:System.Reflection.MethodInfo> der-Klasse von der <xref:System.Reflection.MethodInfo> -Klasse abgeleitet, die wiederum von der <xref:System.Reflection.MethodBase> -Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-181">For example, the runtime version of the <xref:System.Reflection.MethodInfo> class derives from the <xref:System.Reflection.MethodInfo> class, which in turn derives from the <xref:System.Reflection.MethodBase> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-182">Im folgenden Codebeispiel wird eine Testmethode mit `MethodBodyExample` dem Namen definiert, und die Informationen zu lokalen Variablen und die Ausnahmebehandlung werden angezeigt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-182">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="a6b2b-183">Die <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> -Methode wird verwendet, um <xref:System.Reflection.MethodBody> ein-Objekt für die Testmethode abzurufen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-183">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span>  
  
 <span data-ttu-id="a6b2b-184">Die <xref:System.Reflection.MethodBody.LocalVariables%2A> -Eigenschaft wird zum Abrufen einer Liste von <xref:System.Reflection.LocalVariableInfo> -Objekten und zum Anzeigen ihrer Typen und Index Reihenfolge verwendet.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-184">The <xref:System.Reflection.MethodBody.LocalVariables%2A> property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and display their types and index order.</span></span> <span data-ttu-id="a6b2b-185">Die <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> -Eigenschaft wird zum Abrufen einer Liste von Klauseln zur Ausnahmebehandlung verwendet.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-185">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a6b2b-186">Nicht alle Computersprachen können Klauseln <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> generieren.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-186">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="a6b2b-187">Das Visual Basic Beispiel zeigt eine Filter Klausel mithilfe eines Visual Basic `When` Ausdrucks, der in den Beispielen für andere Sprachen ausgelassen wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-187">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 [!code-cpp[MethodBody#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#1)]
 [!code-csharp[MethodBody#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#1)]
 [!code-vb[MethodBody#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a6b2b-188">Diese Methode ist nur gültig, wenn sie in einer abgeleiteten Klasse überschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-188">This method is invalid unless overridden in a derived class.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a6b2b-189">für den Zugriff auf Metadaten für Member.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-189">for the access to metadata for members.</span></span> <span data-ttu-id="a6b2b-190">Berechtigungs Wert:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="a6b2b-190">Permission value: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethodFromHandle">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a6b2b-191">Ruft Methodeninformationen mit dem angegebenen Handle ab.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-191">Gets method information using the specified handle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethodFromHandle">
      <MemberSignature Language="C#" Value="public static System.Reflection.MethodBase GetMethodFromHandle (RuntimeMethodHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodBase GetMethodFromHandle(valuetype System.RuntimeMethodHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMethodFromHandle (handle As RuntimeMethodHandle) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::MethodBase ^ GetMethodFromHandle(RuntimeMethodHandle handle);" />
      <MemberSignature Language="F#" Value="static member GetMethodFromHandle : RuntimeMethodHandle -&gt; System.Reflection.MethodBase" Usage="System.Reflection.MethodBase.GetMethodFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeMethodHandle" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="a6b2b-192">Das Handle der Methode.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-192">The method's handle.</span></span></param>
        <summary><span data-ttu-id="a6b2b-193">Ruft Methodeninformationen unter Verwendung der internen Metadatendarstellung (Handle) der Methode ab.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-193">Gets method information by using the method's internal metadata representation (handle).</span></span></summary>
        <returns><span data-ttu-id="a6b2b-194">Eine <see langword="MethodBase" /> mit Informationen über die Methode.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-194">A <see langword="MethodBase" /> containing information about the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-195">Handles sind nur in der Anwendungsdomäne gültig, in der Sie abgerufen wurden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-195">Handles are valid only in the application domain in which they were obtained.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a6b2b-196"><paramref name="handle" /> ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-196"><paramref name="handle" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a6b2b-197">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-197">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a6b2b-198">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="a6b2b-198">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodFromHandle">
      <MemberSignature Language="C#" Value="public static System.Reflection.MethodBase GetMethodFromHandle (RuntimeMethodHandle handle, RuntimeTypeHandle declaringType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodBase GetMethodFromHandle(valuetype System.RuntimeMethodHandle handle, valuetype System.RuntimeTypeHandle declaringType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMethodFromHandle (handle As RuntimeMethodHandle, declaringType As RuntimeTypeHandle) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::MethodBase ^ GetMethodFromHandle(RuntimeMethodHandle handle, RuntimeTypeHandle declaringType);" />
      <MemberSignature Language="F#" Value="static member GetMethodFromHandle : RuntimeMethodHandle * RuntimeTypeHandle -&gt; System.Reflection.MethodBase" Usage="System.Reflection.MethodBase.GetMethodFromHandle (handle, declaringType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeMethodHandle" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="declaringType" Type="System.RuntimeTypeHandle" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="a6b2b-199">Ein Handle für die interne Metadatendarstellung eines Konstruktors oder einer Methode.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-199">A handle to the internal metadata representation of a constructor or method.</span></span></param>
        <param name="declaringType"><span data-ttu-id="a6b2b-200">Ein Handle für den generischen Typ, der den Konstruktor oder die Methode definiert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-200">A handle to the generic type that defines the constructor or method.</span></span></param>
        <summary><span data-ttu-id="a6b2b-201">Ruft für den angegebenen generischen Typ ein <see cref="T:System.Reflection.MethodBase" />-Objekt für den Konstruktor oder die Methode ab, der bzw. die durch das angegebene Handle dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-201">Gets a <see cref="T:System.Reflection.MethodBase" /> object for the constructor or method represented by the specified handle, for the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-202">Ein <see cref="T:System.Reflection.MethodBase" />-Objekt, das die von <paramref name="handle" /> angegebene Methode oder den Konstruktor darstellt, in dem durch <paramref name="declaringType" /> angegebenen generischen Typ.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-202">A <see cref="T:System.Reflection.MethodBase" /> object representing the method or constructor specified by <paramref name="handle" />, in the generic type specified by <paramref name="declaringType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-203">Handles sind nur in der Anwendungsdomäne gültig, in der Sie abgerufen wurden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-203">Handles are valid only in the application domain in which they were obtained.</span></span>  
  
 <span data-ttu-id="a6b2b-204">Eine <xref:System.RuntimeMethodHandle> Struktur für einen Konstruktor oder eine Methode eines generischen Typs kann verschiedene <xref:System.Reflection.MethodBase> Objekte darstellen, abhängig von den Typen, die für die Typparameter des generischen Typs angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-204">A <xref:System.RuntimeMethodHandle> structure for a constructor or method of a generic type can represent different <xref:System.Reflection.MethodBase> objects, depending on the types specified for the type parameters of the generic type.</span></span> <span data-ttu-id="a6b2b-205">`class G<T>` Wenn `G<int>` ( C++ `T` <xref:System.Reflection.MethodBase> in Visual Basic `generic <T> ref class G` ) z. b. über eine-Methode verfügt, die den-Typ zurückgibt, unterscheidet sich das-Objekt für diese Methode in einer konstruierten Klasse, z. b. von der`class G(Of T)` <xref:System.Reflection.MethodBase> -Objekt für diese Methode in der generischen Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-205">For example, if `class G<T>` (`class G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) has a method that returns type `T`, the <xref:System.Reflection.MethodBase> object for that method in a constructed class such as `G<int>` is different from the <xref:System.Reflection.MethodBase> object for that method in the generic type definition.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a6b2b-206"><paramref name="handle" /> ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-206"><paramref name="handle" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a6b2b-207">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-207">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a6b2b-208">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="a6b2b-208">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImplementationFlags : unit -&gt; System.Reflection.MethodImplAttributes" Usage="methodBase.GetMethodImplementationFlags " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetMethodImplementationFlags</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6b2b-209">Erstellt beim Überschreiben in einer abgeleiteten Klasse die <see cref="T:System.Reflection.MethodImplAttributes" />-Flags.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-209">When overridden in a derived class, returns the <see cref="T:System.Reflection.MethodImplAttributes" /> flags.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-210">Die <see langword="MethodImplAttributes" />-Flags.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-210">The <see langword="MethodImplAttributes" /> flags.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a6b2b-211">Im folgenden Beispiel wird ein Konstruktor in einer dynamischen Assembly definiert, und anschließend <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> wird die-Methode verwendet, um die Methodenimplementierungsflags anzuzeigen, die standardmäßig festgelegt sind.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-211">The following example defines a constructor in a dynamic assembly and then uses the <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> method to display the method implementation flags that are set by default.</span></span>  
  
 [!code-cpp[ConstructorBuilder_GetModule_4#3](~/samples/snippets/cpp/VS_Snippets_CLR/ConstructorBuilder_GetModule_4/CPP/constructorbuilder_getmodule_4.cpp#3)]
 [!code-csharp[ConstructorBuilder_GetModule_4#3](~/samples/snippets/csharp/VS_Snippets_CLR/ConstructorBuilder_GetModule_4/CS/constructorbuilder_getmodule_4.cs#3)]
 [!code-vb[ConstructorBuilder_GetModule_4#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ConstructorBuilder_GetModule_4/VB/constructorbuilder_getmodule_4.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a6b2b-212">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-212">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a6b2b-213">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="a6b2b-213">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodImplAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="methodBase.GetParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6b2b-214">Ruft beim Überschreiben in einer abgeleiteten Klasse die Parameter der angegebenen Methode oder des angegebenen Konstruktors ab.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-214">When overridden in a derived class, gets the parameters of the specified method or constructor.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-215">Ein Array vom Typ <see langword="ParameterInfo" />, das Informationen enthält, die mit der Signatur der durch diese <see langword="MethodBase" />-Instanz reflektierten Methode (oder des Konstruktors) übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-215">An array of type <see langword="ParameterInfo" /> containing information that matches the signature of the method (or constructor) reflected by this <see langword="MethodBase" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a6b2b-216">Im folgenden Beispiel wird die <xref:System.Reflection.MethodBase.GetParameters%2A> -Methode verwendet, um die Parameter `Invoke` der-Methode eines Delegaten abzurufen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-216">The following example uses the <xref:System.Reflection.MethodBase.GetParameters%2A> method to retrieve the parameters of the `Invoke` method of a delegate.</span></span>  
  
 <span data-ttu-id="a6b2b-217">Im Beispiel wird ein Delegat `MyDelegate` mit dem Namen und `ev` ein Ereignis `MyDelegate`mit dem Namen vom Typ definiert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-217">The example defines a delegate named `MyDelegate` and an event named `ev` of type `MyDelegate`.</span></span> <span data-ttu-id="a6b2b-218">Der Code in der `Main` -Methode ermittelt die Ereignis Signatur durch Abrufen des Delegattyps des Ereignisses, Abrufen `Invoke` der-Methode des Delegattyps und anschließendes Abrufen und Anzeigen der Parameter.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-218">The code in the `Main` method discovers the event signature by getting the delegate type of the event, getting the `Invoke` method of the delegate type, and then retrieving and displaying the parameters.</span></span>  
  
 [!code-cpp[eventarg#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventArg/CPP/eventarg.cpp#1)]
 [!code-csharp[eventarg#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventArg/CS/eventarg.cs#1)]
 [!code-vb[eventarg#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventArg/VB/eventarg.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a6b2b-219">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-219">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a6b2b-220">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="a6b2b-220">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.ParameterInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="methodBase.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a6b2b-221">Ruft die Methode oder den Konstruktor auf, die bzw. der von dieser <see langword="MethodInfo" />-Instanz reflektiert wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-221">Invokes the method or constructor reflected by this <see langword="MethodInfo" /> instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (object obj, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(object obj, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (obj As Object, parameters As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Invoke(System::Object ^ obj, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : obj * obj[] -&gt; obj&#xA;override this.Invoke : obj * obj[] -&gt; obj" Usage="methodBase.Invoke (obj, parameters)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.Invoke(System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a6b2b-222">Das Objekt, für das Methode oder Konstruktor aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-222">The object on which to invoke the method or constructor.</span></span> <span data-ttu-id="a6b2b-223">Wenn eine Methode statisch ist, wird dieses Argument ignoriert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-223">If a method is static, this argument is ignored.</span></span> <span data-ttu-id="a6b2b-224">Wenn ein Konstruktor statisch ist, muss dieses Argument <see langword="null" /> oder eine Instanz der Klasse sein, die den Konstruktor definiert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-224">If a constructor is static, this argument must be <see langword="null" /> or an instance of the class that defines the constructor.</span></span></param>
        <param name="parameters"><span data-ttu-id="a6b2b-225">Eine Argumentliste für die aufgerufene Methode oder den Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-225">An argument list for the invoked method or constructor.</span></span> <span data-ttu-id="a6b2b-226">Diese ist ein Array von Objekten, die hinsichtlich Anzahl, Reihenfolge und Typ mit den Parametern der aufzurufenden Methode bzw. des aufzurufenden Konstruktors identisch sind.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-226">This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked.</span></span> <span data-ttu-id="a6b2b-227">Wenn keine Parameter vorhanden sind, sollte <paramref name="parameters" /> gleich <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-227">If there are no parameters, <paramref name="parameters" /> should be <see langword="null" />.</span></span>  
  
<span data-ttu-id="a6b2b-228">Wenn dieser Methode oder diesem Konstruktor gemäß Darstellung durch diese Instanz ein <see langword="ref" />-Parameter übergeben wird (<see langword="ByRef" /> in Visual Basic), ist kein besonderes Attribut für diesen Parameter erforderlich, um die Methode oder den Konstruktor mit dieser Funktion aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-228">If the method or constructor represented by this instance takes a <see langword="ref" /> parameter (<see langword="ByRef" /> in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function.</span></span> <span data-ttu-id="a6b2b-229">Jedes Objekt im Array, das nicht explizit mit einem Wert initialisiert wird, wird den Standardwert für diesen Objekttyp enthalten.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-229">Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.</span></span> <span data-ttu-id="a6b2b-230">Bei Verweistypelementen ist dieser Wert <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-230">For reference-type elements, this value is <see langword="null" />.</span></span> <span data-ttu-id="a6b2b-231">Bei Werttypelementen ist dieser Wert je nach Typ des jeweiligen Elements 0, 0.0 oder <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-231">For value-type elements, this value is 0, 0.0, or <see langword="false" />, depending on the specific element type.</span></span></param>
        <summary><span data-ttu-id="a6b2b-232">Ruft die Methode oder den Konstruktor, die/der durch die aktuelle Instanz dargestellt wird, mit den angegebenen Parametern auf.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-232">Invokes the method or constructor represented by the current instance, using the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-233">Ein Objekt, das den Rückgabewert der aufgerufenen Methode enthält, bzw. <see langword="null" /> im Falle eines Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-233">An object containing the return value of the invoked method, or <see langword="null" /> in the case of a constructor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-234">Dies ist eine bequeme Methode, die die <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> -Methoden Überladung <xref:System.Reflection.BindingFlags.Default> aufruft `invokeAttr` und `null` `binder` für und `culture`für und übergibt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-234">This is a convenience method that calls the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method overload, passing <xref:System.Reflection.BindingFlags.Default> for `invokeAttr` and `null` for `binder` and `culture`.</span></span>  
  
 <span data-ttu-id="a6b2b-235">Wenn die aufgerufene Methode eine Ausnahme auslöst, <xref:System.Exception.GetBaseException%2A?displayProperty=nameWithType> gibt die Methode die Ausnahme zurück.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-235">If the invoked method throws an exception, the <xref:System.Exception.GetBaseException%2A?displayProperty=nameWithType> method returns the exception.</span></span>  
  
 <span data-ttu-id="a6b2b-236">Um eine statische Methode mithilfe des <xref:System.Reflection.MethodInfo> -Objekts aufzurufen, übergeben `null` Sie für `obj`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-236">To invoke a static method using its <xref:System.Reflection.MethodInfo> object, pass `null` for `obj`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a6b2b-237">Wenn diese Methoden Überladung verwendet wird, um einen Instanzkonstruktor aufzurufen, `obj` wird das für angegebene Objekt erneut initialisiert, d. h., alle instanzinitialisierer werden ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-237">If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed.</span></span> <span data-ttu-id="a6b2b-238">Der Rückgabewert ist `null`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-238">The return value is `null`.</span></span> <span data-ttu-id="a6b2b-239">Wenn ein Klassenkonstruktor aufgerufen wird, wird die Klasse erneut initialisiert. Das heißt, dass alle Klasseninitialisierer ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-239">If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed.</span></span> <span data-ttu-id="a6b2b-240">Der Rückgabewert ist `null`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-240">The return value is `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a6b2b-241">Ab kann diese Methode verwendet werden, um auf nicht öffentliche Member zuzugreifen, wenn der Aufrufer mit dem <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> -Flag erteilt wurde, und wenn der Berechtigungs Satz der nicht öffentlichen Member auf den Berechtigungs Satz des Aufrufers oder eine Teilmenge beschränkt ist. [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] Auslegung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-241">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="a6b2b-242">(Siehe [Sicherheitsüberlegungen für die Reflektion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="a6b2b-242">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="a6b2b-243">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-243">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="a6b2b-244">Wenn ein Parameter der aktuellen Methode ein Werttyp ist und das entsprechende Argument in `parameters` ist `null`, übergibt die Laufzeit eine NULL initialisierte Instanz des Werttyps.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-244">If a parameter of the current method is a value type, and the corresponding argument in `parameters` is `null`, the runtime passes a zero-initialized instance of the value type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-245">Im folgenden Codebeispiel wird die dynamische Methoden Suche mithilfe von Reflektion veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-245">The following code example demonstrates dynamic method lookup using reflection.</span></span> <span data-ttu-id="a6b2b-246">Beachten Sie, dass Sie das <xref:System.Reflection.MethodInfo> Objekt aus der Basisklasse nicht verwenden können, um die überschriebene Methode in der abgeleiteten Klasse aufzurufen, da die späte Bindung keine außer Kraft setzungen auflösen kann.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-246">Note that you cannot use the <xref:System.Reflection.MethodInfo> object from the base class to invoke the overridden method in the derived class, because late binding cannot resolve overrides.</span></span>  
  
 [!code-cpp[Classic MethodBase.Invoke1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Invoke1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Invoke1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Invoke1 Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Invoke1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Invoke1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a6b2b-247">Fangen Sie in <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET für Windows Store-Apps</see> oder der <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">portablen Klassenbibliothek</see> stattdessen <see cref="T:System.Exception" /> ab.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-247">In the<see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a6b2b-248">Der <paramref name="obj" />-Parameter ist <see langword="null" />, und die Methode ist nicht statisch.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-248">The <paramref name="obj" /> parameter is <see langword="null" /> and the method is not static.</span></span>  
  
<span data-ttu-id="a6b2b-249">- oder -</span><span class="sxs-lookup"><span data-stu-id="a6b2b-249">-or-</span></span> 
<span data-ttu-id="a6b2b-250">Die Methode ist nicht deklariert oder von der Klasse von <paramref name="obj" /> geerbt worden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-250">The method is not declared or inherited by the class of <paramref name="obj" />.</span></span>  
  
<span data-ttu-id="a6b2b-251">- oder -</span><span class="sxs-lookup"><span data-stu-id="a6b2b-251">-or-</span></span> 
<span data-ttu-id="a6b2b-252">Ein statischer Konstruktor wird aufgerufen, und <paramref name="obj" /> ist weder <see langword="null" /> noch eine Instanz der Klasse, die den Konstruktor deklariert hat.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-252">A static constructor is invoked, and <paramref name="obj" /> is neither <see langword="null" /> nor an instance of the class that declared the constructor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a6b2b-253">Die Elemente des <paramref name="parameters" />-Arrays stimmen nicht mit der Signatur der Methode oder des Konstruktors überein, die bzw. der von dieser Instanz reflektiert wurde.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-253">The elements of the <paramref name="parameters" /> array do not match the signature of the method or constructor reflected by this instance.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="a6b2b-254">Die aufgerufene Methode bzw. der aufgerufene Konstruktor löst eine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-254">The invoked method or constructor throws an exception.</span></span>  
  
<span data-ttu-id="a6b2b-255">- oder -</span><span class="sxs-lookup"><span data-stu-id="a6b2b-255">-or-</span></span> 
<span data-ttu-id="a6b2b-256">Die aktuelle Instanz ist eine <see cref="T:System.Reflection.Emit.DynamicMethod" />, die nicht überprüfbaren Code enthält.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-256">The current instance is a <see cref="T:System.Reflection.Emit.DynamicMethod" /> that contains unverifiable code.</span></span> <span data-ttu-id="a6b2b-257">Weitere Informationen finden Sie im Abschnitt „Überprüfung“ für <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-257">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="a6b2b-258">Das <paramref name="parameters" />-Array weist nicht die richtige Anzahl von Argumenten auf.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-258">The <paramref name="parameters" /> array does not have the correct number of arguments.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a6b2b-259">Fangen Sie in <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET für Windows Store-Apps</see> oder der <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">portablen Klassenbibliothek</see> stattdessen die Basisklassenausnahme <see cref="T:System.MemberAccessException" /> ab.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-259">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a6b2b-260">Der Aufrufer verfügt nicht über die Berechtigung zum Ausführen der Methode oder des Konstruktors, die/der von der aktuellen Instanz dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-260">The caller does not have permission to execute the method or constructor that is represented by the current instance.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a6b2b-261">Der Typ, der die Methode deklariert, ist ein offener generischer Typ.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-261">The type that declares the method is an open generic type.</span></span> <span data-ttu-id="a6b2b-262">D.h., die <see cref="P:System.Type.ContainsGenericParameters" />-Eigenschaft gibt <see langword="true" /> für den deklarierenden Typ zurück.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-262">That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" /> for the declaring type.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="a6b2b-263">Die aktuelle Instanz ist ein <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-263">The current instance is a <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a6b2b-264">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-264">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a6b2b-265">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="a6b2b-265">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Missing" />
        <altmember cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public abstract object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="methodBase.Invoke (obj, invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="parameters" Type="System.Object[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a6b2b-266">Das Objekt, für das Methode oder Konstruktor aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-266">The object on which to invoke the method or constructor.</span></span> <span data-ttu-id="a6b2b-267">Wenn eine Methode statisch ist, wird dieses Argument ignoriert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-267">If a method is static, this argument is ignored.</span></span> <span data-ttu-id="a6b2b-268">Wenn ein Konstruktor statisch ist, muss dieses Argument <see langword="null" /> oder eine Instanz der Klasse sein, die den Konstruktor definiert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-268">If a constructor is static, this argument must be <see langword="null" /> or an instance of the class that defines the constructor.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="a6b2b-269">Eine Bitmaske, die eine Kombination von 0 oder mehr Bitflags von <see cref="T:System.Reflection.BindingFlags" /> ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-269">A bitmask that is a combination of 0 or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span></span> <span data-ttu-id="a6b2b-270">Wenn <paramref name="binder" /><see langword="null" /> ist, wird diesem Parameter der Wert <see cref="F:System.Reflection.BindingFlags.Default" /> zugewiesen. Daher werden alle übergebenen Werte ignoriert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-270">If <paramref name="binder" /> is <see langword="null" />, this parameter is assigned the value <see cref="F:System.Reflection.BindingFlags.Default" />; thus, whatever you pass in is ignored.</span></span></param>
        <param name="binder"><span data-ttu-id="a6b2b-271">Ein Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von <see langword="MemberInfo" />-Objekten über Reflektion ermöglicht.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-271">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection.</span></span> <span data-ttu-id="a6b2b-272">Wenn <paramref name="binder" /> den Wert <see langword="null" /> aufweist, wird der Standardbinder verwendet.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-272">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="parameters"><span data-ttu-id="a6b2b-273">Eine Argumentliste für die aufgerufene Methode oder den Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-273">An argument list for the invoked method or constructor.</span></span> <span data-ttu-id="a6b2b-274">Diese ist ein Array von Objekten, die hinsichtlich Anzahl, Reihenfolge und Typ mit den Parametern der aufzurufenden Methode bzw. des aufzurufenden Konstruktors identisch sind.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-274">This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked.</span></span> <span data-ttu-id="a6b2b-275">Wenn keine Parameter vorhanden sind, sollte der Wert <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-275">If there are no parameters, this should be <see langword="null" />.</span></span>  
  
<span data-ttu-id="a6b2b-276">Wenn die Methode oder der Konstruktor, der bzw. die von dieser Instanz dargestellt wird, einen ByRef-Parameter akzeptiert, ist für diesen Parameter kein besonderes Attribut erforderlich, um die Methode oder den Konstruktor mit dieser Funktion aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-276">If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function.</span></span> <span data-ttu-id="a6b2b-277">Jedes Objekt im Array, das nicht explizit mit einem Wert initialisiert wird, wird den Standardwert für diesen Objekttyp enthalten.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-277">Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.</span></span> <span data-ttu-id="a6b2b-278">Bei Verweistypelementen ist dieser Wert <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-278">For reference-type elements, this value is <see langword="null" />.</span></span> <span data-ttu-id="a6b2b-279">Bei Werttypelementen ist dieser Wert je nach Typ des jeweiligen Elements 0, 0.0 oder <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-279">For value-type elements, this value is 0, 0.0, or <see langword="false" />, depending on the specific element type.</span></span></param>
        <param name="culture"><span data-ttu-id="a6b2b-280">Eine Instanz von <see langword="CultureInfo" /> für die Steuerung der Umwandlung von Typen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-280">An instance of <see langword="CultureInfo" /> used to govern the coercion of types.</span></span> <span data-ttu-id="a6b2b-281">Wenn dies <see langword="null" /> ist, wird die <see langword="CultureInfo" /> des aktuellen Threads verwendet.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-281">If this is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used.</span></span> <span data-ttu-id="a6b2b-282">(Dies ist z. B. erforderlich, um einen <see langword="String" />, der 1000 darstellt, in einen <see langword="Double" />-Wert zu konvertieren, da 1000 in verschiedenen Kulturen unterschiedlich dargestellt wird.)</span><span class="sxs-lookup"><span data-stu-id="a6b2b-282">(This is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, for example, since 1000 is represented differently by different cultures.)</span></span></param>
        <summary><span data-ttu-id="a6b2b-283">Ruft beim Überschreiben in einer abgeleiteten Klasse die reflektierte Methode oder den reflektierten Konstruktor mit den angegebenen Parametern auf.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-283">When overridden in a derived class, invokes the reflected method or constructor with the given parameters.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-284">Ein <see langword="Object" />, das den Rückgabewert der aufgerufenen Methode enthält, oder <see langword="null" />, wenn es sich um einen Konstruktor handelt, oder <see langword="null" />, wenn der Rückgabetyp der Methode <see langword="void" /> ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-284">An <see langword="Object" /> containing the return value of the invoked method, or <see langword="null" /> in the case of a constructor, or <see langword="null" /> if the method's return type is <see langword="void" />.</span></span> <span data-ttu-id="a6b2b-285">Vor dem Aufrufen der Methode oder des Konstruktors wird mit <see langword="Invoke" /> sichergestellt, dass der Benutzer über die Zugriffsberechtigung verfügt, und die Gültigkeit der Parameter wird überprüft.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-285">Before calling the method or constructor, <see langword="Invoke" /> checks to see if the user has access permission and verifies that the parameters are valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-286">Ruft dynamisch die Methode auf, die von dieser `obj`Instanz in reflektiert wird, und übergibt die angegebenen Parameter.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-286">Dynamically invokes the method reflected by this instance on `obj`, and passes along the specified parameters.</span></span> <span data-ttu-id="a6b2b-287">Wenn die Methode statisch ist, wird `obj` der-Parameter ignoriert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-287">If the method is static, the `obj` parameter is ignored.</span></span> <span data-ttu-id="a6b2b-288">Bei nicht statischen Methoden `obj` sollte eine Instanz einer Klasse sein, die die-Methode erbt oder deklariert und denselben Typ wie diese Klasse aufweisen muss.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-288">For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class.</span></span> <span data-ttu-id="a6b2b-289">Wenn die Methode keine Parameter hat, sollte der Wert `parameters` von sein `null`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-289">If the method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="a6b2b-290">Andernfalls sollten die Anzahl, der Typ und die Reihenfolge der `parameters` Elemente in mit der Anzahl, dem Typ und der Reihenfolge der Parameter für die von dieser Instanz reflektierte Methode identisch sein.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-290">Otherwise, the number, type, and order of elements in `parameters` should be identical to the number, type, and order of parameters for the method reflected by this instance.</span></span>  
  
 <span data-ttu-id="a6b2b-291">Sie dürfen in Aufrufen von `Invoke`keine optionalen Parameter weglassen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-291">You may not omit optional parameters in calls to `Invoke`.</span></span> <span data-ttu-id="a6b2b-292">Um eine Methode aufzurufen, bei der optionale Parameter weggelassen werden `Type.InvokeMember` , sollten Sie stattdessen aufrufen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-292">To invoke a method omitting optional parameters, you should call `Type.InvokeMember` instead.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a6b2b-293">Wenn diese Methoden Überladung verwendet wird, um einen Instanzkonstruktor aufzurufen, `obj` wird das für angegebene Objekt erneut initialisiert, d. h., alle instanzinitialisierer werden ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-293">If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed.</span></span> <span data-ttu-id="a6b2b-294">Der Rückgabewert ist `null`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-294">The return value is `null`.</span></span> <span data-ttu-id="a6b2b-295">Wenn ein Klassenkonstruktor aufgerufen wird, wird die Klasse erneut initialisiert. Das heißt, dass alle Klasseninitialisierer ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-295">If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed.</span></span> <span data-ttu-id="a6b2b-296">Der Rückgabewert ist `null`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-296">The return value is `null`.</span></span>  
  
 <span data-ttu-id="a6b2b-297">Für primitive Parameter, die als Wert übergeben werden, erfolgt eine normale Erweiterung (z. b. Int16-> Int32).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-297">For pass-by-value primitive parameters, normal widening is performed (Int16 -> Int32, for example).</span></span> <span data-ttu-id="a6b2b-298">Bei Pass-by-Value-Verweis Parametern ist die normale Verweis Vergrößerung zulässig (von der abgeleiteten Klasse zur Basisklasse und von der Basisklasse bis zum Schnittstellentyp).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-298">For pass-by-value reference parameters, normal reference widening is allowed (derived class to base class, and base class to interface type).</span></span> <span data-ttu-id="a6b2b-299">Allerdings müssen die Typen für Grundparameter, die als Verweis übergeben werden, exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-299">However, for pass-by-reference primitive parameters, the types must match exactly.</span></span> <span data-ttu-id="a6b2b-300">Für Verweis Parameter, die als Verweis übergeben werden, gilt die normale Erweiterung weiterhin.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-300">For pass-by-reference reference parameters, the normal widening still applies.</span></span>  
  
 <span data-ttu-id="a6b2b-301">Wenn die von dieser Instanz reflektierte Methode z. b. als `public boolean Compare(String a, String b)`deklariert wird `parameters` , sollte ein Array von `Objects` mit der Länge 2 sein `parameters[0] = new Object("SomeString1") and parameters[1] = new Object("SomeString2")`, damit.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-301">For example, if the method reflected by this instance is declared as `public boolean Compare(String a, String b)`, then `parameters` should be an array of `Objects` with length 2 such that `parameters[0] = new Object("SomeString1") and parameters[1] = new Object("SomeString2")`.</span></span>  
  
 <span data-ttu-id="a6b2b-302">Wenn ein Parameter der aktuellen Methode ein Werttyp ist und das entsprechende Argument in `parameters` ist `null`, übergibt die Laufzeit eine NULL initialisierte Instanz des Werttyps.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-302">If a parameter of the current method is a value type, and the corresponding argument in `parameters` is `null`, the runtime passes a zero-initialized instance of the value type.</span></span>  
  
 <span data-ttu-id="a6b2b-303">Reflektion verwendet beim Aufrufen virtueller Methoden die dynamische Methoden Suche.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-303">Reflection uses dynamic method lookup when invoking virtual methods.</span></span> <span data-ttu-id="a6b2b-304">Nehmen Sie beispielsweise an, dass Klasse B von Class a erbt und beide eine virtuelle Methode mit dem Namen M implementieren. Nehmen Sie nun an, dass `MethodInfo` Sie über ein-Objekt verfügen, das M für Klasse a darstellt. Wenn Sie die `Invoke` -Methode verwenden, um M für ein Objekt vom Typ B aufzurufen, verwendet die Reflektion die Implementierung, die von Klasse b angegeben wird. Auch wenn das Objekt vom Typ b in ein umgewandelt wird, wird die von Klasse b angegebene Implementierung verwendet (siehe Codebeispiel unten).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-304">For example, suppose that class B inherits from class A and both implement a virtual method named M. Now suppose that you have a `MethodInfo` object that represents M on class A. If you use the `Invoke` method to invoke M on an object of type B, then reflection will use the implementation given by class B. Even if the object of type B is cast to A, the implementation given by class B is used (see code sample below).</span></span>  
  
 <span data-ttu-id="a6b2b-305">Wenn die Methode hingegen nicht virtuell ist, verwendet die Reflektion die Implementierung, die vom Typ angegeben wird, von dem der `MethodInfo` abgerufen wurde, unabhängig vom Typ des Objekts, das als Ziel übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-305">On the other hand, if the method is non-virtual, then reflection will use the implementation given by the type from which the `MethodInfo` was obtained, regardless of the type of the object passed as the target.</span></span>  
  
 <span data-ttu-id="a6b2b-306">Zugriffs Einschränkungen werden bei voll vertrauenswürdigem Code ignoriert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-306">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="a6b2b-307">Das heißt, dass auf Private Konstruktoren, Methoden, Felder und Eigenschaften zugegriffen werden kann und die über Reflektion aufgerufen werden, wenn der Code vollständig vertrauenswürdig ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-307">That is, private constructors, methods, fields, and properties can be accessed and invoked via reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="a6b2b-308">Wenn die aufgerufene Methode eine Ausnahme auslöst `TargetInvocationException.GetException` , wird die Ausnahme zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-308">If the invoked method throws an exception, `TargetInvocationException.GetException` returns the exception.</span></span> <span data-ttu-id="a6b2b-309">Diese Implementierung löst eine `NotSupportedException`aus.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-309">This implementation throws a `NotSupportedException`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a6b2b-310">Ab kann diese Methode verwendet werden, um auf nicht öffentliche Member zuzugreifen, wenn der Aufrufer mit dem <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> -Flag erteilt wurde, und wenn der Berechtigungs Satz der nicht öffentlichen Member auf den Berechtigungs Satz des Aufrufers oder eine Teilmenge beschränkt ist. [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] Auslegung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-310">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="a6b2b-311">(Siehe [Sicherheitsüberlegungen für die Reflektion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="a6b2b-311">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="a6b2b-312">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-312">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-313">Im folgenden Beispiel werden alle Member der <xref:System.Reflection.Binder?displayProperty=nameWithType> -Klasse mithilfe einer Überladung von <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-313">The following example demonstrates all members of the <xref:System.Reflection.Binder?displayProperty=nameWithType> class using an overload of <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a6b2b-314">Die private- `CanConvertFrom` Methode findet kompatible Typen für einen bestimmten Typ.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-314">The private method `CanConvertFrom` finds compatible types for a given type.</span></span> <span data-ttu-id="a6b2b-315">Ein weiteres Beispiel zum Aufrufen von Membern in einem benutzerdefinierten Bindungs Szenario finden Sie unter [dynamisches Laden und Verwenden von Typen](~/docs/framework/reflection-and-codedom/dynamically-loading-and-using-types.md).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-315">For another example of invoking members in a custom binding scenario, see [Dynamically Loading and Using Types](~/docs/framework/reflection-and-codedom/dynamically-loading-and-using-types.md).</span></span>  
  
 [!code-cpp[Binder_1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Binder_1/CPP/binder.cpp#1)]
 [!code-csharp[Binder_1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Binder_1/CS/binder.cs#1)]
 [!code-vb[Binder_1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Binder_1/VB/binder.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="a6b2b-316">Der <paramref name="obj" />-Parameter ist <see langword="null" />, und die Methode ist nicht statisch.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-316">The <paramref name="obj" /> parameter is <see langword="null" /> and the method is not static.</span></span>  
  
<span data-ttu-id="a6b2b-317">- oder -</span><span class="sxs-lookup"><span data-stu-id="a6b2b-317">-or-</span></span> 
<span data-ttu-id="a6b2b-318">Die Methode ist nicht deklariert oder von der Klasse von <paramref name="obj" /> geerbt worden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-318">The method is not declared or inherited by the class of <paramref name="obj" />.</span></span>  
  
<span data-ttu-id="a6b2b-319">- oder -</span><span class="sxs-lookup"><span data-stu-id="a6b2b-319">-or-</span></span> 
<span data-ttu-id="a6b2b-320">Ein statischer Konstruktor wird aufgerufen, und <paramref name="obj" /> ist weder <see langword="null" /> noch eine Instanz der Klasse, die den Konstruktor deklariert hat.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-320">A static constructor is invoked, and <paramref name="obj" /> is neither <see langword="null" /> nor an instance of the class that declared the constructor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a6b2b-321">Der Typ des <paramref name="parameters" />-Parameters stimmt nicht mit der Signatur der Methode oder des Konstruktors überein, die bzw. der von dieser Instanz reflektiert wurde.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-321">The type of the <paramref name="parameters" /> parameter does not match the signature of the method or constructor reflected by this instance.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="a6b2b-322">Das <paramref name="parameters" />-Array weist nicht die richtige Anzahl von Argumenten auf.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-322">The <paramref name="parameters" /> array does not have the correct number of arguments.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="a6b2b-323">Die aufgerufene Methode bzw. der aufgerufene Konstruktor löst eine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-323">The invoked method or constructor throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="a6b2b-324">Der Aufrufer verfügt nicht über die Berechtigung zum Ausführen der Methode oder des Konstruktors, die/der von der aktuellen Instanz dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-324">The caller does not have permission to execute the method or constructor that is represented by the current instance.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a6b2b-325">Der Typ, der die Methode deklariert, ist ein offener generischer Typ.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-325">The type that declares the method is an open generic type.</span></span> <span data-ttu-id="a6b2b-326">D.h., die <see cref="P:System.Type.ContainsGenericParameters" />-Eigenschaft gibt <see langword="true" /> für den deklarierenden Typ zurück.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-326">That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" /> for the declaring type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a6b2b-327">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-327">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a6b2b-328">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="a6b2b-328">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/dynamically-loading-and-using-types.md"><span data-ttu-id="a6b2b-329">Dynamisches Laden und Verwenden von Typen</span><span class="sxs-lookup"><span data-stu-id="a6b2b-329">Dynamically Loading and Using Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Reflection.MethodBase.IsAbstract" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-330">Ruft einen Wert ab, der angibt, ob es sich um eine abstrakte Methode handelt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-330">Gets a value indicating whether the method is abstract.</span></span></summary>
        <value><span data-ttu-id="a6b2b-331"><see langword="true" />, wenn die Methode abstrakt ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-331"><see langword="true" /> if the method is abstract; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-332">Ein abstrakter Member ist für eine Basisklasse deklariert, und es wurde keine Implementierung bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-332">An abstract member is declared on a base class and has no implementation supplied.</span></span>  
  
 <span data-ttu-id="a6b2b-333">Um das <xref:System.Reflection.MethodBase>zu erhalten, erhalten Sie zuerst den-Typ.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-333">To get the <xref:System.Reflection.MethodBase>, first get the type.</span></span> <span data-ttu-id="a6b2b-334">Get the-Methode aus dem-Typ.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-334">From the type, get the method.</span></span> <span data-ttu-id="a6b2b-335">In der-Methode erhalten Sie `MethodBase`die.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-335">From the method, get the `MethodBase`.</span></span> <span data-ttu-id="a6b2b-336">Wenn der `MethodBase` -Konstruktor oder der-Konstruktor nicht öffentlich ist, wird er geschützt, und der Zugriff darauf ist nicht möglich.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-336">If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed.</span></span> <span data-ttu-id="a6b2b-337">Wenn Sie auf eine nicht öffentliche Methode zugreifen möchten, <xref:System.Reflection.BindingFlags> legen Sie `NonPublic` die `GetMethod`Maske in fest.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-337">To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-338">Im folgenden Beispiel wird bestimmt, ob die angegebene Methode abstrakt ist und das Ergebnis anzeigt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-338">The following example determines whether specified the method is abstract and displays the result.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsAbstract Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAbstract Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsAbstract Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAbstract Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsAbstract Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAbstract Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Reflection.BindingFlags" />
      </Docs>
    </Member>
    <Member MemberName="IsAssembly">
      <MemberSignature Language="C#" Value="public bool IsAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAssembly : bool" Usage="System.Reflection.MethodBase.IsAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-339">Ruft einen Wert ab, der angibt, ob die potenzielle Sichtbarkeit dieser Methode bzw. dieses Konstruktors von <see cref="F:System.Reflection.MethodAttributes.Assembly" /> beschrieben wird, d. h., die Methode oder der Konstruktor ist höchstens für andere Typen in derselben Assembly sichtbar, nicht jedoch für abgeleitete Typen außerhalb der Assembly.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-339">Gets a value indicating whether the potential visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.Assembly" />; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</span></span></summary>
        <value><span data-ttu-id="a6b2b-340"><see langword="true" />, wenn die Sichtbarkeit dieser Methode oder dieses Konstruktors von <see cref="F:System.Reflection.MethodAttributes.Assembly" /> genau beschrieben wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-340"><see langword="true" /> if the visibility of this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.Assembly" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-341">Die tatsächliche Sichtbarkeit einer Methode wird durch die Sichtbarkeit des Typs eingeschränkt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-341">The actual visibility of a method is limited by the visibility of its type.</span></span> <span data-ttu-id="a6b2b-342">Die <xref:System.Reflection.MethodBase.IsAssembly%2A> -Eigenschaft kann `true` für eine Methode sein, aber wenn es sich um eine Methode eines privaten, nicht untergeordneten Typs handelt, ist die Methode außerhalb des enthaltenden Typs nicht sichtbar.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-342">The <xref:System.Reflection.MethodBase.IsAssembly%2A> property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.</span></span>  
  
 <span data-ttu-id="a6b2b-343">Die Sichtbarkeit einer Methode oder eines Konstruktors wird von <xref:System.Reflection.MethodAttributes.Assembly?displayProperty=nameWithType> genau beschrieben, wenn der einzige Sichtbarkeitsmodifizierer (`Friend` in Visual Basic) ist `internal` .</span><span class="sxs-lookup"><span data-stu-id="a6b2b-343">The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes.Assembly?displayProperty=nameWithType> if the only visibility modifier is `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="a6b2b-344">Diese Eigenschaft ist `false` für Methoden`Protected Friend` <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>in( in C++Visual Basic). verwenden Sie die-Eigenschaft, um solche Methoden zu identifizieren. `protected public` C# `protected internal`</span><span class="sxs-lookup"><span data-stu-id="a6b2b-344">This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-345">Im folgenden Codebeispiel werden Methoden mit unterschiedlichen Sichtbarkeits Ebenen definiert, und die Werte der <xref:System.Reflection.MethodBase.IsAssembly%2A>Eigenschaften <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, und <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> werden angezeigt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-345">The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a6b2b-346">Die Visual Basic und C# Sprachen können keine Methoden mit <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> Sichtbarkeit definieren; diese Zugriffsebene wird nur C++ im Beispiel angezeigt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-346">The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodAttributes" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamily" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" />
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericMethod">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructedGenericMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsConstructedGenericMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructedGenericMethod As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericMethod { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericMethod : bool" Usage="System.Reflection.MethodBase.IsConstructedGenericMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructor">
      <MemberSignature Language="C#" Value="public bool IsConstructor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructor" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsConstructor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConstructor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConstructor { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructor : bool" Usage="System.Reflection.MethodBase.IsConstructor" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsConstructor</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-347">Ruft einen Wert ab, der angibt, ob die Methode ein Konstruktor ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-347">Gets a value indicating whether the method is a constructor.</span></span></summary>
        <value><span data-ttu-id="a6b2b-348"><see langword="true" />, wenn diese Methode ein von einem <see cref="T:System.Reflection.ConstructorInfo" />-Objekt dargestellter Konstruktor ist (weitere Informationen finden Sie in den Hinweisen zu <see cref="T:System.Reflection.Emit.ConstructorBuilder" />-Objekten), andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-348"><see langword="true" /> if this method is a constructor represented by a <see cref="T:System.Reflection.ConstructorInfo" /> object (see note in Remarks about <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> objects); otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a6b2b-349">Die <xref:System.Reflection.MethodBase.IsConstructor%2A> -Eigenschaft `false` gibt für <xref:System.Reflection.Emit.ConstructorBuilder> ein-Objekt in einem dynamischen Typ zurück <xref:System.Reflection.MethodAttributes.RTSpecialName?displayProperty=nameWithType> , es sei denn, `attributes` das-Flag wurde in den-Parameter eingeschlossen, als der Konstruktor definiert wurde.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-349">The <xref:System.Reflection.MethodBase.IsConstructor%2A> property returns `false` for a <xref:System.Reflection.Emit.ConstructorBuilder> object in a dynamic type, unless the <xref:System.Reflection.MethodAttributes.RTSpecialName?displayProperty=nameWithType> flag was included in the `attributes` parameter when the constructor was defined.</span></span> <span data-ttu-id="a6b2b-350">Das Weglassen <xref:System.Reflection.MethodAttributes.RTSpecialName> des Flags hat keine Auswirkung auf die Richtigkeit des ausgegebenen Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-350">Omitting the <xref:System.Reflection.MethodAttributes.RTSpecialName> flag does not affect the correctness of the emitted constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsFamily">
      <MemberSignature Language="C#" Value="public bool IsFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamily" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFamily : bool" Usage="System.Reflection.MethodBase.IsFamily" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-351">Ruft einen Wert ab, der angibt, ob die Sichtbarkeit dieser Methode bzw. dieses Konstruktors durch <see cref="F:System.Reflection.MethodAttributes.Family" /> beschrieben wird, d. h., die Methode oder der Konstruktor ist nur sichtbar innerhalb ihrer bzw. seiner Klassen und in den abgeleiteten Klassen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-351">Gets a value indicating whether the visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.Family" />; that is, the method or constructor is visible only within its class and derived classes.</span></span></summary>
        <value><span data-ttu-id="a6b2b-352"><see langword="true" />, wenn der Zugriff auf diese Methode oder diesen Konstruktor von <see cref="F:System.Reflection.MethodAttributes.Family" /> genau beschrieben wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-352"><see langword="true" /> if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.Family" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-353">Die Sichtbarkeit einer Methode oder eines Konstruktors wird von <xref:System.Reflection.MethodAttributes.Family?displayProperty=nameWithType> genau beschrieben, wenn der einzige Sichtbarkeitsmodifizierer ist. `protected`</span><span class="sxs-lookup"><span data-stu-id="a6b2b-353">The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes.Family?displayProperty=nameWithType> if the only visibility modifier is `protected`.</span></span> <span data-ttu-id="a6b2b-354">Diese Eigenschaft ist `false` für Methoden`Protected Friend` <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>in( in C++Visual Basic). verwenden Sie die-Eigenschaft, um solche Methoden zu identifizieren. `protected public` C# `protected internal`</span><span class="sxs-lookup"><span data-stu-id="a6b2b-354">This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-355">Im folgenden Codebeispiel werden Methoden mit unterschiedlichen Sichtbarkeits Ebenen definiert, und die Werte der <xref:System.Reflection.MethodBase.IsAssembly%2A>Eigenschaften <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, und <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> werden angezeigt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-355">The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a6b2b-356">Die Visual Basic und C# Sprachen können keine Methoden mit <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> Sichtbarkeit definieren; diese Zugriffsebene wird nur C++ im Beispiel angezeigt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-356">The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodAttributes" />
        <altmember cref="P:System.Reflection.MethodBase.IsAssembly" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" />
      </Docs>
    </Member>
    <Member MemberName="IsFamilyAndAssembly">
      <MemberSignature Language="C#" Value="public bool IsFamilyAndAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamilyAndAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsFamilyAndAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamilyAndAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamilyAndAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFamilyAndAssembly : bool" Usage="System.Reflection.MethodBase.IsFamilyAndAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-357">Ruft einen Wert ab, der angibt, ob die Sichtbarkeit dieser Methode oder dieses Konstruktors durch <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" /> beschrieben wird, d. h., die Methode oder der Konstruktor kann von abgeleiteten Klassen aufgerufen werden, jedoch nur, wenn sie bzw. er sich in derselben Assembly befindet.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-357">Gets a value indicating whether the visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" />; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly.</span></span></summary>
        <value><span data-ttu-id="a6b2b-358"><see langword="true" />, wenn der Zugriff auf diese Methode oder diesen Konstruktor von <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" /> genau beschrieben wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-358"><see langword="true" /> if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-359">Die Sichtbarkeit einer Methode oder eines Konstruktors wird von <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> genau beschrieben, wenn der Sichtbarkeitsmodifizierer in `protected private` C++ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-359">The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> if the visibility modifier is `protected private` in C++.</span></span> <span data-ttu-id="a6b2b-360">Methoden mit dieser Sichtbarkeit können nicht in Visual Basic oder C#definiert werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-360">Methods with this visibility cannot be defined in Visual Basic or C#.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-361">Im folgenden Codebeispiel werden Methoden mit unterschiedlichen Sichtbarkeits Ebenen definiert, und die Werte der <xref:System.Reflection.MethodBase.IsAssembly%2A>Eigenschaften <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, und <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> werden angezeigt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-361">The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a6b2b-362">Die Visual Basic und C# Sprachen können keine Methoden mit <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> Sichtbarkeit definieren; diese Zugriffsebene wird nur C++ im Beispiel angezeigt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-362">The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodAttributes" />
        <altmember cref="P:System.Reflection.MethodBase.IsAssembly" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamily" />
      </Docs>
    </Member>
    <Member MemberName="IsFamilyOrAssembly">
      <MemberSignature Language="C#" Value="public bool IsFamilyOrAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamilyOrAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsFamilyOrAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamilyOrAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamilyOrAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFamilyOrAssembly : bool" Usage="System.Reflection.MethodBase.IsFamilyOrAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-363">Ruft einen Wert ab, der angibt, ob die potenzielle Sichtbarkeit dieser Methode oder dieses Konstruktors durch <see cref="F:System.Reflection.MethodAttributes.FamORAssem" /> beschrieben wird, d. h., die Methode bzw. der Konstruktor kann von Klassen in derselben Assembly und von abgeleiteten Klassen abgerufen werden, wobei es keine Rolle spielt, an welcher Position sich diese befinden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-363">Gets a value indicating whether the potential visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.FamORAssem" />; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly.</span></span></summary>
        <value><span data-ttu-id="a6b2b-364"><see langword="true" />, wenn der Zugriff auf diese Methode oder diesen Konstruktor von <see cref="F:System.Reflection.MethodAttributes.FamORAssem" /> genau beschrieben wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-364"><see langword="true" /> if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.FamORAssem" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-365">Wenn ein Typmember Sicht <xref:System.Reflection.MethodAttributes.FamORAssem?displayProperty=nameWithType> barkeit hat, kann er von jedem beliebigen Member in einer abgeleiteten Klasse oder von einem beliebigen Member in derselben Assembly, aber nicht von einem anderen Typ aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-365">If a type member has <xref:System.Reflection.MethodAttributes.FamORAssem?displayProperty=nameWithType> visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.</span></span>  
  
 <span data-ttu-id="a6b2b-366">Die tatsächliche Sichtbarkeit einer Methode wird durch die Sichtbarkeit des Typs eingeschränkt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-366">The actual visibility of a method is limited by the visibility of its type.</span></span> <span data-ttu-id="a6b2b-367">Die <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> -Eigenschaft kann `true` für eine Methode sein, aber wenn es sich um eine Methode eines privaten, nicht untergeordneten Typs handelt, ist die Methode außerhalb des enthaltenden Typs nicht sichtbar.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-367">The <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.</span></span>  
  
 <span data-ttu-id="a6b2b-368">Die Sichtbarkeit einer <xref:System.Reflection.MethodAttributes.FamORAssem?displayProperty=nameWithType> Methode oder eines Konstruktors wird von genau beschrieben, wenn sich der Sichtbarkeitsmodifizierer `protected public` in C++ `protected internal` C# befindet (`Protected Friend` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-368">The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes.FamORAssem?displayProperty=nameWithType> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-369">Im folgenden Codebeispiel werden Methoden mit unterschiedlichen Sichtbarkeits Ebenen definiert, und die Werte der <xref:System.Reflection.MethodBase.IsAssembly%2A>Eigenschaften <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, und <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> werden angezeigt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-369">The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a6b2b-370">Die Visual Basic und C# Sprachen können keine Methoden mit <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> Sichtbarkeit definieren; diese Zugriffsebene wird nur C++ im Beispiel angezeigt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-370">The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodAttributes" />
        <altmember cref="P:System.Reflection.MethodBase.IsAssembly" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamily" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" />
      </Docs>
    </Member>
    <Member MemberName="IsFinal">
      <MemberSignature Language="C#" Value="public bool IsFinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFinal" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsFinal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFinal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFinal { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFinal : bool" Usage="System.Reflection.MethodBase.IsFinal" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFinal</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-371">Ruft einen Wert ab, der angibt, ob diese Methode <see langword="final" /> ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-371">Gets a value indicating whether this method is <see langword="final" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-372"><see langword="true" />, wenn diese Methode <see langword="final" /> ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-372"><see langword="true" /> if this method is <see langword="final" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-373">Um zu ermitteln, ob eine Methode über schreibbar ist, ist es nicht ausreichend <xref:System.Reflection.MethodBase.IsVirtual%2A> , `true`das zu überprüfen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-373">To determine if a method is overridable, it is not sufficient to check that <xref:System.Reflection.MethodBase.IsVirtual%2A> is `true`.</span></span> <span data-ttu-id="a6b2b-374">Damit eine Methode über schreibbar ist, `IsVirtual` muss sein `true` , `IsFinal` und muss `false`sein.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-374">For a method to be overridable, `IsVirtual` must be `true` and `IsFinal` must be `false`.</span></span> <span data-ttu-id="a6b2b-375">Beispielsweise kann eine Methode nicht virtuell sein, aber Sie implementiert eine Schnittstellen Methode.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-375">For example, a method might be non-virtual, but it implements an interface method.</span></span> <span data-ttu-id="a6b2b-376">Der Common Language Runtime erfordert, dass alle Methoden, die Schnittstellenmember implementieren, `virtual`als gekennzeichnet werden müssen. Daher markiert der `virtual final`Compiler die Methode.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-376">The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`.</span></span> <span data-ttu-id="a6b2b-377">Es gibt Fälle, in denen eine Methode als `virtual` gekennzeichnet ist, aber immer noch nicht über schreibbar ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-377">So there are cases where a method is marked as `virtual` but is still not overridable.</span></span>  
  
 <span data-ttu-id="a6b2b-378">Um sicherzustellen, ob eine Methode über schreibbar ist, verwenden Sie Code wie den folgenden:</span><span class="sxs-lookup"><span data-stu-id="a6b2b-378">To establish with certainty whether a method is overridable, use code such as this:</span></span>  
  
 `if (MethodInfo.IsVirtual && !MethodInfo.IsFinal)`  
  
 <span data-ttu-id="a6b2b-379">Wenn `IsVirtual` ist `false` oder `IsFinal` ist ,kanndieMethodenichtüberschriebenwerden.`true`</span><span class="sxs-lookup"><span data-stu-id="a6b2b-379">If `IsVirtual` is `false` or `IsFinal` is `true`, then the method cannot be overridden.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-380">Im folgenden Beispiel wird `false` für `IsFinal`angezeigt. Dies kann dazu führen, dass MyMethod über schreibbar ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-380">The following example displays `false` for `IsFinal`, which might lead you to think that MyMethod is overridable.</span></span> <span data-ttu-id="a6b2b-381">Der Code wird `false` gedruckt, obwohl MyMethod nicht als `virtual` gekennzeichnet ist und daher nicht überschrieben werden kann.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-381">The code prints `false` even though MyMethod is not marked `virtual` and thus cannot be overridden.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethod">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsGenericMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethod As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethod { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethod : bool" Usage="System.Reflection.MethodBase.IsGenericMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-382">Ruft einen Wert ab, der angibt, ob es sich um eine generische Methode handelt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-382">Gets a value indicating whether the method is generic.</span></span></summary>
        <value><span data-ttu-id="a6b2b-383"><see langword="true" />, wenn die aktuelle <see cref="T:System.Reflection.MethodBase" /> eine generische Methode darstellt, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-383"><see langword="true" /> if the current <see cref="T:System.Reflection.MethodBase" /> represents a generic method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-384">Verwenden Sie <xref:System.Reflection.MethodBase.IsGenericMethod%2A> die-Eigenschaft, um zu <xref:System.Reflection.MethodBase> bestimmen, ob das aktuelle-Objekt eine generische Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-384">Use the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents a generic method.</span></span> <span data-ttu-id="a6b2b-385">Verwenden Sie <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> die-Eigenschaft, um zu <xref:System.Reflection.MethodBase> bestimmen, ob das aktuelle-Objekt eine geöffnete konstruierte Methode oder eine geschlossene konstruierte Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-385">Use the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents an open constructed method or a closed constructed method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a6b2b-386">Generika werden standardmäßig nicht unterstützt. Diese Eigenschaft gibt `false` zurück, wenn Sie in einer abgeleiteten Klasse nicht überschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-386">Generics are not supported by default; this property returns `false` if not overridden in a derived class.</span></span> <span data-ttu-id="a6b2b-387">Generische Konstruktoren werden in der .NET Framework Version 2,0 nicht unterstützt, sodass diese Eigenschaft `false` zurückgibt, wenn die aktuelle Instanz <xref:System.Reflection.ConstructorInfo>vom Typ ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-387">Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.</span></span>  
  
<span data-ttu-id="a6b2b-388">In der folgenden Tabelle werden die invarianten Bedingungen für Begriffe, die für generische Methoden spezifisch sind, zusammengefasst.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-388">The following table summarizes the invariant conditions for terms specific to generic methods.</span></span> <span data-ttu-id="a6b2b-389">Weitere Begriffe, die in der generischen Reflektion verwendet werden, wie z. b. *generische Typparameter* und *generischer Typ*, finden Sie unter <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="a6b2b-389">For other terms used in generic reflection, such as *generic type parameter* and *generic type*, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>   

|<span data-ttu-id="a6b2b-390">Begriff</span><span class="sxs-lookup"><span data-stu-id="a6b2b-390">Term</span></span>|<span data-ttu-id="a6b2b-391">Invariante Bedingung</span><span class="sxs-lookup"><span data-stu-id="a6b2b-391">Invariant condition</span></span>| 
|---|---| 
|<span data-ttu-id="a6b2b-392">Definition der generischen Methode</span><span class="sxs-lookup"><span data-stu-id="a6b2b-392">generic method definition</span></span>| <span data-ttu-id="a6b2b-393">Die <xref:System.Reflection.MethodBase.IsGenericMethodDefinition>-Eigenschaft ist `true`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-393">The <xref:System.Reflection.MethodBase.IsGenericMethodDefinition> property is `true`.</span></span> <br /><span data-ttu-id="a6b2b-394">Definiert eine generische Methode.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-394">Defines a generic method.</span></span> <span data-ttu-id="a6b2b-395">Eine konstruierte Methode wird erstellt, indem die <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> -Methode für <xref:System.Reflection.MethodInfo> ein-Objekt aufgerufen wird, das eine generische Methoden Definition darstellt, und ein Array von Typargumenten angibt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-395">A constructed method is created by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> method on a <xref:System.Reflection.MethodInfo> object that represents a generic method definition, and specifying an array of type arguments.</span></span> <br /><span data-ttu-id="a6b2b-396">Die <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> -Methode kann nur für generische Methoden Definitionen aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-396">The <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method can be called only on generic method definitions.</span></span> <br/><span data-ttu-id="a6b2b-397">Jede generische Methoden Definition ist eine generische Methode, aber der umgekehrte Wert ist nicht "true".</span><span class="sxs-lookup"><span data-stu-id="a6b2b-397">Any generic method definition is a generic method, but the converse is not true.</span></span>|    
|<span data-ttu-id="a6b2b-398">generische Methode</span><span class="sxs-lookup"><span data-stu-id="a6b2b-398">generic method</span></span>|<span data-ttu-id="a6b2b-399">Die `IsGenericMethod`-Eigenschaft ist `true`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-399">The `IsGenericMethod` property is `true`.</span></span> <br/> <span data-ttu-id="a6b2b-400">Kann eine generische Methoden Definition, eine geöffnete konstruierte Methode oder eine geschlossene konstruierte Methode sein.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-400">Can be a generic method definition, an open constructed method, or a closed constructed method.</span></span>| 
|<span data-ttu-id="a6b2b-401">geöffnete konstruierte Methode</span><span class="sxs-lookup"><span data-stu-id="a6b2b-401">open constructed method</span></span>|<span data-ttu-id="a6b2b-402">Die <xref:System.Reflection.MethodBase.ContainsGenericParameters>-Eigenschaft ist `true`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-402">The <xref:System.Reflection.MethodBase.ContainsGenericParameters> property is `true`.</span></span> <br/><span data-ttu-id="a6b2b-403">Es ist nicht möglich, eine geöffnete konstruierte Methode aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-403">It is not possible to invoke an open constructed method.</span></span>|  
|<span data-ttu-id="a6b2b-404">Closed konstruierte Methode</span><span class="sxs-lookup"><span data-stu-id="a6b2b-404">closed constructed method</span></span>|<span data-ttu-id="a6b2b-405">Die <xref:System.Reflection.MethodBase.ContainsGenericParameters>-Eigenschaft ist `false`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-405">The <xref:System.Reflection.MethodBase.ContainsGenericParameters> property is `false`.</span></span> <br/><span data-ttu-id="a6b2b-406">Wenn die Methode rekursiv überprüft wird, verfügt die Methode nicht über nicht zugewiesene generische Parameter.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-406">When examined recursively, the method has no unassigned generic parameters.</span></span> <span data-ttu-id="a6b2b-407">Der enthaltende Typ hat keine generischen Typparameter, und keines der Typargumente hat generische Typparameter.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-407">The containing type has no generic type parameters, and none of the type arguments have generic type parameters.</span></span> <br/><span data-ttu-id="a6b2b-408">Die-Methode kann aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-408">The method can be invoked.</span></span>|   

 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MethodBase.ContainsGenericParameters" />
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethod" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethodDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethodDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodDefinition : bool" Usage="System.Reflection.MethodBase.IsGenericMethodDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-409">Ruft einen Wert ab, der angibt, ob die Methode eine generische Methodendefinition ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-409">Gets a value indicating whether the method is a generic method definition.</span></span></summary>
        <value><span data-ttu-id="a6b2b-410"><see langword="true" />, wenn das aktuelle <see cref="T:System.Reflection.MethodBase" />-Objekt die Definition einer generischen Methode darstellt, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-410"><see langword="true" /> if the current <see cref="T:System.Reflection.MethodBase" /> object represents the definition of a generic method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-411">Wenn der aktuelle <xref:System.Reflection.MethodBase> eine generische Methoden Definition darstellt, wird Folgendes angezeigt:</span><span class="sxs-lookup"><span data-stu-id="a6b2b-411">If the current <xref:System.Reflection.MethodBase> represents a generic method definition, then:</span></span>  
  
-   <span data-ttu-id="a6b2b-412">Die <xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A>-Eigenschaft ist `true`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-412">The <xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A> property is `true`.</span></span>  
  
-   <span data-ttu-id="a6b2b-413">Für jedes <xref:System.Type> Objekt im Array, das von der <xref:System.Reflection.MethodBase.GetGenericArguments%2A> -Methode zurückgegeben wird:</span><span class="sxs-lookup"><span data-stu-id="a6b2b-413">For each <xref:System.Type> object in the array returned by the <xref:System.Reflection.MethodBase.GetGenericArguments%2A> method:</span></span>  
  
    -   <span data-ttu-id="a6b2b-414">Die <xref:System.Type.IsGenericParameter%2A?displayProperty=nameWithType>-Eigenschaft ist `true`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-414">The <xref:System.Type.IsGenericParameter%2A?displayProperty=nameWithType> property is `true`.</span></span>  
  
    -   <span data-ttu-id="a6b2b-415">Die <xref:System.Type.DeclaringMethod%2A?displayProperty=nameWithType> -Eigenschaft gibt die aktuelle-Instanz zurück.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-415">The <xref:System.Type.DeclaringMethod%2A?displayProperty=nameWithType> property returns the current instance.</span></span>  
  
    -   <span data-ttu-id="a6b2b-416">Die <xref:System.Type.GenericParameterPosition%2A?displayProperty=nameWithType> -Eigenschaft ist identisch <xref:System.Type> mit der Position des-Objekts im-Array.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-416">The <xref:System.Type.GenericParameterPosition%2A?displayProperty=nameWithType> property is the same as the position of the <xref:System.Type> object in the array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a6b2b-417">Generika werden standardmäßig nicht unterstützt. Diese Eigenschaft gibt `false` zurück, wenn Sie in einer abgeleiteten Klasse nicht überschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-417">Generics are not supported by default; this property returns `false` if not overridden in a derived class.</span></span> <span data-ttu-id="a6b2b-418">Generische Konstruktoren werden in der .NET Framework Version 2,0 nicht unterstützt, sodass diese Eigenschaft `false` zurückgibt, wenn die aktuelle Instanz <xref:System.Reflection.ConstructorInfo>vom Typ ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-418">Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.</span></span>  
  
 <span data-ttu-id="a6b2b-419">Eine Liste der invarianten Bedingungen für Begriffe, die spezifisch für generische Methoden sind, finden <xref:System.Reflection.MethodBase.IsGenericMethod%2A> Sie unter der-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-419">For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property.</span></span> <span data-ttu-id="a6b2b-420">Eine Liste der invarianten Bedingungen für andere Begriffe, die in der generischen Reflektion verwendet <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> werden, finden Sie unter der-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-420">For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
      </Docs>
    </Member>
    <Member MemberName="IsHideBySig">
      <MemberSignature Language="C#" Value="public bool IsHideBySig { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHideBySig" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsHideBySig" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHideBySig As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHideBySig { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHideBySig : bool" Usage="System.Reflection.MethodBase.IsHideBySig" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsHideBySig</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-421">Ruft einen Wert ab, der angibt, ob nur ein Member derselben Art mit einer identischen Signatur in der abgeleiteten Klasse verborgen ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-421">Gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.</span></span></summary>
        <value><span data-ttu-id="a6b2b-422"><see langword="true" />, wenn der Member durch die Signatur verborgen ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-422"><see langword="true" /> if the member is hidden by signature; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-423">Wenn ein Element in einer abgeleiteten Klasse mit dem C# `new` Modifizierer oder dem Visual Basic `Shadows` Modifizierer deklariert wird, kann ein Member mit demselben Namen in der Basisklasse ausgeblendet werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-423">When a member in a derived class is declared with the C# `new` modifier or the Visual Basic `Shadows` modifier, it can hide a member of the same name in the base class.</span></span> <span data-ttu-id="a6b2b-424">C#Blendet Basisklassenmember nach Signatur aus.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-424">C# hides base class members by signature.</span></span> <span data-ttu-id="a6b2b-425">Das heißt, wenn der Basisklassenmember über mehrere über Ladungen verfügt, ist der einzige, der ausgeblendet ist, der einzige, der die gleiche Signatur aufweist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-425">That is, if the base class member has multiple overloads, the only one that is hidden is the one that has the identical signature.</span></span> <span data-ttu-id="a6b2b-426">Im Gegensatz dazu blendet Visual Basic alle über Ladungen der Basisklasse aus.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-426">By contrast, Visual Basic hides all the base class overloads.</span></span> <span data-ttu-id="a6b2b-427">C# `new` `true` `Shadows` Folglich gibt für `false` einen Member zurück, der mit dem Visual Basic Modifizierer deklariert wurde, und für einen Member, der mit dem-Modifizierer deklariert wird. <xref:System.Reflection.MethodBase.IsHideBySig%2A></span><span class="sxs-lookup"><span data-stu-id="a6b2b-427">Thus, <xref:System.Reflection.MethodBase.IsHideBySig%2A> returns `false` on a member declared with the Visual Basic `Shadows` modifier, and `true` on a member declared with the C# `new` modifier.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="a6b2b-428">Diese Eigenschaft bestimmt nicht, ob eine Methode über das <xref:System.Reflection.MethodAttributes.NewSlot> -Attribut verfügt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-428">This property does not determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute.</span></span> <span data-ttu-id="a6b2b-429">Eine Methode, die mit dem `new` - `Shadows` Modifizierer oder dem-Modifizierer deklariert wird, verfügt über das `new` <xref:System.Reflection.MethodAttributes.NewSlot> -Attribut, aber nur C# Methoden, die mit deklariert <xref:System.Reflection.MethodBase.IsHideBySig%2A> werden (d. h. nur Methoden), legen die-Eigenschaft`true`.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-429">A method that is declared with either the `new` or the `Shadows` modifier will have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, but only methods declared with `new` (that is, only C# methods) will have the <xref:System.Reflection.MethodBase.IsHideBySig%2A> property set to `true`.</span></span>  <span data-ttu-id="a6b2b-430">Um zu ermitteln, ob eine Methode <xref:System.Reflection.MethodAttributes.NewSlot> über das-Attribut verfügt, verwenden Sie Code, C# der `If (myMethodInfo.Attributes And MethodAttributes.VtableLayoutMask) = MethodAttributes.NewSlot` dem folgenden ähnelt: `if ((myMethodInfo.Attributes & MethodAttributes.VtableLayoutMask) == MethodAttributes.NewSlot)` in oder in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-430">To determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, use code similar to the following: `if ((myMethodInfo.Attributes & MethodAttributes.VtableLayoutMask) == MethodAttributes.NewSlot)` in C# or `If (myMethodInfo.Attributes And MethodAttributes.VtableLayoutMask) = MethodAttributes.NewSlot` in Visual Basic.</span></span> <span data-ttu-id="a6b2b-431">Beachten Sie jedoch, dass, obwohl alle mit `new` oder `Shadows` deklarierten Methoden <xref:System.Reflection.MethodAttributes.NewSlot> über das-Attribut verfügen, nicht alle <xref:System.Reflection.MethodAttributes.NewSlot> Methoden, die über `new` das `Shadows`-Attribut verfügen, mit oder deklariert werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-431">Note, however, that although all methods declared with `new` or `Shadows` have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, not all methods that have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute are declared with `new` or `Shadows`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-432">Das folgende Codebeispiel enthält eine Basisklasse mit einer überladenen-Methode und eine abgeleitete Klasse, die eine der-über Ladungen ausblendet.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-432">The following code example contains a base class with an overloaded method, and a derived class that hides one of the overloads.</span></span> <span data-ttu-id="a6b2b-433">In der Visual Basic-Version des Code Beispiels gibt die <xref:System.Reflection.MethodBase.IsHideBySig%2A> -Eigenschaft `false` für den Member in der abgeleiteten Klasse zurück.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-433">In the Visual Basic version of the code example, the <xref:System.Reflection.MethodBase.IsHideBySig%2A> property returns `false` for the member in the derived class.</span></span> <span data-ttu-id="a6b2b-434">In der C# -Version des Code Beispiels gibt die-Eigenschaft `true` für den Member in der abgeleiteten Klasse zurück.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-434">In the C# version of the code sample, the property returns `true` for the member in the derived class.</span></span>  
  
 [!code-cpp[System.Reflection.MethodBase.IsHideBySig#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.MethodBase.IsHideBySig/cpp/hide.cpp#1)]
 [!code-csharp[System.Reflection.MethodBase.IsHideBySig#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.MethodBase.IsHideBySig/CS/hide.cs#1)]
 [!code-vb[System.Reflection.MethodBase.IsHideBySig#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.MethodBase.IsHideBySig/VB/hide.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrivate">
      <MemberSignature Language="C#" Value="public bool IsPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrivate : bool" Usage="System.Reflection.MethodBase.IsPrivate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-435">Ruft einen Wert ab, der angibt, ob es sich um einen privaten Member handelt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-435">Gets a value indicating whether this member is private.</span></span></summary>
        <value><span data-ttu-id="a6b2b-436"><see langword="true" />, wenn der Zugriff auf diese Methode auf andere Member der Klasse selbst beschränkt ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-436"><see langword="true" /> if access to this method is restricted to other members of the class itself; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-437">Wenn ein Typmember Sicht `Private` barkeit der Ebene aufweist, kann er von jedem beliebigen Member in derselben Klasse aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-437">If a type member has `Private` level visibility, it can be called from any member in the same class and no others.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Reflection.MethodBase.IsPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-438">Ruft einen Wert ab, der angibt, ob dies eine öffentliche Methode ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-438">Gets a value indicating whether this is a public method.</span></span></summary>
        <value><span data-ttu-id="a6b2b-439"><see langword="true" />, wenn diese Methode öffentlich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-439"><see langword="true" /> if this method is public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-440">Um das <xref:System.Reflection.MethodBase>zu erhalten, erhalten Sie zuerst den-Typ.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-440">To get the <xref:System.Reflection.MethodBase>, first get the type.</span></span> <span data-ttu-id="a6b2b-441">Get the-Methode aus dem-Typ.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-441">From the type, get the method.</span></span> <span data-ttu-id="a6b2b-442">In der-Methode erhalten Sie `MethodBase`die.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-442">From the method, get the `MethodBase`.</span></span> <span data-ttu-id="a6b2b-443">Wenn der `MethodBase` -Konstruktor oder der-Konstruktor nicht öffentlich ist, wird er geschützt, und der Zugriff darauf ist nicht möglich.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-443">If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed.</span></span> <span data-ttu-id="a6b2b-444">Wenn Sie auf eine nicht öffentliche Methode zugreifen möchten, <xref:System.Reflection.BindingFlags> legen Sie `NonPublic` die `GetMethod`Maske in fest.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-444">To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-445">Im folgenden Beispiel wird die <xref:System.Reflection.MethodBase.IsPublic%2A> -Eigenschaft verwendet, um eine Meldung anzuzeigen, die angibt, ob die angegebene Methode öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-445">The following example uses the <xref:System.Reflection.MethodBase.IsPublic%2A> property to display a message that indicates whether the specified method is public.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsPublic Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsPublic Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Reflection.BindingFlags" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.MethodBase.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-446">Ruft einen Wert ab, der angibt, ob die aktuelle Methode oder der aktuelle Konstruktor auf der aktuellen Vertrauensebene sicherheitsrelevant oder sicherheitsrelevant und sicher zugänglich ist und daher wichtige Vorgänge ausführen darf.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-446">Gets a value that indicates whether the current method or constructor is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</span></span></summary>
        <value><span data-ttu-id="a6b2b-447"><see langword="true" />, wenn die aktuelle Methode oder der aktuelle Konstruktor auf der aktuellen Vertrauensebene sicherheitsrelevant oder sicherheitsrelevant und sicher zugänglich ist, <see langword="false" />, wenn sie bzw. er sicherheitstransparent ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-447"><see langword="true" /> if the current method or constructor is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-448">Die <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>Eigenschaften <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, und<xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> melden die Transparenz Ebene der Methode oder des Konstruktors auf der aktuellen Vertrauens Ebene, wie vom Common Language Runtime (CLR) festgelegt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-448">The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="a6b2b-449">Die Kombinationen dieser Eigenschaften werden in der folgenden Tabelle gezeigt:</span><span class="sxs-lookup"><span data-stu-id="a6b2b-449">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="a6b2b-450">Sicherheitsstufe</span><span class="sxs-lookup"><span data-stu-id="a6b2b-450">Security level</span></span>|<span data-ttu-id="a6b2b-451">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="a6b2b-451">IsSecurityCritical</span></span>|<span data-ttu-id="a6b2b-452">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="a6b2b-452">IsSecuritySafeCritical</span></span>|<span data-ttu-id="a6b2b-453">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="a6b2b-453">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="a6b2b-454">Kritisch</span><span class="sxs-lookup"><span data-stu-id="a6b2b-454">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="a6b2b-455">Sicher kritisch</span><span class="sxs-lookup"><span data-stu-id="a6b2b-455">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="a6b2b-456">Transparent</span><span class="sxs-lookup"><span data-stu-id="a6b2b-456">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="a6b2b-457">Die Verwendung dieser Eigenschaften ist viel einfacher als das Untersuchen der Sicherheits Anmerkungen einer Assembly und ihrer Typen und Member, das Überprüfen der aktuellen Vertrauens Ebene und das Duplizieren der Lauf Zeit Regeln.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-457">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a6b2b-458">Für teilweise vertrauenswürdige Assemblys hängt der Wert dieser Eigenschaft von der aktuellen Vertrauens Ebene der Assembly ab.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-458">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="a6b2b-459">Wenn die Assembly in eine teilweise vertrauenswürdige Anwendungsdomäne geladen wird (z. b. in eine Sandbox-Anwendungsdomäne), werden die Sicherheits Anmerkungen der Assembly von der Laufzeit ignoriert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-459">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="a6b2b-460">Die Assembly und alle zugehörigen Typen werden als transparent behandelt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-460">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="a6b2b-461">Die Laufzeit achtet auf die Sicherheits Anmerkungen einer teilweise vertrauenswürdigen Assembly nur, wenn diese Assembly in eine voll vertrauenswürdige Anwendungsdomäne geladen wird (z. b. in die Standard Anwendungsdomäne einer Desktop Anwendung).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-461">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="a6b2b-462">Im Gegensatz dazu wird eine vertrauenswürdige Assembly (d. h. eine Assembly mit starkem Namen, die im globalen Assemblycache installiert ist) immer mit voller Vertrauenswürdigkeit geladen, unabhängig von der Vertrauens Ebene der Anwendungsdomäne, sodass die aktuelle Vertrauens Ebene immer voll vertrauenswürdig ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-462">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="a6b2b-463">Mithilfe der <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> -Eigenschaft und der- <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> Eigenschaft können Sie die aktuellen Vertrauens Ebenen von Assemblys und Anwendungs Domänen ermitteln.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-463">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="a6b2b-464">Weitere Informationen zur Reflektion und Transparenz finden Sie unter [Sicherheitsüberlegungen für die Reflektion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-464">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="a6b2b-465">Informationen zur Transparenz finden Sie unter [Sicherheitsänderungen](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-465">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MethodBase.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.MethodBase.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="a6b2b-466">Sicherheitsüberlegungen für die Reflektion</span><span class="sxs-lookup"><span data-stu-id="a6b2b-466">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="a6b2b-467">Änderungen der Sicherheit in .NET Framework 4.0</span><span class="sxs-lookup"><span data-stu-id="a6b2b-467">Security Changes in the .NET Framework Version 4.0</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.MethodBase.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-468">Ruft einen Wert ab, der angibt, ob die aktuelle Methode oder der aktuelle Konstruktor auf der aktuellen Vertrauensebene sicherheitsrelevant ist, d. h., ob sie bzw. er wichtige Vorgänge ausführen darf und ob von transparentem Code darauf zugegriffen werden kann.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-468">Gets a value that indicates whether the current method or constructor is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value><span data-ttu-id="a6b2b-469"><see langword="true" />, wenn die aktuelle Methode oder der aktuelle Konstruktor auf der aktuellen Vertrauensebene sicherheitsrelevant und sicher zugänglich ist, <see langword="false" />, wenn sie bzw. er sicherheitsrelevant oder sicherheitstransparent ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-469"><see langword="true" /> if the method or constructor is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-470">Die <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>Eigenschaften <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, und<xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> melden die Transparenz Ebene der Methode oder des Konstruktors auf der aktuellen Vertrauens Ebene, wie vom Common Language Runtime (CLR) festgelegt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-470">The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="a6b2b-471">Die Kombinationen dieser Eigenschaften werden in der folgenden Tabelle gezeigt:</span><span class="sxs-lookup"><span data-stu-id="a6b2b-471">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="a6b2b-472">Sicherheitsstufe</span><span class="sxs-lookup"><span data-stu-id="a6b2b-472">Security level</span></span>|<span data-ttu-id="a6b2b-473">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="a6b2b-473">IsSecurityCritical</span></span>|<span data-ttu-id="a6b2b-474">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="a6b2b-474">IsSecuritySafeCritical</span></span>|<span data-ttu-id="a6b2b-475">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="a6b2b-475">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="a6b2b-476">Kritisch</span><span class="sxs-lookup"><span data-stu-id="a6b2b-476">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="a6b2b-477">Sicher kritisch</span><span class="sxs-lookup"><span data-stu-id="a6b2b-477">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="a6b2b-478">Transparent</span><span class="sxs-lookup"><span data-stu-id="a6b2b-478">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="a6b2b-479">Die Verwendung dieser Eigenschaften ist viel einfacher als das Untersuchen der Sicherheits Anmerkungen einer Assembly und ihrer Typen und Member, das Überprüfen der aktuellen Vertrauens Ebene und das Duplizieren der Lauf Zeit Regeln.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-479">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a6b2b-480">Für teilweise vertrauenswürdige Assemblys hängt der Wert dieser Eigenschaft von der aktuellen Vertrauens Ebene der Assembly ab.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-480">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="a6b2b-481">Wenn die Assembly in eine teilweise vertrauenswürdige Anwendungsdomäne geladen wird (z. b. in eine Sandbox-Anwendungsdomäne), werden die Sicherheits Anmerkungen der Assembly von der Laufzeit ignoriert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-481">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="a6b2b-482">Die Assembly und alle zugehörigen Typen werden als transparent behandelt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-482">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="a6b2b-483">Die Laufzeit achtet auf die Sicherheits Anmerkungen einer teilweise vertrauenswürdigen Assembly nur, wenn diese Assembly in eine voll vertrauenswürdige Anwendungsdomäne geladen wird (z. b. in die Standard Anwendungsdomäne einer Desktop Anwendung).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-483">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="a6b2b-484">Im Gegensatz dazu wird eine vertrauenswürdige Assembly (d. h. eine Assembly mit starkem Namen, die im globalen Assemblycache installiert ist) immer mit voller Vertrauenswürdigkeit geladen, unabhängig von der Vertrauens Ebene der Anwendungsdomäne, sodass die aktuelle Vertrauens Ebene immer voll vertrauenswürdig ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-484">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="a6b2b-485">Mithilfe der <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> -Eigenschaft und der- <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> Eigenschaft können Sie die aktuellen Vertrauens Ebenen von Assemblys und Anwendungs Domänen ermitteln.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-485">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="a6b2b-486">Weitere Informationen zur Reflektion und Transparenz finden Sie unter [Sicherheitsüberlegungen für die Reflektion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-486">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="a6b2b-487">Informationen zur Transparenz finden Sie unter [Sicherheitsänderungen](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-487">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MethodBase.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.MethodBase.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="a6b2b-488">Sicherheitsüberlegungen für die Reflektion</span><span class="sxs-lookup"><span data-stu-id="a6b2b-488">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="a6b2b-489">Änderungen der Sicherheit in .NET Framework 4.0</span><span class="sxs-lookup"><span data-stu-id="a6b2b-489">Security Changes in the .NET Framework Version 4.0</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.MethodBase.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-490">Ruft einen Wert ab, der angibt, ob die aktuelle Methode oder der aktuelle Konstruktor auf der aktuellen Vertrauensebene sicherheitstransparent ist und daher keine wichtigen Vorgänge ausführen kann.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-490">Gets a value that indicates whether the current method or constructor is transparent at the current trust level, and therefore cannot perform critical operations.</span></span></summary>
        <value><span data-ttu-id="a6b2b-491"><see langword="true" />, wenn die Methode oder der Konstruktor auf der aktuellen Vertrauensebene sicherheitstransparent ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-491"><see langword="true" /> if the method or constructor is security-transparent at the current trust level; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-492">Wenn diese Eigenschaft zurück `true`gibt, <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> geben <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> die Eigenschaften `false`und zurück.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-492">If this property returns `true`, the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> and <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> properties return `false`.</span></span>  
  
 <span data-ttu-id="a6b2b-493">Die <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>Eigenschaften <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, und<xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> melden die Transparenz Ebene der Methode oder des Konstruktors auf der aktuellen Vertrauens Ebene, wie vom Common Language Runtime (CLR) festgelegt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-493">The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="a6b2b-494">Die Verwendung dieser Eigenschaften ist viel einfacher als das Untersuchen der Sicherheits Anmerkungen einer Assembly und ihrer Typen und Member, das Überprüfen der aktuellen Vertrauens Ebene und das Duplizieren der Lauf Zeit Regeln.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-494">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a6b2b-495">Für teilweise vertrauenswürdige Assemblys hängt der Wert dieser Eigenschaft von der aktuellen Vertrauens Ebene der Assembly ab.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-495">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="a6b2b-496">Wenn die Assembly in eine teilweise vertrauenswürdige Anwendungsdomäne geladen wird (z. b. in eine Sandbox-Anwendungsdomäne), werden die Sicherheits Anmerkungen der Assembly von der Laufzeit ignoriert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-496">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="a6b2b-497">Die Assembly und alle zugehörigen Typen werden als transparent behandelt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-497">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="a6b2b-498">Die Laufzeit achtet auf die Sicherheits Anmerkungen einer teilweise vertrauenswürdigen Assembly nur, wenn diese Assembly in eine voll vertrauenswürdige Anwendungsdomäne geladen wird (z. b. in die Standard Anwendungsdomäne einer Desktop Anwendung).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-498">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="a6b2b-499">Im Gegensatz dazu wird eine vertrauenswürdige Assembly (d. h. eine Assembly mit starkem Namen, die im globalen Assemblycache installiert ist) immer mit voller Vertrauenswürdigkeit geladen, unabhängig von der Vertrauens Ebene der Anwendungsdomäne, sodass die aktuelle Vertrauens Ebene immer voll vertrauenswürdig ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-499">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="a6b2b-500">Mithilfe der <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> -Eigenschaft und der- <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> Eigenschaft können Sie die aktuellen Vertrauens Ebenen von Assemblys und Anwendungs Domänen ermitteln.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-500">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="a6b2b-501">Weitere Informationen zur Reflektion und Transparenz finden Sie unter [Sicherheitsüberlegungen für die Reflektion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-501">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="a6b2b-502">Informationen zur Transparenz finden Sie unter [Sicherheitsänderungen](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-502">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MethodBase.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.MethodBase.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="a6b2b-503">Sicherheitsüberlegungen für die Reflektion</span><span class="sxs-lookup"><span data-stu-id="a6b2b-503">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="a6b2b-504">Änderungen der Sicherheit in .NET Framework 4.0</span><span class="sxs-lookup"><span data-stu-id="a6b2b-504">Security Changes in the .NET Framework Version 4.0</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Reflection.MethodBase.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-505">Ruft einen Wert ab, der angibt, ob diese Methode einen besonderen Namen hat.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-505">Gets a value indicating whether this method has a special name.</span></span></summary>
        <value><span data-ttu-id="a6b2b-506"><see langword="true" />, wenn diese Methode einen besonderen Namen hat, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-506"><see langword="true" /> if this method has a special name; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-507">Das <xref:System.Reflection.MethodAttributes.SpecialName> -Bit ist auf das Kennzeichnen von Membern festgelegt, die von einigen Compilern (z. b. Eigenschaftenaccessoren und Operator überlade Methoden) auf besondere Weise behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-507">The <xref:System.Reflection.MethodAttributes.SpecialName> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-508">Dieses Beispiel zeigt die Verwendung von <xref:System.Reflection.MethodBase.IsSpecialName%2A> , um interne oder private Member aus einer Liste zu filtern.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-508">This example shows a use of <xref:System.Reflection.MethodBase.IsSpecialName%2A> to filter internal or private members out of a list.</span></span>  
  
 [!code-cpp[Classic Type.IsSpecialName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsSpecialName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.IsSpecialName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsSpecialName Example/CS/source.cs#1)]
 [!code-vb[Classic Type.IsSpecialName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsSpecialName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Reflection.MethodAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Reflection.MethodBase.IsStatic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsStatic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-509">Ruft einen Wert ab, der angibt, ob die Methode <see langword="static" /> ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-509">Gets a value indicating whether the method is <see langword="static" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-510"><see langword="true" />, wenn diese Methode <see langword="static" /> ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-510"><see langword="true" /> if this method is <see langword="static" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-511">Ein statischer Member kann nicht implizit auf Instanzdaten in einer Klasse verweisen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-511">A static member cannot implicitly reference instance data in a class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Reflection.MethodAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsVirtual">
      <MemberSignature Language="C#" Value="public bool IsVirtual { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVirtual" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsVirtual" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVirtual As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVirtual { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVirtual : bool" Usage="System.Reflection.MethodBase.IsVirtual" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsVirtual</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-512">Ruft einen Wert ab, der angibt, ob die Methode <see langword="virtual" /> ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-512">Gets a value indicating whether the method is <see langword="virtual" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-513"><see langword="true" />, wenn diese Methode <see langword="virtual" /> ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-513"><see langword="true" /> if this method is <see langword="virtual" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-514">Ein virtuelles Element kann auf Instanzdaten in einer Klasse verweisen, und es muss über eine Instanz der-Klasse auf Sie verwiesen werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-514">A virtual member may reference instance data in a class and must be referenced through an instance of the class.</span></span>  
  
 <span data-ttu-id="a6b2b-515">Um zu ermitteln, ob eine Methode über schreibbar ist, ist es nicht ausreichend `IsVirtual` , `true`das zu überprüfen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-515">To determine if a method is overridable, it is not sufficient to check that `IsVirtual` is `true`.</span></span> <span data-ttu-id="a6b2b-516">Damit eine Methode über schreibbar ist, `IsVirtual` muss sein `true` , <xref:System.Reflection.MethodBase.IsFinal%2A> und muss `false`sein.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-516">For a method to be overridable, `IsVirtual` must be `true` and <xref:System.Reflection.MethodBase.IsFinal%2A> must be `false`.</span></span> <span data-ttu-id="a6b2b-517">Beispielsweise kann eine Methode nicht virtuell sein, aber Sie implementiert eine Schnittstellen Methode.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-517">For example, a method might be non-virtual, but it implements an interface method.</span></span> <span data-ttu-id="a6b2b-518">Der Common Language Runtime erfordert, dass alle Methoden, die Schnittstellenmember implementieren, `virtual`als gekennzeichnet werden müssen. Daher markiert der `virtual final`Compiler die Methode.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-518">The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`.</span></span> <span data-ttu-id="a6b2b-519">Es gibt Fälle, in denen eine Methode als `virtual` gekennzeichnet ist, aber immer noch nicht über schreibbar ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-519">So there are cases where a method is marked as `virtual` but is still not overridable.</span></span>  
  
 <span data-ttu-id="a6b2b-520">Um sicherzustellen, ob eine Methode über schreibbar ist, verwenden Sie Code wie den folgenden:</span><span class="sxs-lookup"><span data-stu-id="a6b2b-520">To establish with certainty whether a method is overridable, use code such as this:</span></span>  
  
```csharp  
if (MethodInfo.IsVirtual && !MethodInfo.IsFinal)  
```  
  
```vb  
If MethodInfo.IsVirtual AndAlso Not MethodInfo.IsFinal Then  
```  
  
 <span data-ttu-id="a6b2b-521">Wenn `IsVirtual` ist `false` oder `IsFinal` ist ,kanndieMethodenichtüberschriebenwerden.`true`</span><span class="sxs-lookup"><span data-stu-id="a6b2b-521">If `IsVirtual` is `false` or `IsFinal` is `true`, then the method cannot be overridden.</span></span>  
  
 <span data-ttu-id="a6b2b-522">Sie können bestimmen, ob die aktuelle Methode eine Methode in einer Basisklasse überschreibt, indem <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A?displayProperty=nameWithType> Sie die-Methode aufrufen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-522">You can determine whether the current method overrides a method in a base class by calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="a6b2b-523">Im folgenden Beispiel wird eine `IsOverride` -Methode implementiert, die dies bewirkt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-523">The following example implements an `IsOverride` method that does this.</span></span>  
  
 [!code-csharp[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/IsOverride1.cs#2)]
 [!code-vb[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/IsOverride1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="a6b2b-524">Im folgenden Beispiel wird `false` für `IsFinal`angezeigt, was Sie möglicherweise dazu führt `MyMethod` , dass über schreibbar ist.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-524">The following example displays `false` for `IsFinal`, which might lead you to think that `MyMethod` is overridable.</span></span> <span data-ttu-id="a6b2b-525">Der Code wird `false` gedruckt, `MyMethod` obwohl nicht als `virtual` markiert und kann daher nicht überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-525">The code prints `false` even though `MyMethod` is not marked `virtual` and thus cannot be overridden.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public abstract RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodHandle : RuntimeMethodHandle" Usage="System.Reflection.MethodBase.MethodHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.MethodHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-526">Ruft ein Handle für die interne Metadatendarstellung einer Methode ab.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-526">Gets a handle to the internal metadata representation of a method.</span></span></summary>
        <value><span data-ttu-id="a6b2b-527">Ein <see cref="T:System.RuntimeMethodHandle" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-527">A <see cref="T:System.RuntimeMethodHandle" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-528">Die Handles sind nur in der Anwendungsdomäne gültig, in der Sie abgerufen wurden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-528">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodImplementationFlags : System.Reflection.MethodImplAttributes" Usage="System.Reflection.MethodBase.MethodImplementationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-529">Ruft die <see cref="T:System.Reflection.MethodImplAttributes" />-Flags ab, die die Attribute einer Methodenimplementierung angeben.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-529">Gets the <see cref="T:System.Reflection.MethodImplAttributes" /> flags that specify the attributes of a method implementation.</span></span></summary>
        <value><span data-ttu-id="a6b2b-530">Die Methodenimplementierungsflags.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-530">The method implementation flags.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-531">Weitere Informationen finden Sie unter der <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A>-Methode.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-531">See the <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> method for more information.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.MethodBase left, System.Reflection.MethodBase right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.MethodBase left, class System.Reflection.MethodBase right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As MethodBase, right As MethodBase) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::MethodBase ^ left, System::Reflection::MethodBase ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.MethodBase * System.Reflection.MethodBase -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.MethodBase" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Reflection.MethodBase" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="a6b2b-532">Das erste zu vergleichende Objekt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-532">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="a6b2b-533">Das zweite zu vergleichende Objekt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-533">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="a6b2b-534">Gibt an, ob zwei <see cref="T:System.Reflection.MethodBase" />-Objekte gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-534">Indicates whether two <see cref="T:System.Reflection.MethodBase" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-535"><see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> gleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-535"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.MethodBase left, System.Reflection.MethodBase right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.MethodBase left, class System.Reflection.MethodBase right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As MethodBase, right As MethodBase) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::MethodBase ^ left, System::Reflection::MethodBase ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.MethodBase * System.Reflection.MethodBase -&gt; bool" Usage="System.Reflection.MethodBase.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.MethodBase" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Reflection.MethodBase" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="a6b2b-536">Das erste zu vergleichende Objekt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-536">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="a6b2b-537">Das zweite zu vergleichende Objekt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-537">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="a6b2b-538">Gibt an, ob zwei <see cref="T:System.Reflection.MethodBase" />-Objekte ungleich sind.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-538">Indicates whether two <see cref="T:System.Reflection.MethodBase" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-539"><see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-539"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _MethodBase.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBase.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _MethodBase.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBase.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_MethodBase::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rgszNames" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cNames" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rgDispId" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="a6b2b-540">Für zukünftige Verwendung reserviert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-540">Reserved for future use.</span></span> <span data-ttu-id="a6b2b-541">Muss IID_NULL sein.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-541">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="a6b2b-542">Das übergebene Array von zuzuordnenden Namen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-542">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="a6b2b-543">Die Anzahl der zuzuordnenden Namen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-543">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="a6b2b-544">Der Gebietsschemakontext, in dem die Namen interpretiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-544">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="a6b2b-545">Das vom Aufrufer zugewiesene Array, das die IDs entsprechend den Namen empfängt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-545">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="a6b2b-546">Ordnet eine Reihe von Namen einer entsprechenden Reihe von Dispatchbezeichnern zu.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-546">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-547">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code vorgesehen und sollte nicht aus verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-547">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a6b2b-548">Weitere Informationen zu `IDispatch::GetIDsOfNames`finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-548">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a6b2b-549">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-549">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.GetType">
      <MemberSignature Language="C#" Value="Type _MethodBase.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._MethodBase.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _MethodBase.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._MethodBase.GetType() = System::Runtime::InteropServices::_MethodBase::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6b2b-550">Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.Runtime.InteropServices._MethodBase.GetType" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-550">For a description of this member, see <see cref="M:System.Runtime.InteropServices._MethodBase.GetType" />.</span></span></summary>
        <returns><span data-ttu-id="a6b2b-551">Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.Runtime.InteropServices._MethodBase.GetType" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-551">For a description of this member, see <see cref="M:System.Runtime.InteropServices._MethodBase.GetType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-552">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-552">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-553">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-553">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _MethodBase.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBase.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _MethodBase.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBase.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_MethodBase::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="a6b2b-554">Die zurückzugebenden Typinformationen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-554">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="a6b2b-555">Der Gebietsschemabezeichner für die Typinformationen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-555">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="a6b2b-556">Empfängt einen Zeiger auf das angeforderte Objekt mit den Typinformationen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-556">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="a6b2b-557">Ruft die Typinformationen für ein Objekt ab, die dann zum Abrufen der Typinformationen für eine Schnittstelle verwendet werden können.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-557">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-558">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code vorgesehen und sollte nicht aus verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-558">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a6b2b-559">Weitere Informationen zu `IDispatch::GetTypeInfo`finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-559">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a6b2b-560">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-560">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _MethodBase.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBase.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _MethodBase.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBase.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_MethodBase::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="a6b2b-561">Zeigt auf einen Speicherort, der die Anzahl der Schnittstellen mit Typinformationen empfängt, die vom Objekt bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-561">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="a6b2b-562">Ruft die Anzahl der Schnittstellen mit Typinformationen ab, die von einem Objekt bereitgestellt werden (0 oder 1).</span><span class="sxs-lookup"><span data-stu-id="a6b2b-562">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-563">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code vorgesehen und sollte nicht aus verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-563">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a6b2b-564">Weitere Informationen zu `IDispatch::GetTypeInfoCount`finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-564">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a6b2b-565">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-565">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.Invoke">
      <MemberSignature Language="C#" Value="void _MethodBase.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBase.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _MethodBase.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBase.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_MethodBase::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="wFlags" Type="System.Int16" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pDispParams" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pVarResult" Type="System.IntPtr" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" Index="6" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="puArgErr" Type="System.IntPtr" Index="7" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="a6b2b-566">Bezeichnet den Member.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-566">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="a6b2b-567">Für zukünftige Verwendung reserviert.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-567">Reserved for future use.</span></span> <span data-ttu-id="a6b2b-568">Muss IID_NULL sein.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-568">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="a6b2b-569">Der Gebietsschemakontext, in dem Argumente interpretiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-569">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="a6b2b-570">Flags, die den Kontext des Aufrufs beschreiben.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-570">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="a6b2b-571">Ein Zeiger auf eine Struktur, die ein Array von Argumenten und ein Array von Argument-DISPIDs für benannte Argumente sowie Zähler für die Anzahl der Elemente in jedem Array enthält.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-571">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="a6b2b-572">Ein Verweis auf den Speicherort, an dem das Ergebnis gespeichert werden soll.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-572">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="a6b2b-573">Ein Zeiger auf eine Struktur mit Ausnahmeinformationen.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-573">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="a6b2b-574">Der Index des ersten Arguments mit einem Fehler.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-574">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="a6b2b-575">Stellt den Zugriff auf von einem Objekt verfügbar gemachte Eigenschaften und Methoden bereit.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-575">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-576">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code vorgesehen und sollte nicht aus verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-576">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a6b2b-577">Weitere Informationen zu `IDispatch::Invoke`finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-577">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a6b2b-578">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-578">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsAbstract">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsAbstract As Boolean Implements _MethodBase.IsAbstract" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsAbstract" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-579">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsAbstract" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-579">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsAbstract" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-580">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsAbstract" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-580">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsAbstract" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-581">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-581">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-582">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-582">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsAssembly">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsAssembly As Boolean Implements _MethodBase.IsAssembly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsAssembly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-583">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsAssembly" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-583">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsAssembly" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-584">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsAssembly" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-584">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsAssembly" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-585">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-585">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-586">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-586">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsConstructor">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsConstructor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsConstructor" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsConstructor As Boolean Implements _MethodBase.IsConstructor" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsConstructor { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsConstructor" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsConstructor</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-587">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsConstructor" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-587">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsConstructor" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-588">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsConstructor" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-588">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsConstructor" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-589">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-589">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-590">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-590">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsFamily">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsFamily" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFamily As Boolean Implements _MethodBase.IsFamily" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsFamily { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsFamily" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-591">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamily" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-591">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamily" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-592">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamily" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-592">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamily" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-593">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-593">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-594">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-594">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFamilyAndAssembly As Boolean Implements _MethodBase.IsFamilyAndAssembly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsFamilyAndAssembly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-595">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-595">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-596">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-596">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-597">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-597">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-598">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-598">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFamilyOrAssembly As Boolean Implements _MethodBase.IsFamilyOrAssembly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsFamilyOrAssembly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-599">Eine Beschreibung dieses Members finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-599">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-600">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-600">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-601">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-601">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-602">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-602">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsFinal">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsFinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsFinal" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFinal As Boolean Implements _MethodBase.IsFinal" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsFinal { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsFinal" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFinal</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-603">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsFinal" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-603">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFinal" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-604">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsFinal" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-604">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFinal" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-605">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-605">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-606">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-606">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsHideBySig">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsHideBySig { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsHideBySig" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsHideBySig As Boolean Implements _MethodBase.IsHideBySig" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsHideBySig { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsHideBySig" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsHideBySig</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-607">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsHideBySig" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-607">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsHideBySig" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-608">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsHideBySig" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-608">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsHideBySig" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-609">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-609">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-610">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-610">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsPrivate">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsPrivate As Boolean Implements _MethodBase.IsPrivate" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsPrivate { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsPrivate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-611">Eine Beschreibung dieses Members finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsPrivate" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-611">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsPrivate" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-612">Eine Beschreibung dieses Members finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsPrivate" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-612">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsPrivate" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-613">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-613">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-614">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-614">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsPublic">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsPublic As Boolean Implements _MethodBase.IsPublic" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-615">Eine Beschreibung dieses Members finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsPublic" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-615">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsPublic" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-616">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsPublic" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-616">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsPublic" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-617">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-617">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-618">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-618">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsSpecialName">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSpecialName As Boolean Implements _MethodBase.IsSpecialName" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-619">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsSpecialName" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-619">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsSpecialName" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-620">Eine Beschreibung dieses Members finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsSpecialName" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-620">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsSpecialName" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-621">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-621">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-622">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-622">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsStatic">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsStatic As Boolean Implements _MethodBase.IsStatic" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsStatic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsStatic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-623">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsStatic" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-623">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsStatic" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-624">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsStatic" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-624">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsStatic" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-625">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-625">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-626">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-626">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsVirtual">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsVirtual { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsVirtual" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsVirtual As Boolean Implements _MethodBase.IsVirtual" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsVirtual { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsVirtual" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsVirtual</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6b2b-627">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsVirtual" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-627">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsVirtual" />.</span></span></summary>
        <value><span data-ttu-id="a6b2b-628">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Runtime.InteropServices._MethodBase.IsVirtual" />.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-628">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsVirtual" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b2b-629">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-629">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a6b2b-630">Er kann nur verwendet werden, wenn die <xref:System.Reflection.MethodBase>-Instanz in eine <xref:System.Runtime.InteropServices._MethodBase>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="a6b2b-630">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

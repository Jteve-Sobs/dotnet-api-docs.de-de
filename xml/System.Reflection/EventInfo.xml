<Type Name="EventInfo" FullName="System.Reflection.EventInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4b9febba634eb0ec2b6f2075e8d054dba40b57da" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36543183" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EventInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit EventInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.EventInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventInfo&#xA;Inherits MemberInfo&#xA;Implements _EventInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_EventInfo" />
  <TypeSignature Language="F#" Value="type EventInfo = class&#xA;    inherit MemberInfo&#xA;    interface _EventInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._EventInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._EventInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ad218-101">Ermittelt die Attribute eines Ereignisses und ermöglicht den Zugriff auf die Metadaten des Ereignisses.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad218-101">Discovers the attributes of an event and provides access to event metadata.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-102">Verwenden der <xref:System.Reflection.EventInfo> Klasse, um Ereignisse zu überprüfen und um Ereignishandler zu verknüpfen, wie im Beispielcode für gezeigt die <xref:System.Reflection.EventInfo.AddEventHandler%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="ad218-102">Use the <xref:System.Reflection.EventInfo> class to inspect events and to hook up event handlers, as shown in the example code for the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad218-103"><xref:System.Reflection.EventInfo> ist nicht vorgesehen, die zum Auslösen von Ereignissen verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="ad218-103"><xref:System.Reflection.EventInfo> is not intended to be used to raise events.</span></span> <span data-ttu-id="ad218-104">Ein Objekt löst Ereignisse aus, wie von den internen Zustand vorgegeben.</span><span class="sxs-lookup"><span data-stu-id="ad218-104">An object raises events as dictated by its internal state.</span></span>  
  
 <span data-ttu-id="ad218-105">Ereignisse werden mit Delegaten verwendet.</span><span class="sxs-lookup"><span data-stu-id="ad218-105">Events are used with delegates.</span></span> <span data-ttu-id="ad218-106">Ein Ereignislistener instanziiert eine Ereignishandler-Delegat, der aufgerufen wird, wenn das Ereignis von einer Ereignisquelle ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="ad218-106">An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source.</span></span> <span data-ttu-id="ad218-107">Um eine Verbindung herzustellen, für die Ereignisquelle verwendet wurden, fügt der Ereignislistener dieser Delegat der Aufrufliste in der Quelle an.</span><span class="sxs-lookup"><span data-stu-id="ad218-107">In order to connect to the event source, the event listener adds this delegate to the invocation list on the source.</span></span> <span data-ttu-id="ad218-108">Wenn das Ereignis ausgelöst wird, wird die Invoke-Methode des Delegaten für Ereignishandler aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="ad218-108">When the event is raised, the invoke method of the event-handler delegate is called.</span></span> <span data-ttu-id="ad218-109">Sowohl Multicast- und einzelne Umwandlung ereignisbenachrichtigungen werden unterstützt.</span><span class="sxs-lookup"><span data-stu-id="ad218-109">Both multicast and single-cast event notifications are supported.</span></span> <span data-ttu-id="ad218-110">Die `Add` und `Remove` Methoden als auch die Ereignishandler Delegate-Klasse, die einem Ereignis zugeordneten muss in den Metadaten markiert werden.</span><span class="sxs-lookup"><span data-stu-id="ad218-110">The `Add` and `Remove` methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.</span></span>  
  
 <span data-ttu-id="ad218-111">Delegaten sind objektorientierte Funktionszeiger.</span><span class="sxs-lookup"><span data-stu-id="ad218-111">Delegates are object-oriented function pointers.</span></span> <span data-ttu-id="ad218-112">In C oder C++ ist ein Funktionszeiger einen Verweis auf eine Methode an.</span><span class="sxs-lookup"><span data-stu-id="ad218-112">In C or C++, a function pointer is a reference to a method.</span></span> <span data-ttu-id="ad218-113">Im Gegensatz zu den Funktionszeiger C- oder C++ ein Delegat enthält zwei Verweise: einen Verweis auf eine Methode und einem Verweis auf ein Objekt, das die Methode unterstützt.</span><span class="sxs-lookup"><span data-stu-id="ad218-113">In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method.</span></span> <span data-ttu-id="ad218-114">Delegaten können eine Methode aufrufen, ohne den Klassentyp, der deklariert oder erbt von der Methode.</span><span class="sxs-lookup"><span data-stu-id="ad218-114">Delegates can invoke a method without knowing the class type that declares or inherits the method.</span></span> <span data-ttu-id="ad218-115">Delegaten müssen lediglich Rückgabeliste für Typ und die Parameter der Methode kennen.</span><span class="sxs-lookup"><span data-stu-id="ad218-115">Delegates need only know the return type and parameter list of the method.</span></span>  
  
 <span data-ttu-id="ad218-116">Das Ereignismodell funktioniert ebenso gut für die einzelnen Umwandlung und Multicastdelegaten.</span><span class="sxs-lookup"><span data-stu-id="ad218-116">The event model works equally well for single-cast and multicast delegates.</span></span> <span data-ttu-id="ad218-117">Wenn der Delegat des aufrufen wird Methode aufgerufen, darf nur ein einzelnes Objekt eine Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="ad218-117">When the delegate's invoke method is called, only a single object will have a method called on it.</span></span> <span data-ttu-id="ad218-118">Multicast-Modifizierer kann auf eine Delegatdeklaration angewendet werden kann mehrere Methoden, die aufgerufen werden, wenn die Invoke-Methode der Delegat aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="ad218-118">A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.</span></span>  
  
 <span data-ttu-id="ad218-119">Aufrufen von <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> auf `EventInfo` bei der `inherit` Parameter `GetCustomAttributes` ist `true` die Typhierarchie nicht durchlaufen.</span><span class="sxs-lookup"><span data-stu-id="ad218-119">Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> on `EventInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy.</span></span> <span data-ttu-id="ad218-120">Verwendung <xref:System.Attribute?displayProperty=nameWithType> benutzerdefinierte Attribute geerbt.</span><span class="sxs-lookup"><span data-stu-id="ad218-120">Use <xref:System.Attribute?displayProperty=nameWithType> to inherit custom attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad218-121">Der folgende code Ruft eine <xref:System.Reflection.EventInfo> -Objekt für die <xref:System.Windows.Forms.Control.Click> -Ereignis für die <xref:System.Windows.Forms.Button> Klasse.</span><span class="sxs-lookup"><span data-stu-id="ad218-121">The following code gets an <xref:System.Reflection.EventInfo> object for the <xref:System.Windows.Forms.Control.Click> event of the <xref:System.Windows.Forms.Button> class.</span></span>  
  
 [!code-cpp[type_getevent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[type_getevent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[type_getevent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="ad218-122">für volle Vertrauenswürdigkeit für erben.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad218-122">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="ad218-123">Diese Klasse kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad218-123">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <threadsafe>
      <span data-ttu-id="ad218-124">Dieser Typ ist threadsicher.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad218-124">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <span data-ttu-id="ad218-125">Wird von <para> geerbt, müssen die folgenden Member überschrieben werden: <see langword="EventInfo" />, <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />, <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" /> und <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />.</para></span>
      <span class="sxs-lookup">
        <span data-stu-id="ad218-125">
          <para>When you inherit from <see langword="EventInfo" />, you must override the following members: <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />, <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />, and <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />.</para>
        </span>
      </span>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad218-126">Initialisiert eine neue Instanz der <see langword="EventInfo" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-126">Initializes a new instance of the <see langword="EventInfo" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ad218-127">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-127">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ad218-128">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-128">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="AddEventHandler">
      <MemberSignature Language="C#" Value="public virtual void AddEventHandler (object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddEventHandler (target As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddEventHandler : obj * Delegate -&gt; unit&#xA;override this.AddEventHandler : obj * Delegate -&gt; unit" Usage="eventInfo.AddEventHandler (target, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.AddEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="ad218-129">Die Ereignisquelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-129">The event source.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="ad218-130">Kapselt eine Methode oder Methoden ein, die aufgerufen werden sollen, wenn das Ereignis vom Ziel ausgelöst wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-130">Encapsulates a method or methods to be invoked when the event is raised by the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-131">Fügt einen Ereignishandler einer Ereignisquelle hinzu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-131">Adds an event handler to an event source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-132">Diese Methode versucht, ein Delegat, der das Ereignis für das Zielobjekt synchronisieren hinzuzufügen.</span><span class="sxs-lookup"><span data-stu-id="ad218-132">This method attempts to add a delegate to synchronize the event on the target object.</span></span>  
  
 <span data-ttu-id="ad218-133">Jedes Mal, wenn das Ereignis, durch den Target-Parameter ausgelöst wird sind die Methoden gekapselt, die vom Handler aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="ad218-133">Each time the event is raised by the target parameter, the method or methods encapsulated by the handler are invoked.</span></span>  
  
<span data-ttu-id="ad218-134">Sie verwenden möglicherweise die `AddEventHander` Methode, wenn Sie einen Typ laden, nachdem das Programm bereits kompiliert wird, wenn es nicht möglich, +=-Syntax von c# oder Visual Basic verwenden, `WithEvents` und `Handles` Schlüsselwörter, um das Ereignis zu verknüpfen.</span><span class="sxs-lookup"><span data-stu-id="ad218-134">You might use the `AddEventHander` method when you load a type after the program is already compiled, when it is not possible to use the C# += syntax or the Visual Basic `WithEvents` and `Handles` keywords to hook up the event.</span></span>   
  
## Examples  
 <span data-ttu-id="ad218-135">Das folgende Beispiel erstellt eine Instanz von der <xref:System.Timers.Timer?displayProperty=nameWithType> -Klasse, erstellt einen Ereignishandler, die mithilfe einer dynamischen Assembly und der dynamische Ereignishandler verknüpft.</span><span class="sxs-lookup"><span data-stu-id="ad218-135">The following example creates an instance of the <xref:System.Timers.Timer?displayProperty=nameWithType> class, creates an event handler using a dynamic assembly, and hooks up the dynamic event handler.</span></span> <span data-ttu-id="ad218-136">Alle Aktionen sind mit später Bindung ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="ad218-136">All actions are performed using late binding.</span></span>  
  
 <span data-ttu-id="ad218-137">Die <xref:System.Timers.Timer> Instanz befindet sich in einer Variablen vom Typ <xref:System.Object>, und der gesamte Code, der greift auf die <xref:System.Timers.Timer> wird so spät gebunden.</span><span class="sxs-lookup"><span data-stu-id="ad218-137">The <xref:System.Timers.Timer> instance is stored in a variable of type <xref:System.Object>, and all code that accesses the <xref:System.Timers.Timer> does so late-bound.</span></span> <span data-ttu-id="ad218-138">Im Beispiel wird die <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> Methode zum Abrufen der <xref:System.Timers.Timer.Elapsed> -Ereignis und die <xref:System.Reflection.EventInfo.EventHandlerType%2A> Eigenschaft, um den Delegattyp für das Ereignis abzurufen.</span><span class="sxs-lookup"><span data-stu-id="ad218-138">The example uses the <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method to get the <xref:System.Timers.Timer.Elapsed> event, and the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to get the delegate type for the event.</span></span>  
  
 <span data-ttu-id="ad218-139">Im Beispiel wird eine <xref:System.Reflection.MethodInfo> für die `Invoke` Methode des Delegattyps und erhält die Signatur des Delegaten aus der <xref:System.Reflection.MethodInfo> Instanz.</span><span class="sxs-lookup"><span data-stu-id="ad218-139">The example gets a <xref:System.Reflection.MethodInfo> for the `Invoke` method of the delegate type and obtains the signature of the delegate from the <xref:System.Reflection.MethodInfo> instance.</span></span> <span data-ttu-id="ad218-140">Das Beispiel erstellt dann eine dynamische Assembly mit einem Modul mit einem einzelnen Typ mit dem Namen `Handler` und gibt den Typ einer `static` Methode (`Shared` Methode in Visual Basic) mit dem Namen `DynamicHandler` , die das Ereignis verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="ad218-140">The example then creates a dynamic assembly with one module containing a single type named `Handler` and gives the type a `static` method (`Shared` method in Visual Basic) named `DynamicHandler` that handles the event.</span></span>  
  
 <span data-ttu-id="ad218-141">Nachdem der dynamische Typ erstellt wurde, wird im Beispiel wird eine <xref:System.Reflection.MethodInfo> für die abgeschlossene Methode und verwendet, um eine Delegatinstanz zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="ad218-141">After the dynamic type is created, the example gets a <xref:System.Reflection.MethodInfo> for the finished method and uses it to create a delegate instance.</span></span> <span data-ttu-id="ad218-142">Diese Instanz wird übergeben, um die <xref:System.Reflection.EventInfo.AddEventHandler%2A> Methode, um das Ereignis zu verknüpfen.</span><span class="sxs-lookup"><span data-stu-id="ad218-142">This instance is passed to the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method to hook up the event.</span></span> <span data-ttu-id="ad218-143">Die programmausführung wird dann um das Ereignis ausgelöst wurde, werden zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="ad218-143">The program then pauses to allow the event to be raised.</span></span>  
  
 [!code-csharp[AddEventHandler#1](~/samples/snippets/csharp/VS_Snippets_CLR/AddEventHandler/cs/source.cs)]
 [!code-vb[AddEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddEventHandler/vb/source.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ad218-144">Das Ereignis besitzt keinen öffentlichen <see langword="add" />-Accessor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-144">The event does not have a public <see langword="add" /> accessor.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ad218-145">Der übergebene Handler kann nicht verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-145">The handler that was passed in cannot be used.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="ad218-146">
            <block subset="none" type="note">
              <para> Fangen Sie in <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET für Windows Store-Apps</see> oder der <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">portablen Klassenbibliothek</see> stattdessen die Basisklassenausnahme <see cref="T:System.MemberAccessException" /> ab.  </para>
            </block>  Der Aufrufer verfügt über keine Zugriffsberechtigung für diesen Member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-146">
              <block subset="none" type="note">
                <para> In <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  </para>
              </block>  The caller does not have access permission to the member.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="ad218-147">
            <block subset="none" type="note">
              <para> Fangen Sie in <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET für Windows Store-Apps</see> oder der <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">portablen Klassenbibliothek</see> stattdessen <see cref="T:System.Exception" /> ab.  </para>
            </block>  Der <paramref name="target" />-Parameter ist <see langword="null" />, und das Ereignis ist nicht statisch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-147">
              <block subset="none" type="note">
                <para> In <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.  </para>
              </block>  The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span>
          </span>
          <span data-ttu-id="ad218-148">Oder:  Die <see cref="T:System.Reflection.EventInfo" /> ist im Ziel nicht deklariert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-148">-or-  The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ad218-149">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-149">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ad218-150">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-150">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="AddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo AddMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo AddMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.AddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AddMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ AddMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AddMethod : System.Reflection.MethodInfo" Usage="System.Reflection.EventInfo.AddMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad218-151">Ruft das <see cref="T:System.Reflection.MethodInfo" />-Objekt für die <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" />-Methode des Ereignisses, einschließlich nicht öffentliche Methoden ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-151">Gets the <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, including non-public methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad218-152">Das <see cref="T:System.Reflection.MethodInfo" />-Objekt für die <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" />-Methode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-152">The <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-153">Diese Eigenschaft entspricht dem Aufrufen der <xref:System.Reflection.EventInfo.GetAddMethod%2A> mit einem Wert von `true`.</span><span class="sxs-lookup"><span data-stu-id="ad218-153">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetAddMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.EventAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As EventAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::EventAttributes Attributes { System::Reflection::EventAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.EventAttributes" Usage="System.Reflection.EventInfo.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad218-154">Ruft die Attribute für dieses Ereignis ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-154">Gets the attributes for this event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad218-155">Die Schreibschutzattribute für dieses Ereignis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-155">The read-only attributes for this event.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-156">Die Attribute werden in einer 4-Byte-Ganzzahl, die eine Bitmap der Attribute für das Ereignis, das von dieser Instanz reflektiert festgelegt darstellt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="ad218-156">The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="eventInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ad218-157">Ein Objekt, das mit dieser Instanz verglichen werden soll, oder <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-157">An object to compare with this instance, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-158">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-158">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-159">
            <see langword="true" />, wenn <paramref name="obj" /> dem Typ und dem Wert dieser Instanz entspricht, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-159">
              <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerType">
      <MemberSignature Language="C#" Value="public virtual Type EventHandlerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EventHandlerType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.EventHandlerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventHandlerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ EventHandlerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EventHandlerType : Type" Usage="System.Reflection.EventInfo.EventHandlerType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.EventHandlerType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad218-160">Ruft das <see langword="Type" />-Objekt des zugrunde liegenden Ereignishandlerdelegaten ab, der dem jeweiligen Ereignis zugeordnet ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-160">Gets the <see langword="Type" /> object of the underlying event-handler delegate associated with this event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad218-161">Ein schreibgeschütztes <see langword="Type" />-Objekt, das den Ereignishandler des Delegaten darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-161">A read-only <see langword="Type" /> object representing the delegate event handler.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ad218-162">Im folgenden Beispiel wird die <xref:System.Reflection.EventInfo.EventHandlerType%2A> Eigenschaft zum Ermitteln des Delegattyp eines Ereignisses und die Parametertypen anzuzeigen.</span><span class="sxs-lookup"><span data-stu-id="ad218-162">The following example uses the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to discover the delegate type of an event and to display its parameter types.</span></span>  
  
 <span data-ttu-id="ad218-163">Im Beispiel definiert einen Delegaten, der mit dem Namen `MyDelegate` und ein Ereignis namens `ev` vom Typ `MyDelegate`.</span><span class="sxs-lookup"><span data-stu-id="ad218-163">The example defines a delegate named `MyDelegate` and an event named `ev` of type `MyDelegate`.</span></span> <span data-ttu-id="ad218-164">Der Code in der `Main` Methode ermittelt die Ereignissignatur durch Abrufen den Delegattyp des Ereignisses, Abrufen der `Invoke` Methode der Delegattyp, und klicken Sie dann abrufen und Anzeigen von den Parametern.</span><span class="sxs-lookup"><span data-stu-id="ad218-164">The code in the `Main` method discovers the event signature by getting the delegate type of the event, getting the `Invoke` method of the delegate type, and then retrieving and displaying the parameters.</span></span>  
  
 [!code-cpp[eventarg#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventArg/CPP/eventarg.cpp#1)]
 [!code-csharp[eventarg#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventArg/CS/eventarg.cs#1)]
 [!code-vb[eventarg#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventArg/VB/eventarg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="ad218-165">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-165">The caller does not have the required permission.</span>
          </span>
        </exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAddMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ad218-166">Gibt die Methode zurück, die zum Hinzufügen eines Ereignishandlerdelegaten zur Ereignisquelle verwendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-166">Returns the method used to add an event handler delegate to the event source.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetAddMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetAddMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad218-167">Gibt die Methode zurück, die zum Hinzufügen eines Ereignishandlerdelegaten zur Ereignisquelle verwendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-167">Returns the method used to add an event handler delegate to the event source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-168">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die Methode zum Hinzufügen eines Ereignishandlerdelegaten zur Ereignisquelle darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-168">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-169">`GetAddMethod` Initialisiert und fügt das Ereignis subscribe-Methode.</span><span class="sxs-lookup"><span data-stu-id="ad218-169">`GetAddMethod` initializes and adds the event subscribe method.</span></span> <span data-ttu-id="ad218-170">Die `AddEventHandler` Methode wird verwendet, um die Aufrufliste, die aus einer Ereignisquelle einen Delegaten für Ereignishandler hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="ad218-170">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad218-171">Normalerweise weist die Methode die folgende Signatur:</span><span class="sxs-lookup"><span data-stu-id="ad218-171">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ad218-172">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-172">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ad218-173">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-173">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetAddMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAddMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetAddMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : bool -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetAddMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="ad218-174">
            <see langword="true" />, wenn nicht öffentliche Methoden zurückgegeben werden können; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-174">
              <see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-175">Ruft beim Überschreiben in einer abgeleiteten Klasse das <see langword="MethodInfo" />-Objekt für die <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" />-Methode des Ereignisses ab und gibt an, ob nicht öffentliche Methoden zurückgegeben werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-175">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, specifying whether to return non-public methods.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-176">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die Methode zum Hinzufügen eines Ereignishandlerdelegaten zur Ereignisquelle darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-176">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-177">Die `GetAddMethod` initialisiert und fügt das Ereignis subscribe-Methode als boolescher Wert.</span><span class="sxs-lookup"><span data-stu-id="ad218-177">The `GetAddMethod` initializes and adds the event subscribe method as a Boolean value.</span></span> <span data-ttu-id="ad218-178">Die `AddEventHandler` Methode wird verwendet, um die Aufrufliste, die aus einer Ereignisquelle einen Delegaten für Ereignishandler hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="ad218-178">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad218-179">Normalerweise weist die Methode die folgende Signatur:</span><span class="sxs-lookup"><span data-stu-id="ad218-179">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="ad218-180">
            <paramref name="nonPublic" /> ist <see langword="true" />, die zum Hinzufügen von Ereignishandlerdelegaten verwendete Methode ist nicht öffentlich, und der Aufrufer verfügt nicht über die Berechtigung zum Reflektieren nicht öffentlicher Methoden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-180">
              <paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ad218-181">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-181">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ad218-182">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-182">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="eventInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad218-183">Gibt den Hashcode für diese Instanz zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-183">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-184">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-184">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetOtherMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ad218-185">Gibt die Methoden zurück, die einem Ereignis in MSIL mit der <see langword=".other" />-Direktive zugeordnet wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-185">Returns the methods that were associated with an event in MSIL using the <see langword=".other" /> directive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetOtherMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo[] GetOtherMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOtherMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods();" />
      <MemberSignature Language="F#" Value="member this.GetOtherMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="eventInfo.GetOtherMethods " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad218-186">Gibt die öffentlichen Methoden zurück, die einem Ereignis in den Metadaten mit der <see langword=".other" />-Direktive zugeordnet wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-186">Returns the public methods that have been associated with an event in metadata using the <see langword=".other" /> directive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-187">Ein Array von <see cref="T:System.Reflection.EventInfo" />-Objekten, die die öffentlichen Methoden darstellen, die dem Ereignis in den Metadaten mit der <see langword=".other" />-Direktive zugeordnet wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-187">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public methods that have been associated with the event in metadata by using the <see langword=".other" /> directive.</span>
          </span>
          <span data-ttu-id="ad218-188">Wenn keine solchen öffentlichen Methoden vorhanden sind, wird ein leeres Array zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-188">If there are no such public methods, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-189">Die Metadaten für ein Ereignis kann vier Arten von Methoden mit dem Ereignis zuordnen:</span><span class="sxs-lookup"><span data-stu-id="ad218-189">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="ad218-190">Die `.addon` Richtlinie gibt die Methode verwendet, um Ereignishandler hinzuzufügen.</span><span class="sxs-lookup"><span data-stu-id="ad218-190">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="ad218-191">Verwenden der <xref:System.Reflection.EventInfo.GetAddMethod%2A> Methode zum Abrufen einer <xref:System.Reflection.EventInfo> für diese Methode.</span><span class="sxs-lookup"><span data-stu-id="ad218-191">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="ad218-192">Die `.removeon` Richtlinie gibt die Methode verwendet, um Ereignishandler zu trennen.</span><span class="sxs-lookup"><span data-stu-id="ad218-192">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="ad218-193">Verwenden der <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> Methode zum Abrufen einer <xref:System.Reflection.EventInfo> für diese Methode.</span><span class="sxs-lookup"><span data-stu-id="ad218-193">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="ad218-194">Die `.fire` -Direktive gibt die Methode zum Auslösen des Ereignisses an.</span><span class="sxs-lookup"><span data-stu-id="ad218-194">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="ad218-195">Verwenden der <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> Methode zum Abrufen einer <xref:System.Reflection.EventInfo> für diese Methode.</span><span class="sxs-lookup"><span data-stu-id="ad218-195">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="ad218-196">Die `.other` Richtlinie gibt an, alle anderen Methoden, die dem Ereignis zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="ad218-196">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="ad218-197">Verwenden der <xref:System.Reflection.EventInfo.GetOtherMethods%2A> Methode zum Abrufen eines Arrays von <xref:System.Reflection.EventInfo> -Objekten für diese Methoden.</span><span class="sxs-lookup"><span data-stu-id="ad218-197">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="ad218-198">Die Methoden, die für ein Ereignis mit der `.other` Richtlinie haben keine besondere Bedeutung für die Laufzeit.</span><span class="sxs-lookup"><span data-stu-id="ad218-198">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="ad218-199">Verwenden Sie die C#- und Visual Basic-Compiler nicht die `.other` Richtlinie.</span><span class="sxs-lookup"><span data-stu-id="ad218-199">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo[] GetOtherMethods (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetOtherMethods(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOtherMethods (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetOtherMethods : bool -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetOtherMethods : bool -&gt; System.Reflection.MethodInfo[]" Usage="eventInfo.GetOtherMethods nonPublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="ad218-200">
            <see langword="true" />, wenn nicht öffentliche Methoden eingeschlossen werden sollen, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-200">
              <see langword="true" /> to include non-public methods; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-201">Gibt die Methoden zurück, die dem Ereignis in den Metadaten mit der <see langword=".other" />-Direktive zugeordnet wurden und gibt an, ob nicht öffentliche Methoden eingeschlossen werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-201">Returns the methods that have been associated with the event in metadata using the <see langword=".other" /> directive, specifying whether to include non-public methods.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-202">Ein Array von <see cref="T:System.Reflection.EventInfo" />-Objekten, die die Methoden darstellen, die einem Ereignis in den Metadaten mit der <see langword=".other" />-Direktive zugeordnet wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-202">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing methods that have been associated with an event in metadata by using the <see langword=".other" /> directive.</span>
          </span>
          <span data-ttu-id="ad218-203">Wenn keine Methoden vorhanden sind, die mit der Spezifikation übereinstimmen, wird ein leeres Array zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-203">If there are no methods matching the specification, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-204">Die Metadaten für ein Ereignis kann vier Arten von Methoden mit dem Ereignis zuordnen:</span><span class="sxs-lookup"><span data-stu-id="ad218-204">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="ad218-205">Die `.addon` Richtlinie gibt die Methode verwendet, um Ereignishandler hinzuzufügen.</span><span class="sxs-lookup"><span data-stu-id="ad218-205">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="ad218-206">Verwenden der <xref:System.Reflection.EventInfo.GetAddMethod%2A> Methode zum Abrufen einer <xref:System.Reflection.EventInfo> für diese Methode.</span><span class="sxs-lookup"><span data-stu-id="ad218-206">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="ad218-207">Die `.removeon` Richtlinie gibt die Methode verwendet, um Ereignishandler zu trennen.</span><span class="sxs-lookup"><span data-stu-id="ad218-207">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="ad218-208">Verwenden der <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> Methode zum Abrufen einer <xref:System.Reflection.EventInfo> für diese Methode.</span><span class="sxs-lookup"><span data-stu-id="ad218-208">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="ad218-209">Die `.fire` -Direktive gibt die Methode zum Auslösen des Ereignisses an.</span><span class="sxs-lookup"><span data-stu-id="ad218-209">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="ad218-210">Verwenden der <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> Methode zum Abrufen einer <xref:System.Reflection.EventInfo> für diese Methode.</span><span class="sxs-lookup"><span data-stu-id="ad218-210">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="ad218-211">Die `.other` Richtlinie gibt an, alle anderen Methoden, die dem Ereignis zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="ad218-211">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="ad218-212">Verwenden der <xref:System.Reflection.EventInfo.GetOtherMethods%2A> Methode zum Abrufen eines Arrays von <xref:System.Reflection.EventInfo> -Objekten für diese Methoden.</span><span class="sxs-lookup"><span data-stu-id="ad218-212">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="ad218-213">Die Methoden, die für ein Ereignis mit der `.other` Richtlinie haben keine besondere Bedeutung für die Laufzeit.</span><span class="sxs-lookup"><span data-stu-id="ad218-213">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="ad218-214">Verwenden Sie die C#- und Visual Basic-Compiler nicht die `.other` Richtlinie.</span><span class="sxs-lookup"><span data-stu-id="ad218-214">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="ad218-215">Diese Methode ist nicht implementiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-215">This method is not implemented.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRaiseMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ad218-216">Gibt die Methode zurück, die beim Auslösen des Ereignisses aufgerufen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-216">Returns the method that is called when the event is raised.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRaiseMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRaiseMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRaiseMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetRaiseMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetRaiseMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRaiseMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad218-217">Gibt die Methode zurück, die beim Auslösen des Ereignisses aufgerufen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-217">Returns the method that is called when the event is raised.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-218">Die Methode, die beim Auslösen des Ereignisses aufgerufen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-218">The method that is called when the event is raised.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-219">Diese Methode gibt i. d. r. `null` für Ereignisse, die mit dem c# deklariert `event` Schlüsselwort oder Visual Basic `Event` Schlüsselwort.</span><span class="sxs-lookup"><span data-stu-id="ad218-219">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="ad218-220">Dies ist, da die C#- und Visual Basic-Compiler keine solche Methode standardmäßig generieren.</span><span class="sxs-lookup"><span data-stu-id="ad218-220">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ad218-221">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-221">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ad218-222">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-222">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRaiseMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRaiseMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRaiseMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetRaiseMethod : bool -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRaiseMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="ad218-223">
            <see langword="true" />, wenn nicht öffentliche Methoden zurückgegeben werden können; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-223">
              <see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-224">Gibt beim Überschreiben in einer abgeleiteten Klasse die Methode zurück, die beim Auslösen des Ereignisses aufgerufen wird, und gibt an, ob nicht öffentliche Methoden zurückgegeben werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-224">When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-225">Ein <see langword="MethodInfo" />-Objekt, das beim Auslösen des Ereignisses aufgerufen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-225">A <see langword="MethodInfo" /> object that was called when the event was raised.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-226">Diese Methode gibt i. d. r. `null` für Ereignisse, die mit dem c# deklariert `event` Schlüsselwort oder Visual Basic `Event` Schlüsselwort.</span><span class="sxs-lookup"><span data-stu-id="ad218-226">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="ad218-227">Dies ist, da die C#- und Visual Basic-Compiler keine solche Methode standardmäßig generieren.</span><span class="sxs-lookup"><span data-stu-id="ad218-227">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="ad218-228">
            <paramref name="nonPublic" /> ist <see langword="true" />, die zum Hinzufügen von Ereignishandlerdelegaten verwendete Methode ist nicht öffentlich, und der Aufrufer verfügt nicht über die Berechtigung zum Reflektieren nicht öffentlicher Methoden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-228">
              <paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ad218-229">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-229">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ad218-230">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-230">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRemoveMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ad218-231">Gibt die Methode zurück, die zum Entfernen eines Ereignishandlerdelegaten aus der Ereignisquelle verwendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-231">Returns the method used to remove an event handler delegate from the event source.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRemoveMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemoveMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRemoveMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetRemoveMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetRemoveMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRemoveMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad218-232">Gibt die Methode zurück, die zum Entfernen eines Ereignishandlerdelegaten aus der Ereignisquelle verwendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-232">Returns the method used to remove an event handler delegate from the event source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-233">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die Methode zum Entfernen eines Ereignishandlerdelegaten aus der Ereignisquelle darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-233">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ad218-234">Normalerweise weist die Methode die folgende Signatur:</span><span class="sxs-lookup"><span data-stu-id="ad218-234">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ad218-235">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-235">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ad218-236">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-236">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRemoveMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRemoveMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRemoveMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetRemoveMethod : bool -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRemoveMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="ad218-237">
            <see langword="true" />, wenn nicht öffentliche Methoden zurückgegeben werden können; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-237">
              <see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-238">Ruft beim Überschreiben in einer abgeleiteten Klasse das <see langword="MethodInfo" />-Objekt zum Entfernen einer Methode des Ereignisses ab und gibt an, ob nicht öffentliche Methoden zurückgegeben werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-238">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for removing a method of the event, specifying whether to return non-public methods.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-239">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die Methode zum Entfernen eines Ereignishandlerdelegaten aus der Ereignisquelle darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-239">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ad218-240">Normalerweise weist die Methode die folgende Signatur:</span><span class="sxs-lookup"><span data-stu-id="ad218-240">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="ad218-241">
            <paramref name="nonPublic" /> ist <see langword="true" />, die zum Hinzufügen von Ereignishandlerdelegaten verwendete Methode ist nicht öffentlich, und der Aufrufer verfügt nicht über die Berechtigung zum Reflektieren nicht öffentlicher Methoden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-241">
              <paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ad218-242">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-242">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ad218-243">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-243">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsMulticast">
      <MemberSignature Language="C#" Value="public virtual bool IsMulticast { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMulticast" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsMulticast" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMulticast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMulticast { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMulticast : bool" Usage="System.Reflection.EventInfo.IsMulticast" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsMulticast</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad218-244">Ruft einen Wert ab, der angibt, ob es sich um ein Multicastereignis handelt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-244">Gets a value indicating whether the event is multicast.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad218-245">
            <see langword="true" />, wenn der Delegat eine Instanz eines Multicastdelegaten ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-245">
              <see langword="true" /> if the delegate is an instance of a multicast delegate; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="ad218-246">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-246">The caller does not have the required permission.</span>
          </span>
        </exception>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Reflection.EventInfo.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad218-247">Ruft einen Wert ab, der angibt, ob <see langword="EventInfo" /> einen Namen mit einer speziellen Bedeutung besitzt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-247">Gets a value indicating whether the <see langword="EventInfo" /> has a name with a special meaning.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad218-248">
            <see langword="true" />, wenn das Ereignis einen besonderen Namen besitzt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-248">
              <see langword="true" /> if this event has a special name; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-249">Diese Eigenschaft bestimmt, ob der Name eines Ereignisses eine besondere Bedeutung hat.</span><span class="sxs-lookup"><span data-stu-id="ad218-249">This property determines whether the event's name has a special meaning.</span></span> <span data-ttu-id="ad218-250">Namen, die beginnen mit einem Unterstrich (_), Eigenschaftenaccessoren und Operatoren überladen von Methoden enthalten, sind Beispiele für Namen, die von einigen Compilern möglicherweise eine besondere Behandlung erfordern.</span><span class="sxs-lookup"><span data-stu-id="ad218-250">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventAttributes" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Reflection.EventInfo.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad218-251">Ruft einen <see cref="T:System.Reflection.MemberTypes" />-Wert ab, der angibt, dass dieser Member ein Ereignis ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-251">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad218-252">Ein <see cref="T:System.Reflection.MemberTypes" />-Wert, der angibt, dass dieser Member ein Ereignis ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-252">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-253">Diese Eigenschaft überschreibt <xref:System.Reflection.MemberInfo.MemberType%2A>.</span><span class="sxs-lookup"><span data-stu-id="ad218-253">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="ad218-254">Wenn Sie daher eine Reihe von untersuchen <xref:System.Reflection.MemberInfo> Objekte – z. B. das zurückgegebene Array <xref:System.Type.GetMembers%2A> – die <xref:System.Reflection.MemberInfo.MemberType%2A> -Eigenschaft gibt <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> nur, wenn ein angegebenes Element ein Ereignis ist.</span><span class="sxs-lookup"><span data-stu-id="ad218-254">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> only when a given member is an event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.EventInfo * System.Reflection.EventInfo -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="ad218-255">Das erste zu vergleichende Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-255">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="ad218-256">Das zweite zu vergleichende Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-256">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-257">Gibt an, ob zwei <see cref="T:System.Reflection.EventInfo" />-Objekte gleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-257">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-258">
            <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> gleich sind, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-258">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.EventInfo * System.Reflection.EventInfo -&gt; bool" Usage="System.Reflection.EventInfo.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="ad218-259">Das erste zu vergleichende Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-259">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="ad218-260">Das zweite zu vergleichende Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-260">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-261">Gibt an, ob zwei <see cref="T:System.Reflection.EventInfo" />-Objekte ungleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-261">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-262">
            <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-262">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RaiseMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RaiseMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RaiseMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RaiseMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RaiseMethod : System.Reflection.MethodInfo" Usage="System.Reflection.EventInfo.RaiseMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad218-263">Ruft die Methode ab, die beim Auslösen des Ereignisses aufgerufen wird, einschließlich nicht-öffentlicher Methoden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-263">Gets the method that is called when the event is raised, including non-public methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad218-264">Die Methode, die beim Auslösen des Ereignisses aufgerufen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-264">The method that is called when the event is raised.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-265">Diese Eigenschaft entspricht dem Aufrufen der <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> mit einem Wert von `true`.</span><span class="sxs-lookup"><span data-stu-id="ad218-265">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventHandler">
      <MemberSignature Language="C#" Value="public virtual void RemoveEventHandler (object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveEventHandler (target As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventHandler : obj * Delegate -&gt; unit&#xA;override this.RemoveEventHandler : obj * Delegate -&gt; unit" Usage="eventInfo.RemoveEventHandler (target, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.RemoveEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="ad218-266">Die Ereignisquelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-266">The event source.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="ad218-267">Der Delegat, dessen Zuordnung zu den Ereignissen, die vom Ziel ausgelöst werden, aufgehoben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-267">The delegate to be disassociated from the events raised by target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-268">Entfernt einen Ereignishandler aus einer Ereignisquelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-268">Removes an event handler from an event source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-269">Diese Methode versucht, die der Delegat nicht entfernt, die dieses Ereignis für das Zielobjekt synchronisiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="ad218-269">This method attempts to remove the delegate that may synchronize this event on the target object.</span></span>  
  
 <span data-ttu-id="ad218-270">Wenn ein Ereignis ausgelöst wird, vom Ziel, Methode oder Methoden, die durch gekapselte `handler` wird nicht mehr aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="ad218-270">When an event is raised by target, the method or methods encapsulated by `handler` will no longer be invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ad218-271">Das Ereignis besitzt keinen öffentlichen <see langword="remove" />-Accessor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-271">The event does not have a public <see langword="remove" /> accessor.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ad218-272">Der übergebene Handler kann nicht verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-272">The handler that was passed in cannot be used.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="ad218-273">
            <block subset="none" type="note">
              <para> Fangen Sie in <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET für Windows Store-Apps</see> oder der <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">portablen Klassenbibliothek</see> stattdessen <see cref="T:System.Exception" /> ab.  </para>
            </block>  Der <paramref name="target" />-Parameter ist <see langword="null" />, und das Ereignis ist nicht statisch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-273">
              <block subset="none" type="note">
                <para> In <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.  </para>
              </block>  The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span>
          </span>
          <span data-ttu-id="ad218-274">Oder:  Die <see cref="T:System.Reflection.EventInfo" /> ist im Ziel nicht deklariert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-274">-or-  The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="ad218-275">
            <block subset="none" type="note">
              <para> Fangen Sie in <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET für Windows Store-Apps</see> oder der <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">portablen Klassenbibliothek</see> stattdessen die Basisklassenausnahme <see cref="T:System.MemberAccessException" /> ab.  </para>
            </block>  Der Aufrufer verfügt über keine Zugriffsberechtigung für diesen Member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-275">
              <block subset="none" type="note">
                <para> In <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  </para>
              </block>  The caller does not have access permission to the member.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ad218-276">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-276">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ad218-277">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-277">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="RemoveMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RemoveMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RemoveMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoveMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RemoveMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoveMethod : System.Reflection.MethodInfo" Usage="System.Reflection.EventInfo.RemoveMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad218-278">Ruft das <see langword="MethodInfo" />-Objekt zum Entfernen einer Methode des Ereignisses einschließlich nicht öffentlicher Methoden ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-278">Gets the <see langword="MethodInfo" /> object for removing a method of the event, including non-public methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad218-279">Das <see langword="MethodInfo" />-Objekt zum Entfernen einer Methode des Ereignisses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-279">The <see langword="MethodInfo" /> object for removing a method of the event.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-280">Diese Eigenschaft entspricht dem Aufrufen der <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> mit einem Wert von `true`.</span><span class="sxs-lookup"><span data-stu-id="ad218-280">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _EventInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _EventInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_EventInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="ad218-281">Für zukünftige Verwendung reserviert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-281">Reserved for future use.</span>
          </span>
          <span data-ttu-id="ad218-282">Muss IID_NULL sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-282">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="ad218-283">Das übergebene Array von zuzuordnenden Namen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-283">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="ad218-284">Die Anzahl der zuzuordnenden Namen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-284">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="ad218-285">Der Gebietsschemakontext, in dem die Namen interpretiert werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-285">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="ad218-286">Das vom Aufrufer zugewiesene Array, das die IDs entsprechend den Namen empfängt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-286">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-287">Ordnet eine Reihe von Namen einer entsprechenden Reihe von Dispatchbezeichnern zu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-287">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-288">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="ad218-288">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="ad218-289">Weitere Informationen zu `IDispatch::GetIDsOfNames`, finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="ad218-289">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="ad218-290">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-290">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetType">
      <MemberSignature Language="C#" Value="Type _EventInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._EventInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _EventInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._EventInfo.GetType() = System::Runtime::InteropServices::_EventInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad218-291">Gibt ein <c>T:System.Type</c>-Objekt zurück, das den <see cref="T:System.Reflection.EventInfo" />-Typ darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-291">Returns a <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad218-292">Ein <c>T:System.Type</c>-Objekt, das den <see cref="T:System.Reflection.EventInfo" />-Typ darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-292">A <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _EventInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="ad218-293">Die zurückzugebenden Typinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-293">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="ad218-294">Der Gebietsschemabezeichner für die Typinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-294">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="ad218-295">Empfängt einen Zeiger auf das angeforderte Objekt mit den Typinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-295">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-296">Ruft die Typinformationen für ein Objekt ab, die dann zum Abrufen der Typinformationen für eine Schnittstelle verwendet werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-296">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-297">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="ad218-297">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="ad218-298">Weitere Informationen zu `IDispatch::GetTypeInfo`, finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="ad218-298">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="ad218-299">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-299">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _EventInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="ad218-300">Zeigt auf einen Speicherort, der die Anzahl der Schnittstellen mit Typinformationen empfängt, die vom Objekt bereitgestellt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-300">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-301">Ruft die Anzahl der Schnittstellen mit Typinformationen ab, die von einem Objekt bereitgestellt werden (0 oder 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-301">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-302">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="ad218-302">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="ad218-303">Weitere Informationen zu `IDispatch::GetTypeInfoCount`, finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="ad218-303">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="ad218-304">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-304">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.Invoke">
      <MemberSignature Language="C#" Value="void _EventInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _EventInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_EventInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="ad218-305">Bezeichnet den Member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-305">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="ad218-306">Für zukünftige Verwendung reserviert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-306">Reserved for future use.</span>
          </span>
          <span data-ttu-id="ad218-307">Muss IID_NULL sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-307">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="ad218-308">Der Gebietsschemakontext, in dem Argumente interpretiert werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-308">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="ad218-309">Flags, die den Kontext des Aufrufs beschreiben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-309">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="ad218-310">Ein Zeiger auf eine Struktur, die ein Array von Argumenten und ein Array von Argument-DISPIDs für benannte Argumente sowie Zähler für die Anzahl der Elemente in jedem Array enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-310">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="ad218-311">Ein Verweis auf den Speicherort, an dem das Ergebnis gespeichert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-311">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="ad218-312">Ein Zeiger auf eine Struktur mit Ausnahmeinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-312">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="ad218-313">Der Index des ersten Arguments mit einem Fehler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-313">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad218-314">Stellt den Zugriff auf von einem Objekt verfügbar gemachte Eigenschaften und Methoden bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-314">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad218-315">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="ad218-315">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="ad218-316">Weitere Informationen zu `IDispatch::Invoke`, finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="ad218-316">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="ad218-317">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad218-317">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>
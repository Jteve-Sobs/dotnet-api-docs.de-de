<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EventInfo.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f9bda12daa17b91e3190c3905b39d15462fcb260.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9bda12daa17b91e3190c3905b39d15462fcb260</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Discovers the attributes of an event and provides access to event metadata.</source>
          <target state="translated">Ermittelt die Attribute eines Ereignisses und ermöglicht den Zugriff auf die Metadaten des Ereignisses.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> class to inspect events and to hook up event handlers, as shown in the example code for the <ph id="ph2">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> method.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> Klasse, um Ereignisse zu überprüfen und um Ereignishandler zu verknüpfen, wie im Beispielcode für gezeigt die <ph id="ph2">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> is not intended to be used to raise events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> ist nicht vorgesehen, die zum Auslösen von Ereignissen verwendet werden.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>An object raises events as dictated by its internal state.</source>
          <target state="translated">Ein Objekt löst Ereignisse aus, wie von den internen Zustand vorgegeben.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Events are used with delegates.</source>
          <target state="translated">Ereignisse werden mit Delegaten verwendet.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source.</source>
          <target state="translated">Ein Ereignislistener instanziiert eine Ereignishandler-Delegat, der aufgerufen wird, wenn das Ereignis von einer Ereignisquelle ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>In order to connect to the event source, the event listener adds this delegate to the invocation list on the source.</source>
          <target state="translated">Um eine Verbindung herzustellen, für die Ereignisquelle verwendet wurden, fügt der Ereignislistener dieser Delegat der Aufrufliste in der Quelle an.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>When the event is raised, the invoke method of the event-handler delegate is called.</source>
          <target state="translated">Wenn das Ereignis ausgelöst wird, wird die Invoke-Methode des Delegaten für Ereignishandler aufgerufen.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Both multicast and single-cast event notifications are supported.</source>
          <target state="translated">Sowohl Multicast- und einzelne Umwandlung ereignisbenachrichtigungen werden unterstützt.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>The <ph id="ph1">`Add`</ph> and <ph id="ph2">`Remove`</ph> methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.</source>
          <target state="translated">Die <ph id="ph1">`Add`</ph> und <ph id="ph2">`Remove`</ph> Methoden als auch die Ereignishandler Delegate-Klasse, die einem Ereignis zugeordneten muss in den Metadaten markiert werden.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Delegates are object-oriented function pointers.</source>
          <target state="translated">Delegaten sind objektorientierte Funktionszeiger.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>In C or C++, a function pointer is a reference to a method.</source>
          <target state="translated">In C oder C++ ist ein Funktionszeiger einen Verweis auf eine Methode an.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method.</source>
          <target state="translated">Im Gegensatz zu den Funktionszeiger C- oder C++ ein Delegat enthält zwei Verweise: einen Verweis auf eine Methode und einem Verweis auf ein Objekt, das die Methode unterstützt.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Delegates can invoke a method without knowing the class type that declares or inherits the method.</source>
          <target state="translated">Delegaten können eine Methode aufrufen, ohne den Klassentyp, der deklariert oder erbt von der Methode.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Delegates need only know the return type and parameter list of the method.</source>
          <target state="translated">Delegaten müssen lediglich Rückgabeliste für Typ und die Parameter der Methode kennen.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>The event model works equally well for single-cast and multicast delegates.</source>
          <target state="translated">Das Ereignismodell funktioniert ebenso gut für die einzelnen Umwandlung und Multicastdelegaten.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>When the delegate's invoke method is called, only a single object will have a method called on it.</source>
          <target state="translated">Wenn der Delegat des aufrufen wird Methode aufgerufen, darf nur ein einzelnes Objekt eine Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.</source>
          <target state="translated">Multicast-Modifizierer kann auf eine Delegatdeklaration angewendet werden kann mehrere Methoden, die aufgerufen werden, wenn die Invoke-Methode der Delegat aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Calling <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`EventInfo`</ph> when the <ph id="ph3">`inherit`</ph> parameter of <ph id="ph4">`GetCustomAttributes`</ph> is <ph id="ph5">`true`</ph> does not walk the type hierarchy.</source>
          <target state="translated">Aufrufen von <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> auf <ph id="ph2">`EventInfo`</ph> bei der <ph id="ph3">`inherit`</ph> Parameter <ph id="ph4">`GetCustomAttributes`</ph> ist <ph id="ph5">`true`</ph> die Typhierarchie nicht durchlaufen.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Use <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> to inherit custom attributes.</source>
          <target state="translated">Verwendung <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> benutzerdefinierte Attribute geerbt.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>The following code gets an <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> object for the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event of the <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> class.</source>
          <target state="translated">Der folgende code Ruft eine <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> -Objekt für die <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> -Ereignis für die <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">für volle Vertrauenswürdigkeit für erben.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">Diese Klasse kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Dieser Typ ist threadsicher.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>When you inherit from <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" /&gt;</ph>, and <ph id="ph4">&lt;see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">Beim Erben von <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>, müssen Sie die folgenden Member überschreiben: <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" /&gt;</ph>, und <ph id="ph4">&lt;see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The event source.</source>
          <target state="translated">Die Ereignisquelle.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Encapsulates a method or methods to be invoked when the event is raised by the target.</source>
          <target state="translated">Kapselt eine Methode oder Methoden ein, die aufgerufen werden sollen, wenn das Ereignis vom Ziel ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Adds an event handler to an event source.</source>
          <target state="translated">Fügt einen Ereignishandler einer Ereignisquelle hinzu.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>This method attempts to add a delegate to synchronize the event on the target object.</source>
          <target state="translated">Diese Methode versucht, ein Delegat, der das Ereignis für das Zielobjekt synchronisieren hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.</source>
          <target state="translated">Jedes Mal, wenn das Ereignis, durch den Target-Parameter ausgelöst wird, werden die Methode oder die vom Handler gekapselten Methoden aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The following code example shows how to load an assembly, create an instance of a type from the assembly, create an event handler using a dynamic assembly, and hook up the dynamic event handler.</source>
          <target state="translated">Im folgenden Codebeispiel wird das Laden einer Assembly, erstellen Sie eine Instanz eines Typs aus der Assembly, einen Ereignishandler, die mithilfe einer dynamischen Assembly erstellen und Verknüpfen mit der dynamische Ereignishandler veranschaulicht.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>All actions are performed using late binding.</source>
          <target state="translated">Alle Aktionen sind mit später Bindung ausgeführt.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The code example loads System.dll and creates an instance of the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Das Codebeispiel lädt "System.dll" und erstellt eine Instanz der <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Type.GetEvent%2A?displayProperty=nameWithType&gt;</ph> method to get the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, and the <ph id="ph3">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> property to get the delegate type for the event.</source>
          <target state="translated">Im Beispiel wird die <ph id="ph1">&lt;xref:System.Type.GetEvent%2A?displayProperty=nameWithType&gt;</ph> Methode zum Abrufen der <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> -Ereignis und die <ph id="ph3">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> Eigenschaft, um den Delegattyp für das Ereignis abzurufen.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The code example gets a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the <ph id="ph2">`Invoke`</ph> method of the delegate type, and from the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> obtains the signature of the delegate.</source>
          <target state="translated">Das Codebeispiel ruft ein <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> für die <ph id="ph2">`Invoke`</ph> -Methode des Delegattyps und aus der <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> wird die Signatur des Delegaten abgerufen.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The code example then creates a dynamic assembly with one module containing a single type named <ph id="ph1">`Handler`</ph>, and gives the type a <ph id="ph2">`static`</ph> method (<ph id="ph3">`Shared`</ph> method in Visual Basic) named <ph id="ph4">`DynamicHandler`</ph> that will be used to handle the event.</source>
          <target state="translated">Das Codebeispiel erstellt dann eine dynamische Assembly mit einem Modul mit einem einzelnen Typ mit dem Namen <ph id="ph1">`Handler`</ph>, und gibt den Typ einer <ph id="ph2">`static`</ph> Methode (<ph id="ph3">`Shared`</ph> Methode in Visual Basic) mit dem Namen <ph id="ph4">`DynamicHandler`</ph> , die zur Behandlung des Ereignisses verwendet werden.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>After the dynamic type is created, the code example gets a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the finished method and uses it to create a delegate instance.</source>
          <target state="translated">Nachdem der dynamische Typ erstellt wurde, ruft das Codebeispiel eine <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> für die abgeschlossene Methode und verwendet, um eine Delegatinstanz zu erstellen.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>This instance is passed to the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> method to hook up the event.</source>
          <target state="translated">Diese Instanz wird übergeben, um die <ph id="ph1">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> Methode, um das Ereignis zu verknüpfen.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The program then pauses to allow the event to be raised.</source>
          <target state="translated">Die programmausführung wird dann um das Ereignis ausgelöst wurde, werden zu ermöglichen.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The event does not have a public <ph id="ph1">&lt;see langword="add" /&gt;</ph> accessor.</source>
          <target state="translated">Das Ereignis besitzt keinen öffentlichen <ph id="ph1">&lt;see langword="add" /&gt;</ph>-Accessor.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The handler that was passed in cannot be used.</source>
          <target state="translated">Der übergebene Handler kann nicht verwendet werden.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">Fangen Sie in <bpt id="p1">[</bpt>.NET für Windows Store-Apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> oder der <bpt id="p2">[</bpt>portablen Klassenbibliothek<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> stattdessen die Basisklassenausnahme <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph> ab.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The caller does not have access permission to the member.</source>
          <target state="translated">Der Aufrufer verfügt nicht über Zugriffsberechtigung für diesen Member.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">Fangen Sie in <bpt id="p1">[</bpt>.NET für Windows Store-Apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> oder der <bpt id="p2">[</bpt>portablen Klassenbibliothek<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> stattdessen <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> ab.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the event is not static.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="target" /&gt;</ph>-Parameter ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>, und das Ereignis ist nicht statisch.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> is not declared on the target.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> ist im Ziel nicht deklariert.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.AddMethod">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> method of the event, including non-public methods.</source>
          <target state="translated">Ruft das <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>-Objekt für die <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph>-Methode des Ereignisses, einschließlich nicht öffentliche Methoden ab.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.AddMethod">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> method.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>-Objekt für die <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph>-Methode.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.AddMethod">
          <source>This property is the equivalent of calling the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> with a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Diese Eigenschaft entspricht dem Aufrufen der <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> mit einem Wert von <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.Attributes">
          <source>Gets the attributes for this event.</source>
          <target state="translated">Ruft die Attribute für dieses Ereignis ab.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.Attributes">
          <source>The read-only attributes for this event.</source>
          <target state="translated">Die Schreibschutzattribute für dieses Ereignis.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.Attributes">
          <source>The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</source>
          <target state="translated">Die Attribute werden in einer 4-Byte-Ganzzahl, die eine Bitmap der Attribute für das Ereignis, das von dieser Instanz reflektiert festgelegt darstellt zurückgegeben.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ein Objekt, das mit dieser Instanz verglichen werden soll, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> dem Typ und dem Wert dieser Instanz entspricht, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>Gets the <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object of the underlying event-handler delegate associated with this event.</source>
          <target state="translated">Ruft das <ph id="ph1">&lt;see langword="Type" /&gt;</ph>-Objekt des zugrunde liegenden Ereignishandlerdelegaten ab, der dem jeweiligen Ereignis zugeordnet ist.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>A read-only <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object representing the delegate event handler.</source>
          <target state="translated">Ein schreibgeschütztes <ph id="ph1">&lt;see langword="Type" /&gt;</ph>-Objekt, das den Ereignishandler des Delegaten darstellt.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> property to discover the delegate type of an event and to display its parameter types.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> Eigenschaft zum Ermitteln des Delegattyp eines Ereignisses und die Parametertypen anzuzeigen.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The example defines a delegate named <ph id="ph1">`MyDelegate`</ph> and an event named <ph id="ph2">`ev`</ph> of type <ph id="ph3">`MyDelegate`</ph>.</source>
          <target state="translated">Im Beispiel definiert einen Delegaten, der mit dem Namen <ph id="ph1">`MyDelegate`</ph> und ein Ereignis namens <ph id="ph2">`ev`</ph> vom Typ <ph id="ph3">`MyDelegate`</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The code in the <ph id="ph1">`Main`</ph> method discovers the event signature by getting the delegate type of the event, getting the <ph id="ph2">`Invoke`</ph> method of the delegate type, and then retrieving and displaying the parameters.</source>
          <target state="translated">Der Code in der <ph id="ph1">`Main`</ph> Methode ermittelt die Ereignissignatur durch Abrufen den Delegattyp des Ereignisses, Abrufen der <ph id="ph2">`Invoke`</ph> Methode der Delegattyp, und klicken Sie dann abrufen und Anzeigen von den Parametern.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the method used to add an event handler delegate to the event source.</source>
          <target state="translated">Gibt die Methode zurück, die zum Hinzufügen eines Ereignishandlerdelegaten zur Ereignisquelle verwendet wird.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>Returns the method used to add an event handler delegate to the event source.</source>
          <target state="translated">Gibt die Methode zurück, die zum Hinzufügen eines Ereignishandlerdelegaten zur Ereignisquelle verwendet wird.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to add an event handler delegate to the event source.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>-Objekt, das die Methode zum Hinzufügen eines Ereignishandlerdelegaten zur Ereignisquelle darstellt.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source><ph id="ph1">`GetAddMethod`</ph> initializes and adds the event subscribe method.</source>
          <target state="translated"><ph id="ph1">`GetAddMethod`</ph> Initialisiert und fügt das Ereignis subscribe-Methode.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>The <ph id="ph1">`AddEventHandler`</ph> method is used to add an event-handler delegate to the invocation list of an event source.</source>
          <target state="translated">Die <ph id="ph1">`AddEventHandler`</ph> Methode wird verwendet, um die Aufrufliste, die aus einer Ereignisquelle einen Delegaten für Ereignishandler hinzugefügt.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">Normalerweise weist die Methode die folgende Signatur:</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods can be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn nicht öffentliche Methoden zurückgegeben werden können; andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>When overridden in a derived class, retrieves the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> method of the event, specifying whether to return non-public methods.</source>
          <target state="translated">Ruft beim Überschreiben in einer abgeleiteten Klasse das <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph>-Objekt für die <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph>-Methode des Ereignisses ab und gibt an, ob nicht öffentliche Methoden zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to add an event handler delegate to the event source.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>-Objekt, das die Methode zum Hinzufügen eines Ereignishandlerdelegaten zur Ereignisquelle darstellt.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>The <ph id="ph1">`GetAddMethod`</ph> initializes and adds the event subscribe method as a Boolean value.</source>
          <target state="translated">Die <ph id="ph1">`GetAddMethod`</ph> initialisiert und fügt das Ereignis subscribe-Methode als boolescher Wert.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>The <ph id="ph1">`AddEventHandler`</ph> method is used to add an event-handler delegate to the invocation list of an event source.</source>
          <target state="translated">Die <ph id="ph1">`AddEventHandler`</ph> Methode wird verwendet, um die Aufrufliste, die aus einer Ereignisquelle einen Delegaten für Ereignishandler hinzugefügt.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">Normalerweise weist die Methode die folgende Signatur:</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> ist <ph id="ph2">&lt;see langword="true" /&gt;</ph>, die zum Hinzufügen von Ereignishandlerdelegaten verwendete Methode ist nicht öffentlich, und der Aufrufer verfügt nicht über die Berechtigung zum Reflektieren nicht öffentlicher Methoden.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Gibt den Hashcode für diese Instanz zurück.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the methods that were associated with an event in MSIL using the <ph id="ph1">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated">Gibt die Methoden zurück, die einem Ereignis in MSIL mit der <ph id="ph1">&lt;see langword=".other" /&gt;</ph>-Direktive zugeordnet wurden.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Returns the public methods that have been associated with an event in metadata using the <ph id="ph1">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated">Gibt die öffentlichen Methoden zurück, die einem Ereignis in den Metadaten mit der <ph id="ph1">&lt;see langword=".other" /&gt;</ph>-Direktive zugeordnet wurden.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing the public methods that have been associated with the event in metadata by using the <ph id="ph2">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated">Ein Array von <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>-Objekten, die die öffentlichen Methoden darstellen, die dem Ereignis in den Metadaten mit der <ph id="ph2">&lt;see langword=".other" /&gt;</ph>-Direktive zugeordnet wurden.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>If there are no such public methods, an empty array is returned.</source>
          <target state="translated">Wenn keine solchen öffentlichen Methoden vorhanden sind, wird ein leeres Array zurückgegeben.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The metadata for an event can associate four kinds of methods with the event:</source>
          <target state="translated">Die Metadaten für ein Ereignis kann vier Arten von Methoden mit dem Ereignis zuordnen:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.addon`</ph> directive specifies the method used to add event handlers.</source>
          <target state="translated">Die <ph id="ph1">`.addon`</ph> Richtlinie gibt die Methode verwendet, um Ereignishandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> Methode zum Abrufen einer <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> für diese Methode.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.removeon`</ph> directive specifies the method used to detach event handlers.</source>
          <target state="translated">Die <ph id="ph1">`.removeon`</ph> Richtlinie gibt die Methode verwendet, um Ereignishandler zu trennen.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> Methode zum Abrufen einer <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> für diese Methode.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.fire`</ph> directive specifies the method used to raise the event.</source>
          <target state="translated">Die <ph id="ph1">`.fire`</ph> -Direktive gibt die Methode zum Auslösen des Ereignisses an.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> Methode zum Abrufen einer <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> für diese Methode.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.other`</ph> directive specifies any other methods associated with the event.</source>
          <target state="translated">Die <ph id="ph1">`.other`</ph> Richtlinie gibt an, alle anderen Methoden, die dem Ereignis zugeordnet.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> method to retrieve an array of <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> objects for those methods.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> Methode zum Abrufen eines Arrays von <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> -Objekten für diese Methoden.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The methods associated with an event using the <ph id="ph1">`.other`</ph> directive have no special significance to the runtime.</source>
          <target state="translated">Die Methoden, die für ein Ereignis mit der <ph id="ph1">`.other`</ph> Richtlinie haben keine besondere Bedeutung für die Laufzeit.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The C# and Visual Basic compilers do not use the <ph id="ph1">`.other`</ph> directive.</source>
          <target state="translated">Verwenden Sie die C#- und Visual Basic-Compiler nicht die <ph id="ph1">`.other`</ph> Richtlinie.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to include non-public methods; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn nicht öffentliche Methoden eingeschlossen werden sollen, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Returns the methods that have been associated with the event in metadata using the <ph id="ph1">&lt;see langword=".other" /&gt;</ph> directive, specifying whether to include non-public methods.</source>
          <target state="translated">Gibt die Methoden zurück, die dem Ereignis in den Metadaten mit der <ph id="ph1">&lt;see langword=".other" /&gt;</ph>-Direktive zugeordnet wurden und gibt an, ob nicht öffentliche Methoden eingeschlossen werden sollen.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing methods that have been associated with an event in metadata by using the <ph id="ph2">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated">Ein Array von <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>-Objekten, die die Methoden darstellen, die einem Ereignis in den Metadaten mit der <ph id="ph2">&lt;see langword=".other" /&gt;</ph>-Direktive zugeordnet wurden.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>If there are no methods matching the specification, an empty array is returned.</source>
          <target state="translated">Wenn keine Methoden vorhanden sind, die mit der Spezifikation übereinstimmen, wird ein leeres Array zurückgegeben.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The metadata for an event can associate four kinds of methods with the event:</source>
          <target state="translated">Die Metadaten für ein Ereignis kann vier Arten von Methoden mit dem Ereignis zuordnen:</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.addon`</ph> directive specifies the method used to add event handlers.</source>
          <target state="translated">Die <ph id="ph1">`.addon`</ph> Richtlinie gibt die Methode verwendet, um Ereignishandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> Methode zum Abrufen einer <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> für diese Methode.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.removeon`</ph> directive specifies the method used to detach event handlers.</source>
          <target state="translated">Die <ph id="ph1">`.removeon`</ph> Richtlinie gibt die Methode verwendet, um Ereignishandler zu trennen.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for this method.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> Methode zum Abrufen einer <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> für diese Methode.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.fire`</ph> directive specifies the method used to raise the event.</source>
          <target state="translated">Die <ph id="ph1">`.fire`</ph> -Direktive gibt die Methode zum Auslösen des Ereignisses an.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for this method.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> Methode zum Abrufen einer <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> für diese Methode.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.other`</ph> directive specifies any other methods associated with the event.</source>
          <target state="translated">Die <ph id="ph1">`.other`</ph> Richtlinie gibt an, alle anderen Methoden, die dem Ereignis zugeordnet.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> method to retrieve an array of <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> objects for those methods.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> Methode zum Abrufen eines Arrays von <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> -Objekten für diese Methoden.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The methods associated with an event using the <ph id="ph1">`.other`</ph> directive have no special significance to the runtime.</source>
          <target state="translated">Die Methoden, die für ein Ereignis mit der <ph id="ph1">`.other`</ph> Richtlinie haben keine besondere Bedeutung für die Laufzeit.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The C# and Visual Basic compilers do not use the <ph id="ph1">`.other`</ph> directive.</source>
          <target state="translated">Verwenden Sie die C#- und Visual Basic-Compiler nicht die <ph id="ph1">`.other`</ph> Richtlinie.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>This method is not implemented.</source>
          <target state="translated">Diese Methode ist nicht implementiert.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the method that is called when the event is raised.</source>
          <target state="translated">Gibt die Methode zurück, die beim Auslösen des Ereignisses aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>Returns the method that is called when the event is raised.</source>
          <target state="translated">Gibt die Methode zurück, die beim Auslösen des Ereignisses aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>The method that is called when the event is raised.</source>
          <target state="translated">Die Methode, die beim Auslösen des Ereignisses aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>This method usually returns <ph id="ph1">`null`</ph> for events declared with the C# <ph id="ph2">`event`</ph> keyword or the Visual Basic <ph id="ph3">`Event`</ph> keyword.</source>
          <target state="translated">Diese Methode gibt i. d. r. <ph id="ph1">`null`</ph> für Ereignisse, die mit dem c# deklariert <ph id="ph2">`event`</ph> Schlüsselwort oder Visual Basic <ph id="ph3">`Event`</ph> Schlüsselwort.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>This is because the C# and Visual Basic compilers do not generate such a method by default.</source>
          <target state="translated">Dies ist, da die C#- und Visual Basic-Compiler keine solche Methode standardmäßig generieren.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods can be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn nicht öffentliche Methoden zurückgegeben werden können; andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</source>
          <target state="translated">Gibt beim Überschreiben in einer abgeleiteten Klasse die Methode zurück, die beim Auslösen des Ereignisses aufgerufen wird, und gibt an, ob nicht öffentliche Methoden zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object that was called when the event was raised.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph>-Objekt, das beim Auslösen des Ereignisses aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>This method usually returns <ph id="ph1">`null`</ph> for events declared with the C# <ph id="ph2">`event`</ph> keyword or the Visual Basic <ph id="ph3">`Event`</ph> keyword.</source>
          <target state="translated">Diese Methode gibt i. d. r. <ph id="ph1">`null`</ph> für Ereignisse, die mit dem c# deklariert <ph id="ph2">`event`</ph> Schlüsselwort oder Visual Basic <ph id="ph3">`Event`</ph> Schlüsselwort.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>This is because the C# and Visual Basic compilers do not generate such a method by default.</source>
          <target state="translated">Dies ist, da die C#- und Visual Basic-Compiler keine solche Methode standardmäßig generieren.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> ist <ph id="ph2">&lt;see langword="true" /&gt;</ph>, die zum Hinzufügen von Ereignishandlerdelegaten verwendete Methode ist nicht öffentlich, und der Aufrufer verfügt nicht über die Berechtigung zum Reflektieren nicht öffentlicher Methoden.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">Gibt die Methode zurück, die zum Entfernen eines Ereignishandlerdelegaten aus der Ereignisquelle verwendet wird.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>Returns the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">Gibt die Methode zurück, die zum Entfernen eines Ereignishandlerdelegaten aus der Ereignisquelle verwendet wird.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>-Objekt, das die Methode zum Entfernen eines Ereignishandlerdelegaten aus der Ereignisquelle darstellt.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">Normalerweise weist die Methode die folgende Signatur:</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods can be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn nicht öffentliche Methoden zurückgegeben werden können; andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>When overridden in a derived class, retrieves the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for removing a method of the event, specifying whether to return non-public methods.</source>
          <target state="translated">Ruft beim Überschreiben in einer abgeleiteten Klasse das <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph>-Objekt zum Entfernen einer Methode des Ereignisses ab und gibt an, ob nicht öffentliche Methoden zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>-Objekt, das die Methode zum Entfernen eines Ereignishandlerdelegaten aus der Ereignisquelle darstellt.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">Normalerweise weist die Methode die folgende Signatur:</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> ist <ph id="ph2">&lt;see langword="true" /&gt;</ph>, die zum Hinzufügen von Ereignishandlerdelegaten verwendete Methode ist nicht öffentlich, und der Aufrufer verfügt nicht über die Berechtigung zum Reflektieren nicht öffentlicher Methoden.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.IsMulticast">
          <source>Gets a value indicating whether the event is multicast.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob es sich um ein Multicastereignis handelt.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsMulticast">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the delegate is an instance of a multicast delegate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Delegat eine Instanz eines Multicastdelegaten ist, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.IsMulticast">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> has a name with a special meaning.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> einen Namen mit einer speziellen Bedeutung besitzt.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this event has a special name; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn das Ereignis einen besonderen Namen besitzt, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source>This property determines whether the event's name has a special meaning.</source>
          <target state="translated">Diese Eigenschaft bestimmt, ob der Name eines Ereignisses eine besondere Bedeutung hat.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source>Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</source>
          <target state="translated">Namen, die beginnen mit einem Unterstrich (_), Eigenschaftenaccessoren und Operatoren überladen von Methoden enthalten, sind Beispiele für Namen, die von einigen Compilern möglicherweise eine besondere Behandlung erfordern.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is an event.</source>
          <target state="translated">Ruft einen <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph>-Wert ab, der angibt, dass dieser Member ein Ereignis ist.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is an event.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph>-Wert, der angibt, dass dieser Member ein Ereignis ist.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">Diese Eigenschaft überschreibt <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType&gt;</ph> only when a given member is an event.</source>
          <target state="translated">Wenn Sie daher eine Reihe von untersuchen <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> Objekte – z. B. das zurückgegebene Array <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> – die <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> -Eigenschaft gibt <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType&gt;</ph> nur, wenn ein angegebenes Element ein Ereignis ist.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Das erste zu vergleichende Objekt.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Das zweite zu vergleichende Objekt.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">Gibt an, ob zwei <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>-Objekte gleich sind.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">&lt;paramref name="left" /&gt;</ph> und <ph id="ph3">&lt;paramref name="right" /&gt;</ph> gleich sind, andernfalls <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Das erste zu vergleichende Objekt.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Das zweite zu vergleichende Objekt.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Gibt an, ob zwei <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>-Objekte ungleich sind.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">&lt;paramref name="left" /&gt;</ph> und <ph id="ph3">&lt;paramref name="right" /&gt;</ph> ungleich sind, andernfalls <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.RaiseMethod">
          <source>Gets the method that is called when the event is raised, including non-public methods.</source>
          <target state="translated">Ruft die Methode ab, die beim Auslösen des Ereignisses aufgerufen wird, einschließlich nicht-öffentlicher Methoden.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RaiseMethod">
          <source>The method that is called when the event is raised.</source>
          <target state="translated">Die Methode, die beim Auslösen des Ereignisses aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RaiseMethod">
          <source>This property is the equivalent of calling the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> with a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Diese Eigenschaft entspricht dem Aufrufen der <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> mit einem Wert von <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The event source.</source>
          <target state="translated">Die Ereignisquelle.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The delegate to be disassociated from the events raised by target.</source>
          <target state="translated">Der Delegat, dessen Zuordnung zu den Ereignissen, die vom Ziel ausgelöst werden, aufgehoben werden soll.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>Removes an event handler from an event source.</source>
          <target state="translated">Entfernt einen Ereignishandler aus einer Ereignisquelle.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>This method attempts to remove the delegate that may synchronize this event on the target object.</source>
          <target state="translated">Diese Methode versucht, die der Delegat nicht entfernt, die dieses Ereignis für das Zielobjekt synchronisiert werden kann.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>When an event is raised by target, the method or methods encapsulated by <ph id="ph1">`handler`</ph> will no longer be invoked.</source>
          <target state="translated">Wenn ein Ereignis ausgelöst wird, vom Ziel, Methode oder Methoden, die durch gekapselte <ph id="ph1">`handler`</ph> wird nicht mehr aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The event does not have a public <ph id="ph1">&lt;see langword="remove" /&gt;</ph> accessor.</source>
          <target state="translated">Das Ereignis besitzt keinen öffentlichen <ph id="ph1">&lt;see langword="remove" /&gt;</ph>-Accessor.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The handler that was passed in cannot be used.</source>
          <target state="translated">Der übergebene Handler kann nicht verwendet werden.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">Fangen Sie in <bpt id="p1">[</bpt>.NET für Windows Store-Apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> oder der <bpt id="p2">[</bpt>portablen Klassenbibliothek<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> stattdessen <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> ab.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the event is not static.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="target" /&gt;</ph>-Parameter ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>, und das Ereignis ist nicht statisch.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> is not declared on the target.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> ist im Ziel nicht deklariert.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">Fangen Sie in <bpt id="p1">[</bpt>.NET für Windows Store-Apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> oder der <bpt id="p2">[</bpt>portablen Klassenbibliothek<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> stattdessen die Basisklassenausnahme <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph> ab.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The caller does not have access permission to the member.</source>
          <target state="translated">Der Aufrufer verfügt nicht über Zugriffsberechtigung für diesen Member.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.RemoveMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for removing a method of the event, including non-public methods.</source>
          <target state="translated">Ruft das <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph>-Objekt zum Entfernen einer Methode des Ereignisses einschließlich nicht öffentlicher Methoden ab.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RemoveMethod">
          <source>The <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for removing a method of the event.</source>
          <target state="translated">Das <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph>-Objekt zum Entfernen einer Methode des Ereignisses.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RemoveMethod">
          <source>This property is the equivalent of calling the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> with a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Diese Eigenschaft entspricht dem Aufrufen der <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> mit einem Wert von <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Für zukünftige Verwendung reserviert.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Muss IID_NULL sein.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Das übergebene Array von zuzuordnenden Namen.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Die Anzahl der zuzuordnenden Namen.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Der Gebietsschemakontext, in dem die Namen interpretiert werden sollen.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Das vom Aufrufer zugewiesene Array, das die IDs entsprechend den Namen empfängt.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Ordnet eine Reihe von Namen einer entsprechenden Reihe von Dispatchbezeichnern zu.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, finden Sie in der MSDN Library.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Spät gebundener Zugriff mithilfe der <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>-Schnittstelle in COM wird nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType">
          <source>Returns a <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> object representing the <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> type.</source>
          <target state="translated">Gibt ein <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept>-Objekt zurück, das den <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>-Typ darstellt.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType">
          <source>A <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> object representing the <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> type.</source>
          <target state="translated">Ein <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept>-Objekt, das den <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>-Typ darstellt.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Die zurückzugebenden Typinformationen.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Der Gebietsschemabezeichner für die Typinformationen.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Empfängt einen Zeiger auf das angeforderte Objekt mit den Typinformationen.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Ruft die Typinformationen für ein Objekt ab, die dann zum Abrufen der Typinformationen für eine Schnittstelle verwendet werden können.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, finden Sie in der MSDN Library.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Spät gebundener Zugriff mithilfe der <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>-Schnittstelle in COM wird nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Zeigt auf einen Speicherort, der die Anzahl der Schnittstellen mit Typinformationen empfängt, die vom Objekt bereitgestellt werden.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Ruft die Anzahl der Schnittstellen mit Typinformationen ab, die von einem Objekt bereitgestellt werden (0 oder 1).</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, finden Sie in der MSDN Library.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Spät gebundener Zugriff mithilfe der <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>-Schnittstelle in COM wird nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Bezeichnet den Member.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Für zukünftige Verwendung reserviert.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Muss IID_NULL sein.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Der Gebietsschemakontext, in dem Argumente interpretiert werden sollen.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Flags, die den Kontext des Aufrufs beschreiben.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Ein Zeiger auf eine Struktur, die ein Array von Argumenten und ein Array von Argument-DISPIDs für benannte Argumente sowie Zähler für die Anzahl der Elemente in jedem Array enthält.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Ein Verweis auf den Speicherort, an dem das Ergebnis gespeichert werden soll.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Ein Zeiger auf eine Struktur mit Ausnahmeinformationen.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Der Index des ersten Arguments mit einem Fehler.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Stellt den Zugriff auf von einem Objekt verfügbar gemachte Eigenschaften und Methoden bereit.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">`IDispatch::Invoke`</ph>, finden Sie in der MSDN Library.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Spät gebundener Zugriff mithilfe der <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>-Schnittstelle in COM wird nicht unterstützt.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
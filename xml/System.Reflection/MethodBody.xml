<Type Name="MethodBody" FullName="System.Reflection.MethodBody">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4ce57294a8dc625fb5e74e9b7a3039a9949ace31" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69353087" /></Metadata><TypeSignature Language="C#" Value="public class MethodBody" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit MethodBody extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MethodBody" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodBody" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodBody" />
  <TypeSignature Language="F#" Value="type MethodBody = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3a5e5-101">Stellt Zugriff auf die Metadaten und MSIL für den Text einer Methode bereit.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-101">Provides access to the metadata and MSIL for the body of a method.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a5e5-102">Die <xref:System.Reflection.MethodBody> -Klasse ermöglicht den Zugriff auf Informationen über die lokalen Variablen und Ausnahme Behandlungs Klauseln in einem Methoden Text sowie auf die Microsoft Intermediate Language (MSIL), die den Methoden Text bildet.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-102">The <xref:System.Reflection.MethodBody> class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.</span></span>  
  
 <span data-ttu-id="3a5e5-103">Sie können die Methoden der Tokenauflösung der Modul Klasse verwenden, wie z <xref:System.Reflection.Module.ResolveType%2A>. <xref:System.Reflection.Module.ResolveMethod%2A>b. <xref:System.Reflection.Module.ResolveType%2A>, und, um die Token im Methoden Text in <xref:System.Type> Objekte, <xref:System.Reflection.MethodInfo> Objekte und <xref:System.Reflection.FieldInfo> Objekte aufzulösen, die Ausführliche Informationen zu den Typen, Methoden und Feldern, auf die die MSIL im Methoden Text zugreifen.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-103">You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a5e5-104">Die Analyse von Methoden Texten erfordert ein umfassendes Verständnis von Metadaten und MSIL-Anweisungs Formaten.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-104">Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="3a5e5-105">Informationen finden Sie in der Common Language Infrastructure-Dokumentation (CLI), insbesondere "Partition II: Metadatendefinition und Semantik) und „Partition III: CIL Instruction Set“ (Partition III: CIL-Anweisungen).</span><span class="sxs-lookup"><span data-stu-id="3a5e5-105">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="3a5e5-106">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](https://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](https://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-106">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="3a5e5-107">Zum Abrufen eines <xref:System.Reflection.MethodBody> -Objekts für eine bestimmte Methode rufen Sie zuerst <xref:System.Reflection.MethodInfo> ein-Objekt für die-Methode ab <xref:System.Reflection.MethodInfo> , und <xref:System.Reflection.MethodBase.GetMethodBody%2A> rufen Sie dann die-Methode des-Objekts auf.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-107">To obtain a <xref:System.Reflection.MethodBody> object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a5e5-108">Im folgenden Codebeispiel wird eine Testmethode mit `MethodBodyExample` dem Namen definiert, und die Informationen zu lokalen Variablen und die Ausnahmebehandlung werden angezeigt.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-108">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="3a5e5-109">Die <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> -Methode wird verwendet, um <xref:System.Reflection.MethodBody> ein-Objekt für die Testmethode abzurufen.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-109">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span>  
  
 <span data-ttu-id="3a5e5-110">Im Beispiel wird die <xref:System.Reflection.MethodBody.LocalVariables%2A> -Eigenschaft verwendet, um eine <xref:System.Reflection.LocalVariableInfo> Liste von-Objekten abzurufen, und dann werden die Typen und die Reihenfolge der Indizes angezeigt</span><span class="sxs-lookup"><span data-stu-id="3a5e5-110">The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order.</span></span> <span data-ttu-id="3a5e5-111">Die <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> -Eigenschaft wird zum Abrufen einer Liste von Klauseln zur Ausnahmebehandlung verwendet.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-111">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a5e5-112">Nicht alle Computersprachen können Klauseln <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> generieren.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-112">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="3a5e5-113">Das Visual Basic Beispiel zeigt eine Filter Klausel mithilfe eines Visual Basic `When` Ausdrucks, der in den Beispielen für andere Sprachen ausgelassen wird.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-113">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 [!code-cpp[MethodBody#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#1)]
 [!code-csharp[MethodBody#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#1)]
 [!code-vb[MethodBody#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodBody ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodBody();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a5e5-114">Initialisiert eine neue Instanz der <see cref="T:System.Reflection.MethodBody" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-114">Initializes a new instance of the <see cref="T:System.Reflection.MethodBody" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a5e5-115">Dieser Konstruktor wird von abgeleiteten Klassen während der Erstellung von <xref:System.Reflection.MethodBody> -Objekten aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-115">This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandlingClauses">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExceptionHandlingClauses As IList(Of ExceptionHandlingClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ ExceptionHandlingClauses { System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandlingClauses : System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;" Usage="System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a5e5-116">Ruft eine Liste aller Klauseln für die Ausnahmebehandlung im Methodentext ab.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-116">Gets a list that includes all the exception-handling clauses in the method body.</span></span></summary>
        <value><span data-ttu-id="3a5e5-117">Eine <see cref="T:System.Collections.Generic.IList`1" /> von <see cref="T:System.Reflection.ExceptionHandlingClause" />-Objekten, die die Klauseln für die Ausnahmebehandlung im Methodentext darstellen.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-117">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.ExceptionHandlingClause" /> objects representing the exception-handling clauses in the body of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a5e5-118">Die Liste enthält alle Klauseln aus allen try-Blöcken im Methoden Text.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-118">The list includes all clauses from all try blocks in the method body.</span></span> <span data-ttu-id="3a5e5-119">Jedes <xref:System.Reflection.ExceptionHandlingClause> -Objekt enthält Informationen, die den try-Block identifizieren, dem er zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-119">Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a5e5-120">Die Verwendung von Klauseln für die Ausnahmebehandlung erfordert ein umfassendes Verständnis von Metadaten und MSIL-Anweisungs Formaten.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-120">Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="3a5e5-121">Informationen finden Sie in der Common Language Infrastructure-Dokumentation (CLI), insbesondere "Partition II: Metadatendefinition und Semantik) und „Partition III: CIL Instruction Set“ (Partition III: CIL-Anweisungen).</span><span class="sxs-lookup"><span data-stu-id="3a5e5-121">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="3a5e5-122">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](https://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](https://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-122">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a5e5-123">Im folgenden Codebeispiel wird eine Testmethode mit `MethodBodyExample` dem Namen definiert, und es werden Informationen zu den zugehörigen Klauseln zur Ausnahmebehandlung angezeigt.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-123">The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses.</span></span> <span data-ttu-id="3a5e5-124">Die <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> -Methode wird verwendet, um <xref:System.Reflection.MethodBody> ein-Objekt für die Testmethode abzurufen.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-124">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="3a5e5-125">Die <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> -Eigenschaft wird zum Abrufen einer Liste von <xref:System.Reflection.ExceptionHandlingClause> -Objekten verwendet.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-125">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a5e5-126">Nicht alle Computersprachen können Klauseln <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> generieren.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-126">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="3a5e5-127">Das Visual Basic Beispiel zeigt eine Filter Klausel mithilfe eines Visual Basic `When` Ausdrucks, der in den Beispielen für andere Sprachen ausgelassen wird.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-127">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="3a5e5-128">Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Reflection.MethodBody> -Klasse bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-128">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ExceptionHandlingClause" />
        <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetILAsByteArray">
      <MemberSignature Language="C#" Value="public virtual byte[] GetILAsByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetILAsByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.GetILAsByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetILAsByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetILAsByteArray();" />
      <MemberSignature Language="F#" Value="abstract member GetILAsByteArray : unit -&gt; byte[]&#xA;override this.GetILAsByteArray : unit -&gt; byte[]" Usage="methodBody.GetILAsByteArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a5e5-129">Gibt die MSIL für den Methodentext als Bytearray zurück.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-129">Returns the MSIL for the method body, as an array of bytes.</span></span></summary>
        <returns><span data-ttu-id="3a5e5-130">Ein Array vom Typ <see cref="T:System.Byte" />, das die MSIL für den Methodentext enthält.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-130">An array of type <see cref="T:System.Byte" /> that contains the MSIL for the method body.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a5e5-131">Sie können die Methoden der Tokenauflösung der Modul Klasse verwenden, wie z <xref:System.Reflection.Module.ResolveType%2A>. <xref:System.Reflection.Module.ResolveMethod%2A>b. <xref:System.Reflection.Module.ResolveMember%2A>, und, um die Token im Methoden Text in <xref:System.Type> Objekte, <xref:System.Reflection.MethodInfo> Objekte und <xref:System.Reflection.FieldInfo> Objekte aufzulösen, die Ausführliche Informationen zu den Typen, Methoden und Feldern, auf die die MSIL im Methoden Text zugreifen.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-131">You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a5e5-132">Die Analyse von Methoden Texten erfordert ein umfassendes Verständnis von Metadaten und MSIL-Anweisungs Formaten.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-132">Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="3a5e5-133">Informationen finden Sie in der Common Language Infrastructure-Dokumentation (CLI), insbesondere "Partition II: Metadatendefinition und Semantik) und „Partition III: CIL Instruction Set“ (Partition III: CIL-Anweisungen).</span><span class="sxs-lookup"><span data-stu-id="3a5e5-133">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="3a5e5-134">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](https://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](https://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-134">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])" />
        <altmember cref="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public virtual bool InitLocals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool InitLocals { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool" Usage="System.Reflection.MethodBody.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a5e5-135">Ruft einen Wert ab, der angibt, ob lokale Variablen im Methodentext mit den Standardwerten für ihre Typen initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-135">Gets a value indicating whether local variables in the method body are initialized to the default values for their types.</span></span></summary>
        <value><span data-ttu-id="3a5e5-136"><see langword="true" />, wenn der Methodentext Code enthält, mit dem lokale Variablen für Verweistypen mit <see langword="null" /> oder für Werttypen mit 0 (null) initialisiert werden, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-136"><see langword="true" /> if the method body contains code to initialize local variables to <see langword="null" /> for reference types, or to the zero-initialized value for value types; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a5e5-137">Die <xref:System.Reflection.MethodBody.InitLocals%2A> -Eigenschaft verweist auf Variablen, die nicht explizit initialisiert werden, d. h. Variablen, die mit Syntax `int x;` deklariert C# werden `Dim x As Integer` , wie z. b. in oder in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-137">The <xref:System.Reflection.MethodBody.InitLocals%2A> property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3a5e5-138">Verweis Variablen werden standardmäßig auf `null` initialisiert.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-138">Reference variables are initialized to `null` by default.</span></span> <span data-ttu-id="3a5e5-139">Numerische Variablen werden mit 0 (null) initialisiert.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-139">Numeric variables are initialized to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a5e5-140">Im folgenden Codebeispiel wird eine Testmethode mit `MethodBodyExample` dem Namen definiert, und die Informationen zu lokalen Variablen und die Ausnahmebehandlung werden angezeigt.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-140">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="3a5e5-141">Die <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> -Methode wird verwendet, um <xref:System.Reflection.MethodBody> ein-Objekt für die Testmethode abzurufen.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-141">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="3a5e5-142">Die <xref:System.Reflection.MethodBody.MaxStackSize%2A> Eigenschaften <xref:System.Reflection.MethodBody.InitLocals%2A> und werden angezeigt.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-142">The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.</span></span>  
  
 <span data-ttu-id="3a5e5-143">Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Reflection.MethodBody> -Klasse bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-143">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalSignatureMetadataToken">
      <MemberSignature Language="C#" Value="public virtual int LocalSignatureMetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LocalSignatureMetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalSignatureMetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LocalSignatureMetadataToken { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalSignatureMetadataToken : int" Usage="System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a5e5-144">Ruft ein Metadatentoken für die Signatur ab, die die lokalen Variablen für die Methode in Metadaten beschreibt.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-144">Gets a metadata token for the signature that describes the local variables for the method in metadata.</span></span></summary>
        <value><span data-ttu-id="3a5e5-145">Eine ganze Zahl, die das Metadatentoken darstellt.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-145">An integer that represents the metadata token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a5e5-146">Verwenden Sie <xref:System.Reflection.MethodBody.LocalVariables%2A> die-Eigenschaft, um Informationen über die lokalen Variablen der Methode abzurufen.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-146">Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a5e5-147">Informationen zu lokalen Variablen Signaturen finden Sie in der Common Language Infrastructure-Dokumentation (CLI), insbesondere unter "Partition II: Metadatendefinition und-Semantik ".</span><span class="sxs-lookup"><span data-stu-id="3a5e5-147">Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="3a5e5-148">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](https://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](https://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-148">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalVariables">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt; LocalVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.LocalVariableInfo&gt; LocalVariables" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalVariables" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalVariables As IList(Of LocalVariableInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ LocalVariables { System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalVariables : System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;" Usage="System.Reflection.MethodBody.LocalVariables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a5e5-149">Ruft die Liste der lokalen Variablen ab, die im Methodentext deklariert sind.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-149">Gets the list of local variables declared in the method body.</span></span></summary>
        <value><span data-ttu-id="3a5e5-150">Eine <see cref="T:System.Collections.Generic.IList`1" /> von <see cref="T:System.Reflection.LocalVariableInfo" />-Objekten, die die im Methodentext deklarierten lokalen Variablen beschreiben.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-150">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.LocalVariableInfo" /> objects that describe the local variables declared in the method body.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a5e5-151">Sie benötigen nicht das Metadatentoken für die lokale Variablen Signatur, <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> die von der-Eigenschaft bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-151">You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a5e5-152">Im folgenden Codebeispiel wird eine Testmethode namens `MethodBodyExample` definiert und ihre lokalen Variablen Informationen angezeigt.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-152">The following code example defines a test method named `MethodBodyExample` and displays its local variable information.</span></span> <span data-ttu-id="3a5e5-153">Die <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> -Methode wird verwendet, um <xref:System.Reflection.MethodBody> ein-Objekt für die Testmethode abzurufen.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-153">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="3a5e5-154">Die <xref:System.Reflection.MethodBody.LocalVariables%2A> -Eigenschaft wird zum Abrufen einer Liste von <xref:System.Reflection.LocalVariableInfo> -Objekten verwendet.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-154">The <xref:System.Reflection.MethodBody.LocalVariables%2A> property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.</span></span>  
  
 <span data-ttu-id="3a5e5-155">Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Reflection.MethodBody> -Klasse bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-155">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#3](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#3)]
[!code-csharp[MethodBody#3](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#3)]
[!code-vb[MethodBody#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#3)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#6](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#6)]
[!code-csharp[MethodBody#6](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#6)]
[!code-vb[MethodBody#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.LocalVariableInfo" />
      </Docs>
    </Member>
    <Member MemberName="MaxStackSize">
      <MemberSignature Language="C#" Value="public virtual int MaxStackSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxStackSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.MaxStackSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MaxStackSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxStackSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxStackSize : int" Usage="System.Reflection.MethodBody.MaxStackSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a5e5-156">Ruft die maximale Anzahl von Elementen auf dem Operandenstapel ab, wenn die Methode ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-156">Gets the maximum number of items on the operand stack when the method is executing.</span></span></summary>
        <value><span data-ttu-id="3a5e5-157">Die maximale Anzahl von Elementen auf dem Operandenstapel beim Ausführen der Methode.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-157">The maximum number of items on the operand stack when the method is executing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a5e5-158">Weitere Informationen finden Sie in der Common Language Infrastructure-Dokumentation (CLI), insbesondere unter "Partition II: Metadatendefinition und Semantik) und „Partition III: CIL Instruction Set“ (Partition III: CIL-Anweisungen).</span><span class="sxs-lookup"><span data-stu-id="3a5e5-158">For more information, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="3a5e5-159">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](https://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](https://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-159">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a5e5-160">Im folgenden Codebeispiel wird eine Testmethode mit `MethodBodyExample` dem Namen definiert, und die Informationen zu lokalen Variablen und die Ausnahmebehandlung werden angezeigt.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-160">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="3a5e5-161">Die <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> -Methode wird verwendet, um <xref:System.Reflection.MethodBody> ein-Objekt für die Testmethode abzurufen.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-161">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="3a5e5-162">Die <xref:System.Reflection.MethodBody.MaxStackSize%2A> Eigenschaften <xref:System.Reflection.MethodBody.InitLocals%2A> und werden angezeigt.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-162">The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.</span></span>  
  
 <span data-ttu-id="3a5e5-163">Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Reflection.MethodBody> -Klasse bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="3a5e5-163">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

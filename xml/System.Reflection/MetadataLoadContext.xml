<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9aaf43973195666dd08ebb47e5dd2fc7f8617f14" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996709" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="341e0-101">Stellt eine geschlossene Universum von Type-Objekten, die für die Überprüfung nur geladen.</span><span class="sxs-lookup"><span data-stu-id="341e0-101">Represents a closed universe of Type objects loaded for inspection-only purposes.</span></span> <span data-ttu-id="341e0-102">Jede MetadataLoadContext kann seine eigenen Bindungsregeln und von allen anderen MetadataLoadContexts isoliert ist.</span><span class="sxs-lookup"><span data-stu-id="341e0-102">Each MetadataLoadContext can have its own binding rules and is isolated from all other MetadataLoadContexts.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="341e0-103">Ein `MetadataLoadContext` dient als ein Wörterbuch, das Assemblynamen, bindet <xref:System.Reflection.Assembly> -Instanzen, die in den Kontext oder die Notwendigkeit, die geladen werden zuvor geladen wurden.</span><span class="sxs-lookup"><span data-stu-id="341e0-103">A `MetadataLoadContext` serves as a dictionary that binds assembly names to <xref:System.Reflection.Assembly> instances that were previously loaded into the context or need to be loaded.</span></span>

<span data-ttu-id="341e0-104">Assemblys werden ausschließlich als Metadaten behandelt.</span><span class="sxs-lookup"><span data-stu-id="341e0-104">Assemblies are treated strictly as metadata.</span></span> <span data-ttu-id="341e0-105">Es gibt keine Einschränkungen zum Laden von Assemblys auf Grundlage der Zielplattform, die CPU-Architektur und die Größe des Zeigers.</span><span class="sxs-lookup"><span data-stu-id="341e0-105">There are no restrictions on loading assemblies based on target platform, CPU architecture, or pointer size.</span></span> <span data-ttu-id="341e0-106">Es gibt keine Einschränkungen für die Assembly als die Core-Assembly (**"mscorlib"**).</span><span class="sxs-lookup"><span data-stu-id="341e0-106">There are no restrictions on the assembly designated as the core assembly (**mscorlib**).</span></span>

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><span data-ttu-id="341e0-107">Eine <see cref="T:System.Reflection.MetadataAssemblyResolver" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="341e0-107">A <see cref="T:System.Reflection.MetadataAssemblyResolver" /> instance.</span></span></param>
        <param name="coreAssemblyName"><span data-ttu-id="341e0-108">Der Name der Assembly, die die grundlegenden Typen, z. B. enthält <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="341e0-108">The name of the assembly that contains the core types such as <see cref="T:System.Object" />.</span></span> <span data-ttu-id="341e0-109">Dies ist in der Regel "Mscorlib".</span><span class="sxs-lookup"><span data-stu-id="341e0-109">Typically, this would be "mscorlib".</span></span></param>
        <summary><span data-ttu-id="341e0-110">Erstellt ein neues <see cref="T:System.Reflection.MetadataLoadContext" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="341e0-110">Creates a new <see cref="T:System.Reflection.MetadataLoadContext" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="341e0-111">Ruft ab oder legt die Assembly, die kennzeichnet die "Systemassembly", die die bekannten Typen, z. B. enthält <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="341e0-111">Gets or sets the assembly that denotes the "system assembly" that houses the well-known types such as <see cref="T:System.Int32" />.</span></span></summary>
        <value><span data-ttu-id="341e0-112">Eine <see cref="T:System.Reflection.Assembly" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="341e0-112">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="341e0-113">Die Kern-Assembly ist anders als andere Assemblys behandelt werden, da Verweise auf diese bekannten Typen nicht über den der Assemblyverweis verweist, im Gegensatz zu normalen Typen beinhalten.</span><span class="sxs-lookup"><span data-stu-id="341e0-113">The core assembly is treated differently than other assemblies because references to these well-known types do not include the assembly reference, unlike normal types.</span></span>
            
<span data-ttu-id="341e0-114">In der Regel wird diese Assembly "Mscorlib" oder "Netstandard" benannt.</span><span class="sxs-lookup"><span data-stu-id="341e0-114">Typically, this assembly is named "mscorlib" or "netstandard".</span></span> <span data-ttu-id="341e0-115">Wenn die Kern-Assembly nicht gefunden werden kann, wird der Wert `null`, und viele andere Reflektionsmethoden, einschließlich derjenigen, die Methodensignaturen, analysieren, werden eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="341e0-115">If the core assembly cannot be found, the value will be `null`, and many other reflection methods, including those that parse method signatures, will throw an exception.</span></span>
            
<span data-ttu-id="341e0-116">Die `CoreAssembly` richtet sich nach der Übergabe der `coreAssemblyName` Parameter zu übergeben, um die <xref:System.Reflection.MetadataAssemblyResolver> Konstruktor, um die <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="341e0-116">The `CoreAssembly` is determined by passing the `coreAssemblyName` parameter passed to the <xref:System.Reflection.MetadataAssemblyResolver> constructor to the <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="341e0-117">Wenn kein `coreAssemblyName` Argument wurde angegeben, in den Konstruktor der <xref:System.Reflection.MetadataLoadContext>, und klicken Sie dann die Standardwerte verwendet werden, wie z.B. "Mscorlib", "System.Runtime" und "Netstandard".</span><span class="sxs-lookup"><span data-stu-id="341e0-117">If no `coreAssemblyName` argument was specified in the constructor of <xref:System.Reflection.MetadataLoadContext>, then default values are used, including "mscorlib", "System.Runtime" and "netstandard".</span></span>
            
<span data-ttu-id="341e0-118">Die Kern der angegebenen Assembly muss nicht auf die grundlegenden Typen enthalten.</span><span class="sxs-lookup"><span data-stu-id="341e0-118">The designated core assembly does not need to contain the core types directly.</span></span> <span data-ttu-id="341e0-119">Sie können eingeben, an andere Assemblys weitergeleitet werden.</span><span class="sxs-lookup"><span data-stu-id="341e0-119">It can type forward them to other assemblies.</span></span> <span data-ttu-id="341e0-120">Daher ist es durchaus zulässig, die die Fassade "mscorlib" als die angegebenen Core-Assembly verwendet.</span><span class="sxs-lookup"><span data-stu-id="341e0-120">Thus, it is perfectly permissible to use the mscorlib facade as the designated core assembly.</span></span>
            
<span data-ttu-id="341e0-121">Beachten Sie, dass <xref:System.Runtime> ist keine Assembly ideal Core, da es einige Pseudo benutzerdefiniertes Attribut Interop-bezogenen Typen wie z. B. schließt <xref:System.Runtime.InteropServices.DllImportAttribute>.</span><span class="sxs-lookup"><span data-stu-id="341e0-121">Note that <xref:System.Runtime> is not an ideal core assembly because it excludes some of the interop-related pseudo-custom attribute types such as <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span> <span data-ttu-id="341e0-122">Jedoch kann diese dienen, wenn Sie kein Interesse an der die Attribute haben.</span><span class="sxs-lookup"><span data-stu-id="341e0-122">However, it can serve if you have no interest in those attributes.</span></span> <span data-ttu-id="341e0-123">Die CustomAttributes-API überspringt die Attribute, wenn die erforderlichen Typen nicht von die Kern-Assembly enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="341e0-123">The CustomAttributes API will skip those attributes if the core assembly does not include the necessary types.</span></span>
            
<span data-ttu-id="341e0-124">Die Kern-Assembly wird erst ggf. nicht geladen werden.</span><span class="sxs-lookup"><span data-stu-id="341e0-124">The core assembly is not loaded until necessary.</span></span> <span data-ttu-id="341e0-125">Die folgenden APIs lösen keine Suche nach der Core-Assembly:</span><span class="sxs-lookup"><span data-stu-id="341e0-125">The following APIs do not trigger the search for the core assembly:</span></span>

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <span data-ttu-id="341e0-126"><System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="341e0-126"><System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="341e0-127"><System.Reflection.Assembly.FullName?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="341e0-127"><System.Reflection.Assembly.FullName?displayProperty=nameWithType></span></span>
* <span data-ttu-id="341e0-128"><System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="341e0-128"><System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="341e0-129"><System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="341e0-129"><System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="341e0-130"><System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="341e0-130"><System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType></span></span>
* <span data-ttu-id="341e0-131"><System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="341e0-131"><System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="341e0-132"><System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="341e0-132"><System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="341e0-133"><System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="341e0-133"><System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType></span></span>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
<span data-ttu-id="341e0-134">Wenn eine Core-Assembly kann nicht gefunden werden oder wenn die Kernassembly Typen vorhanden ist, dies sich das Verhalten von wirkt der <xref:System.Reflection.MetadataLoadContext> wie folgt:</span><span class="sxs-lookup"><span data-stu-id="341e0-134">If a core assembly cannot be found or if the core assembly is missing types, this will affect the behavior of the <xref:System.Reflection.MetadataLoadContext> as follows:</span></span>
            
* <span data-ttu-id="341e0-135">APIs, die Signaturen oder Typespecs zu analysieren und die Ergebnisse als zurückgeben müssen <xref:System.Type> Objekte werden eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="341e0-135">APIs that need to parse signatures or typespecs and return the results as <xref:System.Type> objects will throw an exception.</span></span> <span data-ttu-id="341e0-136">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="341e0-136">For example:</span></span>

 * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
 * <span data-ttu-id="341e0-137">System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="341e0-137">System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType></span></span>
 * <xref:System.Type.BaseType?displayProperty-nameWithType>
 * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>
            
* <span data-ttu-id="341e0-138">APIs, die zum Vergleichen von Typen bekannten grundlegenden Typen benötigen, wird keine Ausnahme ausgelöst, und der Vergleich wird dieser als `false`.</span><span class="sxs-lookup"><span data-stu-id="341e0-138">APIs that need to compare types to well-known core types will not throw an exception, and the comparison will evaluate to `false`.</span></span> <span data-ttu-id="341e0-139">Angenommen, Sie keine Core-Assembly angeben <xref:System.Type.IsPrimitive> zurück `false` für alle Elemente auch Typen, die mit dem Namen <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="341e0-139">For example, if you do not specify a core assembly, <xref:System.Type.IsPrimitive> will return `false` for everything, even types named <xref:System.Int32>.</span></span> <span data-ttu-id="341e0-140">Auf ähnliche Weise <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> zurück <xref:System.TypeCode.Object> für alles.</span><span class="sxs-lookup"><span data-stu-id="341e0-140">Similarly, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> will return <xref:System.TypeCode.Object> for everything.</span></span>
            
* <span data-ttu-id="341e0-141">Wenn eine Metadatenentität Flags, die dann als Pseudo benutzerdefiniertes Attribut, und die Core-Assembly nicht den Pseudo benutzerdefinierten Attributtyp, die den erforderlichen Konstruktor angegeben wird, oder eines der die Parametertypen des Konstruktors enthält, der <xref:System.Reflection.MetadataLoadContext> keine Ausnahme auslöst.</span><span class="sxs-lookup"><span data-stu-id="341e0-141">If a metadata entity sets flags that surface as a pseudo-custom attribute, and the core assembly does not contain the pseudo-custom attribute type, the necessary constructor or any of the parameter types of the constructor, the <xref:System.Reflection.MetadataLoadContext> will not throw.</span></span> <span data-ttu-id="341e0-142">Es lässt das Pseudo benutzerdefinierte Attribut aus der Liste der zurückgegebenen Attribute.</span><span class="sxs-lookup"><span data-stu-id="341e0-142">It will omit the pseudo-custom attribute from the list of returned attributes.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="341e0-143">Gibt (z. B. Dateisperren Assembly-Dateien) keine systemeigenen Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="341e0-143">Releases any native resources (such as file locks on assembly files).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="341e0-144">Nach der Beseitigung, es ist nicht sicher verwenden <xref:System.Reflection.Assembly> Objekte Schiffsteil abgesehen von der <xref:System.Reflection.MetadataLoadContext> oder alle Reflection-Objekte, die durch die Schiffsteil abgesehen <xref:System.Reflection.Assembly> Objekte.</span><span class="sxs-lookup"><span data-stu-id="341e0-144">After disposal, it is not safe to use any <xref:System.Reflection.Assembly> objects dispensed by the <xref:System.Reflection.MetadataLoadContext> or any reflection objects dispensed by those <xref:System.Reflection.Assembly> objects.</span></span>

<span data-ttu-id="341e0-145">Wenn Objekte von bereitgestellt der <xref:System.Reflection.MetadataLoadContext> bemühen uns um das Auslösen einer <xref:System.ObjectDisposedException>, dies ist nicht gewährleistet.</span><span class="sxs-lookup"><span data-stu-id="341e0-145">Though objects provided by the <xref:System.Reflection.MetadataLoadContext> strive to throw an <xref:System.ObjectDisposedException>, this is not guaranteed.</span></span>

<span data-ttu-id="341e0-146">Einige APIs möglicherweise behoben oder zuvor zwischengespeicherten Daten zurück.</span><span class="sxs-lookup"><span data-stu-id="341e0-146">Some APIs may return fixed or previously cached data.</span></span> <span data-ttu-id="341e0-147">Zugreifen auf Objekte *während* eine <xref:System.Reflection.MetadataLoadContext.Dispose%2A> Methodenaufruf in einem nicht verwalteten zugriffsverletzung und Failfast führen kann.</span><span class="sxs-lookup"><span data-stu-id="341e0-147">Accessing objects *during* a <xref:System.Reflection.MetadataLoadContext.Dispose%2A> method call may result in an unmanaged access violation and failfast.</span></span>
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="341e0-148">Zurückgeben eine atomarische Momentaufnahme der Assemblys, die in geladen wurden die <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="341e0-148">Return an atomic snapshot of the assemblies that have been loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span></summary>
        <returns><span data-ttu-id="341e0-149">Eine aufzählbare Auflistung von <see xref="T:System.Reflection.Assembly" /> Objekte.</span><span class="sxs-lookup"><span data-stu-id="341e0-149">An enumerable collection of <see xref="T:System.Reflection.Assembly" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="341e0-150">Eine <see cref="T:System.Reflection.AssemblyName" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="341e0-150">An <see cref="T:System.Reflection.AssemblyName" /> instance.</span></span></param>
        <summary><span data-ttu-id="341e0-151">Löst den angegebenen Assemblynamen auf eine Assembly an.</span><span class="sxs-lookup"><span data-stu-id="341e0-151">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="341e0-152">Wenn eine Assembly auf diesen Namen bereits gebunden wurde, wird diese Assembly zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="341e0-152">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="341e0-153">Andernfalls die <see cref="T:System.Reflection.MetadataLoadContext" /> Ruft das angegebene <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="341e0-153">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="341e0-154">Eine <see cref="T:System.Reflection.Assembly" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="341e0-154">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="341e0-155">Beachten Sie, dass das Verhalten dieser Methode das Verhalten entspricht dem <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> Ereignis aufgelöst, aber nicht das Verhalten des mit <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="341e0-155">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="341e0-156">(Letzteres gibt ohne die Resolve-Ereignis auszulösen.)</span><span class="sxs-lookup"><span data-stu-id="341e0-156">(The latter gives up without raising its resolve event.)</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="341e0-157">Gibt das Auflösungsprogramm <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="341e0-157">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="341e0-158">Ein <see cref="T:System.String" /> , das der Name der Assembly darstellt.</span><span class="sxs-lookup"><span data-stu-id="341e0-158">A <see cref="T:System.String" /> representing the assembly name.</span></span></param>
        <summary><span data-ttu-id="341e0-159">Löst den angegebenen Assemblynamen auf eine Assembly an.</span><span class="sxs-lookup"><span data-stu-id="341e0-159">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="341e0-160">Wenn eine Assembly auf diesen Namen bereits gebunden wurde, wird diese Assembly zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="341e0-160">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="341e0-161">Andernfalls die <see cref="T:System.Reflection.MetadataLoadContext" /> Ruft das angegebene <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="341e0-161">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="341e0-162">Eine <see cref="T:System.Reflection.Assembly" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="341e0-162">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="341e0-163">Beachten Sie, dass das Verhalten dieser Methode, das Verhalten der entspricht <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> Ereignis aufgelöst, aber das Verhalten von < xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType > stimmt nicht überein.</span><span class="sxs-lookup"><span data-stu-id="341e0-163">Note that the behavior of this method matches the behavior of <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="341e0-164">(Letzteres gibt ohne die Resolve-Ereignis auszulösen.)</span><span class="sxs-lookup"><span data-stu-id="341e0-164">(The latter gives up without raising its resolve event.)</span></span>
]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="341e0-165">Gibt das Auflösungsprogramm <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="341e0-165">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath"><span data-ttu-id="341e0-166">Ein <see cref="T:System.String" /> , den Pfad zu der Assembly darstellt.</span><span class="sxs-lookup"><span data-stu-id="341e0-166">A <see cref="T:System.String" /> representing the path to the assembly.</span></span></param>
        <summary><span data-ttu-id="341e0-167">Lädt eine Assembly aus einem bestimmten Pfad auf dem Datenträger, und bindet den Assemblynamen, in der <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="341e0-167">Loads an assembly from a specific path on the disk and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="341e0-168">Wenn eine vorherige Assembly mit dem gleichen Namen bereits in geladen wurde. die <see cref="T:System.Reflection.MetadataLoadContext" />, die vorherige Assembly zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="341e0-168">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="341e0-169">Eine <see cref="T:System.Reflection.Assembly" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="341e0-169">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="341e0-170">Die beiden Assemblys müssen sich nicht auf die gleiche Mvid aus.</span><span class="sxs-lookup"><span data-stu-id="341e0-170">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="341e0-171">Ein <see cref="T:System.Byte[]" /> , die eine Assembly enthält.</span><span class="sxs-lookup"><span data-stu-id="341e0-171">A <see cref="T:System.Byte[]" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="341e0-172">Lädt eine Assembly aus einem Bytearray und bindet den Assemblynamen, in der <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="341e0-172">Loads an assembly from a byte array and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="341e0-173">Wenn eine vorherige Assembly mit dem gleichen Namen bereits in geladen wurde. die <see cref="T:System.Reflection.MetadataLoadContext" />, die vorherige Assembly zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="341e0-173">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="341e0-174">Eine <see cref="T:System.Reflection.Assembly" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="341e0-174">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="341e0-175">Die beiden Assemblys müssen sich nicht auf die gleiche Mvid aus.</span><span class="sxs-lookup"><span data-stu-id="341e0-175">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="341e0-176">Ein <see cref="T:System.IO.Stream" /> , die eine Assembly enthält.</span><span class="sxs-lookup"><span data-stu-id="341e0-176">A <see cref="T:System.IO.Stream" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="341e0-177">Lädt eine Assembly aus einem Stream und bindet den Assemblynamen, in der <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="341e0-177">Loads an assembly from a stream and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="341e0-178">Wenn eine vorherige Assembly mit dem gleichen Namen bereits in geladen wurde. die <see cref="T:System.Reflection.MetadataLoadContext" />, die vorherige Assembly zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="341e0-178">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="341e0-179">Die <xref:System.Reflection.MetadataLoadContext> übernimmt den Besitz der <xref:System.IO.Stream> an diese Methode übergeben.</span><span class="sxs-lookup"><span data-stu-id="341e0-179">The <xref:System.Reflection.MetadataLoadContext> takes ownership of the <xref:System.IO.Stream> passed into this method.</span></span> <span data-ttu-id="341e0-180">Des ursprünglichen Besitzers muss nicht geändert wird, seine Position, freigeben, die <xref:System.IO.Stream>, oder Sie davon ausgehen, dass seine Position unverändert bleiben.</span><span class="sxs-lookup"><span data-stu-id="341e0-180">The original owner must not mutate its position, dispose the <xref:System.IO.Stream>, or assume that its position will stay unchanged.</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="341e0-181">Die beiden Assemblys müssen sich nicht auf die gleiche Mvid aus.</span><span class="sxs-lookup"><span data-stu-id="341e0-181">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IReplyChannel" FullName="System.ServiceModel.Channels.IReplyChannel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="160c6657f10ed6ec444d5721a21779d9a3ea7b6b" />
    <Meta Name="ms.sourcegitcommit" Value="1afcc8f9041ff3093fd13fb0afda92ac188878a9" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="09/06/2018" />
    <Meta Name="ms.locfileid" Value="43850540" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IReplyChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReplyChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IReplyChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReplyChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IReplyChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IReplyChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="f18cd-101">Definiert die Schnittstelle, die ein Kanal implementieren muss, um auf der Empfangsseite einer Anforderung-Antwort-Kommunikation zwischen Messaging-Endpunkten zu stehen.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f18cd-101">Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="f18cd-102">Die <xref:System.ServiceModel.Channels.IReplyChannel>-Schnittstelle enthält synchrone und asynchrone Varianten einer <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>-Methodenrückgabe und einen <xref:System.ServiceModel.Channels.RequestContext>, der verwendet werden kann, um Antworten auf empfangene Anfragen zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="f18cd-102">The <xref:System.ServiceModel.Channels.IReplyChannel> interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests.</span></span>  
  
 <span data-ttu-id="f18cd-103">Der Vertrag enthält synchrone und asynchrone Varianten von Empfangs-, Empfangsversuchs- und Warten-auf-Nachricht-Funktionen.</span><span class="sxs-lookup"><span data-stu-id="f18cd-103">The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="f18cd-104">Ein <xref:System.ServiceModel.Channels.IReplyChannel> ist nicht notwendigerweise an einen einzelnen Absender gebunden.</span><span class="sxs-lookup"><span data-stu-id="f18cd-104">An <xref:System.ServiceModel.Channels.IReplyChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="f18cd-105">Andere Kanäle und Kanalschnittstellen bieten Beziehungen zwischen dem Absende- und Antwortkanal, aber der Basisvertrag macht diese Einschränkung nicht.</span><span class="sxs-lookup"><span data-stu-id="f18cd-105">Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.</span></span>  
  
 <span data-ttu-id="f18cd-106">Das Pullmodell wird mit einem <xref:System.ServiceModel.Channels.IReplyChannel> verwendet, um Nachrichten zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="f18cd-106">The pull model is used with an <xref:System.ServiceModel.Channels.IReplyChannel> to receive messages.</span></span> <span data-ttu-id="f18cd-107">Dieses Modell besteht aus dem Aufruf von <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (oder eine der Varianten) und daraufhin aus dem Warten auf die Ankunft der Nachricht.</span><span class="sxs-lookup"><span data-stu-id="f18cd-107">This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f18cd-108">Startet einen asynchronen Vorgang, um eine verfügbare Anforderung zu empfangen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-108">Begins an asynchronous operation to receive an available request.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceiveRequest : AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginReceiveRequest (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="f18cd-109">Der <see cref="T:System.AsyncCallback" />-Delegat, der die Benachrichtigung vom asynchronen Empfang erhält, der einen Anforderungsvorgang abschließt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-109">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="f18cd-110">Ein von der Anwendung spezifiziertes Objekt, das Zustandsinformationen enthält, die dem asynchronen Vorgang des Empfanges einer Anforderung zugeordnet sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-110">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f18cd-111">Startet einen asynchronen Vorgang, mit einem Standard-Timeout eine verfügbare Anforderung zu empfangen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-111">Begins an asynchronous operation to receive an available request with a default timeout.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f18cd-112">Das <see cref="T:System.IAsyncResult" />, das auf den asynchronen Empfang einer Anforderung verweist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-112">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f18cd-113">Die <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> -Methode implementiert das Standardmuster für das Aufrufen von <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchron.</span><span class="sxs-lookup"><span data-stu-id="f18cd-113">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously.</span></span> <span data-ttu-id="f18cd-114">Das Standard-Timeout beträgt 1 Minute.</span><span class="sxs-lookup"><span data-stu-id="f18cd-114">The default timeout is 1 minute.</span></span> <span data-ttu-id="f18cd-115">Wenn ein Empfangs-Timeout auf die Bindung, die für die Konfiguration der Verbindung verwendet wird, eingerichtet ist, wird dieser Wert genutzt.</span><span class="sxs-lookup"><span data-stu-id="f18cd-115">If a receive timeout is set on the binding used to configure the connection, then that value is used.</span></span> <span data-ttu-id="f18cd-116">Verwenden Sie <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>, wenn Sie einen expliziten Timeout mit dem Aufruf, der diese anderen Werte überschreibt, festlegen wollen.</span><span class="sxs-lookup"><span data-stu-id="f18cd-116">Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values.</span></span>  
  
 <span data-ttu-id="f18cd-117">Wenn die erhaltene Anforderungsnachricht größer ist als die von der verwendeten Bindung maximal zulässige Größe für Nachrichten, wird eine <xref:System.ServiceModel.QuotaExceededException> ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="f18cd-117">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="f18cd-118">Die maximale Nachrichtengröße wird von der <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>-Eigenschaft festgelegt.</span><span class="sxs-lookup"><span data-stu-id="f18cd-118">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="f18cd-119">Der Standardwert ist 65536 Byte.</span><span class="sxs-lookup"><span data-stu-id="f18cd-119">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f18cd-120">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="f18cd-120">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceiveRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginReceiveRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="f18cd-121">Die <see cref="T:System.TimeSpan" />, die das Zeitintervall für das Warten auf den Empfang einer verfügbaren Anforderung angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-121">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="f18cd-122">Der <see cref="T:System.AsyncCallback" />-Delegat, der die Benachrichtigung vom asynchronen Empfang erhält, der einen Anforderungsvorgang abschließt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-122">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="f18cd-123">Ein von der Anwendung spezifiziertes Objekt, das Zustandsinformationen enthält, die dem asynchronen Vorgang des Empfanges einer Anforderung zugeordnet sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-123">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f18cd-124">Startet einen asynchronen Vorgang, um eine verfügbare Anforderung mit einem angegebenen Timeout zu empfangen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-124">Begins an asynchronous operation to receive an available request with a specified timeout.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f18cd-125">Das <see cref="T:System.IAsyncResult" />, das auf den asynchronen Empfang einer Anforderung verweist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-125">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f18cd-126">Die <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> -Methode implementiert das Standardmuster für das Aufrufen von <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> asynchron.</span><span class="sxs-lookup"><span data-stu-id="f18cd-126">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> asynchronously.</span></span> <span data-ttu-id="f18cd-127">Der bei dieser Methode eingerichtete Timeout überschreibt einen Empfangs-Timeout, der für die Bindung eingerichtet ist, die verwendet wird, um die Verbindung zu konfigurieren.</span><span class="sxs-lookup"><span data-stu-id="f18cd-127">The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.</span></span>  
  
 <span data-ttu-id="f18cd-128">Wenn die erhaltene Anforderungsnachricht größer ist als die von der verwendeten Bindung maximal zulässige Größe für Nachrichten, wird eine <xref:System.ServiceModel.QuotaExceededException> ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="f18cd-128">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="f18cd-129">Die maximale Nachrichtengröße wird von der <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>-Eigenschaft festgelegt.</span><span class="sxs-lookup"><span data-stu-id="f18cd-129">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="f18cd-130">Der Standardwert ist 65536 Byte.</span><span class="sxs-lookup"><span data-stu-id="f18cd-130">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f18cd-131">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="f18cd-131">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceiveRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginTryReceiveRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="f18cd-132">Der <see cref="T:System.TimeSpan" />, der angibt, wie lange der Vorgang des Empfangs einer Anforderung vor Timeout und Ausgabe von <see langword="false" /> abgeschlossen sein muss.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-132">The <see cref="T:System.TimeSpan" /> that specifies how long the receive request operation has to complete before timing out and returning <see langword="false" />.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="f18cd-133">Der <see cref="T:System.AsyncCallback" />-Delegat, der die Benachrichtigung vom asynchronen Empfang erhält, der einen Anforderungsvorgang abschließt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-133">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="f18cd-134">Ein von der Anwendung spezifiziertes Objekt, das Zustandsinformationen enthält, die dem asynchronen Vorgang des Empfanges einer Anforderung zugeordnet sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-134">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f18cd-135">Startet einen asynchronen Vorgang, um eine Anforderungsnachricht zu empfangen, die über einen angegebenen Timeout und ein zugeordnetes Statusobjekt verfügt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-135">Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f18cd-136">Das <see cref="T:System.IAsyncResult" />, das auf den asynchronen Vorgang des Empfangs der Anforderung verweist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-136">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive request operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f18cd-137">Verwenden Sie die asynchrone <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>-Methode, wenn die Anwendungsverarbeitung ohne Wartezeiten fortgesetzt werden soll.</span><span class="sxs-lookup"><span data-stu-id="f18cd-137">Use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you need the application processing to continue without waiting.</span></span> <span data-ttu-id="f18cd-138">Verwenden Sie eine der synchronen <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>-Methoden, wenn eine Blockade des aktuellen Threads bis zur Antwort auf die Anforderungsnachricht akzeptabel ist oder bis das Timeoutintervall abgelaufen ist.</span><span class="sxs-lookup"><span data-stu-id="f18cd-138">Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="f18cd-139">Dieser Methode wird in einem Rückruf die Identität des Ereignishandlers für den Vorgang mitgeteilt.</span><span class="sxs-lookup"><span data-stu-id="f18cd-139">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="f18cd-140">Der Vorgang ist nicht abgeschlossen, bevor entweder eine Nachricht im Kanal verfügbar wird oder der Timeout auftritt.</span><span class="sxs-lookup"><span data-stu-id="f18cd-140">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f18cd-141">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="f18cd-141">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="f18cd-142">Der Vorgang gibt <see langword="false" /> zurück, wenn der angegebene <paramref name="timeout" /> überschritten wird.</span>
            <span class="sxs-lookup">
              <span data-stu-id="f18cd-142">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginWaitForRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="f18cd-143">Die <see cref="T:System.TimeSpan" />, die das Zeitintervall für das Warten auf den Empfang einer verfügbaren Anforderung angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-143">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="f18cd-144">Der <see cref="T:System.AsyncCallback" />-Delegat, der die Benachrichtigung vom asynchronen Empfang erhält, der einen Anforderungsvorgang abschließt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-144">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="f18cd-145">Ein von der Anwendung spezifiziertes Objekt, das Zustandsinformationen enthält, die dem asynchronen Vorgang des Empfanges einer Anforderung zugeordnet sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-145">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f18cd-146">Startet einen asynchronen Anforderungsvorgang, der über ein angegebenes Timeout und ein ihm zugeordnetes Zustandsobjekt verfügt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-146">Begins an asynchronous request operation that has a specified time out and state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f18cd-147">Der <see cref="T:System.IAsyncResult" />, der auf den asynchronen Vorgang verweist, um darauf zu warten, dass eine Anforderungsnachricht ankommt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-147">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a request message to arrive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f18cd-148">Verwenden Sie die synchrone <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>-Methode, wenn eine Blockade des aktuellen Threads während des Wartens auf das Eingehen einer Anforderungsnachricht in der Warteschlange akzeptabel ist.</span><span class="sxs-lookup"><span data-stu-id="f18cd-148">Use the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="f18cd-149">Der Thread wird zum angegebenen `timeout` blockiert.</span><span class="sxs-lookup"><span data-stu-id="f18cd-149">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="f18cd-150">Dieser Methode wird in einem Rückruf die Identität des Ereignishandlers für den Vorgang mitgeteilt.</span><span class="sxs-lookup"><span data-stu-id="f18cd-150">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="f18cd-151">Der Vorgang ist nicht abgeschlossen, bevor entweder eine Anforderungsnachricht im Kanal verfügbar wird oder der Timeout auftritt.</span><span class="sxs-lookup"><span data-stu-id="f18cd-151">The operation is not complete until either a request message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f18cd-152">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="f18cd-152">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="f18cd-153">Der Vorgang gibt <see langword="false" /> zurück, wenn der angegebene <paramref name="timeout" /> überschritten wird.</span>
            <span class="sxs-lookup">
              <span data-stu-id="f18cd-153">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext EndReceiveRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveRequest (result As IAsyncResult) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ EndReceiveRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceiveRequest : IAsyncResult -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.EndReceiveRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="f18cd-154">Das <see cref="T:System.IAsyncResult" />, das durch einen Aufruf der <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />-Methode zurückgegeben wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-154">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f18cd-155">Beendet einen asynchronen Vorgang, um eine verfügbare Anforderung zu empfangen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-155">Completes an asynchronous operation to receive an available request.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f18cd-156">Der <see cref="T:System.ServiceModel.Channels.RequestContext" />, der verwendet wird, um eine Antwort auf die Anforderung zu erstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-156">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct a reply to the request.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f18cd-157">Wenn die erhaltene Anforderungsnachricht größer ist als die von der verwendeten Bindung maximal zulässige Größe für Nachrichten, wird eine <xref:System.ServiceModel.QuotaExceededException> ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="f18cd-157">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="f18cd-158">Die maximale Nachrichtengröße wird von der <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>-Eigenschaft festgelegt.</span><span class="sxs-lookup"><span data-stu-id="f18cd-158">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="f18cd-159">Der Standardwert ist 65536 Byte.</span><span class="sxs-lookup"><span data-stu-id="f18cd-159">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f18cd-160">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="f18cd-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="f18cd-161">Der Vorgang sollte einen <see cref="T:System.TimeoutException" /> auslösen, wenn der angegebene <paramref name="timeout" /> überschritten wird, bevor der Vorgang abgeschlossen ist.</span>
            <span class="sxs-lookup">
              <span data-stu-id="f18cd-161">The operation should throw a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceiveRequest(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceiveRequest (result As IAsyncResult, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceiveRequest(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceiveRequest : IAsyncResult *  -&gt; bool" Usage="iReplyChannel.EndTryReceiveRequest (result, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="f18cd-162">Das <see cref="T:System.IAsyncResult" />, das durch einen Aufruf der <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />-Methode zurückgegeben wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-162">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="f18cd-163">Der empfangene <see cref="T:System.ServiceModel.Channels.RequestContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-163">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f18cd-164">Schließt den angegebenen asynchronen Vorgang ab, um eine Anforderungsnachricht zu empfangen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-164">Completes the specified asynchronous operation to receive a request message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f18cd-165">
            <see langword="true" />, wenn eine Anforderungsnachricht empfangen wird, bevor das angegebene Zeitintervall abgelaufen ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-165">
              <see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f18cd-166">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="f18cd-166">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForRequest">
      <MemberSignature Language="C#" Value="public bool EndWaitForRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForRequest (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForRequest : IAsyncResult -&gt; bool" Usage="iReplyChannel.EndWaitForRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="f18cd-167">
            <see cref="T:System.IAsyncResult" />, das den abzuschließenden <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />-Vorgang bestimmt und über das Endergebnis abgerufen werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-167">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f18cd-168">Schließt den angegebenen asynchronen Vorgang des Wartens auf eine Anforderungsnachricht ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-168">Completes the specified asynchronous wait-for-a-request message operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f18cd-169">
            <see langword="true" />, wenn eine Anforderung empfangen wird, bevor das angegebene Zeitintervall abgelaufen ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-169">
              <see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f18cd-170">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="f18cd-170">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f18cd-171">Ruft die Adresse ab, auf der dieser Antwortkanal Nachrichten empfängt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-171">Gets the address on which this reply channel receives messages.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f18cd-172">Die <see cref="T:System.ServiceModel.EndpointAddress" />, auf der dieser Antwortkanal Nachrichten empfängt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-172">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which this reply channel receives messages.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f18cd-173">Im folgenden Code wird veranschaulicht, wie diese Eigenschaft implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="f18cd-173">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f18cd-174">Gibt, wenn verfügbar, den Kontext der empfangenen Anforderung zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-174">Returns the context of the request received, if one is available</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest () As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest();" />
      <MemberSignature Language="F#" Value="abstract member ReceiveRequest : unit -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.ReceiveRequest " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f18cd-175">Gibt, wenn verfügbar, den Kontext der empfangenen Anforderung zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-175">Returns the context of the request received, if one is available.</span>
          </span>
          <span data-ttu-id="f18cd-176">Wenn kein Kontext verfügbar ist, wird gewartet, bis einer zur Verfügung steht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-176">If a context is not available, waits until there is one available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f18cd-177">Der für die Erstellung von Antworten verwendete <see cref="T:System.ServiceModel.Channels.RequestContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-177">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f18cd-178"><xref:System.ServiceModel.Channels.RequestContext> kapselt die Anforderungsnachricht und einen Mechanismus für die Antwort auf diese Nachricht ein.</span><span class="sxs-lookup"><span data-stu-id="f18cd-178"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="f18cd-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> kann mehrmals oder gleichzeitig aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="f18cd-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="f18cd-180">Nur ein <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>-Aufruf wird pro empfangener Anforderung abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="f18cd-180">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="f18cd-181">Wenn die erhaltene Anforderungsnachricht größer ist als die von der verwendeten Bindung maximal zulässige Größe für Nachrichten, wird eine <xref:System.ServiceModel.QuotaExceededException> ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="f18cd-181">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="f18cd-182">Die maximale Nachrichtengröße wird von der <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>-Eigenschaft festgelegt.</span><span class="sxs-lookup"><span data-stu-id="f18cd-182">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="f18cd-183">Der Standardwert ist 65536 Byte.</span><span class="sxs-lookup"><span data-stu-id="f18cd-183">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f18cd-184">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="f18cd-184">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#7](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest (timeout As TimeSpan) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveRequest : TimeSpan -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.ReceiveRequest timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="f18cd-185">Der <see cref="T:System.TimeSpan" />, der angibt, wie lange der Vorgang des Empfangs einer Anforderung vor Timeout und Ausgabe von <see langword="false" /> abgeschlossen sein muss.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-185">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f18cd-186">Gibt, wenn verfügbar, den Kontext der empfangenen Anforderung zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-186">Returns the context of the request received, if one is available.</span>
          </span>
          <span data-ttu-id="f18cd-187">Wenn kein Kontext verfügbar ist, wird gewartet, bis einer zur Verfügung steht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-187">If a context is not available, waits until there is one available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f18cd-188">Der für die Erstellung von Antworten verwendete <see cref="T:System.ServiceModel.Channels.RequestContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-188">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f18cd-189"><xref:System.ServiceModel.Channels.RequestContext> kapselt die Anforderungsnachricht und einen Mechanismus für die Antwort auf diese Nachricht ein.</span><span class="sxs-lookup"><span data-stu-id="f18cd-189"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="f18cd-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> kann mehrmals oder gleichzeitig aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="f18cd-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="f18cd-191">Nur ein <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>-Aufruf wird pro empfangener Anforderung abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="f18cd-191">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="f18cd-192">Wenn die erhaltene Anforderungsnachricht größer ist als die von der verwendeten Bindung maximal zulässige Größe für Nachrichten, wird eine <xref:System.ServiceModel.QuotaExceededException> ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="f18cd-192">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="f18cd-193">Die maximale Nachrichtengröße wird von der <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>-Eigenschaft festgelegt.</span><span class="sxs-lookup"><span data-stu-id="f18cd-193">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="f18cd-194">Der Standardwert ist 65536 Byte.</span><span class="sxs-lookup"><span data-stu-id="f18cd-194">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f18cd-195">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="f18cd-195">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#8](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveRequest(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveRequest (timeout As TimeSpan, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceiveRequest(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberSignature Language="F#" Value="abstract member TryReceiveRequest : TimeSpan *  -&gt; bool" Usage="iReplyChannel.TryReceiveRequest (timeout, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="f18cd-196">Der <see cref="T:System.TimeSpan" />, der angibt, wie lange der Vorgang des Empfangs einer Anforderung vor Timeout und Ausgabe von <see langword="false" /> abgeschlossen sein muss.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-196">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="f18cd-197">Der empfangene <see cref="T:System.ServiceModel.Channels.RequestContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-197">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f18cd-198">Gibt einen Wert zurück, der angibt, ob eine Anforderung vor Ablauf eines angegebenen Zeitintervalls empfangen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-198">Returns a value that indicates whether a request is received before a specified interval of time elapses.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f18cd-199">
            <see langword="true" />, wenn eine Anforderungsnachricht empfangen wird, bevor das angegebene Zeitintervall abgelaufen ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-199">
              <see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f18cd-200">Verwenden Sie <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>, wenn eine Blockade des aktuellen Threads bis zum Eingehen einer Anforderungsnachricht in der Warteschlange akzeptabel ist.</span><span class="sxs-lookup"><span data-stu-id="f18cd-200">Use <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="f18cd-201">Der Thread wird zum angegebenen `timeout` blockiert.</span><span class="sxs-lookup"><span data-stu-id="f18cd-201">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="f18cd-202">Wenn die Anwendungsverarbeitung ohne Wartezeiten fortgesetzt werden soll, verwenden Sie die asynchrone <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>-Methode.</span><span class="sxs-lookup"><span data-stu-id="f18cd-202">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f18cd-203">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="f18cd-203">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="f18cd-204">Der Vorgang gibt <see langword="false" /> zurück, wenn der angegebene <paramref name="timeout" /> überschritten wird.</span>
            <span class="sxs-lookup">
              <span data-stu-id="f18cd-204">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WaitForRequest">
      <MemberSignature Language="C#" Value="public bool WaitForRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForRequest (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForRequest(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForRequest : TimeSpan -&gt; bool" Usage="iReplyChannel.WaitForRequest timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="f18cd-205">Der <see cref="T:System.TimeSpan" />, der angibt, wie lange ein Anforderungsvorgang vor Timeout und Ausgabe von <see langword="false" /> abgeschlossen sein muss.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-205">The <see cref="T:System.TimeSpan" /> that specifies how long a request operation has to complete before timing out and returning <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f18cd-206">Gibt einen Wert zurück, der angibt, ob eine Anforderungsnachricht vor Ablauf eines angegebenen Zeitintervalls empfangen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-206">Returns a value that indicates whether a request message is received before a specified interval of time elapses.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f18cd-207">
            <see langword="true" />, wenn eine Anforderung empfangen wird, bevor das angegebene Zeitintervall abgelaufen ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f18cd-207">
              <see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f18cd-208"><xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> aufzurufen, führt nicht dazu, dass eine Anforderungsnachricht empfangen oder auf jegliche Art und Weise verarbeitet wird.</span><span class="sxs-lookup"><span data-stu-id="f18cd-208">Calling <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> does not result in a request message being received or processed in any way.</span></span>  
  
 <span data-ttu-id="f18cd-209">Die <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>-Methode existiert primär für transaktive Szenarien, bei denen der Benutzer die Nachricht unter Verwendung einer Transaktion empfangen möchte.</span><span class="sxs-lookup"><span data-stu-id="f18cd-209">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="f18cd-210">Bei der Verwendung von lediglich <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> hierfür, muss der Benutzer eine Transaktion erstellen und dann <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> aufrufen und hoffen, dass die Nachricht ankommt, bevor der Transaktions-Timeout abläuft. Dies ist nicht immer möglich.</span><span class="sxs-lookup"><span data-stu-id="f18cd-210">When using just <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normally for this, the user must create the transaction, and then call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="f18cd-211">Stattdessen kann der Benutzer <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> aufrufen und den Timeout festlegen (auch unendlich), um dann bei Ankunft einer Nachricht die Transaktion zu öffnen, <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> aufzurufen und so sicherzustellen, dass die Nachricht vor Ablauf der Transaktion zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="f18cd-211">Instead, the user can call <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> and specify the time out (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="f18cd-212">Verwenden Sie <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>¸ wenn eine Blockade des aktuellen Threads bis zum Eingehen einer Nachricht in die Warteschlange akzeptabel ist.</span><span class="sxs-lookup"><span data-stu-id="f18cd-212">Use <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="f18cd-213">Der Thread wird zum angegebenen `timeout` blockiert.</span><span class="sxs-lookup"><span data-stu-id="f18cd-213">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="f18cd-214">Wenn die Anwendungsverarbeitung ohne Wartezeiten fortgesetzt werden soll, verwenden Sie die asynchrone <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>-Methode.</span><span class="sxs-lookup"><span data-stu-id="f18cd-214">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f18cd-215">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="f18cd-215">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#9](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="f18cd-216">Der Vorgang gibt <see langword="false" /> zurück, wenn der angegebene <paramref name="timeout" /> überschritten wird.</span>
            <span class="sxs-lookup">
              <span data-stu-id="f18cd-216">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>
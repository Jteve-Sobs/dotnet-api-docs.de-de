<Type Name="IInputChannel" FullName="System.ServiceModel.Channels.IInputChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="385e652d7743b259c211943629a9e6f227172830" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83494046" /></Metadata><TypeSignature Language="C#" Value="public interface IInputChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IInputChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInputChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInputChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IInputChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.6.0.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.7.0.0" FrameworkAlternate="dotnet-plat-ext-3.1" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="3bf7a-101">Definiert die Schnittstelle, die ein Kanal implementieren muss, um eine Nachricht zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-101">Defines the interface that a channel must implement to receive a message.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="3bf7a-102">Der <xref:System.ServiceModel.Channels.IInputChannel>-Vertrag enthält synchrone und asynchrone Varianten von Empfangs-, Empfangsversuchs- und Warten-auf-Nachricht-Funktionen.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-102">The <xref:System.ServiceModel.Channels.IInputChannel> contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="3bf7a-103">Das Pullmodell wird üblicherweise mit <xref:System.ServiceModel.Channels.IInputChannel> verwendet, um Nachrichten zu empfangen: Sie rufen <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> auf (um eine Nachricht aus dem Kanal zu 'ziehen' (pull) und warten dann auf das Eingehen der Nachricht.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-103">The pull model is used typically with an <xref:System.ServiceModel.Channels.IInputChannel> to receive messages: you call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (to "pull" a message out of the channel) and then wait for a message to arrive.</span></span> <span data-ttu-id="3bf7a-104">Ein alternatives Verwendungsmuster ist der Aufruf von <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> oder <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> und dann <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-104">An alternative usage pattern is to call <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> or <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>, and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span></span> <span data-ttu-id="3bf7a-105">Dieser Ansatz ist für eine transaktionale Verwendung üblich, wobei die Transaktion zwischen den Aufrufen von <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> und <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-105">This approach is common for transactional usages where you start the transaction between the calls to <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> and <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="3bf7a-106">Ein <xref:System.ServiceModel.Channels.IInputChannel> ist nicht notwendigerweise an einen einzelnen Absender gebunden.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-106">An <xref:System.ServiceModel.Channels.IInputChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="3bf7a-107">Andere Kanäle und Kanalschnittstellen können eine Beziehung zwischen bestimmten Absendern und <xref:System.ServiceModel.Channels.IInputChannel> bieten, aber der Basisvertrag macht diese Einschränkung nicht.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-107">Other channels and channel interfaces can provide a correlation between particular senders and an <xref:System.ServiceModel.Channels.IInputChannel>, but the base contract makes no such restriction.</span></span> <span data-ttu-id="3bf7a-108">Eine Implementierung kann einen neuen <xref:System.ServiceModel.Channels.IInputChannel> für jede Nachricht erstellen oder denselben <xref:System.ServiceModel.Channels.IInputChannel> für mehrere Nachrichten und Absender wiederverwenden.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-108">An implementation can create a new <xref:System.ServiceModel.Channels.IInputChannel> for each message or reuse the same <xref:System.ServiceModel.Channels.IInputChannel> for multiple messages and senders.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3bf7a-109">Beginnt einen asynchronen Empfangsvorgang.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-109">Begins an asynchronous receive operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bf7a-110">Verwenden Sie die asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>-Methode, wenn die Anwendungsverarbeitung ohne Wartezeiten für den Empfang der Anforderung fortgesetzt werden soll.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-110">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="3bf7a-111">Verwenden Sie die synchrone <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>-Methode, wenn eine Blockade des aktuellen Threads bis zum Eingehen einer Anforderungsnachricht oder bis zum Überschreiten des von `timeout` festgelegten Zeitintervalls akzeptabel ist</span><span class="sxs-lookup"><span data-stu-id="3bf7a-111">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="3bf7a-112">Der asynchrone Vorgang ist mit oder ohne ein explizites Timeout verfügbar.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-112">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="3bf7a-113">Der <see cref="T:System.AsyncCallback" />-Delegat, der die Benachrichtigung über den Abschluss des asynchronen Vorgangs erhält.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-113">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="3bf7a-114">Ein durch die Anwendung festgelegtes Objekt, das dem asynchronen Vorgang zugeordnete Statusinformationen enthält.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-114">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="3bf7a-115">Startet einen asynchronen Vorgang, um eine Nachricht zu empfangen, die über ein ihm zugeordnetes Statusobjekt verfügt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-115">Begins an asynchronous operation to receive a message that has a state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="3bf7a-116">Der <see cref="T:System.IAsyncResult" />-Wert, der auf den asynchronen Nachrichtenempfang verweist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-116">The <see cref="T:System.IAsyncResult" /> that references the asynchronous message reception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bf7a-117">Verwenden Sie die asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>-Methode, wenn die Anwendungsverarbeitung ohne Wartezeiten für den Empfang der Anforderung fortgesetzt werden soll.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-117">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="3bf7a-118">Verwenden Sie die synchrone <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>-Methode, wenn eine Blockade des aktuellen Threads bis zum Eingehen einer Anforderungsnachricht oder bis zum Überschreiten des von `timeout` festgelegten Zeitintervalls akzeptabel ist</span><span class="sxs-lookup"><span data-stu-id="3bf7a-118">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="3bf7a-119">Der asynchrone Vorgang ist mit oder ohne ein explizites Timeout verfügbar.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-119">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="3bf7a-120">Dieser Methode wird in einem Rückruf die Identität des Ereignishandlers für den Vorgang mitgeteilt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-120">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="3bf7a-121">Dieser Vorgang wird nicht abgeschlossen, bevor eine Nachricht im Kanal verfügbar wird.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-121">The operation is not complete until a message becomes available in the channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3bf7a-122">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="3bf7a-122">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#15](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="3bf7a-123">Der <see cref="T:System.TimeSpan" />-Wert, der das Zeitintervall für das Warten darauf angibt, das eine Nachricht verfügbar wird.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-123">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="3bf7a-124">Der <see cref="T:System.AsyncCallback" />-Delegat, der die Benachrichtigung über den Abschluss des asynchronen Vorgangs erhält.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-124">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="3bf7a-125">Ein durch die Anwendung festgelegtes Objekt, das dem asynchronen Vorgang zugeordnete Statusinformationen enthält.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-125">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="3bf7a-126">Startet einen asynchronen Vorgang, eine Nachricht zu empfangen, die über einen angegebenen Timeout und ein zugeordnetes Statusobjekt verfügt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-126">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="3bf7a-127">Der <see cref="T:System.IAsyncResult" />-Wert, der auf den asynchronen Empfangsvorgang verweist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-127">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bf7a-128">Verwenden Sie die asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>-Methode, wenn die Anwendungsverarbeitung ohne Wartezeiten für den Empfang der Anforderung fortgesetzt werden soll.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-128">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="3bf7a-129">Verwenden Sie die synchrone <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>-Methode, wenn eine Blockade des aktuellen Threads bis zum Eingehen einer Anforderungsnachricht oder bis zum Überschreiten des von `timeout` festgelegten Zeitintervalls akzeptabel ist</span><span class="sxs-lookup"><span data-stu-id="3bf7a-129">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="3bf7a-130">Der asynchrone Vorgang ist mit oder ohne ein explizites Timeout verfügbar.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-130">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="3bf7a-131">Der Vorgang ist nicht abgeschlossen, bevor entweder eine Nachricht im Kanal verfügbar wird oder der Timeout auftritt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-131">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3bf7a-132">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="3bf7a-132">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#16](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="3bf7a-133">Der festgelegte <paramref name="timeout" /> wird überstiegen, bevor der Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-133">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3bf7a-134">Der festgelegte Timeout ist kleiner als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="3bf7a-134">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="3bf7a-135">Der Vorgang löst eine <see cref="T:System.TimeoutException" /> aus, wenn der festgelegte <paramref name="timeout" />-Wert vor Abschluss überschritten wird.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-135">The operation throws a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before it completes.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginTryReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="3bf7a-136">Der <see cref="T:System.TimeSpan" />-Wert, der das Zeitintervall für das Warten darauf angibt, das eine Nachricht verfügbar wird.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-136">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="3bf7a-137">Der <see cref="T:System.AsyncCallback" />-Delegat, der die Benachrichtigung über den Abschluss des asynchronen Vorgangs erhält.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-137">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="3bf7a-138">Ein durch die Anwendung festgelegtes Objekt, das dem asynchronen Vorgang zugeordnete Statusinformationen enthält.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-138">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="3bf7a-139">Startet einen asynchronen Vorgang, eine Nachricht zu empfangen, die über einen angegebenen Timeout und ein zugeordnetes Statusobjekt verfügt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-139">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="3bf7a-140">Der <see cref="T:System.IAsyncResult" />-Wert, der auf den asynchronen Empfangsvorgang verweist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-140">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bf7a-141">Verwenden Sie die asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>-Methode, wenn die Anwendungsverarbeitung ohne Wartezeiten fortgesetzt werden soll.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-141">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you want the application processing to continue without waiting.</span></span> <span data-ttu-id="3bf7a-142">Verwenden Sie die synchrone <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29>-Methode, wenn eine Blockade des aktuellen Threads bis zur Antwort auf die Anforderungsnachricht akzeptabel ist oder bis das Timeoutintervall abgelaufen ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-142">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> method when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="3bf7a-143">Der Vorgang ist nicht abgeschlossen, bevor entweder eine Nachricht im Kanal verfügbar wird oder der Timeout auftritt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-143">The operation is not complete until either a message becomes available in the channel or the timeout occurs.</span></span>  
  
 <span data-ttu-id="3bf7a-144">Wenn Sie Timeouts handhaben und nicht nur den <xref:System.TimeoutException> neu auslösen oder einbinden, sollten Sie <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> anstatt <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> aufrufen.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-144">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="3bf7a-145">Wenn Sie Timeouts nicht gesondert behandeln, rufen Sie einfach <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> auf, andernfalls verlieren Sie Fehlerinformationen.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-145">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, otherwise you lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3bf7a-146">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="3bf7a-146">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="3bf7a-147">Der festgelegte <paramref name="timeout" /> wird überstiegen, bevor der Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-147">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3bf7a-148">Der festgelegte Timeout ist kleiner als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="3bf7a-148">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="3bf7a-149">Der Vorgang gibt <see langword="false" /> von <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> zurück, wenn die angegebene <paramref name="timeout" /> überschritten wurde.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-149">The operation returns <see langword="false" /> from <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForMessage">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForMessage (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForMessage(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForMessage (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForMessage(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForMessage : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginWaitForMessage (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="3bf7a-150">Der <see cref="T:System.TimeSpan" />-Wert, der das Zeitintervall für das Warten darauf angibt, das eine Nachricht verfügbar wird.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-150">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="3bf7a-151">Der <see cref="T:System.AsyncCallback" />-Delegat, der die Benachrichtigung über den Abschluss des asynchronen Vorgangs erhält.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-151">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="3bf7a-152">Ein durch die Anwendung festgelegtes Objekt, das dem asynchronen Vorgang zugeordnete Statusinformationen enthält.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-152">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="3bf7a-153">Startet einen asynchronen Vorgang für das Warten auf den Nachrichteneingang, der über einen angegebenen Timeout und ein zugeordnetes Statusobjekt verfügt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-153">Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="3bf7a-154">Der <see cref="T:System.IAsyncResult" />-Wert, der auf den asynchronen Vorgang für das Warten auf den Nachrichteneingang verweist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-154">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a message to arrive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bf7a-155">Verwenden Sie die asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>-Methode, wenn die Anwendungsverarbeitung ohne Wartezeiten für den Nachrichteneingang fortgesetzt werden soll.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-155">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method if you need the application processing to continue without waiting for the message to arrive.</span></span> <span data-ttu-id="3bf7a-156">Verwenden Sie die synchrone <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29>-Methode, wenn eine Blockade des aktuellen Threads während des Wartens auf das Eingehen einer Nachricht in der Warteschlange akzeptabel ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-156">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="3bf7a-157">Der Thread wird zum angegebenen `timeout` blockiert.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-157">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="3bf7a-158">Dieser Methode wird in einem Rückruf die Identität des Ereignishandlers für den Vorgang mitgeteilt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-158">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="3bf7a-159">Der Vorgang ist nicht abgeschlossen, bevor entweder eine Nachricht im Kanal verfügbar wird oder der Timeout auftritt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-159">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3bf7a-160">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="3bf7a-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#22](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="3bf7a-161">Der festgelegte <paramref name="timeout" /> wird überstiegen, bevor der Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-161">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3bf7a-162">Der festgelegte Timeout ist kleiner als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="3bf7a-162">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="3bf7a-163">Der Vorgang gibt <see langword="false" /> zurück, wenn der angegebene <paramref name="timeout" /> überschritten wird, nicht eine Timeoutausnahme.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-163">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndReceive (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndReceive(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndReceive(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceive : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.EndReceive result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="3bf7a-164"><see cref="T:System.IAsyncResult" />, das von einem Aufruf der <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />-Methoden zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-164">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span></span></param>
        <summary><span data-ttu-id="3bf7a-165">Schließt einen asynchronen Vorgang zum Empfang einer Nachricht ab.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-165">Completes an asynchronous operation to receive a message.</span></span></summary>
        <returns><span data-ttu-id="3bf7a-166">Der empfangene <see cref="T:System.ServiceModel.Channels.Message" />.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-166">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3bf7a-167">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="3bf7a-167">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#17](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceive">
      <MemberSignature Language="C#" Value="public bool EndTryReceive (IAsyncResult result, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceive(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceive (result As IAsyncResult, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceive(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceive : IAsyncResult * Message -&gt; bool" Usage="iInputChannel.EndTryReceive (result, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="3bf7a-168">Das <see cref="T:System.IAsyncResult" />, das durch einen Aufruf der <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />-Methode zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-168">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <param name="message"><span data-ttu-id="3bf7a-169">Der empfangene <see cref="T:System.ServiceModel.Channels.Message" />.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-169">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></param>
        <summary><span data-ttu-id="3bf7a-170">Schließt den angegebenen asynchronen Vorgang ab, um eine Nachricht zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-170">Completes the specified asynchronous operation to receive a message.</span></span></summary>
        <returns><span data-ttu-id="3bf7a-171"><see langword="true" />, wenn eine Nachricht empfangen wird, bevor das angegebene Zeitintervall abgelaufen ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-171"><see langword="true" /> if a message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3bf7a-172">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="3bf7a-172">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#20](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForMessage">
      <MemberSignature Language="C#" Value="public bool EndWaitForMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForMessage (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForMessage(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForMessage : IAsyncResult -&gt; bool" Usage="iInputChannel.EndWaitForMessage result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="3bf7a-173"><see cref="T:System.IAsyncResult" />, das den abzuschließenden <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />-Vorgang bestimmt und über das Endergebnis abgerufen werden kann.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-173">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="3bf7a-174">Schließt den angegebenen asynchronen Vorgang des Wartens auf eine Nachricht ab.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-174">Completes the specified asynchronous wait-for-a-message operation.</span></span></summary>
        <returns><span data-ttu-id="3bf7a-175"><see langword="true" />, wenn eine Nachricht angekommen ist, bevor der <paramref name="timeout" /> überschritten wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-175"><see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3bf7a-176">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="3bf7a-176">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3bf7a-177">Ruft die Adresse ab, auf der der Eingabekanal Nachrichten empfängt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-177">Gets the address on which the input channel receives messages.</span></span></summary>
        <value><span data-ttu-id="3bf7a-178">Die <see cref="T:System.ServiceModel.EndpointAddress" />, auf der der Eingabekanal Nachrichten empfängt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-178">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which the input channel receives messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bf7a-179">Verfügt dieser Eingabekanal nicht über eine eigenständige Adresse (Beispiel: Eingabeseite eines vom Client initiierten TCP-Kanals), lautet die Eigenschaft `null`.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-179">If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is `null`.</span></span>  
  
 <span data-ttu-id="3bf7a-180">Diese Eigenschaft kann von Kanälen höherer Ebene zu Korrelationszwecken verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-180">This property can be used by higher-level channels for correlation purposes.</span></span> <span data-ttu-id="3bf7a-181">Implementiert beispielsweise ein Kanal höherer Ebene eine Anforderung-Antwort auf einem <xref:System.ServiceModel.Channels.IDuplexChannel>, kann die <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A>-Eigenschaft im WS-Addressing-ReplyTo-Header verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-181">For example, if a higher-level channel implements request-reply on top of a <xref:System.ServiceModel.Channels.IDuplexChannel>, it can use the <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> property in the WS-Addressing ReplyTo header.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3bf7a-182">Im folgenden Code wird veranschaulicht, wie diese Eigenschaft implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="3bf7a-182">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.ServiceProcess.TimeoutException"><span data-ttu-id="3bf7a-183">Der Vorgang wurde mit dem Timeoutintervall nicht abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-183">The operation did not complete with the timeout interval.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationException"><span data-ttu-id="3bf7a-184">Der Eingabekanal ist fehlgeschlagen.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-184">The input channel failed.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException"><span data-ttu-id="3bf7a-185">Der Eingabekanal wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-185">The input channel has been aborted.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException"><span data-ttu-id="3bf7a-186">Der Eingabekanal hat einen Fehler verursacht.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-186">The input channel faulted.</span></span></exception>
        <summary><span data-ttu-id="3bf7a-187">Gibt, wenn verfügbar, eine vom Eingabekanal empfangene Nachricht mit einem Zeitintervall aus, das explizit oder implizit definiert ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-187">Returns a message received by the input channel, if one is available with an interval of time that is explicitly or implicitly defined.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bf7a-188">Verwenden Sie die synchrone <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>-Methode, wenn eine Blockade des aktuellen Threads bis zum Eingehen einer Anforderungsnachricht oder bis zum Überschreiten des von `timeout` festgelegten Zeitintervalls akzeptabel ist</span><span class="sxs-lookup"><span data-stu-id="3bf7a-188">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="3bf7a-189">Verwenden Sie die asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>-Methode, wenn die Anwendungsverarbeitung ohne Wartezeiten für den Empfang der Anforderung fortgesetzt werden soll.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-189">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you need the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="3bf7a-190">Der synchrone <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>-Vorgang ist mit oder ohne ein explizites Timeout verfügbar.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-190">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="3bf7a-191">Wenn keine Nachricht verfügbar ist, erfolgt eine Blockade, bis eine verfügbar ist oder bis der Timeout überschritten wird.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-191">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive();" />
      <MemberSignature Language="F#" Value="abstract member Receive : unit -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3bf7a-192">Gibt die empfangene Nachricht zurück, wenn eine verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-192">Returns the message received, if one is available.</span></span> <span data-ttu-id="3bf7a-193">Ist keine Nachricht verfügbar, erfolgt eine Blockade für die Dauer des Standardzeitintervalls.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-193">If a message is not available, blocks for a default interval of time.</span></span></summary>
        <returns><span data-ttu-id="3bf7a-194">Der empfangene <see cref="T:System.ServiceModel.Channels.Message" />.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-194">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bf7a-195">Verwenden Sie die synchrone <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>-Methode, wenn eine Blockade des aktuellen Threads bis zum Eingehen einer Anforderungsnachricht oder bis zum Überschreiten des von `timeout` festgelegten Zeitintervalls akzeptabel ist</span><span class="sxs-lookup"><span data-stu-id="3bf7a-195">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="3bf7a-196">Verwenden Sie die asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>-Methode, wenn die Anwendungsverarbeitung ohne Wartezeiten für den Empfang der Anforderung fortgesetzt werden soll.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-196">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="3bf7a-197">Der synchrone <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>-Vorgang ist mit oder ohne ein explizites Timeout verfügbar.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-197">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="3bf7a-198">Wenn keine Nachricht verfügbar ist, erfolgt eine Blockade, bis eine verfügbar ist oder bis der Timeout überschritten wird.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-198">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="3bf7a-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> kann mehrmals oder gleichzeitig aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="3bf7a-200">Für jede empfangene Nachricht kann nur ein <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>-Aufruf durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-200">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3bf7a-201">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="3bf7a-201">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Receive : TimeSpan -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="3bf7a-202">Der <see cref="T:System.TimeSpan" />-Wert, der angibt, wie lange der Empfangsvorgang vor Timeout und Ausgabe von <see cref="T:System.TimeoutException" /> abgeschlossen sein muss.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-202">The <see cref="T:System.TimeSpan" /> that specifies how long the receive operation has to complete before timing out and throwing a <see cref="T:System.TimeoutException" />.</span></span></param>
        <summary><span data-ttu-id="3bf7a-203">Gibt die empfangene Nachricht zurück, wenn eine verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-203">Returns the message received, if one is available.</span></span> <span data-ttu-id="3bf7a-204">Ist keine Nachricht verfügbar, erfolgt eine Blockade für die Dauer eines festgelegten Zeitintervalls.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-204">If a message is not available, blocks for a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="3bf7a-205">Der empfangene <see cref="T:System.ServiceModel.Channels.Message" />.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-205">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bf7a-206">Verwenden Sie die synchrone <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>-Methode, wenn eine Blockade des aktuellen Threads bis zum Eingehen einer Anforderungsnachricht oder bis zum Überschreiten des von `timeout` festgelegten Zeitintervalls akzeptabel ist</span><span class="sxs-lookup"><span data-stu-id="3bf7a-206">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="3bf7a-207">Verwenden Sie die asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>-Methode, wenn die Anwendungsverarbeitung ohne Wartezeiten für den Empfang der Anforderung fortgesetzt werden soll.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-207">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="3bf7a-208">Der synchrone <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>-Vorgang ist mit oder ohne ein explizites Timeout verfügbar.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-208">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="3bf7a-209">Wenn keine Nachricht verfügbar ist, erfolgt eine Blockade, bis eine verfügbar ist oder bis der Timeout überschritten wird.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-209">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="3bf7a-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> kann mehrmals oder gleichzeitig aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="3bf7a-211">Für jede empfangene Nachricht kann nur ein <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>-Aufruf durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-211">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3bf7a-212">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="3bf7a-212">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#14](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="3bf7a-213">Der festgelegte <paramref name="timeout" /> wird überstiegen, bevor der Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-213">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3bf7a-214">Der festgelegte Timeout ist kleiner als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="3bf7a-214">The timeout specified is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (TimeSpan timeout, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (timeout As TimeSpan, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceive(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : TimeSpan * Message -&gt; bool" Usage="iInputChannel.TryReceive (timeout, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="3bf7a-215"><see cref="T:System.IAsyncResult" />, das von einem Aufruf der <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />-Methoden zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-215">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span></span></param>
        <param name="message"><span data-ttu-id="3bf7a-216">Der empfangene <see cref="T:System.ServiceModel.Channels.Message" />.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-216">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></param>
        <summary><span data-ttu-id="3bf7a-217">Versucht, eine Nachricht innerhalb eines angegebenen Zeitintervalls zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-217">Tries to receive a message within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="3bf7a-218"><see langword="true" />, wenn eine Nachricht empfangen wird, bevor der <paramref name="timeout" /> überschritten wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-218"><see langword="true" /> if a message is received before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bf7a-219">Wenn Sie Timeouts handhaben und nicht nur den <xref:System.TimeoutException> neu auslösen oder einbinden, sollten Sie <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> anstatt <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> aufrufen.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-219">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="3bf7a-220">Wenn Sie Timeouts nicht gesondert behandeln, rufen Sie einfach <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> auf, andernfalls verlieren Sie Fehlerinformationen.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-220">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, otherwise you will lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3bf7a-221">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="3bf7a-221">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#18](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="3bf7a-222">Der festgelegte <paramref name="timeout" /> wird überstiegen, bevor der Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-222">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3bf7a-223">Der festgelegte Timeout ist kleiner als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="3bf7a-223">The timeout specified is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForMessage">
      <MemberSignature Language="C#" Value="public bool WaitForMessage (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForMessage(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForMessage (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForMessage(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForMessage : TimeSpan -&gt; bool" Usage="iInputChannel.WaitForMessage timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="3bf7a-224">Der <see cref="T:System.TimeSpan" />-Wert, der das maximale Zeitintervall für das Warten auf den Nachrichteneingang vor dem Timeout angibt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-224">The <see cref="T:System.TimeSpan" /> specifies the maximum interval of time to wait for a message to arrive before timing out.</span></span></param>
        <summary><span data-ttu-id="3bf7a-225">Gibt einen Wert zurück, der angibt, ob eine Nachricht innerhalb eines angegebenen Zeitintervalls angekommen ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-225">Returns a value that indicates whether a message has arrived within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="3bf7a-226"><see langword="true" />, wenn eine Nachricht angekommen ist, bevor der <paramref name="timeout" /> überschritten wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-226"><see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bf7a-227"><xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> aufzurufen, führt nicht dazu, dass eine Nachricht empfangen oder auf jegliche andere Art und Weise verarbeitet wird.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-227">Calling <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> does not result in a message being received or processed in any other way.</span></span>  
  
 <span data-ttu-id="3bf7a-228">Die <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29>-Methode existiert primär für transaktive Szenarien, bei denen der Benutzer die Nachricht unter Verwendung einer Transaktion empfangen möchte.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-228">The <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="3bf7a-229">Bei der Verwendung von lediglich <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> hierfür, muss der Benutzer eine Transaktion erstellen und dann <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> aufrufen und hoffen, dass die Nachricht eingeht, bevor der Transaktions-Timeout abläuft. Dies ist nicht notwendigerweise möglich.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-229">When using just <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> normally for this, the user must create the transaction and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="3bf7a-230">Stattdessen kann der Benutzer <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> mit beliebigem Timeout (auch unendlich) aufrufen, um dann bei Nachrichteneingang die Transaktion zu öffnen, <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> aufzurufen und so sicherzustellen, dass vor Ablauf der Transaktion die Nachricht zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-230">Instead, the user can call <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> with whatever time out they want (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="3bf7a-231">Diese Methode ist synchron. Sie blockiert daher den aktuellen Thread, bis eine Nachricht verfügbar ist oder der Timeout eintritt.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-231">This method is synchronous, so it blocks the current thread until a message is available or the time out occurs.</span></span> <span data-ttu-id="3bf7a-232">Verwenden Sie <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29>¸ wenn eine Blockade des aktuellen Threads bis zum Eingehen einer Nachricht in die Warteschlange akzeptabel ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-232">Use <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="3bf7a-233">Der Thread wird zum angegebenen `timeout` blockiert.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-233">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="3bf7a-234">Wenn die Anwendungsverarbeitung ohne Wartezeiten fortgesetzt werden soll, verwenden Sie die asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>-Methode.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-234">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3bf7a-235">Im folgenden Code wird veranschaulicht, wie diese Methode implementiert wird:</span><span class="sxs-lookup"><span data-stu-id="3bf7a-235">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#21](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="3bf7a-236">Der festgelegte <paramref name="timeout" /> wird überstiegen, bevor der Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-236">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3bf7a-237">Der festgelegte Timeout ist kleiner als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="3bf7a-237">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="3bf7a-238">Der Vorgang gibt <see langword="false" /> zurück, wenn der angegebene <paramref name="timeout" /> überschritten wird, nicht eine Timeoutausnahme.</span><span class="sxs-lookup"><span data-stu-id="3bf7a-238">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>

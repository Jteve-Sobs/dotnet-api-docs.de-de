<Type Name="ContractArgumentValidatorAttribute" FullName="System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f1268ee8fefdc0a055456af14e5f2ad76b6cfb5e" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78821479" /></Metadata><TypeSignature Language="C#" Value="public sealed class ContractArgumentValidatorAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ContractArgumentValidatorAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ContractArgumentValidatorAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContractArgumentValidatorAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ContractArgumentValidatorAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Contracts</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Diagnostics.Contracts" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.Diagnostics.Conditional("CONTRACTS_FULL")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7d652-101">Aktiviert die Verarbeitung von Legacy <see langword="if-then-throw" />-Code in separate Methoden zur Wiederverwendung und stellt die vollständige Kontrolle über ausgelösten Ausnahmen und Argumenten bereit.</span><span class="sxs-lookup"><span data-stu-id="7d652-101">Enables the factoring of legacy <see langword="if-then-throw" /> code into separate methods for reuse, and provides full control over thrown exceptions and arguments.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d652-102">Wenn Ihr Code expliziten `if-then-throw` Code verwendet, um Parameter zu überprüfen, können Sie Hilfsmethoden verwenden, die bei einem Fehler Überprüfungen ausführen und bestimmte Ausnahmen auslösen, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="7d652-102">If your code uses explicit `if-then-throw` code to validate parameters, you may be employing helper methods that perform checks and throw particular exceptions on failure, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow1.cs#1)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow1.vb#1)]  
  
 <span data-ttu-id="7d652-103">In diesem Beispiel hat `Execute` eine wählende Vorbedingung, die angibt, dass der Parameterwert nicht `null`werden soll.</span><span class="sxs-lookup"><span data-stu-id="7d652-103">In this example, `Execute` has an elective precondition specifying that the parameter value should not be `null`.</span></span> <span data-ttu-id="7d652-104">Damit die Vertrags Tools erkennen können, dass der Aufruf von `ValidationHelper.NotNull` einen Vertrag darstellt, können Sie die aufgerufene Methode mit dem <xref:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute>-Attribut markieren.</span><span class="sxs-lookup"><span data-stu-id="7d652-104">To enable the contract tools to recognize that the call to `ValidationHelper.NotNull` represents a contract, you can mark the called method with the  <xref:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute> attribute.</span></span> <span data-ttu-id="7d652-105">Der <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType>-Methodenaufrufe sollte verwendet werden, damit die Tools die richtigen Spezifikationen für die Dokument Generierung und statische Überprüfung wie folgt extrahieren können.</span><span class="sxs-lookup"><span data-stu-id="7d652-105">The <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType> method call should be used to enable the tools to extract the proper specifications for document generation and static checking, as follows.</span></span>  
  
 [!code-csharp[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow2.cs#2)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow2.vb#2)]  
  
 <span data-ttu-id="7d652-106">Zusätzlich zu den `if-then-throw`-Anweisungen kann der Vertragsabschnitt der Vertrags Validierungs Methodenaufrufe anderer vertragsvalidator-Methoden enthalten.</span><span class="sxs-lookup"><span data-stu-id="7d652-106">In addition to `if-then-throw` statements, the contract section of contract validator methods may contain calls to other contract validator methods.</span></span> <span data-ttu-id="7d652-107">Es sind jedoch keine anderen Verträge (z. b. <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType>oder <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType>) zulässig.</span><span class="sxs-lookup"><span data-stu-id="7d652-107">However, no other contracts (such as <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType>, or <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType>) are allowed.</span></span> <span data-ttu-id="7d652-108">Code, der auf den <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType>-Aufrufe folgt, wird von allen Vertrags Tools ignoriert.</span><span class="sxs-lookup"><span data-stu-id="7d652-108">Code that follows the <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType> call is ignored by all contract tools.</span></span>  
  
 <span data-ttu-id="7d652-109">Das folgende Beispiel zeigt ein Bereichs Argument-Validierungs Steuerelement, das in Bezug auf eine vorhandene `NotNull` Prüfungs-Methode geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="7d652-109">The following example shows a range argument validator written in terms of an existing `NotNull` validator method.</span></span>  
  
 [!code-csharp[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow3.cs#3)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow3.vb#3)]  
  
 <span data-ttu-id="7d652-110">Aus Sicht der Spezifikation verfügt die `Execute`-Methode über die folgenden drei Verträge:</span><span class="sxs-lookup"><span data-stu-id="7d652-110">From a specification point of view, the `Execute` method has the following three contracts:</span></span>  
  
```  
Contract.Requires<ArgumentNullException>(data != null);  
Contract.Requires<ArgumentOutOfRangeException>(position >= 0);  
Contract.Requires<ArgumentOutOfRangeException>(position < data.Length);  
  
```  
  
 <span data-ttu-id="7d652-111">In Standardmethoden können Aufrufe von Vertrags Validierungs Steuerelement-Methoden mit anderen Verträgen, z. b. <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType> oder <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType>, frei gemischt werden.</span><span class="sxs-lookup"><span data-stu-id="7d652-111">In standard methods, calls to contract validator methods can be freely mixed with other contracts such as <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType> or <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContractArgumentValidatorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContractArgumentValidatorAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Contracts</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d652-112">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="7d652-112">Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

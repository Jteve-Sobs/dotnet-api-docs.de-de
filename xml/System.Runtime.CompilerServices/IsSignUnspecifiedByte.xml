<Type Name="IsSignUnspecifiedByte" FullName="System.Runtime.CompilerServices.IsSignUnspecifiedByte">
  <Metadata><Meta Name="ms.openlocfilehash" Value="07fe670ad91090796138075c3979be57e33fda71" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69273901" /></Metadata><TypeSignature Language="C#" Value="public static class IsSignUnspecifiedByte" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsSignUnspecifiedByte extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsSignUnspecifiedByte" />
  <TypeSignature Language="VB.NET" Value="Public Class IsSignUnspecifiedByte" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsSignUnspecifiedByte abstract sealed" />
  <TypeSignature Language="F#" Value="type IsSignUnspecifiedByte = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c1652-101">Gibt an, dass ein Modifizierer weder signed noch unsigned lautet.</span><span class="sxs-lookup"><span data-stu-id="c1652-101">Indicates that a modifier is neither signed nor unsigned.</span></span> <span data-ttu-id="c1652-102">Diese Klasse kann nicht vererbt werden.</span><span class="sxs-lookup"><span data-stu-id="c1652-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1652-103">Einige Programmiersprachen, wie z C++. b., `char` erkennen drei `signed char`unterschiedliche Werte `char`:, `unsigned char`und.</span><span class="sxs-lookup"><span data-stu-id="c1652-103">Some programming languages, such as C++, recognize three distinct `char` values: `signed char`, `unsigned char`, and `char`.</span></span>  <span data-ttu-id="c1652-104">Um den nicht `char` geänderten Typ von anderen zu unterscheiden, fügt der Microsoft C++ - <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> Compiler den-Modifizierer jedem `char` Typ hinzu, der an eine Assembly ausgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c1652-104">To distinguish the unmodified `char` type from the others, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modifier to each `char` type emitted to an assembly.</span></span>  
  
 <span data-ttu-id="c1652-105">Compiler geben benutzerdefinierte Modifizierer innerhalb von Metadaten aus, um die Art und Weise zu ändern, wie der JIT-Compiler (Just-in-Time) Werte verarbeitet, wenn das Standardverhalten nicht geeignet ist.</span><span class="sxs-lookup"><span data-stu-id="c1652-105">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="c1652-106">Wenn der JIT-Compiler auf einen benutzerdefinierten Modifizierer trifft, verarbeitet er den Wert in der Art und Weise, wie der-Modifizierer angibt.</span><span class="sxs-lookup"><span data-stu-id="c1652-106">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="c1652-107">Compiler können benutzerdefinierte Modifizierern auf Methoden, Parameter und Rückgabewerte anwenden.</span><span class="sxs-lookup"><span data-stu-id="c1652-107">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="c1652-108">Der JIT-Compiler muss auf erforderliche Modifizierer Antworten, kann jedoch optionale modifiziererer ignorieren.</span><span class="sxs-lookup"><span data-stu-id="c1652-108">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="c1652-109">Mithilfe einer der folgenden Verfahren können Sie benutzerdefinierte modifiziererer in Metadaten ausgeben:</span><span class="sxs-lookup"><span data-stu-id="c1652-109">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="c1652-110">Verwenden von Methoden in <xref:System.Reflection.Emit.TypeBuilder> der-Klasse <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>z. b <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.,, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>und.</span><span class="sxs-lookup"><span data-stu-id="c1652-110">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="c1652-111">Erstellen einer MSIL-Anweisungs Datei (Microsoft Intermediate Language), die `modopt` Aufrufe `modreq`von und enthält und die Datei mit dem [Ilasm. exe (Il-Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md)zusammenführt.</span><span class="sxs-lookup"><span data-stu-id="c1652-111">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="c1652-112">Verwenden der nicht verwalteten Reflection-API.</span><span class="sxs-lookup"><span data-stu-id="c1652-112">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1652-113">Im folgenden Codebeispiel wird eine Assembly mithilfe von Klassen im <xref:System.Reflection.Emit> -Namespace erstellt, <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> und der-Modifizierer wird in diese Assembly ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="c1652-113">The following code example creates an assembly using classes in the <xref:System.Reflection.Emit> namespace and emits the <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modifier into that assembly.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsSignUnspecifiedByte#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsSignUnspecifiedByte/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>

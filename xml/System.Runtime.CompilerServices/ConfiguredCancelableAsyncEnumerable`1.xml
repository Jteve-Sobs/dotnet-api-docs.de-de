<Type Name="ConfiguredCancelableAsyncEnumerable&lt;T&gt;" FullName="System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="abae9da72730e0ea8e070675f49c905c70508f5f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69275019" /></Metadata><TypeSignature Language="C#" Value="public struct ConfiguredCancelableAsyncEnumerable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ConfiguredCancelableAsyncEnumerable`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure ConfiguredCancelableAsyncEnumerable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class ConfiguredCancelableAsyncEnumerable" />
  <TypeSignature Language="F#" Value="type ConfiguredCancelableAsyncEnumerable&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="97d63-101">Der Typ der aufzuzählenden Werte.</span><span class="sxs-lookup"><span data-stu-id="97d63-101">The type of values to enumerate.</span></span></typeparam>
    <summary><span data-ttu-id="97d63-102">Bietet einen asynchronen aufzählbaren awaitable-Wert, der eine abbrechbare Iteration und konfigurierte Wartezeiten ermöglicht.</span><span class="sxs-lookup"><span data-stu-id="97d63-102">Provides an awaitable async enumerable that enables cancelable iteration and configured awaits.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ConfigureAwait">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt; ConfigureAwait (bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1&lt;!T&gt; ConfigureAwait(bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureAwait (continueOnCapturedContext As Boolean) As ConfiguredCancelableAsyncEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::ConfiguredCancelableAsyncEnumerable&lt;T&gt; ConfigureAwait(bool continueOnCapturedContext);" />
      <MemberSignature Language="F#" Value="member this.ConfigureAwait : bool -&gt; System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;'T&gt;" Usage="configuredCancelableAsyncEnumerable.ConfigureAwait continueOnCapturedContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="continueOnCapturedContext"><span data-ttu-id="97d63-103"><see langword="true" /> zum Erfassen und zum Marshallen zurück zum aktuellen Kontext; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97d63-103"><see langword="true" /> to capture and marshal back to the current context; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97d63-104">Konfiguriert, wie Wartezeiten auf die Aufgaben angewandt werden, die von einer asynchronen Iteration zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="97d63-104">Configures how awaits on the tasks returned from an async iteration will be performed.</span></span></summary>
        <returns><span data-ttu-id="97d63-105">Der konfigurierte aufzählbare Wert.</span><span class="sxs-lookup"><span data-stu-id="97d63-105">The configured enumerable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
<span data-ttu-id="97d63-106">Dadurch werden alle vorherigen Werte ersetzt, die <xref:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)> von für diese Iterationen festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="97d63-106">This will replace any previous value set by <xref:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)> for this iteration.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt;.Enumerator GetAsyncEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1/Enumerator&lt;!T&gt; GetAsyncEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.GetAsyncEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsyncEnumerator () As ConfiguredCancelableAsyncEnumerable(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::ConfiguredCancelableAsyncEnumerable&lt;T&gt;::Enumerator GetAsyncEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetAsyncEnumerator : unit -&gt; System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;'T&gt;.Enumerator" Usage="configuredCancelableAsyncEnumerable.GetAsyncEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97d63-107">Gibt einen Enumerator zurück, der Auflistungen asynchron durchläuft. Dieser Enumerator ermöglicht Iterationen, die abgebrochen werden können, sowie konfigurierte Wartezeiten.</span><span class="sxs-lookup"><span data-stu-id="97d63-107">Returns an enumerator that iterates asynchronously through collections that enables cancelable iteration and configured awaits.</span></span></summary>
        <returns><span data-ttu-id="97d63-108">Ein Enumerator für die <see cref="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="97d63-108">An enumerator for the <see cref="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1" /> class.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithCancellation">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt; WithCancellation (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1&lt;!T&gt; WithCancellation(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::ConfiguredCancelableAsyncEnumerable&lt;T&gt; WithCancellation(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WithCancellation : System.Threading.CancellationToken -&gt; System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;'T&gt;" Usage="configuredCancelableAsyncEnumerable.WithCancellation cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="97d63-109">Das zu verwendende Abbruchtoken.</span><span class="sxs-lookup"><span data-stu-id="97d63-109">The cancellation token to use.</span></span></param>
        <summary><span data-ttu-id="97d63-110">Legt das <see cref="T:System.Threading.CancellationToken" /> fest, das beim Durchlaufen an <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> übergeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="97d63-110">Sets the <see cref="T:System.Threading.CancellationToken" /> to be passed to <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> when iterating.</span></span></summary>
        <returns><span data-ttu-id="97d63-111">Der konfigurierte aufzählbare Wert.</span><span class="sxs-lookup"><span data-stu-id="97d63-111">The configured enumerable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
<span data-ttu-id="97d63-112">Hierdurch werden alle vorherigen <xref:System.Threading.CancellationToken> Sätze von <xref:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)> für diese Iterationen ersetzt.</span><span class="sxs-lookup"><span data-stu-id="97d63-112">This will replace any previous <xref:System.Threading.CancellationToken> set by <xref:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)> for this iteration.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="IsExplicitlyDereferenced" FullName="System.Runtime.CompilerServices.IsExplicitlyDereferenced">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f1b9e7255e4f7e2e5cad5ad153c24605563481a5" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58683763" /></Metadata><TypeSignature Language="C#" Value="public static class IsExplicitlyDereferenced" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsExplicitlyDereferenced extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsExplicitlyDereferenced" />
  <TypeSignature Language="VB.NET" Value="Public Class IsExplicitlyDereferenced" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsExplicitlyDereferenced abstract sealed" />
  <TypeSignature Language="F#" Value="type IsExplicitlyDereferenced = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1c910-101">Gibt an, dass ein verwalteter Zeiger einen Zeigerparameter in einer Methodensignatur darstellt.</span><span class="sxs-lookup"><span data-stu-id="1c910-101">Indicates that a managed pointer represents a pointer parameter within a method signature.</span></span> <span data-ttu-id="1c910-102">Diese Klasse kann nicht vererbt werden.</span><span class="sxs-lookup"><span data-stu-id="1c910-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c910-103">In C++ werden verwaltete Zeiger und verwaltete Verweise als Zeiger in Metadaten ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="1c910-103">In C++, managed pointers and managed references are emitted into metadata as pointers.</span></span>  <span data-ttu-id="1c910-104">Um die beiden Typen in den Metadaten unterscheiden, wendet Microsoft C++-Compiler dieser Modifizierer auf verwaltete Zeiger an.</span><span class="sxs-lookup"><span data-stu-id="1c910-104">To distinguish between the two types in metadata, the Microsoft  C++ compiler applies this modifier to managed pointers.</span></span>  <span data-ttu-id="1c910-105">Es gibt kein Modifizierer für verwaltete Verweistypen.</span><span class="sxs-lookup"><span data-stu-id="1c910-105">It emits no modifier on managed reference types.</span></span>  <span data-ttu-id="1c910-106">Compiler müssen die richtige Aufrufsyntax wissen beim Importieren einer Methode aus dem Metadatenbereich.</span><span class="sxs-lookup"><span data-stu-id="1c910-106">Compilers need to know the correct calling syntax when importing a method from metadata scope.</span></span>  <span data-ttu-id="1c910-107">Die <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> -Klasse und deren Partner, die <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> Klasse, die Verweisparameter von Zeigerparameter unterscheiden.</span><span class="sxs-lookup"><span data-stu-id="1c910-107">The <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> class and its partner, the <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters.</span></span>  
  
 <span data-ttu-id="1c910-108">Compiler geben benutzerdefinierte Modifizierer innerhalb der Metadaten, die die Art ändern, der just-in-Time-Compiler (JIT)-Werte behandelt, wenn das Standardverhalten nicht zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="1c910-108">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="1c910-109">Wenn der JIT-Compiler einen benutzerdefinierten Modifizierer trifft, verarbeitet sie den Wert in der Weise, die den Modifizierer gibt an.</span><span class="sxs-lookup"><span data-stu-id="1c910-109">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="1c910-110">Compiler können Anwenden von benutzerdefinierten Modifizierer auf Methoden, Parameter und Rückgabewerte.</span><span class="sxs-lookup"><span data-stu-id="1c910-110">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="1c910-111">Der JIT-Compiler, erforderlichen Modifizierern reagieren muss, jedoch optionale Modifizierer ignorieren kann.</span><span class="sxs-lookup"><span data-stu-id="1c910-111">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="1c910-112">Sie können benutzerdefinierte Modifizierer in Metadaten mit einer der folgenden Methoden auszugeben:</span><span class="sxs-lookup"><span data-stu-id="1c910-112">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="1c910-113">Verwendung von Methoden in der <xref:System.Reflection.Emit.TypeBuilder> Klasse, z. B. <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, und <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="1c910-113">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="1c910-114">Generieren einer Anweisungsdatei Microsoft intermediate Language (MSIL), die Aufrufe von enthält `modopt` und `modreq`, und die Datei mit Zusammenstellen der [Ilasm.exe (IL-Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="1c910-114">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="1c910-115">Verwenden die nicht verwaltete Reflektions-API.</span><span class="sxs-lookup"><span data-stu-id="1c910-115">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c910-116">Im folgende Beispiel wird veranschaulicht, wie zum Ausgeben einer <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> Objekt in eine Assembly mit Reflektion.</span><span class="sxs-lookup"><span data-stu-id="1c910-116">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsExplicitlyDereferenced#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsExplicitlyDereferenced/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd821c775d86f7752dd5acfb8dd2cb4b267e1761" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83964574" /></Metadata><TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <TypeSignature Language="F#" Value="type IsLong = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.CompilerServices.VisualC" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="04773-101">Gibt an, dass eine geänderte ganze Zahl einen <see langword="long" />-Standardwert in C++ darstellt.</span><span class="sxs-lookup"><span data-stu-id="04773-101">Indicates that a modified integer is a standard C++ <see langword="long" /> value.</span></span> <span data-ttu-id="04773-102">Diese Klasse kann nicht vererbt werden.</span><span class="sxs-lookup"><span data-stu-id="04773-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="04773-103">Der C++ Standardwert gibt an, dass ein `long` Wert und ein ganzzahliger Wert unterschiedliche Typen sind.</span><span class="sxs-lookup"><span data-stu-id="04773-103">The C++ standard indicates that a `long` value and an integer value are distinct types.</span></span>  <span data-ttu-id="04773-104">Beide werden jedoch mit `ELEMENT_TYPE_I4` in einer Assembly dargestellt.</span><span class="sxs-lookup"><span data-stu-id="04773-104">However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.</span></span>  <span data-ttu-id="04773-105">Um eine `long` von einer ganzen Zahl in C++zu unterscheiden C++ , fügt der Microsoft-Compiler den <xref:System.Runtime.CompilerServices.IsLong>-Modifizierer jeder Instanz eines `long` hinzu, wenn die Instanz erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="04773-105">To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsLong> modifier to any instance of a `long` when the instance is emited.</span></span>  <span data-ttu-id="04773-106">Dieser Prozess ist für die Beibehaltung der Typsicherheit auf Sprachebene äußerst wichtig.</span><span class="sxs-lookup"><span data-stu-id="04773-106">This process is critically important for maintaining language-level type safety.</span></span>  
  
 <span data-ttu-id="04773-107">Compiler geben benutzerdefinierte Modifizierer innerhalb von Metadaten aus, um die Art und Weise zu ändern, wie der JIT-Compiler (Just-in-Time) Werte verarbeitet, wenn das Standardverhalten nicht geeignet ist.</span><span class="sxs-lookup"><span data-stu-id="04773-107">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="04773-108">Wenn der JIT-Compiler auf einen benutzerdefinierten Modifizierer trifft, verarbeitet er den Wert in der Art und Weise, wie der-Modifizierer angibt.</span><span class="sxs-lookup"><span data-stu-id="04773-108">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="04773-109">Compiler können benutzerdefinierte Modifizierern auf Methoden, Parameter und Rückgabewerte anwenden.</span><span class="sxs-lookup"><span data-stu-id="04773-109">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="04773-110">Der JIT-Compiler muss auf erforderliche Modifizierer Antworten, kann jedoch optionale modifiziererer ignorieren.</span><span class="sxs-lookup"><span data-stu-id="04773-110">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="04773-111">Mithilfe einer der folgenden Verfahren können Sie benutzerdefinierte modifiziererer in Metadaten ausgeben:</span><span class="sxs-lookup"><span data-stu-id="04773-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="04773-112">Verwenden von Methoden in der <xref:System.Reflection.Emit.TypeBuilder>-Klasse, z. b. <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>und <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="04773-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="04773-113">Erstellen einer MSIL-Anweisungs Datei (Microsoft Intermediate Language), die Aufrufe von `modopt` und `modreq`enthält und die Datei mit dem [Ilasm. exe (Il-Assembler)](/dotnet/framework/tools/ilasm-exe-il-assembler)zusammenführt.</span><span class="sxs-lookup"><span data-stu-id="04773-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](/dotnet/framework/tools/ilasm-exe-il-assembler).</span></span>  
  
-   <span data-ttu-id="04773-114">Verwenden der nicht verwalteten Reflection-API.</span><span class="sxs-lookup"><span data-stu-id="04773-114">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="04773-115">Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Runtime.CompilerServices.IsLong>-Objekt mithilfe von Reflektion in eine Assembly ausgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="04773-115">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsLong> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>

<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd821c775d86f7752dd5acfb8dd2cb4b267e1761" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83964574" /></Metadata><TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <TypeSignature Language="F#" Value="type IsLong = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.CompilerServices.VisualC" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gibt an, dass eine geänderte ganze Zahl einen <see langword="long" />-Standardwert in C++ darstellt. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der C++-Standard gibt an, dass ein `long` Wert und ein ganzzahliger Wert unterschiedliche Typen sind.  Allerdings werden beide `ELEMENT_TYPE_I4` in einer Assembly mithilfe von dargestellt.  Um eine `long` von einer ganzen Zahl in C++ zu unterscheiden, fügt der Microsoft C++-Compiler den- <xref:System.Runtime.CompilerServices.IsLong> Modifizierer jeder Instanz von hinzu, `long` Wenn die Instanz erstellt wird.  Dieser Prozess ist für die Beibehaltung der Typsicherheit auf Sprachebene äußerst wichtig.  
  
 Compiler geben benutzerdefinierte Modifizierer innerhalb von Metadaten aus, um die Art und Weise zu ändern, wie der JIT-Compiler (Just-in-Time) Werte verarbeitet, wenn das Standardverhalten nicht geeignet ist.  Wenn der JIT-Compiler auf einen benutzerdefinierten Modifizierer trifft, verarbeitet er den Wert in der Art und Weise, wie der-Modifizierer angibt.  Compiler können benutzerdefinierte Modifizierern auf Methoden, Parameter und Rückgabewerte anwenden.  Der JIT-Compiler muss auf erforderliche Modifizierer Antworten, kann jedoch optionale modifiziererer ignorieren.  
  
 Mithilfe einer der folgenden Verfahren können Sie benutzerdefinierte modifiziererer in Metadaten ausgeben:  
  
-   Verwenden von Methoden in der- <xref:System.Reflection.Emit.TypeBuilder> Klasse <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A> , z <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A> . b.,, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A> und <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> .  
  
-   Erstellen einer MSIL-Anweisungs Datei (Microsoft Intermediate Language), die Aufrufe von `modopt` und enthält `modreq` und die Datei mit dem [Ilasm.exe (Il-Assembler)](/dotnet/framework/tools/ilasm-exe-il-assembler)zusammenführt.  
  
-   Verwenden der nicht verwalteten Reflection-API.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Runtime.CompilerServices.IsLong> Objekt mithilfe von Reflektion in eine Assembly ausgegeben wird.  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>

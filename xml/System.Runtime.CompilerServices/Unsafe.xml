<Type Name="Unsafe" FullName="System.Runtime.CompilerServices.Unsafe">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3bd90509edebff93d67dcae8e3c3e48d96ec223b" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996651" /></Metadata><TypeSignature Language="C#" Value="public static class Unsafe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Unsafe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.Unsafe" />
  <TypeSignature Language="VB.NET" Value="Public Class Unsafe" />
  <TypeSignature Language="C++ CLI" Value="public ref class Unsafe abstract sealed" />
  <TypeSignature Language="F#" Value="type Unsafe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.1</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1753c-101">Enthält generische detaillierte Funktionen zum Bearbeiten von Zeigern.</span><span class="sxs-lookup"><span data-stu-id="1753c-101">Contains generic, low-level functionality for manipulating pointers.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* Add&lt;T&gt; (void* source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* Add&lt;T&gt;(void* source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* Add(void* source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add : nativeptr&lt;unit&gt; * int -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="elementOffset" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="elementOffset">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add :  * int -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-102">Der Typ des Verweises.</span><span class="sxs-lookup"><span data-stu-id="1753c-102">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="1753c-103">Der Verweis, zu dem der Offset addiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-103">The reference to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="1753c-104">Der Offset, der addiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-104">The offset to add.</span></span></param>
        <summary><span data-ttu-id="1753c-105">Fügt dem angegebenen Verweis ein Elementoffset hinzu.</span><span class="sxs-lookup"><span data-stu-id="1753c-105">Adds an element offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="1753c-106">Ein neuer Verweis, der die Addition des Offsets zum Zeiger widerspiegelt.</span><span class="sxs-lookup"><span data-stu-id="1753c-106">A new reference that reflects the addition of offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, IntPtr elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-107">Der Typ des Verweises.</span><span class="sxs-lookup"><span data-stu-id="1753c-107">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="1753c-108">Der Verweis, zu dem der Offset addiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-108">The reference to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="1753c-109">Der Offset, der addiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-109">The offset to add.</span></span></param>
        <summary><span data-ttu-id="1753c-110">Fügt dem angegebenen Verweis ein Elementoffset hinzu.</span><span class="sxs-lookup"><span data-stu-id="1753c-110">Adds an element offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="1753c-111">Ein neuer Verweis, der die Addition des Offsets zum Zeiger widerspiegelt.</span><span class="sxs-lookup"><span data-stu-id="1753c-111">A new reference that reflects the addition of offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AddByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AddByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AddByteOffset(T % source, IntPtr byteOffset);" />
      <MemberSignature Language="F#" Value="static member AddByteOffset :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AddByteOffset (source, byteOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-112">Der Typ des Verweises.</span><span class="sxs-lookup"><span data-stu-id="1753c-112">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="1753c-113">Der Verweis, zu dem der Offset addiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-113">The reference to add the offset to.</span></span></param>
        <param name="byteOffset"><span data-ttu-id="1753c-114">Der Offset, der addiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-114">The offset to add.</span></span></param>
        <summary><span data-ttu-id="1753c-115">Fügt dem angegebenen Verweis ein Byteoffset hinzu.</span><span class="sxs-lookup"><span data-stu-id="1753c-115">Adds a byte offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="1753c-116">Ein neuer Verweis, der die Addition des Byteoffsets zum Zeiger widerspiegelt.</span><span class="sxs-lookup"><span data-stu-id="1753c-116">A new reference that reflects the addition of byte offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool AreSame&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreSame&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreSame(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool AreSame(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member AreSame :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.AreSame (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-1.1;netcore-3.0" />
        <Parameter Name="right" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-1.1;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-117">Der Typ des Verweises.</span><span class="sxs-lookup"><span data-stu-id="1753c-117">The type of reference.</span></span></typeparam>
        <param name="left"><span data-ttu-id="1753c-118">Der erste zu vergleichende Verweis.</span><span class="sxs-lookup"><span data-stu-id="1753c-118">The first reference to compare.</span></span></param>
        <param name="right"><span data-ttu-id="1753c-119">Der zweite zu vergleichende Verweis.</span><span class="sxs-lookup"><span data-stu-id="1753c-119">The second reference to compare.</span></span></param>
        <summary><span data-ttu-id="1753c-120">Bestimmt, ob die angegebenen Verweise auf denselben Speicherort zeigen.</span><span class="sxs-lookup"><span data-stu-id="1753c-120">Determines whether the specified references point to the same location.</span></span></summary>
        <returns><span data-ttu-id="1753c-121">Wenn <paramref name="left" /> und <paramref name="right" /> auf den gleichen Speicherort zeigen: <see langword="true" />, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1753c-121"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> point to the same location; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T As&lt;T&gt; (object o) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T As&lt;class T&gt;(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of T As Class) (o As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T As(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member As : obj -&gt; 'T (requires 'T : null)" Usage="System.Runtime.CompilerServices.Unsafe.As o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-122">Der Typ, in der das Objekt, umgewandelt werden wird.</span><span class="sxs-lookup"><span data-stu-id="1753c-122">The type which the object will be cast to.</span></span></typeparam>
        <param name="o"><span data-ttu-id="1753c-123">Das Objekt, das umgewandelt werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-123">The object to cast.</span></span></param>
        <summary><span data-ttu-id="1753c-124">Wandelt das angegebene Objekt in den angegebenen Typ um.</span><span class="sxs-lookup"><span data-stu-id="1753c-124">Casts the given object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="1753c-125">Das Ursprungsobjekt, das in den angegebenen Typ umgewandelt wurde.</span><span class="sxs-lookup"><span data-stu-id="1753c-125">The original object, casted to the given type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static TTo As&lt;TFrom,TTo&gt; (ref TFrom source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TTo As&lt;TFrom, TTo&gt;(!!TFrom&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of TFrom, TTo) (ByRef source As TFrom) As TTo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; static TTo % As(TFrom % source);" />
      <MemberSignature Language="F#" Value="static member As :  -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.As source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TTo@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom" />
        <TypeParameter Name="TTo" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="TFrom&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="1753c-126">Der Typ des Verweises, der neu interpretiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-126">The type of reference to reinterpret.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="1753c-127">Der gewünschte Typ des Verweises.</span><span class="sxs-lookup"><span data-stu-id="1753c-127">The desired type of the reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="1753c-128">Der Verweis, der neu interpretiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-128">The reference to reinterpret.</span></span></param>
        <summary><span data-ttu-id="1753c-129">Interpretiert den angegebenen Verweis als Verweis auf einen Wert vom Typ <typeparamref name="TTo" />.</span><span class="sxs-lookup"><span data-stu-id="1753c-129">Reinterprets the given reference as a reference to a value of type <typeparamref name="TTo" />.</span></span></summary>
        <returns><span data-ttu-id="1753c-130">Ein Verweis auf einen Wert vom Typ <typeparamref name="TTo" />.</span><span class="sxs-lookup"><span data-stu-id="1753c-130">A reference to a value of type <typeparamref name="TTo" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPointer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* AsPointer&lt;T&gt; (ref T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* AsPointer&lt;T&gt;(!!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* AsPointer(T % value);" />
      <MemberSignature Language="F#" Value="static member AsPointer :  -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.AsPointer value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-131">Der Objekttyp.</span><span class="sxs-lookup"><span data-stu-id="1753c-131">The type of object.</span></span></typeparam>
        <param name="value"><span data-ttu-id="1753c-132">Das Objekt, dessen Zeiger abgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="1753c-132">The object whose pointer is obtained.</span></span></param>
        <summary><span data-ttu-id="1753c-133">Gibt einen Zeiger zurück, der auf den angegebenen ByRef-Parameter zeigt.</span><span class="sxs-lookup"><span data-stu-id="1753c-133">Returns a pointer to the given by-ref parameter.</span></span></summary>
        <returns><span data-ttu-id="1753c-134">Ein Zeiger für den angegebenen Wert.</span><span class="sxs-lookup"><span data-stu-id="1753c-134">A pointer to the given value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AsRef&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(void* source);" />
      <MemberSignature Language="F#" Value="static member AsRef : nativeptr&lt;unit&gt; -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AsRef source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-135">Der Typ des Speicherorts von interpretiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-135">The type of the interpreted location.</span></span></typeparam>
        <param name="source"><span data-ttu-id="1753c-136">Der Speicherort des Werts, auf den verwiesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-136">The location of the value to reference.</span></span></param>
        <summary><span data-ttu-id="1753c-137">Interpretiert den angegebenen Speicherort als Verweis auf einen Wert vom Typ <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="1753c-137">Reinterprets the given location as a reference to a value of type <typeparamref name="T" />.</span></span></summary>
        <returns><span data-ttu-id="1753c-138">Ein Verweis auf einen Wert vom Typ <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="1753c-138">A reference to a value of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T AsRef&lt;T&gt; (ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;([in]!!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T) (ByRef source As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(T % source);" />
      <MemberSignature Language="F#" Value="static member AsRef :  -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AsRef source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-139">Der Typ des Verweises.</span><span class="sxs-lookup"><span data-stu-id="1753c-139">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="1753c-140">Der schreibgeschützte Verweis, der neu interpretiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-140">The read-only reference to reinterpret.</span></span></param>
        <summary><span data-ttu-id="1753c-141">Interpretiert den angegebenen schreibgeschützten Verweis als Verweis neu.</span><span class="sxs-lookup"><span data-stu-id="1753c-141">Reinterprets the given read-only reference as a reference.</span></span></summary>
        <returns><span data-ttu-id="1753c-142">Ein Verweis auf einen Wert vom Typ <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="1753c-142">A reference to a value of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr ByteOffset&lt;T&gt; (ref T origin, ref T target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ByteOffset&lt;T&gt;(!!T&amp; origin, !!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ByteOffset(Of T) (ByRef origin As T, ByRef target As T) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static IntPtr ByteOffset(T % origin, T % target);" />
      <MemberSignature Language="F#" Value="static member ByteOffset :  *  -&gt; nativeint" Usage="System.Runtime.CompilerServices.Unsafe.ByteOffset (origin, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="origin" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="target" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-143">Der Typ des Verweises.</span><span class="sxs-lookup"><span data-stu-id="1753c-143">The type of reference.</span></span></typeparam>
        <param name="origin"><span data-ttu-id="1753c-144">Der Verweis auf den Ursprung.</span><span class="sxs-lookup"><span data-stu-id="1753c-144">The reference to origin.</span></span></param>
        <param name="target"><span data-ttu-id="1753c-145">Der Verweis auf das Ziel.</span><span class="sxs-lookup"><span data-stu-id="1753c-145">The reference to target.</span></span></param>
        <summary><span data-ttu-id="1753c-146">Bestimmt das Byteoffset vom Ursprung zum Ziel aus den angegebenen Verweisen.</span><span class="sxs-lookup"><span data-stu-id="1753c-146">Determines the byte offset from origin to target from the given references.</span></span></summary>
        <returns><span data-ttu-id="1753c-147">Byteoffset vom Ursprung zum Ziel, d.h. <paramref name="target" /> - <paramref name="origin" />.</span><span class="sxs-lookup"><span data-stu-id="1753c-147">Byte offset from origin to target i.e. <paramref name="target" /> - <paramref name="origin" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (void* destination, ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(void* destination, !!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(void* destination, T % source);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeptr&lt;unit&gt; *  -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Copy (destination, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-148">Der Typ der zu kopierenden Wert.</span><span class="sxs-lookup"><span data-stu-id="1753c-148">The type of value to copy.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="1753c-149">Der Speicherort, an den kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-149">The location to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="1753c-150">Ein Verweis auf den zu kopierenden Wert.</span><span class="sxs-lookup"><span data-stu-id="1753c-150">A reference to the value to copy.</span></span></param>
        <summary><span data-ttu-id="1753c-151">Kopiert einen Wert vom Typ <typeparamref name="T" /> zum angegebenen Speicherort.</span><span class="sxs-lookup"><span data-stu-id="1753c-151">Copies a value of type <typeparamref name="T" /> to the given location.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (ref T destination, void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(!!T&amp; destination, void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(T % destination, void* source);" />
      <MemberSignature Language="F#" Value="static member Copy :  * nativeptr&lt;unit&gt; -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Copy (destination, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="T" RefType="ref" />
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-152">Der Typ der zu kopierenden Wert.</span><span class="sxs-lookup"><span data-stu-id="1753c-152">The type of value to copy.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="1753c-153">Der Speicherort, an den kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-153">The location to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="1753c-154">Ein Zeiger auf den zu kopierenden Wert.</span><span class="sxs-lookup"><span data-stu-id="1753c-154">A pointer to the value to copy.</span></span></param>
        <summary><span data-ttu-id="1753c-155">Kopiert einen Wert vom Typ <typeparamref name="T" /> zum angegebenen Speicherort.</span><span class="sxs-lookup"><span data-stu-id="1753c-155">Copies a value of type <typeparamref name="T" /> to the given location.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlock (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlock :  *  * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlock (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="source" Type="System.Byte" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="1753c-156">Die Zieladresse, zu der kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-156">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="1753c-157">Die Quelladresse, aus der kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-157">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="1753c-158">Die Anzahl der zu kopierenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="1753c-158">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="1753c-159">Kopiert Bytes von der Quelladresse zur Zieladresse.</span><span class="sxs-lookup"><span data-stu-id="1753c-159">Copies bytes from the source address to the destination address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlock : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlock (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="1753c-160">Die Zieladresse, zu der kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-160">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="1753c-161">Die Quelladresse, aus der kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-161">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="1753c-162">Die Anzahl der zu kopierenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="1753c-162">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="1753c-163">Kopiert Bytes von der Quelladresse zur Zieladresse.</span><span class="sxs-lookup"><span data-stu-id="1753c-163">Copies bytes from the source address to the destination address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlockUnaligned (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlockUnaligned :  *  * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="source" Type="System.Byte" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="1753c-164">Die Zieladresse, zu der kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-164">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="1753c-165">Die Quelladresse, aus der kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-165">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="1753c-166">Die Anzahl der zu kopierenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="1753c-166">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="1753c-167">Kopiert Bytes aus der Quelladresse zur Zieladresse, ohne eine architekturabhängige Ausrichtung der Adressen vorauszusetzen.</span><span class="sxs-lookup"><span data-stu-id="1753c-167">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlockUnaligned : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="source" Type="System.Void*" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="1753c-168">Die Zieladresse, zu der kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-168">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="1753c-169">Die Quelladresse, aus der kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-169">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="1753c-170">Die Anzahl der zu kopierenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="1753c-170">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="1753c-171">Kopiert Bytes aus der Quelladresse zur Zieladresse, ohne eine architekturabhängige Ausrichtung der Adressen vorauszusetzen.</span><span class="sxs-lookup"><span data-stu-id="1753c-171">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlock (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlock :  * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlock (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="1753c-172">Die Adresse vom Anfang des Speicherblocks, der initialisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-172">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="1753c-173">Der Wert, mit dem der Block initialisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-173">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="1753c-174">Die Anzahl der zu initialisierenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="1753c-174">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="1753c-175">Initialisiert einen Speicherblock an dem angegebenen Speicherort mit einem angegebenen Anfangswert.</span><span class="sxs-lookup"><span data-stu-id="1753c-175">Initializes a block of memory at the given location with a given initial value.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlock : nativeptr&lt;unit&gt; * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlock (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="1753c-176">Die Adresse vom Anfang des Speicherblocks, der initialisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-176">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="1753c-177">Der Wert, mit dem der Block initialisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-177">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="1753c-178">Die Anzahl der zu initialisierenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="1753c-178">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="1753c-179">Initialisiert einen Speicherblock an dem angegebenen Speicherort mit einem angegebenen Anfangswert.</span><span class="sxs-lookup"><span data-stu-id="1753c-179">Initializes a block of memory at the given location with a given initial value.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlockUnaligned (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlockUnaligned :  * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="1753c-180">Die Adresse vom Anfang des Speicherblocks, der initialisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-180">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="1753c-181">Der Wert, mit dem der Block initialisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-181">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="1753c-182">Die Anzahl der zu initialisierenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="1753c-182">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="1753c-183">Initialisiert einen Speicherblock an dem angegebenen Speicherort mit einem angegebenen Anfangswert, ohne eine architekturabhängige Ausrichtung der Adresse vorauszusetzen.</span><span class="sxs-lookup"><span data-stu-id="1753c-183">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlockUnaligned : nativeptr&lt;unit&gt; * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="1753c-184">Die Adresse vom Anfang des Speicherblocks, der initialisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-184">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="1753c-185">Der Wert, mit dem der Block initialisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-185">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="1753c-186">Die Anzahl der zu initialisierenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="1753c-186">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="1753c-187">Initialisiert einen Speicherblock an dem angegebenen Speicherort mit einem angegebenen Anfangswert, ohne eine architekturabhängige Ausrichtung der Adresse vorauszusetzen.</span><span class="sxs-lookup"><span data-stu-id="1753c-187">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddressGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool IsAddressGreaterThan&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAddressGreaterThan&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAddressGreaterThan(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool IsAddressGreaterThan(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member IsAddressGreaterThan :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="right" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddressLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool IsAddressLessThan&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAddressLessThan&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAddressLessThan(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool IsAddressLessThan(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member IsAddressLessThan :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.IsAddressLessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="right" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T Read(void* source);" />
      <MemberSignature Language="F#" Value="static member Read : nativeptr&lt;unit&gt; -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-188">Der Typ, zu lesen.</span><span class="sxs-lookup"><span data-stu-id="1753c-188">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="1753c-189">Der Speicherort, aus dem gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-189">The location to read from.</span></span></param>
        <summary><span data-ttu-id="1753c-190">Liest einen Wert vom Typ <typeparamref name="T" /> aus dem angegebenen Speicherort.</span><span class="sxs-lookup"><span data-stu-id="1753c-190">Reads a value of type <typeparamref name="T" /> from the given location.</span></span></summary>
        <returns><span data-ttu-id="1753c-191">Ein Objekt vom Typ <typeparamref name="T" />, das aus dem angegebenen Speicherort gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="1753c-191">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (ref byte source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(unsigned int8&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUnaligned(Of T) (ByRef source As Byte) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(System::Byte % source);" />
      <MemberSignature Language="F#" Value="static member ReadUnaligned :  -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.ReadUnaligned source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-192">Der Typ, zu lesen.</span><span class="sxs-lookup"><span data-stu-id="1753c-192">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="1753c-193">Der Speicherort, aus dem gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-193">The location to read from.</span></span></param>
        <summary><span data-ttu-id="1753c-194">Liest einen Wert vom Typ <typeparamref name="T" /> aus dem angegebenen Speicherort, ohne eine architekturabhängige Ausrichtung der Adressen vorauszusetzen.</span><span class="sxs-lookup"><span data-stu-id="1753c-194">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <returns><span data-ttu-id="1753c-195">Ein Objekt vom Typ <typeparamref name="T" />, das aus dem angegebenen Speicherort gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="1753c-195">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(void* source);" />
      <MemberSignature Language="F#" Value="static member ReadUnaligned : nativeptr&lt;unit&gt; -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.ReadUnaligned source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-196">Der Typ, zu lesen.</span><span class="sxs-lookup"><span data-stu-id="1753c-196">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="1753c-197">Der Speicherort, aus dem gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-197">The location to read from.</span></span></param>
        <summary><span data-ttu-id="1753c-198">Liest einen Wert vom Typ <typeparamref name="T" /> aus dem angegebenen Speicherort, ohne eine architekturabhängige Ausrichtung der Adressen vorauszusetzen.</span><span class="sxs-lookup"><span data-stu-id="1753c-198">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <returns><span data-ttu-id="1753c-199">Ein Objekt vom Typ <typeparamref name="T" />, das aus dem angegebenen Speicherort gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="1753c-199">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SizeOf&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOf(Of T) () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int SizeOf();" />
      <MemberSignature Language="F#" Value="static member SizeOf : unit -&gt; int" Usage="System.Runtime.CompilerServices.Unsafe.SizeOf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-200">Der Typ des Objekts, dessen Größe abgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="1753c-200">The type of object whose size is retrieved.</span></span></typeparam>
        <summary><span data-ttu-id="1753c-201">Gibt die Größe eines Objekts des angegebenen Typparameters zurück.</span><span class="sxs-lookup"><span data-stu-id="1753c-201">Returns the size of an object of the given type parameter.</span></span></summary>
        <returns><span data-ttu-id="1753c-202">Die Größe eines Objekts vom Typ <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="1753c-202">The size of an object of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* Subtract&lt;T&gt; (void* source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* Subtract&lt;T&gt;(void* source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* Subtract(void* source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract : nativeptr&lt;unit&gt; * int -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="elementOffset" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="elementOffset">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract :  * int -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-203">Der Typ des Verweises.</span><span class="sxs-lookup"><span data-stu-id="1753c-203">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="1753c-204">Der Verweis, von dem das Offset abgezogen werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-204">The reference to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="1753c-205">Der Offset, der subtrahiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-205">The offset to subtract.</span></span></param>
        <summary><span data-ttu-id="1753c-206">Subtrahiert ein Elementoffset vom angegebenen Verweis.</span><span class="sxs-lookup"><span data-stu-id="1753c-206">Subtracts an element offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="1753c-207">Ein neuer Verweis, der die Subtraktion des Offsets vom Zeiger widerspiegelt.</span><span class="sxs-lookup"><span data-stu-id="1753c-207">A new reference that reflects the subtraction of offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, IntPtr elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-208">Der Typ des Verweises.</span><span class="sxs-lookup"><span data-stu-id="1753c-208">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="1753c-209">Der Verweis, von dem das Offset abgezogen werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-209">The reference to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="1753c-210">Der Offset, der subtrahiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-210">The offset to subtract.</span></span></param>
        <summary><span data-ttu-id="1753c-211">Subtrahiert ein Elementoffset vom angegebenen Verweis.</span><span class="sxs-lookup"><span data-stu-id="1753c-211">Subtracts an element offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="1753c-212">Ein neuer Verweis, der die Subtraktion des Offsets vom Zeiger widerspiegelt.</span><span class="sxs-lookup"><span data-stu-id="1753c-212">A new reference that reflects the subtraction of offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T SubtractByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T SubtractByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % SubtractByteOffset(T % source, IntPtr byteOffset);" />
      <MemberSignature Language="F#" Value="static member SubtractByteOffset :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.SubtractByteOffset (source, byteOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-213">Der Typ des Verweises.</span><span class="sxs-lookup"><span data-stu-id="1753c-213">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="1753c-214">Der Verweis, von dem das Offset abgezogen werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-214">The reference to subtract the offset from.</span></span></param>
        <param name="bytesOffset"><span data-ttu-id="1753c-215">Der Offset, der subtrahiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-215">The offset to subtract.</span></span></param>
        <param name="byteOffset">To be added.</param>
        <summary><span data-ttu-id="1753c-216">Subtrahiert ein Byteoffset vom angegebenen Verweis.</span><span class="sxs-lookup"><span data-stu-id="1753c-216">Subtracts a byte offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="1753c-217">Ein neuer Verweis, der die Subtraktion des Byteoffsets vom Zeiger widerspiegelt.</span><span class="sxs-lookup"><span data-stu-id="1753c-217">A new reference that reflects the subtraction of byte offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T Unbox&lt;T&gt; (object box) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Unbox&lt;struct .ctor (class System.ValueType) T&gt;(object box) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Unbox(Of T As Structure) (box As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T % Unbox(System::Object ^ box);" />
      <MemberSignature Language="F#" Value="static member Unbox : obj -&gt;  (requires 'T : struct)" Usage="System.Runtime.CompilerServices.Unsafe.Unbox box" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="box" Type="System.Object" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-218">Der Typ mittels Unboxing zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="1753c-218">The type to be unboxed.</span></span></typeparam>
        <param name="box"><span data-ttu-id="1753c-219">Der mittels Unboxing zu konvertierende Wert.</span><span class="sxs-lookup"><span data-stu-id="1753c-219">The value to unbox.</span></span></param>
        <summary><span data-ttu-id="1753c-220">Gibt eine <see langword="mutable ref" /> für einen geschachtelten Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="1753c-220">Returns a <see langword="mutable ref" /> to a boxed value.</span></span></summary>
        <returns><span data-ttu-id="1753c-221">Die <see langword="mutable ref" /> für den geschachtelten Wert <paramref name="box" />.</span><span class="sxs-lookup"><span data-stu-id="1753c-221">A <see langword="mutable ref" /> to the boxed value <paramref name="box" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="1753c-222">Die `Unbox<T>` Methode ist einfach ein Wrapper für den IL-Code [Unboxing](xref:System.Reflection.Emit.OpCodes.Unbox) Anweisung.</span><span class="sxs-lookup"><span data-stu-id="1753c-222">The `Unbox<T>` method is simply a wrapper for the IL [unbox](xref:System.Reflection.Emit.OpCodes.Unbox) instruction.</span></span> <span data-ttu-id="1753c-223">Es ist hilfreich zur leistungsoptimierung.</span><span class="sxs-lookup"><span data-stu-id="1753c-223">It is useful as a performance optimization.</span></span> <span data-ttu-id="1753c-224">Wenn eine API, die akzeptiert eine <xref:System.Object> muss mit unterschiedlichen Werten eines Werttyps, der gleiche wiederholt aufgerufen werden-Objekt wiederverwendet werden anstatt ein neues jedes Mal erstellt.</span><span class="sxs-lookup"><span data-stu-id="1753c-224">Whenever an API that takes an <xref:System.Object> needs to be called repeatedly with different values of a value type, the same box object can be reused rather than a new one created each time.</span></span>

<span data-ttu-id="1753c-225">Die `Unbox<T>` Methode verfügt über eine wichtige Verwendung-Einschränkung, die nicht von den Sprachcompilern erzwungen und der Verantwortung des Aufrufers.</span><span class="sxs-lookup"><span data-stu-id="1753c-225">The `Unbox<T>` method has an important usage constraint that is not enforced by language compilers and that is the responsibility of the caller.</span></span> <span data-ttu-id="1753c-226">Der IL `unbox` Anweisung gibt einen verwalteten gesteuert Veränderlichkeit-Zeiger zurück.</span><span class="sxs-lookup"><span data-stu-id="1753c-226">The IL `unbox` instruction returns a controlled-mutability managed pointer.</span></span> <span data-ttu-id="1753c-227">Da .NET und .NET Sprachcompiler dieser Einschränkung nicht darstellen kann die `Unbox<T>` Methode gibt einen normalen änderbare `ref T`.</span><span class="sxs-lookup"><span data-stu-id="1753c-227">Because .NET and .NET language compilers cannot represent this constraint, the `Unbox<T>` method returns a normal mutable `ref T`.</span></span> <span data-ttu-id="1753c-228">Aber Entwickler **darf nicht** geändert wird, es sei denn, sie sicher, dass den zurückgegebenen Verweis `T` ein Strukturtyps des änderbar ist.</span><span class="sxs-lookup"><span data-stu-id="1753c-228">However developers **must not** mutate the returned reference unless they are certain that `T` is a mutable struct type.</span></span> <span data-ttu-id="1753c-229">Z. B. weil die numerischen primitiven wie z. B. <xref:System.Int32> sind nicht änderbar Strukturtypen, der folgende Code wird nicht unterstützt:</span><span class="sxs-lookup"><span data-stu-id="1753c-229">For example, because the numeric primitives such as <xref:System.Int32> are not mutable struct types, the following code is not suppported:</span></span>

```csharp
Unsafe.Box<int>(obj) = 30;
```

<span data-ttu-id="1753c-230">Im Gegensatz dazu sind einem Typ wie etwa <xref:System.Drawing.Point?<displayProperty=nameWithType> ist eine veränderliche Struktur mit öffentlichen Eigenschaften-Settern, der folgende Code unterstützt wird:</span><span class="sxs-lookup"><span data-stu-id="1753c-230">In contrast, a type such as <xref:System.Drawing.Point?<displayProperty=nameWithType> is a mutable struct with public property setters, so the following code is supported:</span></span>

```csharp
Unsafe.Unbox<System.Drawing.Point>(obj).X = 50;
```

<span data-ttu-id="1753c-231">Weitere Informationen finden Sie in Abschnitten III.1.8.1.2.2 ("Controlled-Muttability verwaltete Zeiger") und III.4.32 ("Unboxing--geschachtelter Werttyp in unformatierter Form konvertieren") in [ECMA-335: Common Language Infrastructure (CLI) ich Partitionen, auf VI](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf).</span><span class="sxs-lookup"><span data-stu-id="1753c-231">For more information, see sections III.1.8.1.2.2 ("Controlled-muttability managed pointers") and III.4.32 ("unbox -- convert boxed value type to its raw form") in [ECMA-335: Common Language Infrastructure (CLI) Partitions I to VI](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf).</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="1753c-232"><paramref name="box" /> ist <see langword="null" /> und <typeparamref name="T" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</span><span class="sxs-lookup"><span data-stu-id="1753c-232"><paramref name="box" /> is <see langword="null" />, and <typeparamref name="T" /> is a non-nullable value type.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="1753c-233"><paramref name="box" /> ist ein geschachtelter Werttyp.</span><span class="sxs-lookup"><span data-stu-id="1753c-233"><paramref name="box" /> is not a boxed value type.</span></span>
         
<span data-ttu-id="1753c-234">- oder - </span><span class="sxs-lookup"><span data-stu-id="1753c-234">-or-</span></span>

<span data-ttu-id="1753c-235"><paramref name="box" /> ist kein geschachtelter <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="1753c-235"><paramref name="box" /> is not a boxed <typeparamref name="T" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="1753c-236"><typeparamref name="T" /> wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="1753c-236"><typeparamref name="T" /> cannot be found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Write(void* destination, T value);" />
      <MemberSignature Language="F#" Value="static member Write : nativeptr&lt;unit&gt; * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-237">Der Typ der zu schreibende Wert.</span><span class="sxs-lookup"><span data-stu-id="1753c-237">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="1753c-238">Der Speicherort, an den geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-238">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="1753c-239">Der zu schreibende Wert.</span><span class="sxs-lookup"><span data-stu-id="1753c-239">The value to write.</span></span></param>
        <summary><span data-ttu-id="1753c-240">Schreibt einen Wert vom Typ <typeparamref name="T" /> in den angegebenen Speicherort.</span><span class="sxs-lookup"><span data-stu-id="1753c-240">Writes a value of type <typeparamref name="T" /> to the given location.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (ref byte destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(unsigned int8&amp; destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUnaligned(Of T) (ByRef destination As Byte, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(System::Byte % destination, T value);" />
      <MemberSignature Language="F#" Value="static member WriteUnaligned :  * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.WriteUnaligned (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-241">Der Typ der zu schreibende Wert.</span><span class="sxs-lookup"><span data-stu-id="1753c-241">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="1753c-242">Der Speicherort, an den geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-242">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="1753c-243">Der zu schreibende Wert.</span><span class="sxs-lookup"><span data-stu-id="1753c-243">The value to write.</span></span></param>
        <summary><span data-ttu-id="1753c-244">Schreibt einen Wert vom Typ <typeparamref name="T" /> in den angegebenen Speicherort, ohne eine architekturabhängige Ausrichtung der Adressen vorauszusetzen.</span><span class="sxs-lookup"><span data-stu-id="1753c-244">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(void* destination, T value);" />
      <MemberSignature Language="F#" Value="static member WriteUnaligned : nativeptr&lt;unit&gt; * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.WriteUnaligned (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1753c-245">Der Typ der zu schreibende Wert.</span><span class="sxs-lookup"><span data-stu-id="1753c-245">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="1753c-246">Der Speicherort, an den geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="1753c-246">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="1753c-247">Der zu schreibende Wert.</span><span class="sxs-lookup"><span data-stu-id="1753c-247">The value to write.</span></span></param>
        <summary><span data-ttu-id="1753c-248">Schreibt einen Wert vom Typ <typeparamref name="T" /> in den angegebenen Speicherort, ohne eine architekturabhängige Ausrichtung der Adressen vorauszusetzen.</span><span class="sxs-lookup"><span data-stu-id="1753c-248">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
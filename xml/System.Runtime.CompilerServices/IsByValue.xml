<Type Name="IsByValue" FullName="System.Runtime.CompilerServices.IsByValue">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7f51b5c0290e49444bd599d0ca24496e46d0668f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37472111" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsByValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsByValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsByValue" />
  <TypeSignature Language="VB.NET" Value="Public Class IsByValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsByValue abstract sealed" />
  <TypeSignature Language="F#" Value="type IsByValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="47071-101">Gibt an, dass ein modifiziertes Methodenargument als Objekt mit Wertübergabe-Semantik interpretiert werden soll.</span>
      <span class="sxs-lookup">
        <span data-stu-id="47071-101">Indicates that a modified method argument should be interpreted as having object passed-by-value semantics.</span>
      </span>
      <span data-ttu-id="47071-102">Dieser Modifizierer wird auf Verweistypen angewendet.</span>
      <span class="sxs-lookup">
        <span data-stu-id="47071-102">This modifier is applied to reference types.</span>
      </span>
      <span data-ttu-id="47071-103">Diese Klasse kann nicht vererbt werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="47071-103">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47071-104">Die <xref:System.Runtime.CompilerServices.IsByValue> Klasse wird von der Microsoft C++-Compiler verwendet, zum Kennzeichnen der Methodenparameter und Rückgabewerte, deren Semantik für Zeichenvergleiche entspricht die C++-Regeln für Objekte, die als Wert übergeben.</span><span class="sxs-lookup"><span data-stu-id="47071-104">The <xref:System.Runtime.CompilerServices.IsByValue> class is used by the Microsoft C++ compiler to denote method parameters and return values whose semantics follow the C++ rules for objects passed by value.</span></span>  
  
 <span data-ttu-id="47071-105">Compiler geben benutzerdefinierte Modifizierer innerhalb der Metadaten, die die Art ändern, der just-in-Time-Compiler (JIT)-Werte behandelt, wenn das Standardverhalten nicht zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="47071-105">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="47071-106">Wenn der JIT-Compiler einen benutzerdefinierten Modifizierer trifft, verarbeitet sie den Wert in der Weise, die den Modifizierer gibt an.</span><span class="sxs-lookup"><span data-stu-id="47071-106">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="47071-107">Compiler können Anwenden von benutzerdefinierten Modifizierer auf Methoden, Parameter und Rückgabewerte.</span><span class="sxs-lookup"><span data-stu-id="47071-107">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="47071-108">Der JIT-Compiler, erforderlichen Modifizierern reagieren muss, jedoch optionale Modifizierer ignorieren kann.</span><span class="sxs-lookup"><span data-stu-id="47071-108">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="47071-109">Sie können benutzerdefinierte Modifizierer in Metadaten mit einer der folgenden Methoden auszugeben:</span><span class="sxs-lookup"><span data-stu-id="47071-109">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="47071-110">Verwendung von Methoden in der <xref:System.Reflection.Emit.TypeBuilder> Klasse, z. B. <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, und <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="47071-110">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="47071-111">Generieren einer Anweisungsdatei Microsoft intermediate Language (MSIL), die Aufrufe von enthält `modopt` und `modreq`, und die Datei mit Zusammenstellen der [Ilasm.exe (IL-Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="47071-111">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="47071-112">Verwenden die nicht verwaltete Reflektions-API.</span><span class="sxs-lookup"><span data-stu-id="47071-112">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47071-113">Im folgende Beispiel wird veranschaulicht, wie zum Ausgeben einer <xref:System.Runtime.CompilerServices.IsByValue> Objekt in eine Assembly mit Reflektion.</span><span class="sxs-lookup"><span data-stu-id="47071-113">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsByValue> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsByValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsByValue/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
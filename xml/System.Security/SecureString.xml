<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e2fb894d3e53374bdedb3f6bbc35142f13f811d2" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83934648" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureString extends System.Object implements class System.IDisposable" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecureString = class&#xA;    interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.InteropServices" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Security.SecureString" FromVersion="5.0.0.0" To="System.Runtime.InteropServices" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Security.SecureString" FromVersion="4.1.0.0" To="System.Runtime.InteropServices" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Security.SecureString" FromVersion="4.1.1.0" To="System.Runtime.InteropServices" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Security.SecureString" FromVersion="4.1.2.0" To="System.Runtime.InteropServices" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt Text dar, der vertraulich behandelt werden soll, etwa durch Löschen aus dem Arbeitsspeicher des Computers, wenn er nicht mehr benötigt wird. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
>  Es wird nicht empfohlen, die `SecureString`-Klasse für die neue Entwicklung zu verwenden. Weitere Informationen finden Sie unter [SecureString sollte](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md) nicht auf GitHub verwendet werden.

 <xref:System.Security.SecureString> ist ein Zeichen Folgentyp, der ein Maß für Sicherheit bereitstellt. Es wird versucht, potenziell sensible Zeichen folgen im Prozess Speicher als Klartext zu speichern.  (Informationen zu Einschränkungen finden Sie jedoch im Abschnitt [wie sicher ist SecureString?](#HowSecure) .) Der Wert einer Instanz von <xref:System.Security.SecureString> wird automatisch mithilfe eines Mechanismus geschützt, der von der zugrunde liegenden Plattform unterstützt wird, wenn die Instanz initialisiert wird oder wenn der Wert geändert wird. Die Anwendung kann die Instanz unveränderlich erzeugen und eine weitere Änderung verhindern, indem Sie die <xref:System.Security.SecureString.MakeReadOnly%2A>-Methode aufruft.  
  
 Die maximale Länge einer <xref:System.Security.SecureString> Instanz beträgt 65.536 Zeichen.  
  
> [!IMPORTANT]
>  Dieser Typ implementiert die <xref:System.IDisposable>-Schnittstelle. Wenn Sie die Verwendung einer Instanz des Typs abgeschlossen haben, sollten Sie Sie entweder direkt oder indirekt verwerfen. Zum direkten Löschen des Typs rufen Sie seine <xref:System.IDisposable.Dispose%2A>-Methode in einem `try`/`catch`-Block auf. Zum indirekten Löschen verwenden Sie ein Sprachkonstrukt wie `using` (in C#) oder `Using` (in Visual Basic). Weitere Informationen finden Sie im Abschnitt „Verwenden eines Objekts, das IDisposable implementiert“ des Themas „Die <xref:System.IDisposable>-Schnittstelle“.  
  
 Die <xref:System.Security.SecureString>-Klasse und ihre Member sind für com nicht sichtbar. Weitere Informationen finden Sie unter <xref:System.Runtime.InteropServices.ComVisibleAttribute>.  
  
 Inhalt dieses Abschnitts:  
  
 [Zeichenfolge im Vergleich zu SecureString](#vsString)   
 [SecureString-Vorgänge](#Ops)   
 [SecureString und Interop-](#interop)   
 [Wie sicher ist SecureString?](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a>Zeichenfolge im Vergleich zu SecureString  
 Eine Instanz der <xref:System.String?displayProperty=nameWithType>-Klasse ist unveränderlich und kann, wenn Sie nicht mehr benötigt wird, nicht Programm gesteuert für Garbage Collection eingeplant werden. Das heißt, die Instanz ist nach der Erstellung schreibgeschützt, und es ist nicht möglich, vorherzusagen, wann die Instanz aus dem Arbeitsspeicher des Computers gelöscht wird. Da <xref:System.String?displayProperty=nameWithType> Instanzen unveränderlich sind, erstellen Vorgänge, die scheinbar eine vorhandene Instanz ändern, tatsächlich eine Kopie davon, um Sie zu bearbeiten. Wenn ein <xref:System.String> Objekt vertrauliche Informationen wie Kenn Wörter, Kreditkartennummern oder persönliche Daten enthält, besteht daher das Risiko, dass die Informationen nach der Verwendung offengelegt werden, da die Anwendung die Daten nicht aus dem Arbeitsspeicher des Computers löschen kann.  
  
 Ein <xref:System.Security.SecureString>-Objekt ähnelt einem <xref:System.String> Objekt darin, dass es über einen Textwert verfügt. Der Wert eines <xref:System.Security.SecureString> Objekts wird jedoch im Arbeitsspeicher fixiert, kann einen Schutzmechanismus verwenden, wie z. b. die Verschlüsselung, der vom zugrunde liegenden Betriebssystem bereitgestellt wird, kann geändert werden, bis die Anwendung ihn als schreibgeschützt kennzeichnet und aus dem Arbeitsspeicher des Computers gelöscht werden kann, indem die Anwendung die <xref:System.Security.SecureString.Dispose%2A>-Methode oder die .NET Framework Garbage Collector aufrufen.  
  
 Eine Erläuterung der Einschränkungen der <xref:System.Security.SecureString>-Klasse finden Sie im Abschnitt [wie sicher ist SecureString?](#HowSecure) .  
  
 [Nach oben](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a>SecureString-Vorgänge  
 Die <xref:System.Security.SecureString>-Klasse enthält Member, mit denen Sie die folgenden Aufgaben ausführen können:  
  
 Instanziieren eines <xref:System.Security.SecureString> Objekts  
 Sie instanziieren eine <xref:System.Security.SecureString> Objekt, indem Sie den Parameter losen Konstruktor aufrufen.  
  
 Hinzufügen von Zeichen zu einem <xref:System.Security.SecureString> Objekt  
 Sie können einem <xref:System.Security.SecureString>-Objekt ein einzelnes Zeichen gleichzeitig hinzufügen, indem Sie dessen <xref:System.Security.SecureString.AppendChar%2A> oder <xref:System.Security.SecureString.InsertAt%2A>-Methode aufrufen.  
  
> [!IMPORTANT]
>  Ein <xref:System.Security.SecureString> Objekt sollte nie aus einer <xref:System.String>erstellt werden, da die sensiblen Daten bereits den Auswirkungen der Speicher Persistenz der unveränderlichen <xref:System.String> Klasse unterliegen. Die beste Methode zum Erstellen eines <xref:System.Security.SecureString> Objekts ist eine nicht verwaltete Zeichenfolge, z. b. die <xref:System.Console.ReadKey%2A?displayProperty=nameWithType>-Methode.  
  
 Entfernen von Zeichen aus einem <xref:System.Security.SecureString> Objekt  
 Sie können ein einzelnes Zeichen ersetzen, indem Sie die <xref:System.Security.SecureString.SetAt%2A>-Methode aufrufen, ein einzelnes Zeichen entfernen, indem Sie die <xref:System.Security.SecureString.RemoveAt%2A>-Methode aufrufen, oder alle Zeichen aus der <xref:System.Security.SecureString> Instanz entfernen, indem Sie die <xref:System.Security.SecureString.Clear%2A>-Methode aufrufen.  
  
 Schreibschutz für das <xref:System.Security.SecureString> Objekt festlegen  
 Nachdem Sie die vom <xref:System.Security.SecureString> Objekt dargestellte Zeichenfolge definiert haben, wird die <xref:System.Security.SecureString.MakeReadOnly%2A>-Methode aufgerufen, um die Zeichenfolge als schreibgeschützt festzulegen.  
  
 Informationen zum <xref:System.Security.SecureString> Objekt  
 Die <xref:System.Security.SecureString>-Klasse verfügt nur über zwei Member, die Informationen über die Zeichenfolge bereitstellen: Ihre <xref:System.Security.SecureString.Length%2A>-Eigenschaft, die die Anzahl der UTF16-codierten Code Einheiten in der Zeichenfolge angibt. und die <xref:System.Security.SecureString.IsReadOnly%2A>,-Methode, die angibt, ob die-Instanz schreibgeschützt ist.  
  
 Geben Sie den der <xref:System.Security.SecureString> Instanz zugeordneten Arbeitsspeicher frei.  
 Da <xref:System.Security.SecureString> die <xref:System.IDisposable>-Schnittstelle implementiert, geben Sie den Arbeitsspeicher frei, indem Sie die <xref:System.Security.SecureString.Dispose%2A>-Methode aufrufen.  
  
 Die <xref:System.Security.SecureString>-Klasse besitzt keine Member, die den Wert einer <xref:System.Security.SecureString>überprüfen, vergleichen oder konvertieren. Das Fehlen solcher Member erleichtert es, den Wert der Instanz vor versehentlicher oder böswilliger Verfügbarmachung zu schützen. Verwenden Sie geeignete Member der <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType>-Klasse, z. b. die <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>-Methode, um den Wert eines <xref:System.Security.SecureString> Objekts zu bearbeiten.  
  
 In der .NET Framework-Klassenbibliothek werden häufig <xref:System.Security.SecureString> Instanzen auf folgende Weise verwendet:  
  
-   Zum Bereitstellen von Kenn Wort Informationen für einen Prozess mithilfe der <xref:System.Diagnostics.ProcessStartInfo> Struktur oder durch Aufrufen einer Überladung der <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType>-Methode, die über einen Parameter vom Typ <xref:System.Security.SecureString>verfügt.  
  
-   Zum Bereitstellen von Informationen zum Netzwerk Kennwort durch Aufrufen eines <xref:System.Net.NetworkCredential>-Klassenkonstruktors, der einen Parameter vom Typ <xref:System.Security.SecureString> hat, oder durch Verwenden der <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType>-Eigenschaft.  
  
-   Zum Bereitstellen von Kenn Wort Informationen für SQL Server Authentifizierung durch Aufrufen des <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType>-Konstruktors oder Abrufen des Werts der <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType>-Eigenschaft.  
  
-   , Wenn eine Zeichenfolge an nicht verwalteten Code übergeben werden soll. Weitere Informationen finden Sie im Abschnitt [SecureString und Interop](#interop) .  
  
 [Nach oben](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a>SecureString und Interop  
 Da das Betriebssystem <xref:System.Security.SecureString>nicht direkt unterstützt, müssen Sie den Wert des <xref:System.Security.SecureString> Objekts in den erforderlichen Zeichen Folgentyp konvertieren, bevor Sie die Zeichenfolge an eine native Methode übergeben.  Die <xref:System.Runtime.InteropServices.Marshal>-Klasse verfügt über fünf Methoden, die Folgendes ausführen:  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>, das den <xref:System.Security.SecureString> Zeichen folgen Wert in eine binäre Zeichenfolge (BSTR) konvertiert, die von com erkannt wird.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> und <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>, die den <xref:System.Security.SecureString> Zeichen folgen Wert in eine ANSI-Zeichenfolge im nicht verwalteten Speicher kopieren.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> und <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>, die den <xref:System.Security.SecureString> Zeichen folgen Wert in eine Unicode-Zeichenfolge im nicht verwalteten Speicher kopieren.  
  
 Jede dieser Methoden erstellt eine klar Text Zeichenfolge im nicht verwalteten Speicher. Es liegt in der Verantwortung des Entwicklers, diesen Speicher freizugeben, sobald er nicht mehr benötigt wird. Jede der Zeichen folgen Konvertierungs-und Speicher Belegungs Methoden weist eine entsprechende Methode auf, um den zugeordneten Arbeitsspeicher freizugeben und freizugeben:  
  
|Zuordnungs-und Konvertierungsmethode|NULL-und Free-Methode|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [Nach oben](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a>Wie sicher ist SecureString?  
 Wenn eine <xref:System.Security.SecureString> Instanz ordnungsgemäß erstellt wurde, bietet Sie mehr Datenschutz als ein <xref:System.String>. Beim Erstellen einer Zeichenfolge aus einer Zeichen-at-a-Time-Quelle erstellt <xref:System.String> mehrere Zwischenspeicher im Arbeitsspeicher, während <xref:System.Security.SecureString> nur eine einzelne Instanz erstellt.  Die Garbage Collection von <xref:System.String>-Objekten ist nicht deterministisch. Da der Arbeitsspeicher nicht fixiert ist, werden von der Garbage Collector zusätzliche Kopien <xref:System.String> Werte erstellt, wenn der Arbeitsspeicher verschoben und komprimiert wird. Im Gegensatz dazu wird der Arbeitsspeicher, der einem <xref:System.Security.SecureString> Objekt zugeordnet ist, fixiert, und der Speicher kann durch Aufrufen der <xref:System.Security.SecureString.Dispose%2A>-Methode freigegeben werden.  
  
 Obwohl die in einer <xref:System.Security.SecureString> Instanz gespeicherten Daten sicherer als in einer <xref:System.String> Instanz gespeicherte Daten sind, gibt es bedeutende Einschränkungen hinsichtlich der Sicherheit einer <xref:System.Security.SecureString> Instanz. Dazu gehören:  
  
 Plattform  
 Auf dem Windows-Betriebssystem wird der Inhalt des internen Zeichen Arrays einer <xref:System.Security.SecureString> Instanz verschlüsselt. Unabhängig davon, ob die Verschlüsselung aufgrund fehlender APIs oder Schlüssel Verwaltungsprobleme nicht auf allen Plattformen verfügbar ist. Aufgrund dieser Plattformabhängigkeit verschlüsselt <xref:System.Security.SecureString> nicht den internen Speicher auf einer nicht-Windows-Plattform. Auf diesen Plattformen werden andere Techniken verwendet, um zusätzlichen Schutz zu bieten.
  
 Duration  
 Auch wenn die <xref:System.Security.SecureString>-Implementierung die Verschlüsselung nutzen kann, kann der nur-Text, der der <xref:System.Security.SecureString> Instanz zugewiesen ist, zu unterschiedlichen Zeitpunkten verfügbar gemacht werden:  
  
-   Da Windows keine sichere Zeichen folgen Implementierung auf Betriebssystemebene bietet, muss der .NET Framework den Wert der sicheren Zeichenfolge weiterhin in seine nur-Text-Darstellung konvertieren, damit er verwendet werden kann.  
  
-   Wenn der Wert der sicheren Zeichenfolge durch Methoden wie <xref:System.Security.SecureString.AppendChar%2A> oder <xref:System.Security.SecureString.RemoveAt%2A>geändert wird, muss er entschlüsselt (d. h. zurück in nur-Text konvertiert), geändert und erneut verschlüsselt werden.  
  
-   Wenn die sichere Zeichenfolge in einem Interop-Befehl verwendet wird, muss Sie in eine ANSI-Zeichenfolge, eine Unicode-Zeichenfolge oder eine binäre Zeichenfolge (BSTR) konvertiert werden. Weitere Informationen finden Sie im Abschnitt [SecureString und Interop](#interop) .  
  
 Das Zeitintervall, für das der Wert der <xref:System.Security.SecureString> Instanz verfügbar gemacht wird, wird im Vergleich zur <xref:System.String> Klasse lediglich gekürzt.  
  
 Speicherung im Vergleich zu Verwendung  
 Im allgemeinen definiert die <xref:System.Security.SecureString>-Klasse einen Speichermechanismus für Zeichen folgen Werte, die geschützt oder vertraulich aufbewahrt werden sollen. Außerhalb der .NET Framework selbst unterstützt jedoch kein Verwendungs Mechanismus <xref:System.Security.SecureString>. Dies bedeutet, dass die sichere Zeichenfolge in eine verwendbare Form (in der Regel ein Klartext-Formular) konvertiert werden muss, die von Ihrem Ziel erkannt werden kann, und dass das Entschlüsseln und konvertieren im Benutzerbereich erfolgen muss.  
  
 Insgesamt ist <xref:System.Security.SecureString> sicherer als <xref:System.String>, da dadurch die Gefährdung sensibler Zeichen folgen Daten eingeschränkt wird. Diese Zeichen folgen sind jedoch möglicherweise weiterhin für jeden Prozess oder jeden Vorgang verfügbar, der Zugriff auf den unformatierten Speicher hat, z. b. einen bösartigen Prozess, der auf dem Host Computer ausgeführt wird, ein Prozess Abbild oder eine vom Benutzer sichtbare Auslagerungs Datei. Anstatt <xref:System.Security.SecureString> zum Schützen von Kenn Wörtern zu verwenden, empfiehlt es sich, ein nicht transparentes Handle für Anmelde Informationen zu verwenden, die außerhalb des Prozesses gespeichert werden.  
  
 [Nach oben](#top)  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Security.SecureString> verwendet wird, um das Kennwort eines Benutzers für die Verwendung als Anmelde Informationen zu sichern, um einen neuen Prozess zu starten.  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Security.SecureString" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Security.SecureString" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird der standardmäßige (oder parameterlose) Konstruktor verwendet, um ein neues <xref:System.Security.SecureString>-Objekt zu instanziieren. Anschließend wird die <xref:System.Security.SecureString.AppendChar%2A>-Methode aufgerufen, um ein Array von Zeichen hinzuzufügen.  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 Im folgenden Beispiel wird ein <xref:System.Security.SecureString>-Objekt aus dem Wert eines <xref:System.String>-Objekts erstellt.  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Beim Schützen oder Aufheben des Schutzes für den Wert dieser Instanz ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.NotSupportedException">Diese Operation wird auf dieser Plattform nicht unterstützt.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberSignature Language="F#" Value="new System.Security.SecureString : nativeptr&lt;char&gt; * int -&gt; System.Security.SecureString" Usage="new System.Security.SecureString (value, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Ein Zeiger auf ein Array von <see cref="T:System.Char" />-Objekten.</param>
        <param name="length">Die Anzahl der Elemente von <paramref name="value" />, die in die neue Instanz eingeschlossen werden sollen.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.SecureString" />-Klasse aus einem Unterarray von <see cref="T:System.Char" />-Objekten.  
  
Dieser Konstruktor ist nicht CLS-kompatibel. Die CLS-konforme Alternative ist <see cref="M:System.Security.SecureString.#ctor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert das neue <xref:System.Security.SecureString>-Objekt mit der Anzahl der Zeichen in `value`, die von `length`angegeben werden. der Wert der-Instanz wird dann verschlüsselt.  
  
 In C#wird dieser Konstruktor nur im Kontext von unsicherem Code definiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein neues <xref:System.Security.SecureString>-Objekt instanziiert, indem der zugehörige Konstruktor ein Zeiger auf ein Zeichen Array übergeben wird.  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> ist <see langword="null" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> ist kleiner als 0 (null) oder größer als 65.536.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Beim Schützen oder Aufheben des Schutzes für den Wert dieser sicheren Zeichenfolge ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.NotSupportedException">Diese Operation wird auf dieser Plattform nicht unterstützt.</exception>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberSignature Language="F#" Value="member this.AppendChar : char -&gt; unit" Usage="secureString.AppendChar c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">Ein Zeichen, das an diese sichere Zeichenfolge angefügt werden soll.</param>
        <summary>Fügt am Ende der aktuellen sicheren Zeichenfolge ein Zeichen an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Implementierung einen Schutzmechanismus verwendet, wie z. b. die Verschlüsselung, ist der Wert dieser sicheren Zeichenfolge, falls vorhanden, nicht geschützt. `c` angefügt wird. Anschließend wird der neue Wert der sicheren Zeichenfolge erneut geschützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie sich die Methoden <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>und <xref:System.Security.SecureString.Clear%2A> auf den Wert eines <xref:System.Security.SecureString> Objekts auswirken.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 Im folgenden Beispiel wird veranschaulicht, wie die Methoden <xref:System.Security.SecureString.AppendChar%2A> und <xref:System.Security.SecureString.RemoveAt%2A> verwendet werden können, um die Zeichen in einem Kennwort zu erfassen.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
        <exception cref="T:System.InvalidOperationException">Diese sichere Zeichenfolge ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Beim Ausführen dieses Vorgangs überschreitet diese sichere Zeichenfolge die Länge von 65.536 Zeichen.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Beim Schützen oder Aufheben des Schutzes für den Wert dieser sicheren Zeichenfolge ist ein Fehler aufgetreten.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="secureString.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht den Wert der aktuellen sicheren Zeichenfolge.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Arbeitsspeicher des Computers, der den Wert dieser sicheren Zeichenfolge enthält, wird Nullen, und die Länge des Werts dieser sicheren Zeichenfolge wird auf 0 (null) festgelegt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie sich die Methoden <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>und <xref:System.Security.SecureString.Clear%2A> auf den Wert eines <xref:System.Security.SecureString> Objekts auswirken.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
        <exception cref="T:System.InvalidOperationException">Diese sichere Zeichenfolge ist schreibgeschützt.</exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Security.SecureString" Usage="secureString.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie der aktuellen sicheren Zeichenfolge.</summary>
        <returns>Ein Duplikat dieser sicheren Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Instanz eines <xref:System.Security.SecureString> als schreibgeschützt gekennzeichnet ist, ist die Kopie dieser Instanz nicht schreibgeschützt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Beim Schützen oder Aufheben des Schutzes für den Wert dieser sicheren Zeichenfolge ist ein Fehler aufgetreten.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secureString.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle vom aktuellen <see cref="T:System.Security.SecureString" />-Objekt verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Security.SecureString.Dispose%2A>-Methode schreibt binäre Nullen in den zugeordneten Speicher, der den Wert dieses <xref:System.Security.SecureString> Objekts enthält, und gibt dann den zugewiesenen Speicher frei.  
  
 Weitere Informationen finden Sie unter [Garbage Collection](/dotnet/standard/garbage-collection/).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.InsertAt : int * char -&gt; unit" Usage="secureString.InsertAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Die Indexposition, an der der <paramref name="c" />-Parameter eingefügt wird.</param>
        <param name="c">Das einzufügende Zeichen.</param>
        <summary>Fügt in dieser sicheren Zeichenfolge an der angegebenen Indexposition ein Zeichen ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Index ist NULL basiert. das erste Zeichen in dieser sicheren Zeichenfolge befindet sich an der Indexposition 0.  
  
 Wenn die Implementierung einen Schutzmechanismus verwendet, wie z. b. Verschlüsselung, ist der Wert der sicheren Zeichenfolge, falls vorhanden, nicht geschützt. `c` an der angegebenen Indexposition eingefügt wird. Anschließend wird der neue Wert erneut geschützt. Die <xref:System.Security.SecureString.InsertAt%2A>-Methode ergibt dieselben Ergebnisse wie die <xref:System.Security.SecureString.AppendChar%2A>-Methode, die am Ende einer sicheren Zeichenfolge ein Zeichen einfügt, wenn der `index`-Parameter von <xref:System.Security.SecureString.InsertAt%2A> auf die Länge dieser Instanz festgelegt ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie sich die Methoden <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>und <xref:System.Security.SecureString.Clear%2A> auf den Wert eines <xref:System.Security.SecureString> Objekts auswirken.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
        <exception cref="T:System.InvalidOperationException">Diese sichere Zeichenfolge ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> ist kleiner als 0 (null) oder größer als die Länge dieser sicheren Zeichenfolge.  
  
Oder 
Beim Ausführen dieses Vorgangs überschreitet diese sichere Zeichenfolge die Länge von 65.536 Zeichen.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Beim Schützen oder Aufheben des Schutzes für den Wert dieser sicheren Zeichenfolge ist ein Fehler aufgetreten.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : unit -&gt; bool" Usage="secureString.IsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt an, ob diese sichere Zeichenfolge als schreibgeschützt markiert ist.</summary>
        <returns><see langword="true" />, wenn diese sichere Zeichenfolge schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Instanz von <xref:System.Security.SecureString> von der <xref:System.Security.SecureString.MakeReadOnly%2A>-Methode als schreibgeschützt gekennzeichnet ist, wird bei jedem Versuch, den Wert der-Instanz zu ändern, eine <xref:System.InvalidOperationException>ausgelöst. Verwenden Sie die <xref:System.Security.SecureString.IsReadOnly%2A>-Methode, um zu testen, ob eine <xref:System.Security.SecureString> schreibgeschützt ist, bevor Sie versuchen, Sie zu ändern.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Security.SecureString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Zeichen in der aktuellen sicheren Zeichenfolge ab.</summary>
        <value>Die Anzahl von <see cref="T:System.Char" />-Objekten in dieser sicheren Zeichenfolge.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Security.SecureString.Length%2A>-Eigenschaft gibt die Anzahl der <xref:System.Char> Objekte in dieser Instanz zurück, nicht die Anzahl der Unicode-Zeichen. Ein Unicode-Zeichen kann durch mehr als ein <xref:System.Char> Objekt dargestellt werden.  
  
 Die maximale Länge einer <xref:System.Security.SecureString> Instanz beträgt 65.536 Zeichen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="member this.MakeReadOnly : unit -&gt; unit" Usage="secureString.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Textwert dieser sicheren Zeichenfolge als schreibgeschützt fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Initialisieren Sie den Textwert einer Instanz der <xref:System.Security.SecureString>-Klasse mit den <xref:System.Security.SecureString.%23ctor%2A>-Konstruktoren, und ändern Sie den-Wert mit den Methoden <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>und <xref:System.Security.SecureString.AppendChar%2A>.  
  
 Nachdem Sie die abschließenden Änderungen vorgenommen haben, verwenden Sie die <xref:System.Security.SecureString.MakeReadOnly%2A>-Methode, um den Wert der Instanz unveränderlich zu machen (schreibgeschützt). Nachdem der Wert als schreibgeschützt gekennzeichnet wurde, löst jeder weitere Versuch, ihn zu ändern, eine <xref:System.InvalidOperationException>aus.  
  
 Die Auswirkung des Aufrufs von <xref:System.Security.SecureString.MakeReadOnly%2A> ist permanent, da die <xref:System.Security.SecureString>-Klasse keine Möglichkeit bietet, die sichere Zeichenfolge erneut zu ändern. Verwenden Sie die <xref:System.Security.SecureString.IsReadOnly%2A>-Methode, um zu testen, ob eine Instanz von <xref:System.Security.SecureString> schreibgeschützt ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die Methoden <xref:System.Security.SecureString.AppendChar%2A> und <xref:System.Security.SecureString.RemoveAt%2A> verwendet werden können, um die Zeichen in einem Kennwort zu erfassen. Nachdem das Kennwort gesammelt wurde, wird es als schreibgeschützt festgestellt.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="secureString.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Die Indexposition eines Zeichens in dieser sicheren Zeichenfolge.</param>
        <summary>Entfernt das Zeichen an der angegebenen Indexposition aus dieser sicheren Zeichenfolge.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Index ist NULL basiert. das erste Zeichen in dieser Instanz ist an der Indexposition 0 (null).  
  
 Wenn die Implementierung einen Schutzmechanismus verwendet, wie z. b. die Verschlüsselung, ist der Wert dieser sicheren Zeichenfolge, falls vorhanden, nicht geschützt. das Zeichen an der angegebenen Indexposition wird entfernt. Anschließend wird der neue Wert erneut geschützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie sich die Methoden <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>und <xref:System.Security.SecureString.Clear%2A> auf den Wert eines <xref:System.Security.SecureString> Objekts auswirken.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 Im folgenden Beispiel wird veranschaulicht, wie die Methoden <xref:System.Security.SecureString.AppendChar%2A> und <xref:System.Security.SecureString.RemoveAt%2A> verwendet werden können, um die Zeichen in einem Kennwort zu erfassen.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
        <exception cref="T:System.InvalidOperationException">Diese sichere Zeichenfolge ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> ist kleiner als 0 (null), größer als die Länge der sicheren Zeichenfolge oder gleich der Länge dieser Zeichenfolge.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Beim Schützen oder Aufheben des Schutzes für den Wert dieser sicheren Zeichenfolge ist ein Fehler aufgetreten.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * char -&gt; unit" Usage="secureString.SetAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Die Indexposition eines vorhandenen Zeichens in dieser sicheren Zeichenfolge</param>
        <param name="c">Ein Zeichen, das das vorhandene Zeichen ersetzt.</param>
        <summary>Ersetzt das an der angegebenen Indexposition vorhandene Zeichen durch ein anderes Zeichen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Index ist NULL basiert. das erste Zeichen in dieser Instanz ist an der Indexposition 0 (null).  
  
 Wenn die Implementierung einen Schutzmechanismus verwendet, wie z. b. Verschlüsselung, ist der Wert der sicheren Zeichenfolge, falls vorhanden, nicht geschützt. `c` der angegebenen Indexposition zugewiesen wird. Anschließend wird der neue Wert erneut geschützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie sich die Methoden <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>und <xref:System.Security.SecureString.Clear%2A> auf den Wert eines <xref:System.Security.SecureString> Objekts auswirken.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
        <exception cref="T:System.InvalidOperationException">Diese sichere Zeichenfolge ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> ist kleiner als 0 (null), größer als die Länge der sicheren Zeichenfolge oder gleich der Länge dieser Zeichenfolge.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Beim Schützen oder Aufheben des Schutzes für den Wert dieser sicheren Zeichenfolge ist ein Fehler aufgetreten.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

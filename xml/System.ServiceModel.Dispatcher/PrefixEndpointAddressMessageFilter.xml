<Type Name="PrefixEndpointAddressMessageFilter" FullName="System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="74fe42ae3630ea19cba76adb002fc494bd423c2a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36415292" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PrefixEndpointAddressMessageFilter : System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PrefixEndpointAddressMessageFilter extends System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class PrefixEndpointAddressMessageFilter&#xA;Inherits MessageFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrefixEndpointAddressMessageFilter : System::ServiceModel::Dispatcher::MessageFilter" />
  <TypeSignature Language="F#" Value="type PrefixEndpointAddressMessageFilter = class&#xA;    inherit MessageFilter" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Dispatcher.MessageFilter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a query that tests whether a message matches an EndpointAddress using a *Longest-Prefix Match* for the URI component.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.ServiceModel.EndpointAddress>-Objekt schließt eine URI und eine optionale Auflistung von Adressierungsheadern ein. Die Adressierung und die Nachrichtenheader werden in kanonische Form gebracht, um im Hinblick auf Übereinstimmung verglichen zu werden. Wenn ein Parameter mehrmals in einer <xref:System.ServiceModel.EndpointAddress> erscheint, muss der entsprechende Header mindestens genauso oft in der Nachricht erscheinen.  
  
 Dieser Filter führt dieselbe Abfrage als <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter>, außer dass der Test auf Vorhandensein, ob eine Nachricht mit eine Endpunktadresse übereinstimmt durch erfolgt eine *Abgleichs des längsten Präfixes*. Das bedeutet, dass die im Filter angegebene URI nicht genau mit der URI der Nachricht übereinstimmen muss, aber in der URI als Präfix enthalten sein muss. Wenn ein Filter beispielsweise die Adresse "www.foo.com" angibt und eine Nachricht an "www.foo.com/customerA" adressiert ist, ist der URI-Teil der Filterabfragebedingung erfüllt. Der Headerteil der Filterabfrage muss jedoch noch durchgeführt werden.  
  
 Bei Internetinformationsdiensten (IIS) und dem zugrunde liegenden Dateisystem (NTFS oder FAT) wird nicht zwischen Groß- und Kleinschreibung unterschieden. Bei den durch diese Klasse durchgeführten URI-Abgleichen wird ebenfalls nicht zwischen Groß- und Kleinschreibung unterschieden. In diesem Fall z. B. http://www.microsoft.com wird als gleich ausgewertet http://WWW.microsoft.com.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrefixEndpointAddressMessageFilter (System.ServiceModel.EndpointAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.EndpointAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As EndpointAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrefixEndpointAddressMessageFilter(System::ServiceModel::EndpointAddress ^ address);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter : System.ServiceModel.EndpointAddress -&gt; System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" Usage="new System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter address" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> against which messages are tested.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> class.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrefixEndpointAddressMessageFilter (System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As EndpointAddress, includeHostNameInComparison As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrefixEndpointAddressMessageFilter(System::ServiceModel::EndpointAddress ^ address, bool includeHostNameInComparison);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter : System.ServiceModel.EndpointAddress * bool -&gt; System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" Usage="new System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter (address, includeHostNameInComparison)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="includeHostNameInComparison" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> against which messages are tested.</param>
        <param name="includeHostNameInComparison">
          <see langword="true" /> if the host name is included in the endpoint address comparison; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie auf Ihrem lokalen Computer einen Webdienst installiert haben, gibt es eine Reihe gleichwertiger Möglichkeiten, um darauf zu verweisen, z.&#160;B. in folgender Weise:  
  
-   http://localhost/foo.svc  
  
-   http://192.168.1.100/foo.svc  
  
-   http://[mein-Computername]/foo.svc  
  
-   http://[mein-Computername].[mein-Unternehmen].com/foo.svc.  
  
 Wenn der Wert des `includeHostNameInComparison`-Parameters `false` ist, werden alle oben genannten URIs in denselben Endpunkt aufgelöst.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ Address { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the Endpoint Address that the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> tests messages against.</summary>
        <value>Die <see cref="T:System.ServiceModel.EndpointAddress" />, die der <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> zum Testen von Nachrichten verwendet.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected internal override System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable``1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function CreateFilterTable(Of FilterData) () As IMessageFilterTable(Of FilterData)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename FilterData&gt;&#xA; override System::ServiceModel::Dispatcher::IMessageFilterTable&lt;FilterData&gt; ^ CreateFilterTable();" />
      <MemberSignature Language="F#" Value="override this.CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;" Usage="prefixEndpointAddressMessageFilter.CreateFilterTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData">Den Filtern in der Tabelle zugeordnete Daten.</typeparam>
        <summary>Creates a new filter table that tests a message against multiple endpoint addresses simultaneously.</summary>
        <returns>An object that implements the <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> interface that can contain <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" />s with associated <paramref name="FilterData" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Methode gibt eine Instanz von <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> zurück, die für den Test auf bestimmte Nachrichtenendpunkte optimiert ist.  
  
 Diese Methode ist für die Verwendung durch <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601> vorgesehen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeHostNameInComparison">
      <MemberSignature Language="C#" Value="public bool IncludeHostNameInComparison { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostNameInComparison" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IncludeHostNameInComparison As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostNameInComparison { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IncludeHostNameInComparison : bool" Usage="System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the host name is included in the endpoint address comparison.</summary>
        <value>
          <see langword="true" />, wenn der Hostname beim Abgleich der Endpunktadressen berücksichtigt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie auf Ihrem lokalen Computer einen Webdienst installiert haben, gibt es eine Reihe gleichwertiger Möglichkeiten, um darauf zu verweisen, z.&#160;B. in folgender Weise:  
  
-   http://localhost/foo.svc  
  
-   http://192.168.1.100/foo.svc  
  
-   http://[mein-Computername]/foo.svc  
  
-   http://[mein-Computername].[mein-Unternehmen].com/foo.svc.  
  
 Der Standardwert für diese Eigenschaft ist `false`, sodass alle oben genannten URIs in denselben Endpunkt aufgelöst werden, sofern Sie diese Eigenschaft nicht ändern.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tests whether a message or buffered message satisfies the criteria of the endpoint filter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zwei Überladungen dieser Methode sind gleichwertig, da dieser Filter nicht den Text der Nachricht überprüft, sondern nur die Adresse anhand eines Abgleichs mit dem längsten Präfix prüft und anschließend die Header prüft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public override bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Match(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="override this.Match : System.ServiceModel.Channels.Message -&gt; bool" Usage="prefixEndpointAddressMessageFilter.Match message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> object to test.</param>
        <summary>Tests whether a message satisfies the specified endpoint address.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.Message" /> object satisfies the endpoint address specified in the filter; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zwei Überladungen dieser Methode sind gleichwertig, da dieser Filter nicht den Text der Nachricht überprüft, sondern nur die Adresse anhand eines Abgleichs mit dem längsten Präfix prüft und anschließend die Header prüft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public override bool Match (System.ServiceModel.Channels.MessageBuffer messageBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer messageBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Match(System::ServiceModel::Channels::MessageBuffer ^ messageBuffer);" />
      <MemberSignature Language="F#" Value="override this.Match : System.ServiceModel.Channels.MessageBuffer -&gt; bool" Usage="prefixEndpointAddressMessageFilter.Match messageBuffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageBuffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object to test.</param>
        <summary>Tests whether a buffered message satisfies the specified endpoint address.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object satisfies the endpoint address; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zwei Überladungen dieser Methode sind gleichwertig, da dieser Filter nicht den Text der Nachricht überprüft, sondern nur die Adresse anhand eines Abgleichs mit dem längsten Präfix prüft und anschließend die Header prüft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="messageBuffer" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
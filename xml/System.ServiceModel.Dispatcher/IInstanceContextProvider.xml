<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IInstanceContextProvider.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b7230a1507d07863c2307687e31de14a5abcb925141.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30a1507d07863c2307687e31de14a5abcb925141</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>Implement to participate in the creation or choosing of a <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object, especially to enable shared sessions.</source>
          <target state="translated">Implementieren Sie dies, um die Erstellung oder Auswahl eines <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekts mitzubestimmen, insbesondere, um freigegebene Sitzungen zu aktivieren.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> interface to provide the appropriate <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType&gt;</ph> object to the system.</source>
          <target state="translated">Implementieren Sie die <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph>-Schnittstelle, um dem System das entsprechende <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType&gt;</ph>-Objekt bereitzustellen.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>Typically, this interface is implemented to support shared sessions, enable service instance pooling, control lifetimes of service instances, or to group contexts among clients.</source>
          <target state="translated">In der Regel wird diese Schnittstelle implementiert, um freigegebene Sitzungen zu unterstützen, Dienstinstanzpooling zu aktivieren, die Lebensdauer von Dienstinstanzen zu steuern oder Clients Kontexte in Gruppen zuzuordnen.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>For example, to implement sharing, insert a custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> to decide which session or call from a client is associated with which <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object.</source>
          <target state="translated">Um zum Beispiel die Freigabe zu implementieren, fügen Sie einen benutzerdefinierten <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> ein, um zu entscheiden, welche Sitzung oder welcher Aufruf eines Clients welchem <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>-Objekt zugeordnet wird.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>For an example that demonstrates the sharing of instance contexts, see <bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>.</source>
          <target state="translated">Ein Beispiel, das die Freigabe von instanzkontexten veranschaulicht wird, finden Sie unter <bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> is inserted into <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>, the normal property that controls the creation of <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> objects (the <ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> property) is no longer checked and has no effect.</source>
          <target state="translated">Wenn <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> in <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> eingefügt wird, wird die normale Eigenschaft, die die Erstellung von <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>-Objekten steuert (die <ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph>-Eigenschaft) nicht mehr überprüft und hat keine Auswirkungen.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>A more generic mechanism by which you can initialize <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> objects when created (for example, to attach custom extensions to each <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>) is the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Ein allgemeinerer Mechanismus, mit dem Sie <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>-Objekte bei der Erstellung initialisieren können (zum Beispiel um benutzerdefinierte Erweiterungen an alle <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> anzufügen), ist <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The incoming message.</source>
          <target state="translated">Die eingehende Nachricht.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The channel that received the message.</source>
          <target state="translated">Der Kanal, der die Nachricht empfangen hat.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>Called when a new message is received.</source>
          <target state="translated">Wird aufgerufen, wenn eine neue Nachricht empfangen wird.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object that is used to process the message; return <ph id="ph2">&lt;see langword="null" /&gt;</ph> to instruct WCF to create a new <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekt, das zur Verarbeitung der Nachricht genutzt wird. Geben Sie <ph id="ph2">&lt;see langword="null" /&gt;</ph> zurück, um WCF anzuweisen, ein neues <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekt zu erstellen.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A&gt;</ph> method is called when a message is received.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A&gt;</ph>-Methode wird aufgerufen, wenn eine Nachricht empfangen wird.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>Return the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object that you want to process the message, or <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Geben Sie das <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>-Objekt zurück, dass die Nachricht verarbeiten soll, oder <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>In the case of <ph id="ph1">`null`</ph>, WCF creates a new <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object for the message and then calls the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A&gt;</ph> method.</source>
          <target state="translated">Im Fall von <ph id="ph1">`null`</ph>, WCF erstellt ein neues <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> Objekt für die Nachricht und ruft dann die <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>If you return <ph id="ph1">`null`</ph>, the new <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object goes through the throttling system and increments the count of <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Wenn Sie <ph id="ph1">`null`</ph> zurückgeben, bewegt sich das neue <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>-Objekt durch das Drosselungssystem und erhöht die Anzahl von <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Das neue <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The incoming message.</source>
          <target state="translated">Die eingehende Nachricht.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The channel that received the message.</source>
          <target state="translated">Der Kanal, der die Nachricht empfangen hat.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>Called when <ph id="ph1">&lt;see langword="null" /&gt;</ph> is returned from the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /&gt;</ph> method.</source>
          <target state="translated">Wird aufgerufen, wenn <ph id="ph1">&lt;see langword="null" /&gt;</ph> von der <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /&gt;</ph>-Methode zurückgegeben wird.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A&gt;</ph> is called when <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A&gt;</ph> returns <ph id="ph3">`null`</ph> and a new <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A&gt;</ph> wird aufgerufen, wenn <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A&gt;</ph><ph id="ph3">`null`</ph> zurückgibt und ein neues <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>-Objekt erstellt wird.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>This method is called to notify you that a new <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> has been created.</source>
          <target state="translated">Diese Methode wird aufgerufen, um Sie zu benachrichtigen, dass ein neuer <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> erstellt wurde.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object that is considered idle.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekt, das als inaktiv betrachtet wird.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source>Called when all <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> activities have completed to enable implementers to prevent the <ph id="ph2">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> from being recycled.</source>
          <target state="translated">Wird aufgerufen, wenn alle <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Aktivitäten die Aktivierung der Implementierungen abgeschlossen haben, um zu verhindern, dass <ph id="ph2">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> wiederverwendet wird.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> is to close and recycle the <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object and adjust the value of <ph id="ph4">&lt;see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" /&gt;</ph>; otherwise, <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> das <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekt schließen und wiederverwenden und den Wert von <ph id="ph4">&lt;see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" /&gt;</ph> anpassen soll, andernfalls <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> is called when WCF is about to close and recycle an idle <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object so that you can inform the runtime whether to continue doing so.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> wird aufgerufen, wenn WCF schließen und wiederverwenden, ein inaktives <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> Objekt, sodass Sie der Common Language Runtime, ob auf diese Weise fortgesetzt informieren können.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source>For an example that demonstrates the sharing of instance contexts, see <bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>.</source>
          <target state="translated">Ein Beispiel, das die Freigabe von instanzkontexten veranschaulicht wird, finden Sie unter <bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /&gt;</ph> object that notifies WCF when the <ph id="ph2">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object is to be closed and recycled.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /&gt;</ph>-Objekt, das WCF benachrichtigt, wenn das <ph id="ph2">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekt geschlossen und wiederverwendet werden soll.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>.</source>
          <target state="translated">Der aktuelle <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>Called when the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /&gt;</ph> method returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> to enable implementers to provide a callback to notify WCF when the <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object is finished.</source>
          <target state="translated">Wird aufgerufen, wenn die <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /&gt;</ph>-Methode <ph id="ph2">&lt;see langword="false" /&gt;</ph> zurückgibt, damit Implementierungen einen Rückruf durchführen, um WCF zu benachrichtigen, dass das <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekt geschlossen ist.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A&gt;</ph> method is called when the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> method returns <ph id="ph3">`false`</ph> to enable you to provide WCF with a <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType&gt;</ph> object that you use to inform the runtime that the <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> has finished its work.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A&gt;</ph> Methode wird aufgerufen, wenn die <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> -Methode zurückkehrt <ph id="ph3">`false`</ph> WCF mit bereitstellen kann ein <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType&gt;</ph> Objekt, das Sie verwenden, um die Laufzeit darüber zu informieren, die <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> beendet wurde.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>When the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType&gt;</ph> object notifies the runtime that the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> has finished its work, WCF calls <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> once again.</source>
          <target state="translated">Wenn die <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType&gt;</ph> Objekt benachrichtigt die Laufzeit, die die <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> hat seine Arbeit, die WCF-Aufrufe <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> noch einmal.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>This cycle continues until <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> returns <ph id="ph2">`true`</ph> and the context is closed and recycled.</source>
          <target state="translated">Dieser Zyklus wird fortgesetzt, bis <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> den Wert <ph id="ph2">`true`</ph> zurückgibt und der Kontext geschlossen und wiederverwendet wird.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
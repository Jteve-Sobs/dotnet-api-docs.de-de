<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="74ddd1b866deac2e31e9a08c889b21d2876273b8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36415406" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <TypeSignature Language="F#" Value="type IInstanceContextProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementieren Sie dies, um die Erstellung oder Auswahl eines <see cref="T:System.ServiceModel.InstanceContext" />-Objekts mitzubestimmen, insbesondere, um freigegebene Sitzungen zu aktivieren.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie die <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider>-Schnittstelle, um dem System das entsprechende <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType>-Objekt bereitzustellen. In der Regel wird diese Schnittstelle implementiert, um freigegebene Sitzungen zu unterstützen, Dienstinstanzpooling zu aktivieren, die Lebensdauer von Dienstinstanzen zu steuern oder Clients Kontexte in Gruppen zuzuordnen.  
  
 Um zum Beispiel die Freigabe zu implementieren, fügen Sie einen benutzerdefinierten <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> ein, um zu entscheiden, welche Sitzung oder welcher Aufruf eines Clients welchem <xref:System.ServiceModel.InstanceContext>-Objekt zugeordnet wird. Ein Beispiel, das die Freigabe von instanzkontexten veranschaulicht wird, finden Sie unter [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).  
  
> [!NOTE]
>  Wenn ein <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> in Windows Communication Foundation (WCF), die normale Eigenschaft, die die Erstellung von steuert eingefügt wird <xref:System.ServiceModel.InstanceContext> Objekte (die <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> Eigenschaft) nicht mehr überprüft und hat keine Auswirkungen.  
  
 Ein allgemeinerer Mechanismus, mit dem Sie <xref:System.ServiceModel.InstanceContext>-Objekte bei der Erstellung initialisieren können (zum Beispiel um benutzerdefinierte Erweiterungen an alle <xref:System.ServiceModel.InstanceContext> anzufügen), ist <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member GetExistingInstanceContext : System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; System.ServiceModel.InstanceContext" Usage="iInstanceContextProvider.GetExistingInstanceContext (message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message">Die eingehende Nachricht.</param>
        <param name="channel">Der Kanal, der die Nachricht empfangen hat.</param>
        <summary>Wird aufgerufen, wenn eine neue Nachricht empfangen wird.</summary>
        <returns>Das <see cref="T:System.ServiceModel.InstanceContext" />-Objekt, das zur Verarbeitung der Nachricht genutzt wird. Geben Sie <see langword="null" /> zurück, um WCF anzuweisen, ein neues <see cref="T:System.ServiceModel.InstanceContext" />-Objekt zu erstellen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A>-Methode wird aufgerufen, wenn eine Nachricht empfangen wird. Geben Sie das <xref:System.ServiceModel.InstanceContext>-Objekt zurück, dass die Nachricht verarbeiten soll, oder `null`. Im Fall von `null`, WCF erstellt ein neues <xref:System.ServiceModel.InstanceContext> Objekt für die Nachricht und ruft dann die <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> Methode.  
  
 Wenn Sie `null` zurückgeben, bewegt sich das neue <xref:System.ServiceModel.InstanceContext>-Objekt durch das Drosselungssystem und erhöht die Anzahl von <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member InitializeInstanceContext : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; unit" Usage="iInstanceContextProvider.InitializeInstanceContext (instanceContext, message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Das neue <see cref="T:System.ServiceModel.InstanceContext" />-Objekt.</param>
        <param name="message">Die eingehende Nachricht.</param>
        <param name="channel">Der Kanal, der die Nachricht empfangen hat.</param>
        <summary>Wird aufgerufen, wenn <see langword="null" /> von der <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />-Methode zurückgegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> wird aufgerufen, wenn <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A>`null` zurückgibt und ein neues <xref:System.ServiceModel.InstanceContext>-Objekt erstellt wird. Diese Methode wird aufgerufen, um Sie zu benachrichtigen, dass ein neuer <xref:System.ServiceModel.InstanceContext> erstellt wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member IsIdle : System.ServiceModel.InstanceContext -&gt; bool" Usage="iInstanceContextProvider.IsIdle instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Das <see cref="T:System.ServiceModel.InstanceContext" />-Objekt, das als inaktiv betrachtet wird.</param>
        <summary>Wird aufgerufen, wenn alle <see cref="T:System.ServiceModel.InstanceContext" />-Aktivitäten die Aktivierung der Implementierungen abgeschlossen haben, um zu verhindern, dass <see cref="T:System.ServiceModel.InstanceContext" /> wiederverwendet wird.</summary>
        <returns>
          <see langword="true" />, wenn Windows Communication Foundation (WCF) das <see cref="T:System.ServiceModel.InstanceContext" />-Objekt schließen und wiederverwenden sowie den Wert von <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" /> anpassen soll; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> wird aufgerufen, wenn WCF schließen und wiederverwenden, ein inaktives <xref:System.ServiceModel.InstanceContext> Objekt, sodass Sie der Common Language Runtime, ob auf diese Weise fortgesetzt informieren können.  
  
 Ein Beispiel, das die Freigabe von instanzkontexten veranschaulicht wird, finden Sie unter [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member NotifyIdle : System.ServiceModel.Dispatcher.InstanceContextIdleCallback * System.ServiceModel.InstanceContext -&gt; unit" Usage="iInstanceContextProvider.NotifyIdle (callback, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback">Das <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />-Objekt, das WCF benachrichtigt, wenn das <see cref="T:System.ServiceModel.InstanceContext" />-Objekt geschlossen und wiederverwendet werden soll.</param>
        <param name="instanceContext">Der aktuelle <see cref="T:System.ServiceModel.InstanceContext" />.</param>
        <summary>Wird aufgerufen, wenn die <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />-Methode <see langword="false" /> zurückgibt, damit Implementierungen einen Rückruf durchführen, um WCF zu benachrichtigen, dass das <see cref="T:System.ServiceModel.InstanceContext" />-Objekt geschlossen ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> Methode wird aufgerufen, wenn die <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> -Methode zurückkehrt `false` WCF mit bereitstellen kann ein <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> Objekt, das Sie verwenden, um die Laufzeit darüber zu informieren, die <xref:System.ServiceModel.InstanceContext> beendet wurde. Wenn die <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> Objekt benachrichtigt die Laufzeit, die die <xref:System.ServiceModel.InstanceContext> hat seine Arbeit, die WCF-Aufrufe <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> noch einmal. Dieser Zyklus wird fortgesetzt, bis <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> den Wert `true` zurückgibt und der Kontext geschlossen und wiederverwendet wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
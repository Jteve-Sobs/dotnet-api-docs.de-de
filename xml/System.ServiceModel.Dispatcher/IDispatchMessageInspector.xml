<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDispatchMessageInspector.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b993105bcecb3322ed5684bf4865f5440f8cc008.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b993105bcecb3322ed5684bf4865f5440f8cc008</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</source>
          <target state="translated">Definiert die Methoden, die eine benutzerdefinierte Überprüfung oder Änderung von eingehenden und ausgehenden Anwendungsnachrichten in Dienstanwendungen ermöglichen.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</source>
          <target state="translated">Implementieren Sie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>, um eingehende und ausgehende Anwendungsnachrichten vor dem Weiterleiten einer Anforderungsnachricht an einen Vorgang oder vor dem Zurückgeben einer Antwortnachricht an einen Aufrufer zu überprüfen oder zu ändern.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</source>
          <target state="translated">Es gibt eine große Anzahl von Szenarios, in denen das Abfangen von Nachrichten vor dem Aufrufen des Vorgangs erforderlich ist, für den diese bestimmt sind.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>For example, you can log incoming application messages or perform some feature based on a message header.</source>
          <target state="translated">Beispielsweise können Sie eingehende Anwendungsnachrichten protokollieren oder eine Funktion auf der Basis eines Nachrichtenheaders ausführen.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>Typically, message inspectors are inserted by a service behavior (<ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>), an endpoint behavior (<ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>), or a contract behavior (<ph id="ph3">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">In der Regel werden Nachrichteninspektoren durch ein Dienstverhalten (<ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>), ein Endpunktverhalten (<ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>) oder ein Vertragsverhalten (<ph id="ph3">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph>) eingefügt.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The behavior then adds the message inspector to the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">Das Verhalten fügt dann den Nachrichteninspektor der <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph>-Auflistung hinzu.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>For more information about extending the runtime using behaviors, see <bpt id="p1">[</bpt>Extending ServiceHost and the Service Model Layer<ept id="p1">](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)</ept>.</source>
          <target state="translated">Weitere Informationen zur Ausdehnung der Laufzeit mithilfe von Verhaltensweisen finden Sie unter <bpt id="p1">[</bpt>Erweitern von ServiceHost und der Dienstmodellebene<ept id="p1">](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph>-Methode aktiviert benutzerdefiniertes Verhalten, nachdem die Nachricht eingegangen ist, jedoch bevor sie an den beabsichtigten Vorgang gesendet wird.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> method enables custom behavior after the operation returns but before the reply is sent.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph>-Methode aktiviert benutzerdefiniertes Verhalten, nachdem der Vorgang zurückgegeben wurde, jedoch bevor die Antwort gesendet wird.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>-Objekte werden immer am selben Punkt während des Sendens von Nachrichten aufgerufen, unabhängig davon, ob es sich um einen unidirektionalen oder einen Anforderung/Antwort-Vorgang handelt.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The following code example shows a basic <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> that writes a string to the console when it is invoked.</source>
          <target state="translated">Im folgenden Codebeispiel wird ein grundlegender <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> veranschaulicht, der eine Zeichenfolge in der Konsole ausgibt, wenn er aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The following code example shows the implementation of an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> that adds the <ph id="ph2">`Inspector`</ph><ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">Im folgenden Codebeispiel wird die Implementierung von <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> veranschaulicht, das <ph id="ph2">`Inspector`</ph><ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> der <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph>-Auflistung hinzufügt.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The following code example shows the use of an application configuration file to load the service behavior that inserts the <ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie eine Anwendungskonfigurationsdatei verwendet wird, um das Dienstverhalten zu laden, das den <ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> einfügt.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The request message.</source>
          <target state="translated">Die Anforderungsnachricht.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The incoming channel.</source>
          <target state="translated">Der eingehende Kanal.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The current service instance.</source>
          <target state="translated">Die aktuelle Dienstinstanz.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>Called after an inbound message has been received but before the message is dispatched to the intended operation.</source>
          <target state="translated">Wird aufgerufen, nachdem eine eingehende Nachricht empfangen wurde, jedoch bevor die Nachricht an den beabsichtigten Vorgang weitergeleitet wird.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The object used to correlate state.</source>
          <target state="translated">Das Objekt, das verwendet wird, um den Zustand zu korrelieren.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>This object is passed back in the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">Dieses Objekt wird an die <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph>-Methode zurückgegeben.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</source>
          <target state="translated">Verwenden Sie die <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph>-Methode, um die eingehende Nachricht, den Clientkanal, der sie bereitgestellt hat, und die aktuelle Dienstinstanz zu prüfen oder zu ändern.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The return value can be any object that you want to use for correlation purposes; it is returned to you as the <ph id="ph1">`correlationState`</ph> parameter in the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> method.</source>
          <target state="translated">Der Rückgabewert kann jedes Objekt sein, das Sie für Korrelationszwecke verwenden möchten; es wird als <ph id="ph1">`correlationState`</ph>-Parameter in der <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph>-Methode zurückgegeben.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>You cannot use the body of the message unless you buffer the entire message and make a copy.</source>
          <target state="translated">Sie können den Text der Nachricht nicht verwenden, sofern Sie nicht die gesamte Nachricht puffern und eine Kopie davon erstellen.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the <ph id="ph1">`request`</ph> parameter.</source>
          <target state="translated">Wenn Sie so vorgehen, müssen Sie zwei Kopien der Nachricht erstellen: eine für das Überprüfen und die zweite für das Überschreiben des <ph id="ph1">`request`</ph>-Parameters.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The following code example shows a basic <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> that writes a string to the console when it is invoked.</source>
          <target state="translated">Im folgenden Codebeispiel wird ein grundlegender <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> veranschaulicht, der eine Zeichenfolge in der Konsole ausgibt, wenn er aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The following code example shows the implementation of an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> that adds the <ph id="ph2">`Inspector`</ph><ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">Im folgenden Codebeispiel wird die Implementierung von <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> veranschaulicht, das <ph id="ph2">`Inspector`</ph><ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> der <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph>-Auflistung hinzufügt.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The following code example shows the use of an application configuration file to load the service behavior that inserts the <ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie eine Anwendungskonfigurationsdatei verwendet wird, um das Dienstverhalten zu laden, das den <ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> einfügt.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The reply message.</source>
          <target state="translated">Die Antwortnachricht.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>This value is null if the operation is one way.</source>
          <target state="translated">Dieser Wert ist NULL, wenn es sich um einen unidirektionalen Vorgang handelt.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The correlation object returned from the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /&gt;</ph> method.</source>
          <target state="translated">Das von der <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /&gt;</ph>-Methode zurückgegebene Korrelationsobjekt.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Called after the operation has returned but before the reply message is sent.</source>
          <target state="translated">Wird aufgerufen, nachdem der Vorgang zurückgegeben wurde, jedoch bevor die Antwortnachricht gesendet wird.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> method to perform custom behavior prior to sending the return message.</source>
          <target state="translated">Verwenden Sie die <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph>-Methode, um benutzerdefiniertes Verhalten auszuführen, bevor die Rückgabenachricht gesendet wird.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The <ph id="ph1">`correlationState`</ph> is the object returned from the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</source>
          <target state="translated"><ph id="ph1">`correlationState`</ph> ist das von der <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph>-Methode zurückgegebene Objekt, das Sie verwenden können, um eine Korrelation zwischen eingehenden und ausgehenden Aufrufen zur Unterstützung des Verhaltens herzustellen.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows a basic <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> that writes a string to the console when it is invoked.</source>
          <target state="translated">Im folgenden Codebeispiel wird ein grundlegender <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> veranschaulicht, der eine Zeichenfolge in der Konsole ausgibt, wenn er aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows the implementation of an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> that adds the <ph id="ph2">`Inspector`</ph><ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">Im folgenden Codebeispiel wird die Implementierung von <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> veranschaulicht, das <ph id="ph2">`Inspector`</ph><ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> der <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph>-Auflistung hinzufügt.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows the use of an application configuration file to load the service behavior that inserts the <ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie eine Anwendungskonfigurationsdatei verwendet wird, um das Dienstverhalten zu laden, das den <ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> einfügt.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
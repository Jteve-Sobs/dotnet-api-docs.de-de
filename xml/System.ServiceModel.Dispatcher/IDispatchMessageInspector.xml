<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3abb0-101">Definiert die Methoden, die eine benutzerdefinierte Überprüfung oder Änderung von eingehenden und ausgehenden Anwendungsnachrichten in Dienstanwendungen ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="3abb0-101">Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abb0-102">Implementieren Sie <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>, um eingehende und ausgehende Anwendungsnachrichten vor dem Weiterleiten einer Anforderungsnachricht an einen Vorgang oder vor dem Zurückgeben einer Antwortnachricht an einen Aufrufer zu überprüfen oder zu ändern.</span><span class="sxs-lookup"><span data-stu-id="3abb0-102">Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</span></span> <span data-ttu-id="3abb0-103">Es gibt eine große Anzahl von Szenarios, in denen das Abfangen von Nachrichten vor dem Aufrufen des Vorgangs erforderlich ist, für den diese bestimmt sind.</span><span class="sxs-lookup"><span data-stu-id="3abb0-103">There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</span></span> <span data-ttu-id="3abb0-104">Beispielsweise können Sie eingehende Anwendungsnachrichten protokollieren oder eine Funktion auf der Basis eines Nachrichtenheaders ausführen.</span><span class="sxs-lookup"><span data-stu-id="3abb0-104">For example, you can log incoming application messages or perform some feature based on a message header.</span></span>  
  
 <span data-ttu-id="3abb0-105">In der Regel werden Nachrichteninspektoren durch ein Dienstverhalten (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), ein Endpunktverhalten (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) oder ein Vertragsverhalten (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>) eingefügt.</span><span class="sxs-lookup"><span data-stu-id="3abb0-105">Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span></span> <span data-ttu-id="3abb0-106">Das Verhalten fügt dann den Nachrichteninspektor der <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>-Auflistung hinzu.</span><span class="sxs-lookup"><span data-stu-id="3abb0-106">The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span> <span data-ttu-id="3abb0-107">Weitere Informationen zur Ausdehnung der Laufzeit mithilfe von Verhaltensweisen finden Sie unter [Erweitern von ServiceHost und der Dienstmodellebene](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span><span class="sxs-lookup"><span data-stu-id="3abb0-107">For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span></span>  
  
-   <span data-ttu-id="3abb0-108">Die <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>-Methode aktiviert benutzerdefiniertes Verhalten, nachdem die Nachricht eingegangen ist, jedoch bevor sie an den beabsichtigten Vorgang gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="3abb0-108">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</span></span>  
  
-   <span data-ttu-id="3abb0-109">Die <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>-Methode aktiviert benutzerdefiniertes Verhalten, nachdem der Vorgang zurückgegeben wurde, jedoch bevor die Antwort gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="3abb0-109">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3abb0-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>-Objekte werden immer am selben Punkt während des Sendens von Nachrichten aufgerufen, unabhängig davon, ob es sich um einen unidirektionalen oder einen Anforderung/Antwort-Vorgang handelt.</span><span class="sxs-lookup"><span data-stu-id="3abb0-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3abb0-111">Im folgenden Codebeispiel wird ein grundlegender <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> veranschaulicht, der eine Zeichenfolge in der Konsole ausgibt, wenn er aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="3abb0-111">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="3abb0-112">Im folgenden Codebeispiel wird die Implementierung von <xref:System.ServiceModel.Description.IServiceBehavior> veranschaulicht, das `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> der <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>-Auflistung hinzufügt.</span><span class="sxs-lookup"><span data-stu-id="3abb0-112">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="3abb0-113">Im folgenden Codebeispiel wird veranschaulicht, wie eine Anwendungskonfigurationsdatei verwendet wird, um das Dienstverhalten zu laden, das den `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> einfügt.</span><span class="sxs-lookup"><span data-stu-id="3abb0-113">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="3abb0-114">Die Anforderungsnachricht.</span><span class="sxs-lookup"><span data-stu-id="3abb0-114">The request message.</span></span></param>
        <param name="channel"><span data-ttu-id="3abb0-115">Der eingehende Kanal.</span><span class="sxs-lookup"><span data-stu-id="3abb0-115">The incoming channel.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="3abb0-116">Die aktuelle Dienstinstanz.</span><span class="sxs-lookup"><span data-stu-id="3abb0-116">The current service instance.</span></span></param>
        <summary><span data-ttu-id="3abb0-117">Wird aufgerufen, nachdem eine eingehende Nachricht empfangen wurde, jedoch bevor die Nachricht an den beabsichtigten Vorgang weitergeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="3abb0-117">Called after an inbound message has been received but before the message is dispatched to the intended operation.</span></span></summary>
        <returns><span data-ttu-id="3abb0-118">Das Objekt, das verwendet wird, um den Zustand zu korrelieren.</span><span class="sxs-lookup"><span data-stu-id="3abb0-118">The object used to correlate state.</span></span> <span data-ttu-id="3abb0-119">Dieses Objekt wird an die <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />-Methode zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="3abb0-119">This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abb0-120">Verwenden Sie die <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>-Methode, um die eingehende Nachricht, den Clientkanal, der sie bereitgestellt hat, und die aktuelle Dienstinstanz zu prüfen oder zu ändern.</span><span class="sxs-lookup"><span data-stu-id="3abb0-120">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</span></span> <span data-ttu-id="3abb0-121">Der Rückgabewert kann jedes Objekt sein, das Sie für Korrelationszwecke verwenden möchten; es wird als `correlationState`-Parameter in der <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>-Methode zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="3abb0-121">The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3abb0-122">Sie können den Text der Nachricht nicht verwenden, sofern Sie nicht die gesamte Nachricht puffern und eine Kopie davon erstellen.</span><span class="sxs-lookup"><span data-stu-id="3abb0-122">You cannot use the body of the message unless you buffer the entire message and make a copy.</span></span> <span data-ttu-id="3abb0-123">Wenn Sie so vorgehen, müssen Sie zwei Kopien der Nachricht erstellen: eine für das Überprüfen und die zweite für das Überschreiben des `request`-Parameters.</span><span class="sxs-lookup"><span data-stu-id="3abb0-123">If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3abb0-124">Im folgenden Codebeispiel wird ein grundlegender <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> veranschaulicht, der eine Zeichenfolge in der Konsole ausgibt, wenn er aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="3abb0-124">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="3abb0-125">Im folgenden Codebeispiel wird die Implementierung von <xref:System.ServiceModel.Description.IServiceBehavior> veranschaulicht, das `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> der <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>-Auflistung hinzufügt.</span><span class="sxs-lookup"><span data-stu-id="3abb0-125">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="3abb0-126">Im folgenden Codebeispiel wird veranschaulicht, wie eine Anwendungskonfigurationsdatei verwendet wird, um das Dienstverhalten zu laden, das den `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> einfügt.</span><span class="sxs-lookup"><span data-stu-id="3abb0-126">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply"><span data-ttu-id="3abb0-127">Die Antwortnachricht.</span><span class="sxs-lookup"><span data-stu-id="3abb0-127">The reply message.</span></span> <span data-ttu-id="3abb0-128">Dieser Wert ist NULL, wenn es sich um einen unidirektionalen Vorgang handelt.</span><span class="sxs-lookup"><span data-stu-id="3abb0-128">This value is null if the operation is one way.</span></span></param>
        <param name="correlationState"><span data-ttu-id="3abb0-129">Das von der <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />-Methode zurückgegebene Korrelationsobjekt.</span><span class="sxs-lookup"><span data-stu-id="3abb0-129">The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> method.</span></span></param>
        <summary><span data-ttu-id="3abb0-130">Wird aufgerufen, nachdem der Vorgang zurückgegeben wurde, jedoch bevor die Antwortnachricht gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="3abb0-130">Called after the operation has returned but before the reply message is sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abb0-131">Verwenden Sie die <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>-Methode, um benutzerdefiniertes Verhalten auszuführen, bevor die Rückgabenachricht gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="3abb0-131">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message.</span></span> <span data-ttu-id="3abb0-132">`correlationState` ist das von der <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>-Methode zurückgegebene Objekt, das Sie verwenden können, um eine Korrelation zwischen eingehenden und ausgehenden Aufrufen zur Unterstützung des Verhaltens herzustellen.</span><span class="sxs-lookup"><span data-stu-id="3abb0-132">The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3abb0-133">Im folgenden Codebeispiel wird ein grundlegender <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> veranschaulicht, der eine Zeichenfolge in der Konsole ausgibt, wenn er aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="3abb0-133">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="3abb0-134">Im folgenden Codebeispiel wird die Implementierung von <xref:System.ServiceModel.Description.IServiceBehavior> veranschaulicht, das `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> der <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>-Auflistung hinzufügt.</span><span class="sxs-lookup"><span data-stu-id="3abb0-134">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="3abb0-135">Im folgenden Codebeispiel wird veranschaulicht, wie eine Anwendungskonfigurationsdatei verwendet wird, um das Dienstverhalten zu laden, das den `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> einfügt.</span><span class="sxs-lookup"><span data-stu-id="3abb0-135">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
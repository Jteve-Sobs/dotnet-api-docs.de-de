<Type Name="ICallContextInitializer" FullName="System.ServiceModel.Dispatcher.ICallContextInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cdbaea1b71eb2e65e216dc66aff628d9c5d94143" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30515404" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICallContextInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICallContextInitializer" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ICallContextInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICallContextInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICallContextInitializer" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiert die Methoden, die die Initialisierung und Wiederverwendung von lokalem Threadspeicher mit dem Thread ermöglichen, der Benutzercode aufruft.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie die <xref:System.ServiceModel.Dispatcher.ICallContextInitializer>-Schnittstelle, und fügen Sie sie der <xref:System.ServiceModel.Dispatcher.DispatchOperation.CallContextInitializers%2A?displayProperty=nameWithType>-Eigenschaft hinzu, um den lokalen Threadspeicher für den Thread zu initialisieren und zu bereinigen, der Benutzercode aufruft. In der Regel wird dies zum Festlegen eines bestimmten Werts verwendet, z.&#160;B. beim Identitätswechsel oder Ändern von <xref:System.Globalization.CultureInfo?displayProperty=nameWithType>. Wenn Sie einen benutzerdefinierten Kontext einrichten möchten, ist dies der Erweiterungspunkt, um die statische Kontexteigenschaft zu initialisieren, die dann für Entwickler im Verlauf des Vorgangs verfügbar ist.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterInvoke">
      <MemberSignature Language="C#" Value="public void AfterInvoke (object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterInvoke(object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterInvoke (correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterInvoke(System::Object ^ correlationState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="correlationState">Das von der <see cref="M:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)" />-Methode zurückgegebene Korrelationsobjekt.</param>
        <summary>Wird implementiert zur Beteilung an der Bereinigung des Threads, der den Vorgang aufgerufen hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um alle erforderlichen Bereinigungen des Vorgangsthreads durchzuführen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeInvoke">
      <MemberSignature Language="C#" Value="public object BeforeInvoke (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.IClientChannel channel, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeInvoke(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeInvoke(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::Channels::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Die Dienstinstanz für den Vorgang.</param>
        <param name="channel">Der Clientkanal.</param>
        <param name="message">Die eingehende Nachricht.</param>
        <summary>Wird implementiert zur Beteilung an der Initialisierung des Vorgangsthreads.</summary>
        <returns>Ein Korrelationsobjekt wird als Parameter der <see cref="M:System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)" />-Methode zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie die <xref:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke%2A>-Methode, um den lokalen Threadspeicher für den Thread zu initialisieren und zu bereinigen, der Benutzercode aufruft. In der Regel wird dies zum Festlegen eines bestimmten Werts verwendet, z.&#160;B. beim Identitätswechsel oder Ändern von <xref:System.Globalization.CultureInfo?displayProperty=nameWithType>. Wenn Sie einen benutzerdefinierten Kontext einrichten möchten, ist dies der Erweiterungspunkt, um die statische Kontexteigenschaft zu initialisieren, die dann für Entwickler im Verlauf des Vorgangs verfügbar ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ec78df9bc85eae32d8fca7cb3c09ba17dbad6bea" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39945093" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <TypeSignature Language="F#" Value="type ExceptionHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Erweitern Sie die <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />-Klasse, um einen Ausnahmehandler für nicht verarbeitete Ausnahmen zu erstellen, die innerhalb der Windows Communication Foundation-Laufzeit auftreten.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Erweitern Sie die <xref:System.ServiceModel.Dispatcher.ExceptionHandler>-Klasse, und überschreiben Sie die <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>-Methode, um festzulegen, ob eine Ausnahme die Anwendung beenden soll. Erstellen Sie dann eine neue Instanz Ihrer benutzerdefinierten <xref:System.ServiceModel.Dispatcher.ExceptionHandler> -Klasse und weisen sie der statischen <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> oder <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> Eigenschaft vor dem Erstellen von WCF-Clients oder Dienste.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung der abstrakten Klasse <xref:System.ServiceModel.Dispatcher.ExceptionHandler> veranschaulicht, die die <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>-Methode überschreibt.  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie So aktivieren Sie das benutzerdefinierte `MyExceptionHandler` für nicht behandelte Ausnahmen, die in der WCF-Laufzeit auftreten.  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlwaysHandle : System.ServiceModel.Dispatcher.ExceptionHandler" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Instanz von <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> ab, die alle Ausnahmen verarbeitet.</summary>
        <value>Ein <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />-Objekt, das <see langword="true" /> für alle Ausnahmen zurückgibt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsynchronousThreadExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>get: System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aktuelle <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />-Implementierung für die Anwendungsdomäne ab, oder legt diese fest.</summary>
        <value>Weisen Sie ein benutzerdefiniertes <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> -Objekt, das nicht verarbeitete Ausnahmen, die in asynchronen Windows Communication Foundation (WCF)-Threads auftreten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Standardeinstellung die <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> Eigenschaft `null`, und nicht behandelte Ausnahmen in asynchronen WCF-Threads beenden die Anwendung.  Legen Sie diese Eigenschaft auf ein <xref:System.ServiceModel.Dispatcher.ExceptionHandler>-Objekt fest, um diese Ausnahmen zu empfangen und darauf zu reagieren.  
  
 Wenn eine nicht behandelte Ausnahme in einem asynchronen WCF-Thread auftritt und diesen Handler erreicht, ist der Zustand der Anwendungsdomäne möglicherweise gefährdet.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> sollte nicht zurückgeben `true` für diese Ausnahmen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member HandleException : Exception -&gt; bool" Usage="exceptionHandler.HandleException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Die Ausnahme, die innerhalb der WCF-Runtime (Windows Communication Foundation) aufgetreten ist und die Anwendung beenden kann.</param>
        <summary>Wenn dies in einer abgeleiteten Klassen überschrieben wird, wird <see langword="true" /> zurückgegeben, wenn die Ausnahme verarbeitet wurde, oder <see langword="false" />, wenn die Ausnahme erneut ausgelöst werden und die Anwendung beendet werden soll.</summary>
        <returns>
          <see langword="true" />, wenn die Ausnahme verarbeitet wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>-Eigenschaft gibt `true` zurück, wenn die Ausnahme verarbeitet wurde. Wenn sie `false` zurückgibt oder eine andere Ausnahme auslöst, wird die ursprüngliche Ausnahme erneut ausgelöst.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung der abstrakten Klasse <xref:System.ServiceModel.Dispatcher.ExceptionHandler> veranschaulicht, die die <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>-Methode überschreibt.  
  
  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie So aktivieren Sie das benutzerdefinierte `MyExceptionHandler` für nicht behandelte Ausnahmen, die in der WCF-Laufzeit auftreten.  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransportExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aktuelle Transport-<see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />-Implementierung für die Anwendungsdomäne ab, oder legt diese fest.</summary>
        <value>Eine benutzerdefinierte <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> -Objekt, das nicht verarbeitete Ausnahmen, die in den globalen Windows Communication Foundation (WCF)-Transporte auftreten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Standardeinstellung die <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> -Eigenschaftensatz auf den Wert der <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, verursacht die nicht verarbeitete Ausnahmen in WCF-Transporte, ignoriert werden sollen.  Legen Sie diese Eigenschaft auf eine Instanz von <xref:System.ServiceModel.Dispatcher.ExceptionHandler> fest, um diese Ausnahmen zu empfangen und darauf zu reagieren.  
  
 Wenn eine nicht behandelte Ausnahme in einen globalen WCF-Transport auftritt und diesen Handler erreicht, besteht die Möglichkeit, dass der Zustand der Anwendungsdomäne beeinträchtigt wird. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> kann zurückgeben `false` für diese Ausnahmen dazu führen, dass die Anwendung beendet wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9cae3567d8eebf69d050d2dcc962aa05df362b1e" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="78744545" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Deklariert Methoden, die ein Dienstobjekt bereitstellen oder ein Dienstobjekt für einen WCF-Dienst (Windows Communication Foundation) wiederverwenden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie die <xref:System.ServiceModel.Dispatcher.IInstanceProvider>-Schnittstelle, um die Erstellung und Wiederverwendung von Dienstobjekten zu steuern, die von einem <xref:System.ServiceModel.InstanceContext>-Objekt angefordert oder freigegeben werden.  
  
 Nachdem Sie die <xref:System.ServiceModel.Dispatcher.IInstanceProvider>-Schnittstelle implementiert haben, müssen Sie das benutzerdefinierte Instanzanbieterobjekt der <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>-Schnittstelle zuordnen, indem Sie entweder ein Endpunktverhalten (ein <xref:System.ServiceModel.Description.IEndpointBehavior>-Objekt) oder ein Vertragsverhalten (ein <xref:System.ServiceModel.Description.IContractBehavior>-Objekt) verwenden.  
  
 Wenn Sie als Einfügemechanismus ein Endpunktverhalten verwenden, können Sie auch ein <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>-Objekt implementieren, das Ihr benutzerdefiniertes Verhalten mithilfe einer Konfigurationsdatei einfügt. Wenn Sie ein Vertragsverhalten verwenden, können Sie das Verhalten vor dem Öffnen des Diensthosts programmgesteuert einfügen oder ein benutzerdefiniertes Attribut implementieren. (Ein Beispiel für den Vertragsverhaltensansatz finden Sie im Abschnitt "Beispiel".)  
  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> verfügt über zwei Methoden, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> und <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. Diese Methoden werden in der Regel implementiert, um Dienst Objekte zu erstellen, die einen nicht parameterlosen Konstruktor verwenden, oder um einen Zustand zu initialisieren oder zu löschen, der mit der Lebensdauer des-Objekts verknüpft ist. Ein Beispiel für die Funktionalität des benutzerdefinierten <xref:System.ServiceModel.Dispatcher.IInstanceProvider> ist das Dienstobjektpooling.  
  
 Normalerweise ruft der <xref:System.ServiceModel.InstanceContext> den <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> auf, wenn der <xref:System.ServiceModel.InstanceContext> erstellt wird, und ruft die <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>-Methode auf, wenn der <xref:System.ServiceModel.InstanceContext> geschlossen wird.  
  
 Es gibt zwei Möglichkeiten, zu veranlassen, dass ein <xref:System.ServiceModel.InstanceContext>-Objekt ein Dienstobjekt freigibt, bevor der <xref:System.ServiceModel.InstanceContext> geschlossen wird. Die erste Möglichkeit besteht darin, <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> auf <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> oder <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall> zu setzen. Die zweite Möglichkeit besteht darin, die <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>-Methode aufzurufen. In diesem Fall ruft der <xref:System.ServiceModel.InstanceContext> die Methode <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> auf dem Instanzanbieter des Verteilers auf. Wenn nach der Freigabe der Instanz eine neue Nachricht eingeht, erstellt WCF mithilfe der-Methode eine neue-Instanz <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> .  
  
> [!NOTE]
>  Wenn der <xref:System.ServiceModel.InstanceContextMode> des Dienstes <xref:System.ServiceModel.InstanceContextMode.Single> ist, ruft das System weder die <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>-Methode noch die <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>-Methode auf, auch wenn kein bekanntes Dienstobjekt vom Benutzer bereitgestellt wurde, es sei denn, der Benutzer ruft <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> direkt und dann <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A> auf.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt, wie <xref:System.ServiceModel.Dispatcher.IInstanceProvider> mit "Singleton"-Verhalten implementiert wird: Es wird immer die gleiche Dienstinstanz zurückgegeben, und diese wird nicht wiederverwendet.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Das folgende Codebeispiel zeigt, wie ein benutzerdefiniertes Attribut implementiert wird, das <xref:System.ServiceModel.Description.IContractBehavior> zum Einfügen des benutzerdefinierten Dienstinstanzanbieters implementiert. Es implementiert auch <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, wodurch die Verwendung an einen bestimmten Vertrag gebunden wird.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt ein Dienstobjekt zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstance (instanceContext As InstanceContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Das aktuelle <see cref="T:System.ServiceModel.InstanceContext" />-Objekt.</param>
        <summary>Gibt ein Dienstobjekt unter Berücksichtigung des angegebenen <see cref="T:System.ServiceModel.InstanceContext" />-Objekts zurück.</summary>
        <returns>Ein benutzerdefiniertes Dienstobjekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die- <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> Methode, um das exakte Dienst Objekt zu steuern, das ein WCF-Dienst empfängt, wenn er versucht, eine neue zu erstellen.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt, wie <xref:System.ServiceModel.Dispatcher.IInstanceProvider> mit "Singleton"-Verhalten implementiert wird: Es wird immer die gleiche Dienstinstanz zurückgegeben, und diese wird nicht wiederverwendet.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Das folgende Codebeispiel zeigt, wie ein benutzerdefiniertes Attribut implementiert wird, das <xref:System.ServiceModel.Description.IContractBehavior> zum Einfügen des benutzerdefinierten Dienstinstanzanbieters implementiert. Es implementiert auch <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, wodurch die Verwendung an einen bestimmten Vertrag gebunden wird.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstance (instanceContext As InstanceContext, message As Message) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Das aktuelle <see cref="T:System.ServiceModel.InstanceContext" />-Objekt.</param>
        <param name="message">Die Nachricht, die die Erstellung eines Dienstobjekts ausgelöst hat.</param>
        <summary>Gibt ein Dienstobjekt unter Berücksichtigung des angegebenen <see cref="T:System.ServiceModel.InstanceContext" />-Objekts zurück.</summary>
        <returns>Das Dienstobjekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die- <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> Methode, um das exakte Dienst Objekt zu steuern, das ein WCF-Dienst empfängt, wenn er versucht, eine neue zu erstellen.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt, wie <xref:System.ServiceModel.Dispatcher.IInstanceProvider> mit "Singleton"-Verhalten implementiert wird: Es wird immer die gleiche Dienstinstanz zurückgegeben, und diese wird nicht wiederverwendet.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Das folgende Codebeispiel zeigt, wie ein benutzerdefiniertes Attribut implementiert wird, das <xref:System.ServiceModel.Description.IContractBehavior> zum Einfügen des benutzerdefinierten Dienstinstanzanbieters implementiert. Es implementiert auch <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, wodurch die Verwendung an einen bestimmten Vertrag gebunden wird.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseInstance (instanceContext As InstanceContext, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Der Instanzkontext des Dienstes.</param>
        <param name="instance">Das Dienstobjekt, das wiederverwendet werden soll.</param>
        <summary>Wird aufgerufen, wenn ein <see cref="T:System.ServiceModel.InstanceContext" />-Objekt ein Dienstobjekt wiederverwendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die Methode <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>, um eine benutzerdefinierte Ressourcenfreigabe oder eine andere Anpassung der Wiederverwendung durchzuführen, wenn ein Dienst ein Dienstobjekt wiederverwendet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

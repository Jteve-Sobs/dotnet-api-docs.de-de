<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IInstanceProvider.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5991c605f5d41dce095e638fa08e8238060345dba.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">991c605f5d41dce095e638fa08e8238060345dba</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service.</source>
          <target state="translated">Deklariert Methoden, die ein Dienstobjekt bereitstellen oder ein Dienstobjekt für einen WCF-Dienst (Windows Communication Foundation) wiederverwenden.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> interface to control the creation and recycling of service objects when one is requested or disposed by an <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object.</source>
          <target state="translated">Implementieren Sie die <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph>-Schnittstelle, um die Erstellung und Wiederverwendung von Dienstobjekten zu steuern, die von einem <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>-Objekt angefordert oder freigegeben werden.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Once the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> interface is implemented, you must assign your custom instance provider object to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A&gt;</ph> property using either an endpoint behavior (a <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph> object) or a contract behavior (a <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> object).</source>
          <target state="translated">Nachdem Sie die <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph>-Schnittstelle implementiert haben, müssen Sie das benutzerdefinierte Instanzanbieterobjekt der <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A&gt;</ph>-Schnittstelle zuordnen, indem Sie entweder ein Endpunktverhalten (ein <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph>-Objekt) oder ein Vertragsverhalten (ein <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph>-Objekt) verwenden.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If the insertion mechanism is an endpoint behavior you can also implement a <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph> object that can insert your custom behavior using a configuration file.</source>
          <target state="translated">Wenn Sie als Einfügemechanismus ein Endpunktverhalten verwenden, können Sie auch ein <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph>-Objekt implementieren, das Ihr benutzerdefiniertes Verhalten mithilfe einer Konfigurationsdatei einfügt.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.</source>
          <target state="translated">Wenn Sie ein Vertragsverhalten verwenden, können Sie das Verhalten vor dem Öffnen des Diensthosts programmgesteuert einfügen oder ein benutzerdefiniertes Attribut implementieren.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>(For an example of the contract behavior approach, see the Example section.)</source>
          <target state="translated">(Ein Beispiel für den Vertragsverhaltensansatz finden Sie im Abschnitt "Beispiel".)</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> has two methods, <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> verfügt über zwei Methoden, <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> und <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object.</source>
          <target state="translated">Diese Methoden werden in der Regel implementiert, um Dienstobjekte mit einem nicht standardmäßigen Konstruktor zu erstellen oder um einen Zustand der Objektlebensdauer zu initialisieren oder freizugeben.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Service object pooling is one example of custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> functionality.</source>
          <target state="translated">Ein Beispiel für die Funktionalität des benutzerdefinierten <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> ist das Dienstobjektpooling.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Typically, the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> invokes the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> when the <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is first created and invokes the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method when the <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is closed.</source>
          <target state="translated">Normalerweise ruft der <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> den <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> auf, wenn der <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> erstellt wird, und ruft die <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>-Methode auf, wenn der <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> geschlossen wird.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>There are two ways to cause an <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object to release a service object before the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is closed.</source>
          <target state="translated">Es gibt zwei Möglichkeiten, zu veranlassen, dass ein <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>-Objekt ein Dienstobjekt freigibt, bevor der <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> geschlossen wird.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The first method is to set the <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.ServiceModel.ReleaseInstanceMode.AfterCall&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall&gt;</ph>.</source>
          <target state="translated">Die erste Möglichkeit besteht darin, <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A&gt;</ph> auf <ph id="ph2">&lt;xref:System.ServiceModel.ReleaseInstanceMode.AfterCall&gt;</ph> oder <ph id="ph3">&lt;xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall&gt;</ph> zu setzen.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The second method is to call the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> method.</source>
          <target state="translated">Die zweite Möglichkeit besteht darin, die <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph>-Methode aufzurufen.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If this is done, the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> calls the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method on the dispatcher's instance provider.</source>
          <target state="translated">In diesem Fall ruft der <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> die Methode <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> auf dem Instanzanbieter des Verteilers auf.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If a new message arrives after the instance has been released, <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> creates a new instance using the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> method.</source>
          <target state="translated">Wenn nach der Freigabe der Instanz eine neue Nachricht eingeht, erstellt <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> eine neue Instanz mit der <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph>-Methode.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> of the service is <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>, the system does not call the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> methods even when the user did not provide a well-known service object unless the user directly calls <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> and then calls <ph id="ph6">&lt;xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A&gt;</ph>.</source>
          <target state="translated">Wenn der <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> des Dienstes <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph> ist, ruft das System weder die <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph>-Methode noch die <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>-Methode auf, auch wenn kein bekanntes Dienstobjekt vom Benutzer bereitgestellt wurde, es sei denn, der Benutzer ruft <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> direkt und dann <ph id="ph6">&lt;xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A&gt;</ph> auf.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The following code example shows how to implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</source>
          <target state="translated">Das folgende Codebeispiel zeigt, wie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> mit "Singleton"-Verhalten implementiert wird: Es wird immer die gleiche Dienstinstanz zurückgegeben, und diese wird nicht wiederverwendet.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The following code example shows how to implement a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> to insert the custom service instance provider.</source>
          <target state="translated">Das folgende Codebeispiel zeigt, wie ein benutzerdefiniertes Attribut implementiert wird, das <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> zum Einfügen des benutzerdefinierten Dienstinstanzanbieters implementiert.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>It also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, which binds its use to a specific contract.</source>
          <target state="translated">Es implementiert auch <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, wodurch die Verwendung an einen bestimmten Vertrag gebunden wird.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Returns a service object.</source>
          <target state="translated">Gibt ein Dienstobjekt zurück.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Das aktuelle <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>Returns a service object given the specified <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Gibt ein Dienstobjekt unter Berücksichtigung des angegebenen <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekts zurück.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>A user-defined service object.</source>
          <target state="translated">Ein benutzerdefiniertes Dienstobjekt.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29&gt;</ph> method to control the exact service object that a <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> service receives when it attempts to create a new one.</source>
          <target state="translated">Verwenden Sie die Methode <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29&gt;</ph>, um das Dienstobjekt genau zu steuern, das ein <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph>-Dienst empfängt, wenn er versucht, ein neues Objekt zu erstellen.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>The following code example shows how to implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</source>
          <target state="translated">Das folgende Codebeispiel zeigt, wie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> mit "Singleton"-Verhalten implementiert wird: Es wird immer die gleiche Dienstinstanz zurückgegeben, und diese wird nicht wiederverwendet.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>The following code example shows how to implement a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> to insert the custom service instance provider.</source>
          <target state="translated">Das folgende Codebeispiel zeigt, wie ein benutzerdefiniertes Attribut implementiert wird, das <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> zum Einfügen des benutzerdefinierten Dienstinstanzanbieters implementiert.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>It also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, which binds its use to a specific contract.</source>
          <target state="translated">Es implementiert auch <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, wodurch die Verwendung an einen bestimmten Vertrag gebunden wird.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Das aktuelle <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The message that triggered the creation of a service object.</source>
          <target state="translated">Die Nachricht, die die Erstellung eines Dienstobjekts ausgelöst hat.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>Returns a service object given the specified <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Gibt ein Dienstobjekt unter Berücksichtigung des angegebenen <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekts zurück.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The service object.</source>
          <target state="translated">Das Dienstobjekt.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29&gt;</ph> method to control the exact service object that a <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> service receives when it attempts to create a new one.</source>
          <target state="translated">Verwenden Sie die Methode <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29&gt;</ph>, um das Dienstobjekt genau zu steuern, das ein <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph>-Dienst empfängt, wenn er versucht, ein neues Objekt zu erstellen.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The following code example shows how to implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</source>
          <target state="translated">Das folgende Codebeispiel zeigt, wie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> mit "Singleton"-Verhalten implementiert wird: Es wird immer die gleiche Dienstinstanz zurückgegeben, und diese wird nicht wiederverwendet.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The following code example shows how to implement a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> to insert the custom service instance provider.</source>
          <target state="translated">Das folgende Codebeispiel zeigt, wie ein benutzerdefiniertes Attribut implementiert wird, das <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> zum Einfügen des benutzerdefinierten Dienstinstanzanbieters implementiert.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>It also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, which binds its use to a specific contract.</source>
          <target state="translated">Es implementiert auch <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, wodurch die Verwendung an einen bestimmten Vertrag gebunden wird.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>The service's instance context.</source>
          <target state="translated">Der Instanzkontext des Dienstes.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>The service object to be recycled.</source>
          <target state="translated">Das Dienstobjekt, das wiederverwendet werden soll.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>Called when an <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object recycles a service object.</source>
          <target state="translated">Wird aufgerufen, wenn ein <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>-Objekt ein Dienstobjekt wiederverwendet.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method to perform some custom resource disposal or other recycling customization when a service recycles a service object.</source>
          <target state="translated">Verwenden Sie die Methode <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>, um eine benutzerdefinierte Ressourcenfreigabe oder eine andere Anpassung der Wiederverwendung durchzuführen, wenn ein Dienst ein Dienstobjekt wiederverwendet.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
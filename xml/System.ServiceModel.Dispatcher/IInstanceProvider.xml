<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d99445906f7000f567c08da21e17ff96cb11451f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37615916" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b99bc-101">Deklariert Methoden, die ein Dienstobjekt bereitstellen oder ein Dienstobjekt für einen WCF-Dienst (Windows Communication Foundation) wiederverwenden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b99bc-101">Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b99bc-102">Implementieren Sie die <xref:System.ServiceModel.Dispatcher.IInstanceProvider>-Schnittstelle, um die Erstellung und Wiederverwendung von Dienstobjekten zu steuern, die von einem <xref:System.ServiceModel.InstanceContext>-Objekt angefordert oder freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="b99bc-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface to control the creation and recycling of service objects when one is requested or disposed by an <xref:System.ServiceModel.InstanceContext> object.</span></span>  
  
 <span data-ttu-id="b99bc-103">Nachdem Sie die <xref:System.ServiceModel.Dispatcher.IInstanceProvider>-Schnittstelle implementiert haben, müssen Sie das benutzerdefinierte Instanzanbieterobjekt der <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>-Schnittstelle zuordnen, indem Sie entweder ein Endpunktverhalten (ein <xref:System.ServiceModel.Description.IEndpointBehavior>-Objekt) oder ein Vertragsverhalten (ein <xref:System.ServiceModel.Description.IContractBehavior>-Objekt) verwenden.</span><span class="sxs-lookup"><span data-stu-id="b99bc-103">Once the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface is implemented, you must assign your custom instance provider object to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> property using either an endpoint behavior (a <xref:System.ServiceModel.Description.IEndpointBehavior> object) or a contract behavior (a <xref:System.ServiceModel.Description.IContractBehavior> object).</span></span>  
  
 <span data-ttu-id="b99bc-104">Wenn Sie als Einfügemechanismus ein Endpunktverhalten verwenden, können Sie auch ein <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>-Objekt implementieren, das Ihr benutzerdefiniertes Verhalten mithilfe einer Konfigurationsdatei einfügt.</span><span class="sxs-lookup"><span data-stu-id="b99bc-104">If the insertion mechanism is an endpoint behavior you can also implement a <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> object that can insert your custom behavior using a configuration file.</span></span> <span data-ttu-id="b99bc-105">Wenn Sie ein Vertragsverhalten verwenden, können Sie das Verhalten vor dem Öffnen des Diensthosts programmgesteuert einfügen oder ein benutzerdefiniertes Attribut implementieren.</span><span class="sxs-lookup"><span data-stu-id="b99bc-105">If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.</span></span> <span data-ttu-id="b99bc-106">(Ein Beispiel für den Vertragsverhaltensansatz finden Sie im Abschnitt "Beispiel".)</span><span class="sxs-lookup"><span data-stu-id="b99bc-106">(For an example of the contract behavior approach, see the Example section.)</span></span>  
  
 <span data-ttu-id="b99bc-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider> verfügt über zwei Methoden, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> und <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span><span class="sxs-lookup"><span data-stu-id="b99bc-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider> has two methods, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> and <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span></span> <span data-ttu-id="b99bc-108">Diese Methoden werden in der Regel implementiert, um Dienstobjekte mit einem nicht standardmäßigen Konstruktor zu erstellen oder um einen Zustand der Objektlebensdauer zu initialisieren oder freizugeben.</span><span class="sxs-lookup"><span data-stu-id="b99bc-108">These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object.</span></span> <span data-ttu-id="b99bc-109">Ein Beispiel für die Funktionalität des benutzerdefinierten <xref:System.ServiceModel.Dispatcher.IInstanceProvider> ist das Dienstobjektpooling.</span><span class="sxs-lookup"><span data-stu-id="b99bc-109">Service object pooling is one example of custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> functionality.</span></span>  
  
 <span data-ttu-id="b99bc-110">Normalerweise ruft der <xref:System.ServiceModel.InstanceContext> den <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> auf, wenn der <xref:System.ServiceModel.InstanceContext> erstellt wird, und ruft die <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>-Methode auf, wenn der <xref:System.ServiceModel.InstanceContext> geschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="b99bc-110">Typically, the <xref:System.ServiceModel.InstanceContext> invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> when the <xref:System.ServiceModel.InstanceContext> is first created and invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method when the <xref:System.ServiceModel.InstanceContext> is closed.</span></span>  
  
 <span data-ttu-id="b99bc-111">Es gibt zwei Möglichkeiten, zu veranlassen, dass ein <xref:System.ServiceModel.InstanceContext>-Objekt ein Dienstobjekt freigibt, bevor der <xref:System.ServiceModel.InstanceContext> geschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="b99bc-111">There are two ways to cause an <xref:System.ServiceModel.InstanceContext> object to release a service object before the <xref:System.ServiceModel.InstanceContext> is closed.</span></span> <span data-ttu-id="b99bc-112">Die erste Möglichkeit besteht darin, <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> auf <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> oder <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall> zu setzen.</span><span class="sxs-lookup"><span data-stu-id="b99bc-112">The first method is to set the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> to <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> or <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>.</span></span> <span data-ttu-id="b99bc-113">Die zweite Möglichkeit besteht darin, die <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>-Methode aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="b99bc-113">The second method is to call the <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> method.</span></span> <span data-ttu-id="b99bc-114">In diesem Fall ruft der <xref:System.ServiceModel.InstanceContext> die Methode <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> auf dem Instanzanbieter des Verteilers auf.</span><span class="sxs-lookup"><span data-stu-id="b99bc-114">If this is done, the <xref:System.ServiceModel.InstanceContext> calls the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method on the dispatcher's instance provider.</span></span> <span data-ttu-id="b99bc-115">Wenn eine neue Nachricht eingeht, nach der Freigabe der Instanz, die WCF erstellt eine neue Instanz mit der <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="b99bc-115">If a new message arrives after the instance has been released, WCF creates a new instance using the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b99bc-116">Wenn der <xref:System.ServiceModel.InstanceContextMode> des Dienstes <xref:System.ServiceModel.InstanceContextMode.Single> ist, ruft das System weder die <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>-Methode noch die <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>-Methode auf, auch wenn kein bekanntes Dienstobjekt vom Benutzer bereitgestellt wurde, es sei denn, der Benutzer ruft <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> direkt und dann <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A> auf.</span><span class="sxs-lookup"><span data-stu-id="b99bc-116">If the <xref:System.ServiceModel.InstanceContextMode> of the service is <xref:System.ServiceModel.InstanceContextMode.Single>, the system does not call the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> or <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> methods even when the user did not provide a well-known service object unless the user directly calls <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> and then calls <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b99bc-117">Das folgende Codebeispiel zeigt, wie <xref:System.ServiceModel.Dispatcher.IInstanceProvider> mit "Singleton"-Verhalten implementiert wird: Es wird immer die gleiche Dienstinstanz zurückgegeben, und diese wird nicht wiederverwendet.</span><span class="sxs-lookup"><span data-stu-id="b99bc-117">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="b99bc-118">Das folgende Codebeispiel zeigt, wie ein benutzerdefiniertes Attribut implementiert wird, das <xref:System.ServiceModel.Description.IContractBehavior> zum Einfügen des benutzerdefinierten Dienstinstanzanbieters implementiert.</span><span class="sxs-lookup"><span data-stu-id="b99bc-118">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="b99bc-119">Es implementiert auch <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, wodurch die Verwendung an einen bestimmten Vertrag gebunden wird.</span><span class="sxs-lookup"><span data-stu-id="b99bc-119">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b99bc-120">Gibt ein Dienstobjekt zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b99bc-120">Returns a service object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">
          <span data-ttu-id="b99bc-121">Das aktuelle <see cref="T:System.ServiceModel.InstanceContext" />-Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b99bc-121">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b99bc-122">Gibt ein Dienstobjekt unter Berücksichtigung des angegebenen <see cref="T:System.ServiceModel.InstanceContext" />-Objekts zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b99bc-122">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b99bc-123">Ein benutzerdefiniertes Dienstobjekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b99bc-123">A user-defined service object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b99bc-124">Verwenden der <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> Methode, um das Objekt genau zu steuern, die ein WCF-Dienst empfängt, wenn er versucht, eine neue zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="b99bc-124">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b99bc-125">Das folgende Codebeispiel zeigt, wie <xref:System.ServiceModel.Dispatcher.IInstanceProvider> mit "Singleton"-Verhalten implementiert wird: Es wird immer die gleiche Dienstinstanz zurückgegeben, und diese wird nicht wiederverwendet.</span><span class="sxs-lookup"><span data-stu-id="b99bc-125">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="b99bc-126">Das folgende Codebeispiel zeigt, wie ein benutzerdefiniertes Attribut implementiert wird, das <xref:System.ServiceModel.Description.IContractBehavior> zum Einfügen des benutzerdefinierten Dienstinstanzanbieters implementiert.</span><span class="sxs-lookup"><span data-stu-id="b99bc-126">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="b99bc-127">Es implementiert auch <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, wodurch die Verwendung an einen bestimmten Vertrag gebunden wird.</span><span class="sxs-lookup"><span data-stu-id="b99bc-127">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">
          <span data-ttu-id="b99bc-128">Das aktuelle <see cref="T:System.ServiceModel.InstanceContext" />-Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b99bc-128">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="b99bc-129">Die Nachricht, die die Erstellung eines Dienstobjekts ausgelöst hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b99bc-129">The message that triggered the creation of a service object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b99bc-130">Gibt ein Dienstobjekt unter Berücksichtigung des angegebenen <see cref="T:System.ServiceModel.InstanceContext" />-Objekts zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b99bc-130">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b99bc-131">Das Dienstobjekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b99bc-131">The service object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b99bc-132">Verwenden der <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> Methode, um das Objekt genau zu steuern, die ein WCF-Dienst empfängt, wenn er versucht, eine neue zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="b99bc-132">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b99bc-133">Das folgende Codebeispiel zeigt, wie <xref:System.ServiceModel.Dispatcher.IInstanceProvider> mit "Singleton"-Verhalten implementiert wird: Es wird immer die gleiche Dienstinstanz zurückgegeben, und diese wird nicht wiederverwendet.</span><span class="sxs-lookup"><span data-stu-id="b99bc-133">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="b99bc-134">Das folgende Codebeispiel zeigt, wie ein benutzerdefiniertes Attribut implementiert wird, das <xref:System.ServiceModel.Description.IContractBehavior> zum Einfügen des benutzerdefinierten Dienstinstanzanbieters implementiert.</span><span class="sxs-lookup"><span data-stu-id="b99bc-134">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="b99bc-135">Es implementiert auch <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, wodurch die Verwendung an einen bestimmten Vertrag gebunden wird.</span><span class="sxs-lookup"><span data-stu-id="b99bc-135">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext">
          <span data-ttu-id="b99bc-136">Der Instanzkontext des Dienstes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b99bc-136">The service's instance context.</span>
          </span>
        </param>
        <param name="instance">
          <span data-ttu-id="b99bc-137">Das Dienstobjekt, das wiederverwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b99bc-137">The service object to be recycled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b99bc-138">Wird aufgerufen, wenn ein <see cref="T:System.ServiceModel.InstanceContext" />-Objekt ein Dienstobjekt wiederverwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b99bc-138">Called when an <see cref="T:System.ServiceModel.InstanceContext" /> object recycles a service object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b99bc-139">Verwenden Sie die Methode <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>, um eine benutzerdefinierte Ressourcenfreigabe oder eine andere Anpassung der Wiederverwendung durchzuführen, wenn ein Dienst ein Dienstobjekt wiederverwendet.</span><span class="sxs-lookup"><span data-stu-id="b99bc-139">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method to perform some custom resource disposal or other recycling customization when a service recycles a service object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="DataflowBlock" FullName="System.Threading.Tasks.Dataflow.DataflowBlock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="619c37dae0d34137464488ce19920259b14fa058" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39758897" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class DataflowBlock" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataflowBlock extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.DataflowBlock" />
  <TypeSignature Language="VB.NET" Value="Public Module DataflowBlock" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataflowBlock abstract sealed" />
  <TypeSignature Language="F#" Value="type DataflowBlock = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e5e99-101">Stellt einen Satz mit statischen (Shared in Visual Basic) Methoden für die Arbeit mit Datenflussblöcken bereit.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e5e99-101">Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsObservable&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;TOutput&gt; AsObservable&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObservable`1&lt;!!TOutput&gt; AsObservable&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObservable(Of TOutput) (source As ISourceBlock(Of TOutput)) As IObservable(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObservable&lt;TOutput&gt; ^ AsObservable(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsObservable : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; IObservable&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-102">Gibt den Datentyp an, der in der Quelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-102">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-103">Die Quelle, die umschlossen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-103">The source to wrap.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-104">Erstellt eine neue <see cref="T:System.IObservable`1" /> Abstraktion über <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-104">Creates a new <see cref="T:System.IObservable`1" /> abstraction over the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-105">Ein <see cref="T:System.IObservable`1" />, das Beobachtern erlaubt, die Quelle zu abonnieren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-105">An <see cref="T:System.IObservable`1" /> that enables observers to be subscribed to the source.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-106">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-106">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsObserver&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static IObserver&lt;TInput&gt; AsObserver&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObserver`1&lt;!!TInput&gt; AsObserver&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObserver(Of TInput) (target As ITargetBlock(Of TInput)) As IObserver(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObserver&lt;TInput&gt; ^ AsObserver(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="static member AsObserver : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; -&gt; IObserver&lt;'Input&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObserver&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="e5e99-107">Gibt den Typ der Eingabe an, die vom Zielblock akzeptiert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-107">Specifies the type of input accepted by the target block.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="e5e99-108">Das zu umschließende Ziel</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-108">The target to wrap.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-109">Erstellt eine neue <see cref="T:System.IObserver`1" />-Abstraktion über <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-109">Creates a new <see cref="T:System.IObserver`1" /> abstraction over the  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-110">Ein Beobachter, der den Zielblock umschließt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-110">An observer that wraps the target block.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="e5e99-111">Gibt den Typ der Daten an, die in der ersten Quelle enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-111">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="e5e99-112">Gibt den Typ der Daten an, die in der zweiten Quelle enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-112">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="e5e99-113">Die erste Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-113">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="e5e99-114">Der Handler zu Ausführen von Daten aus der ersten Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-114">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="e5e99-115">Die zweite Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-115">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="e5e99-116">Der Handler zu Ausführen von Daten aus der zweiten Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-116">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-117">Überwacht zwei Datenflussquellen, wobei der angegebene Handler für eine beliebige Quelle aufgerufen wird, die Daten zuerst verfügbar macht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-117">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-118">Eine <see cref="T:System.Threading.Tasks.Task`1" />, die die asynchrone Auswahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-118">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="e5e99-119">Wenn beide Quellen vor dem Abschluss der Auswahl beendet werden, wird die resultierende Aufgabe abgebrochen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-119">If both sources are completed prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="e5e99-120">Wenn eine der Datenquellen verfügbare Daten hat und erfolgreich an die Auswahl weitergibt, wird die resultierende Aufgabe abgeschlossen, wenn der Handler abgeschlossen wird. Wenn der Handler eine Ausnahme auslöst, endet die Aufgabe im Zustand <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> und enthält den Ausnahmefehler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-120">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="e5e99-121">Andernfalls wird die Aufgabe mit dem <see cref="P:System.Threading.Tasks.Task`1.Result" /> beendet, das entweder auf 0 oder 1 festgelegt ist, um jeweils die erste oder zweite Quelle darzustellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-121">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span>
          </span>
          <span data-ttu-id="e5e99-122">Diese Methode verwendet nur ein Element aus einer der beiden Datenquellen, nie beide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-122">This method will only consume an element from one of the two data sources, never both.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-123">
            <paramref name="source1" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-123">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-124">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-124">-or-</span>
          </span>
          <span data-ttu-id="e5e99-125">
            <paramref name="action1" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-125">The  <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-126">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-126">-or-</span>
          </span>
          <span data-ttu-id="e5e99-127">
            <paramref name="source2" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-127">The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-128">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-128">-or-</span>
          </span>
          <span data-ttu-id="e5e99-129">
            <paramref name="action2" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-129">The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, dataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="e5e99-130">Gibt den Typ der Daten an, die in der ersten Quelle enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-130">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="e5e99-131">Gibt den Typ der Daten an, die in der zweiten Quelle enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-131">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="e5e99-132">Die erste Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-132">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="e5e99-133">Der Handler zu Ausführen von Daten aus der ersten Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-133">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="e5e99-134">Die zweite Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-134">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="e5e99-135">Der Handler zu Ausführen von Daten aus der zweiten Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-135">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <param name="dataflowBlockOptions">
          <span data-ttu-id="e5e99-136">Die Optionen, mit denen diese Wahl zu konfigurieren ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-136">The options with which to configure this choice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-137">Überwacht zwei Datenflussquellen, wobei der angegebene Handler für eine beliebige Quelle aufgerufen wird, die Daten zuerst verfügbar macht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-137">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-138">Eine <see cref="T:System.Threading.Tasks.Task`1" />, die die asynchrone Auswahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-138">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="e5e99-139">Wenn alle Quellen vor dem Abschließen der Auswahl abgeschlossen werden oder wenn <see cref="T:System.Threading.CancellationToken" />, das als Teil von <paramref name="dataflowBlockOptions" /> bereitgestellt wird, vor dem Abschließen der Auswahl abgebrochen wird, wird die resultierende Aufgabe abgebrochen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-139">If both sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="e5e99-140">Wenn eine der Datenquellen verfügbare Daten hat und erfolgreich an die Auswahl weitergibt, wird die resultierende Aufgabe abgeschlossen, wenn der Handler abgeschlossen wird. Wenn der Handler eine Ausnahme auslöst, endet die Aufgabe im Zustand <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> und enthält den Ausnahmefehler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-140">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="e5e99-141">Andernfalls wird die Aufgabe mit dem <see cref="P:System.Threading.Tasks.Task`1.Result" /> beendet, das entweder auf 0 oder 1 festgelegt ist, um jeweils die erste oder zweite Quelle darzustellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-141">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-142">
            <paramref name="source1" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-142">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-143">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-143">-or-</span>
          </span>
          <span data-ttu-id="e5e99-144">
            <paramref name="action1" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-144">The <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-145">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-145">-or-</span>
          </span>
          <span data-ttu-id="e5e99-146">
            <paramref name="source2" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-146">The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-147">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-147">-or-</span>
          </span>
          <span data-ttu-id="e5e99-148">
            <paramref name="action2" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-148">The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-149">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-149">-or-</span>
          </span>
          <span data-ttu-id="e5e99-150">
            <paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-150">The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2, T3) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2), source3 As ISourceBlock(Of T3), action3 As Action(Of T3)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T3&gt; * Action&lt;'T3&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, source3, action3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="e5e99-151">Gibt den Typ der Daten an, die in der ersten Quelle enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-151">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="e5e99-152">Gibt den Typ der Daten an, die in der zweiten Quelle enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-152">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <typeparam name="T3">
          <span data-ttu-id="e5e99-153">Gibt den Datentyp an, der in der dritten Quelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-153">Specifies type of data contained in the third source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="e5e99-154">Die erste Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-154">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="e5e99-155">Der Handler zu Ausführen von Daten aus der ersten Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-155">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="e5e99-156">Die zweite Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-156">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="e5e99-157">Der Handler zu Ausführen von Daten aus der zweiten Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-157">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <param name="source3">
          <span data-ttu-id="e5e99-158">Die dritte Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-158">The third source.</span>
          </span>
        </param>
        <param name="action3">
          <span data-ttu-id="e5e99-159">Die Handler zu Ausführen von Daten aus der dritten Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-159">The handler to execute on data from the third source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-160">Überwacht drei Datenflussquellen, wobei der angegebene Handler für eine beliebige Quelle aufgerufen wird, die Daten zuerst verfügbar macht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-160">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-161">Eine <see cref="T:System.Threading.Tasks.Task`1" />, die die asynchrone Auswahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-161">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="e5e99-162">Wenn alle Quellen vor dem Abschluss der Auswahl beendet werden, wird die resultierende Aufgabe abgebrochen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-162">If all sources are completed prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="e5e99-163">Wenn eine der Datenquellen verfügbare Daten hat und erfolgreich an die Auswahl weitergibt, wird die resultierende Aufgabe abgeschlossen, wenn der Handler abgeschlossen wird. Wenn der Handler eine Ausnahme auslöst, endet die Aufgabe im Zustand <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> und enthält den Ausnahmefehler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-163">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="e5e99-164">Andernfalls wird die Aufgabe mit dem <see cref="P:System.Threading.Tasks.Task`1.Result" /> beendet, das auf den 0-basierten Index der Quelle festgelegt ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-164">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span>
          </span>
          <span data-ttu-id="e5e99-165">Diese Methode verwendet nur ein Element aus einer der Datenquellen, nie mehr als eine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-165">This method will only consume an element from one of the data sources, never more than one.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-166">
            <paramref name="source1" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-166">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-167">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-167">-or-</span>
          </span>
          <span data-ttu-id="e5e99-168">
            <paramref name="action1" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-168">The <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-169">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-169">-or-</span>
          </span>
          <span data-ttu-id="e5e99-170">
            <paramref name="source2" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-170">The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-171">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-171">-or-</span>
          </span>
          <span data-ttu-id="e5e99-172">
            <paramref name="action2" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-172">The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-173">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-173">-or-</span>
          </span>
          <span data-ttu-id="e5e99-174">
            <paramref name="source3" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-174">The <paramref name="source3" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-175">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-175">-or-</span>
          </span>
          <span data-ttu-id="e5e99-176">
            <paramref name="action3" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-176">The <paramref name="action3" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T3&gt; * Action&lt;'T3&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, source3, action3, dataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="e5e99-177">Gibt den Typ der Daten an, die in der ersten Quelle enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-177">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="e5e99-178">Gibt den Typ der Daten an, die in der zweiten Quelle enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-178">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <typeparam name="T3">
          <span data-ttu-id="e5e99-179">Gibt den Datentyp an, der in der dritten Quelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-179">Specifies type of data contained in the third source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="e5e99-180">Die erste Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-180">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="e5e99-181">Der Handler zu Ausführen von Daten aus der ersten Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-181">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="e5e99-182">Die zweite Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-182">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="e5e99-183">Der Handler zu Ausführen von Daten aus der zweiten Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-183">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <param name="source3">
          <span data-ttu-id="e5e99-184">Die dritte Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-184">The third source.</span>
          </span>
        </param>
        <param name="action3">
          <span data-ttu-id="e5e99-185">Die Handler zu Ausführen von Daten aus der dritten Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-185">The handler to execute on data from the third source.</span>
          </span>
        </param>
        <param name="dataflowBlockOptions">
          <span data-ttu-id="e5e99-186">Die Optionen, mit denen diese Wahl zu konfigurieren ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-186">The options with which to configure this choice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-187">Überwacht drei Datenflussquellen, wobei der angegebene Handler für eine beliebige Quelle aufgerufen wird, die Daten zuerst verfügbar macht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-187">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-188">Eine <see cref="T:System.Threading.Tasks.Task`1" />, die die asynchrone Auswahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-188">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="e5e99-189">Wenn alle Quellen vor dem Abschließen der Auswahl abgeschlossen werden oder wenn <see cref="T:System.Threading.CancellationToken" />, das als Teil von <paramref name="dataflowBlockOptions" /> bereitgestellt wird, vor dem Abschließen der AUswahl abgebrochen wird, wird die resultierende Aufgabe abgebrochen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-189">If all sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="e5e99-190">Wenn eine der Datenquellen verfügbare Daten hat und erfolgreich an die Auswahl weitergibt, wird die resultierende Aufgabe abgeschlossen, wenn der Handler abgeschlossen wird. Wenn der Handler eine Ausnahme auslöst, endet die Aufgabe im Zustand <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> und enthält den Ausnahmefehler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-190">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="e5e99-191">Andernfalls wird die Aufgabe mit dem <see cref="P:System.Threading.Tasks.Task`1.Result" /> beendet, das auf den 0-basierten Index der Quelle festgelegt ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-191">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span>
          </span>
          <span data-ttu-id="e5e99-192">Diese Methode verwendet nur ein Element aus einer der Datenquellen, nie mehr als eine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-192">This method will only consume an element from one of the data sources, never more than one.</span>
          </span>
          <span data-ttu-id="e5e99-193">Wenn der Abbruch angefordert wird, nachdem ein Element empfangen wurde, wird die Abbruchanforderung ignoriert, und der entsprechende Handler ist zulässig.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-193">If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-194">
            <paramref name="source1" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-194">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-195">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-195">-or-</span>
          </span>
          <span data-ttu-id="e5e99-196">
            <paramref name="action1" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-196">The <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-197">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-197">-or-</span>
          </span>
          <span data-ttu-id="e5e99-198">
            <paramref name="source2" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-198">The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-199">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-199">-or-</span>
          </span>
          <span data-ttu-id="e5e99-200">
            <paramref name="action2" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-200">The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-201">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-201">-or-</span>
          </span>
          <span data-ttu-id="e5e99-202">
            <paramref name="source3" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-202">The <paramref name="source3" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-203">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-203">-or-</span>
          </span>
          <span data-ttu-id="e5e99-204">
            <paramref name="action3" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-204">The <paramref name="action3" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-205">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-205">-or-</span>
          </span>
          <span data-ttu-id="e5e99-206">
            <paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-206">The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Encapsulate&lt;TInput,TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt; Encapsulate&lt;TInput,TOutput&gt; (System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!!TInput, !!TOutput&gt; Encapsulate&lt;TInput, TOutput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Encapsulate(Of TInput, TOutput) (target As ITargetBlock(Of TInput), source As ISourceBlock(Of TOutput)) As IPropagatorBlock(Of TInput, TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput, typename TOutput&gt;&#xA; static System::Threading::Tasks::Dataflow::IPropagatorBlock&lt;TInput, TOutput&gt; ^ Encapsulate(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Encapsulate : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;'Input, 'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate (target, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="e5e99-207">Gibt den Typ der Eingabe an, die vom Ziel erwartet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-207">Specifies the type of input expected by the target.</span>
          </span>
        </typeparam>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-208">Gibt den Typ der Ausgabe an, die von der Quelle erzeugt wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-208">Specifies the type of output produced by the source.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="e5e99-209">Das zu kapselnde Ziel</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-209">The target to encapsulate.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="e5e99-210">Die zu kapselnde Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-210">The source to encapsulate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-211">Kapselt ein Ziel und eine Quelle in eine einzelne Propagierung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-211">Encapsulates a target and a source into a single propagator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-212">Die gekapselte Quelle und Ziel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-212">The encapsulated target and source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e99-213">Die <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> Methode erfordert zwei vorhandene Blöcke: ein Zielblock (eine Instanz einer Klasse, die implementiert <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) und ein Quellblock (eine Instanz einer Klasse, die implementiert <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>).</span><span class="sxs-lookup"><span data-stu-id="e5e99-213">The <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method requires two existing blocks: a target block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) and a source block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>).</span></span> <span data-ttu-id="e5e99-214"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> erstellt eine neue Instanz einer internen Klasse, die eine Verbindung herstellt der <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> Schnittstellenmember, die `target` Parameter und die <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> Schnittstellenmember, die `source` Parameter.</span><span class="sxs-lookup"><span data-stu-id="e5e99-214"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> creates a new instance of an internal class that connects the <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> interface members to the `target` parameter and the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> interface members to the `source` parameter.</span></span>  <span data-ttu-id="e5e99-215">Beide <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> und <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> abgeleitet <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>.</span><span class="sxs-lookup"><span data-stu-id="e5e99-215">Both <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> and <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> derive from <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>.</span></span> <span data-ttu-id="e5e99-216">Block-Abschluss wird explizit von Quellen an Ziele übergeben.</span><span class="sxs-lookup"><span data-stu-id="e5e99-216">Block completion is explicitly passed from sources to targets.</span></span> <span data-ttu-id="e5e99-217">Aus diesem Grund die <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> und <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> Methoden verbunden sind, an das Ziel bei der <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> Eigenschaft mit der Datenquelle verbunden ist.</span><span class="sxs-lookup"><span data-stu-id="e5e99-217">Therefore, the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> and <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> methods are connected to the target while the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> property is connected to the source.</span></span>  <span data-ttu-id="e5e99-218">Sie müssen sicherstellen, dass beim Ziel Hälfte abgeschlossen ist, die Hälfte abgeschlossen Ruft ab, auf die am besten geeignete Weise; Quelle Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="e5e99-218">You must ensure that when the target half  completes, the source half gets completed in the most appropriate manner; for example:</span></span>  
  
 `target.Completion.ContinueWith(completion => source.Complete());`  
  
 <span data-ttu-id="e5e99-219">Oder, wenn es sich bei abschlusstyps weitergegeben werden sollen, können Sie diesen höher entwickelten Code verwenden:</span><span class="sxs-lookup"><span data-stu-id="e5e99-219">Or, if you want to propagate the completion type, you can use this more sophisticated code:</span></span>  
  
```  
target.Completion.ContinueWith(completion => { if (completion.IsFaulted)    
  
((IDataflowBlock)batchBlock).Fault(completion.Exception);   
else   
batchBlock.Complete();   
});  
  
```  
  
 <span data-ttu-id="e5e99-220">Sie müssen die Nachrichtenweitergabe vom Ziel mit Quelle auch explizit angeben.</span><span class="sxs-lookup"><span data-stu-id="e5e99-220">You must also explicitly provide the message propagation from target to source.</span></span> <span data-ttu-id="e5e99-221">Der Vorteil dieser explizite Verbindung ist, dass Sie die Freiheit gibt, die alle zwischen den beiden Blöcken des gekapselten uneingeschränkte Verarbeitungsschritte erhalten.</span><span class="sxs-lookup"><span data-stu-id="e5e99-221">The benefit of this explicit connection is that it gives you the freedom to perform any unconstrained processing between the two encapsulated blocks.</span></span> <span data-ttu-id="e5e99-222">Sie können dies tun, indem Sie die erforderliche Verarbeitung in die Blöcke Delegaten (wenn die Blöcke Delegaten in Anspruch nehmen) Codierung oder durch die Einbettung eine Subnetzwerk Blöcke zwischen ihnen.</span><span class="sxs-lookup"><span data-stu-id="e5e99-222">You may do that either by encoding the necessary processing into the blocks' delegates (if the blocks take delegates), or by embedding a sub-network of blocks between them.</span></span> <span data-ttu-id="e5e99-223">Die einfachste Methode ist die Verwendung ein Blocks, das Delegaten akzeptiert; Verwenden Sie z. B. <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (falls zutreffend), oder einen benutzerdefinierten Block.</span><span class="sxs-lookup"><span data-stu-id="e5e99-223">The easier way is to use a block that takes delegates; for example, use <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (if applicable), or a custom block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-224">Gibt den Datentyp an, der in der Quelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-224">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-225">Die zu verknüpfende Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-225">The source from which to link.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="e5e99-226">Der <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, an den die Quelle verbunden werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-226">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-227">Verbindet <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-227">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-228">Ein <see cref="T:System.IDisposable" />, der nach dem Aufrufen von <see langword="Dispose" />, die Quelle vom Ziel löst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-228">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-229">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-229">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-230">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-230">-or-</span>
          </span>
          <span data-ttu-id="e5e99-231">
            <paramref name="target" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-231">The <paramref name="target" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * Predicate&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-232">Gibt den Datentyp an, der in der Quelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-232">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-233">Die zu verknüpfende Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-233">The source from which to link.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="e5e99-234">
            <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, an den die Quelle gebunden werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-234">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e5e99-235">Der Filter, den eine Meldung übergeben muss, damit er von der Quelle an das Ziel weitergegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-235">The filter a message must pass in order for it to propagate from the source to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-236">Verknüpft <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit der angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt mithilfe des angegebenen Filters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-236">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-237">Ein <see cref="T:System.IDisposable" />, der nach dem Aufrufen von <see langword="Dispose" />, die Quelle vom Ziel löst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-237">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-238">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-238">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-239">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-239">-or-</span>
          </span>
          <span data-ttu-id="e5e99-240">
            <paramref name="target" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-240">The <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e5e99-241">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-241">-or-</span>
          </span>
          <span data-ttu-id="e5e99-242">
            <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-242">The <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), linkOptions As DataflowLinkOptions, predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, System::Threading::Tasks::Dataflow::DataflowLinkOptions ^ linkOptions, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions * Predicate&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target, linkOptions, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-243">Gibt den Datentyp an, der in der Quelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-243">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-244">Die zu verknüpfende Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-244">The source from which to link.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="e5e99-245">
            <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, an den die Quelle gebunden werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-245">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span>
          </span>
        </param>
        <param name="linkOptions">
          <span data-ttu-id="e5e99-246">Einer der Enumerationswerte, der angibt, wie ein Link zwischen Datenflussblöcken konfiguriert werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-246">One of the enumeration values that specifies how to configure a link between dataflow blocks.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e5e99-247">Der Filter, den eine Meldung übergeben muss, damit er von der Quelle an das Ziel weitergegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-247">The filter a message must pass in order for it to propagate from the source to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-248">Verknüpft <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit der angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt mithilfe des angegebenen Filters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-248">Links the  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-249">Ein <see cref="T:System.IDisposable" />, der nach dem Aufrufen von <see langword="Dispose" />, die Quelle vom Ziel löst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-249">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-250">
            <paramref name="source" /> ist null (Nothing in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-250">The  <paramref name="source" /> is null (Nothing in Visual Basic).</span>
          </span>
          <span data-ttu-id="e5e99-251">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-251">-or-</span>
          </span>
          <span data-ttu-id="e5e99-252">
            <paramref name="target" /> ist null (Nothing in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-252">The  <paramref name="target" /> is null (Nothing in Visual Basic).</span>
          </span>
          <span data-ttu-id="e5e99-253">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-253">-or-</span>
          </span>
          <span data-ttu-id="e5e99-254">
            <paramref name="linkOptions" /> ist null (Nothing in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-254">The  <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</span>
          </span>
          <span data-ttu-id="e5e99-255">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-255">-or-</span>
          </span>
          <span data-ttu-id="e5e99-256">
            <paramref name="predicate" /> ist null (Nothing in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-256">The  <paramref name="predicate" /> is null (Nothing in Visual Basic).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NullTarget&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; NullTarget&lt;TInput&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; NullTarget&lt;TInput&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1" />
      <MemberSignature Language="VB.NET" Value="Public Function NullTarget(Of TInput) () As ITargetBlock(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA; static System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ NullTarget();" />
      <MemberSignature Language="F#" Value="static member NullTarget : unit -&gt; System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="e5e99-257">Der Typ der Nachrichten, die dieser Block annehmen kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-257">The type of the messages this block can accept.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="e5e99-258">Ruft ab einen Zielblock ab, der alle Meldungen synchron akzeptiert, die für ihn bereitgestellt werden, und diese dann ablegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-258">Gets a target block that synchronously accepts all messages offered to it and drops them.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-259">Ein <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die alle angebotenen Nachrichten akzeptiert und anschließend ablegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-259">A <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> that accepts and subsequently drops all offered messages.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OutputAvailableAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member OutputAvailableAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-260">Gibt den Datentyp an, der in der Quelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-260">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-261">Die zu überwachende Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-261">The source to monitor.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-262">Stellt eine <see cref="T:System.Threading.Tasks.Task`1" /> bereit, die asynchron die Quelle für verfügbare Ausgabe überwacht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-262">Provides a <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-263">Ein <see cref="T:System.Threading.Tasks.Task`1" />, das darüber informiert, ob und wann mehr Ausgaben zur Verfügung steht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-263">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span>
          </span>
          <span data-ttu-id="e5e99-264">Wenn bei Beenden der Aufgabe <see cref="P:System.Threading.Tasks.Task`1.Result" /> gleich <see langword="true" /> ist, sind in der Quelle mehr Ausgabedaten verfügbar (obwohl ein anderer Consumer der Quelle möglicherweise die Daten abruft).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-264">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span>
          </span>
          <span data-ttu-id="e5e99-265">Wenn sie <see langword="false" /> zurückgibt, ist und wird wird niemals mehr Output verfügbar sein, da die Quelle vor der Ausgabe abgeschlossen wird, bevor der Output verfügbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-265">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member OutputAvailableAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-266">Gibt den Datentyp an, der in der Quelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-266">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-267">Die zu überwachende Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-267">The source to monitor.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="e5e99-268">Das Abbruchtoken, um den asynchronen Vorgang abzubrechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-268">The cancellation token with which to cancel the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-269">Stellt ein <see cref="T:System.Threading.Tasks.Task`1" />-Objekt bereit, das asynchron die Quelle für eine verfügbare Ausgabe überwacht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-269">Provides a  <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-270">Ein <see cref="T:System.Threading.Tasks.Task`1" />, das darüber informiert, ob und wann mehr Ausgaben zur Verfügung steht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-270">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span>
          </span>
          <span data-ttu-id="e5e99-271">Wenn bei Beenden der Aufgabe <see cref="P:System.Threading.Tasks.Task`1.Result" /> gleich <see langword="true" /> ist, sind in der Quelle mehr Ausgabedaten verfügbar (obwohl ein anderer Consumer der Quelle möglicherweise die Daten abruft).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-271">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span>
          </span>
          <span data-ttu-id="e5e99-272">Wenn sie <see langword="false" /> zurückgibt, ist und wird wird niemals mehr Output verfügbar sein, da die Quelle vor der Ausgabe abgeschlossen wird, bevor der Output verfügbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-272">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Post&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static bool Post&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Post&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Post(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Post(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberSignature Language="F#" Value="static member Post : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input -&gt; bool" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Post (target, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="e5e99-273">Gibt den Typ der Daten an, die vom Zielblock akzeptiert werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-273">Specifies the type of data accepted by the target block.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="e5e99-274">Zielblock</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-274">The target block.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e5e99-275">Das Element, das dem Ziel bereitgestellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-275">The item being offered to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-276">Fügt dem <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ein Element hinzu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-276">Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-277">
            <see langword="true" />, wenn das Element vom Zielblock angenommen wurde; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-277">
              <see langword="true" /> if the item was accepted by the target block; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e99-278">Diese Methode gibt zurück, wenn der Zielblock hat entschieden, zum annehmen oder Ablehnen des Elements, aber es sei denn, die andernfalls durch die spezielle Semantik der Zielblock wird festgelegt, es wartet nicht auf das Element, das tatsächlich verarbeitet werden.</span><span class="sxs-lookup"><span data-stu-id="e5e99-278">This method will return once the target block has decided to accept or decline the item, but unless otherwise dictated by special semantics of the target block, it does not wait for the item to actually be processed.</span></span> <span data-ttu-id="e5e99-279">Z. B. <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> zurück <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> , sobald sie das bereitgestellte Element in der Eingabewarteschlange gespeichert hat).</span><span class="sxs-lookup"><span data-stu-id="e5e99-279">For example, <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> will return from <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> as soon as it has stored the posted item into its input queue).</span></span> <span data-ttu-id="e5e99-280">Aus der Perspektive der Verarbeitung des Blocks `Post` ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="e5e99-280">From the perspective of the block's processing, `Post` is asynchronous.</span></span> <span data-ttu-id="e5e99-281">Zielblöcke, Unterstützung angeboten von Nachrichten zurück, oder für die Blöcke, die weitere Verarbeitung ausführen können, in deren `Post` -Implementierung in Betracht <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>, die sofort zurück und ermöglicht das Ziel, die gesendete Nachricht verschieben und höher nutzen ihn nach dem `SendAsync` zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="e5e99-281">For target blocks that support postponing offered messages, or for blocks that may do more processing in their `Post` implementation, consider using <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>, which will return immediately and will enable the target to postpone the posted message and later consume it after `SendAsync` returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput)) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-282">Der Datentyp, der in der Datenquelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-282">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-283">Die Quelle, aus der der Wert empfangen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-283">The source from which to receive the value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-284">Empfängt synchron einen Wert aus der angegebenen Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-284">Synchronously receives a value from a specified source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-285">Der empfangene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-285">The received value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-286">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-286">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e5e99-287">Kein Element konnte von der Quelle empfangen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-287">No item could be received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-288">Der Datentyp, der in der Datenquelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-288">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-289">Die Quelle, aus der der Wert empfangen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-289">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="e5e99-290">Das Token, das verwendet wird, um den Empfangsvorgang abzubrechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-290">The token to use to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-291">Erhält synchron einen Wert aus einer angegebenen Quelle und stellt ein Token bereit, um die Operation abzubrechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-291">Synchronously receives a value from a specified source and provides a token to cancel the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-292">Der empfangene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-292">The received value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e99-293">Wenn die Quelle wurde erfolgreich ein Element, die durch diesen Vorgang empfangen wurde angeboten, wird dieses Element zurückgegeben, auch bei gleichzeitiger abbruchanforderungen.</span><span class="sxs-lookup"><span data-stu-id="e5e99-293">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-294">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-294">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e5e99-295">Kein Element konnte von der Quelle empfangen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-295">No item could be received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="e5e99-296">Der Vorgang wurde abgebrochen, bevor ein Element aus der Quelle empfangen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-296">The operation was canceled before an item was received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-297">Der Datentyp, der in der Datenquelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-297">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-298">Die Quelle, aus der der Wert empfangen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-298">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e5e99-299">Das maximale Zeitintervall, in Millisekunden, der gewartet werden muss, bis der synchrone Vorgang abgeschlossen wurde, oder auf ein Intervall, der -1 Millisekunden darstellt, um unbegrenzt zu warten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-299">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-300">Empfängt synchron einen Wert aus einer angegebenen Quelle und beachtet ein optionales Timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-300">Synchronously receives a value from a specified source, observing an optional time-out period.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-301">Der empfangene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-301">The received value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e99-302">Wenn die Quelle wurde erfolgreich ein Element, die durch diesen Vorgang empfangen wurde angeboten, wird dieses Element zurückgegeben, auch wenn ein gleichzeitiger Timeout auftritt.</span><span class="sxs-lookup"><span data-stu-id="e5e99-302">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent time-out occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e5e99-303">
            <paramref name="timeout" /> ist eine negative Zahl, aber nicht -1 Millisekunde. Ein Wert von -1 Millisekunde gibt eine Endlostimeoutperiode an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-303">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="e5e99-304">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-304">-or-</span>
          </span>
          <span data-ttu-id="e5e99-305">
            <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-305">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-306">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-306">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e5e99-307">Kein Element konnte von der Quelle empfangen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-307">No item could be received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="e5e99-308">Das angegebene Timeout ist abgelaufen, bevor ein Element von der Quelle empfangen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-308">The specified time-out expired before an item was received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan * System.Threading.CancellationToken -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-309">Der Datentyp, der in der Datenquelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-309">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-310">Die Quelle, aus der der Wert empfangen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-310">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e5e99-311">Das maximale Zeitintervall, in Millisekunden, der gewartet werden muss, bis der synchrone Vorgang abgeschlossen wurde, oder auf ein Intervall, der -1 Millisekunden darstellt, um unbegrenzt zu warten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-311">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="e5e99-312">Das Token, das verwendet wird, um den Empfangsvorgang abzubrechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-312">The token to use to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-313">Empfängt synchron einen Wert aus einer angegebenen Quelle, stellt ein Token bereit, um den Vorgang abzubrechen und beachtet ein optionales Timeoutintervall.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-313">Synchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-314">Der empfangene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-314">The received value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e99-315">Wenn die Quelle wurde erfolgreich ein Elementwert, die durch diesen Vorgang empfangen wurde angeboten, wird dieser Wert zurückgegeben, auch bei eine gleichzeitige Timeout oder Abbruch der Anforderung.</span><span class="sxs-lookup"><span data-stu-id="e5e99-315">If the source successfully offered an item value that was received by this operation, that value is returned even if a concurrent time-out or cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-316">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-316">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e5e99-317">
            <paramref name="timeout" /> ist eine negative Zahl, aber nicht -1 Millisekunde. Ein Wert von -1 Millisekunde gibt eine Endlostimeoutperiode an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-317">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="e5e99-318">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-318">-or-</span>
          </span>
          <span data-ttu-id="e5e99-319">
            <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-319">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e5e99-320">Kein Element konnte von der Quelle empfangen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-320">No item could be received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="e5e99-321">Das angegebene Timeout ist abgelaufen, bevor ein Element von der Quelle empfangen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-321">The specified time-out expired before an item was received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="e5e99-322">Der Vorgang wurde abgebrochen, bevor ein Element aus der Quelle empfangen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-322">The operation was canceled before an item was received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-323">Der Datentyp, der in der Datenquelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-323">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-324">Die Quelle, aus der der Wert empfangen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-324">The source from which to receive the value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-325">Empfängt asynchron einen Wert aus der angegebenen Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-325">Asynchronously receives a value from a specified source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-326">Eine Aufgabe, die den asynchronen Empfangsvorgang darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-326">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="e5e99-327">Wenn ein Elementwert erfolgreich aus der Quelle empfangen wird, wird die zurückgegebene Aufgabe abgeschlossen, und ihr <see cref="P:System.Threading.Tasks.Task`1.Result" /> gibt den empfangene Elementwert zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-327">When an item value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the received value.</span>
          </span>
          <span data-ttu-id="e5e99-328">Wenn ein Elementwert nicht abgerufen werden kann, weil die Quelle leer ist und abgeschlossen wurde, wird eine <see cref="T:System.InvalidOperationException" />-Ausnahme in der zurückgegebenen Aufgabe ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-328">If an item value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-329">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-329">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-330">Gibt den Datentyp an, der in der Quelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-330">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-331">Die Quelle, aus der der Wert empfangen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-331">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="e5e99-332">Das Token, das verwendet wird, um den Empfangsvorgang abzubrechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-332">The token to use to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-333">Erhält asynchron einen Wert aus einer angegebenen Quelle und stellt ein Token bereit, um die Operation abzubrechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-333">Asynchronously receives a value from a specified source and provides a token to cancel the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-334">Eine Aufgabe, die den asynchronen Empfangsvorgang darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-334">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="e5e99-335">Wenn ein Wert erfolgreich aus der Quelle empfangen wird, wird die zurückgegebene Aufgabe fertig gestellt und ihr <see cref="P:System.Threading.Tasks.Task`1.Result" /> gibt den Wert zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-335">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span>
          </span>
          <span data-ttu-id="e5e99-336">Wenn ein Wert nicht abgerufen werden kann, da ein Abbruch angefordert wurde, wird die zurückgegebene Aufgabe abgebrochen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-336">If a value cannot be retrieved because cancellation was requested, the returned task is canceled.</span>
          </span>
          <span data-ttu-id="e5e99-337">Wenn der Wert nicht abgerufen werden kann, weil die Quelle leer ist und abgeschlossen wurde, wird eine <see cref="T:System.InvalidOperationException" />-Ausnahme in der zurückgegebene Aufgabe ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-337">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-338">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-338">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-339">Der Datentyp, der in der Datenquelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-339">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-340">Die Quelle, aus der der Wert empfangen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-340">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e5e99-341">Das maximale Zeitintervall, in Millisekunden, der gewartet werden muss, bis der synchrone Vorgang abgeschlossen wurde, oder auf ein Intervall, der -1 Millisekunden darstellt, um unbegrenzt zu warten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-341">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-342">Empfängt asynchron einen Wert aus einer angegebenen Quelle und beachtet ein optionales Timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-342">Asynchronously receives a value from a specified source, observing an optional time-out period.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-343">Eine Aufgabe, die den asynchronen Empfangsvorgang darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-343">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="e5e99-344">Wenn ein Wert erfolgreich aus der Quelle empfangen wird, wird die zurückgegebene Aufgabe fertig gestellt und ihr <see cref="P:System.Threading.Tasks.Task`1.Result" /> gibt den Wert zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-344">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span>
          </span>
          <span data-ttu-id="e5e99-345">Wenn ein Wert nicht abgerufen werden kann, da das Timeout abgelaufen ist, wird die zurückgegebene Aufgabe abgebrochen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-345">If a value cannot be retrieved because the time-out expired, the returned task is canceled.</span>
          </span>
          <span data-ttu-id="e5e99-346">Wenn der Wert nicht abgerufen werden kann, weil die Quelle leer ist und abgeschlossen wurde, wird eine <see cref="T:System.InvalidOperationException" />-Ausnahme in der zurückgegebene Aufgabe ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-346">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-347">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-347">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e5e99-348">
            <paramref name="timeout" /> ist eine negative Zahl, aber nicht -1 Millisekunde. Ein Wert von -1 Millisekunde gibt eine Endlostimeoutperiode an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-348">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="e5e99-349">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-349">-or-</span>
          </span>
          <span data-ttu-id="e5e99-350">
            <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-350">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-351">Der Datentyp, der in der Datenquelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-351">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-352">Die Quelle, aus der der Wert empfangen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-352">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e5e99-353">Das maximale Zeitintervall, in Millisekunden, der gewartet werden muss, bis der synchrone Vorgang abgeschlossen wurde, oder auf ein Intervall, der -1 Millisekunden darstellt, um unbegrenzt zu warten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-353">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="e5e99-354">Das Token, das verwendet wird, um den Empfangsvorgang abzubrechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-354">The token which may be used to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-355">Empfängt asynchron einen Wert aus einer angegebenen Quelle, stellt ein Token bereit, um den Vorgang abzubrechen und beachtet ein optionales Timeoutintervall.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-355">Asynchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-356">Eine Aufgabe, die den asynchronen Empfangsvorgang darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-356">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="e5e99-357">Wenn ein Wert erfolgreich aus der Quelle empfangen wird, wird die zurückgegebene Aufgabe fertig gestellt und ihr <see cref="P:System.Threading.Tasks.Task`1.Result" /> gibt den Wert zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-357">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span>
          </span>
          <span data-ttu-id="e5e99-358">Wenn ein Wert nicht abgerufen werden kann, da das Timeout abgelaufen ist oder der Abbruch angefordert wurden, wird die zurückgegebene Aufgabe abgebrochen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-358">If a value cannot be retrieved because the time-out expired or cancellation was requested, the returned task is canceled.</span>
          </span>
          <span data-ttu-id="e5e99-359">Wenn der Wert nicht abgerufen werden kann, weil die Quelle leer und abgeschlossen wurde, wird eine <see cref="T:System.InvalidOperationException" /> Ausnahme in der zurückgegebene Aufgabe ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-359">If the value cannot be retrieved because the source is empty and completed, an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-360">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-360">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e5e99-361">
            <paramref name="timeout" /> ist eine negative Zahl, aber nicht -1 Millisekunde. Ein Wert von -1 Millisekunde gibt eine Endlostimeoutperiode an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-361">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="e5e99-362">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-362">-or-</span>
          </span>
          <span data-ttu-id="e5e99-363">
            <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-363">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SendAsync(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberSignature Language="F#" Value="static member SendAsync : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync (target, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="e5e99-364">Gibt den Typ der Daten an, die an das Ziel gesendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-364">Specifies the type of the data to post to the target.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="e5e99-365">Das Ziel, an das die Daten übermittelt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-365">The target to which to post the data.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e5e99-366">Das Element, das dem Ziel bereitgestellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-366">The item being offered to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-367">Gewährt dem Zielmeldungsblock asynchron eine Meldung an und ermöglicht einen Aufschub.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-367">Asynchronously offers a message to the target message block, allowing for postponement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-368">Ein <see cref="T:System.Threading.Tasks.Task`1" />-Element, das den asynchronen Sendevorgangs darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-368">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span>
          </span>
          <span data-ttu-id="e5e99-369">Wenn das Ziel das angebotene Element während des Aufrufs von <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" /> akzeptiert und nutzt, wird bei Rückgabe aus dem Aufruf das resultierende <see cref="T:System.Threading.Tasks.Task`1" /> abgeschlossen, und die <see cref="P:System.Threading.Tasks.Task`1.Result" />-Eigenschaft gibt <see langword="true" /> zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-369">If the target accepts and consumes the offered element during the call to <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="true" />.</span>
          </span>
          <span data-ttu-id="e5e99-370">Wenn das Ziel das angebotene Element während des Aufrufs ablehnt, wird bei Rückgabe aus dem Aufruf das resultierende <see cref="T:System.Threading.Tasks.Task`1" /> abgeschlossen, und die <see cref="P:System.Threading.Tasks.Task`1.Result" />-Eigenschaft gibt <see langword="false" /> zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-370">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e5e99-371">Wenn das Ziel das angebotene Element aufschiebt, wird das Element im Puffer gespeichert, bis es vom Ziel verwendet oder freigegeben wird. Zu diesem Punkt wird die Aufgabe ausgeführt, wobei <see cref="P:System.Threading.Tasks.Task`1.Result" /> angibt, ob die Meldung verarbeitet wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-371">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> indicating whether the message was consumed.</span>
          </span>
          <span data-ttu-id="e5e99-372">Wenn das Ziel nie versucht, die Nachricht zu verarbeiten oder herauszugeben, wird die zurückgegebene Aufgabe nie abgeschlossen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-372">If the target never attempts to consume or release the message, the returned task will never complete.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-373">
            <paramref name="target" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-373">The <paramref name="target" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member SendAsync : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync (target, item, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="e5e99-374">Gibt den Typ der Daten an, die an das Ziel gesendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-374">Specifies the type of the data to post to the target.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="e5e99-375">Das Ziel, an das die Daten übermittelt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-375">The target to which to post the data.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e5e99-376">Das Element, das dem Ziel bereitgestellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-376">The item being offered to the target.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="e5e99-377">Das Abbruchtoken, um den Abbruch des Sendevorgangs anzufordern.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-377">The cancellation token with which to request cancellation of the send operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-378">Gewährt dem Zielmeldungsblock asynchron eine Meldung an und ermöglicht einen Aufschub.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-378">Asynchronously offers a message to the target message block, allowing for postponement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-379">Ein <see cref="T:System.Threading.Tasks.Task`1" />-Element, das den asynchronen Sendevorgangs darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-379">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span>
          </span>
          <span data-ttu-id="e5e99-380">Wenn das Ziel das angebotene Element während des Aufrufs von SendAsync akzeptiert und verarbeitet, wird bei Rückgabe aus dem Aufruf das resultierende <see cref="T:System.Threading.Tasks.Task`1" /> abgeschlossen, und die <c>Result</c>-Eigenschaft gibt TRUE zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-380">If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return true.</span>
          </span>
          <span data-ttu-id="e5e99-381">Wenn das Ziel das angebotene Element während des Aufrufs ablehnt, wird bei Rückgabe aus dem Aufruf das resultierende <see cref="T:System.Threading.Tasks.Task`1" /> abgeschlossen, und die <c>Result</c>-Eigenschaft gibt FALSE zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-381">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return false.</span>
          </span>
          <span data-ttu-id="e5e99-382">Wenn das Ziel das angebotene Element aufschiebt, wird das Element im Puffer gespeichert, bis es vom Ziel verwendet oder freigegeben wird. Dann wird die Aufgabe ausgeführt, wobei <c>Result</c> angibt, ob die Meldung verarbeitet wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-382">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its <c>Result</c> indicating whether the message was consumed.</span>
          </span>
          <span data-ttu-id="e5e99-383">Wenn das Ziel nie versucht, die Nachricht zu verarbeiten oder herauszugeben, wird die zurückgegebene Aufgabe nie abgeschlossen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-383">If the target never attempts to consume or release the message, the returned task will never complete.</span>
          </span>
          <span data-ttu-id="e5e99-384">Wenn der Abbruch angefordert wird, bevor das Ziel erfolgreich die gesendeten Daten verarbeitet hat, wird die zurückgegebene Aufgabe im abgebrochenen Zustand abgeschlossen, und die Daten sind nicht mehr für das Ziel verfügbar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-384">If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e99-385">
            <paramref name="target" /> ist null (Nothing in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-385">The  <paramref name="target" /> is null (Nothing in Visual Basic).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static bool TryReceive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt; source, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReceive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!!TOutput&gt; source, [out] !!TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryReceive(Of TOutput) (source As IReceivableSourceBlock(Of TOutput), ByRef item As TOutput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryReceive(System::Threading::Tasks::Dataflow::IReceivableSourceBlock&lt;TOutput&gt; ^ source, [Runtime::InteropServices::Out] TOutput % item);" />
      <MemberSignature Language="F#" Value="static member TryReceive : System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;'Output&gt; *  -&gt; bool" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive (source, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="item" Type="TOutput" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e5e99-386">Gibt den Datentyp an, der in der Quelle enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-386">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e5e99-387">Die Quelle, aus der empfangen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-387">The source from which to receive.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e5e99-388">Das von der Quelle empfangene Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-388">The item received from the source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e99-389">Versucht, ein Element von <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> synchron zu empfangen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-389">Attempts to synchronously receive an item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e99-390">
            <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e99-390">
              <see langword="true" /> if an item could be received; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e99-391">Diese Methode wartet nicht, bis die Quelle ein Elements zu bieten hat.</span><span class="sxs-lookup"><span data-stu-id="e5e99-391">This method does not wait until the source has an item to provide.</span></span>  
  
 <span data-ttu-id="e5e99-392">Es wird zurückgegeben, und zwar unabhängig davon, ob ein Element verfügbar war.</span><span class="sxs-lookup"><span data-stu-id="e5e99-392">It will return whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
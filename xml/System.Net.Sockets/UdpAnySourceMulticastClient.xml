<Type Name="UdpAnySourceMulticastClient" FullName="System.Net.Sockets.UdpAnySourceMulticastClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dfb726312eb764c5756c7f905cb83b23a39f878f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37476606" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UdpAnySourceMulticastClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpAnySourceMulticastClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpAnySourceMulticastClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpAnySourceMulticastClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpAnySourceMulticastClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpAnySourceMulticastClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A client receiver for multicast traffic from any source, also known as Any Source Multicast (ASM) or Internet Standard Multicast (ISM).</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpAnySourceMulticastClient (System.Net.IPAddress groupAddress, int localPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress groupAddress, int32 localPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (groupAddress As IPAddress, localPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpAnySourceMulticastClient(System::Net::IPAddress ^ groupAddress, int localPort);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpAnySourceMulticastClient : System.Net.IPAddress * int -&gt; System.Net.Sockets.UdpAnySourceMulticastClient" Usage="new System.Net.Sockets.UdpAnySourceMulticastClient (groupAddress, localPort)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="groupAddress" Type="System.Net.IPAddress" />
        <Parameter Name="localPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="groupAddress">The multicast group address for this receiver to subscribe to.</param>
        <param name="localPort">The local port for this receiver to bind to.</param>
        <summary>Creates a new <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> UDP client that can subscribe to a group address and receive datagrams from any source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A> Konstruktor ordnet einen multicast-UDP-Socket eine Gruppenadresse und den Port, jedoch keine Bindung oder verwenden Sie andernfalls den Socket.  
  
 Die `groupAddress` Parameter ist möglicherweise ein IPv6 oder IPv4-Multicast Adresse.  
  
 Die `localPort` Parameter muss nicht angegeben werden, einen Port an, der kleiner als 1.024.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupAddress" /> is <see langword="null" />. reference</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="localPort" /> is less than 0 -or- <paramref name="localPort" /> is greater than 65,535.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginJoinGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginJoinGroup (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginJoinGroup(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginJoinGroup (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginJoinGroup(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginJoinGroup : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpAnySourceMulticastClient.BeginJoinGroup (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">A callback method to invoke when the operation completes.</param>
        <param name="state">Optional state information to pass to the <c>callback</c> method for this operation.</param>
        <summary>Binds the socket and begins a join operation to the multicast group to allow datagrams to be received from any group participant.</summary>
        <returns>Returns <see cref="T:System.IAsyncResult" />.  An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup%2A> Methode bindet einen multicast-UDP-Socket an einen lokalen Port und Verknüpfungen eine Multicastgruppe, damit Datagramme von einem beliebigen multicast empfangen werden können. Der lokale Port und die Multicastgruppenadresse werden angegeben, der <xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A> Konstruktor.  
  
 Die Methode angegeben, der `callback` Parameter wird aufgerufen, wenn es sich bei Abschluss des Vorgangs, der die Multicastgruppe herzustellen.  
  
 Bei Bedarf durch die Runtime die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup%2A> Methode führt auch eine richtlinienüberprüfung, um sicherzustellen, dass der Client die multicast-Gruppe zugreifen darf. Wenn der Client Access, nicht zulässig ist eine <xref:System.Net.Sockets.SocketException> ausgelöst und <xref:System.Net.Sockets.SocketError.AccessDenied>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The multicast group has already been joined or a join operation is currently in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFromGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFromGroup (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFromGroup(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFromGroup (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFromGroup(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveFromGroup : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpAnySourceMulticastClient.BeginReceiveFromGroup (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer to store the received data.</param>
        <param name="offset">The offset, in bytes, from the beginning of the <c>buffer</c> where the data should be stored.</param>
        <param name="count">The maximum number of bytes to receive and store in the <c>buffer</c>.</param>
        <param name="callback">The callback method to invoke when the operation completes.</param>
        <param name="state">Optional state information to pass to the <c>callback</c> method for this operation.</param>
        <summary>Begins the operation of receiving a packet from the joined multicast group and invokes the specified callback when a packet has arrived on the group from any sender.</summary>
        <returns>Returns <see cref="T:System.IAsyncResult" />.  An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A> Methode startet einen Vorgang ein UDP-Paket aus der verknüpften Multicastgruppe von einem irgendeinem Absender empfangen. Der lokale Port und die Multicastgruppenadresse werden angegeben, der <xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A> Konstruktor. Der Multicastclient muss auch eine Verknüpfung für die Multicastgruppe abgeschlossen haben.  
  
 Die Methode angegeben, der `callback` Parameter wird aufgerufen, wenn ein Paket empfangen wurde.  
  
 Es ist möglich, einen Socket-Fehler haben, wenn ein Receive-Vorgang synchron ein Fehler auftritt, obwohl dies selten mit UDP ist. Wenn ein Socket-Fehler auftritt, eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> is less than 0  -or-  <paramref name="offset" /> is greater than the length of the <paramref name="buffer" />.  -or-  <paramref name="count" /> is less than 0  -or-  <paramref name="offset" /> plus the count is greater than the length of the <paramref name="buffer" />.</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendTo">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendTo (byte[] buffer, int offset, int count, System.Net.IPEndPoint remoteEndPoint, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendTo(unsigned int8[] buffer, int32 offset, int32 count, class System.Net.IPEndPoint remoteEndPoint, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendTo (buffer As Byte(), offset As Integer, count As Integer, remoteEndPoint As IPEndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Net::IPEndPoint ^ remoteEndPoint, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendTo : byte[] * int * int * System.Net.IPEndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpAnySourceMulticastClient.BeginSendTo (buffer, offset, count, remoteEndPoint, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="remoteEndPoint" Type="System.Net.IPEndPoint" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer that contains the data to send.</param>
        <param name="offset">The offset, in bytes, from the beginning of the <c>buffer</c> to read the data to be sent.</param>
        <param name="count">The number of bytes to send from the <c>buffer</c>.</param>
        <param name="remoteEndPoint">The remote endpoint to which the packet is to be sent.</param>
        <param name="callback">The callback method to invoke when the operation completes.</param>
        <param name="state">Optional state information to pass to the <c>callback</c> method for this operation.</param>
        <summary>Begins the operation of sending a unicast packet to the specified destination.</summary>
        <returns>Returns <see cref="T:System.IAsyncResult" />.  An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo%2A> Methode startet einen Vorgang ein UDP-Paket für die verknüpften Multicastgruppe zu senden.  
  
 Der Client muss eine Verknüpfung für die Multicastgruppe abgeschlossen haben. Die Zieladresse, die gemäß der `remoteEndPoint` Parameter muss haben bereits ein Multicastpaket an diesen Empfänger gesendet. Einige Protokolle werden diese Informationen verwenden, flusssteuerung, Qualität der Dienststatistiken oder Wiederherstellung Nachrichten übergeben.  
  
 Die Methode angegeben, der `callback` Parameter wird aufgerufen, wenn ein Paket empfangen wurde.  
  
 Die Übertragung ist nur zulässig, wenn die Adresse, in angegeben der `remoteEndPoint` Parameter wurde bereits ein Multicastpaket an diesen Empfänger gesendet. Wenn der Client Access, nicht zulässig ist eine <xref:System.Net.Sockets.SocketException> ausgelöst und <xref:System.Net.Sockets.SocketError.AccessDenied>.  
  
 Wenn in der Zielport angegeben die `remoteEndPoint` -Parameter ist kleiner als 1.024, eine <xref:System.Net.Sockets.SocketException> ausgelöst und <xref:System.Net.Sockets.SocketError.AccessDenied>.  
  
 Es ist möglich, einen Socket-Fehler haben, wenn ein Receive-Vorgang synchron ein Fehler auftritt, obwohl dies selten mit UDP ist. Wenn ein Socket-Fehler auftritt, eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> is less than 0  -or-  <paramref name="offset" /> is greater than the length of the <paramref name="buffer" />.  -or-  <paramref name="count" /> is less than 0  -or-  <paramref name="offset" /> plus the count is greater than the length of the <paramref name="buffer" />.</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendToGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendToGroup (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendToGroup(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendToGroup (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendToGroup(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendToGroup : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpAnySourceMulticastClient.BeginSendToGroup (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer that contains the data to send.</param>
        <param name="offset">The offset, in bytes, from the beginning of the <c>buffer</c> to read the data to be sent.</param>
        <param name="count">The number of bytes to send from the <c>buffer</c>.</param>
        <param name="callback">The callback method to invoke when the operation completes.</param>
        <param name="state">Optional state information to pass to the <c>callback</c> method for this operation.</param>
        <summary>Begins the operation of sending a packet to a joined multicast group and invokes the specified callback when a packet has been sent to the group.</summary>
        <returns>Returns <see cref="T:System.IAsyncResult" />.  An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup%2A> Methode startet einen Vorgang ein UDP-Paket für die verknüpften Multicastgruppe zu senden.  
  
 Der Client muss eine Verknüpfung für die Multicastgruppe abgeschlossen haben.  
  
 Die Methode angegeben, der `callback` Parameter wird aufgerufen, wenn ein Paket empfangen wurde.  
  
 Es ist möglich, einen Socket-Fehler haben, wenn ein Receive-Vorgang synchron ein Fehler auftritt, obwohl dies selten mit UDP ist. Wenn ein Socket-Fehler auftritt, eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> is less than 0  -or-  <paramref name="offset" /> is greater than the length of the <paramref name="buffer" />.  -or-  <paramref name="count" /> is less than 0  -or-  <paramref name="offset" /> plus the count is greater than the length of the <paramref name="buffer" />.</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="BlockSource">
      <MemberSignature Language="C#" Value="public void BlockSource (System.Net.IPAddress sourceAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BlockSource(class System.Net.IPAddress sourceAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BlockSource (sourceAddress As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BlockSource(System::Net::IPAddress ^ sourceAddress);" />
      <MemberSignature Language="F#" Value="member this.BlockSource : System.Net.IPAddress -&gt; unit" Usage="udpAnySourceMulticastClient.BlockSource sourceAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceAddress" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="sourceAddress">The address of the source to block.</param>
        <summary>Blocks a source so that multicast packets originating from it are no longer received.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A> Methode sperrt, von einer angegebenen Quelladresse übermittelt werden ausgehende Multicastpakete. Der Client muss eine Verknüpfung für die Multicastgruppe abgeschlossen haben.  
  
 Die `sourceAddress` Parameter handelt es sich möglicherweise um eine IPv6- oder IPv4-Adresse, aber die `sourceAddress` Parameter muss die Adressfamilie der multicast-Gruppe, die der Client verbunden übereinstimmen.  
  
 Die Methode angegeben, der `callback` Parameter wird aufgerufen, wenn ein Paket empfangen wurde.  
  
 Bei ein Socket Fehler beim Ausführen des Vorgangs Block Quelle, eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpAnySourceMulticastClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Leaves the multicast group and releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> class and the underlying the <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose%2A> auf, wenn Sie <xref:System.Net.Sockets.UdpAnySourceMulticastClient> nicht mehr benötigen. Die Methode Dispose hinterlässt die <xref:System.Net.Sockets.UdpAnySourceMulticastClient> in einem nicht verwendbaren Zustand. Nach dem Aufruf <xref:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose%2A>, Sie müssen alle Verweise auf Freigeben der <xref:System.Net.Sockets.UdpAnySourceMulticastClient> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.Net.Sockets.UdpAnySourceMulticastClient> belegt wurde.  
  
 Rufen Sie immer <xref:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Net.Sockets.UdpAnySourceMulticastClient> freigeben. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Net.Sockets.UdpAnySourceMulticastClient>-Methode des <xref:System.Object.Finalize%2A>-Objekts aufruft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndJoinGroup">
      <MemberSignature Language="C#" Value="public void EndJoinGroup (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndJoinGroup(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndJoinGroup (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndJoinGroup(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndJoinGroup : IAsyncResult -&gt; unit" Usage="udpAnySourceMulticastClient.EndJoinGroup result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The result of the asynchronous join operation.</param>
        <summary>Completes the asynchronous join group operation to a multicast group.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup%2A> Methode schließt eine asynchrone Bindung an ein Socket und Join-Vorgang an eine Multicastgruppe.  
  
 Bei Bedarf durch die Runtime die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup%2A> Methode führt auch eine richtlinienüberprüfung, um sicherzustellen, dass der Client die multicast-Gruppe zugreifen darf. Wenn der Client Access, nicht zulässig ist eine <xref:System.Net.Sockets.SocketException> ausgelöst und <xref:System.Net.Sockets.SocketError.AccessDenied>.  
  
 Bei ein Socket Fehler beim Ausführen der Verknüpfungsvorgang für die Gruppe, ein <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFromGroup">
      <MemberSignature Language="C#" Value="public int EndReceiveFromGroup (IAsyncResult result, out System.Net.IPEndPoint source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFromGroup(class System.IAsyncResult result, [out] class System.Net.IPEndPoint&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup(System.IAsyncResult,System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFromGroup (result As IAsyncResult, ByRef source As IPEndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFromGroup(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::Net::IPEndPoint ^ % source);" />
      <MemberSignature Language="F#" Value="member this.EndReceiveFromGroup : IAsyncResult *  -&gt; int" Usage="udpAnySourceMulticastClient.EndReceiveFromGroup (result, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="source" Type="System.Net.IPEndPoint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">The result of the asynchronous receive operation.</param>
        <param name="source">The source endpoint where the packet was received from.</param>
        <summary>Completes the asynchronous operation of receiving a packet from the joined multicast group and provides the information received.</summary>
        <returns>The length, in bytes, of the message stored in the buffer parameter passed to the <see cref="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup%2A> Methode schließt einen asynchronen Vorgang zum Empfangen eines Pakets aus einer Multicastgruppe.  
  
 Wenn ein Socket-Fehler, beim Ausführen des Empfangsvorgangs vorliegt eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendTo">
      <MemberSignature Language="C#" Value="public void EndSendTo (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendTo(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendTo (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendTo(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndSendTo : IAsyncResult -&gt; unit" Usage="udpAnySourceMulticastClient.EndSendTo result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The result of the asynchronous send operation.</param>
        <summary>Completes the operation of sending a unicast packet to the specified destination.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo%2A> Methode schließt einen asynchronen Vorgang zum Senden eines Pakets an der angegebenen Zieladresse.  
  
 Wenn ein Socket-Fehler, beim Ausführen des Empfangsvorgangs vorliegt eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendToGroup">
      <MemberSignature Language="C#" Value="public void EndSendToGroup (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendToGroup(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendToGroup (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendToGroup(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndSendToGroup : IAsyncResult -&gt; unit" Usage="udpAnySourceMulticastClient.EndSendToGroup result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The result of the asynchronous send operation.</param>
        <summary>Completes the operation of sending a packet to a multicast group.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup%2A> Methode schließt einen asynchronen Vorgang zum Senden eines Pakets an eine Multicastgruppe.  
  
 Wenn ein Socket-Fehler, beim Ausführen des Empfangsvorgangs vorliegt eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastLoopback : bool with get, set" Usage="System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies whether outgoing multicast packets are delivered to the sending application.</summary>
        <value>Gibt <see cref="T:System.Boolean" />zurück.  Ein Wert, der angibt, ob ausgehende Pakete an eine Multicastgruppe an die sendende Anwendung übermittelt werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Multicast-Datenverkehr ist ein skalierbare Methode für die m: n Kommunikation über das Internet. Ein Prozess abonniert die Adresse einer Multicastgruppe. Anschließend werden alle Pakete von einem abonnierten Prozess gesendet werden, für der Multicastgruppe von jedem anderen abonniert die Multicastadresse Prozess empfangen. Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback%2A> Eigenschaft steuert, ob auf dem lokalen Computer Verarbeiten eines Multicastpakete empfängt, die von diesem Client an der multicast-Gruppe gesendet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the size, in bytes, of the receive buffer of the <see cref="T:System.Net.Sockets.Socket" /> used for multicast receive operations on this <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> instance.</summary>
        <value>Gibt <see cref="T:System.Int32" />zurück.  Die Größe des Empfangspuffers in Bytes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize%2A> Eigenschaft ruft ab oder legt die Größe in Bytes des Empfangspuffers des zugrunde liegenden <xref:System.Net.Sockets.Socket> für multicastempfangsvorgänge für diese verwendete <xref:System.Net.Sockets.UdpAnySourceMulticastClient> Instanz. Insbesondere die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize%2A> Eigenschaft steuert die Größe des Puffers durch den Stapel verwendet werden, wenn ein Paket empfangen, aber die Anwendung noch nicht aufgerufen wurde. die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A> Methode. Wenn dieser Puffer gefüllt ruft und Pakete, bevor Sie die Anwendung ruft treffen weiterhin die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A> und <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup%2A> Methoden, alte Pakete gelöscht werden. Die Anwendung werden nie die alte Pakete empfangen, und erhalten Sie stattdessen neuer Pakete beim Aufruf der <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A> Methode.  
  
 Die Standardgröße des Empfangspuffers in Windows ist 8192 Bytes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The buffer size specified is less than 0.</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the size, in bytes, of the send buffer of the <see cref="T:System.Net.Sockets.Socket" /> used for multicast send operations on this <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> instance.</summary>
        <value>Gibt <see cref="T:System.Int32" />zurück.  Die Größe des Sendepuffers in Byte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize%2A> Eigenschaft ruft ab oder legt die Größe des Sendepuffers für den zugrunde liegenden Socket, der für multicastsendevorgänge in dieser verwendet in Bytes <xref:System.Net.Sockets.UdpAnySourceMulticastClient> Instanz.  
  
 Aufrufe von der <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup%2A> oder <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo%2A> Methoden zum Aufrufen des Rückrufs abhängig vom Wert länger dauert die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize%2A> Eigenschaft, wenn der Sendepuffer voll ist. Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize%2A> Eigenschaft nur steuert, ob der Benutzer die Puffer bleibt im physischen Speicher gesperrt, bis der Sendevorgang abgeschlossen ist.  
  
 Die Standardgröße des Sendepuffers in Windows ist 8192 Bytes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The buffer size specified is less than 0.</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="UnblockSource">
      <MemberSignature Language="C#" Value="public void UnblockSource (System.Net.IPAddress sourceAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnblockSource(class System.Net.IPAddress sourceAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnblockSource (sourceAddress As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnblockSource(System::Net::IPAddress ^ sourceAddress);" />
      <MemberSignature Language="F#" Value="member this.UnblockSource : System.Net.IPAddress -&gt; unit" Usage="udpAnySourceMulticastClient.UnblockSource sourceAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceAddress" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="sourceAddress">The address of the source to unblock.</param>
        <summary>Unblocks a source that was previously blocked by a call to the <see cref="M:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(System.Net.IPAddress)" /> method so that multicast packets originating from it can be received.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource%2A> Methode hebt die Blockierung von multicast-Pakete, die von einer Adresse für die angegebene Quelle stammen, sodass sie empfangen werden können. Die Adresse der angegebenen Quelle muss zuvor gesperrt wurden durch einen Aufruf der <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A> Methode.  
  
 Der Client muss eine Verknüpfung für die Multicastgruppe abgeschlossen haben.  
  
 Die `sourceAddress` Parameter ist möglicherweise ein IPv6 oder IPv4-Multicast Adresse.  
  
 Wenn die angegebene Quelle bei Adresse der `sourceAddress` Parameter wurde nicht zuvor durch einen Aufruf blockiert die <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A> -Methode, eine <xref:System.Net.Sockets.SocketException> ausgelöst und <xref:System.Net.Sockets.SocketError.AddressNotAvailable>.  
  
 Bei ein Socket Fehler beim Ausführen des Vorgangs Unblock Quelle, eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
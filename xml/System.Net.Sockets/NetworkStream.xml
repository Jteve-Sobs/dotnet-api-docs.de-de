<Type Name="NetworkStream" FullName="System.Net.Sockets.NetworkStream">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a8475f9bda059d7c3cbac04976aaa1d3b3e13579" /><Meta Name="ms.sourcegitcommit" Value="6845874ed1101d071f7fab3f359117b4718bf105" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/01/2019" /><Meta Name="ms.locfileid" Value="68710874" /></Metadata><TypeSignature Language="C#" Value="public class NetworkStream : System.IO.Stream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NetworkStream extends System.IO.Stream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.NetworkStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NetworkStream&#xA;Inherits Stream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NetworkStream : System::IO::Stream" />
  <TypeSignature Language="F#" Value="type NetworkStream = class&#xA;    inherit Stream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Docs>
    <summary>Stellt den zugrunde liegenden Datenstrom für den Netzwerkzugriff bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.NetworkStream> -Klasse stellt Methoden zum Senden und empfangen von <xref:System.Net.Sockets.SocketType.Stream> Daten über Sockets im Blockierungs Modus bereit. Weitere Informationen zu Blockierungen und nicht blockierenden <xref:System.Net.Sockets.Socket>s finden [Sie unter Verwenden eines asynchronen Client Sockets](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md). Sie können die <xref:System.Net.Sockets.NetworkStream> -Klasse sowohl für synchrone als auch für asynchrone Datenübertragungen verwenden. Weitere Informationen zur synchronen und asynchronen Kommunikation finden Sie unter [Sockets](~/docs/framework/network-programming/sockets.md).  
  
 Um einen <xref:System.Net.Sockets.NetworkStream>zu erstellen, müssen Sie eine verbundene <xref:System.Net.Sockets.Socket>bereitstellen. Sie können auch angeben, <xref:System.IO.FileAccess> welche Berechtigung <xref:System.Net.Sockets.NetworkStream> der über die angegebene <xref:System.Net.Sockets.Socket>hat. Standardmäßig wird beim Schließen <xref:System.Net.Sockets.NetworkStream> von der angegebene <xref:System.Net.Sockets.Socket>nicht geschlossen. Wenn Sie über die <xref:System.Net.Sockets.NetworkStream> Berechtigung zum Schließen des bereitgestellten <xref:System.Net.Sockets.Socket>verfügen möchten, müssen Sie `true` für den Wert des `ownsSocket` Parameters angeben.  
  
 Verwenden Sie <xref:System.Net.Sockets.NetworkStream.Write%2A> die <xref:System.Net.Sockets.NetworkStream.Read%2A> Methoden und für einfache synchrone blockierende e/As mit einem einzelnen Thread. Wenn Sie Ihre e/a-Vorgänge mit separaten Threads verarbeiten möchten, sollten Sie <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> die <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> -Methode und die <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> - <xref:System.Net.Sockets.NetworkStream.EndRead%2A> Methode oder die-Methode und die-Methode für die Kommunikation verwenden  
  
 Der <xref:System.Net.Sockets.NetworkStream> unterstützt keinen zufälligen Zugriff auf den Netzwerkdaten Strom. Der Wert <xref:System.Net.Sockets.NetworkStream.CanSeek%2A> der-Eigenschaft, der angibt, ob der Stream Suchvorgänge unterstützt `false`, ist immer <xref:System.Net.Sockets.NetworkStream.Position%2A> ; das Lesen der <xref:System.Net.Sockets.NetworkStream.Length%2A> Eigenschaft, das Lesen der <xref:System.Net.Sockets.NetworkStream.Seek%2A> Eigenschaft oder das Aufrufen der Methode löst eine <xref:System.NotSupportedException>.  
  
 Lese-und Schreibvorgänge können gleichzeitig für eine Instanz der <xref:System.Net.Sockets.NetworkStream> -Klasse ausgeführt werden, ohne dass eine Synchronisierung erforderlich ist. Solange es einen eindeutigen Thread für die Schreibvorgänge und einen eindeutigen Thread für die Lesevorgänge gibt, gibt es keine übergreifenden Störungen zwischen Lese-und Schreib Threads, und es ist keine Synchronisierung erforderlich.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Net.Sockets.NetworkStream> aus einer verbundenen <xref:System.Net.Sockets.SocketType.Stream> <xref:System.Net.Sockets.Socket> erstellt und grundlegende synchrone blockierende e/a-Vorgänge durchgeführt werden.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Net.Sockets.NetworkStream" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream socket" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
      </Parameters>
      <Docs>
        <param name="socket">Der <see cref="T:System.Net.Sockets.Socket" />, den der <see cref="T:System.Net.Sockets.NetworkStream" /> zum Senden und Empfangen von Daten verwendet.</param>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Net.Sockets.NetworkStream" />-Klasse für den angegebenen <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Net.Sockets.NetworkStream> wird mit Lese-/Schreibzugriff auf den <xref:System.Net.Sockets.Socket>angegebenen erstellt. Der <xref:System.Net.Sockets.NetworkStream> ist nicht der Besitzer der <xref:System.Net.Sockets.Socket>zugrunde liegenden, daher <xref:System.Net.Sockets.NetworkStream.Close%2A> wird durch den Aufruf der <xref:System.Net.Sockets.Socket>-Methode nicht geschlossen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Net.Sockets.NetworkStream> mit einem <xref:System.Net.Sockets.Socket>erstellt wird.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="socket" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Der <paramref name="socket" />-Parameter ist nicht verbunden.  
  
- oder - 
Die <see cref="P:System.Net.Sockets.Socket.SocketType" />-Eigenschaft des <paramref name="socket" />-Parameters ist nicht <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
- oder - 
Der <paramref name="socket" />-Parameter befindet sich in einem nicht blockierenden Zustand.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
        <related type="Article" href="~/docs/framework/network-programming/using-streams-on-the-network.md">Verwenden von Streams im Netzwerk</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, bool ownsSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, bool ownsSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, bool ownsSocket);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket * bool -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream (socket, ownsSocket)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="ownsSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="socket">Der <see cref="T:System.Net.Sockets.Socket" />, den der <see cref="T:System.Net.Sockets.NetworkStream" /> zum Senden und Empfangen von Daten verwendet.</param>
        <param name="ownsSocket">Legen Sie den Wert <see langword="true" /> fest, um anzugeben, dass der <see cref="T:System.Net.Sockets.NetworkStream" /> den Besitz des <see cref="T:System.Net.Sockets.Socket" /> übernimmt, andernfalls <see langword="false" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Sockets.NetworkStream" />-Klasse für den angegebenen <see cref="T:System.Net.Sockets.Socket" /> mit dem angegebenen Besitz von <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Net.Sockets.NetworkStream> wird mit Lese-/Schreibzugriff auf den <xref:System.Net.Sockets.Socket>angegebenen erstellt. Wenn der Wert des `ownsSocket` -para `true`Meters ist <xref:System.Net.Sockets.NetworkStream> , übernimmt den Besitz des <xref:System.Net.Sockets.Socket>zugrunde liegenden und der <xref:System.Net.Sockets.NetworkStream.Close%2A> Aufruf der-Methode schließt <xref:System.Net.Sockets.Socket>auch den zugrunde liegenden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein <xref:System.Net.Sockets.NetworkStream> mit dem <xref:System.Net.Sockets.Socket>Besitz von erstellt.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="socket" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Der <paramref name="socket" />-Parameter ist nicht verbunden.  
  
- oder - 
Der Wert der <see cref="P:System.Net.Sockets.Socket.SocketType" />-Eigenschaft des <paramref name="socket" />-Parameters ist nicht <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
- oder - 
Der <paramref name="socket" />-Parameter befindet sich in einem nicht blockierenden Zustand.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket * System.IO.FileAccess -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream (socket, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="access" Type="System.IO.FileAccess" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="socket">Der <see cref="T:System.Net.Sockets.Socket" />, den der <see cref="T:System.Net.Sockets.NetworkStream" /> zum Senden und Empfangen von Daten verwendet.</param>
        <param name="access">Eine bitweise Kombination der <see cref="T:System.IO.FileAccess" />-Werte, die den gewährten Zugriffstyp für <see cref="T:System.Net.Sockets.NetworkStream" /> über den angegebenen <see cref="T:System.Net.Sockets.Socket" /> angeben.</param>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Net.Sockets.NetworkStream" />-Klasse für den angegebenen <see cref="T:System.Net.Sockets.Socket" /> mit den angegebenen Zugriffsrechten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.NetworkStream> wird mit dem angegebenen Zugriff auf die angegebene <xref:System.Net.Sockets.Socket>erstellt. Mit diesem <xref:System.Net.Sockets.NetworkStream> Konstruktor ist der nicht der Besitzer der zugrunde <xref:System.Net.Sockets.Socket>liegenden, sodass der <xref:System.Net.Sockets.NetworkStream.Close%2A> Aufruf der-Methode den zugrunde <xref:System.Net.Sockets.Socket>liegenden nicht schließt.  
  
 Der `access` -Parameter legt <xref:System.Net.Sockets.NetworkStream.CanRead%2A> die <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> -Eigenschaft und <xref:System.Net.Sockets.NetworkStream>die-Eigenschaft von fest. Wenn Sie angeben <xref:System.IO.FileAccess.Write>, ermöglicht das <xref:System.Net.Sockets.NetworkStream> Aufrufen der <xref:System.Net.Sockets.NetworkStream.Write%2A> -Methode. Wenn Sie angeben <xref:System.IO.FileAccess.Read>, ermöglicht das <xref:System.Net.Sockets.NetworkStream> Aufrufen der <xref:System.Net.Sockets.NetworkStream.Read%2A> -Methode. Wenn Sie angeben <xref:System.IO.FileAccess.ReadWrite>, sind beide Methodenaufrufe zulässig.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein <xref:System.Net.Sockets.NetworkStream> erstellt, das die Möglichkeit zum Lesen und schreiben <xref:System.Net.Sockets.Socket>in der ermöglicht.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#1)]
 [!code-vb[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="socket" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Der <paramref name="socket" />-Parameter ist nicht verbunden.  
  
- oder - 
Die <see cref="P:System.Net.Sockets.Socket.SocketType" />-Eigenschaft des <paramref name="socket" />-Parameters ist nicht <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
- oder - 
Der <paramref name="socket" />-Parameter befindet sich in einem nicht blockierenden Zustand.</exception>
        <altmember cref="T:System.IO.FileAccess" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access, bool ownsSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, valuetype System.IO.FileAccess access, bool ownsSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, System::IO::FileAccess access, bool ownsSocket);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket * System.IO.FileAccess * bool -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream (socket, access, ownsSocket)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="access" Type="System.IO.FileAccess" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ownsSocket" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="socket">Der <see cref="T:System.Net.Sockets.Socket" />, den der <see cref="T:System.Net.Sockets.NetworkStream" /> zum Senden und Empfangen von Daten verwendet.</param>
        <param name="access">Eine bitweise Kombination der <see cref="T:System.IO.FileAccess" />-Werte, die den gewährten Zugriffstyp für <see cref="T:System.Net.Sockets.NetworkStream" /> über den bereitgestellten <see cref="T:System.Net.Sockets.Socket" /> angibt.</param>
        <param name="ownsSocket">Legen Sie den Wert <see langword="true" /> fest, um anzugeben, dass der <see cref="T:System.Net.Sockets.NetworkStream" /> den Besitz des <see cref="T:System.Net.Sockets.Socket" /> übernimmt, andernfalls <see langword="false" />.</param>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Net.Sockets.NetworkStream" />-Klasse für den angegebenen <see cref="T:System.Net.Sockets.Socket" /> mit den angegebenen Zugriffsrechten und dem angegebenen Besitz von <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Net.Sockets.NetworkStream> wird mit Lese-/Schreibzugriff auf den <xref:System.Net.Sockets.Socket>angegebenen erstellt. Wenn der Wert des `ownsSocket` -Parameters ist `true`, <xref:System.Net.Sockets.NetworkStream> übernimmt den Besitz des zugrunde <xref:System.Net.Sockets.Socket>liegenden und der Aufruf <xref:System.Net.Sockets.NetworkStream.Close%2A> der-Methode schließt auch <xref:System.Net.Sockets.Socket>den zugrunde liegenden.  
  
 Der `access` -Parameter legt <xref:System.Net.Sockets.NetworkStream.CanRead%2A> die <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> -Eigenschaft und <xref:System.Net.Sockets.NetworkStream>die-Eigenschaft von fest. Wenn Sie angeben <xref:System.IO.FileAccess.Write>, ermöglicht das <xref:System.Net.Sockets.NetworkStream> Aufrufen der <xref:System.Net.Sockets.NetworkStream.Write%2A> -Methode. Wenn Sie angeben <xref:System.IO.FileAccess.Read>, ermöglicht das <xref:System.Net.Sockets.NetworkStream> Aufrufen der <xref:System.Net.Sockets.NetworkStream.Read%2A> -Methode. Wenn Sie angeben <xref:System.IO.FileAccess.ReadWrite>, sind beide Methodenaufrufe zulässig.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein <xref:System.Net.Sockets.NetworkStream> erstellt, das die Möglichkeit zum Lesen und schreiben <xref:System.Net.Sockets.Socket>in der ermöglicht. Der Besitz von <xref:System.Net.Sockets.Socket> wird diesem <xref:System.Net.Sockets.NetworkStream> durch angeben `true` von für den `ownsSocket` -Parameter erteilt.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#1)]
 [!code-vb[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="socket" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Der <paramref name="socket" />-Parameter ist nicht verbunden.  
  
- oder - 
Die <see cref="P:System.Net.Sockets.Socket.SocketType" />-Eigenschaft des <paramref name="socket" />-Parameters ist nicht <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
- oder - 
Der <paramref name="socket" />-Parameter befindet sich in einem nicht blockierenden Zustand.</exception>
        <altmember cref="T:System.IO.FileAccess" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int size, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 size, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginRead (buffer As Byte(), offset As Integer, size As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="networkStream.BeginRead (buffer, offset, size, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">Ein Array vom Typ <see cref="T:System.Byte" />, das dem Speicherort entspricht, an dem aus dem <see cref="T:System.Net.Sockets.NetworkStream" /> gelesene Daten gespeichert werden.</param>
        <param name="offset">Die Position in <paramref name="buffer" />, an der mit dem Speichern der Daten begonnen werden soll.</param>
        <param name="size">Die Anzahl der aus dem <see cref="T:System.Net.Sockets.NetworkStream" /> zu lesenden Bytes.</param>
        <param name="callback">Der <see cref="T:System.AsyncCallback" />-Delegat, der nach Abschluss von <see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> ausgeführt wird.</param>
        <param name="state">Ein Objekt, das zusätzliche, benutzerdefinierte Daten enthält.</param>
        <summary>Beginnt einen asynchronen Lesevorgang aus dem <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <returns>Ein <see cref="T:System.IAsyncResult" />, das den asynchronen Aufruf darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> -Methode beginnt das asynchrone Lesen von Daten aus den eingehenden Netzwerkpuffern. Durch Aufrufen <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> der-Methode haben Sie die Möglichkeit, Daten in einem separaten Ausführungs Thread zu empfangen.  
  
 Sie müssen eine Rückruf Methode erstellen, die den <xref:System.AsyncCallback> -Delegaten implementiert und seinen Namen <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> an die-Methode übergibt. <xref:System.Net.Sockets.NetworkStream>Der- `state` Parameter muss mindestens den enthalten. Da Sie die empfangenen Daten innerhalb der Rückruf Methode abrufen möchten, sollten Sie eine kleine Klasse oder Struktur erstellen, die einen Lese Puffer und alle anderen nützlichen Informationen enthält. Übergeben Sie die-Struktur oder-Klassen <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> Instanz über den `state` -Parameter an die-Methode.  
  
 Die Rückruf Methode sollte die <xref:System.Net.Sockets.NetworkStream.EndRead%2A> -Methode aufruft. Wenn die Anwendung aufruft <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>, wartet das System, bis Daten empfangen werden, oder es tritt ein Fehler auf <xref:System.Net.Sockets.NetworkStream.EndRead%2A> . das System verwendet dann einen separaten Thread, um die angegebene Rückruf Methode auszuführen, und blockiert, bis <xref:System.Net.Sockets.NetworkStream> die bereitgestellten Lesevorgänge ausgeführt werden. Daten oder löst eine Ausnahme aus. Wenn der ursprüngliche Thread blockiert werden soll, nachdem Sie die <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> -Methode aufgerufen haben, verwenden Sie die <xref:System.Threading.WaitHandle.WaitOne%2A> -Methode. Rufen <xref:System.Threading.EventWaitHandle.Set%2A> Sie in der Rückruf Methode auf, wenn der ursprüngliche Thread weiter ausgeführt werden soll. Weitere Informationen zum Schreiben von Rückruf Methoden finden Sie unter Mars Hallen eines Delegaten [als Rückruf Methode](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).  
  
 Die <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> -Methode liest so viele Daten wie verfügbar, bis zur Anzahl der Bytes, die durch den `size` -Parameter angegeben werden.  
  
> [!NOTE]
>  Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException%2A> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode%2A> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der [API-Fehlercode Dokumentation von Windows Sockets, Version 2](/windows/desktop/winsock/windows-sockets-error-codes-2) .  
  
 Lese-und Schreibvorgänge können gleichzeitig für eine Instanz der <xref:System.Net.Sockets.NetworkStream> -Klasse ausgeführt werden, ohne dass eine Synchronisierung erforderlich ist. Solange es einen eindeutigen Thread für die Schreibvorgänge und einen eindeutigen Thread für die Lesevorgänge gibt, gibt es keine übergreifenden Störungen zwischen Lese-und Schreib Threads, und es ist keine Synchronisierung erforderlich.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> verwendet, um Daten asynchron aus dem Netzwerkstream zu lesen. Die `myReadCallBack` -Methode implementiert <xref:System.AsyncCallback> den-Delegaten und wird vom System <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> aufgerufen, wenn zurückgibt.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="buffer" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="offset" />-Parameter ist kleiner als 0.  
  
- oder - 
Der <paramref name="offset" />-Parameter ist größer als die Länge des <paramref name="buffer" />-Parameters.  
  
- oder - 
Die <paramref name="size" /> ist kleiner als 0.  
  
- oder - 
Der <paramref name="size" />-Parameter ist größer als die Länge von <paramref name="buffer" /> abzüglich des Werts des <paramref name="offset" />-Parameters.</exception>
        <exception cref="T:System.IO.IOException">Der zugrunde liegende <see cref="T:System.Net.Sockets.Socket" /> wird geschlossen.  
  
- oder - 
Beim Lesen aus dem Netzwerk ist ein Fehler aufgetreten.  
  
- oder - 
Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int size, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 size, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginWrite (buffer As Byte(), offset As Integer, size As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="networkStream.BeginWrite (buffer, offset, size, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">Ein Array vom Typ <see cref="T:System.Byte" />, das die Daten enthält, die in den <see cref="T:System.Net.Sockets.NetworkStream" /> geschrieben werden sollen.</param>
        <param name="offset">Die Position im <paramref name="buffer" />, an der mit dem Senden der Daten begonnen werden soll.</param>
        <param name="size">Die Anzahl der Bytes, die in den <see cref="T:System.Net.Sockets.NetworkStream" /> geschrieben werden sollen.</param>
        <param name="callback">Der <see cref="T:System.AsyncCallback" />-Delegat, der nach Abschluss von <see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> ausgeführt wird.</param>
        <param name="state">Ein Objekt, das zusätzliche, benutzerdefinierte Daten enthält.</param>
        <summary>Beginnt einen asynchronen Schreibvorgang in einen Stream.</summary>
        <returns>Ein <see cref="T:System.IAsyncResult" />, das den asynchronen Aufruf darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> -Methode startet einen asynchronen Sendevorgang an den Remote Host. Durch Aufrufen <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> der-Methode haben Sie die Möglichkeit, Daten in einem separaten Ausführungs Thread zu senden.  
  
 Sie müssen eine Rückruf Methode erstellen, die den <xref:System.AsyncCallback> -Delegaten implementiert und seinen Namen <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> an die-Methode übergibt. <xref:System.Net.Sockets.NetworkStream>Der- `state` Parameter muss mindestens den enthalten. Wenn Ihr Rückruf Weitere Informationen benötigt, können Sie eine kleine Klasse oder Struktur erstellen, die die <xref:System.Net.Sockets.NetworkStream> und die anderen erforderlichen Informationen enthält. Übergeben Sie die-Struktur oder-Klassen <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> Instanz über den `state` -Parameter an die-Methode.  
  
 Die Rückruf Methode sollte die <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> -Methode implementieren. Wenn die Anwendung aufruft <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>, verwendet das System einen separaten Thread, um die angegebene Rückruf Methode auszuführen, und <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> blockiert, bis <xref:System.Net.Sockets.NetworkStream> der die Anzahl der angeforderten Bytes sendet oder eine Ausnahme auslöst. Wenn der ursprüngliche Thread blockiert werden soll, nachdem Sie die <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> -Methode aufgerufen haben, verwenden Sie die <xref:System.Threading.WaitHandle.WaitOne%2A> -Methode. Rufen <xref:System.Threading.EventWaitHandle.Set%2A> Sie in der Rückruf Methode auf, wenn der ursprüngliche Thread weiter ausgeführt werden soll. Weitere Informationen zum Schreiben von Rückruf Methoden finden Sie unter Mars Hallen eines Delegaten [als Rückruf Methode](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).  
  
> [!NOTE]
>  Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException%2A> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode%2A> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der [API-Fehlercode Dokumentation von Windows Sockets, Version 2](/windows/desktop/winsock/windows-sockets-error-codes-2) .  
  
 Lese-und Schreibvorgänge können gleichzeitig für eine Instanz der <xref:System.Net.Sockets.NetworkStream> -Klasse ausgeführt werden, ohne dass eine Synchronisierung erforderlich ist. Solange es einen eindeutigen Thread für die Schreibvorgänge und einen eindeutigen Thread für die Lesevorgänge gibt, gibt es keine übergreifenden Störungen zwischen Lese-und Schreib Threads, und es ist keine Synchronisierung erforderlich.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> verwendet, um Daten asynchron in einen Netzwerkstream zu schreiben. Die `myWriteCallBack` -Methode implementiert <xref:System.AsyncCallback> den-Delegaten und wird vom System <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> aufgerufen, wenn zurückgibt.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="buffer" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="offset" />-Parameter ist kleiner als 0.  
  
- oder - 
Der <paramref name="offset" />-Parameter ist größer als die Länge von <paramref name="buffer" />.  
  
- oder - 
Der <paramref name="size" />-Parameter ist kleiner als 0.  
  
- oder - 
Der <paramref name="size" />-Parameter ist größer als die Länge von <paramref name="buffer" /> abzüglich des Werts des <paramref name="offset" />-Parameters.</exception>
        <exception cref="T:System.IO.IOException">Der zugrunde liegende <see cref="T:System.Net.Sockets.Socket" /> wird geschlossen.  
  
- oder - 
Beim Schreiben in das Netzwerk ist ein Fehler aufgetreten.  
  
- oder - 
Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Net.Sockets.NetworkStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Net.Sockets.NetworkStream" /> Lesevorgänge unterstützt.</summary>
        <value><see langword="true" />, wenn Daten aus dem Stream gelesen werden können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Net.Sockets.NetworkStream.CanRead%2A> ist `true`, ermöglicht<xref:System.Net.Sockets.NetworkStream> Aufrufe der <xref:System.Net.Sockets.NetworkStream.Read%2A> -Methode. Geben Sie den <xref:System.IO.FileAccess> entsprechenden Enumerationswert im Konstruktor an, um die Lesbarkeit und Schreib barkeit <xref:System.Net.Sockets.NetworkStream>von festzulegen. Die <xref:System.Net.Sockets.NetworkStream.CanRead%2A> -Eigenschaft wird festgelegt <xref:System.Net.Sockets.NetworkStream> , wenn die initialisiert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel <xref:System.Net.Sockets.NetworkStream.CanRead%2A> <xref:System.Net.Sockets.NetworkStream> wird überprüft, um zu überprüfen, ob lesbar ist. Anschließend wird ein Lesevorgang für die <xref:System.Net.Sockets.NetworkStream>durchführt.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.Readable" />
        <altmember cref="T:System.IO.FileAccess" />
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Net.Sockets.NetworkStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Stream Suchvorgänge unterstützt. Diese Eigenschaft wird gegenwärtig nicht unterstützt. Sie gibt immer <see langword="false" /> zurück.</summary>
        <value>In allen Fällen <see langword="false" />, um anzugeben, dass <see cref="T:System.Net.Sockets.NetworkStream" /> nicht eine bestimmte Position im Stream suchen kann.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTimeout : bool" Usage="System.Net.Sockets.NetworkStream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, ob Timeouteigenschaften für <see cref="T:System.Net.Sockets.NetworkStream" /> verwendet werden können.</summary>
        <value><see langword="true" /> in allen Fällen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist vorhanden, da Sie von <xref:System.IO.Stream>geerbt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Net.Sockets.NetworkStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Net.Sockets.NetworkStream" /> Schreibvorgänge unterstützt.</summary>
        <value><see langword="true" />, wenn Daten in den <see cref="T:System.Net.Sockets.NetworkStream" /> geschrieben werden können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> ist `true`, ermöglicht<xref:System.Net.Sockets.NetworkStream> Aufrufe der <xref:System.Net.Sockets.NetworkStream.Write%2A> -Methode. Geben Sie den <xref:System.IO.FileAccess> entsprechenden Enumerationswert im Konstruktor an, um die Lesbarkeit und Schreib barkeit <xref:System.Net.Sockets.NetworkStream>von festzulegen. Die <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> -Eigenschaft wird festgelegt <xref:System.Net.Sockets.NetworkStream> , wenn die initialisiert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> überprüft, um zu <xref:System.Net.Sockets.NetworkStream> überprüfen, ob das beschreibbar ist. Anschließend wird ein Schreibvorgang für die <xref:System.Net.Sockets.NetworkStream>durchführt.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
        <altmember cref="T:System.IO.FileAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="networkStream.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt den <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Die `Close` -Methode gibt sowohl nicht verwaltete als auch verwaltete Ressourcen frei <xref:System.Net.Sockets.NetworkStream>, die zugeordnet sind. Wenn das <xref:System.Net.Sockets.NetworkStream> den zugrunde liegenden <xref:System.Net.Sockets.Socket>besitzt, wird es ebenfalls geschlossen.

Wenn ein <xref:System.Net.Sockets.NetworkStream> einem zugeordnet <xref:System.Net.Sockets.TcpClient>wurde, schließt die `Close` Methode die TCP- <xref:System.Net.Sockets.TcpClient>Verbindung, aber nicht die zugeordnete.

## Examples  
Im folgenden Codebeispiel wird die <xref:System.Net.Sockets.NetworkStream>geschlossen.

```vb
' Example for closing the NetworkStream.
' Close the NetworkStream
myNetworkStream.Close()
```

```csharp
// Example for closing the NetworkStream.

// Close the NetworkStream
myNetworkStream.Close();
```

```cpp
// Example for closing the NetworkStream.
// Close the NetworkStream
myNetworkStream->Close();
```

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (timeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(int timeout);" />
      <MemberSignature Language="F#" Value="override this.Close : int -&gt; unit" Usage="networkStream.Close timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="timeout">Eine 32-Bit-Ganzzahl mit Vorzeichen, mit der die Zeitspanne (Anzahl der Millisekunden) angegeben wird, in der ggf. restliche Daten vor dem Schließen gesendet werden können.</param>
        <summary>Schließt den <see cref="T:System.Net.Sockets.NetworkStream" /> nach der angegebenen Zeitspanne, in der Daten gesendet werden können.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.NetworkStream.Close%2A> -Methode gibt sowohl nicht verwaltete als auch verwaltete Ressourcen frei <xref:System.Net.Sockets.NetworkStream>, die zugeordnet sind. Wenn das <xref:System.Net.Sockets.NetworkStream> den zugrunde liegenden <xref:System.Net.Sockets.Socket>besitzt, wird es ebenfalls geschlossen.  
  
 Wenn ein <xref:System.Net.Sockets.NetworkStream> einem zugeordnet <xref:System.Net.Sockets.TcpClient>wurde, schließt die <xref:System.Net.Sockets.NetworkStream.Close%2A> Methode die TCP- <xref:System.Net.Sockets.TcpClient>Verbindung, aber nicht die zugeordnete.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="timeout" />-Parameter ist kleiner als -1.</exception>
      </Docs>
    </Member>
    <Member MemberName="DataAvailable">
      <MemberSignature Language="C#" Value="public virtual bool DataAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DataAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.DataAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DataAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.DataAvailable : bool" Usage="System.Net.Sockets.NetworkStream.DataAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob im <see cref="T:System.Net.Sockets.NetworkStream" /> Daten für einen Lesevorgang verfügbar sind.</summary>
        <value><see langword="true" />, wenn im Stream Daten für den Lesevorgang verfügbar sind, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> die-Eigenschaft, um zu bestimmen, ob Daten zum Lesen bereit sind. Wenn <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> <xref:System.Net.Sockets.NetworkStream.Read%2A> ist `true`, wird ein-Rückruf sofort zurückgegeben. Wenn der Remote Host die Verbindung beendet oder schließt, <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> löst möglicherweise eine <xref:System.Net.Sockets.SocketException>aus.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird aus der <xref:System.Net.Sockets.NetworkStream> gelesen, solange die Daten verfügbar sind.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
        <exception cref="T:System.IO.IOException">Der zugrunde liegende <see cref="T:System.Net.Sockets.Socket" /> wird geschlossen.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Verwenden Sie die <see cref="P:System.Net.Sockets.SocketException.ErrorCode" />-Eigenschaft, um den spezifischen Fehlercode abzurufen. In der Dokumentation zu API-Fehlercodes unter <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets, Version 2</see> finden Sie eine ausführliche Beschreibung des Fehlers.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="networkStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Gibt die von <see cref="T:System.Net.Sockets.NetworkStream" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von der öffentlichen `Dispose` -Methode und der <xref:System.Object.Finalize%2A> -Methode aufgerufen. `Dispose`Ruft die geschützte `Dispose(Boolean)` Methode auf, `disposing` wobei der- `true`Parameter auf festgelegt ist. <xref:System.Object.Finalize%2A>Ruft `Dispose` auf `disposing` , wobei `false`auf gesetzt ist.  
  
 Wenn der `disposing`-Parameter `true` ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <xref:System.Net.Sockets.NetworkStream> verweist. Diese Methode ruft die `Dispose`-Methode aller Objekte auf, auf die verwiesen wird.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> kann von anderen Objekten mehrmals aufgerufen werden. Beim Überschreiben von <see langword="Dispose(Boolean)" /> müssen Sie darauf achten, nicht auf Objekte zu verweisen, die durch einen früheren Aufruf von <see langword="Dispose" /> freigegeben wurden. Weitere Informationen zum Implementieren <see langword="Dispose(Boolean)" />von finden Sie unter [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md)verwerfen-Methode.  
  
Weitere Informationen zu und <see langword="Dispose" /> <see cref="M:System.Object.Finalize" />finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und überschreiben [der Finalize-Methode](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</para></block>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="networkStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Ein <see cref="T:System.IAsyncResult" />, das einen asynchronen Aufruf darstellt.</param>
        <summary>Behandelt das Ende eines asynchronen Lesevorgangs.</summary>
        <returns>Die Anzahl der aus dem <see cref="T:System.Net.Sockets.NetworkStream" /> gelesenen Bytes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.NetworkStream.EndRead%2A> -Methode beendet den asynchronen Lesevorgang, der <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> in der-Methode gestartet wurde.  
  
 Vor dem <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>Aufrufen von müssen Sie eine Rückruf Methode erstellen, die den <xref:System.AsyncCallback> -Delegaten implementiert. Diese Rückruf Methode wird in einem separaten Thread ausgeführt und vom System aufgerufen, nachdem <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> zurückgegeben wurde. Die Rückruf Methode muss die <xref:System.IAsyncResult> von der <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> -Methode zurückgegebene als Parameter akzeptieren.  
  
 Rufen <xref:System.IAsyncResult> Sie innerhalb der Rückruf Methode die <xref:System.IAsyncResult.AsyncState%2A> -Eigenschaft des-Objekts auf, um das an die <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> -Methode über gegebene Zustands Objekt zu erhalten. Extrahieren Sie den <xref:System.Net.Sockets.NetworkStream> empfangenden aus diesem Zustands Objekt. Nach dem Abrufen von müssen Sie <xref:System.Net.Sockets.NetworkStream.EndRead%2A> die-Methode aufrufen, um den Lesevorgang erfolgreich abzuschließen und die Anzahl der gelesenen Bytes zurückzugeben. <xref:System.Net.Sockets.NetworkStream>  
  
 Die <xref:System.Net.Sockets.NetworkStream.EndRead%2A> -Methode wird blockiert, bis Daten verfügbar sind. Die <xref:System.Net.Sockets.NetworkStream.EndRead%2A> -Methode liest so viele Daten, wie Sie bis zur Anzahl der Bytes verfügbar sind, `size` die im- <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> Parameter der-Methode angegeben sind. Wenn der Remote Host die <xref:System.Net.Sockets.Socket> Verbindung herunterfährt und alle verfügbaren Daten empfangen wurden, wird die <xref:System.Net.Sockets.NetworkStream.EndRead%2A> -Methode sofort abgeschlossen und gibt 0 (null) Bytes zurück.  
  
 Rufen Sie zum Abrufen der empfangenen Daten die <xref:System.IAsyncResult.AsyncState%2A> -Eigenschaft <xref:System.IAsyncResult>des-Objekts auf, und extrahieren Sie den Puffer, der im resultierenden State-Objekt enthalten ist.  
  
> [!NOTE]
>  Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException%2A> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode%2A> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der [API-Fehlercode Dokumentation von Windows Sockets, Version 2](/windows/desktop/winsock/windows-sockets-error-codes-2) .  
  
   
  
## Examples  
 Im folgenden Codebeispiel `myReadCallback` wird als Rückruf Methode für <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> bereitgestellt. <xref:System.Net.Sockets.NetworkStream.EndRead%2A>wird in `myReadCallback` implementiert, um den asynchronen Lesezugriff abzuschließen, <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>der von gestartet wird.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#5)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#5)]
 [!code-vb[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="asyncResult" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Der zugrunde liegende <see cref="T:System.Net.Sockets.Socket" /> wird geschlossen.  
  
- oder - 
Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="networkStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Das <see cref="T:System.IAsyncResult" />, das den asynchronen Aufruf darstellt.</param>
        <summary>Behandelt das Ende eines asynchronen Schreibvorgangs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.EndWrite%2A>schließt den asynchronen Sendevorgang ab, <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>der in gestartet wurde.  
  
 Vor dem <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>Aufrufen von müssen Sie eine Rückruf Methode erstellen, die den <xref:System.AsyncCallback> -Delegaten implementiert. Diese Rückruf Methode wird in einem separaten Thread ausgeführt und vom System aufgerufen, nachdem <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> zurückgegeben wurde. Die Rückruf Methode muss die <xref:System.IAsyncResult> von der <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> -Methode zurückgegebene als Parameter akzeptieren.  
  
 Rufen <xref:System.IAsyncResult.AsyncState%2A> Sie die-Eigenschaft `IAsyncResult` des-Parameters innerhalb der Rückruf Methode auf <xref:System.Net.Sockets.NetworkStream>, um zu erhalten. Nachdem Sie die <xref:System.Net.Sockets.NetworkStream>-Methode erhalten haben, <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> können Sie die-Methode aufrufen, um den Sendevorgang erfolgreich abzuschließen und die Anzahl der gesendeten Bytes zurückzugeben.  
  
 Die <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> -Methode wird blockiert, bis die angeforderte Anzahl von Bytes gesendet wird.  
  
> [!NOTE]
>  Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException%2A> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode%2A> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der [API-Fehlercode Dokumentation von Windows Sockets, Version 2](/windows/desktop/winsock/windows-sockets-error-codes-2) .  
  
   
  
## Examples  
 Im folgenden Codebeispiel `myWriteCallback` wird als Rückruf Methode für <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> bereitgestellt. <xref:System.Net.Sockets.NetworkStream.EndWrite%2A>wird in `myWriteCallback` implementiert, um den asynchronen Schreibzugriff abzuschließen, <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>der von gestartet wird.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="asyncResult" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Der zugrunde liegende <see cref="T:System.Net.Sockets.Socket" /> wird geschlossen.  
  
- oder - 
Beim Schreiben in das Netzwerk ist ein Fehler aufgetreten.  
  
- oder - 
Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NetworkStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NetworkStream ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="networkStream.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle vom <see cref="T:System.Net.Sockets.NetworkStream" /> verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.Finalize%2A?displayProperty=nameWithType>. Der Anwendungscode sollte diese Methode nicht aufzurufen. die- <xref:System.Object.Finalize%2A> Methode eines Objekts wird automatisch während Garbage Collection aufgerufen, es sei denn, die Garbage Collector wurde durch einen Aufruf der <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> -Methode deaktiviert.  
  
 Weitere Informationen zum Verwenden der Finalize-Methode finden Sie unter [Finalize-Methoden und](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100))-debugtoren, [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md)und überschreiben [der Finalize-Methode](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="networkStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt Daten aus dem Stream weg. Diese Methode ist für eine spätere Verwendung vorgesehen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.NetworkStream.Flush%2A> -Methode implementiert <xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType> die-Methode. da <xref:System.Net.Sockets.NetworkStream> jedoch nicht gepuffert wird, hat dies keine Auswirkungen auf Netzwerkstreams. Beim Aufrufen <xref:System.Net.Sockets.NetworkStream.Flush%2A> der-Methode wird keine Ausnahme ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="networkStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Ein Abbruchtoken, mit dem die Benachrichtigung verteilt wird, dass dieser Vorgang abgebrochen werden muss.</param>
        <summary>Leert Daten aus dem Stream als asynchroner Vorgang.</summary>
        <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurück <xref:System.Threading.Tasks.Task> gegebene Objekt wird abgeschlossen, nachdem Daten aus dem Datenstrom für die <xref:System.Net.Sockets.NetworkStream> -Instanz geleert wurden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Net.Sockets.NetworkStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Länge der im Stream verfügbaren Daten an. Diese Eigenschaft wird gegenwärtig nicht unterstützt und löst immer eine <see cref="T:System.NotSupportedException" /> aus.</summary>
        <value>Die Länge der im Stream verfügbaren Daten.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Jede Verwendung dieser Eigenschaft.</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Net.Sockets.NetworkStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aktuelle Position im Stream ab oder legt diese fest. Diese Eigenschaft wird gegenwärtig nicht unterstützt und löst immer eine <see cref="T:System.NotSupportedException" /> aus.</summary>
        <value>Die aktuelle Position in dem Stream.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Jede Verwendung dieser Eigenschaft.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Read(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(Span&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="override this.Read : Span&lt;byte&gt; -&gt; int" Usage="networkStream.Read buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Ein Speicherbereich, in dem aus <see cref="T:System.Net.Sockets.NetworkStream" /> gelesene Daten gespeichert werden.</param>
        <summary>Liest Daten aus <see cref="T:System.Net.Sockets.NetworkStream" /> und speichert sie in eine Bytespanne im Speicher.</summary>
        <returns>Die Anzahl der aus dem <see cref="T:System.Net.Sockets.NetworkStream" /> gelesenen Bytes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode liest so viele Daten, wie Sie im- `buffer` Parameter verfügbar sind, und gibt die Anzahl der erfolgreich gelesenen Bytes zurück.
  
> [!NOTE]
>  Überprüfen Sie, ob <xref:System.Net.Sockets.NetworkStream> der lesbar ist, indem <xref:System.Net.Sockets.NetworkStream.CanRead> Sie die-Eigenschaft aufrufen. Wenn Sie versuchen, eine <xref:System.Net.Sockets.NetworkStream> zu lesen, die nicht lesbar ist, erhalten Sie eine. <xref:System.InvalidOperationException>  
  
> [!NOTE]
>  Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der [API-Fehlercode Dokumentation von Windows Sockets, Version 2](/windows/desktop/winsock/windows-sockets-error-codes-2) .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> unterstützt keine Lesevorgänge.</exception>
        <exception cref="T:System.IOException">Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.

- oder -

Beim Lesen aus dem Netzwerk tritt ein Fehler auf.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read([out] unsigned int8[] buffer, int32 offset, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, size As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="networkStream.Read (buffer, offset, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Ein Array vom Typ <see cref="T:System.Byte" />, das dem Speicherort entspricht, an dem aus dem <see cref="T:System.Net.Sockets.NetworkStream" /> gelesene Daten gespeichert werden.</param>
        <param name="offset">Die Position im <paramref name="buffer" />, an der mit dem Speichern der Daten begonnen werden soll.</param>
        <param name="size">Die Anzahl der aus dem <see cref="T:System.Net.Sockets.NetworkStream" /> zu lesenden Bytes.</param>
        <summary>Liest Daten aus <see cref="T:System.Net.Sockets.NetworkStream" /> und speichert sie in einem Bytearray.</summary>
        <returns>Die Anzahl der aus dem <see cref="T:System.Net.Sockets.NetworkStream" /> gelesenen Bytes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode liest Daten in `buffer` und gibt die Anzahl der erfolgreich gelesenen Bytes zurück. Der `Read` Vorgang liest so viele Daten wie verfügbar, bis zur Anzahl der Bytes, die durch den `size` -Parameter angegeben werden.
  
> [!NOTE]
>  Überprüfen Sie, ob <xref:System.Net.Sockets.NetworkStream> der lesbar ist, indem <xref:System.Net.Sockets.NetworkStream.CanRead> Sie die-Eigenschaft aufrufen. Wenn Sie versuchen, eine <xref:System.Net.Sockets.NetworkStream> zu lesen, die nicht lesbar ist, erhalten Sie eine. <xref:System.InvalidOperationException>  
  
> [!NOTE]
>  Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der [API-Fehlercode Dokumentation von Windows Sockets, Version 2](/windows/desktop/winsock/windows-sockets-error-codes-2) .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> verwendet, um zu bestimmen, ob Daten zum Lesen verfügbar sind. Wenn Daten verfügbar sind, wird aus der <xref:System.Net.Sockets.NetworkStream>gelesen.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> ist kleiner als 0.  
  
- oder - 
 <paramref name="offset" /> ist größer als die Länge von <paramref name="buffer" />.  
  
- oder - 
 <paramref name="size" /> ist kleiner als 0.  
  
- oder - 
 <paramref name="size" /> ist größer als die Länge von <paramref name="buffer" /> minus <paramref name="offset" />.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> unterstützt keine Lesevorgänge.</exception>
        <exception cref="T:System.IOException">Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.

- oder -

Beim Lesen aus dem Netzwerk tritt ein Fehler auf.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.DataAvailable" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <related type="Article" href="~/docs/framework/network-programming/using-streams-on-the-network.md">Verwenden von Streams im Netzwerk</related>
      </Docs>
    </Member>
    <Member MemberName="Readable">
      <MemberSignature Language="C#" Value="protected bool Readable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Readable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Readable" />
      <MemberSignature Language="VB.NET" Value="Protected Property Readable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Readable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Readable : bool with get, set" Usage="System.Net.Sockets.NetworkStream.Readable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Net.Sockets.NetworkStream" /> gelesen werden kann, oder legt diesen fest.</summary>
        <value><see langword="true" />, um anzugeben, dass der <see cref="T:System.Net.Sockets.NetworkStream" /> gelesen werden kann, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen von der <xref:System.Net.Sockets.NetworkStream> -Klasse ableiten, um die <xref:System.Net.Sockets.NetworkStream.Readable%2A> -Eigenschaft zu verwenden. Wenn <xref:System.Net.Sockets.NetworkStream.Readable%2A> ist `true`, ermöglicht<xref:System.Net.Sockets.NetworkStream> Aufrufe der <xref:System.Net.Sockets.NetworkStream.Read%2A> -Methode. Sie können auch bestimmen, ob <xref:System.Net.Sockets.NetworkStream> ein lesbar ist, indem Sie die <xref:System.Net.Sockets.NetworkStream.CanRead%2A> öffentlich zugängliche Eigenschaft überprüfen.  
  
 Die <xref:System.Net.Sockets.NetworkStream.Readable%2A> -Eigenschaft wird festgelegt <xref:System.Net.Sockets.NetworkStream> , wenn die initialisiert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel überprüft die `CanCommunicate` -Eigenschaft die <xref:System.Net.Sockets.NetworkStream.Readable%2A> - <xref:System.Net.Sockets.NetworkStream> Eigenschaft, um zu bestimmen, ob lesbar ist.  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask&lt;int&gt; ReadAsync (Memory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; ReadAsync(valuetype System.Memory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.ReadAsync : Memory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="networkStream.ReadAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Memory&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Der Puffer, in den die Daten geschrieben werden sollen.</param>
        <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen.</param>
        <summary>Liest Daten aus <see cref="T:System.Net.Sockets.NetworkStream" /> und speichert sie als asynchronen Vorgang in einem Bytespeicherbereich.</summary>
        <returns>Eine <see cref="T:System.Threading.Tasks.ValueTask`1" />, die den asynchronen Lesevorgang darstellt. Der Wert seiner <see cref="P:System.Threading.Tasks.ValueTask`1.Result" />-Eigenschaft enthält die Gesamtzahl der Bytes, die in <paramref name="buffer" /> gelesen werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Diese Methode liest so viele Daten, wie Sie in `buffer` verfügbar sind, und gibt die Anzahl der erfolgreich gelesenen Bytes zurück.

> [!NOTE]
>  Überprüfen Sie, ob <xref:System.Net.Sockets.NetworkStream> der lesbar ist, indem <xref:System.Net.Sockets.NetworkStream.CanRead> Sie die-Eigenschaft aufrufen. Wenn Sie versuchen, eine <xref:System.Net.Sockets.NetworkStream> zu lesen, die nicht lesbar ist, erhalten Sie eine. <xref:System.InvalidOperationException>  
  
> [!NOTE]
>  Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der [API-Fehlercode Dokumentation von Windows Sockets, Version 2](/windows/desktop/winsock/windows-sockets-error-codes-2) .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> unterstützt keine Lesevorgänge.</exception>
        <exception cref="T:System.IOException">Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.

- oder -

Beim Lesen aus dem Netzwerk tritt ein Fehler auf.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ReadAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="networkStream.ReadAsync (buffer, offset, size, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">Der Puffer, in den die Daten geschrieben werden sollen.</param>
        <param name="offset">Die Position im <paramref name="buffer" />, an der mit dem Speichern der Daten begonnen werden soll.</param>
        <param name="size">Die Anzahl der aus dem <see cref="T:System.Net.Sockets.NetworkStream" /> zu lesenden Bytes.</param>
        <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen.</param>
        <summary>Liest Daten aus <see cref="T:System.Net.Sockets.NetworkStream" /> und speichert sie als asynchronen Vorgang in einen festgelegten Bereich eines Bytearrays.</summary>
        <returns>Eine Aufgabe, die den asynchronen Lesevorgang darstellt. Der Wert seiner <see cref="P:System.Threading.Tasks.Task`1.Result" />-Eigenschaft enthält die Gesamtzahl der Bytes, die in <paramref name="buffer" /> gelesen werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode liest Daten in `buffer` und gibt die Anzahl der erfolgreich gelesenen Bytes zurück. Der `ReadAsync` Vorgang liest so viele Daten wie verfügbar, bis zur Anzahl der Bytes, die durch den `size` -Parameter angegeben werden.

> [!NOTE]
>  Überprüfen Sie, ob <xref:System.Net.Sockets.NetworkStream> der lesbar ist, indem <xref:System.Net.Sockets.NetworkStream.CanRead> Sie die-Eigenschaft aufrufen. Wenn Sie versuchen, eine <xref:System.Net.Sockets.NetworkStream> zu lesen, die nicht lesbar ist, erhalten Sie eine. <xref:System.InvalidOperationException>  
  
> [!NOTE]
>  Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der [API-Fehlercode Dokumentation von Windows Sockets, Version 2](/windows/desktop/winsock/windows-sockets-error-codes-2) .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> unterstützt keine Lesevorgänge.</exception>
        <exception cref="T:System.IOException">Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.

- oder -

Beim Lesen aus dem Netzwerk tritt ein Fehler auf.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public override int ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.ReadByte" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadByte () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadByte();" />
      <MemberSignature Language="F#" Value="override this.ReadByte : unit -&gt; int" Usage="networkStream.ReadByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest ein Byte aus <see cref="T:System.Net.Sockets.NetworkStream" /> und erhöht die Position im Datenstrom um ein Byte, oder gibt „-1“ zurück, wenn das Ende des Datenstroms erreicht ist.</summary>
        <returns>Das Byte ohne Vorzeichen, umgewandelt in <see langword="Int32" />, oder -1, wenn das Ende des Streams erreicht ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

> [!NOTE]
>  Überprüfen Sie, ob <xref:System.Net.Sockets.NetworkStream> der lesbar ist, indem <xref:System.Net.Sockets.NetworkStream.CanRead> Sie die-Eigenschaft aufrufen. Wenn Sie versuchen, eine <xref:System.Net.Sockets.NetworkStream> zu lesen, die nicht lesbar ist, erhalten Sie eine. <xref:System.InvalidOperationException>  
  
> [!NOTE]
>  Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der [API-Fehlercode Dokumentation von Windows Sockets, Version 2](/windows/desktop/winsock/windows-sockets-error-codes-2) .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> unterstützt keine Lesevorgänge.</exception>
        <exception cref="T:System.IOException">Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.

- oder -

Beim Lesen aus dem Netzwerk tritt ein Fehler auf.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadTimeout : int with get, set" Usage="System.Net.Sockets.NetworkStream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeitspanne ab, in der ein Lesevorgang während des Wartens auf Daten blockiert wird, oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Int32" />, das die Zeitspanne in Millisekunden angibt, nach deren Ablauf ein Lesevorgang fehlschlägt. Der Standardwert <see cref="F:System.Threading.Timeout.Infinite" /> gibt an, dass der Lesevorgang über kein Timeout verfügt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Lesevorgang nicht innerhalb der von dieser Eigenschaft angegebenen Zeit ausgeführt wird, löst der Lesevorgang einen <xref:System.IO.IOException>aus.  
  
> [!NOTE]
>  Diese Eigenschaft betrifft nur synchrone Lesevorgänge, die <xref:System.Net.Sockets.NetworkStream.Read%2A> durch Aufrufen der-Methode ausgeführt werden. Diese Eigenschaft wirkt sich nicht auf asynchrone Lesevorgänge aus, <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> die durch Aufrufen der-Methode ausgeführt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Lese Timeout für einen Netzwerkstream auf 10 Millisekunden festgelegt.  
  
 [!code-csharp[NCLTcpClientSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der angegebene Wert ist kleiner oder gleich 0 (null) und nicht <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="networkStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Dieser Parameter wird nicht verwendet.</param>
        <param name="origin">Dieser Parameter wird nicht verwendet.</param>
        <summary>Legt die aktuelle Position des Streams auf den angegebenen Wert fest. Diese Methode wird gegenwärtig nicht unterstützt und löst immer eine <see cref="T:System.NotSupportedException" /> aus.</summary>
        <returns>Die Position im Stream.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Jede Verwendung dieser Eigenschaft.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="networkStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Dieser Parameter wird nicht verwendet.</param>
        <summary>Legt die Länge des Streams fest. Diese Methode löst immer eine <see cref="T:System.NotSupportedException" /> aus.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Jede Verwendung dieser Eigenschaft.</exception>
      </Docs>
    </Member>
    <Member MemberName="Socket">
      <MemberSignature Language="C#" Value="protected System.Net.Sockets.Socket Socket { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Socket" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Socket" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Socket As Socket" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Net::Sockets::Socket ^ Socket { System::Net::Sockets::Socket ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Socket : System.Net.Sockets.Socket" Usage="System.Net.Sockets.NetworkStream.Socket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die zugrunde liegende <see cref="T:System.Net.Sockets.Socket" /> ab.</summary>
        <value>Ein <see cref="T:System.Net.Sockets.Socket" />, der die zugrunde liegende Netzwerkverbindung darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Von abgeleitete <xref:System.Net.Sockets.NetworkStream> Klassen können diese Eigenschaft verwenden, um den <xref:System.Net.Sockets.Socket>zugrunde liegenden zu erhalten. Verwenden Sie den <xref:System.Net.Sockets.Socket> zugrunde liegenden, <xref:System.Net.Sockets.NetworkStream.Socket%2A> <xref:System.Net.Sockets.NetworkStream> der von der-Eigenschaft zurückgegeben wird  
  
> [!NOTE]
>  Auf diese Eigenschaft kann nur über diese Klasse oder eine abgeleitete Klasse zugegriffen werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der zugrunde liegende <xref:System.Net.Sockets.Socket> abgerufen, um eine aktive Verbindung zu überprüfen.  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle vom <see cref="T:System.Net.Sockets.NetworkStream" /> verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Rufen Sie `Dispose` auf, wenn Sie <xref:System.Net.Sockets.NetworkStream> nicht mehr benötigen. Die `Dispose`-Methode bewirkt, dass <xref:System.Net.Sockets.NetworkStream> nicht mehr verwendet werden kann. Nach dem `Dispose`Aufrufen von müssen Sie alle Verweise auf den <xref:System.Net.Sockets.NetworkStream> freigeben, damit der Garbage Collector den Speicher freigeben kann <xref:System.Net.Sockets.NetworkStream> , den der belegt hat. Weitere Informationen zur Verwendung der verwerfen-Methode finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md)verwerfen-Methode.

> [!NOTE]
> Rufen Sie immer `Dispose` auf, bevor Sie den letzten Verweis auf das <xref:System.Net.Sockets.NetworkStream> freigeben. Andernfalls werden die verwendeten Ressourcen nicht freigegeben, bis die Garbage Collector die Finalize <xref:System.Net.Sockets.NetworkStream> -Methode des-Objekts aufruft.

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Write(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="override this.Write : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="networkStream.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Die Daten, die in <see cref="T:System.Net.Sockets.NetworkStream" /> geschrieben werden sollen.</param>
        <summary>Schreibt Daten aus einer schreibgeschützten Bytespanne in<see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Diese Methode sendet alle Bytes in `buffer` das Netzwerk. Die `Write` -Methode wird blockiert, bis die angeforderte Anzahl von Bytes <xref:System.Net.Sockets.SocketException> gesendet oder eine ausgelöst wird.

> [!NOTE]
> Überprüfen Sie, ob <xref:System.Net.Sockets.NetworkStream> das beschreibbar ist, <xref:System.Net.Sockets.NetworkStream.CanWrite> indem Sie die-Eigenschaft aufrufen. Wenn Sie versuchen, in einen <xref:System.Net.Sockets.NetworkStream> zu schreiben, der nicht beschreibbar ist, erhalten Sie eine. <xref:System.InvalidOperationException>

> [!NOTE]
> Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der API-Fehlercode Dokumentation von Windows Sockets, Version 2.

]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> unterstützt keine Schreibvorgänge.</exception>
        <exception cref="T:System.IO.IOException">Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.

- oder -

Beim Schreiben in das Netzwerk ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="networkStream.Write (buffer, offset, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Ein Array vom Typ <see cref="T:System.Byte" />, das die Daten enthält, die in den <see cref="T:System.Net.Sockets.NetworkStream" /> geschrieben werden sollen.</param>
        <param name="offset">Die Position im <paramref name="buffer" />, an der mit dem Schreiben von Daten begonnen werden soll.</param>
        <param name="size">Die Anzahl der Bytes, die in den <see cref="T:System.Net.Sockets.NetworkStream" /> geschrieben werden sollen.</param>
        <summary>Schreibt Daten aus einem festgelegten Bereich eines Bytearrays in <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Diese Methode beginnt am angegebenen `offset` und sendet `size` Bytes aus dem Inhalt von `buffer` an das Netzwerk. Die `Write` -Methode wird blockiert, bis die angeforderte Anzahl von Bytes <xref:System.Net.Sockets.SocketException> gesendet oder eine ausgelöst wird. 
  
> [!NOTE]
> Überprüfen Sie, ob <xref:System.Net.Sockets.NetworkStream> das beschreibbar ist, <xref:System.Net.Sockets.NetworkStream.CanWrite> indem Sie die-Eigenschaft aufrufen. Wenn Sie versuchen, in einen <xref:System.Net.Sockets.NetworkStream> zu schreiben, der nicht beschreibbar ist, erhalten Sie eine. <xref:System.InvalidOperationException>

> [!NOTE]
> Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der API-Fehlercode Dokumentation von Windows Sockets, Version 2.

  
## Examples  
 Im folgenden Codebeispiel wird überprüft, ob das <xref:System.Net.Sockets.NetworkStream> beschreibbar ist. Wenn dies der Fall ist <xref:System.Net.Sockets.NetworkStream.Write%2A> , wird verwendet, um eine kleine Nachricht zu schreiben.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="buffer" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="offset" />-Parameter ist kleiner als 0.  
  
- oder - 
Der <paramref name="offset" />-Parameter ist größer als die Länge von <paramref name="buffer" />.  
  
- oder - 
Der <paramref name="size" />-Parameter ist kleiner als 0.  
  
- oder - 
Der <paramref name="size" />-Parameter ist größer als die Länge von <paramref name="buffer" /> abzüglich des Werts des <paramref name="offset" />-Parameters.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> unterstützt keine Schreibvorgänge.</exception>
        <exception cref="T:System.IO.IOException">Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.

- oder -

Beim Schreiben in das Netzwerk ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
      </Docs>
    </Member>
    <Member MemberName="Writeable">
      <MemberSignature Language="C#" Value="protected bool Writeable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Writeable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Writeable" />
      <MemberSignature Language="VB.NET" Value="Protected Property Writeable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Writeable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Writeable : bool with get, set" Usage="System.Net.Sockets.NetworkStream.Writeable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob in den <see cref="T:System.Net.Sockets.NetworkStream" /> geschrieben werden kann.</summary>
        <value><see langword="true" />, wenn Daten in den Stream geschrieben werden können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen von der <xref:System.Net.Sockets.NetworkStream> -Klasse ableiten, um die <xref:System.Net.Sockets.NetworkStream.Writeable%2A> -Eigenschaft zu verwenden. Wenn <xref:System.Net.Sockets.NetworkStream.Writeable%2A> ist `true`, ermöglicht<xref:System.Net.Sockets.NetworkStream> Aufrufe der <xref:System.Net.Sockets.NetworkStream.Write%2A> -Methode. Sie können auch bestimmen, ob <xref:System.Net.Sockets.NetworkStream> ein beschreibbar ist, indem Sie <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> die öffentlich zugängliche Eigenschaft überprüfen.  
  
 Die <xref:System.Net.Sockets.NetworkStream.Writeable%2A> -Eigenschaft wird festgelegt <xref:System.Net.Sockets.NetworkStream> , wenn die initialisiert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel überprüft die `CanCommunicate` -Eigenschaft die <xref:System.Net.Sockets.NetworkStream.Writeable%2A> - <xref:System.Net.Sockets.NetworkStream> Eigenschaft, um zu bestimmen, ob beschreibbar ist.  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Readable" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask WriteAsync (ReadOnlyMemory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask WriteAsync(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : ReadOnlyMemory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="networkStream.WriteAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Ein Speicherbereich, der die Daten enthält, die in <see cref="T:System.Net.Sockets.NetworkStream" /> geschrieben werden sollen.</param>
        <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen.</param>
        <summary>Schreibt Daten aus einem schreibgeschützten Bytespeicherbereich als asynchronen Vorgang in <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <returns>Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks 
Diese Methode sendet alle Bytes in `buffer` das Netzwerk.

> [!NOTE]
> Überprüfen Sie, ob <xref:System.Net.Sockets.NetworkStream> das beschreibbar ist, <xref:System.Net.Sockets.NetworkStream.CanWrite> indem Sie die-Eigenschaft aufrufen. Wenn Sie versuchen, in einen <xref:System.Net.Sockets.NetworkStream> zu schreiben, der nicht beschreibbar ist, erhalten Sie eine. <xref:System.InvalidOperationException>

> [!NOTE]
> Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der API-Fehlercode Dokumentation von Windows Sockets, Version 2.

]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> unterstützt keine Schreibvorgänge.</exception>
        <exception cref="T:System.IO.IOException">Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.

- oder -

Beim Schreiben in das Netzwerk ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="networkStream.WriteAsync (buffer, offset, size, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
      </Parameters>
      <Docs>        
        <param name="buffer">Ein Bytearray, das die Daten enthält, die in <see cref="T:System.Net.Sockets.NetworkStream" /> geschrieben werden sollen.</param>
        <param name="offset">Die Position im <paramref name="buffer" />, an der mit dem Schreiben von Daten begonnen werden soll.</param>
        <param name="size">Die Anzahl der Bytes, die in den <see cref="T:System.Net.Sockets.NetworkStream" /> geschrieben werden sollen.</param>
        <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen.</param>
        <summary>Schreibt Daten aus dem angegebenen Bereich eines Bytearrays als asynchronen Vorgang in <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <returns>Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks 
Diese Methode beginnt am angegebenen `offset` und sendet `size` Bytes aus dem Inhalt von `buffer` an das Netzwerk.

> [!NOTE]
> Überprüfen Sie, ob <xref:System.Net.Sockets.NetworkStream> das beschreibbar ist, <xref:System.Net.Sockets.NetworkStream.CanWrite> indem Sie die-Eigenschaft aufrufen. Wenn Sie versuchen, in einen <xref:System.Net.Sockets.NetworkStream> zu schreiben, der nicht beschreibbar ist, erhalten Sie eine. <xref:System.InvalidOperationException>

> [!NOTE]
> Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der API-Fehlercode Dokumentation von Windows Sockets, Version 2.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="buffer" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="offset" />-Parameter ist kleiner als 0.  
  
- oder - 
Der <paramref name="offset" />-Parameter ist größer als die Länge von <paramref name="buffer" />.  
  
- oder - 
Der <paramref name="size" />-Parameter ist kleiner als 0.  
  
- oder - 
Der <paramref name="size" />-Parameter ist größer als die Länge von <paramref name="buffer" /> abzüglich des Werts des <paramref name="offset" />-Parameters.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> unterstützt keine Schreibvorgänge.</exception>
        <exception cref="T:System.IO.IOException">Beim Schreiben in das Netzwerk ist ein Fehler aufgetreten.  
  
 - oder -  
  
 Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="networkStream.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Das Byte, das in den Stream geschrieben werden soll.</param>
        <summary>Schreibt ein Byte an die aktuellen Position in <see cref="T:System.Net.Sockets.NetworkStream" /> und erhöht die aktuelle Position im Datenstrom um ein Byte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

> [!NOTE]
> Überprüfen Sie, ob <xref:System.Net.Sockets.NetworkStream> das beschreibbar ist, <xref:System.Net.Sockets.NetworkStream.CanWrite> indem Sie die-Eigenschaft aufrufen. Wenn Sie versuchen, in einen <xref:System.Net.Sockets.NetworkStream> zu schreiben, der nicht beschreibbar ist, erhalten Sie eine. <xref:System.InvalidOperationException>

> [!NOTE]
> Wenn Sie einen <xref:System.IO.IOException>erhalten, überprüfen <xref:System.Exception.InnerException> Sie die-Eigenschaft, um festzustellen, <xref:System.Net.Sockets.SocketException>ob Sie durch einen verursacht wurde. Wenn dies der Fall ist <xref:System.Net.Sockets.SocketException.ErrorCode> , verwenden Sie die-Eigenschaft, um den spezifischen Fehlercode abzurufen. eine ausführliche Beschreibung des Fehlers finden Sie in der API-Fehlercode Dokumentation von Windows Sockets, Version 2.

]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> unterstützt keine Schreibvorgänge.</exception>
        <exception cref="T:System.IO.IOException">Beim Zugreifen auf den Socket ist ein Fehler aufgetreten.

- oder -

Beim Schreiben in das Netzwerk ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.ObjectDisposedException">Der <see cref="T:System.Net.Sockets.NetworkStream" /> ist geschlossen.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WriteTimeout : int with get, set" Usage="System.Net.Sockets.NetworkStream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeitspanne ab, in der ein Schreibvorgang während des Wartens auf Daten blockiert wird, oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Int32" />, das die Zeitspanne in Millisekunden angibt, nach deren Ablauf ein Schreibvorgang fehlschlägt. Der Standardwert <see cref="F:System.Threading.Timeout.Infinite" /> gibt an, dass der Schreibvorgang über kein Timeout verfügt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Schreibvorgang nicht innerhalb der von dieser Eigenschaft angegebenen Zeit ausgeführt wird, löst der Schreibvorgang einen <xref:System.IO.IOException>aus.  
  
> [!NOTE]
>  Diese Eigenschaft betrifft nur synchrone Schreibvorgänge, die durch <xref:System.Net.Sockets.NetworkStream.Write%2A> Aufrufen der-Methode ausgeführt werden. Diese Eigenschaft wirkt sich nicht auf asynchrone Schreibvorgänge aus, <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> die durch Aufrufen der-Methode ausgeführt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der Schreib Timeout für einen Netzwerkstream auf 10 Millisekunden festgelegt.  
  
 [!code-cpp[NCLTcpServerSync#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclTcpServerSync/cpp/tcplistener.cpp#0)]
 [!code-csharp[NCLTcpServerSync#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclTcpServerSync/CS/tcplistener.cs#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der angegebene Wert ist kleiner oder gleich 0 (null) und nicht <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb2b4d962e9ff84bbe0aad0968396a6df0015b8c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58698731" /></Metadata><TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpListener" />
  <TypeSignature Language="F#" Value="type TcpListener = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="87b3f-101">Überwacht Verbindungen von TCP-Netzwerkclients.</span><span class="sxs-lookup"><span data-stu-id="87b3f-101">Listens for connections from TCP network clients.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-102">Die <xref:System.Net.Sockets.TcpListener> -Klasse bietet einfache Methoden, die Abhören und akzeptieren von eingehenden verbindungsanforderungen im synchronen Modus blockiert.</span><span class="sxs-lookup"><span data-stu-id="87b3f-102">The <xref:System.Net.Sockets.TcpListener> class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.</span></span> <span data-ttu-id="87b3f-103">Verwenden Sie entweder eine <xref:System.Net.Sockets.TcpClient> oder <xref:System.Net.Sockets.Socket> für die Verbindung mit einer <xref:System.Net.Sockets.TcpListener>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-103">You can use either a <xref:System.Net.Sockets.TcpClient> or a <xref:System.Net.Sockets.Socket> to connect with a <xref:System.Net.Sockets.TcpListener>.</span></span> <span data-ttu-id="87b3f-104">Erstellen einer <xref:System.Net.Sockets.TcpListener> mithilfe einer <xref:System.Net.IPEndPoint>, eine lokale IP-Adresse und Portnummer oder nur eine Portnummer an.</span><span class="sxs-lookup"><span data-stu-id="87b3f-104">Create a <xref:System.Net.Sockets.TcpListener> using an <xref:System.Net.IPEndPoint>, a Local IP address and port number, or just a port number.</span></span> <span data-ttu-id="87b3f-105">Geben Sie <xref:System.Net.IPAddress.Any> für die lokale IP-Adresse und 0 für die lokale Portnummer ein, wenn Sie den zugrunde liegenden Dienstanbieter, um diese Werte zuweisen möchten.</span><span class="sxs-lookup"><span data-stu-id="87b3f-105">Specify <xref:System.Net.IPAddress.Any> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you.</span></span> <span data-ttu-id="87b3f-106">Wenn Sie diese Option auswählen, können Sie mithilfe der <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> Eigenschaft, um die zugewiesenen Informationen zu identifizieren, nach der Socket-Verbindung hergestellt hat.</span><span class="sxs-lookup"><span data-stu-id="87b3f-106">If you choose to do this, you can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the assigned information, after the socket has connected.</span></span>  
  
 <span data-ttu-id="87b3f-107">Verwenden der <xref:System.Net.Sockets.TcpListener.Start%2A> Methode damit beginnt, Lauschen auf eingehende verbindungsanforderungen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-107">Use the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests.</span></span> <span data-ttu-id="87b3f-108"><xref:System.Net.Sockets.TcpListener.Start%2A> eingehende Verbindungen wird Warteschlange stellen, bis Sie entweder Sie rufen die <xref:System.Net.Sockets.TcpListener.Stop%2A> -Methode, oder er wurde in die Warteschlange <xref:System.Net.Sockets.SocketOptionName.MaxConnections>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-108"><xref:System.Net.Sockets.TcpListener.Start%2A> will queue incoming connections until you either call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method or it has queued <xref:System.Net.Sockets.SocketOptionName.MaxConnections>.</span></span> <span data-ttu-id="87b3f-109">Verwenden Sie entweder <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> oder <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> , eine Verbindung aus der Warteschlange für eingehende Verbindungen Anforderung abzurufen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-109">Use either <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> to pull a connection from the incoming connection request queue.</span></span> <span data-ttu-id="87b3f-110">Diese beiden Methoden werden blockiert.</span><span class="sxs-lookup"><span data-stu-id="87b3f-110">These two methods will block.</span></span> <span data-ttu-id="87b3f-111">Wenn Sie eine Blockierung zu vermeiden möchten, können Sie mithilfe der <xref:System.Net.Sockets.TcpListener.Pending%2A> Methode, um zu bestimmen, ob die Weiterleitung von verbindungsanforderungen in der Warteschlange verfügbar sind.</span><span class="sxs-lookup"><span data-stu-id="87b3f-111">If you want to avoid blocking, you can use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method first to determine if connection requests are available in the queue.</span></span>  
  
 <span data-ttu-id="87b3f-112">Rufen Sie die <xref:System.Net.Sockets.TcpListener.Stop%2A> Methode zum Schließen der <xref:System.Net.Sockets.TcpListener>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-112">Call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-113">Die <xref:System.Net.Sockets.TcpListener.Stop%2A> Methode wird nicht akzeptierten Verbindungen geschlossen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-113">The <xref:System.Net.Sockets.TcpListener.Stop%2A> method does not close any accepted connections.</span></span> <span data-ttu-id="87b3f-114">Sie sind verantwortlich für das Schließen diese separat.</span><span class="sxs-lookup"><span data-stu-id="87b3f-114">You are responsible for closing these separately.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-115">Das folgende Codebeispiel erstellt eine <xref:System.Net.Sockets.TcpListener>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-115">The following code example creates a <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 <span data-ttu-id="87b3f-116">Finden Sie unter <xref:System.Net.Sockets.TcpClient> ein Beispiel für Client.</span><span class="sxs-lookup"><span data-stu-id="87b3f-116">See <xref:System.Net.Sockets.TcpClient> for a client example.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="87b3f-117">Um eine ausgehende Verbindung herzustellen, oder übernehmen Sie eine eingehende Anforderung.</span><span class="sxs-lookup"><span data-stu-id="87b3f-117">to establish an outgoing connection or accept an incoming request.</span></span></permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87b3f-118">Initialisiert eine neue Instanz der <see cref="T:System.Net.Sockets.TcpListener" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="87b3f-118">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use TcpListener(IPAddress localaddr, int port).")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="87b3f-119">Der Anschluss, der auf eingehende Verbindungsversuche überwacht werden soll.</span><span class="sxs-lookup"><span data-stu-id="87b3f-119">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="87b3f-120">Initialisiert eine neue Instanz der <see cref="T:System.Net.Sockets.TcpListener" />-Klasse, die den angegebenen Anschluss überwacht.</span><span class="sxs-lookup"><span data-stu-id="87b3f-120">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens on the specified port.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-121">Dieser Konstruktor ist veraltet.</span><span class="sxs-lookup"><span data-stu-id="87b3f-121">This constructor is obsolete.</span></span> <span data-ttu-id="87b3f-122">Verwenden der <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> oder <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-122">Use the <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> or <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> constructors.</span></span>  
  
 <span data-ttu-id="87b3f-123">Dieser Konstruktor ermöglicht Ihnen die Angabe der Portnummer für das Lauschen auf eingehende Verbindungsversuche.</span><span class="sxs-lookup"><span data-stu-id="87b3f-123">This constructor allows you to specify the port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="87b3f-124">Mit diesem Konstruktor weist der zugrunde liegenden Dienstanbieter die am besten geeignete Netzwerkadresse an.</span><span class="sxs-lookup"><span data-stu-id="87b3f-124">With this constructor, the underlying service provider assigns the most appropriate network address.</span></span> <span data-ttu-id="87b3f-125">Wenn Sie nicht wichtig ist der lokaler Port verwendet wird, können Sie für die Portnummer 0 angeben.</span><span class="sxs-lookup"><span data-stu-id="87b3f-125">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="87b3f-126">In diesem Fall wird der Dienstanbieter eine Anzahl von verfügbaren kurzlebigen Port zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-126">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="87b3f-127">Wenn Sie diesen Ansatz verwenden, können Sie ermitteln, welche lokalen Netzwerk Adresse und Port-Nummer mit zugewiesen wurde die <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="87b3f-127">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="87b3f-128">Rufen Sie die <xref:System.Net.Sockets.TcpListener.Start%2A> Methode, um eingehende Verbindungsversuche überwacht werden soll.</span><span class="sxs-lookup"><span data-stu-id="87b3f-128">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-129">Das folgende Codebeispiel erstellt eine <xref:System.Net.Sockets.TcpListener> über eine lokale Portnummer.</span><span class="sxs-lookup"><span data-stu-id="87b3f-129">The following code example creates a <xref:System.Net.Sockets.TcpListener> using a local port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87b3f-130"><paramref name="port" /> liegt nicht zwischen <see cref="F:System.Net.IPEndPoint.MinPort" /> und <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-130"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPEndPoint -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="87b3f-131">Ein <see cref="T:System.Net.IPEndPoint" />, der den lokalen Endpunkt darstellt, an den der Listener-<see cref="T:System.Net.Sockets.Socket" /> gebunden werden soll.</span><span class="sxs-lookup"><span data-stu-id="87b3f-131">An <see cref="T:System.Net.IPEndPoint" /> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket" />.</span></span></param>
        <summary><span data-ttu-id="87b3f-132">Initialisiert eine neue Instanz der <see cref="T:System.Net.Sockets.TcpListener" />-Klasse mit dem angegebenen lokalen Endpunkt.</span><span class="sxs-lookup"><span data-stu-id="87b3f-132">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class with the specified local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-133">Dieser Konstruktor ermöglicht Ihnen die Angabe die lokale IP-Adresse und Portnummer für das Lauschen auf eingehende Verbindung versucht.</span><span class="sxs-lookup"><span data-stu-id="87b3f-133">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="87b3f-134">Bevor Sie diesen Konstruktor verwenden, müssen Sie erstellen eine <xref:System.Net.IPEndPoint> mit der gewünschten lokalen IP-Adresse und Portnummer.</span><span class="sxs-lookup"><span data-stu-id="87b3f-134">Before using this constructor, you must create an <xref:System.Net.IPEndPoint> using the desired local IP address and port number.</span></span> <span data-ttu-id="87b3f-135">Übergeben Sie diese <xref:System.Net.IPEndPoint> als an den Konstruktor der `localEP` Parameter.</span><span class="sxs-lookup"><span data-stu-id="87b3f-135">Pass this <xref:System.Net.IPEndPoint> to the constructor as the `localEP` parameter.</span></span>  
  
 <span data-ttu-id="87b3f-136">Wenn Sie sich nicht wichtig ist, welche lokalen Adresse zugewiesen ist, können Sie erstellen eine <xref:System.Net.IPEndPoint> mit <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> als Adressenparameter und den zugrunde liegenden Dienst weist Anbieter die am besten geeignete Netzwerkadresse.</span><span class="sxs-lookup"><span data-stu-id="87b3f-136">If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> as the address parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="87b3f-137">Das kann hilfreich sein, Ihre Anwendung zu vereinfachen, wenn Sie über mehrere Netzwerkschnittstellen verfügen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-137">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="87b3f-138">Wenn Sie nicht wichtig ist der lokaler Port verwendet wird, können Sie erstellen eine <xref:System.Net.IPEndPoint> verwenden 0 für die Nummer des Ports.</span><span class="sxs-lookup"><span data-stu-id="87b3f-138">If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number.</span></span> <span data-ttu-id="87b3f-139">In diesem Fall wird der Dienstanbieter eine Anzahl von verfügbaren kurzlebigen Port zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-139">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="87b3f-140">Wenn Sie diesen Ansatz verwenden, können Sie ermitteln, welche lokalen Netzwerk Adresse und Port-Nummer mit zugewiesen wurde die <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="87b3f-140">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="87b3f-141">Rufen Sie die <xref:System.Net.Sockets.TcpListener.Start%2A> Methode, um eingehende Verbindungsversuche überwacht werden soll.</span><span class="sxs-lookup"><span data-stu-id="87b3f-141">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-142">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-142">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-143">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-143">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-144">Das folgende Codebeispiel erstellt eine Instanz von der <xref:System.Net.Sockets.TcpListener> -Klasse unter Verwendung des lokalen Endpunkts.</span><span class="sxs-lookup"><span data-stu-id="87b3f-144">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using the local endpoint.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87b3f-145"><paramref name="localEP" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-145"><paramref name="localEP" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localaddr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPAddress ^ localaddr, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPAddress * int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener (localaddr, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr"><span data-ttu-id="87b3f-146">Eine <see cref="T:System.Net.IPAddress" />, die die lokale IP-Adresse darstellt.</span><span class="sxs-lookup"><span data-stu-id="87b3f-146">An <see cref="T:System.Net.IPAddress" /> that represents the local IP address.</span></span></param>
        <param name="port"><span data-ttu-id="87b3f-147">Der Anschluss, der auf eingehende Verbindungsversuche überwacht werden soll.</span><span class="sxs-lookup"><span data-stu-id="87b3f-147">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="87b3f-148">Initialisiert eine neue Instanz der <see cref="T:System.Net.Sockets.TcpListener" />-Klasse, die die eingehenden Verbindungsversuche mit der angegebenen lokalen IP-Adresse und Anschlussnummer überwacht.</span><span class="sxs-lookup"><span data-stu-id="87b3f-148">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens for incoming connection attempts on the specified local IP address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-149">Dieser Konstruktor ermöglicht Ihnen die Angabe die lokale IP-Adresse und Portnummer für das Lauschen auf eingehende Verbindung versucht.</span><span class="sxs-lookup"><span data-stu-id="87b3f-149">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="87b3f-150">Sie müssen zuerst erstellen, vor dem Aufrufen dieses Konstruktors eine <xref:System.Net.IPAddress> mit der gewünschten lokalen Adresse.</span><span class="sxs-lookup"><span data-stu-id="87b3f-150">Before calling this constructor you must first create an <xref:System.Net.IPAddress> using the desired local address.</span></span> <span data-ttu-id="87b3f-151">Übergeben Sie diese <xref:System.Net.IPAddress> als an den Konstruktor der `localaddr` Parameter.</span><span class="sxs-lookup"><span data-stu-id="87b3f-151">Pass this <xref:System.Net.IPAddress> to the constructor as the `localaddr` parameter.</span></span> <span data-ttu-id="87b3f-152">Wenn Sie sich nicht wichtig ist, welche lokalen Adresse zugewiesen ist, geben Sie <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> für die `localaddr` Parameter und den zugrunde liegenden Dienstanbieter wird die am besten geeignete Netzwerkadresse zuweisen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-152">If you do not care which local address is assigned, specify <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> for the `localaddr` parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="87b3f-153">Das kann hilfreich sein, Ihre Anwendung zu vereinfachen, wenn Sie über mehrere Netzwerkschnittstellen verfügen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-153">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="87b3f-154">Wenn Sie nicht wichtig ist der lokaler Port verwendet wird, können Sie für die Portnummer 0 angeben.</span><span class="sxs-lookup"><span data-stu-id="87b3f-154">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="87b3f-155">In diesem Fall weist der Dienstanbieter eine verfügbare Portnummer zwischen 1024 und 5000.</span><span class="sxs-lookup"><span data-stu-id="87b3f-155">In this case, the service provider will assign an available port number between 1024 and 5000.</span></span> <span data-ttu-id="87b3f-156">Wenn Sie diesen Ansatz verwenden, können Sie ermitteln, welche lokalen Netzwerk Adresse und Port-Nummer mit zugewiesen wurde die <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="87b3f-156">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="87b3f-157">Rufen Sie die <xref:System.Net.Sockets.TcpListener.Start%2A> Methode, um eingehende Verbindungsversuche überwacht werden soll.</span><span class="sxs-lookup"><span data-stu-id="87b3f-157">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-158">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-158">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-159">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-159">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-160">Das folgende Codebeispiel erstellt eine Instanz von der <xref:System.Net.Sockets.TcpListener> Klasse mithilfe einer lokalen IP-Adresse und Portnummer.</span><span class="sxs-lookup"><span data-stu-id="87b3f-160">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using a local IP address and port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87b3f-161"><paramref name="localaddr" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-161"><paramref name="localaddr" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87b3f-162"><paramref name="port" /> liegt nicht zwischen <see cref="F:System.Net.IPEndPoint.MinPort" /> und <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-162"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocket () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ AcceptSocket();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocket : unit -&gt; System.Net.Sockets.Socket" Usage="tcpListener.AcceptSocket " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87b3f-163">Nimmt eine ausstehende Verbindungsanforderung an.</span><span class="sxs-lookup"><span data-stu-id="87b3f-163">Accepts a pending connection request.</span></span></summary>
        <returns><span data-ttu-id="87b3f-164">Ein <see cref="T:System.Net.Sockets.Socket" /> zum Senden und Empfangen von Daten.</span><span class="sxs-lookup"><span data-stu-id="87b3f-164">A <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-165"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> blockierende Methode, die zurückgegeben wird ein <xref:System.Net.Sockets.Socket> , dass Sie zum Senden und Empfangen von Daten verwenden können.</span><span class="sxs-lookup"><span data-stu-id="87b3f-165"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> is a blocking method that returns a <xref:System.Net.Sockets.Socket> that you can use to send and receive data.</span></span> <span data-ttu-id="87b3f-166">Wenn Sie die Blockierung zu vermeiden möchten, verwenden Sie die <xref:System.Net.Sockets.TcpListener.Pending%2A> Methode, um zu bestimmen, ob die Weiterleitung von verbindungsanforderungen in der Warteschlange für eingehende Verbindungen verfügbar sind.</span><span class="sxs-lookup"><span data-stu-id="87b3f-166">If you want to avoid blocking, use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue.</span></span>  
  
 <span data-ttu-id="87b3f-167">Die <xref:System.Net.Sockets.Socket> zurückgegeben, die mit der IP-Adresse und Portnummer des Remotehosts, initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87b3f-167">The <xref:System.Net.Sockets.Socket> returned is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="87b3f-168">Können Sie eines der <xref:System.Net.Sockets.Socket.Send%2A> und <xref:System.Net.Sockets.Socket.Receive%2A> in verfügbaren Methoden der <xref:System.Net.Sockets.Socket> Klasse für die Kommunikation mit dem Remotehost.</span><span class="sxs-lookup"><span data-stu-id="87b3f-168">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="87b3f-169">Wenn Sie fertig sind mit den <xref:System.Net.Sockets.Socket>, achten Sie darauf, dass Sie zum Aufrufen der <xref:System.Net.Sockets.Socket.Close%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-169">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="87b3f-170">Wenn Ihre Anwendung relativ einfach ist, sollten Sie verwenden die <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Methode anstelle der <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-170">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="87b3f-171"><xref:System.Net.Sockets.TcpClient> bietet einfache Methoden zum Senden und Empfangen von Daten in einem Netzwerk im synchronen Modus blockiert.</span><span class="sxs-lookup"><span data-stu-id="87b3f-171"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-172">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-172">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-173">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-173">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-174">Das folgende Codebeispiel zeigt die <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Methode dient zum Zurückgeben einer <xref:System.Net.Sockets.Socket>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-174">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method is used to return a <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="87b3f-175">Dies <xref:System.Net.Sockets.Socket> wird verwendet, um mit der neu verbundenen Client zu kommunizieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-175">This <xref:System.Net.Sockets.Socket> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="87b3f-176">Der Listener wurde nicht mit einem Aufruf von <see cref="M:System.Net.Sockets.TcpListener.Start" /> gestartet.</span><span class="sxs-lookup"><span data-stu-id="87b3f-176">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocketAsync () As Task(Of Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::Socket ^&gt; ^ AcceptSocketAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocketAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;" Usage="tcpListener.AcceptSocketAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87b3f-177">Nimmt eine ausstehende Aufforderung zum Aufbau einer Verbindung als asynchroner Vorgang an.</span><span class="sxs-lookup"><span data-stu-id="87b3f-177">Accepts a pending connection request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="87b3f-178">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="87b3f-178">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="87b3f-179">Die <see cref="P:System.Threading.Tasks.Task`1.Result" />-Eigenschaft im Task-Objekt gibt <see cref="T:System.Net.Sockets.Socket" /> zurück, das verwendet wird, um Daten zu senden und zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-179">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-180">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="87b3f-180">This operation will not block.</span></span> <span data-ttu-id="87b3f-181">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Socket-Verbindung akzeptiert wurde.</span><span class="sxs-lookup"><span data-stu-id="87b3f-181">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the socket connection has been accepted.</span></span>  
  
 <span data-ttu-id="87b3f-182">Die <xref:System.Net.Sockets.Socket> in zurückgegebenen <xref:System.Threading.Tasks.Task%601> initialisiert wird, mit der IP-Adresse und Portnummer des Remotehosts.</span><span class="sxs-lookup"><span data-stu-id="87b3f-182">The <xref:System.Net.Sockets.Socket> returned in <xref:System.Threading.Tasks.Task%601> is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="87b3f-183">Können Sie eines der <xref:System.Net.Sockets.Socket.Send%2A> und <xref:System.Net.Sockets.Socket.Receive%2A> in verfügbaren Methoden der <xref:System.Net.Sockets.Socket> Klasse für die Kommunikation mit dem Remotehost.</span><span class="sxs-lookup"><span data-stu-id="87b3f-183">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="87b3f-184">Wenn Sie fertig sind mit den <xref:System.Net.Sockets.Socket>, achten Sie darauf, dass Sie zum Aufrufen der <xref:System.Net.Sockets.Socket.Close%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-184">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="87b3f-185">Wenn Ihre Anwendung relativ einfach ist, sollten Sie verwenden die <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Methode anstelle der <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-185">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> method.</span></span> <span data-ttu-id="87b3f-186"><xref:System.Net.Sockets.TcpClient> bietet einfache Methoden zum Senden und Empfangen von Daten in einem Netzwerk im synchronen Modus blockiert.</span><span class="sxs-lookup"><span data-stu-id="87b3f-186"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-187">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-187">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-188">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-188">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="87b3f-189">Der Listener wurde nicht mit einem Aufruf von <see cref="M:System.Net.Sockets.TcpListener.Start" /> gestartet.</span><span class="sxs-lookup"><span data-stu-id="87b3f-189">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClient () As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ AcceptTcpClient();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClient : unit -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.AcceptTcpClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87b3f-190">Nimmt eine ausstehende Verbindungsanforderung an.</span><span class="sxs-lookup"><span data-stu-id="87b3f-190">Accepts a pending connection request.</span></span></summary>
        <returns><span data-ttu-id="87b3f-191">Ein <see cref="T:System.Net.Sockets.TcpClient" /> zum Senden und Empfangen von Daten.</span><span class="sxs-lookup"><span data-stu-id="87b3f-191">A <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-192"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> blockierende Methode, die zurückgegeben wird ein <xref:System.Net.Sockets.TcpClient> , dass Sie zum Senden und Empfangen von Daten verwenden können.</span><span class="sxs-lookup"><span data-stu-id="87b3f-192"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> is a blocking method that returns a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="87b3f-193">Verwenden der <xref:System.Net.Sockets.TcpListener.Pending%2A> Methode, um zu bestimmen, ob die Weiterleitung von verbindungsanforderungen sind in der Warteschlange für eingehende Verbindungen verfügbar, wenn Sie die Blockierung zu vermeiden möchten.</span><span class="sxs-lookup"><span data-stu-id="87b3f-193">Use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.</span></span>  
  
 <span data-ttu-id="87b3f-194">Verwenden der <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> Methode zum Abrufen der zugrunde liegende <xref:System.Net.Sockets.NetworkStream> des zurückgegebenen <xref:System.Net.Sockets.TcpClient>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-194">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="87b3f-195">Die <xref:System.Net.Sockets.NetworkStream> erhalten Sie Methoden zum Senden und empfangen mit dem Remotehost.</span><span class="sxs-lookup"><span data-stu-id="87b3f-195">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="87b3f-196">Wenn Sie über mit sind die <xref:System.Net.Sockets.TcpClient>, achten Sie darauf, dass Sie zum Aufrufen der <xref:System.Net.Sockets.TcpClient.Close%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-196">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="87b3f-197">Wenn Sie mehr Flexibilität als möchten eine <xref:System.Net.Sockets.TcpClient> Angebote in Betracht <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-197">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-198">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-198">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-199">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-199">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-200">Das folgende Codebeispiel zeigt die <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Methode dient zum Zurückgeben einer <xref:System.Net.Sockets.TcpClient>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-200">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is used to return a <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="87b3f-201">Dies <xref:System.Net.Sockets.TcpClient> wird verwendet, um mit der neu verbundenen Client zu kommunizieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-201">This <xref:System.Net.Sockets.TcpClient> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListenerExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="87b3f-202">Der Listener wurde nicht mit einem Aufruf von <see cref="M:System.Net.Sockets.TcpListener.Start" /> gestartet.</span><span class="sxs-lookup"><span data-stu-id="87b3f-202">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="87b3f-203">Mit der <see cref="P:System.Net.Sockets.SocketException.ErrorCode" />-Eigenschaft können Sie den spezifischen Fehlercode abrufen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-203">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="87b3f-204">Wenn Sie diesen Code abgerufen haben, finden Sie in der Dokumentation zu API-Fehlercodes unter <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets, Version 2</see>, eine ausführliche Beschreibung des Fehlers.</span><span class="sxs-lookup"><span data-stu-id="87b3f-204">When you have obtained this code, you can refer to the <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see> documentation for a detailed description of the error.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClientAsync () As Task(Of TcpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::TcpClient ^&gt; ^ AcceptTcpClientAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClientAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;" Usage="tcpListener.AcceptTcpClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87b3f-205">Nimmt eine ausstehende Aufforderung zum Aufbau einer Verbindung als asynchroner Vorgang an.</span><span class="sxs-lookup"><span data-stu-id="87b3f-205">Accepts a pending connection request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="87b3f-206">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="87b3f-206">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="87b3f-207">Die <see cref="P:System.Threading.Tasks.Task`1.Result" />-Eigenschaft im Task-Objekt gibt <see cref="T:System.Net.Sockets.TcpClient" /> zurück, das verwendet wird, um Daten zu senden und zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-207">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-208">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="87b3f-208">This operation will not block.</span></span> <span data-ttu-id="87b3f-209">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die TCP-Verbindung akzeptiert wurde.</span><span class="sxs-lookup"><span data-stu-id="87b3f-209">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the TCP connection has been accepted.</span></span>  
  
 <span data-ttu-id="87b3f-210">Verwenden der <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> Methode zum Abrufen der zugrunde liegende <xref:System.Net.Sockets.NetworkStream> des zurückgegebenen <xref:System.Net.Sockets.TcpClient> in die <xref:System.Threading.Tasks.Task%601>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-210">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient> in the <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="87b3f-211">Die <xref:System.Net.Sockets.NetworkStream> erhalten Sie Methoden zum Senden und empfangen mit dem Remotehost.</span><span class="sxs-lookup"><span data-stu-id="87b3f-211">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="87b3f-212">Wenn Sie über mit sind die <xref:System.Net.Sockets.TcpClient>, achten Sie darauf, dass Sie zum Aufrufen der <xref:System.Net.Sockets.TcpClient.Close%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-212">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="87b3f-213">Wenn Sie mehr Flexibilität als möchten eine <xref:System.Net.Sockets.TcpClient> Angebote in Betracht <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> oder <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-213">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-214">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-214">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-215">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-215">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="87b3f-216">Der Listener wurde nicht mit einem Aufruf von <see cref="M:System.Net.Sockets.TcpListener.Start" /> gestartet.</span><span class="sxs-lookup"><span data-stu-id="87b3f-216">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="87b3f-217">Mit der <see cref="P:System.Net.Sockets.SocketException.ErrorCode" />-Eigenschaft können Sie den spezifischen Fehlercode abrufen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-217">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="87b3f-218">Wenn Sie diesen Code abgerufen haben, finden Sie in der Dokumentation zu API-Fehlercodes unter <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets, Version 2</see>, eine ausführliche Beschreibung des Fehlers.</span><span class="sxs-lookup"><span data-stu-id="87b3f-218">When you have obtained this code, you can refer to the <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see> documentation for a detailed description of the error.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool" Usage="System.Net.Sockets.TcpListener.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87b3f-219">Ruft einen Wert ab, der angibt, ob <see cref="T:System.Net.Sockets.TcpListener" /> Clientverbindungen aktiv überwacht.</span><span class="sxs-lookup"><span data-stu-id="87b3f-219">Gets a value that indicates whether <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening for client connections.</span></span></summary>
        <value><span data-ttu-id="87b3f-220"><see langword="true" />, wenn <see cref="T:System.Net.Sockets.TcpListener" /> aktiv überwacht, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-220"><see langword="true" /> if <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-221">Abgeleitete Klassen von <xref:System.Net.Sockets.TcpListener> können diese Eigenschaft verwenden, um zu bestimmen, ob die <xref:System.Net.Sockets.Socket> ist derzeit für eingehende Verbindungsversuche überwacht.</span><span class="sxs-lookup"><span data-stu-id="87b3f-221">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to determine if the <xref:System.Net.Sockets.Socket> is currently listening for incoming connection attempts.</span></span> <span data-ttu-id="87b3f-222">Die <xref:System.Net.Sockets.TcpClient.Active%2A> Eigenschaft kann verwendet werden, um vermeiden Sie redundante <xref:System.Net.Sockets.TcpListener.Start%2A> versucht.</span><span class="sxs-lookup"><span data-stu-id="87b3f-222">The <xref:System.Net.Sockets.TcpClient.Active%2A> property can be used to avoid redundant <xref:System.Net.Sockets.TcpListener.Start%2A> attempts.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="tcpListener.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="allowed"><span data-ttu-id="87b3f-223">Ein boolescher Wert, der angibt, ob die NAT-Überquerung aktiviert oder deaktiviert werden soll.</span><span class="sxs-lookup"><span data-stu-id="87b3f-223">A Boolean value that specifies whether to enable or disable NAT traversal.</span></span></param>
        <summary><span data-ttu-id="87b3f-224">Aktiviert oder deaktiviert die NAT-Überquerung (Netzwerkadressenübersetzung) für eine <see cref="T:System.Net.Sockets.TcpListener" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="87b3f-224">Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:System.Net.Sockets.TcpListener" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-225">Die <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> Methode dient zum Aktivieren oder deaktivieren die NAT-Durchlauf für eine <xref:System.Net.Sockets.TcpListener> Instanz.</span><span class="sxs-lookup"><span data-stu-id="87b3f-225">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span> <span data-ttu-id="87b3f-226">NAT-Durchlauf kann mit Teredo, 6to4 oder einen ISATAP-Tunnel bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87b3f-226">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="87b3f-227">Wenn die `allowed` Parameter ist "false", die <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> legen Sie die Option für den zugeordneten Socket auf <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-227">When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>.</span></span> <span data-ttu-id="87b3f-228">Dadurch werden explizit deaktiviert die NAT-Durchlauf für eine <xref:System.Net.Sockets.TcpListener> Instanz.</span><span class="sxs-lookup"><span data-stu-id="87b3f-228">This explicitly disables NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span>  
  
 <span data-ttu-id="87b3f-229">Wenn die `allowed` Parameter ist "true", die <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> legen Sie die Option für den zugeordneten Socket auf <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-229">When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="87b3f-230">Dadurch kann die NAT-Durchlauf für eine <xref:System.Net.Sockets.TcpListener> abhängig von Firewallregeln auf dem System.</span><span class="sxs-lookup"><span data-stu-id="87b3f-230">This may allow NAT traversal for a <xref:System.Net.Sockets.TcpListener> depending on firewall rules in place on the system.</span></span>  
  
 <span data-ttu-id="87b3f-231">Die <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> Methode muss aufgerufen werden, vor dem Aufrufen der <xref:System.Net.Sockets.TcpListener.Start%2A> Methode zum Beginnen des Lauschens für eingehende verbindungsanforderungen (vor der Socket gebunden ist).</span><span class="sxs-lookup"><span data-stu-id="87b3f-231">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method must be invoked prior to calling the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests (before the socket is bound).</span></span> <span data-ttu-id="87b3f-232">Wenn <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> Methode wird aufgerufen, nachdem die <xref:System.Net.Sockets.TcpListener.Start%2A> -Methode, und klicken Sie dann eine <xref:System.InvalidOperationException> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87b3f-232">If <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is called after the <xref:System.Net.Sockets.TcpListener.Start%2A> method, then an <xref:System.InvalidOperationException> will be thrown.</span></span>  
  
 <span data-ttu-id="87b3f-233">Eine Teredo-Adresse ist eine IPv6-Adresse mit dem Präfix 2001:: / 32.</span><span class="sxs-lookup"><span data-stu-id="87b3f-233">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="87b3f-234">Teredo-Adressen können über die normale DNS-namensauflösung zurückgegeben oder aufgelistet, die als IPv6-Adresse einer lokale Schnittstelle zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="87b3f-234">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="87b3f-235">Die <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />-Methode wird nach dem Aufruf der <see cref="M:System.Net.Sockets.TcpListener.Start" />-Methode aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-235">The <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> method was called after calling the <see cref="M:System.Net.Sockets.TcpListener.Start" /> method</span></span></exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptSocket (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptSocket(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptSocket : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptSocket (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="87b3f-236">Ein <see cref="T:System.AsyncCallback" />-Delegat, der auf die Methode verweist, die bei Abschluss des Vorgangs aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87b3f-236">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="87b3f-237">Ein benutzerdefiniertes Objekt, das Informationen über den Annahmevorgang enthält.</span><span class="sxs-lookup"><span data-stu-id="87b3f-237">A user-defined object containing information about the accept operation.</span></span> <span data-ttu-id="87b3f-238">Dieses Objekt wird bei Abschluss des Vorgangs an den <paramref name="callback" />-Delegaten übergeben.</span><span class="sxs-lookup"><span data-stu-id="87b3f-238">This object is passed to the <paramref name="callback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="87b3f-239">Beginnt einen asynchronen Vorgang, um eine eingehende Verbindung anzunehmen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-239">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="87b3f-240">Ein <see cref="T:System.IAsyncResult" />, das auf die asynchrone Erstellung des <see cref="T:System.Net.Sockets.Socket" /> verweist.</span><span class="sxs-lookup"><span data-stu-id="87b3f-240">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-241">Die asynchrone <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> Vorgang muss abgeschlossen sein, durch den Aufruf der <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-241">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method.</span></span> <span data-ttu-id="87b3f-242">In der Regel wird die Methode aufgerufen, indem die `callback` delegieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-242">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="87b3f-243">Diese Methode wird nicht blockiert, bis der Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="87b3f-243">This method does not block until the operation completes.</span></span> <span data-ttu-id="87b3f-244">Verwenden Sie zum Blockieren, bis der Vorgang abgeschlossen ist, die <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-244">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
 <span data-ttu-id="87b3f-245">Ausführliche Informationen zur Verwendung des asynchronen Programmiermodells finden Sie unter [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-245">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-246">Rufen Sie die <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> -Eigenschaft des zurückgegebenen <xref:System.Net.Sockets.Socket> den Hostnamen des Remotehosts Adresse und den Port identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-246">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-247">Wenn Sie erhalten eine <xref:System.Net.Sockets.SocketException>, verwenden die <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> Eigenschaft, um den spezifischen Fehlercode abzurufen, und finden in der [Fehlercode von Windows Sockets-Version 2-API](/windows/desktop/winsock/windows-sockets-error-codes-2) Dokumentation für eine ausführliche Beschreibung des Fehlers.</span><span class="sxs-lookup"><span data-stu-id="87b3f-247">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-248">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-248">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-249">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-249">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-250">Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> -Methode zum Erstellen und Verbinden eines Sockets.</span><span class="sxs-lookup"><span data-stu-id="87b3f-250">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="87b3f-251">Der Rückrufdelegat ruft die <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> Methode, um die asynchrone Anforderung zu beenden.</span><span class="sxs-lookup"><span data-stu-id="87b3f-251">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="87b3f-252">Beim Zugriff auf den Socket ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="87b3f-252">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="87b3f-253">Der <see cref="T:System.Net.Sockets.Socket" /> wurde geschlossen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-253">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptTcpClient (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptTcpClient(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptTcpClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptTcpClient (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="87b3f-254">Ein <see cref="T:System.AsyncCallback" />-Delegat, der auf die Methode verweist, die bei Abschluss des Vorgangs aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87b3f-254">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="87b3f-255">Ein benutzerdefiniertes Objekt, das Informationen über den Annahmevorgang enthält.</span><span class="sxs-lookup"><span data-stu-id="87b3f-255">A user-defined object containing information about the accept operation.</span></span> <span data-ttu-id="87b3f-256">Dieses Objekt wird bei Abschluss des Vorgangs an den <paramref name="callback" />-Delegaten übergeben.</span><span class="sxs-lookup"><span data-stu-id="87b3f-256">This object is passed to the <paramref name="callback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="87b3f-257">Beginnt einen asynchronen Vorgang, um eine eingehende Verbindung anzunehmen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-257">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="87b3f-258">Ein <see cref="T:System.IAsyncResult" />, das auf die asynchrone Erstellung des <see cref="T:System.Net.Sockets.TcpClient" /> verweist.</span><span class="sxs-lookup"><span data-stu-id="87b3f-258">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-259">Die asynchrone <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> Vorgang muss abgeschlossen sein, durch den Aufruf der <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-259">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method.</span></span> <span data-ttu-id="87b3f-260">In der Regel wird die Methode aufgerufen, indem die `callback` delegieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-260">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="87b3f-261">Diese Methode wird nicht blockiert, bis der Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="87b3f-261">This method does not block until the operation completes.</span></span> <span data-ttu-id="87b3f-262">Verwenden Sie zum Blockieren, bis der Vorgang abgeschlossen ist, die <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-262">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
 <span data-ttu-id="87b3f-263">Ausführliche Informationen zur Verwendung des asynchronen Programmiermodells finden Sie unter [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-263">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-264">Wenn Sie erhalten eine <xref:System.Net.Sockets.SocketException>, verwenden die <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> Eigenschaft, um den spezifischen Fehlercode abzurufen, und finden in der [Fehlercode von Windows Sockets-Version 2-API](/windows/desktop/winsock/windows-sockets-error-codes-2) Dokumentation für eine ausführliche Beschreibung des Fehlers.</span><span class="sxs-lookup"><span data-stu-id="87b3f-264">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-265">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-265">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-266">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-266">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-267">Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> -Methode zum Erstellen und Verbinden eines Sockets.</span><span class="sxs-lookup"><span data-stu-id="87b3f-267">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="87b3f-268">Der Rückrufdelegat ruft die <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> Methode, um die asynchrone Anforderung zu beenden.</span><span class="sxs-lookup"><span data-stu-id="87b3f-268">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="87b3f-269">Beim Zugriff auf den Socket ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="87b3f-269">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="87b3f-270">Der <see cref="T:System.Net.Sockets.Socket" /> wurde geschlossen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-270">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (port As Integer) As TcpListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Sockets::TcpListener ^ Create(int port);" />
      <MemberSignature Language="F#" Value="static member Create : int -&gt; System.Net.Sockets.TcpListener" Usage="System.Net.Sockets.TcpListener.Create port" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="87b3f-271">Der Anschluss, der auf eingehende Verbindungsversuche überwacht werden soll.</span><span class="sxs-lookup"><span data-stu-id="87b3f-271">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="87b3f-272">Erstellt eine neue auf dem angegebenen Port lauschende <see cref="T:System.Net.Sockets.TcpListener" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="87b3f-272">Creates a new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span></span></summary>
        <returns><span data-ttu-id="87b3f-273">Eine neue auf dem angegebenen Port lauschende <see cref="T:System.Net.Sockets.TcpListener" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="87b3f-273">A new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptSocket (asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAcceptSocket(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptSocket : IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="tcpListener.EndAcceptSocket asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="87b3f-274">Ein durch einen Aufruf der <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />-Methode zurückgegebenes <see cref="T:System.IAsyncResult" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-274">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="87b3f-275">Nimmt asynchron einen eingehenden Verbindungsversuch an und erstellt einen neuen <see cref="T:System.Net.Sockets.Socket" /> zum Behandeln der Remotehostkommunikation.</span><span class="sxs-lookup"><span data-stu-id="87b3f-275">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> to handle remote host communication.</span></span></summary>
        <returns><span data-ttu-id="87b3f-276">Ein <see cref="T:System.Net.Sockets.Socket" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-276">A <see cref="T:System.Net.Sockets.Socket" />.</span></span>  
  
<span data-ttu-id="87b3f-277">Ein <see cref="T:System.Net.Sockets.Socket" /> zum Senden und Empfangen von Daten.</span><span class="sxs-lookup"><span data-stu-id="87b3f-277">The <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-278">Diese Methode blockiert, bis der Vorgang ist abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-278">This method blocks until the operation is complete.</span></span> <span data-ttu-id="87b3f-279">Um diesen Vorgang synchron auszuführen, verwenden die <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-279">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-280">Rufen Sie die <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> -Eigenschaft des zurückgegebenen <xref:System.Net.Sockets.Socket> den Hostnamen des Remotehosts Adresse und den Port identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-280">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-281">Wenn Sie erhalten eine <xref:System.Net.Sockets.SocketException>, verwenden die <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> Eigenschaft, um den spezifischen Fehlercode abzurufen, und finden in der [Fehlercode von Windows Sockets-Version 2-API](/windows/desktop/winsock/windows-sockets-error-codes-2) Dokumentation für eine ausführliche Beschreibung des Fehlers.</span><span class="sxs-lookup"><span data-stu-id="87b3f-281">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-282">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-282">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-283">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-283">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-284">Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> -Methode zum Erstellen und Verbinden eines Sockets.</span><span class="sxs-lookup"><span data-stu-id="87b3f-284">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="87b3f-285">Der Rückrufdelegat ruft die <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> Methode, um die asynchrone Anforderung zu beenden.</span><span class="sxs-lookup"><span data-stu-id="87b3f-285">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="87b3f-286">Der zugrunde liegende <see cref="T:System.Net.Sockets.Socket" /> wurde geschlossen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-286">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87b3f-287">Der <paramref name="asyncResult" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-287">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87b3f-288">Der <paramref name="asyncResult" />-Parameter wurde nicht durch einen Aufruf der <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />-Methode erstellt.</span><span class="sxs-lookup"><span data-stu-id="87b3f-288">The <paramref name="asyncResult" /> parameter was not created by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="87b3f-289">Die <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />-Methode wurde bereits zuvor aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-289">The <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> method was previously called.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="87b3f-290">Fehler beim Zugriff auf den <see cref="T:System.Net.Sockets.Socket" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-290">An error occurred while attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptTcpClient (asyncResult As IAsyncResult) As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ EndAcceptTcpClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptTcpClient : IAsyncResult -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.EndAcceptTcpClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="87b3f-291">Ein durch einen Aufruf der <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />-Methode zurückgegebenes <see cref="T:System.IAsyncResult" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-291">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="87b3f-292">Nimmt asynchron einen eingehenden Verbindungsversuch an und erstellt einen neuen <see cref="T:System.Net.Sockets.TcpClient" /> zum Behandeln der Remotehostkommunikation.</span><span class="sxs-lookup"><span data-stu-id="87b3f-292">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.TcpClient" /> to handle remote host communication.</span></span></summary>
        <returns><span data-ttu-id="87b3f-293">Ein <see cref="T:System.Net.Sockets.TcpClient" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-293">A <see cref="T:System.Net.Sockets.TcpClient" />.</span></span>  
  
<span data-ttu-id="87b3f-294">Ein <see cref="T:System.Net.Sockets.TcpClient" /> zum Senden und Empfangen von Daten.</span><span class="sxs-lookup"><span data-stu-id="87b3f-294">The <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-295">Diese Methode blockiert, bis der Vorgang ist abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-295">This method blocks until the operation is complete.</span></span> <span data-ttu-id="87b3f-296">Um diesen Vorgang synchron auszuführen, verwenden die <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-296">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-297">Rufen Sie die <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> Eigenschaft für den zugrunde liegenden Socket (<xref:System.Net.Sockets.TcpClient.Client%2A>) den Hostnamen des Remotehosts Adresse und den Port identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-297">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the underlying socket (<xref:System.Net.Sockets.TcpClient.Client%2A>) to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-298">Wenn Sie erhalten eine <xref:System.Net.Sockets.SocketException>, verwenden die <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> Eigenschaft, um den spezifischen Fehlercode abzurufen, und finden in der [Fehlercode von Windows Sockets-Version 2-API](/windows/desktop/winsock/windows-sockets-error-codes-2) Dokumentation für eine ausführliche Beschreibung des Fehlers.</span><span class="sxs-lookup"><span data-stu-id="87b3f-298">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-299">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-299">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-300">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-300">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-301">Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> -Methode zum Erstellen und Verbinden eines Sockets.</span><span class="sxs-lookup"><span data-stu-id="87b3f-301">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="87b3f-302">Der Rückrufdelegat ruft die <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> Methode, um die asynchrone Anforderung zu beenden.</span><span class="sxs-lookup"><span data-stu-id="87b3f-302">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87b3f-303">Ruft einen <see cref="T:System.Boolean" />-Wert ab, der angibt, ob der <see cref="T:System.Net.Sockets.TcpListener" /> das Überwachen eines bestimmten Anschlusses durch nur einen einzigen zugrunde liegenden Socket zulässt, oder legt diesen fest.</span><span class="sxs-lookup"><span data-stu-id="87b3f-303">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one underlying socket to listen to a specific port.</span></span></summary>
        <value><span data-ttu-id="87b3f-304"><see langword="true" />, wenn der <see cref="T:System.Net.Sockets.TcpListener" /> das Überwachen eines bestimmten Anschlusses durch nur einen einzigen <see cref="T:System.Net.Sockets.TcpListener" /> zulässt, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-304"><see langword="true" /> if the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one <see cref="T:System.Net.Sockets.TcpListener" /> to listen to a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="87b3f-305">sein.</span><span class="sxs-lookup"><span data-stu-id="87b3f-305">.</span></span> <span data-ttu-id="87b3f-306">Für Windows Server 2003 und Windows XP Service Pack 2 oder höher ist der Standardwert <see langword="true" />, für alle anderen Versionen <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-306">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-307">Standardmäßig können mehrere Listener zu einem bestimmten Port lauschen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-307">By default, multiple listeners can listen to a specific port.</span></span> <span data-ttu-id="87b3f-308">Allerdings kann nur einer der Listener Vorgänge für den Netzwerkdatenverkehr an den Port gesendete ausführen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-308">However, only one of the listeners can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="87b3f-309">Wenn mehrere Listener versucht, die für einen bestimmten Port binden, verarbeitet der Auftrag mit dem die spezifische IP-Adresse den Netzwerkdatenverkehr an diesen Port gesendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="87b3f-309">If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port.</span></span> <span data-ttu-id="87b3f-310">Sie können die <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> Eigenschaft, um zu verhindern, dass mehrere Listener zu einem bestimmten Port überwacht.</span><span class="sxs-lookup"><span data-stu-id="87b3f-310">You can use the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property to prevent multiple listeners from listening to a specific port.</span></span>  
  
 <span data-ttu-id="87b3f-311">Legen Sie diese Eigenschaft vor dem Aufruf <xref:System.Net.Sockets.TcpListener.Start%2A>, oder rufen Sie die <xref:System.Net.Sockets.TcpListener.Stop%2A> Methode, und Sie diese Eigenschaft festlegen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-311">Set this property before calling <xref:System.Net.Sockets.TcpListener.Start%2A>, or call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method and then set this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-312">Im folgenden Codebeispiel wird ermittelt und definiert die <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="87b3f-312">The following code example gets and sets the <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="87b3f-313">Der <see cref="T:System.Net.Sockets.TcpListener" /> wurde gestartet.</span><span class="sxs-lookup"><span data-stu-id="87b3f-313">The <see cref="T:System.Net.Sockets.TcpListener" /> has been started.</span></span> <span data-ttu-id="87b3f-314">Rufen Sie die <see cref="M:System.Net.Sockets.TcpListener.Stop" />-Methode auf, und legen Sie anschließend die <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" />-Eigenschaft fest.</span><span class="sxs-lookup"><span data-stu-id="87b3f-314">Call the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method and then set the <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> property.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="87b3f-315">Fehler beim Zugriff auf den zugrunde liegenden Socket.</span><span class="sxs-lookup"><span data-stu-id="87b3f-315">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="87b3f-316">Der zugrunde liegende <see cref="T:System.Net.Sockets.Socket" /> wurde geschlossen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-316">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpListener ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="tcpListener.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87b3f-317">Gibt von der <see cref="T:System.Net.Sockets.TcpListener" />-Klasse verwendete Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="87b3f-317">Frees resources used by the <see cref="T:System.Net.Sockets.TcpListener" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="87b3f-318">Die <xref:System.Net.Sockets.TcpListener> Klasse zugeordnete Ressourcen der Finalizer-frei der <xref:System.Net.Sockets.TcpListener> Instanz.</span><span class="sxs-lookup"><span data-stu-id="87b3f-318">The <xref:System.Net.Sockets.TcpListener> class finalizer free resources associated with the <xref:System.Net.Sockets.TcpListener> instance.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndpoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndpoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalEndpoint : System.Net.EndPoint" Usage="System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87b3f-319">Ruft den zugrunde liegenden <see cref="T:System.Net.EndPoint" /> des aktuellen <see cref="T:System.Net.Sockets.TcpListener" /> ab.</span><span class="sxs-lookup"><span data-stu-id="87b3f-319">Gets the underlying <see cref="T:System.Net.EndPoint" /> of the current <see cref="T:System.Net.Sockets.TcpListener" />.</span></span></summary>
        <value><span data-ttu-id="87b3f-320">Der <see cref="T:System.Net.EndPoint" />, an den der <see cref="T:System.Net.Sockets.Socket" /> gebunden ist.</span><span class="sxs-lookup"><span data-stu-id="87b3f-320">The <see cref="T:System.Net.EndPoint" /> to which the <see cref="T:System.Net.Sockets.Socket" /> is bound.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-321">Sie können die <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> Eigenschaft, um die LAN-Schnittstelle und den Port identifizieren, zum Lauschen auf eingehende Anforderungen für die Client-Verbindung, nachdem eine Socket-Verbindung hergestellt wurde.</span><span class="sxs-lookup"><span data-stu-id="87b3f-321">You can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made.</span></span> <span data-ttu-id="87b3f-322">Sie müssen diese zunächst umwandeln <xref:System.Net.EndPoint> auf eine <xref:System.Net.IPEndPoint>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-322">You must first cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="87b3f-323">Rufen Sie anschließend die <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> Eigenschaft, um die lokale IP-Adresse abzurufen und die <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> Eigenschaft, um die lokale Portnummer abzurufen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-323">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> property to retrieve the local IP address, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> property to retrieve the local port number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-324">Im folgenden Codebeispiel wird die lokale IP-Adresse und Port-Nummer angezeigt, auf dem die <xref:System.Net.Sockets.TcpListener> Lauscht auf eingehende verbindungsanforderungen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-324">The following code example displays the local IP address and port number on which the <xref:System.Net.Sockets.TcpListener> is listening for incoming connection requests.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberSignature Language="VB.NET" Value="Public Function Pending () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Pending();" />
      <MemberSignature Language="F#" Value="member this.Pending : unit -&gt; bool" Usage="tcpListener.Pending " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87b3f-325">Bestimmt, ob ausstehende Verbindungsanforderungen vorliegen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-325">Determines if there are pending connection requests.</span></span></summary>
        <returns><span data-ttu-id="87b3f-326"><see langword="true" />, wenn Verbindungen ausstehen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-326"><see langword="true" /> if connections are pending; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-327">Diese Methode nicht blockierend ermittelt, ob alle ausstehende verbindungsanforderungen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-327">This non-blocking method determines if there are any pending connection requests.</span></span> <span data-ttu-id="87b3f-328">Da der <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> und <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Methoden blockiert die Ausführung, bis der <xref:System.Net.Sockets.TcpListener.Start%2A> Methode verfügt über eine eingehende verbindungsanforderung, in der Warteschlange der <xref:System.Net.Sockets.TcpListener.Pending%2A> Methode kann verwendet werden, um zu bestimmen, ob die Verbindungen zur Verfügung stehen, bevor Sie versuchen, die die Bedingungen akzeptieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-328">Because the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> and <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> methods block execution until the <xref:System.Net.Sockets.TcpListener.Start%2A> method has queued an incoming connection request, the <xref:System.Net.Sockets.TcpListener.Pending%2A> method can be used to determine if connections are available before attempting to accept them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-329">Im folgenden Codebeispiel wird überprüft die <xref:System.Net.Sockets.TcpListener.Pending%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-329">The following code example checks the <xref:System.Net.Sockets.TcpListener.Pending%2A> method.</span></span> <span data-ttu-id="87b3f-330">Wenn eine verbindungsanforderung wartet, um akzeptiert zu werden, klicken Sie dann einen Aufruf der <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Methode erfolgt.</span><span class="sxs-lookup"><span data-stu-id="87b3f-330">If a connection request is waiting to be accepted, then a call to the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is made.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="87b3f-331">Der Listener wurde nicht mit einem Aufruf von <see cref="M:System.Net.Sockets.TcpListener.Start" /> gestartet.</span><span class="sxs-lookup"><span data-stu-id="87b3f-331">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Server : System.Net.Sockets.Socket" Usage="System.Net.Sockets.TcpListener.Server" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87b3f-332">Ruft den zugrunde liegenden Netzwerk-<see cref="T:System.Net.Sockets.Socket" /> ab.</span><span class="sxs-lookup"><span data-stu-id="87b3f-332">Gets the underlying network <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="87b3f-333">Der zugrundeliegende <see cref="T:System.Net.Sockets.Socket" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-333">The underlying <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-334"><xref:System.Net.Sockets.TcpListener> erstellt eine <xref:System.Net.Sockets.Socket> zum Lauschen auf eingehende Clientanforderungen Verbindung.</span><span class="sxs-lookup"><span data-stu-id="87b3f-334"><xref:System.Net.Sockets.TcpListener> creates a <xref:System.Net.Sockets.Socket> to listen for incoming client connection requests.</span></span> <span data-ttu-id="87b3f-335">Abgeleitete Klassen von <xref:System.Net.Sockets.TcpListener> können diese Eigenschaft verwenden, um dieses <xref:System.Net.Sockets.Socket>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-335">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to get this <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="87b3f-336">Verwenden Sie das zugrunde liegende <xref:System.Net.Sockets.Socket> zurückgegebenes der <xref:System.Net.Sockets.TcpListener.Server%2A> Eigenschaft, wenn Sie benötigen Zugriff auf darüber hinaus die <xref:System.Net.Sockets.TcpListener> enthält.</span><span class="sxs-lookup"><span data-stu-id="87b3f-336">Use the underlying <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpListener.Server%2A> property if you require access beyond that which <xref:System.Net.Sockets.TcpListener> provides.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-337">Die <xref:System.Net.Sockets.TcpListener.Server%2A> Eigenschaft gibt nur zurück, die <xref:System.Net.Sockets.Socket> zum Lauschen auf eingehende Clientanforderungen Verbindung verwendet.</span><span class="sxs-lookup"><span data-stu-id="87b3f-337">The <xref:System.Net.Sockets.TcpListener.Server%2A> property only returns the <xref:System.Net.Sockets.Socket> used to listen for incoming client connection requests.</span></span> <span data-ttu-id="87b3f-338">Verwenden der <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Methode akzeptiert eine ausstehende verbindungsanforderung an und erhalten eine <xref:System.Net.Sockets.Socket> für das Senden und Empfangen von Daten.</span><span class="sxs-lookup"><span data-stu-id="87b3f-338">Use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.Socket> for sending and receiving data.</span></span> <span data-ttu-id="87b3f-339">Sie können auch der <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Methode akzeptiert eine ausstehende verbindungsanforderung an und erhalten eine <xref:System.Net.Sockets.TcpClient> für das Senden und Empfangen von Daten.</span><span class="sxs-lookup"><span data-stu-id="87b3f-339">You can also use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.TcpClient> for sending and receiving data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-340">Im folgenden Codebeispiel wird die Verwendung des <xref:System.Net.Sockets.TcpListener.Server%2A>-Attributs veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="87b3f-340">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.Server%2A> property.</span></span> <span data-ttu-id="87b3f-341">Die zugrunde liegende <xref:System.Net.Sockets.Socket> abgerufen wird und die <xref:System.Net.Sockets.SocketOptionName.Linger> <xref:System.Net.Sockets.Socket> Option wird zu einem Timeout nach 10 Sekunden konfiguriert, wenn die Daten immer noch im Netzwerkpuffer verbleibt, nachdem die Verbindung geschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="87b3f-341">The underlying <xref:System.Net.Sockets.Socket> is retrieved and the <xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.</span></span>  
  
 [!code-csharp[TcpListenerProtectedMembers1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87b3f-342">Beginnt die Überwachung von eingehenden Verbindungsanforderungen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-342">Starts listening for incoming connection requests.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="tcpListener.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87b3f-343">Beginnt die Überwachung von eingehenden Verbindungsanforderungen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-343">Starts listening for incoming connection requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-344">Die <xref:System.Net.Sockets.TcpListener.Start%2A> Methode initialisiert die zugrunde liegende <xref:System.Net.Sockets.Socket>, bindet es an einem lokalen Endpunkt und Lauscht auf eingehende Verbindungsversuche.</span><span class="sxs-lookup"><span data-stu-id="87b3f-344">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="87b3f-345">Wenn eine verbindungsanforderung eingeht, die <xref:System.Net.Sockets.TcpListener.Start%2A> Methode die Anforderung in die Warteschlange und weiterhin zusätzliche Anforderungen warten, bis zum Aufruf der <xref:System.Net.Sockets.TcpListener.Stop%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-345">If a connection request is received, the <xref:System.Net.Sockets.TcpListener.Start%2A> method will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="87b3f-346">Wenn <xref:System.Net.Sockets.TcpListener> eine verbindungsanforderung empfängt, nachdem es bereits die maximale Anzahl von Verbindungen in die Warteschlange eingereiht wurde, löst es eine <xref:System.Net.Sockets.SocketException> auf dem Client.</span><span class="sxs-lookup"><span data-stu-id="87b3f-346">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections, it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="87b3f-347">Um eine Verbindung aus der Warteschlange für eingehende Verbindungen zu entfernen, verwenden Sie entweder die <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Methode oder der <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-347">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="87b3f-348">Die <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Methode eine Verbindung aus der Warteschlange entfernt und zurückgegeben wird ein <xref:System.Net.Sockets.TcpClient> , dass Sie zum Senden und Empfangen von Daten verwenden können.</span><span class="sxs-lookup"><span data-stu-id="87b3f-348">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="87b3f-349">Die <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Methode gibt eine <xref:System.Net.Sockets.Socket> , Sie verwenden können, können Sie das gleiche erreichen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-349">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="87b3f-350">Wenn Ihre Anwendung nur synchrone e/a erfordert, verwenden Sie <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-350">If your application only requires synchronous I/O, use <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="87b3f-351">Detaillierte Verhalten Steuerelement verwenden <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-351">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span> <span data-ttu-id="87b3f-352">Beide Methoden blockiert, bis eine verbindungsanforderung, in der Warteschlange verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="87b3f-352">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="87b3f-353">Verwenden der <xref:System.Net.Sockets.TcpListener.Stop%2A> Methode zum Schließen der <xref:System.Net.Sockets.TcpListener> und Beenden der Überwachung.</span><span class="sxs-lookup"><span data-stu-id="87b3f-353">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="87b3f-354">Sie sind verantwortlich für das Schließen von der zulässigen Verbindungen getrennt.</span><span class="sxs-lookup"><span data-stu-id="87b3f-354">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-355">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-355">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-356">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-356">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-357">Im folgenden Codebeispiel wird veranschaulicht, wie <xref:System.Net.Sockets.TcpListener.Start%2A> wird verwendet, um das Lauschen auf eingehende Verbindungsversuche des Clients.</span><span class="sxs-lookup"><span data-stu-id="87b3f-357">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="87b3f-358">Mit der <see cref="P:System.Net.Sockets.SocketException.ErrorCode" />-Eigenschaft können Sie den spezifischen Fehlercode abrufen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-358">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="87b3f-359">Wenn Sie diesen Code abgerufen haben, finden Sie in der Dokumentation zu API-Fehlercodes unter <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets, Version 2</see>, eine ausführliche Beschreibung des Fehlers.</span><span class="sxs-lookup"><span data-stu-id="87b3f-359">When you have obtained this code, you can refer to the <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see> documentation for a detailed description of the error.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(int backlog);" />
      <MemberSignature Language="F#" Value="member this.Start : int -&gt; unit" Usage="tcpListener.Start backlog" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="backlog"><span data-ttu-id="87b3f-360">Die maximale Länge der Warteschlange für ausstehende Verbindungen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-360">The maximum length of the pending connections queue.</span></span></param>
        <summary><span data-ttu-id="87b3f-361">Beginnt die Überwachung eingehender Verbindungsanforderungen mit einer maximalen Anzahl ausstehender Verbindungen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-361">Starts listening for incoming connection requests with a maximum number of pending connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-362">Die <xref:System.Net.Sockets.TcpListener.Start%2A> Methode initialisiert die zugrunde liegende <xref:System.Net.Sockets.Socket>, bindet es an einem lokalen Endpunkt und Lauscht auf eingehende Verbindungsversuche.</span><span class="sxs-lookup"><span data-stu-id="87b3f-362">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="87b3f-363">Wenn eine verbindungsanforderung eingeht, <xref:System.Net.Sockets.TcpListener.Start%2A> wird die Anforderung in die Warteschlange und weiterhin zusätzliche Anforderungen warten, bis zum Aufruf der <xref:System.Net.Sockets.TcpListener.Stop%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-363">If a connection request is received, <xref:System.Net.Sockets.TcpListener.Start%2A> will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="87b3f-364">Wenn <xref:System.Net.Sockets.TcpListener> eine verbindungsanforderung empfängt, nachdem es bereits die maximale Anzahl von Verbindungen in der Warteschlange wurde es löst eine <xref:System.Net.Sockets.SocketException> auf dem Client.</span><span class="sxs-lookup"><span data-stu-id="87b3f-364">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="87b3f-365">Um eine Verbindung aus der Warteschlange für eingehende Verbindungen zu entfernen, verwenden Sie entweder die <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Methode oder der <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-365">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="87b3f-366">Die <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Methode eine Verbindung aus der Warteschlange entfernt und zurückgegeben wird ein <xref:System.Net.Sockets.TcpClient> , dass Sie zum Senden und Empfangen von Daten verwenden können.</span><span class="sxs-lookup"><span data-stu-id="87b3f-366">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="87b3f-367">Die <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Methode gibt eine <xref:System.Net.Sockets.Socket> , Sie verwenden können, können Sie das gleiche erreichen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-367">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="87b3f-368">Wenn Ihre Anwendung nur synchrone e/a erfordert, verwenden Sie die <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-368">If your application only requires synchronous I/O, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="87b3f-369">Detaillierte Verhalten Steuerelement verwenden <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="87b3f-369">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="87b3f-370">Beide Methoden blockiert, bis eine verbindungsanforderung, in der Warteschlange verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="87b3f-370">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="87b3f-371">Verwenden der <xref:System.Net.Sockets.TcpListener.Stop%2A> Methode zum Schließen der <xref:System.Net.Sockets.TcpListener> und Beenden der Überwachung.</span><span class="sxs-lookup"><span data-stu-id="87b3f-371">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="87b3f-372">Sie sind verantwortlich für das Schließen von der zulässigen Verbindungen getrennt.</span><span class="sxs-lookup"><span data-stu-id="87b3f-372">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-373">Verwenden Sie die <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>-Eigenschaft, um den spezifischen Fehlercode abzurufen. In der Dokumentation zu API-Fehlercodes unter [Windows Sockets, Version 2](/windows/desktop/winsock/windows-sockets-error-codes-2) finden Sie eine ausführliche Beschreibung des Fehlers.</span><span class="sxs-lookup"><span data-stu-id="87b3f-373">Use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-374">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-374">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-375">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-375">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-376">Im folgenden Codebeispiel wird veranschaulicht, wie <xref:System.Net.Sockets.TcpListener.Start%2A> wird verwendet, um das Lauschen auf eingehende Verbindungsversuche des Clients.</span><span class="sxs-lookup"><span data-stu-id="87b3f-376">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="87b3f-377">Fehler beim Zugriff auf den Socket.</span><span class="sxs-lookup"><span data-stu-id="87b3f-377">An error occurred while accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87b3f-378">Der <paramref name="backlog" />-Parameter ist kleiner als 0 (null) oder übersteigt die maximale Anzahl zulässiger Verbindungen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-378">The <paramref name="backlog" /> parameter is less than zero or exceeds the maximum number of permitted connections.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="87b3f-379">Der zugrunde liegende <see cref="T:System.Net.Sockets.Socket" /> ist NULL.</span><span class="sxs-lookup"><span data-stu-id="87b3f-379">The underlying <see cref="T:System.Net.Sockets.Socket" /> is null.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="tcpListener.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87b3f-380">Schließt den Listener.</span><span class="sxs-lookup"><span data-stu-id="87b3f-380">Closes the listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b3f-381"><xref:System.Net.Sockets.TcpListener.Stop%2A> Schließt den Listener.</span><span class="sxs-lookup"><span data-stu-id="87b3f-381"><xref:System.Net.Sockets.TcpListener.Stop%2A> closes the listener.</span></span> <span data-ttu-id="87b3f-382">Alle nicht akzeptierten verbindungsanforderungen in der Warteschlange gehen verloren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-382">Any unaccepted connection requests in the queue will be lost.</span></span> <span data-ttu-id="87b3f-383">Remotehosts wartet auf eine Verbindung zu akzeptierende löst eine <xref:System.Net.Sockets.SocketException>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-383">Remote hosts waiting for a connection to be accepted will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="87b3f-384">Sie sind verantwortlich für das Schließen von der zulässigen Verbindungen getrennt.</span><span class="sxs-lookup"><span data-stu-id="87b3f-384">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b3f-385">Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87b3f-385">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="87b3f-386">Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="87b3f-386">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b3f-387">Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Net.Sockets.TcpListener.Stop%2A> Methode zum Schließen der zugrunde liegende <xref:System.Net.Sockets.Socket>.</span><span class="sxs-lookup"><span data-stu-id="87b3f-387">The following code example demonstrates using the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the underlying <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="87b3f-388">Mit der <see cref="P:System.Net.Sockets.SocketException.ErrorCode" />-Eigenschaft können Sie den spezifischen Fehlercode abrufen.</span><span class="sxs-lookup"><span data-stu-id="87b3f-388">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="87b3f-389">Wenn Sie diesen Code abgerufen haben, finden Sie in der Dokumentation zu API-Fehlercodes unter <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets, Version 2</see>, eine ausführliche Beschreibung des Fehlers.</span><span class="sxs-lookup"><span data-stu-id="87b3f-389">When you have obtained this code, you can refer to the <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see> documentation for a detailed description of the error.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="87b3f-390">Die <see cref="M:System.Net.Sockets.TcpListener.Stop" /> auch Methode schließt den zugrunde liegenden <see cref="T:System.Net.Sockets.Socket" />, und erstellt einen neuen <see cref="T:System.Net.Sockets.Socket" /> für die <see cref="T:System.Net.Sockets.TcpListener" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-390">The <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method also closes the underlying <see cref="T:System.Net.Sockets.Socket" />, and creates a new <see cref="T:System.Net.Sockets.Socket" /> for the <see cref="T:System.Net.Sockets.TcpListener" />.</span></span> <span data-ttu-id="87b3f-391">Wenn Sie keine Eigenschaften für den zugrunde liegenden festlegen <see cref="T:System.Net.Sockets.Socket" /> vor dem Aufrufen der <see cref="M:System.Net.Sockets.TcpListener.Stop" /> -Methode, diese Eigenschaften werden nicht übertragen auf die neue <see cref="T:System.Net.Sockets.Socket" />.</span><span class="sxs-lookup"><span data-stu-id="87b3f-391">If you set any properties on the underlying <see cref="T:System.Net.Sockets.Socket" /> prior to calling the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method, those properties will not carry over to the new <see cref="T:System.Net.Sockets.Socket" />.</span></span></para></block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
  </Members>
</Type>
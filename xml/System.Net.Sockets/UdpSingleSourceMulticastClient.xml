<Type Name="UdpSingleSourceMulticastClient" FullName="System.Net.Sockets.UdpSingleSourceMulticastClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3323028bdc232ba978870f33c6458f41dd0c5153" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37643662" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UdpSingleSourceMulticastClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpSingleSourceMulticastClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpSingleSourceMulticastClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpSingleSourceMulticastClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpSingleSourceMulticastClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A client receiver for multicast traffic from a single source, also known as Source Specific Multicast (SSM).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Adresse der Multicastgruppe und Absenderadresse für die Quelle müssen bekannt sein.  
  
 Zusätzlich zum Empfangen von multicast-Daten von einem bestimmten Absender, die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> Client kann auch bestimmte Daten zurück an den Absender senden.  
  
 Um Multicast aus mehreren Quellen empfangen werden soll, oder verwenden Sie bei der die Quellen im Voraus bekannt sind die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> stattdessen.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpSingleSourceMulticastClient (System.Net.IPAddress sourceAddress, System.Net.IPAddress groupAddress, int localPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress sourceAddress, class System.Net.IPAddress groupAddress, int32 localPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sourceAddress As IPAddress, groupAddress As IPAddress, localPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpSingleSourceMulticastClient(System::Net::IPAddress ^ sourceAddress, System::Net::IPAddress ^ groupAddress, int localPort);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpSingleSourceMulticastClient : System.Net.IPAddress * System.Net.IPAddress * int -&gt; System.Net.Sockets.UdpSingleSourceMulticastClient" Usage="new System.Net.Sockets.UdpSingleSourceMulticastClient (sourceAddress, groupAddress, localPort)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sourceAddress" Type="System.Net.IPAddress" />
        <Parameter Name="groupAddress" Type="System.Net.IPAddress" />
        <Parameter Name="localPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceAddress">The sender source address for this receiver to subscribe to.</param>
        <param name="groupAddress">The multicast group address for this receiver to subscribe to.</param>
        <param name="localPort">The local port for this receiver to bind to.</param>
        <summary>Creates a new <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> UDP client that can subscribe to a group address and receive datagrams from a single source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> Konstruktor ordnet einen multicast-UDP-Socket eine Gruppenadresse und den Port, jedoch keine Bindung oder verwenden Sie andernfalls den Socket.  
  
 Die `groupAddress` Parameter ist möglicherweise ein IPv6 oder IPv4-Multicast Adresse. Allerdings die Adressfamilie des der `sourceAddress` und `groupAddress` Parameter müssen identisch.  
  
 Die `localPort` Parameter muss nicht angegeben werden, einen Port an, der kleiner als 1.024.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceAddress" /> and <paramref name="groupAddress" /> must be the same address family.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceAddress" /> is a null reference (Nothing in Visual Basic).  -or-  <paramref name="groupAddress" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="localPort" /> is less than 0  -or-  <paramref name="localPort" /> is greater than 65,535.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="localPort" /> is less than 1024</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginJoinGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginJoinGroup (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginJoinGroup(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginJoinGroup (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginJoinGroup(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginJoinGroup : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginJoinGroup (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">A callback method to invoke when the operation completes.</param>
        <param name="state">Optional state information to pass to the <c>callback</c> method for this operation.</param>
        <summary>Binds the socket and begins a join operation to the multicast group to allow datagrams to be received from a single source address.</summary>
        <returns>Returns <see cref="T:System.IAsyncResult" />.  An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup%2A> -Methode einen UDP-multicast-Socket an einen lokalen Anschluss gebunden und Verknüpfungen eine Multicastgruppe, damit Datagramme von einer einzelnen Quelladresse empfangen werden können. Die Adresse der Multicastgruppe einzelnen Quelladresse, lokaler Port zum Binden an angegeben sind, und der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> Konstruktor.  
  
 Die Methode angegeben, der `callback` Parameter wird aufgerufen, wenn es sich bei Abschluss des Vorgangs, der die Multicastgruppe herzustellen.  
  
 Bei Bedarf durch die Runtime die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup%2A> Methode führt auch eine richtlinienüberprüfung, um sicherzustellen, dass der Client die multicast-Gruppe zugreifen darf. Wenn der Client Access, nicht zulässig ist eine <xref:System.Net.Sockets.SocketException> ausgelöst und <xref:System.Net.Sockets.SocketError.AccessDenied>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The multicast group has already been joined or a join operation is currently in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFromSource">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFromSource (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFromSource(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFromSource (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFromSource(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveFromSource : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginReceiveFromSource (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer to store the received data.</param>
        <param name="offset">The offset, in bytes, from the beginning of the <c>buffer</c> where the data should be stored.</param>
        <param name="count">The maximum number of bytes to receive and store in the <c>buffer</c>.</param>
        <param name="callback">The callback method to invoke when the operation completes.</param>
        <param name="state">Optional state information to pass to the <c>callback</c> method for this operation.</param>
        <summary>Begins the operation of receiving a packet from the joined multicast group and invokes the specified callback when a packet has arrived on the group from a specified sender.</summary>
        <returns>Returns <see cref="T:System.IAsyncResult" />.  An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> Methode startet einen Vorgang ein UDP-Paket aus der verknüpften Multicastgruppe einen einzelnen Absender empfangen. Der lokale Port multicast-Gruppe, Absender-Quelladresse angegeben sind, und der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> Konstruktor. Der Multicastclient muss auch eine Verknüpfung für die Multicastgruppe abgeschlossen haben.  
  
 Die Methode angegeben, der `callback` Parameter wird aufgerufen, wenn ein Paket empfangen wurde.  
  
 Es ist möglich, einen Socket-Fehler haben, wenn ein Receive-Vorgang synchron ein Fehler auftritt, obwohl dies selten mit UDP ist. Wenn ein Socket-Fehler auftritt, eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> is less than 0  -or-  <paramref name="offset" /> is greater than the length of the <paramref name="buffer" />.  -or-  <paramref name="count" /> is less than 0  -or-  <paramref name="offset" /> plus the count is greater than the length of the <paramref name="buffer" />.</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket for receiving.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendToSource">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendToSource (byte[] buffer, int offset, int count, int remotePort, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendToSource(unsigned int8[] buffer, int32 offset, int32 count, int32 remotePort, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource(System.Byte[],System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendToSource (buffer As Byte(), offset As Integer, count As Integer, remotePort As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendToSource(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, int remotePort, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendToSource : byte[] * int * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginSendToSource (buffer, offset, count, remotePort, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="remotePort" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer that contains the data to send.</param>
        <param name="offset">The offset, in bytes, from the beginning of the <c>buffer</c> to read the data to be sent.</param>
        <param name="count">The number of bytes to send from the <c>buffer</c>.</param>
        <param name="remotePort">The remote port to which the packet is to be sent. The remote address is specified by the <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" /> constructor.</param>
        <param name="callback">The callback method to invoke when the operation completes.</param>
        <param name="state">Optional state information to pass to the <c>callback</c> method for this operation.</param>
        <summary>Begins the operation of sending a unicast packet to the source previously specified.</summary>
        <returns>Returns <see cref="T:System.IAsyncResult" />.  An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> Methode startet einen Vorgang ein UDP-Paket an die zuvor angegebene Quelle gesendet.  
  
 Einige Protokolle werden diese Informationen verwenden, flusssteuerung, Qualität der Dienststatistiken oder Wiederherstellung Nachrichten übergeben.  
  
 Die Methode angegeben, der `callback` Parameter wird aufgerufen, wenn ein Paket gesendet wurde.  
  
 Der Client muss eine Verknüpfung für die Multicastgruppe abgeschlossen haben.  
  
 Wenn in der Zielport angegeben die `remotePort` -Parameter ist kleiner als 1.024, eine <xref:System.Net.Sockets.SocketException> ausgelöst und <xref:System.Net.Sockets.SocketError.AccessDenied>.  
  
 Es ist möglich, einen Socket-Fehler Ausfall ein Sendevorgangs synchron ist, auch wenn dies mit UDP-ungewöhnlich ist. Wenn ein Socket-Fehler auftritt, eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> is less than 0  -or-  <paramref name="offset" /> is greater than the length of the <paramref name="buffer" />.  -or-  <paramref name="count" /> is less than 0  -or-  <paramref name="offset" /> plus the count is greater than the length of the <paramref name="buffer" />.  -or-  <paramref name="remotePort" /> is less than 0 or greater than 65,535.</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpSingleSourceMulticastClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Leaves the multicast group and releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> class and the underlying the <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> auf, wenn Sie <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> nicht mehr benötigen. Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A>-Methode bewirkt, dass <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> nicht mehr verwendet werden kann. Nach dem Aufruf <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A>, Sie müssen alle Verweise auf Freigeben der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> belegt wurde.  
  
 Rufen Sie immer <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> freigeben. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient>-Methode des <xref:System.Object.Finalize%2A>-Objekts aufruft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndJoinGroup">
      <MemberSignature Language="C#" Value="public void EndJoinGroup (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndJoinGroup(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndJoinGroup (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndJoinGroup(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndJoinGroup : IAsyncResult -&gt; unit" Usage="udpSingleSourceMulticastClient.EndJoinGroup result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The result of the asynchronous join operation.</param>
        <summary>Completes the asynchronous join group operation to a multicast group.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup%2A> Methode schließt eine asynchrone Bindung an ein Socket und Join-Vorgang an eine Multicastgruppe.  
  
 Bei Bedarf durch die Runtime die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup%2A> Methode führt auch eine richtlinienüberprüfung, um sicherzustellen, dass der Client die multicast-Gruppe zugreifen darf. Wenn der Client Access, nicht zulässig ist eine <xref:System.Net.Sockets.SocketException> ausgelöst und <xref:System.Net.Sockets.SocketError.AccessDenied>.  
  
 Bei ein Socket Fehler beim Ausführen der Verknüpfungsvorgang für die Gruppe, ein <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFromSource">
      <MemberSignature Language="C#" Value="public int EndReceiveFromSource (IAsyncResult result, out int sourcePort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFromSource(class System.IAsyncResult result, [out] int32&amp; sourcePort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource(System.IAsyncResult,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFromSource (result As IAsyncResult, ByRef sourcePort As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFromSource(IAsyncResult ^ result, [Runtime::InteropServices::Out] int % sourcePort);" />
      <MemberSignature Language="F#" Value="member this.EndReceiveFromSource : IAsyncResult *  -&gt; int" Usage="udpSingleSourceMulticastClient.EndReceiveFromSource (result, sourcePort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="sourcePort" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">The result of the asynchronous receive operation.</param>
        <param name="sourcePort">The source endpoint where the packet was received from.</param>
        <summary>Completes the asynchronous operation of receiving a packet from the joined multicast group and provides the information received.</summary>
        <returns>Returns <see cref="T:System.Int32" />.  The length, in bytes, of the message stored in the <paramref name="buffer" /> parameter passed to the <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A> Methode schließt einen asynchronen Vorgang zum Empfangen eines Pakets aus einer einzelnen Quelle in einer Multicastgruppe.  
  
 Wenn ein Socket-Fehler, beim Ausführen des Empfangsvorgangs vorliegt eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendToSource">
      <MemberSignature Language="C#" Value="public void EndSendToSource (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendToSource(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendToSource (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendToSource(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndSendToSource : IAsyncResult -&gt; unit" Usage="udpSingleSourceMulticastClient.EndSendToSource result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The result of the asynchronous send operation.</param>
        <summary>Completes the operation of sending a unicast packet to a single source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource%2A> Methode schließt einen asynchronen Vorgang zum Senden eines Pakets an einzelne Quelle, die zuvor angegeben haben.  
  
 Wenn ein Socket-Fehler, beim Ausführen des Empfangsvorgangs vorliegt eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> is a null reference (Nothing in Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the size, in bytes, of the receive buffer of the <see cref="T:System.Net.Sockets.Socket" /> used for multicast receive operations on this <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> instance.</summary>
        <value>Gibt <see cref="T:System.Int32" />zurück.  Die Größe des Empfangspuffers in Bytes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `ReceiveBufferSize` Eigenschaft ruft ab oder legt die Größe in Bytes des Empfangspuffers des zugrunde liegenden <xref:System.Net.Sockets.Socket> für multicastempfangsvorgänge für diese verwendete <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> Instanz. Insbesondere die `ReceiveBufferSize` Eigenschaft steuert die Größe des Puffers durch den Stapel verwendet werden, wenn ein Paket empfangen, aber die Anwendung noch nicht aufgerufen wurde. die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> Methode. Wenn dieser Puffer gefüllt ruft und Pakete, bevor Sie die Anwendung ruft treffen weiterhin die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> und <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A> Methoden, alte Pakete gelöscht werden. Die Anwendung werden nie die alte Pakete empfangen, und erhalten Sie stattdessen neuer Pakete beim Aufruf der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> Methode.  
  
 Die Standardgröße des Empfangspuffers in Windows ist 8.192.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The buffer size specified is less than 0.</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the size, in bytes, of the send buffer of the <see cref="T:System.Net.Sockets.Socket" /> used for multicast send operations on this <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> instance.</summary>
        <value>Gibt <see cref="T:System.Int32" />zurück.  Die Größe des Sendepuffers in Byte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ruft die SendBufferSize (Eigenschaft) ab oder legt die Größe des Sendepuffers des zugrunde liegenden in Bytes <xref:System.Net.Sockets.Socket> für multicastsendevorgänge in dieser verwendet <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> Instanz.  
  
 Unter Mac OS X die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> -Eigenschaft steuert, wie viele Bytes in den Netzwerkstapel warten auf den gesendet Puffer vor dem zusätzlichen Aufrufe an die verwendet werden können die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> Scheitern der Methode. Anwendungen unter Mac OS X können mit dieser Eigenschaft sein, wenn sie eine große Anzahl von UDP-Pakete innerhalb eines kurzen Zeitraums gesendet werden müssen.  
  
 Auf Windows, Aufrufe von der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> Methode zum Aufrufen des Rückrufs abhängig vom Wert länger dauert die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> Eigenschaft, wenn der Sendepuffer voll ist. Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> Eigenschaft nur steuert, ob der Benutzer die Puffer bleibt im physischen Speicher gesperrt, bis der Sendevorgang abgeschlossen ist.  
  
 Die Standardgröße des Sendepuffers in Windows ist 8.192.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The buffer size specified is less than 0.</exception>
        <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
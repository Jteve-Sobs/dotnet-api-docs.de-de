<Type Name="UdpSingleSourceMulticastClient" FullName="System.Net.Sockets.UdpSingleSourceMulticastClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9eb81441e483a85c9c2256e50ce009ef6eb76c41" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70518671" /></Metadata><TypeSignature Language="C#" Value="public class UdpSingleSourceMulticastClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpSingleSourceMulticastClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpSingleSourceMulticastClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpSingleSourceMulticastClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpSingleSourceMulticastClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Ein Clientempfänger für Multicastdatenverkehr von einer einzelnen Quelle, wird auch als Source Specific Multicast (SSM) bezeichnet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Multicast Gruppen Adresse und Absender Quelladresse müssen bekannt sein.  
  
 Zusätzlich zum Empfangen von Multicast Daten von einem bestimmten Absender kann der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> Client auch Unicastdaten an den Absender zurücksenden.  
  
 Verwenden Sie stattdessen die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> -Klasse, um Multicast von mehreren Quellen zu empfangen, oder wenn die Quellen im Voraus nicht bekannt sind.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpSingleSourceMulticastClient (System.Net.IPAddress sourceAddress, System.Net.IPAddress groupAddress, int localPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress sourceAddress, class System.Net.IPAddress groupAddress, int32 localPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sourceAddress As IPAddress, groupAddress As IPAddress, localPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpSingleSourceMulticastClient(System::Net::IPAddress ^ sourceAddress, System::Net::IPAddress ^ groupAddress, int localPort);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpSingleSourceMulticastClient : System.Net.IPAddress * System.Net.IPAddress * int -&gt; System.Net.Sockets.UdpSingleSourceMulticastClient" Usage="new System.Net.Sockets.UdpSingleSourceMulticastClient (sourceAddress, groupAddress, localPort)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sourceAddress" Type="System.Net.IPAddress" />
        <Parameter Name="groupAddress" Type="System.Net.IPAddress" />
        <Parameter Name="localPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceAddress">Die Absenderquelladresse, die dieser Empfänger abonnieren soll.</param>
        <param name="groupAddress">Die Multicastgruppenadresse, die dieser Empfänger abonnieren soll.</param>
        <param name="localPort">Der lokale Port, an den dieser Empfänger binden soll.</param>
        <summary>Erstellt einen neuen <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />-UDP-Client, der eine Gruppenadresse abonnieren und Datagramme aus einer einzelnen Quelle empfangen kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> Konstruktor ordnet einen UDP-Multicast-Socket einer Gruppen Adresse und einem Port zu, bindet den Socket aber nicht oder verwendet ihn anderweitig.  
  
 Der `groupAddress` -Parameter kann entweder eine IPv6-oder IPv4-Multicast Adresse sein. Die Adressfamilie des `sourceAddress` -Parameters und des- `groupAddress` Parameters muss jedoch identisch sein.  
  
 Der `localPort` -Parameter darf keinen Port angeben, der kleiner als 1.024 ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceAddress" /> und <paramref name="groupAddress" /> müssen der gleichen Adressfamilie angehören.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceAddress" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).  
  
- oder - 
 <paramref name="groupAddress" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="localPort" /> ist kleiner als 0. 
- oder - 
 <paramref name="localPort" /> ist größer als 65.535.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="localPort" /> ist kleiner als 1.024.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginJoinGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginJoinGroup (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginJoinGroup(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginJoinGroup (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginJoinGroup(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginJoinGroup : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginJoinGroup (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">Eine Rückrufmethode, die beim Abschließen des Vorgangs aufgerufen werden soll.</param>
        <param name="state">Optionale Zustandsinformationen, die an die <paramref name="callback" />-Methode für diesen Vorgang übergeben werden sollen.</param>
        <summary>Bindet den Socket und beginnt mit einem Beitrittsvorgang für die Multicastgruppe, damit Datagramme von einer einzelnen Quelladresse empfangen werden können.</summary>
        <returns>Ein <see cref="T:System.IAsyncResult" />, das auf diesen Vorgang verweist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup%2A> -Methode bindet einen UDP-Multicast-Socket an einen lokalen Port und verknüpft eine Multicast Gruppe, damit Datagramme von einer einzelnen Quelladresse empfangen werden können. Die Multicast Gruppen Adresse, einzelne Quelladresse und der lokale Port, an den die Bindung erfolgen soll <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> , werden im Konstruktor angegeben.  
  
 Die im `callback` -Parameter angegebene Methode wird aufgerufen, wenn der Vorgang zum Beitreten zur Multicast Gruppe abgeschlossen wurde.  
  
 Wenn dies für die Laufzeit erforderlich ist <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup%2A> , führt die-Methode auch eine Richtlinien Überprüfung durch, um zu überprüfen, ob der Client Zugriff auf die Multicast Gruppe hat. Wenn der Client keinen Zugriff hat, wird eine <xref:System.Net.Sockets.SocketException> mit <xref:System.Net.Sockets.SocketError.AccessDenied>der ausgelöst.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde bereits zusammengeführt, oder ein Beitrittsvorgang wird derzeit ausgeführt.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Fehler beim Versuch, auf den Socket zuzugreifen.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFromSource">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFromSource (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFromSource(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFromSource (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFromSource(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveFromSource : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginReceiveFromSource (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Der Puffer zum Speichern der empfangenen Daten.</param>
        <param name="offset">Der Offset, in Bytes, ab dem Anfang des <paramref name="buffer" />s, in dem die Daten gespeichert werden sollen.</param>
        <param name="count">Die maximale Anzahl der zu empfangenden und im <paramref name="buffer" /> zu speichernden Bytes.</param>
        <param name="callback">Die Rückrufmethode, die beim Abschließen des Vorgangs aufgerufen werden soll.</param>
        <param name="state">Optionale Zustandsinformationen, die an die <paramref name="callback" />-Methode für diesen Vorgang übergeben werden sollen.</param>
        <summary>Startet das Empfangen eines Pakets von einer verknüpften Multicastgruppe und ruft den angegebenen Rückruf auf, wenn ein Paket von einem bestimmten Absender in der Gruppe angekommen ist.</summary>
        <returns>Ein <see cref="T:System.IAsyncResult" />, das auf diesen Vorgang verweist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> -Methode startet einen Vorgang, bei dem ein UDP-Paket von der verbundenen Multicast Gruppe von einem einzelnen Absender empfangen wird. Der lokale Port, die Multicast Gruppe und die Absender Quelladresse werden im <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> Konstruktor angegeben. Der Multicast Client muss außerdem einen Join mit der Multicast Gruppe abgeschlossen haben.  
  
 Die im `callback` -Parameter angegebene Methode wird aufgerufen, wenn ein Paket empfangen wurde.  
  
 Ein Socketfehler kann auftreten, wenn ein Empfangsvorgang synchron fehlschlägt, obwohl dies bei UDP nicht üblich ist. Wenn ein Socketfehler auftritt, <xref:System.Net.Sockets.SocketException> wird eine ausgelöst. Der empfangene Fehler wird als Member der <xref:System.Net.Sockets.SocketError> -Enumeration angegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> ist kleiner als 0. 
- oder - 
 <paramref name="offset" /> ist größer als die Länge von <paramref name="buffer" />.  
  
- oder - 
 <paramref name="count" /> ist kleiner als 0. 
- oder - 
 <paramref name="offset" /> plus die Anzahl ist größer als die Länge von <paramref name="buffer" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde noch nicht zusammengeführt.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde gelöscht.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Fehler beim Versuch, auf den Socket zum Empfangen zuzugreifen.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendToSource">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendToSource (byte[] buffer, int offset, int count, int remotePort, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendToSource(unsigned int8[] buffer, int32 offset, int32 count, int32 remotePort, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource(System.Byte[],System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendToSource (buffer As Byte(), offset As Integer, count As Integer, remotePort As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendToSource(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, int remotePort, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendToSource : byte[] * int * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginSendToSource (buffer, offset, count, remotePort, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="remotePort" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Der Puffer, der die zu sendenden Daten enthält.</param>
        <param name="offset">Der Offset in Bytes ab dem Anfang vom <paramref name="buffer" />, aus dem die zu sendenden Daten gelesen werden sollen.</param>
        <param name="count">Die Anzahl von Bytes, die aus dem <paramref name="buffer" /> gesendet werden sollen.</param>
        <param name="remotePort">Der Remoteport, an den das Paket gesendet werden soll. Die Remoteadresse wird durch den <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" />-Konstruktor angegeben.</param>
        <param name="callback">Die Rückrufmethode, die beim Abschließen des Vorgangs aufgerufen werden soll.</param>
        <param name="state">Optionale Zustandsinformationen, die an die <paramref name="callback" />-Methode für diesen Vorgang übergeben werden sollen.</param>
        <summary>Startet den Vorgang, bei dem ein Unicastpaket an die zuvor angegebene Quelle gesendet wird.</summary>
        <returns>Ein <see cref="T:System.IAsyncResult" />, das auf diesen Vorgang verweist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> -Methode startet einen Vorgang zum Senden eines UDP-Pakets an die zuvor angegebene Quelle.  
  
 In einigen Protokollen werden diese Informationen verwendet, um Fluss Steuerung, Qualität von Dienst Statistiken oder Wiederherstellungs Nachrichten zu übergeben.  
  
 Die im `callback` -Parameter angegebene Methode wird aufgerufen, wenn ein Paket gesendet wurde.  
  
 Der Client muss einen Join mit der Multicast Gruppe abgeschlossen haben.  
  
 Wenn der im `remotePort` -Parameter angegebene Zielport kleiner als 1.024 ist, wird <xref:System.Net.Sockets.SocketException> eine mit <xref:System.Net.Sockets.SocketError.AccessDenied>der ausgelöst.  
  
 Ein Socketfehler kann auftreten, wenn ein Sendevorgang synchron fehlschlägt, obwohl dies bei UDP nicht üblich ist. Wenn ein Socketfehler auftritt, <xref:System.Net.Sockets.SocketException> wird eine ausgelöst. Der empfangene Fehler wird als Member der <xref:System.Net.Sockets.SocketError> -Enumeration angegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> ist kleiner als 0. 
- oder - 
 <paramref name="offset" /> ist größer als die Länge von <paramref name="buffer" />.  
  
- oder - 
 <paramref name="count" /> ist kleiner als 0. 
- oder - 
 <paramref name="offset" /> plus die Anzahl ist größer als die Länge von <paramref name="buffer" />.  
  
- oder - 
 <paramref name="remotePort" /> ist kleiner als 0 oder größer als 65.535.</exception>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde noch nicht zusammengeführt.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Fehler beim Versuch, auf den Socket zuzugreifen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpSingleSourceMulticastClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verlässt die Multicastgruppe und gibt alle Ressourcen frei, die von der aktuellen Instanz der <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />-Klasse und dem zugrunde liegenden <see cref="T:System.Net.Sockets.Socket" /> verwendet wurden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> auf, wenn Sie <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> nicht mehr benötigen. Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A>-Methode bewirkt, dass <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> nicht mehr verwendet werden kann. Nach dem <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A>Aufrufen von müssen Sie alle Verweise auf den <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> freigeben, damit der Garbage Collector den Speicher freigeben kann <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> , den der belegt hat.  
  
 Rufen Sie immer <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> freigeben. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient>-Methode des <xref:System.Object.Finalize%2A>-Objekts aufruft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndJoinGroup">
      <MemberSignature Language="C#" Value="public void EndJoinGroup (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndJoinGroup(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndJoinGroup (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndJoinGroup(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndJoinGroup : IAsyncResult -&gt; unit" Usage="udpSingleSourceMulticastClient.EndJoinGroup result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Das Ergebnis des asynchronen Beitrittsvorgangs.</param>
        <summary>Beendet den asynchronen Beitrittsvorgang für eine Multicastgruppe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup%2A> -Methode schließt eine asynchrone Bindung an einen Socket und einen Joinvorgang an eine Multicast Gruppe ab.  
  
 Wenn dies für die Laufzeit erforderlich ist <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup%2A> , führt die-Methode auch eine Richtlinien Überprüfung durch, um zu überprüfen, ob der Client Zugriff auf die Multicast Gruppe hat. Wenn der Client keinen Zugriff hat, wird eine <xref:System.Net.Sockets.SocketException> mit <xref:System.Net.Sockets.SocketError.AccessDenied>der ausgelöst.  
  
 Wenn beim Ausführen des Vorgangs der joingruppe ein Socketfehler auftritt, <xref:System.Net.Sockets.SocketException> wird eine ausgelöst. Der empfangene Fehler wird als Member der <xref:System.Net.Sockets.SocketError> -Enumeration angegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Fehler beim Versuch, auf den Socket zuzugreifen.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFromSource">
      <MemberSignature Language="C#" Value="public int EndReceiveFromSource (IAsyncResult result, out int sourcePort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFromSource(class System.IAsyncResult result, [out] int32&amp; sourcePort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource(System.IAsyncResult,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFromSource (result As IAsyncResult, ByRef sourcePort As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFromSource(IAsyncResult ^ result, [Runtime::InteropServices::Out] int % sourcePort);" />
      <MemberSignature Language="F#" Value="member this.EndReceiveFromSource : IAsyncResult *  -&gt; int" Usage="udpSingleSourceMulticastClient.EndReceiveFromSource (result, sourcePort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="sourcePort" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">Das Ergebnis des asynchronen Empfangsvorgangs.</param>
        <param name="sourcePort">Der Quellendpunkt, von dem das Paket empfangen wurde.</param>
        <summary>Schließt den asynchronen Empfangsvorgang des Pakets aus der verknüpften Multicastgruppe ab und stellt die empfangenen Informationen bereit.</summary>
        <returns>Die Länge der Nachricht (in Byte), die im <paramref name="buffer" />-Parameter gespeichert wurde, der an die <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />-Methode übergeben wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A> -Methode schließt einen asynchronen Vorgang ab, um ein Paket von einer einzelnen Quelle in einer Multicast Gruppe zu empfangen.  
  
 Wenn beim Ausführen des Empfangs Vorgangs ein Socketfehler auftritt, wird <xref:System.Net.Sockets.SocketException> eine ausgelöst. Der empfangene Fehler wird als Member der <xref:System.Net.Sockets.SocketError> -Enumeration angegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde noch nicht zusammengeführt.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Fehler beim Versuch, auf den Socket zuzugreifen.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendToSource">
      <MemberSignature Language="C#" Value="public void EndSendToSource (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendToSource(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendToSource (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendToSource(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndSendToSource : IAsyncResult -&gt; unit" Usage="udpSingleSourceMulticastClient.EndSendToSource result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Das Ergebnis des asynchronen Sendevorgangs.</param>
        <summary>Schließt den Vorgang ab, bei dem ein Unicastpaket an eine einzelne Quelle gesendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource%2A> -Methode schließt einen asynchronen Vorgang ab, um ein Paket an eine zuvor angegebene einzige Quelle zu senden.  
  
 Wenn beim Ausführen des Empfangs Vorgangs ein Socketfehler auftritt, wird <xref:System.Net.Sockets.SocketException> eine ausgelöst. Der empfangene Fehler wird als Member der <xref:System.Net.Sockets.SocketError> -Enumeration angegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde noch nicht zusammengeführt.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Fehler beim Versuch, auf den Socket zuzugreifen.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Größe des Empfangspuffers (in Bytes) des <see cref="T:System.Net.Sockets.Socket" /> ab, der für Multicastempfangsvorgänge in dieser <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> -Instanz verwendet wird, oder legt sie fest.</summary>
        <value>Gibt <see cref="T:System.Int32" /> zurück.  
  
Die Größe des Empfangspuffers in Bytes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `ReceiveBufferSize` -Eigenschaft ruft die Größe (in Bytes) des Empfangspuffers des zugrunde liegenden <xref:System.Net.Sockets.Socket> ab, der für Multicast Empfangs Vorgänge in <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> dieser Instanz verwendet wird, oder legt diese fest. Insbesondere steuert die `ReceiveBufferSize` -Eigenschaft die Größe des Puffers, der vom Stapel verwendet wird, wenn ein Paket eintrifft, aber die Anwendung hat die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> -Methode noch nicht aufgerufen. Wenn dieser Puffer aufgefüllt wird und die Pakete weiterkommen, bevor die Anwendung die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> - <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A> Methode und die-Methode aufruft, werden alte Pakete gelöscht. Die Anwendung kann niemals die alten Pakete empfangen und erhält beim Aufrufen der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> -Methode stattdessen neuere Pakete.  
  
 Die Standardgröße des Empfangspuffers unter Windows ist 8.192.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die angegebene Puffergröße ist kleiner als 0.</exception>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde noch nicht zusammengeführt.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Dient zum Abrufen oder Festlegen der Größe des Sendepuffers (in Byte) des <see cref="T:System.Net.Sockets.Socket" />, der für Multicastsendevorgänge in dieser <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />-Instanz verwendet wird.</summary>
        <value>Gibt <see cref="T:System.Int32" /> zurück.  
  
Die Größe (in Bytes) des Sendepuffers.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die SendBufferSize-Eigenschaft ruft die Größe (in Bytes) des Sendepuffers des zugrunde liegenden <xref:System.Net.Sockets.Socket> ab, der für Multicast Sende Vorgänge in dieser <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> Instanz verwendet wird, oder legt Sie fest.  
  
 Auf Mac OS X steuert die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> -Eigenschaft, wie viele Bytes im Warteschlange-Puffer des Netzwerk Stapels liegen können, bevor bei zusätzlichen Aufrufen der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> -Methode Fehler auftreten. Anwendungen auf Mac OS X müssen möglicherweise diese Eigenschaft betreffen, wenn Sie in kurzer Zeit eine große Anzahl von UDP-Paketen senden.  
  
 Unter Windows dauert es länger, <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> bis Aufrufe der-Methode den Rückruf aufrufen, abhängig vom Wert <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> der-Eigenschaft, wenn der Sendepuffer voll ist. Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> -Eigenschaft steuert nur, ob der Puffer des Benutzers im physischen Speicher gesperrt bleibt, bis der Sendevorgang abgeschlossen ist.  
  
 Die Standardgröße des Sendepuffers unter Windows ist 8.192.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die angegebene Puffergröße ist kleiner als 0.</exception>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde noch nicht zusammengeführt.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

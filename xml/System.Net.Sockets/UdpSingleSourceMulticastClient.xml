<Type Name="UdpSingleSourceMulticastClient" FullName="System.Net.Sockets.UdpSingleSourceMulticastClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a553abd55c19fb7eb8aa7d1d2a17e152cd4d47d5" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39753515" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UdpSingleSourceMulticastClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpSingleSourceMulticastClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpSingleSourceMulticastClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpSingleSourceMulticastClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpSingleSourceMulticastClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Ein Clientempfänger für Multicastdatenverkehr von einer einzelnen Quelle, wird auch als Source Specific Multicast (SSM) bezeichnet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Adresse der Multicastgruppe und Absenderadresse für die Quelle müssen bekannt sein.  
  
 Zusätzlich zum Empfangen von multicast-Daten von einem bestimmten Absender, die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> Client kann auch bestimmte Daten zurück an den Absender senden.  
  
 Um Multicast aus mehreren Quellen empfangen werden soll, oder verwenden Sie bei der die Quellen im Voraus bekannt sind die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> stattdessen.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpSingleSourceMulticastClient (System.Net.IPAddress sourceAddress, System.Net.IPAddress groupAddress, int localPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress sourceAddress, class System.Net.IPAddress groupAddress, int32 localPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sourceAddress As IPAddress, groupAddress As IPAddress, localPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpSingleSourceMulticastClient(System::Net::IPAddress ^ sourceAddress, System::Net::IPAddress ^ groupAddress, int localPort);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpSingleSourceMulticastClient : System.Net.IPAddress * System.Net.IPAddress * int -&gt; System.Net.Sockets.UdpSingleSourceMulticastClient" Usage="new System.Net.Sockets.UdpSingleSourceMulticastClient (sourceAddress, groupAddress, localPort)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sourceAddress" Type="System.Net.IPAddress" />
        <Parameter Name="groupAddress" Type="System.Net.IPAddress" />
        <Parameter Name="localPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceAddress">Die Absenderquelladresse, die dieser Empfänger abonnieren soll.</param>
        <param name="groupAddress">Die Multicastgruppenadresse, die dieser Empfänger abonnieren soll.</param>
        <param name="localPort">Der lokale Port, an den dieser Empfänger binden soll.</param>
        <summary>Erstellt einen neuen <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />-UDP-Client, der eine Gruppenadresse abonnieren und Datagramme von einer einzelnen Quelle empfangen kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> Konstruktor ordnet einen multicast-UDP-Socket eine Gruppenadresse und den Port, jedoch keine Bindung oder verwenden Sie andernfalls den Socket.  
  
 Die `groupAddress` Parameter ist möglicherweise ein IPv6 oder IPv4-Multicast Adresse. Allerdings die Adressfamilie des der `sourceAddress` und `groupAddress` Parameter müssen identisch.  
  
 Die `localPort` Parameter muss nicht angegeben werden, einen Port an, der kleiner als 1.024.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceAddress" /> und <paramref name="groupAddress" /> müssen die gleiche Adressfamilie sein.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceAddress" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).  
  
- oder -  
 <paramref name="groupAddress" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="localPort" /> ist kleiner als 0. 
- oder -  
 <paramref name="localPort" /> ist größer als 65.535.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="localPort" /> ist kleiner als 1.024.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginJoinGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginJoinGroup (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginJoinGroup(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginJoinGroup (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginJoinGroup(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginJoinGroup : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginJoinGroup (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">Eine Rückrufmethode, die beim Abschließen des Vorgangs aufgerufen werden soll.</param>
        <param name="state">Optionale Zustandsinformationen, die an die <c>callback</c>-Methode für diesen Vorgang übergeben werden sollen.</param>
        <summary>Bindet den Socket und beginnt mit einem Beitrittsvorgang für die Multicastgruppe, damit Datagramme von einer einzelnen Quelladresse empfangen werden können.</summary>
        <returns>Gibt <see cref="T:System.IAsyncResult" />zurück.  
  
Ein <see cref="T:System.IAsyncResult" />, das auf diesen Vorgang verweist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup%2A> -Methode einen UDP-multicast-Socket an einen lokalen Anschluss gebunden und Verknüpfungen eine Multicastgruppe, damit Datagramme von einer einzelnen Quelladresse empfangen werden können. Die Adresse der Multicastgruppe einzelnen Quelladresse, lokaler Port zum Binden an angegeben sind, und der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> Konstruktor.  
  
 Die Methode angegeben, der `callback` Parameter wird aufgerufen, wenn es sich bei Abschluss des Vorgangs, der die Multicastgruppe herzustellen.  
  
 Bei Bedarf durch die Runtime die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup%2A> Methode führt auch eine richtlinienüberprüfung, um sicherzustellen, dass der Client die multicast-Gruppe zugreifen darf. Wenn der Client Access, nicht zulässig ist eine <xref:System.Net.Sockets.SocketException> ausgelöst und <xref:System.Net.Sockets.SocketError.AccessDenied>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde bereits zusammengeführt, oder ein Beitrittsvorgang wird derzeit ausgeführt.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Fehler beim Versuch, auf den Socket zuzugreifen.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFromSource">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFromSource (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFromSource(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFromSource (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFromSource(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveFromSource : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginReceiveFromSource (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Der Puffer zum Speichern der empfangenen Daten.</param>
        <param name="offset">Der Offset, in Bytes, ab dem Anfang von <c>buffer</c>, wo die Daten gespeichert werden sollen.</param>
        <param name="count">Die maximale Anzahl der zu empfangenden und in <c>buffer</c> zu speichernden Bytes.</param>
        <param name="callback">Die Rückrufmethode, die beim Abschließen des Vorgangs aufgerufen werden soll.</param>
        <param name="state">Optionale Zustandsinformationen, die an die <c>callback</c>-Methode für diesen Vorgang übergeben werden sollen.</param>
        <summary>Startet das Empfangen eines Pakets von einer verknüpften Multicastgruppe und ruft den angegebenen Rückruf auf, wenn ein Paket von einem bestimmten Absender in der Gruppe angekommen ist.</summary>
        <returns>Gibt <see cref="T:System.IAsyncResult" />zurück.  
  
Ein <see cref="T:System.IAsyncResult" />, das auf diesen Vorgang verweist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> Methode startet einen Vorgang ein UDP-Paket aus der verknüpften Multicastgruppe einen einzelnen Absender empfangen. Der lokale Port multicast-Gruppe, Absender-Quelladresse angegeben sind, und der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> Konstruktor. Der Multicastclient muss auch eine Verknüpfung für die Multicastgruppe abgeschlossen haben.  
  
 Die Methode angegeben, der `callback` Parameter wird aufgerufen, wenn ein Paket empfangen wurde.  
  
 Es ist möglich, einen Socket-Fehler haben, wenn ein Receive-Vorgang synchron ein Fehler auftritt, obwohl dies selten mit UDP ist. Wenn ein Socket-Fehler auftritt, eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> ist kleiner als 0. 
- oder -  
 <paramref name="offset" /> ist größer als die Länge von <paramref name="buffer" />.  
  
- oder -  
 <paramref name="count" /> ist kleiner als 0. 
- oder -  
 <paramref name="offset" /> plus die Anzahl ist größer als die Länge von <paramref name="buffer" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde noch nicht zusammengeführt.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Fehler beim Versuch, auf den Socket zum Empfangen zuzugreifen.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendToSource">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendToSource (byte[] buffer, int offset, int count, int remotePort, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendToSource(unsigned int8[] buffer, int32 offset, int32 count, int32 remotePort, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource(System.Byte[],System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendToSource (buffer As Byte(), offset As Integer, count As Integer, remotePort As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendToSource(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, int remotePort, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendToSource : byte[] * int * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginSendToSource (buffer, offset, count, remotePort, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="remotePort" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Der Puffer, der die zu sendenden Daten enthält.</param>
        <param name="offset">Der Offset in Bytes ab dem Anfang von <c>buffer</c>, aus dem die zu sendenden Daten gelesen werden sollen.</param>
        <param name="count">Die Anzahl von Bytes, die aus <c>buffer</c> gesendet werden sollen.</param>
        <param name="remotePort">Der Remoteport, an den das Paket gesendet werden soll. Die Remoteadresse wird durch den <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" />-Konstruktor angegeben.</param>
        <param name="callback">Die Rückrufmethode, die beim Abschließen des Vorgangs aufgerufen werden soll.</param>
        <param name="state">Optionale Zustandsinformationen, die an die <c>callback</c>-Methode für diesen Vorgang übergeben werden sollen.</param>
        <summary>Startet den Vorgang, bei dem ein Unicastpaket an die zuvor angegebene Quelle gesendet wird.</summary>
        <returns>Gibt <see cref="T:System.IAsyncResult" />zurück.  
  
Ein <see cref="T:System.IAsyncResult" />, das auf diesen Vorgang verweist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> Methode startet einen Vorgang ein UDP-Paket an die zuvor angegebene Quelle gesendet.  
  
 Einige Protokolle werden diese Informationen verwenden, flusssteuerung, Qualität der Dienststatistiken oder Wiederherstellung Nachrichten übergeben.  
  
 Die Methode angegeben, der `callback` Parameter wird aufgerufen, wenn ein Paket gesendet wurde.  
  
 Der Client muss eine Verknüpfung für die Multicastgruppe abgeschlossen haben.  
  
 Wenn in der Zielport angegeben die `remotePort` -Parameter ist kleiner als 1.024, eine <xref:System.Net.Sockets.SocketException> ausgelöst und <xref:System.Net.Sockets.SocketError.AccessDenied>.  
  
 Es ist möglich, einen Socket-Fehler Ausfall ein Sendevorgangs synchron ist, auch wenn dies mit UDP-ungewöhnlich ist. Wenn ein Socket-Fehler auftritt, eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> ist kleiner als 0. 
- oder -  
 <paramref name="offset" /> ist größer als die Länge von <paramref name="buffer" />.  
  
- oder -  
 <paramref name="count" /> ist kleiner als 0. 
- oder -  
 <paramref name="offset" /> plus die Anzahl ist größer als die Länge von <paramref name="buffer" />.  
  
- oder -  
 <paramref name="remotePort" /> ist kleiner als 0 oder größer als 65.535.</exception>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde noch nicht zusammengeführt.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Fehler beim Versuch, auf den Socket zuzugreifen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpSingleSourceMulticastClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verlässt die Multicastgruppe und gibt alle Ressourcen frei, die von der aktuellen Instanz der <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />-Klasse und dem zugrunde liegenden <see cref="T:System.Net.Sockets.Socket" /> verwendet wurden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> auf, wenn Sie <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> nicht mehr benötigen. Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A>-Methode bewirkt, dass <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> nicht mehr verwendet werden kann. Nach dem Aufruf <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A>, Sie müssen alle Verweise auf Freigeben der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> belegt wurde.  
  
 Rufen Sie immer <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> freigeben. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient>-Methode des <xref:System.Object.Finalize%2A>-Objekts aufruft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndJoinGroup">
      <MemberSignature Language="C#" Value="public void EndJoinGroup (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndJoinGroup(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndJoinGroup (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndJoinGroup(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndJoinGroup : IAsyncResult -&gt; unit" Usage="udpSingleSourceMulticastClient.EndJoinGroup result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Das Ergebnis des asynchronen Beitrittsvorgangs.</param>
        <summary>Beendet den asynchronen Beitrittsvorgang für eine Multicastgruppe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup%2A> Methode schließt eine asynchrone Bindung an ein Socket und Join-Vorgang an eine Multicastgruppe.  
  
 Bei Bedarf durch die Runtime die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup%2A> Methode führt auch eine richtlinienüberprüfung, um sicherzustellen, dass der Client die multicast-Gruppe zugreifen darf. Wenn der Client Access, nicht zulässig ist eine <xref:System.Net.Sockets.SocketException> ausgelöst und <xref:System.Net.Sockets.SocketError.AccessDenied>.  
  
 Bei ein Socket Fehler beim Ausführen der Verknüpfungsvorgang für die Gruppe, ein <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Fehler beim Versuch, auf den Socket zuzugreifen.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFromSource">
      <MemberSignature Language="C#" Value="public int EndReceiveFromSource (IAsyncResult result, out int sourcePort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFromSource(class System.IAsyncResult result, [out] int32&amp; sourcePort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource(System.IAsyncResult,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFromSource (result As IAsyncResult, ByRef sourcePort As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFromSource(IAsyncResult ^ result, [Runtime::InteropServices::Out] int % sourcePort);" />
      <MemberSignature Language="F#" Value="member this.EndReceiveFromSource : IAsyncResult *  -&gt; int" Usage="udpSingleSourceMulticastClient.EndReceiveFromSource (result, sourcePort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="sourcePort" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">Das Ergebnis des asynchronen Empfangsvorgangs.</param>
        <param name="sourcePort">Der Quellendpunkt, von dem das Paket empfangen wurde.</param>
        <summary>Schließt den asynchronen Empfangsvorgang des Pakets aus der verknüpften Multicastgruppe ab und stellt die empfangenen Informationen bereit.</summary>
        <returns>Gibt <see cref="T:System.Int32" />zurück.  
  
Die Länge der Nachricht (in Byte), die im <paramref name="buffer" />-Parameter gespeichert wurde, der an die <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />-Methode übergeben wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A> Methode schließt einen asynchronen Vorgang zum Empfangen eines Pakets aus einer einzelnen Quelle in einer Multicastgruppe.  
  
 Wenn ein Socket-Fehler, beim Ausführen des Empfangsvorgangs vorliegt eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde noch nicht zusammengeführt.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Fehler beim Versuch, auf den Socket zuzugreifen.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendToSource">
      <MemberSignature Language="C#" Value="public void EndSendToSource (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendToSource(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendToSource (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendToSource(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndSendToSource : IAsyncResult -&gt; unit" Usage="udpSingleSourceMulticastClient.EndSendToSource result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Das Ergebnis des asynchronen Sendevorgangs.</param>
        <summary>Schließt den Vorgang ab, bei dem ein Unicastpaket an eine einzelne Quelle gesendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource%2A> Methode schließt einen asynchronen Vorgang zum Senden eines Pakets an einzelne Quelle, die zuvor angegeben haben.  
  
 Wenn ein Socket-Fehler, beim Ausführen des Empfangsvorgangs vorliegt eine <xref:System.Net.Sockets.SocketException> ausgelöst. Der Fehler wird angegeben, als ein Mitglied der <xref:System.Net.Sockets.SocketError> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde noch nicht zusammengeführt.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Fehler beim Versuch, auf den Socket zuzugreifen.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Größe des Empfangspuffers (in Bytes) des <see cref="T:System.Net.Sockets.Socket" /> ab, der für Multicastempfangsvorgänge in dieser <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />-Instanz verwendet wird, oder legt sie fest.</summary>
        <value>Gibt <see cref="T:System.Int32" />zurück.  
  
Die Größe des Empfangspuffers in Bytes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `ReceiveBufferSize` Eigenschaft ruft ab oder legt die Größe in Bytes des Empfangspuffers des zugrunde liegenden <xref:System.Net.Sockets.Socket> für multicastempfangsvorgänge für diese verwendete <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> Instanz. Insbesondere die `ReceiveBufferSize` Eigenschaft steuert die Größe des Puffers durch den Stapel verwendet werden, wenn ein Paket empfangen, aber die Anwendung noch nicht aufgerufen wurde. die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> Methode. Wenn dieser Puffer gefüllt ruft und Pakete, bevor Sie die Anwendung ruft treffen weiterhin die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> und <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A> Methoden, alte Pakete gelöscht werden. Die Anwendung werden nie die alte Pakete empfangen, und erhalten Sie stattdessen neuer Pakete beim Aufruf der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> Methode.  
  
 Die Standardgröße des Empfangspuffers in Windows ist 8.192.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die angegebene Puffergröße ist kleiner als 0.</exception>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde noch nicht zusammengeführt.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Dient zum Abrufen oder Festlegen der Größe des Sendepuffers (in Byte) des <see cref="T:System.Net.Sockets.Socket" />, der für Multicastsendevorgänge in dieser <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />-Instanz verwendet wird.</summary>
        <value>Gibt <see cref="T:System.Int32" />zurück.  
  
Die Größe des Sendepuffers in Byte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ruft die SendBufferSize (Eigenschaft) ab oder legt die Größe des Sendepuffers des zugrunde liegenden in Bytes <xref:System.Net.Sockets.Socket> für multicastsendevorgänge in dieser verwendet <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> Instanz.  
  
 Unter Mac OS X die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> -Eigenschaft steuert, wie viele Bytes in den Netzwerkstapel warten auf den gesendet Puffer vor dem zusätzlichen Aufrufe an die verwendet werden können die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> Scheitern der Methode. Anwendungen unter Mac OS X können mit dieser Eigenschaft sein, wenn sie eine große Anzahl von UDP-Pakete innerhalb eines kurzen Zeitraums gesendet werden müssen.  
  
 Auf Windows, Aufrufe von der <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> Methode zum Aufrufen des Rückrufs abhängig vom Wert länger dauert die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> Eigenschaft, wenn der Sendepuffer voll ist. Die <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> Eigenschaft nur steuert, ob der Benutzer die Puffer bleibt im physischen Speicher gesperrt, bis der Sendevorgang abgeschlossen ist.  
  
 Die Standardgröße des Sendepuffers in Windows ist 8.192.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die angegebene Puffergröße ist kleiner als 0.</exception>
        <exception cref="T:System.InvalidOperationException">Die Multicastgruppe wurde noch nicht zusammengeführt.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wurde verworfen.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
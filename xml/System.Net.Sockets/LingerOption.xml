<Type Name="LingerOption" FullName="System.Net.Sockets.LingerOption">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cb8ae307f2beeee884316616773a1e30713d0a21" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70415296" /></Metadata><TypeSignature Language="C#" Value="public class LingerOption" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LingerOption extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.LingerOption" />
  <TypeSignature Language="VB.NET" Value="Public Class LingerOption" />
  <TypeSignature Language="C++ CLI" Value="public ref class LingerOption" />
  <TypeSignature Language="F#" Value="type LingerOption = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gibt an, ob und wie lange ein <see cref="T:System.Net.Sockets.Socket" /> nach dem Aufrufen der <see cref="M:System.Net.Sockets.Socket.Close" />- oder <see cref="M:System.Net.Sockets.TcpClient.Close" />-Methode die Verbindung aufrecht erhält, wenn noch zu sendende Daten vorhanden sind.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im ausgehenden Netzwerk Puffer sind möglicherweise weiterhin Daten verfügbar, nachdem eine Anwendung die <xref:System.Net.Sockets.Socket> - <xref:System.Net.Sockets.TcpClient> oder-Methode aufgerufen hat. Wenn Sie angeben möchten, wie lange <xref:System.Net.Sockets.Socket> der versucht, nach dem Schließen nicht gesendete Daten zu übertragen, erstellen Sie eine <xref:System.Net.Sockets.LingerOption> , `enable` bei der der `true`-Parameter auf `seconds` festgelegt ist und der-Parameter auf den gewünschten Zeitraum festgelegt ist. . Der `seconds` -Parameter wird verwendet, um anzugeben, wie lange eine <xref:System.Net.Sockets.Socket> Verbindung mit dem bestehen bleibt, bevor ein Timeout eintritt. Wenn Sie nicht möchten, dass <xref:System.Net.Sockets.Socket> für eine beliebige Dauer nach dem schließen eine Verbindung besteht, erstellen Sie <xref:System.Net.Sockets.LingerOption> eine-Instanz `enable` , bei der `true` der- `seconds` Parameter auf und der-Parameter auf 0 (null) festgelegt ist. In diesem Fall <xref:System.Net.Sockets.Socket> wird sofort geschlossen, und alle nicht gesendeten Daten gehen verloren. Übergeben Sie nach der Erstellung <xref:System.Net.Sockets.LingerOption> das an <xref:System.Net.Sockets.Socket.SetSocketOption%2A?displayProperty=nameWithType> die-Methode. Wenn Sie Daten mit einem <xref:System.Net.Sockets.TcpClient>senden und empfangen, legen Sie die <xref:System.Net.Sockets.LingerOption> -Instanz in der <xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType> -Eigenschaft fest.  
  
 Der IP-Stapel berechnet den Standard Timeout Zeitraum für das IP-Protokoll, der basierend auf der Roundtripzeit der Verbindung verwendet werden soll. In den meisten Fällen ist der durch den Stapel berechnete Timeout relevanter als der von einer Anwendung definierte Timeout. Dies ist das Standardverhalten für eine <xref:System.Net.Sockets.Socket> , wenn <xref:System.Net.Sockets.Socket.LingerState%2A> die-Eigenschaft nicht festgelegt ist <xref:System.Net.Sockets.TcpClient> , und <xref:System.Net.Sockets.TcpClient.LingerState%2A> für eine, wenn die-Eigenschaft nicht festgelegt ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein zuvor erstelltes auf eine Sekunde festgelegt, <xref:System.Net.Sockets.Socket.Close%2A> nachdem die-Methode aufgerufen wurde <xref:System.Net.Sockets.Socket> .  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LingerOption (bool enable, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enable, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enable As Boolean, seconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LingerOption(bool enable, int seconds);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.LingerOption : bool * int -&gt; System.Net.Sockets.LingerOption" Usage="new System.Net.Sockets.LingerOption (enable, seconds)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enable"><see langword="true" />, um die Verbindung nach dem Aufruf der <see cref="M:System.Net.Sockets.Socket.Close" />-Methode aufrechtzuerhalten, andernfalls <see langword="false" />.</param>
        <param name="seconds">Die Anzahl der Sekunden, für die die Verbindung nach dem Aufruf der <see cref="M:System.Net.Sockets.Socket.Close" />-Methode aufrechterhalten werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Sockets.LingerOption" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Möglicherweise sind im ausgehenden Netzwerk Puffer weiterhin Daten verfügbar, nachdem Sie das <xref:System.Net.Sockets.Socket>geschlossen haben. Verwenden Sie `enable` den-Parameter, um anzugeben, ob <xref:System.Net.Sockets.Socket> nach dem Aufruf der Close-Methode nach dem Aufruf der Close-Methode die Weitergabe von nicht gesendeten Daten Verwenden Sie `seconds` <xref:System.Net.Sockets.Socket> den-Parameter, um anzugeben, wie lange versucht werden soll, nicht gesendete Daten zu übertragen, bevor ein Timeout auftritt. Wenn Sie für `true` den `enable` -Parameter und den Wert 0 `seconds` <xref:System.Net.Sockets.Socket> für den-Parameter angeben, wird von versucht, Daten zu senden, bis keine Daten mehr im ausgehenden Netzwerk Puffer vorhanden sind. Wenn Sie für `false` den `enable` -Parameter angeben, <xref:System.Net.Sockets.Socket> wird sofort geschlossen, und alle nicht gesendeten Daten gehen verloren.  
  
 In der folgenden <xref:System.Net.Sockets.Socket.Close%2A?displayProperty=nameWithType> Tabelle wird das Verhalten der-Methode und der- <xref:System.Net.Sockets.TcpClient.Close%2A?displayProperty=nameWithType> Methode basierend auf `enable` den möglichen `seconds` Werten des-Parameters und des-Parameters beschrieben, wenn eine T:System.net.Sockets.LingerOption-Instanz erstellt und im  <xref:System.Net.Sockets.Socket.LingerState%2A?displayProperty=nameWithType> oder <xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType>  -Eigenschaft.  
  
|`enable`|`seconds`|Verhalten|  
|--------------|---------------|--------------|  
|`false`(deaktiviert), der Standardwert|Das Timeout ist nicht anwendbar (Standard).|Versucht, ausstehende Daten für einen Verbindungs orientierten Socket (z. b. TCP) zu senden, bis der Standard-IP-Protokoll Timeout abläuft.|  
|`true`wodurch|Ein Timeout ungleich 0 (null)|Versucht, ausstehende Daten zu senden, bis das angegebene Timeout abläuft. wenn der Versuch fehlschlägt, setzt Winsock die Verbindung zurück.|  
|`true`wodurch|Ein Timeout von NULL.|Verwirft alle ausstehenden Daten. Für Verbindungs orientierten Socket (z. b. TCP) setzt Winsock die Verbindung zurück.|  
  
 Der IP-Stapel berechnet den Standard Timeout Zeitraum für das IP-Protokoll, der basierend auf der Roundtripzeit der Verbindung verwendet werden soll. In den meisten Fällen ist der durch den Stapel berechnete Timeout relevanter als der von einer Anwendung definierte Timeout. Dies ist das Standardverhalten für einen Socket, wenn <xref:System.Net.Sockets.Socket.LingerState%2A> die-Eigenschaft nicht festgelegt ist.  
  
 Wenn die <xref:System.Net.Sockets.LingerOption.LingerTime%2A> Eigenschaft, die in <xref:System.Net.Sockets.Socket.LingerState%2A> der-Eigenschaft gespeichert ist, größer als das Standard Timeout für den IP-Protokoll Wert ist, wird das Standard Timeout für das IP-Protokoll weiterhin angewendet und außer Kraft gesetzt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein zuvor erstelltes auf eine Sekunde festgelegt, <xref:System.Net.Sockets.Socket.Close%2A> nachdem die-Methode aufgerufen wurde <xref:System.Net.Sockets.Socket> .  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Net.Sockets.LingerOption.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Nachlauf verwendet werden soll, nachdem der <see cref="T:System.Net.Sockets.Socket" /> geschlossen wurde, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn der <see cref="T:System.Net.Sockets.Socket" /> nach Aufruf von <see cref="M:System.Net.Sockets.Socket.Close" /> den Nachlauf verwenden soll, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Net.Sockets.LingerOption.Enabled%2A> -Eigenschaft verwenden, um zu <xref:System.Net.Sockets.Socket> bestimmen, ob der nach dem Schließen von verbleibt. Ändern Sie diesen Wert `true` in `false` oder, und übergeben <xref:System.Net.Sockets.LingerOption> Sie die <xref:System.Net.Sockets.Socket.SetSocketOption%2A> geänderte an die- <xref:System.Net.Sockets.TcpClient.LingerState%2A> Methode <xref:System.Net.Sockets.Socket.LingerState%2A> , oder legen Sie die-oder-Property.to deaktiviert oder aktivieren Sie die Option nicht  
  
 In der folgenden Tabelle wird das Verhalten für die möglichen Werte der <xref:System.Net.Sockets.LingerOption.Enabled%2A> -Eigenschaft und <xref:System.Net.Sockets.LingerOption.LingerTime%2A> der-Eigenschaft beschrieben <xref:System.Net.Sockets.Socket.LingerState%2A> , die in der-Eigenschaft gespeichert ist.  
  
|`enable`|`seconds`|Verhalten|  
|--------------|---------------|--------------|  
|`false`(deaktiviert), der Standardwert|Das Timeout ist nicht anwendbar (Standard).|Versucht, ausstehende Daten für einen Verbindungs orientierten Socket (z. b. TCP) zu senden, bis der Standard-IP-Protokoll Timeout abläuft.|  
|`true`wodurch|Ein Timeout ungleich 0 (null)|Versucht, ausstehende Daten zu senden, bis das angegebene Timeout abläuft. wenn der Versuch fehlschlägt, setzt Winsock die Verbindung zurück.|  
|`true`wodurch|Ein Timeout von NULL.|Verwirft alle ausstehenden Daten. Für Verbindungs orientierten Socket (z. b. TCP) setzt Winsock die Verbindung zurück.|  
  
 Der IP-Stapel berechnet den Standard Timeout Zeitraum für das IP-Protokoll, der basierend auf der Roundtripzeit der Verbindung verwendet werden soll. In den meisten Fällen ist der durch den Stapel berechnete Timeout relevanter als der von einer Anwendung definierte Timeout. Dies ist das Standardverhalten für einen Socket, wenn <xref:System.Net.Sockets.Socket.LingerState%2A> die-Eigenschaft nicht festgelegt ist.  
  
 Wenn die <xref:System.Net.Sockets.LingerOption.LingerTime%2A> Eigenschaft, die in <xref:System.Net.Sockets.Socket.LingerState%2A> der-Eigenschaft gespeichert ist, größer als das Standard Timeout für den IP-Protokoll Wert ist, wird das Standard Timeout für das IP-Protokoll weiterhin angewendet und außer Kraft gesetzt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LingerTime">
      <MemberSignature Language="C#" Value="public int LingerTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LingerTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.LingerTime" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LingerTime { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LingerTime : int with get, set" Usage="System.Net.Sockets.LingerOption.LingerTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeitspanne ab, für die die Verbindung nach Aufruf der <see cref="M:System.Net.Sockets.Socket.Close" />-Methode aufrechterhalten werden soll, wenn noch Daten zu senden sind, oder legt diese fest.</summary>
        <value>Die Zeitspanne in Sekunden, für die die Verbindung nach dem Aufruf von <see cref="M:System.Net.Sockets.Socket.Close" /> beibehalten werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diesen Wert, wenn Sie bestimmen möchten, wie lange <xref:System.Net.Sockets.Socket> ein geschlossener versucht, nicht gesendete Daten zu übertragen, bevor ein Timeout eintritt. Sie können diesen Wert auch auf den gewünschten Timeout Zeitraum (in Sekunden) festlegen.  
  
 Wenn die <xref:System.Net.Sockets.LingerOption.Enabled%2A> -Eigenschaft `true`auf festgelegt ist <xref:System.Net.Sockets.LingerOption.LingerTime%2A> und Sie auf 0 <xref:System.Net.Sockets.Socket> festlegen, verwirft das alle ausstehenden Daten, die im ausgehenden Netzwerk Puffer gesendet werden sollen. Wenn Sie diesen Wert ändern, <xref:System.Net.Sockets.LingerOption> müssen Sie die geänderte Instanz an die <xref:System.Net.Sockets.Socket.SetSocketOption%2A> -Methode übergeben oder die- <xref:System.Net.Sockets.Socket.LingerState%2A> Eigenschaft oder die <xref:System.Net.Sockets.TcpClient.LingerState%2A> -Eigenschaft festlegen.  
  
 In der folgenden Tabelle wird das Verhalten für die möglichen Werte der <xref:System.Net.Sockets.LingerOption.Enabled%2A> -Eigenschaft und <xref:System.Net.Sockets.LingerOption.LingerTime%2A> der-Eigenschaft beschrieben <xref:System.Net.Sockets.Socket.LingerState%2A> , die in der-Eigenschaft gespeichert ist.  
  
|`enable`|`seconds`|Verhalten|  
|--------------|---------------|--------------|  
|`false`(deaktiviert), der Standardwert|Das Timeout ist nicht anwendbar (Standard).|Versucht, ausstehende Daten für einen Verbindungs orientierten Socket (z. b. TCP) zu senden, bis der Standard-IP-Protokoll Timeout abläuft.|  
|`true`wodurch|Ein Timeout ungleich 0 (null)|Versucht, ausstehende Daten zu senden, bis das angegebene Timeout abläuft. wenn der Versuch fehlschlägt, setzt Winsock die Verbindung zurück.|  
|`true`wodurch|Ein Timeout von NULL.|Verwirft alle ausstehenden Daten. Für Verbindungs orientierten Socket (z. b. TCP) setzt Winsock die Verbindung zurück.|  
  
 Der IP-Stapel berechnet den Standard Timeout Zeitraum für das IP-Protokoll, der basierend auf der Roundtripzeit der Verbindung verwendet werden soll. In den meisten Fällen ist der durch den Stapel berechnete Timeout relevanter als der von einer Anwendung definierte Timeout. Dies ist das Standardverhalten für einen Socket, wenn <xref:System.Net.Sockets.Socket.LingerState%2A> die-Eigenschaft nicht festgelegt ist.  
  
 Wenn die <xref:System.Net.Sockets.LingerOption.LingerTime%2A> Eigenschaft, die in <xref:System.Net.Sockets.Socket.LingerState%2A> der-Eigenschaft gespeichert ist, größer als das Standard Timeout für den IP-Protokoll Wert ist, wird das Standard Timeout für das IP-Protokoll weiterhin angewendet und außer Kraft gesetzt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der Wert dieser Eigenschaft angezeigt.  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

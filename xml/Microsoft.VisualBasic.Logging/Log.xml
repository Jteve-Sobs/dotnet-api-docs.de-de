<Type Name="Log" FullName="Microsoft.VisualBasic.Logging.Log">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d5ea75c108ff9f90bf6aeb0e7bb261e3d43aec0e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69318609" /></Metadata><TypeSignature Language="C#" Value="public class Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Log extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="VB.NET" Value="Public Class Log" />
  <TypeSignature Language="C++ CLI" Value="public ref class Log" />
  <TypeSignature Language="F#" Value="type Log = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Eigenschaft und Methoden zum Schreiben von Ereignis- und Ausnahmeinformationen in die Protokollüberwachung der Anwendung bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das `My.Application.Log` -Objekt stellt einen einfachen Einstiegspunkt bereit, von dem [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]aus auf die Protokollierungs Dienste von zugegriffen werden soll. Die `WriteEntry` - `WriteException` Methode und die-Methode schreiben Meldungen in die Protokolllistener der Anwendung. Die Listener können durch die Konfigurationsdatei der Anwendung konfiguriert werden. Weitere Informationen finden Sie unter [Exemplarische Vorgehensweise: Ändern des Orts, an dem "My.](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) Application. log" Informationen schreibt und [mit Anwendungs Protokollen arbeitet](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Das `My.Application.Log` -Objekt ist nur für Client Anwendungen verfügbar. Verwenden `My.Log`Sie für Webanwendungen. Weitere Informationen finden Sie unter <xref:Microsoft.VisualBasic.Logging.AspLog>.  
  
 In der folgenden Tabelle sind Beispiele für Aufgaben aufgeführt `My.Application.Log` , die das-Objekt betreffen.  
  
|Beschreibung|Siehe|  
|--------|---------|  
|Schreiben von Ereignis Informationen in die Protokolllistener der Anwendung|[Gewusst wie: Schreiben von Protokollmeldungen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Schreiben von Ausnahme Informationen in die Protokolllistener der Anwendung|[Gewusst wie: Protokollieren von Ausnahmen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Bestimmen des Orts von SchreibInformationen`My.Application.Log`|[Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
   
  
## Examples  
 Dieses Beispiel zeigt die Verwendung der `My.Application.Log.WriteEntry` -Methode zum Protokollieren von Ablaufprotokollinformationen. Weitere Informationen finden Sie unter [Vorgehensweise: Schreiben Sie Protokoll](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)Meldungen.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.Logging.Log" />-Klasse.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.Logging.Log" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.Log : string -&gt; Microsoft.VisualBasic.Logging.Log" Usage="new Microsoft.VisualBasic.Logging.Log name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><see cref="T:System.String" />. Der Name für das <see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />-Eigenschaftenobjekt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.Logging.Log" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileLogWriter">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultFileLogWriter As FileLogTraceListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::FileLogTraceListener ^ DefaultFileLogWriter { Microsoft::VisualBasic::Logging::FileLogTraceListener ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFileLogWriter : Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.FileLogTraceListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />-Objekt ab, das dem <see langword="Log" />-Objekt zugrunde liegt.</summary>
        <value>Das <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> -Objekt, das dem <see langword="Log" /> -Objekt zugrunde liegt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Eigenschaft verwenden, um die aktuelle Konfiguration des <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Objekts zu bestimmen.  
  
 In Client Anwendungen ist das `Log` -Objekt über das `My.Application.Log` -Objekt verfügbar. In Webanwendungen ist `Log` das-Objekt über das `My.Log` -Objekt verfügbar.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Steuert die Fähigkeit, auf Dateien und Ordner zuzugreifen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">Problembehandlung: Protokollüberwachungen</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected internal virtual void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblynewslot virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub InitializeWithDefaultsSinceNoConfigExists ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void InitializeWithDefaultsSinceNoConfigExists();" />
      <MemberSignature Language="F#" Value="abstract member InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit&#xA;override this.InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit" Usage="log.InitializeWithDefaultsSinceNoConfigExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein neues <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />-Objekt und fügt dieses der <see cref="P:System.Diagnostics.TraceSource.Listeners" />-Auflistung hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode erstellt eine neue <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, legt ihren Namen auf `FileLog`fest und konfiguriert sie so, dass Nachrichten mit dem <xref:System.Diagnostics.SourceLevels.Information> Schweregrad und höher protokolliert werden. Das neue <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> -Objekt wird dann der <xref:System.Diagnostics.TraceSource.Listeners%2A> -Auflistung hinzugefügt.  
  
 Die <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> Ruft die-Methode auf <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> , wenn die-Eigenschaft nicht konfiguriert wurde. Die Ablauf Verfolgungs Quelle kann in der Konfigurationsdatei der Anwendung konfiguriert werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="TraceSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceSource TraceSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceSource TraceSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceSource As TraceSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceSource ^ TraceSource { System::Diagnostics::TraceSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceSource : System.Diagnostics.TraceSource" Usage="Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Diagnostics.TraceSource" />-Objekt ab, das dem <see langword="Log" />-Objekt zugrunde liegt.</summary>
        <value>Das <see cref="T:System.Diagnostics.TraceSource" /> -Objekt, das dem <see langword="Log" /> -Objekt zugrunde liegt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Eigenschaft verwenden, um die aktuelle Konfiguration des `Log` Objekts zu bestimmen.  
  
 In Client Anwendungen ist das `Log` -Objekt über das `My.Application.Log` -Objekt verfügbar. In Webanwendungen ist `Log` das-Objekt über das `My.Log` -Objekt verfügbar.  
  
 Dabei handelt es sich um einen erweiterten Member. Es wird nicht in IntelliSense angezeigt, es sei denn, Sie wählen die Registerkarte **alle** aus.  
  
 In der folgenden Tabelle wird ein Beispiel für eine Aufgabe mit `TraceSource` der-Eigenschaft aufgelistet.  
  
|Beschreibung|Siehe|  
|--------|---------|  
|Erhalten Sie Informationen für jeden Protokolllistener des `Log` Objekts.|[Problembehandlung: Protokolllistener](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|------------------|---------------|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|**Ja**|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSource" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">Problembehandlung: Protokollüberwachungen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt eine Meldung in die Protokollüberwachung der Anwendung.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string -&gt; unit" Usage="log.WriteEntry message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Erforderlich. Die zu protokollierende Meldung. Wenn <paramref name="message" /> den Wert <see langword="Nothing" /> aufweist, wird eine leere Zeichenfolge verwendet.</param>
        <summary>Schreibt eine Meldung in die Protokollüberwachung der Anwendung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteEntry` -Methode schreibt eine Meldung in die ereignisprotokolllistener der Anwendung.  
  
 In Client Anwendungen ist das `Log` -Objekt über das `My.Application.Log` -Objekt verfügbar. In Webanwendungen ist `Log` das-Objekt über das `My.Log` -Objekt verfügbar.  
  
 Informationen dazu, welche Protokolllistener die Meldungen der `WriteEntry` Methode erhalten, finden [Sie unter Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Sie können standardprotokolllistener ändern. Weitere Informationen finden Sie unter [Arbeiten mit Anwendungsprotokollen](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Bei über Ladungen, die das `id` -Argument nicht verwenden, wird der `id` in das Protokoll geschriebene in der folgenden Tabelle definiert.  
  
|`severity`|Vorgegebene`id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 In der folgenden Tabelle sind Beispiele für Aufgaben aufgeführt `WriteEntry` , die die-Methode betreffen.  
  
|Beschreibung|Siehe|  
|--------|---------|  
|Schreiben von Ereignis Informationen in die Protokolllistener der Anwendung|[Gewusst wie: Schreiben von Protokollmeldungen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Bestimmen des Orts von SchreibInformationen`Log`|[Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|------------------|---------------|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|**Ja**|  
  
   
  
## Examples  
 Dieses Beispiel zeigt die Verwendung der `My.Application.Log.WriteEntry` -Methode zum Protokollieren von Ablaufprotokollinformationen. Weitere Informationen finden Sie unter [Vorgehensweise: Schreiben Sie Protokoll](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)Meldungen.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Dieses Codebeispiel kann nur in einer Client Anwendung ausgeführt werden. Wechseln `My.Application.Log.WriteEntry` Sie `My.Log.WriteEntry` zu für Webanwendungen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Teilweise vertrauenswürdiger Code ruft die Methode auf, schreibt jedoch in eine Ereignisprotokollüberwachung, die volle Vertrauenswürdigkeit erfordert.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Steuert die Fähigkeit, auf Dateien und Ordner zuzugreifen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Arbeiten mit Anwendungsprotokollen in Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Vorgehensweise: Schreiben von Protokollmeldungen</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Exemplarische Vorgehensweise: Bestimmen, wohin "My.Application.Log" Informationen schreibt</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType -&gt; unit" Usage="log.WriteEntry (message, severity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="message">Erforderlich. Die zu protokollierende Meldung. Wenn <paramref name="message" /> den Wert <see langword="Nothing" /> aufweist, wird eine leere Zeichenfolge verwendet.</param>
        <param name="severity">Der Typ der Meldung. Standardmäßig <see langword="TraceEventType.Information" />.</param>
        <summary>Schreibt eine Meldung in die Protokollüberwachung der Anwendung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteEntry` -Methode schreibt eine Meldung in die ereignisprotokolllistener der Anwendung.  
  
 In Client Anwendungen ist das `Log` -Objekt über das `My.Application.Log` -Objekt verfügbar. In Webanwendungen ist `Log` das-Objekt über das `My.Log` -Objekt verfügbar.  
  
 Informationen dazu, welche Protokolllistener die Meldungen der `WriteEntry` Methode erhalten, finden [Sie unter Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Sie können standardprotokolllistener ändern. Weitere Informationen finden Sie unter [Arbeiten mit Anwendungsprotokollen](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Bei über Ladungen, die das `id` -Argument nicht verwenden, wird der `id` in das Protokoll geschriebene in der folgenden Tabelle definiert.  
  
|`severity`|Vorgegebene`id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 In der folgenden Tabelle sind Beispiele für Aufgaben aufgeführt `WriteEntry` , die die-Methode betreffen.  
  
|Beschreibung|Siehe|  
|--------|---------|  
|Schreiben von Ereignis Informationen in die Protokolllistener der Anwendung|[Gewusst wie: Schreiben von Protokollmeldungen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Bestimmen des Orts von SchreibInformationen`Log`|[Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|------------------|---------------|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|**Ja**|  
  
   
  
## Examples  
 Dieses Beispiel zeigt die Verwendung der `My.Application.Log.WriteEntry` -Methode zum Protokollieren von Ablaufprotokollinformationen. Weitere Informationen finden Sie unter [Vorgehensweise: Schreiben Sie Protokoll](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)Meldungen.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Dieses Codebeispiel kann nur in einer Client Anwendung ausgeführt werden. Wechseln `My.Application.Log.WriteEntry` Sie `My.Log.WriteEntry` zu für Webanwendungen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der Meldungstyp ist keiner der <see cref="T:System.Diagnostics.TraceEventType" />-Enumerationswerte.</exception>
        <exception cref="T:System.Security.SecurityException">Teilweise vertrauenswürdiger Code ruft die Methode auf, schreibt jedoch in eine Ereignisprotokollüberwachung, die volle Vertrauenswürdigkeit erfordert.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Steuert die Fähigkeit, auf Dateien und Ordner zuzugreifen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Arbeiten mit Anwendungsprotokollen in Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Vorgehensweise: Schreiben von Protokollmeldungen</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Exemplarische Vorgehensweise: Bestimmen, wohin "My.Application.Log" Informationen schreibt</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType * int -&gt; unit" Usage="log.WriteEntry (message, severity, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Erforderlich. Die zu protokollierende Meldung. Wenn <paramref name="message" /> den Wert <see langword="Nothing" /> aufweist, wird eine leere Zeichenfolge verwendet.</param>
        <param name="severity">Der Typ der Meldung. Standardmäßig <see langword="TraceEventType.Information" />.</param>
        <param name="id">Meldungs-ID, wird i. d. R. zur Korrelation verwendet. Ist standardmäßig mit <c>entryType</c> verknüpft, wie in der Tabelle beschrieben.</param>
        <summary>Schreibt eine Meldung in die Protokollüberwachung der Anwendung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteEntry` -Methode schreibt eine Meldung in die ereignisprotokolllistener der Anwendung.  
  
 In Client Anwendungen ist das `Log` -Objekt über das `My.Application.Log` -Objekt verfügbar. In Webanwendungen ist `Log` das-Objekt über das `My.Log` -Objekt verfügbar.  
  
 Informationen dazu, welche Protokolllistener die Meldungen der `WriteEntry` Methode erhalten, finden [Sie unter Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Sie können standardprotokolllistener ändern. Weitere Informationen finden Sie unter [Arbeiten mit Anwendungsprotokollen](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Bei über Ladungen, die das `id` -Argument nicht verwenden, wird der `id` in das Protokoll geschriebene in der folgenden Tabelle definiert.  
  
|`severity`|Vorgegebene`id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 In der folgenden Tabelle sind Beispiele für Aufgaben aufgeführt `WriteEntry` , die die-Methode betreffen.  
  
|Beschreibung|Siehe|  
|--------|---------|  
|Schreiben von Ereignis Informationen in die Protokolllistener der Anwendung|[Gewusst wie: Schreiben von Protokollmeldungen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Bestimmen des Orts von SchreibInformationen`Log`|[Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|------------------|---------------|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|**Ja**|  
  
   
  
## Examples  
 Dieses Beispiel zeigt die Verwendung der `My.Application.Log.WriteEntry` -Methode zum Protokollieren von Ablaufprotokollinformationen. Weitere Informationen finden Sie unter [Vorgehensweise: Schreiben Sie Protokoll](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)Meldungen.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Dieses Codebeispiel kann nur in einer Client Anwendung ausgeführt werden. Wechseln `My.Application.Log.WriteEntry` Sie `My.Log.WriteEntry` zu für Webanwendungen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der Meldungstyp ist keiner der <see cref="T:System.Diagnostics.TraceEventType" />-Enumerationswerte.</exception>
        <exception cref="T:System.Security.SecurityException">Teilweise vertrauenswürdiger Code ruft die Methode auf, schreibt jedoch in eine Ereignisprotokollüberwachung, die volle Vertrauenswürdigkeit erfordert.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Steuert die Fähigkeit, auf Dateien und Ordner zuzugreifen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Arbeiten mit Anwendungsprotokollen in Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Vorgehensweise: Schreiben von Protokollmeldungen</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Exemplarische Vorgehensweise: Bestimmen, wohin "My.Application.Log" Informationen schreibt</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteException">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt Ausnahmeinformationen in die Protokollüberwachung der Anwendung.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception -&gt; unit" Usage="log.WriteException ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">Erforderlich. Die zu protokollierende Ausnahme.</param>
        <summary>Schreibt Ausnahmeinformationen in die Protokollüberwachung der Anwendung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteException` -Methode schreibt die in einer Ausnahme enthaltenen Informationen in die ereignisprotokolllistener der Anwendung.  
  
 In Client Anwendungen ist das `Log` -Objekt über das `My.Application.Log` -Objekt verfügbar. In Webanwendungen ist `Log` das-Objekt über das `My.Log` -Objekt verfügbar.  
  
 Informationen dazu, welche Protokolllistener die Meldungen der `WriteException` Methode erhalten, finden [Sie unter Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Sie können standardprotokolllistener ändern. Weitere Informationen finden Sie unter [Arbeiten mit Anwendungsprotokollen](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Bei über Ladungen, die das `id` -Argument nicht verwenden, wird der Bezeichner, der in das Protokoll geschrieben wird, in der folgenden Tabelle definiert.  
  
|`severity`|Vorgegebene`id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 In der folgenden Tabelle sind Beispiele für Aufgaben aufgeführt `WriteException` , die die-Methode betreffen.  
  
|Beschreibung|Siehe|  
|--------|---------|  
|Schreiben Sie Ausnahme Informationen in die ereignisprotokolllistener der Anwendung.|[Gewusst wie: Protokollieren von Ausnahmen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Bestimmen Sie, wohin `Log` Informationen schreibt.|[Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|------------------|---------------|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|**Ja**|  
  
   
  
## Examples  
 Dieses Beispiel zeigt, wie Sie die `My.Application.Log.WriteException` -Methode verwenden, um Ausnahmen zu protokollieren. Heben Sie die Auskommentierung der Zeilen `Dim` und `MsgBox` auf, um eine <xref:System.NullReferenceException>-Ausnahme auszulösen. Weitere Informationen finden Sie unter [Vorgehensweise: Protokollieren von Ausnahmen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Dieses Codebeispiel kann nur in einer Client Anwendung ausgeführt werden. Wechseln `My.Application.Log.WriteException` Sie `My.Log.WriteException` zu für Webanwendungen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ex" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.Security.SecurityException">Teilweise vertrauenswürdiger Code ruft die Methode auf, schreibt jedoch in eine Ereignisprotokollüberwachung, die volle Vertrauenswürdigkeit erfordert.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Steuert die Fähigkeit, auf Dateien und Ordner zuzugreifen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Arbeiten mit Anwendungsprotokollen in Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Gewusst wie: Protokollieren von Ausnahmen in Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Exemplarische Vorgehensweise: Bestimmen, wohin "My.Application.Log" Informationen schreibt</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">Erforderlich. Die zu protokollierende Ausnahme.</param>
        <param name="severity">Der Typ der Meldung. Standardmäßig <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Die Zeichenfolge, die an die Meldung angefügt werden soll. Dies ist standardmäßig eine leere Zeichenfolge.</param>
        <summary>Schreibt Ausnahmeinformationen in die Protokollüberwachung der Anwendung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteException` -Methode schreibt die in einer Ausnahme enthaltenen Informationen in die ereignisprotokolllistener der Anwendung.  
  
 In Client Anwendungen ist das `Log` -Objekt über das `My.Application.Log` -Objekt verfügbar. In Webanwendungen ist `Log` das-Objekt über das `My.Log` -Objekt verfügbar.  
  
 Informationen dazu, welche Protokolllistener die Meldungen der `WriteException` Methode erhalten, finden [Sie unter Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Sie können standardprotokolllistener ändern. Weitere Informationen finden Sie unter [Arbeiten mit Anwendungsprotokollen](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Bei über Ladungen, die das `id` -Argument nicht verwenden, wird der Bezeichner, der in das Protokoll geschrieben wird, in der folgenden Tabelle definiert.  
  
|`severity`|Vorgegebene`id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 In der folgenden Tabelle sind Beispiele für Aufgaben aufgeführt `WriteException` , die die-Methode betreffen.  
  
|Beschreibung|Siehe|  
|--------|---------|  
|Schreiben Sie Ausnahme Informationen in die ereignisprotokolllistener der Anwendung.|[Gewusst wie: Protokollieren von Ausnahmen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Bestimmen Sie, wohin `Log` Informationen schreibt.|[Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|------------------|---------------|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|**Ja**|  
  
   
  
## Examples  
 Dieses Beispiel zeigt, wie Sie die `My.Application.Log.WriteException` -Methode verwenden, um Ausnahmen zu protokollieren. Heben Sie die Auskommentierung der Zeilen `Dim` und `MsgBox` auf, um eine <xref:System.NullReferenceException>-Ausnahme auszulösen. Weitere Informationen finden Sie unter [Vorgehensweise: Protokollieren von Ausnahmen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Dieses Codebeispiel kann nur in einer Client Anwendung ausgeführt werden. Wechseln `My.Application.Log.WriteException` Sie `My.Log.WriteException` zu für Webanwendungen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ex" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der Meldungstyp ist keiner der <see cref="T:System.Diagnostics.TraceEventType" />-Enumerationswerte.</exception>
        <exception cref="T:System.Security.SecurityException">Teilweise vertrauenswürdiger Code ruft die Methode auf, schreibt jedoch in eine Ereignisprotokollüberwachung, die volle Vertrauenswürdigkeit erfordert.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Steuert die Fähigkeit, auf Dateien und Ordner zuzugreifen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Arbeiten mit Anwendungsprotokollen in Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Gewusst wie: Protokollieren von Ausnahmen in Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Exemplarische Vorgehensweise: Bestimmen, wohin "My.Application.Log" Informationen schreibt</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string * int -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ex">Erforderlich. Die zu protokollierende Ausnahme.</param>
        <param name="severity">Der Typ der Meldung. Standardmäßig <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Die Zeichenfolge, die an die Meldung angefügt werden soll. Dies ist standardmäßig eine leere Zeichenfolge.</param>
        <param name="id">Meldungs-ID, wird i. d. R. zur Korrelation verwendet. Ist standardmäßig mit <c>entryType</c> verknüpft, wie in der Tabelle im Abschnitt Hinweise beschrieben.</param>
        <summary>Schreibt Ausnahmeinformationen in die Protokollüberwachung der Anwendung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteException` -Methode schreibt die in einer Ausnahme enthaltenen Informationen in die ereignisprotokolllistener der Anwendung.  
  
 In Client Anwendungen ist das `Log` -Objekt über das `My.Application.Log` -Objekt verfügbar. In Webanwendungen ist `Log` das-Objekt über das `My.Log` -Objekt verfügbar.  
  
 Informationen dazu, welche Protokolllistener die Meldungen der `WriteException` Methode erhalten, finden [Sie unter Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Sie können standardprotokolllistener ändern. Weitere Informationen finden Sie unter [Arbeiten mit Anwendungsprotokollen](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Bei über Ladungen, die das `id` -Argument nicht verwenden, wird der Bezeichner, der in das Protokoll geschrieben wird, in der folgenden Tabelle definiert.  
  
|`severity`|Vorgegebene`id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 In der folgenden Tabelle sind Beispiele für Aufgaben aufgeführt `WriteException` , die die-Methode betreffen.  
  
|Beschreibung|Siehe|  
|--------|---------|  
|Schreiben Sie Ausnahme Informationen in die ereignisprotokolllistener der Anwendung.|[Gewusst wie: Protokollieren von Ausnahmen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Bestimmen Sie, wohin `Log` Informationen schreibt.|[Exemplarische Vorgehensweise: Bestimmen, wohin „My.Application.Log“ Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|------------------|---------------|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|**Ja**|  
  
   
  
## Examples  
 Dieses Beispiel zeigt, wie Sie die `My.Application.Log.WriteException` -Methode verwenden, um Ausnahmen zu protokollieren. Heben Sie die Auskommentierung der Zeilen `Dim` und `MsgBox` auf, um eine <xref:System.NullReferenceException>-Ausnahme auszulösen. Weitere Informationen finden Sie unter [Vorgehensweise: Protokollieren von Ausnahmen](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Dieses Codebeispiel kann nur in einer Client Anwendung ausgeführt werden. Wechseln `My.Application.Log.WriteException` Sie `My.Log.WriteException` zu für Webanwendungen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ex" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der Meldungstyp ist keiner der <see cref="T:System.Diagnostics.TraceEventType" />-Enumerationswerte.</exception>
        <exception cref="T:System.Security.SecurityException">Teilweise vertrauenswürdiger Code ruft die Methode auf, schreibt jedoch in eine Ereignisprotokollüberwachung, die volle Vertrauenswürdigkeit erfordert.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Steuert die Fähigkeit, auf Dateien und Ordner zuzugreifen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Arbeiten mit Anwendungsprotokollen in Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Gewusst wie: Protokollieren von Ausnahmen in Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Exemplarische Vorgehensweise: Bestimmen, wohin "My.Application.Log" Informationen schreibt</related>
      </Docs>
    </Member>
  </Members>
</Type>

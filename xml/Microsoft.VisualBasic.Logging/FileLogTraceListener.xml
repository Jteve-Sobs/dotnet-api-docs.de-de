<Type Name="FileLogTraceListener" FullName="Microsoft.VisualBasic.Logging.FileLogTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b5d5c4a5ae4ffe210b4038268798670fa923f0f1" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70345854" /></Metadata><TypeSignature Language="C#" Value="public class FileLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileLogTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class FileLogTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileLogTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type FileLogTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen einfachen Listener bereit, der Protokollausgaben an eine Datei weiterleitet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> -Klasse bietet automatisierte Wartungsfunktionen zum Archivieren von Protokolldateien nach Bedarf, täglich oder pro Anwendung. Diese automatische Archivierungsfunktion trägt dazu bei, die Wartungsaufgaben von Entwicklern und Administratoren zu verringern.  
  
 Eine Instanz von <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> kann der-oder <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> der <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> -Auflistung hinzugefügt werden, um die Ausgabe von der Protokollierung in eine Textdatei umzuleiten. Instanzen dieser Klasse können in Visual Basic Anwendungen auch zu `My.Application.Log` oder `My.Log` (für Webanwendungen) hinzugefügt werden. Weitere Informationen finden Sie unter [Exemplarische Vorgehensweise: Ändern, wo "My. Application. log" Informationen schreibt](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`  
  
 Die Hauptfunktionen dieser Klasse sind:  
  
1.  *Archivierungsfunktionen*. Die von dieser Klasse generierten Protokolldateien werden entsprechend dem Basis Namen und dem Datum benannt, zusammen mit einer Zahl, um die Protokolldatei von aufeinander folgenden Versionen des Protokolls zu unterscheiden. Neue Protokolldateien werden nach Bedarf erstellt.  
  
     Die explizite Form des Datei namens lautet [ `baseName`-`dateStamp`] [-`version`]. log, wobei Folgendes gilt:  
  
    -   Der `baseName` Teil ist der grundlegende Protokoll Name, der durch <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> die-Eigenschaft angegeben wird.  
  
    -   Der `dateStamp` Teil hat das Format "yyyy-mm-dd" und wird angezeigt, wenn <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> auf oder <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>festgelegt ist.  
  
    -   Wenn mehr als eine Protokolldatei `baseName` mit demselben und benötigt wird, wird `Integer`dem `version` Dateinamen der- `dateStamp`Teil hinzugefügt.  
  
2.  *Mehrere Klassen Instanzen*. Wenn eine Instanz der <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> -Klasse in eine Datei schreibt, die verwendet wird:  
  
    -   Die-Klasse gibt die Datei frei, wenn Sie von einer anderen Instanz der <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> -Klasse im gleichen Prozess verwendet wird.  
  
    -   Die-Klasse erstellt eine neue Protokolldatei unter Verwendung des nächsten verfügbaren namens, wenn die Datei von einem anderen Prozess verwendet wird.  
  
3.  *Thread Sicherheit*. Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> -Klasse ist Thread sicher. Dies ermöglicht es Ihnen, Nachrichten sicher aus mehreren Threads in das Protokoll zu schreiben, ohne Sperren zu verwenden.  
  
 **Speicherort der Protokolldatei**  
  
-   Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> -Eigenschaft übernimmt <xref:Microsoft.VisualBasic.Logging.LogFileLocation> eine-Enumeration, um eines der typischen Verzeichnisse anzugeben, in die die Protokolldatei geschrieben werden soll.  
  
-   Um das Protokoll an einen anderen Speicherort zu schreiben <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> , legen Sie die-Eigenschaft auf diesen Speicherort fest.  
  
 **Protokoll Dateiname**  
  
-   Der Basisname für die Protokolldatei wird durch die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> -Eigenschaft angegeben.  
  
-   Der aktuelle Name der Protokolldatei kann aus der <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> -Eigenschaft gelesen werden. Sie wird von mehreren anderen Eigenschaften und dem aktuellen Status der Protokolle im Dateisystem abgeleitet.  
  
 **Protokoll Wartung**  
  
-   Die minimale Häufigkeit für das Erstellen neuer Protokolldateien wird von der <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> -Eigenschaft bestimmt. Wenn der Wert oder <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>ist, wird eine neue Protokolldatei mindestens einmal pro Tag oder Woche erstellt, und ein Datumsstempel wird in den <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> Namen integriert.  
  
-   Die maximale Größe (in Bytes) der Protokolldatei wird von der <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> -Eigenschaft bestimmt. Wenn die Größe der Protokolldatei diese Größe überschreitet, werden die in das Protokoll geschriebenen Nachrichten verworfen, und <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> in Abhängigkeit von der-Eigenschaft wird eine Ausnahme ausgelöst.  
  
-   Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> -Eigenschaft bestimmt, wie viel freier Speicherplatz (in Bytes) verfügbar sein muss. Dadurch wird sichergestellt, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> dass die Klasse nicht den gesamten verfügbaren Speicherplatz verbraucht. Verwenden Sie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> die-Eigenschaft, um das Verhalten von Protokoll Schreibvorgängen anzugeben <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> , wenn weniger als freie Bytes vorhanden sind.  
  
 **Protokolldatei-Ausgabeeinstellungen**  
  
-   Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> -Eigenschaft gibt an, ob der zugrunde liegende Stream nach jedem Schreibvorgang in die Protokolldatei automatisch geleert werden soll.  
  
-   Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> -Eigenschaft gibt an, ob Nachrichten an die aktuelle Protokolldatei angefügt werden sollen, falls zulässig, oder ob Sie in eine neue Protokolldatei geschrieben werden sollen.  
  
-   Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> -Eigenschaft gibt die Zeichenfolge an, die zum Begrenzen der Felder in einer Protokollmeldung verwendet werden soll.  
  
-   Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> -Eigenschaft gibt die Codierung an, die beim Erstellen einer neuen Protokolldatei verwendet werden soll.  
  
 **Ausgabe der Protokolldatei**  
  
-   Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> - <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> Methode und die-Methode schreiben Meldungen in die Protokolldatei. Diese Methoden überprüfen <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> die-Eigenschaft zusammen mit allen vorhandenen Protokollen mit dem gleichen Basis Namen, um zu bestimmen, ob ein neues Protokoll erstellt werden sollte.  
  
-   Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> -Methode leert alle aktuell im Ausgabepuffer aktuell ausgegebene Nachrichten in die Protokolldatei.  
  
-   Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> -Methode schließt die Protokolldatei, sodass Sie von anderen Prozessen verwendet werden kann.  
  
 **Aktivieren der Ausgabe**  
  
 Sie müssen die Ablauf Verfolgung oder das Debuggen für die Verwendung eines Ablaufverfolgungs Die folgende Syntax ist compilerspezifisch. Wenn Sie andere Compiler als C# oder Visual Basic verwenden, finden Sie in der Dokumentation Ihres Compiler weitere Informationen.  
  
-   Um das Debuggen in C#zu `/d:DEBUG` aktivieren, fügen Sie das-Flag zur Compilerbefehlszeile hinzu, wenn `#define DEBUG` Sie den Code kompilieren, oder Sie können am Anfang der Datei hinzufügen. Fügen Sie in Visual Basic der `/d:DEBUG=True` Compilerbefehlszeile das-Flag hinzu.  
  
-   Um die Ablauf Verfolgung C#in zu aktivieren `/d:TRACE` , fügen Sie das Flag der Compilerbefehlszeile hinzu, wenn `#define TRACE` Sie den Code kompilieren, oder fügen Sie am Anfang der Datei hinzu. Fügen Sie in Visual Basic der `/d:TRACE=True` Compilerbefehlszeile das-Flag hinzu.  
  
 Um die Ebene Ihres Listener festzulegen, bearbeiten Sie die Konfigurationsdatei für die Anwendung. Innerhalb dieser Datei können Sie einen Listener hinzufügen, seinen Typ festlegen und seine Parameter festlegen, einen Listener entfernen oder alle Listener löschen, die zuvor von der Anwendung festgelegt wurden. Die Konfigurationsdatei sollte wie im folgenden Beispiel formatiert sein.  
  
 Damit dieses Beispiel ausgeführt werden kann, müssen Sie den voll qualifizierten Assemblynamen angeben. Informationen zum Abrufen des voll qualifizierten Assemblynamens finden Sie unter [Assemblynamen](~/docs/framework/app-domains/assembly-names.md).  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sharedListeners>  
            <add name="FileLog"  
                type="Microsoft.VisualBasic.Logging.FileLogTraceListener,   
                      Microsoft.VisualBasic, Version=8.0.0.0,   
                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   
                      processorArchitecture=MSIL"   
                initializeData="FileLogWriter"/>  
        </sharedListeners>  
    </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
    <related type="Article" href="https://msdn.microsoft.com/library/ecc74f95-743c-450d-93f6-09a30db0fe4a">Exemplarische Vorgehensweise: Ändern des Orts, in den „My.Application.Log“ Informationen schreibt</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />-Klasse und legt den Namen fest.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />-Klasse mit dem Standardnamen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode legt den Instanznamen <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> der Klasse auf FileLogTraceListener fest.  
  
 Sie können über die <xref:System.Diagnostics.TraceListener.Name%2A> -Eigenschaft auf den Instanznamen zugreifen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.FileLogTraceListener : string -&gt; Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="new Microsoft.VisualBasic.Logging.FileLogTraceListener name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><see langword="String" />. Der Name des Instanzobjekts.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />-Klasse mit dem angegebenen Namen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode legt den Instanznamen <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> der Klasse auf `name`fest.  
  
 Sie können auf den Instanznamen der <xref:System.Diagnostics.TraceListener.Name%2A> Eigenschaft zugreifen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public bool Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Append" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberSignature Language="VB.NET" Value="Public Property Append As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Append { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Append : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob die Ausgabe an die aktuelle Datei angefügt oder in eine neue Datei geschrieben werden soll.</summary>
        <value>Ein <see langword="Boolean" />-Wert, wobei <see langword="True" /> angibt, dass die Ausgabe an die aktuelle Datei angefügt wird, wohingegen die Ausgabe bei <see langword="False" /> in eine neue Datei geschrieben wird. Die Standardeinstellung für diese Eigenschaft ist <see langword="True" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> -Eigenschaft `False`ist, wird die Ausgabe in eine neue Datei geschrieben. Wenn die-Eigenschaft `True`ist, wird die Ausgabe an die aktuelle Datei angehängt, es sei denn,  
  
-   Die Ausgabedatei wird von einem anderen Prozess gesperrt. In dieser Situation wird eine neue Protokolldatei mit einer Versionsnummer erstellt, die in den <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> Namen integriert ist.  
  
-   Die aktuelle Dateigröße ist größer als die von <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> der-Eigenschaft zulässt. In dieser Situation werden zusätzliche Nachrichten verworfen, und in Abhängigkeit von <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> der-Eigenschaft wird eine Ausnahme ausgelöst.  
  
-   Der vorhandene Dateiname ist gemäß dem von der <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> -Eigenschaft angegebenen Zeitplan für die Protokoll Erstellung veraltet. In dieser Situation wird eine neue Protokolldatei erstellt, und der Datumsstempel wird in den <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> Namen integriert.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, ob beim Schreiben in den Protokolldateistream der Puffer entleert wird.</summary>
        <value>Ein <see langword="Boolean" />-Wert, wobei <see langword="True" /> angibt, dass der Stream nach jedem Schreibvorgang entleert wird. Andernfalls werden die Protokolleinträge im Puffer gespeichert und können effizienter geschrieben werden. Die Standardeinstellung für diese Eigenschaft ist <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `False` -Einstellung für <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> die-Eigenschaft bietet die beste Leistung für die meisten Anwendungen, da es effizienter ist, gleichzeitig mehrere Nachrichten in die Protokolldatei zu schreiben. Sie können die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> -Methode verwenden, um alle Nachrichten zu leeren, die sich derzeit im Ausgabepuffer der Protokolldatei befinden. Sie können auch die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> -Methode verwenden, die den Datenstrom implizit leert, bevor Sie die Protokolldatei schließen.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      </Docs>
    </Member>
    <Member MemberName="BaseFileName">
      <MemberSignature Language="C#" Value="public string BaseFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseFileName : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Basisnamen für die Protokolldateien ab, der zum Erstellen des vollständigen Protokolldateinamens verwendet wird, oder legt diesen fest.</summary>
        <value><see langword="String" />. Der Basisname für die Protokolldateien. Der Standardwert ist der Produktname der Anwendung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> -Eigenschaft bestimmt den Basis Namen für die Protokolldateien, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> in die die-Klasse schreibt.  
  
 Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> -Eigenschaft gibt den aktuellen vollständigen Protokoll Dateinamen an. Sie wird entsprechend dem Protokoll Pfad, dem Basis Namen, dem Datum und einer Zahl generiert, um Sie von verschiedenen Versionen des Protokolls zu unterscheiden. Neue Protokolldateien werden nach Bedarf erstellt.  
  
 Die explizite Form des vollständigen Protokoll `path`Dateinamens lautet`dateStamp` \\ `baseName`[-]`iteration`[-]. log, wobei  
  
-   Der `path` Teil wird von der <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> -Eigenschaft bestimmt, und, wenn dieser Eigenschafts Wert <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>auf fest <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> gelegt ist, die-Eigenschaft.  
  
-   Der `baseName` Teil ist der grundlegende Protokoll Name, der durch <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> die-Eigenschaft angegeben wird.  
  
-   Der `dateStamp` Teil hat das Format "yyyy-mm-dd" und wird angezeigt, wenn <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> auf <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> oder <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>festgelegt ist.  
  
-   Wenn mehr als eine Protokolldatei `baseName` mit demselben und benötigt wird, wird `Integer`dem `iteration` Dateinamen der- `dateStamp`Teil hinzugefügt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void Close() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="fileLogTraceListener.Close " />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt den der aktuellen Protokolldatei zugrunde liegenden Stream und gibt alle Ressourcen frei, die dem aktuellen Stream zugeordnet sind.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> -Methode nicht explizit aufzurufen, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> da die-Klasse den zugrunde liegenden Dampf verwaltet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomLocation">
      <MemberSignature Language="C#" Value="public string CustomLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomLocation : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Verzeichnis der Protokolldateien ab oder legt dieses fest, wenn die <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />-Eigenschaft auf <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" /> festgelegt ist.</summary>
        <value>Ein <see langword="String" />, der den Namen des Protokolldateiverzeichnisses angibt. Die Standardeinstellung für diese Eigenschaft ist das Anwendungsdatenverzeichnis des Benutzers.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> -Eigenschaft festgelegt ist, wird auch <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> die- <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>Eigenschaft auf festgelegt.  
  
 Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> -Eigenschaft löst eine Ausnahme aus, wenn das Verzeichnis nicht aufgelöst werden kann.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiter : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Trennzeichen ab, das zum Begrenzen der Felder in einer Protokollmeldung verwendet wird, oder legt dieses fest.</summary>
        <value>Ein <see langword="String" />, der das für die Felder in einer Protokollmeldung verwendete Trennzeichen ist. Die Standardeinstellung für diese Eigenschaft ist das Tabstoppzeichen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> -Eigenschaft ermöglicht es Ihnen, das Standard Trennzeichen zu ändern.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiskSpaceExhaustedBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property DiskSpaceExhaustedBehavior As DiskSpaceExhaustedOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption get(); void set(Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption value); };" />
      <MemberSignature Language="F#" Value="member this.DiskSpaceExhaustedBehavior : Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt die Vorgehensweise, wenn beim Schreiben in die Protokolldatei weniger freier Speicherplatz vorhanden ist, als die <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />-Eigenschaft angibt.</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />. Bestimmt die Vorgehensweise, wenn beim Schreiben in die Protokolldatei weniger freier Speicherplatz vorhanden ist, als die <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />-Eigenschaft angibt, oder wenn die Größe der Protokolldatei den höchstzulässigen Wert der <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />-Eigenschaft überschreitet. Der Standardwert ist <see cref="F:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> -Eigenschaft auf <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>festgelegt ist, werden die Protokollmeldungen im Hintergrund verworfen, wenn nicht genügend reservierter Speicherplatz verfügbar ist. Dies ist das Standardverhalten und verhindert, dass einfache Anwendungen nicht ausgeführt werden, wenn der Datenträger zu voll ist.  
  
 Stabilere Anwendungen können die- <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> Eigenschaft auf <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>festlegen und Blöcke `Try...Catch` um den gesamten Code hinzufügen, der in das Protokoll schreibt.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyvirtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="fileLogTraceListener.Dispose disposing" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Bei <see langword="True" /> werden sowohl verwaltete als auch nicht verwaltete Ressourcen, bei <see langword="False" /> nur nicht verwaltete Ressourcen freigegeben.</param>
        <summary>Schließt den zugrunde liegenden Stream und gibt optional die verwalteten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der `disposing`-Parameter `True` ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> verweist. Diese Methode ruft die `Dispose`-Methode aller Objekte auf, auf die verwiesen wird.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> kann von anderen Objekten mehrmals aufgerufen werden. Beim Überschreiben von <see langword="Dispose" /> müssen Sie darauf achten, nicht auf Objekte zu verweisen, die durch einen früheren Aufruf von <see langword="Dispose" /> freigegeben wurden.  
  
Diese Methode ruft die <see langword="Dispose" /> -Methode der Basis <see langword="Dispose" />Klasse auf.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Codierung ab, die beim Erstellen einer neuen Protokolldatei verwendet werden soll, oder legt diese fest.</summary>
        <value><see cref="T:System.Text.Encoding" />, die Codierung, die beim Erstellen einer neuen Protokolldatei verwendet werden soll. Der Standardwert dieser Eigenschaft ist <see cref="T:System.Text.UTF8Encoding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Anhängen von Text an eine vorhandene Protokolldatei wird die Codierung für diese Datei anstelle der durch die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> -Eigenschaft angegebenen Codierung verwendet.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void Flush() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="fileLogTraceListener.Flush " />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entleert den zugrunde liegenden Stream, der in die aktuelle Protokolldatei schreibt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> die-Methode, um alle gepufferten Daten in die aktuelle Protokolldatei zu schreiben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullLogFileName">
      <MemberSignature Language="C#" Value="public string FullLogFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullLogFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullLogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullLogFileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullLogFileName : string" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den vollständigen Namen der aktuellen Protokolldatei ab.</summary>
        <value>Ein <see langword="String" />, der vollständige Name der aktuellen Protokolldatei.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> -Eigenschaft gibt den aktuellen vollständigen Protokoll Dateinamen an. Sie wird entsprechend dem Protokoll Pfad, dem Basis Namen, dem Datum und einer Zahl generiert, um Sie von verschiedenen Versionen des Protokolls zu unterscheiden. Neue Protokolldateien werden nach Bedarf erstellt.  
  
 Die explizite Form des vollständigen Namens der Protokolldatei ist `path`[-`dateStamp`] [-`iteration`]. log, wobei Folgendes gilt \\: `baseName`  
  
-   Der `path` Teil wird von der <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> -Eigenschaft bestimmt, und, wenn dieser Eigenschafts Wert <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>auf fest <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> gelegt ist, die-Eigenschaft.  
  
-   Der `baseName` Teil ist der grundlegende Protokoll Name, der durch <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> die-Eigenschaft angegeben wird.  
  
-   Der `dateStamp` Teil hat das Format yyyy-mm-dd und wird angezeigt, wenn <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> auf oder <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>festgelegt ist.  
  
-   Wenn mehr als eine Protokolldatei `baseName` mit demselben und benötigt wird, wird `Integer`dem `iteration` Dateinamen der- `dateStamp`Teil hinzugefügt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyvirtual instance string[] GetSupportedAttributes() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="override this.GetSupportedAttributes : unit -&gt; string[]" Usage="fileLogTraceListener.GetSupportedAttributes " />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die vom Ablaufverfolgungslistener unterstützten benutzerdefinierten XML-Konfigurationsattribute ab.</summary>
        <returns>Ein <see langword="String" />-Array, das die von diesem Listener erkannten XML-Konfigurationsattribute enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die benutzerdefinierten Attribute für <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> können in der XML-Konfigurationsdatei zum Steuern des Verhaltens einer Instanz <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> der-Klasse verwendet werden. Die Verwendung eines anderen Attributs verursacht eine Konfigurations Ausnahme.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IncludeHostName">
      <MemberSignature Language="C#" Value="public bool IncludeHostName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeHostName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostName { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeHostName : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, ob der Hostname des protokollierenden Computers in die Ausgabe aufgenommen werden soll.</summary>
        <value><see langword="Boolean" />. Verwenden Sie <see langword="True" />, um den Hostbezeichner aufzunehmen, andernfalls <see langword="False" />. Der Standardwert ist <see langword="False" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> -Eigenschaft, um das Verhalten der <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> -und-Methoden zu konfigurieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileLocation Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As LogFileLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileLocation Location { Microsoft::VisualBasic::Logging::LogFileLocation get(); void set(Microsoft::VisualBasic::Logging::LogFileLocation value); };" />
      <MemberSignature Language="F#" Value="member this.Location : Microsoft.VisualBasic.Logging.LogFileLocation with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Speicherort für die Protokolldateien ab, oder legt diesen fest.</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />, gibt den Speicherort für die Protokolldatei an. Der Standardwert ist <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> die-Eigenschaft, um den Protokoll Pfad auf einen der vordefinierten Pfade festzulegen, <xref:Microsoft.VisualBasic.Logging.LogFileLocation> der durch die-Enumerationswerte bestimmt wird.  
  
|**Location-Wert**|**Pfad**|  
|------------------------|--------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|Der Pfad für die Anwendungsdaten, die von allen Benutzern gemeinsam genutzt werden, mit dem folgenden Format:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> Ein typischer Wert für `BasePath` ist:<br /><br /> C:\Dokumente und Einstellungen\Alle Benutzer\Anwendungsdaten<br /><br /> Die Werte von `CompanyName`, `ProductName`und stammen `ProductVersion` aus der-Assembly.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|Der Pfad für die ausführbare Datei, die die Anwendung gestartet hat.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|Der Pfad für die Anwendungsdaten eines Benutzers mit dem folgenden Format:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> Ein typischer Wert für `BasePath` ist:<br /><br /> C:\Dokumente und Einstellungen\\`username`\Anwendungsdaten<br /><br /> Die Werte von `CompanyName`, `ProductName`und `ProductVersion` bilden die Assembly.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|Der Pfad des temporären Ordners des aktuellen Systems.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|Wenn die durch <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> angegebene Zeichenfolge nicht leer ist, verwenden Sie diese als Pfad. verwenden Sie andernfalls den Pfad für die Anwendungsdaten eines Benutzers.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />
      </Docs>
    </Member>
    <Member MemberName="LogFileCreationSchedule">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileCreationSchedule As LogFileCreationScheduleOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption LogFileCreationSchedule { Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption get(); void set(Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption value); };" />
      <MemberSignature Language="F#" Value="member this.LogFileCreationSchedule : Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt das Datum, das in die Namen der Protokolldateien eingefügt werden soll.</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />. Dies gibt das Datum an, das in die Namen der Protokolldateien eingefügt werden soll. Der Standardwert ist <see cref="F:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weisen Sie der <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> - <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> Eigenschaft einen der-Enumerationswerte zu, um anzugeben, welches Datum in die Namen der Protokolldateien eingeschlossen werden soll.  
  
 Das Datum ist das Format yyyy-mm-dd. Weitere Informationen zum Format des Protokoll Dateinamens finden <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>Sie unter.  
  
|**Logfilekreationschedule-Wert**|**Datum des Protokoll Dateinamens**|  
|---------------------------------------|-----------------------------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|Schließt das aktuelle Datum in den Namen der Protokolldatei ein.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|Schließt kein Datum in den Namen der Protokolldatei ein.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|Schließt den ersten Tag der laufenden Woche in den Namen der Protokolldatei ein.<br /><br /> Die Woche beginnt am Samstag.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="MaxFileSize">
      <MemberSignature Language="C#" Value="public long MaxFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxFileSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxFileSize : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die höchstzulässige Größe der Protokolldatei (in Bytes) ab oder legt diese fest.</summary>
        <value><see langword="Long" />. Dies ist die höchstzulässige Protokolldateigröße, in Bytes. Der Standardwert ist 5 Millionen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Eigenschaft, um sicherzustellen, dass die Protokolldateien nicht zu groß werden.  
  
 Wenn die Größe der Protokolldatei (in Bytes) größer ist als der Wert dieser Eigenschaft, wird die Nachricht <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> verworfen, wenn die Klasse versucht, eine Meldung in das Protokoll zu schreiben, und der Fehler ist entweder unbeaufsichtigt, oder es wird eine Ausnahme ausgelöst, abhängig vom Wert des <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>-Eigenschaft. Andernfalls wird die Nachricht in das Protokoll geschrieben, wenn der freie Speicherplatz (in Bytes) kleiner als <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Tritt ein, wenn die Eigenschaft wird auf einen Wert unter 1000 festgelegt wird.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="ReserveDiskSpace">
      <MemberSignature Language="C#" Value="public long ReserveDiskSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReserveDiskSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ReserveDiskSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReserveDiskSpace { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ReserveDiskSpace : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den freien Speicherplatz in Bytes ab, der benötigt wird, um Meldungen in die Protokolldatei zu schreiben, oder legt diesen fest.</summary>
        <value><see langword="Long" />. Dies ist die erforderliche Menge an freiem Speicherplatz. Der Standardwert ist 10 Millionen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Eigenschaft, um sicherzustellen, dass die Protokolldateien den Datenträger nicht vollständig ausfüllen.  
  
 Wenn die Menge an freiem Speicherplatz (in Bytes) kleiner als der Wert dieser Eigenschaft ist, wird die Nachricht verworfen <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> , wenn die Klasse versucht, eine Nachricht in das Protokoll zu schreiben, und der Fehler ist entweder unbeaufsichtigt, oder es wird eine Ausnahme ausgelöst, abhängig vom Wert des < C2 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>  -Eigenschaft. Andernfalls wird die Nachricht in das Protokoll geschrieben, wenn die Größe der Protokolldatei (in Bytes) größer als <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Tritt ein, wenn die Eigenschaft wird auf einen Wert unter 0 festgelegt wird.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt Ablaufverfolgungsdaten in die Ausgabedatei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>Methoden sollen nicht vom Anwendungscode aufgerufen werden. Diese Methoden werden von Membern der Klassen <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>und <xref:System.Diagnostics.TraceSource> aufgerufen, um Ablauf Verfolgungs Daten in die Ausgabe zu schreiben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">Ein <see cref="T:System.Diagnostics.TraceEventCache" />-Objekt mit der aktuellen Prozess-ID, Thread-ID und den aktuellen Stapelüberwachungsinformationen.</param>
        <param name="source">Der Name der Ablaufverfolgungsquelle, die diese Methode aufgerufen hat.</param>
        <param name="eventType">Einer der <see cref="T:System.Diagnostics.TraceEventType" />-Enumerationswerte.</param>
        <param name="id">Ein numerischer Bezeichner für das Ereignis.</param>
        <param name="data">Die auszugebenden Ablaufverfolgungsdaten.</param>
        <summary>Schreibt Ablaufverfolgungsinformationen, ein Datenobjekt und Ereignisinformationen in die Ausgabedatei oder den Stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode:  
  
1.  Formatiert die Daten und Kontextinformationen für die Ausgabe.  
  
2.  Erstellt bei Bedarf eine neue Protokolldatei.  
  
3.  Schreibt die Informationen in die Protokolldatei.  
  
 Weitere Informationen zum Erstellen neuer Protokolldateien finden <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>Sie unter.  
  
 In der folgenden Tabelle sind die Ausgabefelder in der Reihenfolge aufgelistet, in der Sie erscheinen. Die Felder werden durch die Zeichenfolge getrennt, die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> von der-Eigenschaft angegeben wird, und gefolgt von einem Zeichen für den Zeilen Abschluss.  
  
|**Feld**|**Ausgabe Bedingung**|**Beschreibung**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|Der Wert von `name`.|  
|`severity`|Always|Der enumerationswertname von `eventType`.|  
|`id`|Always|Eine Zeichenfolgendarstellung von `id`.|  
|`message`|Always|Eine Zeichenfolgendarstellung von `data`.|  
|`callStack`|Wenn das <xref:System.Diagnostics.TraceOptions.Callstack> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die <xref:System.Diagnostics.TraceEventCache.Callstack%2A> -Eigenschaft `eventCache`von.|  
|`CorrelationID`|Wenn das <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> -Eigenschaft `eventCache`von.|  
|`DateTime`|Wenn das <xref:System.Diagnostics.TraceOptions.DateTime> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die Zeichen folgen Darstellung <xref:System.Diagnostics.TraceEventCache.DateTime%2A> der-Eigenschaft von. `eventCache` Die invariante Kultur wird für die Zeichen folgen Konvertierung verwendet.|  
|`ProcessID`|Wenn das <xref:System.Diagnostics.TraceOptions.ProcessId> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die Zeichen folgen Darstellung <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> der-Eigenschaft von. `eventCache` Die invariante Kultur wird für die Zeichen folgen Konvertierung verwendet.|  
|`ThreadID`|Wenn das <xref:System.Diagnostics.TraceOptions.ThreadId> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> -Eigenschaft `eventCache`von.|  
|`Timestamp`|Wenn das <xref:System.Diagnostics.TraceOptions.Timestamp> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die Zeichen folgen Darstellung <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> der-Eigenschaft von. `eventCache` Die invariante Kultur wird für die Zeichen folgen Konvertierung verwendet.|  
|`HostName`|Wenn die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> -Eigenschaft `True`ist.|Der Name des Computers.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Ein <see cref="T:System.Diagnostics.TraceEventCache" />-Objekt mit der aktuellen Prozess-ID, Thread-ID und den aktuellen Stapelüberwachungsinformationen.</param>
        <param name="source">Der Name der Ablaufverfolgungsquelle, die diese Methode aufgerufen hat.</param>
        <param name="eventType">Einer der <see cref="T:System.Diagnostics.TraceEventType" />-Enumerationswerte.</param>
        <param name="id">Ein numerischer Bezeichner für das Ereignis.</param>
        <param name="data">Ein Objektarray, das in Form von Daten ausgegeben werden soll.</param>
        <summary>Schreibt Ablaufverfolgungsinformationen, ein Array von Datenobjekten und Ereignisinformationen in die Ausgabedatei oder den Stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode:  
  
1.  Formatiert die Daten und Kontextinformationen für die Ausgabe.  
  
2.  Erstellt ggf. eine neue Protokolldatei.  
  
3.  Schreibt die Informationen in die Protokolldatei.  
  
 Weitere Informationen zum Erstellen neuer Protokolldateien finden <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>Sie unter.  
  
 Diese Tabelle listet die Ausgabefelder in der Reihenfolge auf, in der Sie angezeigt werden. Die Felder werden durch die Zeichenfolge getrennt, die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> von der-Eigenschaft angegeben wird, und gefolgt von einem Zeichen für den Zeilen Abschluss.  
  
|**Feld**|**Ausgabe Bedingung**|**Beschreibung**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|Der Wert von `name`.|  
|`severity`|Always|Der enumerationswertname von `eventType`.|  
|`id`|Always|Eine Zeichenfolgendarstellung von `id`.|  
|`message`|Always|Die Zeichenfolge, die aus der Zeichen folgen Darstellung der `data`einzelnen Elemente in besteht <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>, die jeweils durch getrennt sind.|  
|`callStack`|Wenn das <xref:System.Diagnostics.TraceOptions.Callstack> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die <xref:System.Diagnostics.TraceEventCache.Callstack%2A> -Eigenschaft `eventCache`von.|  
|`CorrelationID`|Wenn das <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> -Eigenschaft `eventCache`von.|  
|`DateTime`|Wenn das <xref:System.Diagnostics.TraceOptions.DateTime> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die Zeichen folgen Darstellung <xref:System.Diagnostics.TraceEventCache.DateTime%2A> der-Eigenschaft von. `eventCache` Die invariante Kultur wird für die Zeichen folgen Konvertierung verwendet.|  
|`ProcessID`|Wenn das <xref:System.Diagnostics.TraceOptions.ProcessId> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die Zeichen folgen Darstellung <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> der-Eigenschaft von. `eventCache` Die invariante Kultur wird für die Zeichen folgen Konvertierung verwendet.|  
|`ThreadID`|Wenn das <xref:System.Diagnostics.TraceOptions.ThreadId> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> -Eigenschaft `eventCache`von.|  
|`Timestamp`|Wenn das <xref:System.Diagnostics.TraceOptions.Timestamp> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die Zeichen folgen Darstellung <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> der-Eigenschaft von. `eventCache` Die invariante Kultur wird für die Zeichen folgen Konvertierung verwendet.|  
|`HostName`|Wenn die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> -Eigenschaft `True`ist.|Der Name des Computers.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt Ablaufverfolgungs- und Ereignisdaten in die Ausgabedatei oder den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>Methoden sollen nicht vom Anwendungscode aufgerufen werden. Diese Methoden werden von Membern der Klassen <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>und <xref:System.Diagnostics.TraceSource> aufgerufen, um Ablauf Verfolgungs Daten in die Ausgabe zu schreiben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">Ein <see cref="T:System.Diagnostics.TraceEventCache" />-Objekt mit der aktuellen Prozess-ID, Thread-ID und den aktuellen Stapelüberwachungsinformationen.</param>
        <param name="source">Der Name der Ablaufverfolgungsquelle, die diese Methode aufgerufen hat.</param>
        <param name="eventType">Einer der <see cref="T:System.Diagnostics.TraceEventType" />-Enumerationswerte.</param>
        <param name="id">Ein numerischer Bezeichner für das Ereignis.</param>
        <param name="message">Eine zu schreibende Meldung.</param>
        <summary>Schreibt Ablaufverfolgungsinformationen, eine Meldung und Ereignisinformationen in die Ausgabedatei oder den Stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode:  
  
1.  Formatiert die Daten und Kontextinformationen für die Ausgabe.  
  
2.  Erstellt bei Bedarf eine neue Protokolldatei.  
  
3.  Schreibt die Informationen in die Protokolldatei.  
  
 Weitere Informationen zum Erstellen neuer Protokolldateien finden <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>Sie unter.  
  
 In dieser Tabelle werden die Ausgabefelder in der Reihenfolge aufgelistet, in der Sie angezeigt werden. Die Felder werden durch die Zeichenfolge getrennt, die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> von der-Eigenschaft angegeben wird, und gefolgt von einem Zeichen für den Zeilen Abschluss.  
  
|**Feld**|**Ausgabe Bedingung**|**Beschreibung**|  
|---------------|--------------------------|---------------------|  
|`source`|Immer|Der Wert von `name`.|  
|`severity`|Immer|Der enumerationswertname von `eventType`.|  
|`id`|Immer|Eine Zeichenfolgendarstellung von `id`.|  
|`message`|Immer|Der Wert von `message`.|  
|`callStack`|Wenn das <xref:System.Diagnostics.TraceOptions.Callstack> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die <xref:System.Diagnostics.TraceEventCache.Callstack%2A> -Eigenschaft `eventCache`von.|  
|`CorrelationID`|Wenn das <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> -Eigenschaft `eventCache`von.|  
|`DateTime`|Wenn das <xref:System.Diagnostics.TraceOptions.DateTime> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die Zeichen folgen Darstellung <xref:System.Diagnostics.TraceEventCache.DateTime%2A> der-Eigenschaft von. `eventCache` Die invariante Kultur wird für die Zeichen folgen Konvertierung verwendet.|  
|`ProcessID`|Wenn das <xref:System.Diagnostics.TraceOptions.ProcessId> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die Zeichen folgen Darstellung <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> der-Eigenschaft von. `eventCache` Die invariante Kultur wird für die Zeichen folgen Konvertierung verwendet.|  
|`ThreadID`|Wenn das <xref:System.Diagnostics.TraceOptions.ThreadId> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> -Eigenschaft `eventCache`von.|  
|`Timestamp`|Wenn das <xref:System.Diagnostics.TraceOptions.Timestamp> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die Zeichen folgen Darstellung <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> der-Eigenschaft von. `eventCache` Die invariante Kultur wird für die Zeichen folgen Konvertierung verwendet.|  
|`HostName`|Wenn die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> -Eigenschaft `True`ist.|Der Name des Computers.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Ein <see cref="T:System.Diagnostics.TraceEventCache" />-Objekt mit der aktuellen Prozess-ID, Thread-ID und den aktuellen Stapelüberwachungsinformationen.</param>
        <param name="source">Der Name der Ablaufverfolgungsquelle, die diese Methode aufgerufen hat.</param>
        <param name="eventType">Einer der <see cref="T:System.Diagnostics.TraceEventType" />-Enumerationswerte.</param>
        <param name="id">Ein numerischer Bezeichner für das Ereignis.</param>
        <param name="format">Eine Formatzeichenfolge mit 0 oder mehr Formatelementen, die Objekten im <paramref name="args" />-Array entsprechen.</param>
        <param name="args">Ein <see langword="Object" />-Array mit 0 oder mehr zu formatierenden Objekten.</param>
        <summary>Schreibt Ablaufverfolgungsinformationen, ein formatiertes Array von Objekten und Ereignisinformationen in die Ausgabedatei oder den Stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode:  
  
1.  Formatiert die Daten und Kontextinformationen für die Ausgabe.  
  
2.  Erstellt bei Bedarf eine neue Protokolldatei.  
  
3.  Schreibt die Informationen in die Protokolldatei.  
  
 Weitere Informationen zum Erstellen einer neuen Protokolldatei finden <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>Sie unter.  
  
 In dieser Tabelle werden die Ausgabefelder in der Reihenfolge aufgelistet, in der Sie angezeigt werden. Die Felder werden durch die Zeichenfolge getrennt, die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> von der-Eigenschaft angegeben wird, gefolgt von einem Zeichen für den Zeilen Abschluss.  
  
|**Feld**|**Ausgabe Bedingung**|**Beschreibung**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|Der Wert von `name`.|  
|`severity`|Always|Der enumerationswertname von `eventType`.|  
|`id`|Always|Eine Zeichenfolgendarstellung von `id`.|  
|`message`|Always|Die Daten `args` , die mit der `format` Zeichenfolge formatiert sind und die invariante Kultur für Zeichen folgen Konvertierungen verwenden.|  
|`callStack`|Wenn das <xref:System.Diagnostics.TraceOptions.Callstack> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die <xref:System.Diagnostics.TraceEventCache.Callstack%2A> -Eigenschaft `eventCache`von.|  
|`CorrelationID`|Wenn das <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> -Eigenschaft `eventCache`von.|  
|`DateTime`|Wenn das <xref:System.Diagnostics.TraceOptions.DateTime> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die Zeichen folgen Darstellung <xref:System.Diagnostics.TraceEventCache.DateTime%2A> der-Eigenschaft von. `eventCache` Die invariante Kultur wird für die Zeichen folgen Konvertierung verwendet.|  
|`ProcessID`|Wenn das <xref:System.Diagnostics.TraceOptions.ProcessId> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die Zeichen folgen Darstellung <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> der-Eigenschaft von. `eventCache` Die invariante Kultur wird für die Zeichen folgen Konvertierung verwendet.|  
|`ThreadID`|Wenn das <xref:System.Diagnostics.TraceOptions.ThreadId> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> -Eigenschaft `eventCache`von.|  
|`Timestamp`|Wenn das <xref:System.Diagnostics.TraceOptions.Timestamp> -Flag in der <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> -Eigenschaft festgelegt ist.|Die Zeichen folgen Darstellung <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> der-Eigenschaft von. `eventCache` Die invariante Kultur wird für die Zeichen folgen Konvertierung verwendet.|  
|`HostName`|Wenn die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> -Eigenschaft `True`ist.|Der Name des Computers.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="fileLogTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see langword="String" />. Die benutzerdefinierte Meldung, die geschrieben werden soll.</param>
        <summary>Schreibt eine wörtliche Meldung ohne weitere Kontextinformationen auf den Datenträger.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> -Methode schreibt eine bestimmte Nachricht ohne zusätzliche Kontextinformationen in die Protokolldatei.  
  
 Verwenden Sie eine <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> der-Methoden, um die Kontextinformationen in die Protokoll Ausgabe einzubeziehen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="fileLogTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see langword="String" />. Die benutzerdefinierte Meldung, die geschrieben werden soll.</param>
        <summary>Schreibt eine wörtliche Meldung ohne weitere Kontextinformationen, gefolgt vom aktuellen Zeilenabschlusszeichen, in die Datei</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> -Methode schreibt eine bestimmte Nachricht ohne zusätzliche Kontextinformationen in die Protokolldatei.  
  
 Verwenden Sie eine <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> der-Methoden, um die Kontextinformationen in die Protokoll Ausgabe einzubeziehen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>

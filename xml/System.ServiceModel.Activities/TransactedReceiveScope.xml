<Type Name="TransactedReceiveScope" FullName="System.ServiceModel.Activities.TransactedReceiveScope">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dc64e617b7fa3fd7672cda21b5bb3d3e4a95717d" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70591251" /></Metadata><TypeSignature Language="C#" Value="public sealed class TransactedReceiveScope : System.Activities.NativeActivity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TransactedReceiveScope extends System.Activities.NativeActivity" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Activities.TransactedReceiveScope" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TransactedReceiveScope&#xA;Inherits NativeActivity" />
  <TypeSignature Language="C++ CLI" Value="public ref class TransactedReceiveScope sealed : System::Activities::NativeActivity" />
  <TypeSignature Language="F#" Value="type TransactedReceiveScope = class&#xA;    inherit NativeActivity" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Activities.NativeActivity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Body")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Eine Aktivität, die Bereiche für die Lebensdauer einer Transaktion festlegt, die von einer empfangenen Meldung initiiert wird. Die Transaktion kann in den Workflow der initiierenden Meldung übergeben oder vom Verteiler erstellt werden, wenn die Meldung empfangen wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit der <xref:System.ServiceModel.Activities.TransactedReceiveScope>-Aktivität können Sie die Lebensdauer des Transaktionsflusses steuern.  
  
> [!WARNING]
>  Für <xref:System.ServiceModel.Activities.TransactedReceiveScope> eine initiierende Aktivität ( <xref:System.ServiceModel.Activities.TransactedReceiveScope> eine, die <xref:System.ServiceModel.Activities.Receive> eine- <xref:System.ServiceModel.Activities.Receive.CanCreateInstance%2A> Aktivität enthält `true`, bei der auf festgelegt ist), wird die Transaktion erstellt <xref:System.ServiceModel.Activities.TransactedReceiveScope> , bevor die Laufzeit mit der Ausführung der Aktivität beginnt. Auf der Workflowaktivitätsebene ist dies keine Ambient-Transaktion, auf den zugrunde liegenden Beibehaltungsebenen ist es jedoch eine Ambient-Transaktion. Wenn bei der Ausführung des Workflows eine <xref:System.Activities.Statements.Persist>-Aktivität vor der <xref:System.ServiceModel.Activities.TransactedReceiveScope>-Aktivität auftritt, versucht die Laufzeit die Beibehaltung unter der Ambient-Transaktion. Dieses Verhalten verursacht eine Sperre, bis die Transaktion abgeschlossen wurde. Da die Workflowausführung nicht den <xref:System.ServiceModel.Activities.TransactedReceiveScope.Body%2A>-Abschnitt erreicht hat, kann die Transaktion nicht abgeschlossen werden. Dieser Deadlock bewirkt, dass der Workflow nicht mehr reagiert, bis ein Timeout der Transaktion auftritt. Beim Timeout der Transaktion wird die neu erstellte Instanz abgebrochen.  
  
> [!IMPORTANT]
>  Es wird empfohlen, bei Verwendung von <xref:System.ServiceModel.Activities.TransactedReceiveScope> alle empfangenen Nachrichten im Workflow in <xref:System.ServiceModel.Activities.TransactedReceiveScope>-Aktivitäten zu platzieren.  
  
> [!IMPORTANT]
>  Wenn Sie <xref:System.ServiceModel.Activities.TransactedReceiveScope> verwenden und Nachrichten in der falschen Reihenfolge eintreffen, wird beim Versuch, die erste der Nachrichten außerhalb der normalen Reihenfolge zu übermitteln, der Workflow abgebrochen. Sie müssen sicherstellen, dass der Workflow im Leerlauf stets einen konsistenten Haltepunkt aufweist. Falls der Workflow abgebrochen wird, können Sie ihn auf diese Weise anhand eines früheren Persistenzpunkts erneut starten.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Verwendung der <xref:System.ServiceModel.Activities.TransactedReceiveScope>-Klasse in einer <xref:System.Activities.Statements.Sequence>-Aktivität.  
  
 [!code-csharp[TransactedReceiveScope#0](~/samples/snippets/csharp/VS_Snippets_CFX/transactedreceivescope/cs/common/codeserviceworkflow.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactedReceiveScope ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Activities.TransactedReceiveScope.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TransactedReceiveScope();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.ServiceModel.Activities.TransactedReceiveScope" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public System.Activities.Activity Body { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Activity Body" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Activities.TransactedReceiveScope.Body" />
      <MemberSignature Language="VB.NET" Value="Public Property Body As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Activity ^ Body { System::Activities::Activity ^ get(); void set(System::Activities::Activity ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Body : System.Activities.Activity with get, set" Usage="System.ServiceModel.Activities.TransactedReceiveScope.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Activities.Activity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Activities.Activity" /> ab, die den Textkörper der <see cref="T:System.ServiceModel.Activities.TransactedReceiveScope" />-Aktivität bildet, oder legt sie fest.</summary>
        <value>Der Text des transaktiven Empfangsbereichs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Transaktion ist für die gesamte Dauer des Texts eine Ambient-Transaktion.  
  
   
  
## Examples  
 Im folgenden Beispiel wird das Festlegen der <xref:System.ServiceModel.Activities.TransactedReceiveScope.Body%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[TransactedReceiveScope#0](~/samples/snippets/csharp/VS_Snippets_CFX/transactedreceivescope/cs/common/codeserviceworkflow.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMetadata">
      <MemberSignature Language="C#" Value="protected override void CacheMetadata (System.Activities.NativeActivityMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CacheMetadata(valuetype System.Activities.NativeActivityMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata(System.Activities.NativeActivityMetadata)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CacheMetadata (metadata As NativeActivityMetadata)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CacheMetadata(System::Activities::NativeActivityMetadata metadata);" />
      <MemberSignature Language="F#" Value="override this.CacheMetadata : System.Activities.NativeActivityMetadata -&gt; unit" Usage="transactedReceiveScope.CacheMetadata metadata" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Activities.NativeActivityMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected override void Execute (System.Activities.NativeActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Execute(class System.Activities.NativeActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Activities.TransactedReceiveScope.Execute(System.Activities.NativeActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Execute (context As NativeActivityContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Execute(System::Activities::NativeActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Activities.NativeActivityContext -&gt; unit" Usage="transactedReceiveScope.Execute context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.NativeActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Activities.Receive Request { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Activities.Receive Request" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Activities.TransactedReceiveScope.Request" />
      <MemberSignature Language="VB.NET" Value="Public Property Request As Receive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Activities::Receive ^ Request { System::ServiceModel::Activities::Receive ^ get(); void set(System::ServiceModel::Activities::Receive ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Request : System.ServiceModel.Activities.Receive with get, set" Usage="System.ServiceModel.Activities.TransactedReceiveScope.Request" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Activities.Receive</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.ServiceModel.Activities.Receive" />-Aktivität ab, die dieser <see cref="T:System.ServiceModel.Activities.TransactedReceiveScope" />-Aktivität zugeordnet ist, oder legt sie fest.</summary>
        <value>Die dem transaktiven Empfangsbereich zugeordnete Empfangsaktivität.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird das Festlegen der <xref:System.ServiceModel.Activities.TransactedReceiveScope.Request%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[TransactedReceiveScope#0](~/samples/snippets/csharp/VS_Snippets_CFX/transactedreceivescope/cs/common/codeserviceworkflow.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variables">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Activities.Variable&gt; Variables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Activities.Variable&gt; Variables" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Activities.TransactedReceiveScope.Variables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Variables As Collection(Of Variable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Activities::Variable ^&gt; ^ Variables { System::Collections::ObjectModel::Collection&lt;System::Activities::Variable ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Variables : System.Collections.ObjectModel.Collection&lt;System.Activities.Variable&gt;" Usage="System.ServiceModel.Activities.TransactedReceiveScope.Variables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Activities.Variable&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung von <see cref="T:System.Activities.Variable" /> ab, die diesem <see cref="T:System.ServiceModel.Activities.TransactedReceiveScope" /> zugeordnet sind.</summary>
        <value>Die dem transaktiven Empfangsbereich zugeordneten Variablen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird das Festlegen der <xref:System.ServiceModel.Activities.TransactedReceiveScope.Variables%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[TransactedReceiveScope#0](~/samples/snippets/csharp/VS_Snippets_CFX/transactedreceivescope/cs/common/codeserviceworkflow.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

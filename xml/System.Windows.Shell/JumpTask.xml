<Type Name="JumpTask" FullName="System.Windows.Shell.JumpTask">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3a56aaf308ab5d801013e6b88cd74e6df8585c34" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69445897" /></Metadata><TypeSignature Language="C#" Value="public class JumpTask : System.Windows.Shell.JumpItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JumpTask extends System.Windows.Shell.JumpItem" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Shell.JumpTask" />
  <TypeSignature Language="VB.NET" Value="Public Class JumpTask&#xA;Inherits JumpItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class JumpTask : System::Windows::Shell::JumpItem" />
  <TypeSignature Language="F#" Value="type JumpTask = class&#xA;    inherit JumpItem" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Shell.JumpItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Verknüpfung zu einer Anwendung in der Taskleisten-Sprungliste unter Windows 7 dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Shell.JumpTask> kann als Verknüpfung zu einer Anwendung betrachtet werden. Sie geben den Pfad zur ausführbaren Datei an, indem <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> Sie die-Eigenschaft festlegen. Wenn nicht festgelegt ist,wirdderPfaddesaktuellenlaufendenProzessesimpliziert.<xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> Optional können Sie angeben <xref:System.Windows.Shell.JumpTask.Arguments%2A> , dass beim Start an die Anwendung übergeben werden soll.  
  
 Sie können grundlegende Anzeigeeigenschaften wie <xref:System.Windows.Shell.JumpTask.Title%2A>, <xref:System.Windows.Shell.JumpTask.Description%2A>und <xref:System.Windows.Shell.JumpTask.IconResourcePath%2A> festlegen, um die Darstellung der Aufgabe in der Sprung Liste anzugeben. Ein Symbol, das mit <xref:System.Windows.Shell.JumpTask> einem verwendet wird, muss als systemeigene Ressource verfügbar sein. Wenn mehrere Symbol Ressourcen in einer DLL-Datei oder ausführbaren Datei verfügbar sind, geben Sie die zu verwendende aus, indem <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> Sie einen Offset in der Eigenschaft angeben.  
  
 Standardmäßig wird eine <xref:System.Windows.Shell.JumpTask> in der Kategorie **Tasks** der Sprung Liste platziert. Sie können eine benutzerdefinierte Gruppierung von Aufgaben angeben, <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> indem Sie die-Eigenschaft festlegen.  
  
 Sie können Elemente in einer Sprung Liste visuell voneinander trennen, indem <xref:System.Windows.Shell.JumpTask> Sie eine erstellen, für <xref:System.Windows.Shell.JumpTask.Title%2A> die <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> keine und angegeben ist. Diese leere <xref:System.Windows.Shell.JumpTask> wird in der Sprung Liste als horizontale Linie angezeigt. In diesem Fall können andere Eigenschaften festgelegt werden, Sie haben jedoch keine Auswirkungen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Markup deklariert wird. Öffnet eine Textdatei mit dem `readme.txt` Namen in der Editor-Anwendung. <xref:System.Windows.Shell.JumpTask>  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Code konfiguriert wird. <xref:System.Windows.Shell.JumpTask> Öffnet die Rechner Anwendung.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Shell.JumpPath" />
    <altmember cref="T:System.Windows.Shell.JumpList" />
    <altmember cref="E:System.Windows.Shell.JumpList.JumpItemsRejected" />
    <altmember cref="E:System.Windows.Application.Startup" />
    <altmember cref="P:System.Windows.StartupEventArgs.Args" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JumpTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpTask.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JumpTask();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Shell.JumpTask" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationPath">
      <MemberSignature Language="C#" Value="public string ApplicationPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplicationPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ApplicationPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationPath : string with get, set" Usage="System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfad zur Anwendung ab oder legt diesen fest.</summary>
        <value>Der Pfad zur Anwendung. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> -Eigenschaft nicht angegeben ist, wird der Pfad des aktuellen laufenden Prozesses impliziert. Eine Anwendung kann Aufgaben für andere ausführbare Dateien als sich selbst enthalten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Markup deklariert wird. Öffnet eine Textdatei mit dem `readme.txt` Namen in der Editor-Anwendung. <xref:System.Windows.Shell.JumpTask>  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Code konfiguriert wird. <xref:System.Windows.Shell.JumpTask> Öffnet die Rechner Anwendung.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public string Arguments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Arguments" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public Property Arguments As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Arguments { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Arguments : string with get, set" Usage="System.Windows.Shell.JumpTask.Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die beim Start an die Anwendung übergebenen Argumente ab oder legt sie fest.</summary>
        <value>Die Argumente, die beim Start an die Anwendung übergeben werden. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Markup deklariert wird. Öffnet eine Textdatei mit dem `readme.txt` Namen in der Editor-Anwendung. <xref:System.Windows.Shell.JumpTask>  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Startup" />
        <altmember cref="P:System.Windows.StartupEventArgs.Args" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.Windows.Shell.JumpTask.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den in der QuickInfo für die Aufgabe in der Sprungliste angezeigten Text ab oder legt ihn fest.</summary>
        <value>Der Text, der in der QuickInfo für die Aufgabe angezeigt wird. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Markup deklariert wird. Öffnet eine Textdatei mit dem `readme.txt` Namen in der Editor-Anwendung. <xref:System.Windows.Shell.JumpTask>  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Code konfiguriert wird. <xref:System.Windows.Shell.JumpTask> Öffnet die Rechner Anwendung.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IconResourceIndex">
      <MemberSignature Language="C#" Value="public int IconResourceIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IconResourceIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourceIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IconResourceIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourceIndex : int with get, set" Usage="System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den nullbasierten Index eines in einer Ressource eingebetteten Symbols ab oder legt ihn fest.</summary>
        <value>Der nullbasierte Index des Symbols oder -1, wenn kein Symbol verwendet wird. Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Symbol, das mit <xref:System.Windows.Shell.JumpTask> einem verwendet wird, muss als systemeigene Ressource verfügbar sein. Wenn mehrere Symbole in einer DLL-Datei oder ausführbaren Datei verfügbar sind, geben Sie die zu verwendende Zeichenfolge an <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> , indem Sie einen Offset in der Eigenschaft angeben.  
  
 Wenn keine Symbol Ressource angegeben ist oder das angegebene Symbol nicht gefunden wird, wird das Symbol Standardsystem angezeigt. Legen Sie die <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> -Eigenschaft auf-1 fest, um anzugeben, dass kein Symbol angezeigt wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Markup deklariert wird. Öffnet eine Textdatei mit dem `readme.txt` Namen in der Editor-Anwendung. <xref:System.Windows.Shell.JumpTask>  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      </Docs>
    </Member>
    <Member MemberName="IconResourcePath">
      <MemberSignature Language="C#" Value="public string IconResourcePath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IconResourcePath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourcePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IconResourcePath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourcePath : string with get, set" Usage="System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfad zu einer Ressource ab, die das Symbol enthält, das in der Sprungliste angezeigt werden soll, oder legt ihn fest.</summary>
        <value>Der Pfad zu einer Ressource, die das Symbol enthält. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Symbol, das mit <xref:System.Windows.Shell.JumpTask> einem verwendet wird, muss als systemeigene Ressource verfügbar sein. Wenn mehrere Symbole in einer DLL-Datei oder ausführbaren Datei verfügbar sind, geben Sie die zu verwendende Zeichenfolge an <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> , indem Sie einen Offset in der Eigenschaft angeben.  
  
 Wenn keine Symbol Ressource angegeben ist oder das angegebene Symbol nicht gefunden wird, wird das Symbol Standardsystem angezeigt. Legen Sie die <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> -Eigenschaft auf-1 fest, um anzugeben, dass kein Symbol angezeigt wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Markup deklariert wird. Öffnet eine Textdatei mit dem `readme.txt` Namen in der Editor-Anwendung. <xref:System.Windows.Shell.JumpTask>  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Code konfiguriert wird. <xref:System.Windows.Shell.JumpTask> Öffnet die Rechner Anwendung.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Shell.JumpTask.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den für die Aufgabe in der Sprungliste angezeigten Text ab oder legt ihn fest.</summary>
        <value>Der Text, der für die Aufgabe in der Sprungliste angezeigt wird. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel <xref:System.Windows.Shell.JumpTask.Title%2A> muss die-Eigenschaft so fest <xref:System.Windows.Shell.JumpTask> gelegt werden, dass Sie in der Sprung Liste als klickbare Aufgabe angezeigt wird.  
  
 Alternativ können Sie Elemente in einer Sprung Liste visuell voneinander trennen, indem Sie <xref:System.Windows.Shell.JumpTask> eine erstellen, für die <xref:System.Windows.Shell.JumpTask.Title%2A> keine <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> und angegeben ist. Diese leere <xref:System.Windows.Shell.JumpTask> wird in der Sprung Liste als horizontale Linie angezeigt. In diesem Fall können andere Eigenschaften festgelegt werden, Sie haben jedoch keine Auswirkungen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Markup deklariert wird. Öffnet einen Textdateinamen `readme.txt` in der Editor-Anwendung. <xref:System.Windows.Shell.JumpTask>  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Code konfiguriert wird. <xref:System.Windows.Shell.JumpTask> Öffnet die Rechner Anwendung.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkingDirectory">
      <MemberSignature Language="C#" Value="public string WorkingDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WorkingDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkingDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WorkingDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WorkingDirectory : string with get, set" Usage="System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Arbeitsverzeichnis der Anwendung beim Start ab oder legt es fest.</summary>
        <value>Das Arbeitsverzeichnis der Anwendung beim Start. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Shell.JumpTask> im Markup deklariert wird. Öffnet eine Textdatei mit dem `readme.txt` Namen in der Editor-Anwendung. <xref:System.Windows.Shell.JumpTask>  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

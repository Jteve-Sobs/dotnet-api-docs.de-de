<Type Name="JumpTask" FullName="System.Windows.Shell.JumpTask">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1eb9421dd934a9074c6836b3fb2b5fd147caf844" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39870749" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class JumpTask : System.Windows.Shell.JumpItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JumpTask extends System.Windows.Shell.JumpItem" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Shell.JumpTask" />
  <TypeSignature Language="VB.NET" Value="Public Class JumpTask&#xA;Inherits JumpItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class JumpTask : System::Windows::Shell::JumpItem" />
  <TypeSignature Language="F#" Value="type JumpTask = class&#xA;    inherit JumpItem" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Shell.JumpItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Verknüpfung zu einer Anwendung in der Taskleisten-Sprungliste unter Windows 7 dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Shell.JumpTask> kann als Verknüpfung zu einer Anwendung betrachtet werden. Sie geben Sie den Pfad zur ausführbaren Datei durch Festlegen der <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> Eigenschaft. Wenn die <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> ist nicht festgelegt ist, wird der Pfad der aktuell ausgeführten Prozesses wird impliziert. Sie können optional angeben <xref:System.Windows.Shell.JumpTask.Arguments%2A> Übergabe an die Anwendung beim Start.  
  
 Sie können grundlegende Anzeigeeigenschaften festlegen, z. B. <xref:System.Windows.Shell.JumpTask.Title%2A>, <xref:System.Windows.Shell.JumpTask.Description%2A>, und <xref:System.Windows.Shell.JumpTask.IconResourcePath%2A> , die Darstellung des Tasks in der Sprungliste festzulegen. Ein Symbol, mit einem <xref:System.Windows.Shell.JumpTask> muss als eine systemeigene Ressource verfügbar sein. Wenn mehrere Symbolressourcen in einer DLL oder ausführbare Datei verfügbar sind, geben Sie den einen von, der angibt, eines Offsets in die <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> Eigenschaft.  
  
 Standardmäßig eine <xref:System.Windows.Shell.JumpTask> platziert werden, der **Aufgaben** Kategorie der Sprungliste. Sie können benutzerdefinierte Gruppierung von Tasks, angeben, durch Festlegen der <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> Eigenschaft.  
  
 Sie können die Elemente in einer Sprungliste visuell trennen, durch das Erstellen einer <xref:System.Windows.Shell.JumpTask> verfügt, die nicht über eine <xref:System.Windows.Shell.JumpTask.Title%2A> und <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> angegebenen. Diese leere <xref:System.Windows.Shell.JumpTask> eine horizontale Linie in der Sprungliste angezeigt werden. In diesem Fall andere Eigenschaften können festgelegt werden, aber sie werden keine Auswirkung.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie deklarieren eine <xref:System.Windows.Shell.JumpTask> im Markup. Die <xref:System.Windows.Shell.JumpTask> öffnet eine Textdatei mit dem Namen `readme.txt` in die Editor-Anwendung.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Das folgende Beispiel zeigt, wie Sie konfigurieren eine <xref:System.Windows.Shell.JumpTask> im Code. Die <xref:System.Windows.Shell.JumpTask> öffnet die Rechner-Anwendung.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Shell.JumpPath" />
    <altmember cref="T:System.Windows.Shell.JumpList" />
    <altmember cref="E:System.Windows.Shell.JumpList.JumpItemsRejected" />
    <altmember cref="E:System.Windows.Application.Startup" />
    <altmember cref="P:System.Windows.StartupEventArgs.Args" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JumpTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpTask.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JumpTask();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Shell.JumpTask" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationPath">
      <MemberSignature Language="C#" Value="public string ApplicationPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplicationPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ApplicationPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationPath : string with get, set" Usage="System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfad zur Anwendung ab oder legt diesen fest.</summary>
        <value>Der Pfad zur Anwendung. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> Eigenschaft wurde nicht angegeben, und klicken Sie dann der Pfad der aktuell ausgeführten Prozesses wird impliziert. Eine Anwendung kann es sich um Aufgaben für ausführbare Dateien außer sich selbst enthalten.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie deklarieren eine <xref:System.Windows.Shell.JumpTask> im Markup. Die <xref:System.Windows.Shell.JumpTask> öffnet eine Textdatei mit dem Namen `readme.txt` in die Editor-Anwendung.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Das folgende Beispiel zeigt, wie Sie konfigurieren eine <xref:System.Windows.Shell.JumpTask> im Code. Die <xref:System.Windows.Shell.JumpTask> öffnet die Rechner-Anwendung.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public string Arguments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Arguments" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public Property Arguments As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Arguments { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Arguments : string with get, set" Usage="System.Windows.Shell.JumpTask.Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die beim Start an die Anwendung übergebenen Argumente ab oder legt sie fest.</summary>
        <value>Die Argumente, die beim Start an die Anwendung übergeben werden. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie deklarieren eine <xref:System.Windows.Shell.JumpTask> im Markup. Die <xref:System.Windows.Shell.JumpTask> öffnet eine Textdatei mit dem Namen `readme.txt` in die Editor-Anwendung.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Startup" />
        <altmember cref="P:System.Windows.StartupEventArgs.Args" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.Windows.Shell.JumpTask.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den in der QuickInfo für die Aufgabe in der Sprungliste angezeigten Text ab oder legt ihn fest.</summary>
        <value>Der Text, der in der QuickInfo für die Aufgabe angezeigt wird. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie deklarieren eine <xref:System.Windows.Shell.JumpTask> im Markup. Die <xref:System.Windows.Shell.JumpTask> öffnet eine Textdatei mit dem Namen `readme.txt` in die Editor-Anwendung.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Das folgende Beispiel zeigt, wie Sie konfigurieren eine <xref:System.Windows.Shell.JumpTask> im Code. Die <xref:System.Windows.Shell.JumpTask> öffnet die Rechner-Anwendung.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IconResourceIndex">
      <MemberSignature Language="C#" Value="public int IconResourceIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IconResourceIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourceIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IconResourceIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourceIndex : int with get, set" Usage="System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den nullbasierten Index eines in einer Ressource eingebetteten Symbols ab oder legt ihn fest.</summary>
        <value>Der nullbasierte Index des Symbols oder -1, wenn kein Symbol verwendet wird. Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Symbol, mit einem <xref:System.Windows.Shell.JumpTask> muss als eine systemeigene Ressource verfügbar sein. Wenn mehrere Symbole in einer DLL oder ausführbare Datei verfügbar sind, geben Sie den einen von, der angibt, eines Offsets in die <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> Eigenschaft.  
  
 Wenn keine Symbolressource angegeben wird, oder wenn das angegebene Symbol nicht gefunden wird, wird das standard-Symbol angezeigt. Um anzugeben, dass kein Symbol angezeigt wird, legen die <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> Eigenschaft auf-1 fest.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie deklarieren eine <xref:System.Windows.Shell.JumpTask> im Markup. Die <xref:System.Windows.Shell.JumpTask> öffnet eine Textdatei mit dem Namen `readme.txt` in die Editor-Anwendung.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      </Docs>
    </Member>
    <Member MemberName="IconResourcePath">
      <MemberSignature Language="C#" Value="public string IconResourcePath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IconResourcePath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourcePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IconResourcePath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourcePath : string with get, set" Usage="System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfad zu einer Ressource ab, die das Symbol enthält, das in der Sprungliste angezeigt werden soll, oder legt ihn fest.</summary>
        <value>Der Pfad zu einer Ressource, die das Symbol enthält. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Symbol, mit einem <xref:System.Windows.Shell.JumpTask> muss als eine systemeigene Ressource verfügbar sein. Wenn mehrere Symbole in einer DLL oder ausführbare Datei verfügbar sind, geben Sie den einen von, der angibt, eines Offsets in die <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> Eigenschaft.  
  
 Wenn keine Symbolressource angegeben wird, oder wenn das angegebene Symbol nicht gefunden wird, wird das standard-Symbol angezeigt. Um anzugeben, dass kein Symbol angezeigt wird, legen die <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> Eigenschaft auf-1 fest.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie deklarieren eine <xref:System.Windows.Shell.JumpTask> im Markup. Die <xref:System.Windows.Shell.JumpTask> öffnet eine Textdatei mit dem Namen `readme.txt` in die Editor-Anwendung.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Das folgende Beispiel zeigt, wie Sie konfigurieren eine <xref:System.Windows.Shell.JumpTask> im Code. Die <xref:System.Windows.Shell.JumpTask> öffnet die Rechner-Anwendung.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Shell.JumpTask.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den für die Aufgabe in der Sprungliste angezeigten Text ab oder legt ihn fest.</summary>
        <value>Der Text, der für die Aufgabe in der Sprungliste angezeigt wird. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel die <xref:System.Windows.Shell.JumpTask.Title%2A> Eigenschaft muss festgelegt werden, für die <xref:System.Windows.Shell.JumpTask> in der Sprungliste als klickbare Aufgabe angezeigt werden.  
  
 Alternativ können Sie Elemente in einer Sprungliste visuell trennen, durch das Erstellen einer <xref:System.Windows.Shell.JumpTask> verfügt, die nicht über eine <xref:System.Windows.Shell.JumpTask.Title%2A> und <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> angegebenen. Diese leere <xref:System.Windows.Shell.JumpTask> eine horizontale Linie in der Sprungliste angezeigt werden. In diesem Fall andere Eigenschaften können festgelegt werden, aber sie werden keine Auswirkung.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie deklarieren eine <xref:System.Windows.Shell.JumpTask> im Markup. Die <xref:System.Windows.Shell.JumpTask> öffnet einen Text-Dateinamen `readme.txt` in die Editor-Anwendung.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Das folgende Beispiel zeigt, wie Sie konfigurieren eine <xref:System.Windows.Shell.JumpTask> im Code. Die <xref:System.Windows.Shell.JumpTask> öffnet die Rechner-Anwendung.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkingDirectory">
      <MemberSignature Language="C#" Value="public string WorkingDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WorkingDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkingDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WorkingDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WorkingDirectory : string with get, set" Usage="System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Arbeitsverzeichnis der Anwendung beim Start ab oder legt es fest.</summary>
        <value>Das Arbeitsverzeichnis der Anwendung beim Start. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie deklarieren eine <xref:System.Windows.Shell.JumpTask> im Markup. Die <xref:System.Windows.Shell.JumpTask> öffnet eine Textdatei mit dem Namen `readme.txt` in die Editor-Anwendung.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="CustomExpression" FullName="System.Web.UI.WebControls.Expressions.CustomExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3a285c0372bbcfd060ad840de077b41f230b12de" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70485626" /></Metadata><TypeSignature Language="C#" Value="public class CustomExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.CustomExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type CustomExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Parameters")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Bietet die Möglichkeit, eine benutzerdefinierte LINQ-Abfrage anzugeben, die als Antwort auf ein Ereignis aufgerufen wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.Expressions.CustomExpression> -Klasse wird mit dem <xref:System.Web.UI.WebControls.QueryExtender> -Steuerelement verwendet. Das <xref:System.Web.UI.WebControls.QueryExtender> -Steuerelement unterstützt eine Vielzahl von Optionen, die Sie zum Filtern von Daten verwenden können. Das <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement unterstützt Filter, mit denen Sie Zeichen folgen suchen, Werte zwischen einem angegebenen Bereich suchen, einen Eigenschafts Wert in einer Tabelle mit einem angegebenen Wert vergleichen und Daten sortieren können. Diese Optionen werden als LINQ-Ausdrücke im <xref:System.Web.UI.WebControls.QueryExtender> -Steuerelement bereitgestellt. Sie können diese Filter Ausdrücke verwenden oder einen benutzerdefinierten Ausdruck bereitstellen, den <xref:System.Web.UI.WebControls.QueryExtender> Sie im-Steuerelement verwenden können. Mit <xref:System.Web.UI.WebControls.Expressions.CustomExpression> der-Klasse können Sie einen benutzerdefinierten Ausdruck in der Anwendung angeben und ihn in einem Ereignishandler aufzurufen.  
  
> [!NOTE]
>  Mithilfe der <xref:System.Web.UI.WebControls.Expressions.MethodExpression> -Klasse können Sie eine benutzerdefinierte Abfrage bereitstellen, die von einer-Methode anstelle eines Ereignis Handlers aufgerufen wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Web.UI.WebControls.Expressions.CustomExpression> -Objekt erstellt wird, das <xref:System.Web.UI.WebControls.QueryExtender> vom-Steuerelement verwendet wird. Der benutzerdefinierte Ausdruck ruft `FilterProducts` die-Methode auf, die einen benutzerdefinierten LINQ-Ausdruck enthält. Das Ergebnis des Filter Vorgangs wird in einem <xref:System.Web.UI.WebControls.GridView> -Steuerelement angezeigt.  
  
  
  
 Das folgende Beispiel zeigt einen Ereignishandler, der eine benutzerdefinierte LINQ-Abfrage enthält. Der Ausdruck filtert die Product-Tabelle in der AdventureWorks-Datenbank und zeigt Produkte an, deren Listenpreis größer oder gleich $3.500,00 ist.  
  
 [!code-csharp[QueryExtenderCustomFiltering#2](~/samples/snippets/csharp/VS_Snippets_WebNet/queryextendercustomfiltering/cs/queryextendercustomfiltering.cs#2)]
 [!code-vb[QueryExtenderCustomFiltering#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/queryextendercustomfiltering/vb/queryextendercustomfiltering.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/b93e32b9-af41-4539-a009-6cbbe809c702">Übersicht über das QueryExtender-Webserver Steuerelement</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.CustomExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.Expressions.CustomExpression" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.CustomExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="customExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Die Datenquelle, die vom <see cref="T:System.Linq.IQueryable" />-Objekt verwendet wird.</param>
        <summary>Bietet Zugriff auf das geänderte <see cref="T:System.Linq.IQueryable" />-Objekt, das von der Datenquelle verwendet wird.</summary>
        <returns>Eine Instanz der geänderten Datenquelle.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Querying">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.Expressions.CustomExpressionEventArgs&gt; Querying;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.Expressions.CustomExpressionEventArgs&gt; Querying" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Expressions.CustomExpression.Querying" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Querying As EventHandler(Of CustomExpressionEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::Expressions::CustomExpressionEventArgs ^&gt; ^ Querying;" />
      <MemberSignature Language="F#" Value="member this.Querying : EventHandler&lt;System.Web.UI.WebControls.Expressions.CustomExpressionEventArgs&gt; " Usage="member this.Querying : System.EventHandler&lt;System.Web.UI.WebControls.Expressions.CustomExpressionEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.Expressions.CustomExpressionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der <see cref="T:System.Linq.IQueryable" />-Datenquellenwert festgelegt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.WebControls.Expressions.CustomExpression> -Objekt ermöglicht es Ihnen, einen benutzerdefinierten Ausdruck in einem Ereignishandler anzugeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

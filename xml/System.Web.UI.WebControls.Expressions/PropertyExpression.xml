<Type Name="PropertyExpression" FullName="System.Web.UI.WebControls.Expressions.PropertyExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9b655f9829bade17631a94faeb3b6ed55406dc15" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86628747" /></Metadata><TypeSignature Language="C#" Value="public class PropertyExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type PropertyExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Bietet eine Möglichkeit zum Erstellen einer <see langword="Where" />-Klausel aus Parametern in einer <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />-Auflistung.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> Klasse wird mit dem-Steuerelement verwendet <xref:System.Web.UI.WebControls.QueryExtender> , um Daten in Datenfeldern zu filtern. Die- <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> Klasse vergleicht einen Eigenschafts Wert einer Spalte mit einem angegebenen Wert. Beispielsweise können Sie einen booleschen Wert mit dem Wert in der nicht mehr unterstützten Spalte einer Products-Tabelle in einer-Datenbank vergleichen.  
  
 Die <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> -Klasse erstellt einen Gleichheits Vergleich (= =) für den Wert der einzelnen Parameter und die entsprechende Eigenschaft des <xref:System.Linq.IQueryable> Datenobjekts. Wenn Sie mehr als einen Parameter angeben, werden die Parameter mithilfe des logischen `AND` Operators kombiniert. Parameter, die einen leeren Wert enthalten, werden nicht der-Klausel hinzugefügt `Where` .  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie die Products-Tabelle der AdventureWorks-Datenbank nach Produkten durchsuchen, deren- `MakeFlag` Eigenschaft (eine boolesche Spalte) auf festgelegt ist `true` . Der boolesche Wert Parameter wird in einem Kontrollkästchen festgelegt. Das Ergebnis der Abfrage, die vom-Steuerelement zurückgegeben wird, <xref:System.Web.UI.WebControls.LinqDataSource> wird in einem-Steuerelement angezeigt <xref:System.Web.UI.WebControls.GridView> .  
  
 Dieses Codebeispiel ist Teil eines größeren Beispiels, das in Exemplarische Vorgehensweise [: Filtern von Daten in einer Webseite mithilfe von deklarativer Syntax](https://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)bereitgestellt wird.  
  
  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/b93e32b9-af41-4539-a009-6cbbe809c702">Übersicht über das QueryExtender-Webserver Steuerelement</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="propertyExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Das für die Abfrage zu verwendende Objekt.</param>
        <summary>Wendet ein<see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />-Objekt an, indem das angegebene <see cref="T:System.Linq.IQueryable" />-Datenquellenobjekt verwendet wird.</summary>
        <returns>Eine Instanz des Objekts, für das die Ausdrücke übernommen wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kombiniert das angegebene- <xref:System.Linq.IQueryable> Objekt mit den Ausdrücken in der-Auflistung, <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> indem der logische-Operator verwendet wird `AND` .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="MethodExpression" FullName="System.Web.UI.WebControls.Expressions.MethodExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5c4300c2e088b63f02a5aa251e86f417fea30bdb" /><Meta Name="ms.sourcegitcommit" Value="3efce15f3841385ee3ba24bd71ff0c0cf9a47815" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/03/2019" /><Meta Name="ms.locfileid" Value="58874643" /></Metadata><TypeSignature Language="C#" Value="public class MethodExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MethodExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.MethodExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type MethodExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Möglichkeit zum Angeben einer benutzerdefinierte LINQ-Abfrage bereit, die in einer Methode definiert wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.QueryExtender> -Steuerelement unterstützt benutzerdefinierte LINQ-Abfragen. Sie können eine benutzerdefinierte LINQ-Abfrage definieren, in einer Methode und Verwenden der <xref:System.Web.UI.WebControls.Expressions.MethodExpression> filtern Sie die Option aus, um die Abfrage in der <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement.  
  
 Die Methode, die die benutzerdefinierte LINQ-Abfrage enthält, muss die folgenden Kriterien erfüllen:  
  
-   Die Methode muss statisch sein (`Shared` in Visual Basic). Der erste Parameter muss ein <xref:System.Linq.IQueryable%601> oder <xref:System.Collections.Generic.IEnumerable%601> Objekt. Die Methode kann mehr als einen Parameter haben.  
  
-   Der Rückgabewert kann nicht geändert werden. die <xref:System.Linq.IQueryable%601> oder <xref:System.Collections.Generic.IEnumerable%601> Typ, der abgefragt wird.  
  
 Die <xref:System.Web.UI.WebControls.Expressions.MethodExpression> sucht die Methode, die die Abfrage in der folgenden Reihenfolge enthält:  
  
1.  Wenn eine <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> -Eigenschaft angegeben wird, der <xref:System.Web.UI.WebControls.QueryExtender> -Steuerelement, das <xref:System.Web.UI.WebControls.Expressions.MethodExpression> Objekt sucht die Methode in den angegebenen Typ.  
  
2.  Wenn die Datenquelle implementiert <xref:System.Web.DynamicData.IDynamicDataSource>, die Methode für die Methode auf dem Kontext sucht (<xref:System.Data.Linq.DataContext> oder <xref:System.Data.Objects.ObjectContext> Objekt.)  
  
3.  Die Methode sucht die Methode in einem Vorlagensteuerelement, in der Basisklasse für die Seite oder in einem Benutzersteuerelement ab.  
  
 Die <xref:System.Web.UI.WebControls.Expressions.MethodExpression> Klasse ist vergleichbar mit der <xref:System.Web.UI.WebControls.Expressions.CustomExpression> Klasse mit dem Unterschied, dass der Methodenausdruck als Reaktion auf einen Methodenaufruf ausgeführt wird, und der benutzerdefinierte Ausdruck wird als Reaktion auf ein Ereignis ausgeführt.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie das Feld "ListPrice" der Products-Tabelle in der AdventureWorks-Datenbank für Produkte zu suchen, die einen Listenpreis von 400 oder höher enthalten. Dieses Beispiel zeigt, wie eine benutzerdefinierte LINQ-Abfrage in einer Methode im Code der Seite zu erstellen und zum Aufrufen der Methode in der <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement.  
  
```vb  
Public Shared Function FilterStandardPrice(ByVal query As _  
        IQueryable(Of Product)) As IQueryable(Of Product)  
        Return From p In query _  
            Where p.ListPrice >= 400 _  
            Select p  
    End Function  
```  
  
```csharp  
public static IQueryable<Product>   
        FilterStandardPrice(IQueryable<Product> query)  
{  
        return from p in query  
                  where p.ListPrice >= 400  
                  select p;  
  
    }  
```  
  
 Das folgende Beispiel zeigt, wie die Methode auf der Seite aufgerufen wird.  
  
```  
<html>  
<head runat="server">  
  <title>Custom Filter</title>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <asp:LinqDataSource ID="LinqDataSource1" runat="server"   
        ContextTypeName="AdventureworksDataContext" EntityTypeName=""   
        TableName="Products">  
    </asp:LinqDataSource>  
  
    <asp:QueryExtender ID="QueryExtender1" runat="server"   
        TargetControlID="LinqDataSource1">  
      <asp:MethodExpression MethodName="FilterStandardPrice" >  
      </asp:MethodExpression>  
    </asp:QueryExtender>  
  
    <asp:GridView ID="GridView1" runat="server"   
        DataSourceID="LinqDataSource1"   
        DataKeyNames="ProductID"   
    </asp:GridView>  
  </form>  
</body>  
</html>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MethodExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MethodExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.Expressions.MethodExpression" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="methodExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Das zu verwendende Datenquellen-Steuerelement.</param>
        <summary>Löst den Ausdruck mithilfe des angegebenen <see cref="T:System.Linq.IQueryable" />-Objekts auf.</summary>
        <returns>Eine Instanz des <see cref="T:System.Linq.IQueryable" />-Objekts, mit dem der Ausdruck aufgelöst wurde.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Das Datenquellensteuerelement ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die Methode wurde nicht gefunden.  
  
- oder - 
Die Methode ist nicht statisch.  
  
- oder - 
Der Typ des übergebenen <see langword="IQueryable&lt;T&gt;" />-Objekts wurde geändert.</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreIfNotFound">
      <MemberSignature Language="C#" Value="public bool IgnoreIfNotFound { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreIfNotFound" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreIfNotFound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreIfNotFound { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreIfNotFound : bool with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Ausdruck ignoriert werden soll, oder legt ihn fest.</summary>
        <value><see langword="true" /> Wenn der Ausdruck ignoriert wird; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.Expressions.MethodExpression> -Objekt sucht nach einer Methode, die die Abfrage enthält, indem Sie an bestimmten Speicherorten zu suchen, und Suchen in einer bestimmten Reihenfolge. Sie können diese Eigenschaft festlegen, um `false` um eine Ausnahme auszulösen, wenn die <xref:System.Web.UI.WebControls.Expressions.CustomExpression> Objekt findet sich nicht auf eine Methode, die eine LINQ enthält.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodName">
      <MemberSignature Language="C#" Value="public string MethodName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MethodName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.MethodName" />
      <MemberSignature Language="VB.NET" Value="Public Property MethodName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MethodName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MethodName : string with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.MethodName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Methode ab, die eine benutzerdefinierte LINQ-Abfrage enthält.</summary>
        <value>Der Name der Methode, die die benutzerdefinierte LINQ-Abfrage enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.Expressions.MethodExpression> -Objekt ermöglicht es Ihnen, eine benutzerdefinierte LINQ-Abfrage aufzurufen, die in einer Methode definiert ist. Geben Sie die Methode in der <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement auf der Seite.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie die `FilterStandardPrice` -Methode in der die <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement. Die benutzerdefinierte LINQ-Abfrage wird definiert, einem `FilterStandardPrice` Methode.  
  
```  
<asp:QueryExtender ID="QueryExtender1" runat="server"   
    TargetControlID="LinqDataSource1">  
  <asp:MethodExpression MethodName="FilterStandardPrice">  
  </asp:MethodExpression>  
  </asp:QueryExtender>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Klasse ab, deren Methode die benutzerdefinierte Abfrage enthält, oder legt diese fest.</summary>
        <value>Die Klasse, der die Methode als Member angehört.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.Expressions.MethodExpression> -Klasse ermöglicht Ihnen, geben Sie einen benutzerdefinierten Ausdruck für eine Datenquelle in die <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement. Sie können die <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> Eigenschaft, um die Klasse anzugeben, zu der die Methode gehört.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
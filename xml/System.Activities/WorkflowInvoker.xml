<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73cad7482ec89c2404cb253c90cebeaaff316196" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52590230" /></Metadata><TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f19f5-101">Bietet ein Instrument zum Aufrufen eines Workflows, als ob es sich dabei um einen Methodenaufruf handeln würde.</span><span class="sxs-lookup"><span data-stu-id="f19f5-101">Provides a means for invoking a workflow as if it were a method call.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-102"><xref:System.Activities.WorkflowInvoker> enthält Instanz- und statische Methoden zum synchronen Aufrufen von Workflows sowie Instanzmethoden zum asynchronen Aufrufen von Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="f19f5-103"><xref:System.Activities.WorkflowInvoker> lässt keine Instanzsteuerung wie Beibehalten, Entladen oder Wiederaufnehmen von Lesezeichen zu.</span><span class="sxs-lookup"><span data-stu-id="f19f5-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="f19f5-104">Wenn Instanzsteuerung gewünscht ist, verwenden Sie stattdessen <xref:System.Activities.WorkflowApplication>.</span><span class="sxs-lookup"><span data-stu-id="f19f5-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="f19f5-105">Um Workflows ohne Instanzsteuerung synchron auszuführen, rufen Sie die <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="f19f5-106">Um einen Workflow ohne Instanzsteuerung asynchron auszuführen, verwenden Sie die Methodenpaare <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> und <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> oder die <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Methode.</span><span class="sxs-lookup"><span data-stu-id="f19f5-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-107">Im folgenden Beispiel wird mit <xref:System.Activities.Statements.WriteLine> ein Workflow synchron aufgerufen, der aus einer einzelnen <xref:System.Activities.WorkflowInvoker>-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="f19f5-108">Die Workflowdefinition des Workflows, der von dieser Instanz der <see cref="T:System.Activities.WorkflowInvoker" />-Klasse aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="f19f5-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span></span></param>
        <summary><span data-ttu-id="f19f5-109">Initialisiert eine neue Instanz der <see cref="T:System.Activities.WorkflowInvoker" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="f19f5-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-110"><xref:System.Activities.WorkflowInvoker> enthält Instanz- und statische Methoden zum synchronen Aufrufen von Workflows sowie Instanzmethoden zum asynchronen Aufrufen von Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-111">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen <xref:System.Activities.Statements.WriteLine>-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f19f5-112">Ruft einen Workflow mithilfe des asynchronen <see cref="T:System.IAsyncResult" />-Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-113">Weitere Informationen finden Sie unter [Asynchrone Programmierung in C++](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="f19f5-113">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f19f5-114">Die Methode, die aufgerufen werden muss, wenn der Workflow abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="f19f5-114">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="f19f5-115">Ein optionales, anwendungsspezifisches Objekt, das Informationen über die asynchrone Operation enthält.</span><span class="sxs-lookup"><span data-stu-id="f19f5-115">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="f19f5-116">Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.AsyncCallback" /> und des vom Benutzer bereitgestellten Status asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="f19f5-117">Ein Verweis auf den asynchronen Aufrufvorgang.</span><span class="sxs-lookup"><span data-stu-id="f19f5-117">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-118">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen ist, und um die Ausgabeparameter des Workflows abzurufen, rufen Sie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> der `callback`-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="f19f5-119">Wenn <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird, bevor der Workflow abgeschlossen ist, erfolgt eine Sperre bis zum Abschluss des Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="f19f5-120">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f19f5-121">Diese Methode ruft einen Workflow mithilfe des asynchronen <xref:System.IAsyncResult>-Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-122">Weitere Informationen finden Sie unter [Asynchrone Programmierung in C++](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="f19f5-122">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-123">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-124">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-125">Diese werden abgerufen, indem <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="f19f5-126">Wenn der Aufruf von <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="f19f5-127">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-127">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="callback"><span data-ttu-id="f19f5-128">Die Methode, die aufgerufen werden muss, wenn der Workflow abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="f19f5-128">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="f19f5-129">Ein optionales, anwendungsspezifisches Objekt, das Informationen über die asynchrone Operation enthält.</span><span class="sxs-lookup"><span data-stu-id="f19f5-129">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="f19f5-130">Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern, <see cref="T:System.AsyncCallback" /> und des vom Benutzer bereitgestellten Status asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="f19f5-131">Ein Verweis auf den asynchronen Aufrufvorgang.</span><span class="sxs-lookup"><span data-stu-id="f19f5-131">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-132">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen ist, und um die Ausgabeparameter des Workflows abzurufen, rufen Sie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> der `callback`-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="f19f5-133">Wenn <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird, bevor der Workflow abgeschlossen ist, erfolgt eine Sperre bis zum Abschluss des Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="f19f5-134">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f19f5-135">Diese Methode ruft einen Workflow mithilfe des asynchronen <xref:System.IAsyncResult>-Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-136">Weitere Informationen finden Sie unter [Asynchrone Programmierung in C++](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="f19f5-136">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-137">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-138">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-139">Diese werden abgerufen, indem <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="f19f5-140">Wenn der Aufruf von <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="f19f5-141">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="callback"><span data-ttu-id="f19f5-142">Die Methode, die aufgerufen werden muss, wenn der Workflow abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="f19f5-142">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="f19f5-143">Ein optionales, anwendungsspezifisches Objekt, das Informationen über die asynchrone Operation enthält.</span><span class="sxs-lookup"><span data-stu-id="f19f5-143">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="f19f5-144">Ruft einen Workflow mithilfe des angegebenen Timeoutintervalls, <see cref="T:System.AsyncCallback" /> und des vom Benutzer bereitgestellten Status asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="f19f5-145">Ein Verweis auf den asynchronen Aufrufvorgang.</span><span class="sxs-lookup"><span data-stu-id="f19f5-145">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-146">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen ist, und um die Ausgabeparameter des Workflows abzurufen, rufen Sie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> der `callback`-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="f19f5-147">Wenn <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird, bevor der Workflow abgeschlossen ist, erfolgt eine Sperre bis zum Abschluss des Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="f19f5-148">Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst, wenn die <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>-Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-149">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-150">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="f19f5-151">Diese Methode ruft einen Workflow mithilfe des asynchronen <xref:System.IAsyncResult>-Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-152">Weitere Informationen finden Sie unter [Asynchrone Programmierung in C++](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="f19f5-152">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-153">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-154">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-155">Diese werden abgerufen, indem <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="f19f5-156">Wenn der Aufruf von <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="f19f5-157">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-157">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="f19f5-158">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="callback"><span data-ttu-id="f19f5-159">Die Methode, die aufgerufen werden muss, wenn der Workflow abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="f19f5-159">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="f19f5-160">Ein optionales, anwendungsspezifisches Objekt, das Informationen über die asynchrone Operation enthält.</span><span class="sxs-lookup"><span data-stu-id="f19f5-160">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="f19f5-161">Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern, des Timeoutintervalls, <see cref="T:System.AsyncCallback" /> und des vom Benutzer bereitgestellten Status asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="f19f5-162">Ein Verweis auf den asynchronen Aufrufvorgang.</span><span class="sxs-lookup"><span data-stu-id="f19f5-162">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-163">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen ist, und um die Ausgabeparameter des Workflows abzurufen, rufen Sie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> der `callback`-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="f19f5-164">Wenn <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird, bevor der Workflow abgeschlossen ist, erfolgt eine Sperre bis zum Abschluss des Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="f19f5-165">Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst, wenn <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-166">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-167">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="f19f5-168">Diese Methode ruft einen Workflow mithilfe des asynchronen <xref:System.IAsyncResult>-Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-169">Weitere Informationen finden Sie unter [Asynchrone Programmierung in C++](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="f19f5-169">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-170">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-171">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-172">Diese werden abgerufen, indem <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="f19f5-173">Wenn der Aufruf von <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState"><span data-ttu-id="f19f5-174">Das Token für den abzubrechenden Workflow.</span><span class="sxs-lookup"><span data-stu-id="f19f5-174">The token for the workflow to cancel.</span></span></param>
        <summary><span data-ttu-id="f19f5-175">Versucht, den Workflow abzubrechen, der mit dem angegebenen <paramref name="userState" /> aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="f19f5-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-176">Nur ein Workflow, der von einer der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen, die einen `userState`-Parameter annehmen kann, aufgerufen wurde, kann abgebrochen werden.</span><span class="sxs-lookup"><span data-stu-id="f19f5-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="f19f5-177">Wenn der Abbruch erfolgreich ist, wird die <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>-Eigenschaft von <xref:System.Activities.InvokeCompletedEventArgs>, die an den <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler übergeben wurde, auf true`true` festgelegt, andernfalls wird sie auf false`false` festgelegt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-178">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-179">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-180">Nach dem Aufrufen des Workflows versucht der Host, den Workflow abzubrechen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f19f5-181">Das <see cref="T:System.IAsyncResult" />, das auf den <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />-Vorgang verweist, der den Workflow gestartet hat.</span><span class="sxs-lookup"><span data-stu-id="f19f5-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span></span></param>
        <summary><span data-ttu-id="f19f5-182">Gibt die Ergebnisse eines Workflows zurück, der mit einer der <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />-Überladungen aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="f19f5-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span></span></summary>
        <returns><span data-ttu-id="f19f5-183">Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-183">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-184">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen ist, und um die Ausgabeparameter des Workflows abzurufen, rufen Sie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> der `callback`-Methode auf, angegeben von <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="f19f5-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="f19f5-185">Wenn <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird, bevor der Workflow abgeschlossen ist, erfolgt eine Sperre bis zum Abschluss des Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="f19f5-186">Diese Methode gibt die Ergebnisse eines Workflows zurück, der mithilfe des asynchronen <xref:System.IAsyncResult>-Entwurfsmusters asynchron aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="f19f5-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-187">Weitere Informationen finden Sie unter [Asynchrone Programmierung in C++](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="f19f5-187">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-188">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-189">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-190">Diese werden abgerufen, indem <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="f19f5-191">Wenn der Aufruf von <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f19f5-192">Ruft die <see cref="T:System.Collections.ObjectModel.Collection`1" /> von Erweiterungen ab, die für von einer <see cref="T:System.Activities.WorkflowInvoker" />-Instanz aufgerufene Workflows zur Verfügung stehen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span></span></summary>
        <value><span data-ttu-id="f19f5-193">Die <see cref="T:System.Collections.ObjectModel.Collection`1" /> von Erweiterungen, die für von einer <see cref="T:System.Activities.WorkflowInvoker" />-Instanz aufgerufene Workflows zur Verfügung stehen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-194">Diese Eigenschaft wird von Workflow-Hostautoren verwendet, um der <xref:System.Activities.WorkflowInvoker>-Instanz Erweiterungen hinzuzufügen, damit sie für Workflows zur Verfügung stehen, die davon aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="f19f5-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-195">Im folgenden Beispiel wird ein benutzerdefinierter <xref:System.Activities.Tracking.TrackingParticipant> in der <xref:System.Activities.WorkflowInvoker.Extensions%2A>-Auflistung einer <xref:System.Activities.WorkflowInvoker>-Instanz registriert.</span><span class="sxs-lookup"><span data-stu-id="f19f5-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="f19f5-196">Dieses Codebeispiel ist Teil der [benutzerdefinierte nachverfolgung](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) Beispiel.</span><span class="sxs-lookup"><span data-stu-id="f19f5-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f19f5-197">Ruft einen Workflow synchron auf und gibt ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität nach Argumentnamen geordnet zurück, die die Ausgaben des Workflows darstellt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-197">Invokes a workflow synchronously and returns a dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-198">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-199">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-200">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f19f5-201">Ruft einen Workflow mit der an den <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />-Konstruktor übergebenen Workflowdefinition synchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="f19f5-202">Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-202">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-203">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-204">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-205">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-206">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `DiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="f19f5-207">Die `DiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-208">Wenn der Aufruf von `Invoke` zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="f19f5-209">Der Workflow wird zweimal aufgerufen. Dabei wird die an den WorkflowInvoker`WorkflowInvoker`-Konstruktor übergebene Workflowdefinition verwendet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="f19f5-210">Wenn die Stammaktivität des Workflows keine Ausgabeargumente aufweist oder diese vom Host nicht benötigt werden, können sie ignoriert werden.</span><span class="sxs-lookup"><span data-stu-id="f19f5-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="f19f5-211">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen <xref:System.Activities.Statements.WriteLine>-Aktivität ohne Ausgabeargumente besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="f19f5-212">Die Workflowdefinition des aufzurufenden Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-212">The workflow definition of the workflow to invoke.</span></span></param>
        <summary><span data-ttu-id="f19f5-213">Ruft einen Workflow mithilfe der angegebenen Workflowdefinition synchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-213">Invokes a workflow synchronously using the specified workflow definition.</span></span></summary>
        <returns><span data-ttu-id="f19f5-214">Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-214">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-215">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-216">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-217">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-218">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `DiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="f19f5-219">Die `DiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-220">Wenn der Aufruf von `Invoke` zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="f19f5-221">Wenn die Stammaktivität des Workflows keine Ausgabeargumente aufweist oder diese vom Host nicht benötigt werden, können sie ignoriert werden.</span><span class="sxs-lookup"><span data-stu-id="f19f5-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="f19f5-222">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen <xref:System.Activities.Statements.WriteLine>-Aktivität ohne Ausgabeargumente besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="f19f5-223">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-223">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="f19f5-224">Ruft die Aktivität, die an den <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />-Konstruktor übergeben wurde, synchron mit dem angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="f19f5-225">Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-225">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-226">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-227">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-228">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-229">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `Divide`-Aktivität besteht, die über zwei Eingabeargumente und zwei Ausgabeargumente verfügt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="f19f5-230">Beim Aufrufen des Workflows wird das `arguments`-Wörterbuch übergeben, das die Werte für die einzelnen Eingabeargumente sortiert nach Argumentname enthält.</span><span class="sxs-lookup"><span data-stu-id="f19f5-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="f19f5-231">Wenn der Aufruf von `Invoke` zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im `outputs`-Wörterbuch zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="f19f5-232">Wenn der Workflow von <xref:System.Activities.ActivityWithResult> abgeleitet wird, wie z. B. `CodeActivity<TResult>` oder `Activity<TResult>`, und Ausgabeargumente zusätzlich zum gut definierten <xref:System.Activities.Activity%601.Result%2A>-Ausgabeargument vorhanden sind, muss eine nicht generische Überladung von `Invoke` verwendet werden, um die zusätzlichen Argumente abzurufen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="f19f5-233">Hierzu muss die an den WorkflowInvoker`WorkflowInvoker`-Konstruktor übergebene Workflowdefinition den Typ <xref:System.Activities.Activity> aufweisen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="f19f5-234">In diesem Beispiel wird die `Divide`-Aktivität von `CodeActivity<int>` abgeleitet. Sie wird jedoch als <xref:System.Activities.Activity> deklariert, sodass eine nicht generische Überladung von `Invoke` verwendet wird, die ein Wörterbuch mit Argumenten anstelle eines einzelnen Rückgabewerts zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="f19f5-235">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="f19f5-236">Ruft einen Workflow mit dem angegebenen Timeoutintervall synchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-236">Invokes a workflow synchronously with the specified time-out interval.</span></span></summary>
        <returns><span data-ttu-id="f19f5-237">Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-237">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-238">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-239">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-240">Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-241">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-242">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-243">Im folgenden Beispiel wird ein Workflow aufgerufen, der zwei <xref:System.Activities.Statements.WriteLine>-Aktivitäten sowie eine <xref:System.Activities.Statements.Delay>-Aktivität enthält, die mit einer <xref:System.Activities.Statements.Delay.Duration%2A> von einer Minute konfiguriert ist.</span><span class="sxs-lookup"><span data-stu-id="f19f5-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="f19f5-244">Dieser Workflow wird zweimal aufgerufen: das erste Mal mit einem Timeoutintervall von zwei Minuten und das zweite Mal mit einem Timeoutintervall von 30 Sekunden.</span><span class="sxs-lookup"><span data-stu-id="f19f5-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="f19f5-245">Der erste Workflow wird erfolgreich abgeschlossen, der zweite jedoch nicht, sodass eine <xref:System.TimeoutException> ausgelöst wird und die folgende Meldung angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="f19f5-246">Ein Beispiel der Verwendung von `Invoke` finden Sie unter der Ausgabe-Argumente, die Überladung von <xref:System.Activities.WorkflowInvoker.Invoke%2A> mit den gleichen Parametern wie diese Überladung ohne das Timeoutintervall.</span><span class="sxs-lookup"><span data-stu-id="f19f5-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="f19f5-247">Die Workflowdefinition des aufzurufenden Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-247">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="f19f5-248">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-248">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="f19f5-249">Ruft einen Workflow mithilfe der angegebenen Workflowdefinition und des <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern synchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="f19f5-250">Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-250">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-251">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-252">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-253">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-254">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `Divide`-Aktivität besteht, die über zwei Eingabeargumente und zwei Ausgabeargumente verfügt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="f19f5-255">Beim Aufrufen des Workflows wird das `arguments`-Wörterbuch übergeben, das die Werte für die einzelnen Eingabeargumente sortiert nach Argumentname enthält.</span><span class="sxs-lookup"><span data-stu-id="f19f5-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="f19f5-256">Wenn der Aufruf von `Invoke` zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im `outputs`-Wörterbuch zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="f19f5-257">Wenn der Workflow von <xref:System.Activities.ActivityWithResult> abgeleitet wird, wie z. B. `CodeActivity<TResult>` oder `Activity<TResult>`, und Ausgabeargumente zusätzlich zum gut definierten <xref:System.Activities.Activity%601.Result%2A>-Ausgabeargument vorhanden sind, muss eine nicht generische Überladung von `Invoke` verwendet werden, um die zusätzlichen Argumente abzurufen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="f19f5-258">Hierzu muss die an `Invoke` übergebene Workflowdefinition den Typ <xref:System.Activities.Activity> aufweisen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="f19f5-259">In diesem Beispiel wird die `Divide`-Aktivität von `CodeActivity<int>` abgeleitet. Sie wird jedoch als <xref:System.Activities.Activity> deklariert, sodass eine nicht generische Überladung von `Invoke` verwendet wird, die ein Wörterbuch mit Argumenten anstelle eines einzelnen Rückgabewerts zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="f19f5-260">Die Workflowdefinition des aufzurufenden Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-260">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="timeout"><span data-ttu-id="f19f5-261">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="f19f5-262">Ruft einen Workflow mithilfe der angegebenen Workflowdefinition und des Timeoutintervalls synchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="f19f5-263">Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-263">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-264">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-265">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-266">Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-267">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-268">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-269">Im folgenden Beispiel wird ein Workflow aufgerufen, der zwei <xref:System.Activities.Statements.WriteLine>-Aktivitäten sowie eine <xref:System.Activities.Statements.Delay>-Aktivität enthält, die mit einer <xref:System.Activities.Statements.Delay.Duration%2A> von einer Minute konfiguriert ist.</span><span class="sxs-lookup"><span data-stu-id="f19f5-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="f19f5-270">Dieser Workflow wird zweimal aufgerufen: das erste Mal mit einem Timeoutintervall von zwei Minuten und das zweite Mal mit einem Timeoutintervall von 30 Sekunden.</span><span class="sxs-lookup"><span data-stu-id="f19f5-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="f19f5-271">Der erste Workflow wird erfolgreich abgeschlossen, der zweite jedoch nicht, sodass eine <xref:System.TimeoutException> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="f19f5-272">Ein Beispiel der Verwendung von `Invoke` finden Sie unter der Ausgabe-Argumente, die Überladung von <xref:System.Activities.WorkflowInvoker.Invoke%2A> mit den gleichen Parametern wie diese Überladung ohne das Timeoutintervall.</span><span class="sxs-lookup"><span data-stu-id="f19f5-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="f19f5-273">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-273">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="f19f5-274">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="f19f5-275">Ruft die Aktivität, die an den <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />-Konstruktor übergeben wurde, synchron mit dem angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern und dem angegebenen Timeoutintervall auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span></span></summary>
        <returns><span data-ttu-id="f19f5-276">Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-276">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-277">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-278">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-279">Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-280">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-281">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-282">Im folgenden Beispiel wird ein Workflow aufgerufen, der zwei <xref:System.Activities.Statements.WriteLine>-Aktivitäten sowie eine <xref:System.Activities.Statements.Delay>-Aktivität enthält, die mit einer <xref:System.Activities.Statements.Delay.Duration%2A> von einer Minute konfiguriert ist.</span><span class="sxs-lookup"><span data-stu-id="f19f5-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="f19f5-283">Dieser Workflow wird zweimal aufgerufen: das erste Mal mit einem Timeoutintervall von zwei Minuten und das zweite Mal mit einem Timeoutintervall von 30 Sekunden.</span><span class="sxs-lookup"><span data-stu-id="f19f5-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="f19f5-284">Der erste Workflow wird erfolgreich abgeschlossen, der zweite jedoch nicht, sodass eine <xref:System.TimeoutException> ausgelöst wird und die folgende Meldung angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="f19f5-285">Ein Beispiel der Verwendung von `Invoke` mit Eingabe- und ausgabeargumenten, finden Sie unter die Überladung von <xref:System.Activities.WorkflowInvoker.Invoke%2A> mit den gleichen Parametern wie diese Überladung ohne das Timeoutintervall.</span><span class="sxs-lookup"><span data-stu-id="f19f5-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="f19f5-286">Die Workflowdefinition des aufzurufenden Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-286">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="f19f5-287">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-287">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="f19f5-288">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="f19f5-289">Ruft einen Workflow mithilfe der angegebenen Workflowdefinition, des <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern und des Timeoutintervalls synchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="f19f5-290">Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-290">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-291">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-292">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-293">Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-294">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-295">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-296">Im folgenden Beispiel wird ein Workflow aufgerufen, der zwei <xref:System.Activities.Statements.WriteLine>-Aktivitäten sowie eine <xref:System.Activities.Statements.Delay>-Aktivität enthält, die mit einer <xref:System.Activities.Statements.Delay.Duration%2A> von einer Minute konfiguriert ist.</span><span class="sxs-lookup"><span data-stu-id="f19f5-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="f19f5-297">Dieser Workflow wird zweimal aufgerufen: das erste Mal mit einem Timeoutintervall von zwei Minuten und das zweite Mal mit einem Timeoutintervall von 30 Sekunden.</span><span class="sxs-lookup"><span data-stu-id="f19f5-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="f19f5-298">Der erste Workflow wird erfolgreich abgeschlossen, der zweite jedoch nicht, sodass eine <xref:System.TimeoutException> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="f19f5-299">Ein Beispiel der Verwendung von `Invoke` mit Eingabe- und ausgabeargumenten, finden Sie unter die Überladung von <xref:System.Activities.WorkflowInvoker.Invoke%2A> mit den gleichen Parametern wie diese Überladung ohne das Timeoutintervall.</span><span class="sxs-lookup"><span data-stu-id="f19f5-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f19f5-300">Der Typ des Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-300">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="f19f5-301">Die Workflowdefinition des aufzurufenden Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-301">The workflow definition of the workflow to invoke.</span></span> <span data-ttu-id="f19f5-302">Die Workflowdefinition muss von <see cref="T:System.Activities.ActivityWithResult" /> abgeleitet sind.</span><span class="sxs-lookup"><span data-stu-id="f19f5-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span></span></param>
        <summary><span data-ttu-id="f19f5-303">Ruft einen Workflow mit der an den <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />-Konstruktor übergebenen Workflowdefinition synchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="f19f5-304">Ein Wert des Typs TResult mit dem Ergebnis der Aktivitätsausführung.</span><span class="sxs-lookup"><span data-stu-id="f19f5-304">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-305">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-306">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-307">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-308">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `Add`-Aktivität besteht, die über zwei Eingabeargumente verfügt, und da sie von CodeActivity<int>`CodeActivity<int>` abgeleitet wird, verfügt sie über ein gut definiertes <xref:System.Activities.Activity%601.Result%2A>-Ausgabeargument.</span><span class="sxs-lookup"><span data-stu-id="f19f5-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="f19f5-309">Beim Aufrufen des Workflows wird das `arguments`-Wörterbuch übergeben, das die Werte für die einzelnen Eingabeargumente sortiert nach Argumentname enthält.</span><span class="sxs-lookup"><span data-stu-id="f19f5-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="f19f5-310">Bei der Rückgabe des Aufrufs von Invoke`Invoke` wird der Wert des <xref:System.Activities.Activity%601.Result%2A>-Ausgabearguments zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="f19f5-311">Dieses Codebeispiel basiert auf der [verwenden der WorkflowInvoker-Klasse](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) Beispiel.</span><span class="sxs-lookup"><span data-stu-id="f19f5-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f19f5-312">Der Typ des Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-312">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="f19f5-313">Die Workflowdefinition des aufzurufenden Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-313">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="f19f5-314">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-314">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="f19f5-315">Ruft einen Workflow mithilfe der angegebenen Workflowdefinition und des <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern synchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="f19f5-316">Ein Wert des Typs TResult mit dem Ergebnis der Aktivitätsausführung.</span><span class="sxs-lookup"><span data-stu-id="f19f5-316">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-317">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-318">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-319">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-320">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-321">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-322">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `Add`-Aktivität besteht, die über zwei Eingabeargumente verfügt, und da sie von CodeActivity<int>`CodeActivity<int>` abgeleitet wird, verfügt sie über ein gut definiertes <xref:System.Activities.Activity%601.Result%2A>-Ausgabeargument.</span><span class="sxs-lookup"><span data-stu-id="f19f5-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="f19f5-323">Beim Aufrufen des Workflows wird das `arguments`-Wörterbuch übergeben, das die Werte für die einzelnen Eingabeargumente sortiert nach Argumentname enthält.</span><span class="sxs-lookup"><span data-stu-id="f19f5-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="f19f5-324">Bei der Rückgabe des Aufrufs von Invoke`Invoke` wird der Wert des <xref:System.Activities.Activity%601.Result%2A>-Ausgabearguments zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="f19f5-325">Dieses Codebeispiel basiert auf der [verwenden der WorkflowInvoker-Klasse](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) Beispiel.</span><span class="sxs-lookup"><span data-stu-id="f19f5-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f19f5-326">Der Typ des Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-326">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="f19f5-327">Die Workflowdefinition des aufzurufenden Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-327">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="f19f5-328">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-328">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="f19f5-329">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="f19f5-330">Ruft einen Workflow mithilfe der angegebenen Workflowdefinition, des <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern und des Timeoutintervalls synchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="f19f5-331">Ein Wert des Typs TResult mit dem Ergebnis der Aktivitätsausführung.</span><span class="sxs-lookup"><span data-stu-id="f19f5-331">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-332">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-333">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-334">Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-335">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-336">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-337">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `Add`-Aktivität besteht, die über zwei Eingabeargumente verfügt, und da sie von CodeActivity<int>`CodeActivity<int>` abgeleitet wird, verfügt sie über ein gut definiertes <xref:System.Activities.Activity%601.Result%2A>-Ausgabeargument.</span><span class="sxs-lookup"><span data-stu-id="f19f5-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="f19f5-338">Beim Aufrufen des Workflows wird das `arguments`-Wörterbuch übergeben, das die Werte für die einzelnen Eingabeargumente sortiert nach Argumentname enthält.</span><span class="sxs-lookup"><span data-stu-id="f19f5-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="f19f5-339">Bei der Rückgabe des Aufrufs von Invoke`Invoke` wird der Wert des <xref:System.Activities.Activity%601.Result%2A>-Ausgabearguments zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="f19f5-340">Dieses Codebeispiel basiert auf der [verwenden der WorkflowInvoker-Klasse](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) Beispiel.</span><span class="sxs-lookup"><span data-stu-id="f19f5-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f19f5-341">Der Typ des Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-341">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="f19f5-342">Die Workflowdefinition des aufzurufenden Workflows.</span><span class="sxs-lookup"><span data-stu-id="f19f5-342">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="f19f5-343">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-343">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="additionalOutputs"><span data-ttu-id="f19f5-344">Das Wörterbuch von zusätzlichen Ausgabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="f19f5-345">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="f19f5-346">Ruft einen Workflow mithilfe der angegebenen Workflowdefinition, des <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern, des <see cref="T:System.Collections.Generic.IDictionary`2" /> von zusätzlichen Ausgabeparametern und des Timeoutintervalls synchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="f19f5-347">Ein Wert des Typs TResult mit dem Ergebnis der Aktivitätsausführung.</span><span class="sxs-lookup"><span data-stu-id="f19f5-347">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-348">Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit.</span><span class="sxs-lookup"><span data-stu-id="f19f5-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f19f5-349">Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread.</span><span class="sxs-lookup"><span data-stu-id="f19f5-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f19f5-350">Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-351">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-352">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-353">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `Add`-Aktivität besteht, die über zwei Eingabeargumente verfügt, und da sie von CodeActivity<int>`CodeActivity<int>` abgeleitet wird, verfügt sie über ein gut definiertes <xref:System.Activities.Activity%601.Result%2A>-Ausgabeargument.</span><span class="sxs-lookup"><span data-stu-id="f19f5-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="f19f5-354">Beim Aufrufen des Workflows wird das `arguments`-Wörterbuch übergeben, das die Werte für die einzelnen Eingabeargumente sortiert nach Argumentname enthält.</span><span class="sxs-lookup"><span data-stu-id="f19f5-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="f19f5-355">Bei der Rückgabe des Aufrufs von Invoke`Invoke` wird der Wert des <xref:System.Activities.Activity%601.Result%2A>-Ausgabearguments zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="f19f5-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="f19f5-356">Dieses Codebeispiel basiert auf der [verwenden der WorkflowInvoker-Klasse](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) Beispiel.</span><span class="sxs-lookup"><span data-stu-id="f19f5-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f19f5-357">Ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-358">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="f19f5-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f19f5-359">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f19f5-360">Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-361">Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="f19f5-361">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f19f5-362">Ruft einen Workflow asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-362">Invokes a workflow asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-363">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="f19f5-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f19f5-364">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f19f5-365">Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-366">Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="f19f5-366">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-367">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-368">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-369">Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="f19f5-370">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-370">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="f19f5-371">Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-372">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="f19f5-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f19f5-373">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f19f5-374">Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-375">Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="f19f5-375">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-376">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-377">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-378">Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState"><span data-ttu-id="f19f5-379">Ein vom Benutzer bereitgestelltes Objekt, mit dem dieser spezielle asynchrone Aufrufvorgang von anderen aktuellen asynchronen Aufrufvorgängen unterschieden wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="f19f5-380">Ruft einen Workflow mithilfe des angegebenen eindeutigen Bezeichners asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-380">Invokes a workflow asynchronously using the specified unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-381">Der `userState`-Parameter muss in allen gerade ausgeführten <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Vorgängen für die aktuelle Aktivität eindeutig sein.</span><span class="sxs-lookup"><span data-stu-id="f19f5-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="f19f5-382">Wenn der `userState`-Parameter nicht eindeutig ist, wird eine <xref:System.ArgumentException> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="f19f5-383">Mit `userState` wird der Workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> identifiziert und mit <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="f19f5-384">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="f19f5-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f19f5-385">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f19f5-386">Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-387">Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="f19f5-387">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-388">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-389">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-390">Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="f19f5-391">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="f19f5-392">Ruft einen Workflow mit dem angegebenen Timeoutintervall asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-392">Invokes a workflow asynchronously with the specified time-out interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-393">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="f19f5-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f19f5-394">Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-395">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-396">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="f19f5-397">Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-398">Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="f19f5-398">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-399">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-400">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-401">Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="f19f5-402">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-402">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="userState"><span data-ttu-id="f19f5-403">Ein vom Benutzer bereitgestelltes Objekt, mit dem dieser spezielle asynchrone Aufrufvorgang von anderen aktuellen asynchronen Aufrufvorgängen unterschieden wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="f19f5-404">Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern und einem eindeutigen Bezeichner asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-405">Der `userState`-Parameter muss in allen gerade ausgeführten <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Vorgängen für die aktuelle Aktivität eindeutig sein.</span><span class="sxs-lookup"><span data-stu-id="f19f5-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="f19f5-406">Wenn `userState` nicht eindeutig ist, wird eine <xref:System.ArgumentException> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="f19f5-407">Mit `userState` wird der Workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> identifiziert und mit <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="f19f5-408">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="f19f5-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f19f5-409">Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f19f5-410">Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-411">Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="f19f5-411">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-412">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-413">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-414">Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="f19f5-415">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-415">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="f19f5-416">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="f19f5-417">Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern und des angegebenen Timeoutintervalls asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-418">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="f19f5-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f19f5-419">Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-420">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-421">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="f19f5-422">Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-423">Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="f19f5-423">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-424">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-425">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-426">Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="f19f5-427">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="userState"><span data-ttu-id="f19f5-428">Ein vom Benutzer bereitgestelltes Objekt, mit dem dieser spezielle asynchrone Aufrufvorgang von anderen aktuellen asynchronen Aufrufvorgängen unterschieden wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="f19f5-429">Ruft einen Workflow mit dem angegebenen Timeoutintervall und einem eindeutigen Bezeichner asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-430">Der `userState`-Parameter muss in allen gerade ausgeführten <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Vorgängen für die aktuelle Aktivität eindeutig sein.</span><span class="sxs-lookup"><span data-stu-id="f19f5-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="f19f5-431">Wenn `userState` nicht eindeutig ist, wird eine <xref:System.ArgumentException> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="f19f5-432">Mit `userState` wird der Workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> identifiziert und mit <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="f19f5-433">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="f19f5-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f19f5-434">Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-435">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-436">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="f19f5-437">Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-438">Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="f19f5-438">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-439">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-440">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-441">Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="f19f5-442">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</span><span class="sxs-lookup"><span data-stu-id="f19f5-442">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="f19f5-443">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="userState"><span data-ttu-id="f19f5-444">Ein vom Benutzer bereitgestelltes Objekt, mit dem dieser spezielle asynchrone Aufrufvorgang von anderen aktuellen asynchronen Aufrufvorgängen unterschieden wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="f19f5-445">Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern, des angegebenen Timeoutintervalls und einem eindeutigen Bezeichner asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-446">Der `userState`-Parameter muss in allen gerade ausgeführten <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Vorgängen für die aktuelle Aktivität eindeutig sein.</span><span class="sxs-lookup"><span data-stu-id="f19f5-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="f19f5-447">Wenn `userState` nicht eindeutig ist, wird eine <xref:System.ArgumentException> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="f19f5-448">Mit `userState` wird der Workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> identifiziert und mit <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="f19f5-449">Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="f19f5-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f19f5-450">Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f19f5-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f19f5-451">Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f19f5-452">Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.</span><span class="sxs-lookup"><span data-stu-id="f19f5-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="f19f5-453">Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf.</span><span class="sxs-lookup"><span data-stu-id="f19f5-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f19f5-454">Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="f19f5-454">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-455">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-456">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-457">Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f19f5-458">Tritt auf, wenn der von einer der <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" />-Überladungen aufgerufene Workflow abgeschlossen oder abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="f19f5-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f19f5-459">Behandeln Sie dieses, um zu bestimmen, ob ein Workflow, der mit einer der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen aufgerufen wurde, erfolgreich abgeschlossen wurde, und um die Ausgabeargumente des abgeschlossenen Workflows abzurufen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f19f5-460">Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht.</span><span class="sxs-lookup"><span data-stu-id="f19f5-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f19f5-461">Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f19f5-462">Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.</span><span class="sxs-lookup"><span data-stu-id="f19f5-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
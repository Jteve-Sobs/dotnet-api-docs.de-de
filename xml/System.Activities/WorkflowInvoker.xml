<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="73cad7482ec89c2404cb253c90cebeaaff316196" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52590230" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Bietet ein Instrument zum Aufrufen eines Workflows, als ob es sich dabei um einen Methodenaufruf handeln würde.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> enthält Instanz- und statische Methoden zum synchronen Aufrufen von Workflows sowie Instanzmethoden zum asynchronen Aufrufen von Workflows.  
  
 <xref:System.Activities.WorkflowInvoker> lässt keine Instanzsteuerung wie Beibehalten, Entladen oder Wiederaufnehmen von Lesezeichen zu. Wenn Instanzsteuerung gewünscht ist, verwenden Sie stattdessen <xref:System.Activities.WorkflowApplication>.  
  
 Um Workflows ohne Instanzsteuerung synchron auszuführen, rufen Sie die <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Methode auf. Um einen Workflow ohne Instanzsteuerung asynchron auszuführen, verwenden Sie die Methodenpaare <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> und <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> oder die <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird mit <xref:System.Activities.Statements.WriteLine> ein Workflow synchron aufgerufen, der aus einer einzelnen <xref:System.Activities.WorkflowInvoker>-Aktivität besteht.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">Die Workflowdefinition des Workflows, der von dieser Instanz der <see cref="T:System.Activities.WorkflowInvoker" />-Klasse aufgerufen werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Activities.WorkflowInvoker" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> enthält Instanz- und statische Methoden zum synchronen Aufrufen von Workflows sowie Instanzmethoden zum asynchronen Aufrufen von Workflows.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen <xref:System.Activities.Statements.WriteLine>-Aktivität besteht.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft einen Workflow mithilfe des asynchronen <see cref="T:System.IAsyncResult" />-Entwurfsmusters asynchron auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter [Asynchrone Programmierung in C++](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">Die Methode, die aufgerufen werden muss, wenn der Workflow abgeschlossen wurde.</param>
        <param name="state">Ein optionales, anwendungsspezifisches Objekt, das Informationen über die asynchrone Operation enthält.</param>
        <summary>Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.AsyncCallback" /> und des vom Benutzer bereitgestellten Status asynchron auf.</summary>
        <returns>Ein Verweis auf den asynchronen Aufrufvorgang.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen ist, und um die Ausgabeparameter des Workflows abzurufen, rufen Sie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> der `callback`-Methode auf. Wenn <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird, bevor der Workflow abgeschlossen ist, erfolgt eine Sperre bis zum Abschluss des Workflows. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
 Diese Methode ruft einen Workflow mithilfe des asynchronen <xref:System.IAsyncResult>-Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Asynchrone Programmierung in C++](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Diese werden abgerufen, indem <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird. Wenn der Aufruf von <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <param name="callback">Die Methode, die aufgerufen werden muss, wenn der Workflow abgeschlossen wurde.</param>
        <param name="state">Ein optionales, anwendungsspezifisches Objekt, das Informationen über die asynchrone Operation enthält.</param>
        <summary>Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern, <see cref="T:System.AsyncCallback" /> und des vom Benutzer bereitgestellten Status asynchron auf.</summary>
        <returns>Ein Verweis auf den asynchronen Aufrufvorgang.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen ist, und um die Ausgabeparameter des Workflows abzurufen, rufen Sie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> der `callback`-Methode auf. Wenn <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird, bevor der Workflow abgeschlossen ist, erfolgt eine Sperre bis zum Abschluss des Workflows.  Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
 Diese Methode ruft einen Workflow mithilfe des asynchronen <xref:System.IAsyncResult>-Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Asynchrone Programmierung in C++](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Diese werden abgerufen, indem <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird. Wenn der Aufruf von <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</param>
        <param name="callback">Die Methode, die aufgerufen werden muss, wenn der Workflow abgeschlossen wurde.</param>
        <param name="state">Ein optionales, anwendungsspezifisches Objekt, das Informationen über die asynchrone Operation enthält.</param>
        <summary>Ruft einen Workflow mithilfe des angegebenen Timeoutintervalls, <see cref="T:System.AsyncCallback" /> und des vom Benutzer bereitgestellten Status asynchron auf.</summary>
        <returns>Ein Verweis auf den asynchronen Aufrufvorgang.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen ist, und um die Ausgabeparameter des Workflows abzurufen, rufen Sie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> der `callback`-Methode auf. Wenn <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird, bevor der Workflow abgeschlossen ist, erfolgt eine Sperre bis zum Abschluss des Workflows. Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst, wenn die <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>-Methode aufgerufen wird.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
 Diese Methode ruft einen Workflow mithilfe des asynchronen <xref:System.IAsyncResult>-Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Asynchrone Programmierung in C++](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Diese werden abgerufen, indem <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird. Wenn der Aufruf von <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <param name="timeout">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</param>
        <param name="callback">Die Methode, die aufgerufen werden muss, wenn der Workflow abgeschlossen wurde.</param>
        <param name="state">Ein optionales, anwendungsspezifisches Objekt, das Informationen über die asynchrone Operation enthält.</param>
        <summary>Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern, des Timeoutintervalls, <see cref="T:System.AsyncCallback" /> und des vom Benutzer bereitgestellten Status asynchron auf.</summary>
        <returns>Ein Verweis auf den asynchronen Aufrufvorgang.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen ist, und um die Ausgabeparameter des Workflows abzurufen, rufen Sie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> der `callback`-Methode auf. Wenn <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird, bevor der Workflow abgeschlossen ist, erfolgt eine Sperre bis zum Abschluss des Workflows. Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst, wenn <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
 Diese Methode ruft einen Workflow mithilfe des asynchronen <xref:System.IAsyncResult>-Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Asynchrone Programmierung in C++](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Diese werden abgerufen, indem <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird. Wenn der Aufruf von <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">Das Token für den abzubrechenden Workflow.</param>
        <summary>Versucht, den Workflow abzubrechen, der mit dem angegebenen <paramref name="userState" /> aufgerufen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur ein Workflow, der von einer der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen, die einen `userState`-Parameter annehmen kann, aufgerufen wurde, kann abgebrochen werden.  
  
 Wenn der Abbruch erfolgreich ist, wird die <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>-Eigenschaft von <xref:System.Activities.InvokeCompletedEventArgs>, die an den <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler übergeben wurde, auf true`true` festgelegt, andernfalls wird sie auf false`false` festgelegt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Nach dem Aufrufen des Workflows versucht der Host, den Workflow abzubrechen.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Das <see cref="T:System.IAsyncResult" />, das auf den <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />-Vorgang verweist, der den Workflow gestartet hat.</param>
        <summary>Gibt die Ergebnisse eines Workflows zurück, der mit einer der <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />-Überladungen aufgerufen wurde.</summary>
        <returns>Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen ist, und um die Ausgabeparameter des Workflows abzurufen, rufen Sie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> der `callback`-Methode auf, angegeben von <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>. Wenn <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird, bevor der Workflow abgeschlossen ist, erfolgt eine Sperre bis zum Abschluss des Workflows.  
  
 Diese Methode gibt die Ergebnisse eines Workflows zurück, der mithilfe des asynchronen <xref:System.IAsyncResult>-Entwurfsmusters asynchron aufgerufen wurde. Weitere Informationen finden Sie unter [Asynchrone Programmierung in C++](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Diese werden abgerufen, indem <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> aufgerufen wird. Wenn der Aufruf von <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Collections.ObjectModel.Collection`1" /> von Erweiterungen ab, die für von einer <see cref="T:System.Activities.WorkflowInvoker" />-Instanz aufgerufene Workflows zur Verfügung stehen.</summary>
        <value>Die <see cref="T:System.Collections.ObjectModel.Collection`1" /> von Erweiterungen, die für von einer <see cref="T:System.Activities.WorkflowInvoker" />-Instanz aufgerufene Workflows zur Verfügung stehen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird von Workflow-Hostautoren verwendet, um der <xref:System.Activities.WorkflowInvoker>-Instanz Erweiterungen hinzuzufügen, damit sie für Workflows zur Verfügung stehen, die davon aufgerufen werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein benutzerdefinierter <xref:System.Activities.Tracking.TrackingParticipant> in der <xref:System.Activities.WorkflowInvoker.Extensions%2A>-Auflistung einer <xref:System.Activities.WorkflowInvoker>-Instanz registriert. Dieses Codebeispiel ist Teil der [benutzerdefinierte nachverfolgung](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) Beispiel.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft einen Workflow synchron auf und gibt ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität nach Argumentnamen geordnet zurück, die die Ausgaben des Workflows darstellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen Workflow mit der an den <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />-Konstruktor übergebenen Workflowdefinition synchron auf.</summary>
        <returns>Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `DiceRoll`-Aktivität besteht. Die `DiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Wenn der Aufruf von `Invoke` zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben. Der Workflow wird zweimal aufgerufen. Dabei wird die an den WorkflowInvoker`WorkflowInvoker`-Konstruktor übergebene Workflowdefinition verwendet.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 Wenn die Stammaktivität des Workflows keine Ausgabeargumente aufweist oder diese vom Host nicht benötigt werden, können sie ignoriert werden. Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen <xref:System.Activities.Statements.WriteLine>-Aktivität ohne Ausgabeargumente besteht.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">Die Workflowdefinition des aufzurufenden Workflows.</param>
        <summary>Ruft einen Workflow mithilfe der angegebenen Workflowdefinition synchron auf.</summary>
        <returns>Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `DiceRoll`-Aktivität besteht. Die `DiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Wenn der Aufruf von `Invoke` zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im Ausgabewörterbuch zurückgegeben.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 Wenn die Stammaktivität des Workflows keine Ausgabeargumente aufweist oder diese vom Host nicht benötigt werden, können sie ignoriert werden. Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen <xref:System.Activities.Statements.WriteLine>-Aktivität ohne Ausgabeargumente besteht.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <summary>Ruft die Aktivität, die an den <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />-Konstruktor übergeben wurde, synchron mit dem angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern auf.</summary>
        <returns>Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `Divide`-Aktivität besteht, die über zwei Eingabeargumente und zwei Ausgabeargumente verfügt. Beim Aufrufen des Workflows wird das `arguments`-Wörterbuch übergeben, das die Werte für die einzelnen Eingabeargumente sortiert nach Argumentname enthält. Wenn der Aufruf von `Invoke` zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im `outputs`-Wörterbuch zurückgegeben.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 Wenn der Workflow von <xref:System.Activities.ActivityWithResult> abgeleitet wird, wie z. B. `CodeActivity<TResult>` oder `Activity<TResult>`, und Ausgabeargumente zusätzlich zum gut definierten <xref:System.Activities.Activity%601.Result%2A>-Ausgabeargument vorhanden sind, muss eine nicht generische Überladung von `Invoke` verwendet werden, um die zusätzlichen Argumente abzurufen. Hierzu muss die an den WorkflowInvoker`WorkflowInvoker`-Konstruktor übergebene Workflowdefinition den Typ <xref:System.Activities.Activity> aufweisen. In diesem Beispiel wird die `Divide`-Aktivität von `CodeActivity<int>` abgeleitet. Sie wird jedoch als <xref:System.Activities.Activity> deklariert, sodass eine nicht generische Überladung von `Invoke` verwendet wird, die ein Wörterbuch mit Argumenten anstelle eines einzelnen Rückgabewerts zurückgibt.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</param>
        <summary>Ruft einen Workflow mit dem angegebenen Timeoutintervall synchron auf.</summary>
        <returns>Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der zwei <xref:System.Activities.Statements.WriteLine>-Aktivitäten sowie eine <xref:System.Activities.Statements.Delay>-Aktivität enthält, die mit einer <xref:System.Activities.Statements.Delay.Duration%2A> von einer Minute konfiguriert ist. Dieser Workflow wird zweimal aufgerufen: das erste Mal mit einem Timeoutintervall von zwei Minuten und das zweite Mal mit einem Timeoutintervall von 30 Sekunden. Der erste Workflow wird erfolgreich abgeschlossen, der zweite jedoch nicht, sodass eine <xref:System.TimeoutException> ausgelöst wird und die folgende Meldung angezeigt wird.  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 Ein Beispiel der Verwendung von `Invoke` finden Sie unter der Ausgabe-Argumente, die Überladung von <xref:System.Activities.WorkflowInvoker.Invoke%2A> mit den gleichen Parametern wie diese Überladung ohne das Timeoutintervall.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">Die Workflowdefinition des aufzurufenden Workflows.</param>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <summary>Ruft einen Workflow mithilfe der angegebenen Workflowdefinition und des <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern synchron auf.</summary>
        <returns>Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `Divide`-Aktivität besteht, die über zwei Eingabeargumente und zwei Ausgabeargumente verfügt. Beim Aufrufen des Workflows wird das `arguments`-Wörterbuch übergeben, das die Werte für die einzelnen Eingabeargumente sortiert nach Argumentname enthält. Wenn der Aufruf von `Invoke` zurückgegeben wird, werden die einzelnen Ausgabeargumente nach Argumentname sortiert im `outputs`-Wörterbuch zurückgegeben.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 Wenn der Workflow von <xref:System.Activities.ActivityWithResult> abgeleitet wird, wie z. B. `CodeActivity<TResult>` oder `Activity<TResult>`, und Ausgabeargumente zusätzlich zum gut definierten <xref:System.Activities.Activity%601.Result%2A>-Ausgabeargument vorhanden sind, muss eine nicht generische Überladung von `Invoke` verwendet werden, um die zusätzlichen Argumente abzurufen. Hierzu muss die an `Invoke` übergebene Workflowdefinition den Typ <xref:System.Activities.Activity> aufweisen. In diesem Beispiel wird die `Divide`-Aktivität von `CodeActivity<int>` abgeleitet. Sie wird jedoch als <xref:System.Activities.Activity> deklariert, sodass eine nicht generische Überladung von `Invoke` verwendet wird, die ein Wörterbuch mit Argumenten anstelle eines einzelnen Rückgabewerts zurückgibt.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">Die Workflowdefinition des aufzurufenden Workflows.</param>
        <param name="timeout">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</param>
        <summary>Ruft einen Workflow mithilfe der angegebenen Workflowdefinition und des Timeoutintervalls synchron auf.</summary>
        <returns>Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der zwei <xref:System.Activities.Statements.WriteLine>-Aktivitäten sowie eine <xref:System.Activities.Statements.Delay>-Aktivität enthält, die mit einer <xref:System.Activities.Statements.Delay.Duration%2A> von einer Minute konfiguriert ist. Dieser Workflow wird zweimal aufgerufen: das erste Mal mit einem Timeoutintervall von zwei Minuten und das zweite Mal mit einem Timeoutintervall von 30 Sekunden. Der erste Workflow wird erfolgreich abgeschlossen, der zweite jedoch nicht, sodass eine <xref:System.TimeoutException> ausgelöst wird.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 Ein Beispiel der Verwendung von `Invoke` finden Sie unter der Ausgabe-Argumente, die Überladung von <xref:System.Activities.WorkflowInvoker.Invoke%2A> mit den gleichen Parametern wie diese Überladung ohne das Timeoutintervall.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <param name="timeout">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</param>
        <summary>Ruft die Aktivität, die an den <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />-Konstruktor übergeben wurde, synchron mit dem angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern und dem angegebenen Timeoutintervall auf.</summary>
        <returns>Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der zwei <xref:System.Activities.Statements.WriteLine>-Aktivitäten sowie eine <xref:System.Activities.Statements.Delay>-Aktivität enthält, die mit einer <xref:System.Activities.Statements.Delay.Duration%2A> von einer Minute konfiguriert ist. Dieser Workflow wird zweimal aufgerufen: das erste Mal mit einem Timeoutintervall von zwei Minuten und das zweite Mal mit einem Timeoutintervall von 30 Sekunden. Der erste Workflow wird erfolgreich abgeschlossen, der zweite jedoch nicht, sodass eine <xref:System.TimeoutException> ausgelöst wird und die folgende Meldung angezeigt wird.  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 Ein Beispiel der Verwendung von `Invoke` mit Eingabe- und ausgabeargumenten, finden Sie unter die Überladung von <xref:System.Activities.WorkflowInvoker.Invoke%2A> mit den gleichen Parametern wie diese Überladung ohne das Timeoutintervall.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">Die Workflowdefinition des aufzurufenden Workflows.</param>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <param name="timeout">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</param>
        <summary>Ruft einen Workflow mithilfe der angegebenen Workflowdefinition, des <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern und des Timeoutintervalls synchron auf.</summary>
        <returns>Ein Wörterbuch von <see cref="T:System.Activities.OutArgument" />- und <see cref="T:System.Activities.InOutArgument" />-Werten der Stammaktivität, nach Argumentnamen geordnet, das die Ausgaben des Workflows darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der zwei <xref:System.Activities.Statements.WriteLine>-Aktivitäten sowie eine <xref:System.Activities.Statements.Delay>-Aktivität enthält, die mit einer <xref:System.Activities.Statements.Delay.Duration%2A> von einer Minute konfiguriert ist. Dieser Workflow wird zweimal aufgerufen: das erste Mal mit einem Timeoutintervall von zwei Minuten und das zweite Mal mit einem Timeoutintervall von 30 Sekunden. Der erste Workflow wird erfolgreich abgeschlossen, der zweite jedoch nicht, sodass eine <xref:System.TimeoutException> ausgelöst wird.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 Ein Beispiel der Verwendung von `Invoke` mit Eingabe- und ausgabeargumenten, finden Sie unter die Überladung von <xref:System.Activities.WorkflowInvoker.Invoke%2A> mit den gleichen Parametern wie diese Überladung ohne das Timeoutintervall.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Der Typ des Workflows.</typeparam>
        <param name="workflow">Die Workflowdefinition des aufzurufenden Workflows. Die Workflowdefinition muss von <see cref="T:System.Activities.ActivityWithResult" /> abgeleitet sind.</param>
        <summary>Ruft einen Workflow mit der an den <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />-Konstruktor übergebenen Workflowdefinition synchron auf.</summary>
        <returns>Ein Wert des Typs TResult mit dem Ergebnis der Aktivitätsausführung.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `Add`-Aktivität besteht, die über zwei Eingabeargumente verfügt, und da sie von CodeActivity<int>`CodeActivity<int>` abgeleitet wird, verfügt sie über ein gut definiertes <xref:System.Activities.Activity%601.Result%2A>-Ausgabeargument. Beim Aufrufen des Workflows wird das `arguments`-Wörterbuch übergeben, das die Werte für die einzelnen Eingabeargumente sortiert nach Argumentname enthält. Bei der Rückgabe des Aufrufs von Invoke`Invoke` wird der Wert des <xref:System.Activities.Activity%601.Result%2A>-Ausgabearguments zurückgegeben. Dieses Codebeispiel basiert auf der [verwenden der WorkflowInvoker-Klasse](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) Beispiel.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Der Typ des Workflows.</typeparam>
        <param name="workflow">Die Workflowdefinition des aufzurufenden Workflows.</param>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <summary>Ruft einen Workflow mithilfe der angegebenen Workflowdefinition und des <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern synchron auf.</summary>
        <returns>Ein Wert des Typs TResult mit dem Ergebnis der Aktivitätsausführung.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.Invoke%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `Add`-Aktivität besteht, die über zwei Eingabeargumente verfügt, und da sie von CodeActivity<int>`CodeActivity<int>` abgeleitet wird, verfügt sie über ein gut definiertes <xref:System.Activities.Activity%601.Result%2A>-Ausgabeargument. Beim Aufrufen des Workflows wird das `arguments`-Wörterbuch übergeben, das die Werte für die einzelnen Eingabeargumente sortiert nach Argumentname enthält. Bei der Rückgabe des Aufrufs von Invoke`Invoke` wird der Wert des <xref:System.Activities.Activity%601.Result%2A>-Ausgabearguments zurückgegeben. Dieses Codebeispiel basiert auf der [verwenden der WorkflowInvoker-Klasse](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) Beispiel.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Der Typ des Workflows.</typeparam>
        <param name="workflow">Die Workflowdefinition des aufzurufenden Workflows.</param>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <param name="timeout">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</param>
        <summary>Ruft einen Workflow mithilfe der angegebenen Workflowdefinition, des <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern und des Timeoutintervalls synchron auf.</summary>
        <returns>Ein Wert des Typs TResult mit dem Ergebnis der Aktivitätsausführung.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `Add`-Aktivität besteht, die über zwei Eingabeargumente verfügt, und da sie von CodeActivity<int>`CodeActivity<int>` abgeleitet wird, verfügt sie über ein gut definiertes <xref:System.Activities.Activity%601.Result%2A>-Ausgabeargument. Beim Aufrufen des Workflows wird das `arguments`-Wörterbuch übergeben, das die Werte für die einzelnen Eingabeargumente sortiert nach Argumentname enthält. Bei der Rückgabe des Aufrufs von Invoke`Invoke` wird der Wert des <xref:System.Activities.Activity%601.Result%2A>-Ausgabearguments zurückgegeben. Dieses Codebeispiel basiert auf der [verwenden der WorkflowInvoker-Klasse](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) Beispiel.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Der Typ des Workflows.</typeparam>
        <param name="workflow">Die Workflowdefinition des aufzurufenden Workflows.</param>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <param name="additionalOutputs">Das Wörterbuch von zusätzlichen Ausgabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <param name="timeout">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</param>
        <summary>Ruft einen Workflow mithilfe der angegebenen Workflowdefinition, des <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern, des <see cref="T:System.Collections.Generic.IDictionary`2" /> von zusätzlichen Ausgabeparametern und des Timeoutintervalls synchron auf.</summary>
        <returns>Ein Wert des Typs TResult mit dem Ergebnis der Aktivitätsausführung.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode blockiert, bis der Workflow abgeschlossen ist, einschließlich der Leerlaufzeit. Die gesamte Workflowausführung erfolgt immer auf dem aufrufenden Thread. Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer einzelnen `Add`-Aktivität besteht, die über zwei Eingabeargumente verfügt, und da sie von CodeActivity<int>`CodeActivity<int>` abgeleitet wird, verfügt sie über ein gut definiertes <xref:System.Activities.Activity%601.Result%2A>-Ausgabeargument. Beim Aufrufen des Workflows wird das `arguments`-Wörterbuch übergeben, das die Werte für die einzelnen Eingabeargumente sortiert nach Argumentname enthält. Bei der Rückgabe des Aufrufs von Invoke`Invoke` wird der Wert des <xref:System.Activities.Activity%601.Result%2A>-Ausgabearguments zurückgegeben. Dieses Codebeispiel basiert auf der [verwenden der WorkflowInvoker-Klasse](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) Beispiel.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
 Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen Workflow asynchron auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
 Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <summary>Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern asynchron auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
 Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">Ein vom Benutzer bereitgestelltes Objekt, mit dem dieser spezielle asynchrone Aufrufvorgang von anderen aktuellen asynchronen Aufrufvorgängen unterschieden wird.</param>
        <summary>Ruft einen Workflow mithilfe des angegebenen eindeutigen Bezeichners asynchron auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `userState`-Parameter muss in allen gerade ausgeführten <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Vorgängen für die aktuelle Aktivität eindeutig sein. Wenn der `userState`-Parameter nicht eindeutig ist, wird eine <xref:System.ArgumentException> ausgelöst. Mit `userState` wird der Workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> identifiziert und mit <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> abgebrochen.  
  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
 Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</param>
        <summary>Ruft einen Workflow mit dem angegebenen Timeoutintervall asynchron auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
 Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <param name="userState">Ein vom Benutzer bereitgestelltes Objekt, mit dem dieser spezielle asynchrone Aufrufvorgang von anderen aktuellen asynchronen Aufrufvorgängen unterschieden wird.</param>
        <summary>Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern und einem eindeutigen Bezeichner asynchron auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `userState`-Parameter muss in allen gerade ausgeführten <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Vorgängen für die aktuelle Aktivität eindeutig sein. Wenn `userState` nicht eindeutig ist, wird eine <xref:System.ArgumentException> ausgelöst. Mit `userState` wird der Workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> identifiziert und mit <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> abgebrochen.  
  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Um ein anderes Timeoutintervall für den Abschluss des Workflows zu konfigurieren, verwenden Sie eine der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen, die einen <xref:System.TimeSpan> annehmen.  
  
 Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <param name="timeout">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</param>
        <summary>Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern und des angegebenen Timeoutintervalls asynchron auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
 Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</param>
        <param name="userState">Ein vom Benutzer bereitgestelltes Objekt, mit dem dieser spezielle asynchrone Aufrufvorgang von anderen aktuellen asynchronen Aufrufvorgängen unterschieden wird.</param>
        <summary>Ruft einen Workflow mit dem angegebenen Timeoutintervall und einem eindeutigen Bezeichner asynchron auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `userState`-Parameter muss in allen gerade ausgeführten <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Vorgängen für die aktuelle Aktivität eindeutig sein. Wenn `userState` nicht eindeutig ist, wird eine <xref:System.ArgumentException> ausgelöst. Mit `userState` wird der Workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> identifiziert und mit <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> abgebrochen.  
  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
 Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Das Wörterbuch von Eingabeparametern für den Workflow, nach Argumentname geordnet.</param>
        <param name="timeout">Das Intervall, in dem der Workflow abgeschlossen werden muss, bevor er abgebrochen und eine <see cref="T:System.TimeoutException" /> ausgelöst wird.</param>
        <param name="userState">Ein vom Benutzer bereitgestelltes Objekt, mit dem dieser spezielle asynchrone Aufrufvorgang von anderen aktuellen asynchronen Aufrufvorgängen unterschieden wird.</param>
        <summary>Ruft einen Workflow mithilfe des angegebenen <see cref="T:System.Collections.Generic.IDictionary`2" /> von Eingabeparametern, des angegebenen Timeoutintervalls und einem eindeutigen Bezeichner asynchron auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `userState`-Parameter muss in allen gerade ausgeführten <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Vorgängen für die aktuelle Aktivität eindeutig sein. Wenn `userState` nicht eindeutig ist, wird eine <xref:System.ArgumentException> ausgelöst. Mit `userState` wird der Workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> identifiziert und mit <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> abgebrochen.  
  
 Um benachrichtigt zu werden, wenn der Workflow abgeschlossen wurde, verarbeiten Sie <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Falls der Workflow innerhalb des angegebenen Timeoutintervalls nicht abgeschlossen wird, wird der Workflow abgebrochen, und eine <xref:System.TimeoutException> wird ausgelöst.  
  
> [!NOTE]
>  Das <xref:System.TimeoutException>-Objekt wird nur ausgelöst, wenn das Timeoutintervall verstreicht und der Workflow während der Ausführung in den Leerlauf wechselt. Ein Workflow, der erst nach dem angegebenen Timeoutintervall abgeschlossen wird, wird dennoch erfolgreich beendet, wenn der Workflow nicht in den Leerlauf wechselt.  
  
 Diese Methode ruft einen Workflow mithilfe des ereignisbasierten asynchronen Entwurfsmusters asynchron auf. Weitere Informationen finden Sie unter [Übersicht über ereignisbasierte asynchrone Muster](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der von einer der <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" />-Überladungen aufgerufene Workflow abgeschlossen oder abgebrochen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln Sie dieses, um zu bestimmen, ob ein Workflow, der mit einer der <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>-Überladungen aufgerufen wurde, erfolgreich abgeschlossen wurde, und um die Ausgabeargumente des abgeschlossenen Workflows abzurufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Workflow aufgerufen, der aus einer `LongRunningDiceRoll`-Aktivität besteht. Die `LongRunningDiceRoll`-Aktivität verfügt über zwei Ausgabeargumente, die die Ergebnisse des Würfelvorgangs darstellen. Wenn der Workflow abgeschlossen ist, werden diese im <xref:System.Activities.WorkflowInvoker.InvokeCompleted>-Handler abgerufen.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
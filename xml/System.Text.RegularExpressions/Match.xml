<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7604f3887c4a588a01499e20c6908f7daad83892" /><Meta Name="ms.sourcegitcommit" Value="f9576bf8c61e3d46834aeeff50f858359f2a99ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/09/2020" /><Meta Name="ms.locfileid" Value="77102015" /></Metadata><TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Ergebnisse auf der Grundlage einer Übereinstimmung mit einem einzelnen regulären Ausdruck dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Text.RegularExpressions.Match>-Objekt ist unveränderlich und verfügt über keinen öffentlichen Konstruktor. Eine Instanz der <xref:System.Text.RegularExpressions.Match>-Klasse wird von der <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>-Methode zurückgegeben und stellt die erste Muster Übereinstimmung in einer Zeichenfolge dar. Nachfolgende Übereinstimmungen werden durch <xref:System.Text.RegularExpressions.Match> von der <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>-Methode zurückgegebene Objekte dargestellt. Außerdem wird ein <xref:System.Text.RegularExpressions.MatchCollection> Objekt, das aus null, einem oder mehreren <xref:System.Text.RegularExpressions.Match> Objekten besteht, von der <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType>-Methode zurückgegeben.  
  
 Wenn die <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType>-Methode nicht mit einem Muster für reguläre Ausdrücke in einer Eingabe Zeichenfolge verglichen werden kann, wird ein leeres <xref:System.Text.RegularExpressions.MatchCollection>-Objekt zurückgegeben. Anschließend können Sie in Visual Basic ein `foreach` Konstrukt C# in oder ein `For Each` Konstrukt verwenden, um die Auflistung zu durchlaufen.  
  
 Wenn die <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>-Methode nicht mit dem Muster für reguläre Ausdrücke übereinstimmt, gibt Sie ein <xref:System.Text.RegularExpressions.Match> Objekt zurück, das gleich <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>ist. Sie können die <xref:System.Text.RegularExpressions.Group.Success%2A>-Eigenschaft verwenden, um zu bestimmen, ob die Übereinstimmung erfolgreich war. Dies wird im folgenden Beispiel veranschaulicht.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 Wenn eine Muster Übereinstimmung erfolgreich ist, enthält die <xref:System.Text.RegularExpressions.Capture.Value%2A>-Eigenschaft die übereinstimmende Teil Zeichenfolge, die <xref:System.Text.RegularExpressions.Capture.Index%2A>-Eigenschaft gibt die null basierte Anfangsposition der übereinstimmenden Teil Zeichenfolge in der Eingabe Zeichenfolge an, und die <xref:System.Text.RegularExpressions.Capture.Length%2A>-Eigenschaft gibt die Länge der übereinstimmenden Teil Zeichenfolge in  
  
 Da eine einzelne Übereinstimmung mehrere Erfassungs Gruppen beinhalten kann, verfügt <xref:System.Text.RegularExpressions.Match> über eine <xref:System.Text.RegularExpressions.Match.Groups%2A>-Eigenschaft, die die <xref:System.Text.RegularExpressions.GroupCollection>zurückgibt. Die <xref:System.Text.RegularExpressions.Match> Instanz selbst entspricht dem ersten Objekt in der Auflistung bei `Match.Groups[0]` (`Match.Groups(0)` in Visual Basic), das die gesamte Übereinstimmung darstellt. Es gibt folgende Möglichkeiten, um auf die erfassten Gruppen in einer Entsprechung zuzugreifen:  
  
-   Sie können die Member des <xref:System.Text.RegularExpressions.GroupCollection> Objekts mithilfe eines `foreach` (C#)-oder `For Each`-Konstrukts (Visual Basic) durchlaufen.  
  
-   Sie können die <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType>-Eigenschaft verwenden, um Gruppen nach der Nummer der Erfassungs Gruppe abzurufen. Beachten Sie, dass Sie bestimmen können, welche nummerierten Gruppen in einem regulären Ausdruck vorhanden sind, indem Sie die-Instanz <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType>-Methode aufrufen.  
  
-   Sie können die <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType>-Eigenschaft verwenden, um Gruppen nach dem Namen der Erfassungs Gruppe abzurufen. Beachten Sie, dass Sie bestimmen können, welche benannten Gruppen in einem regulären Ausdruck vorhanden sind, indem Sie die-Instanz <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType>-Methode aufrufen.  
  
   
  
## Examples  
 In den folgenden Beispielen wird der reguläre Ausdruck `Console\.Write(Line)?`verwendet. Der reguläre Ausdruck wird wie folgt interpretiert:  
  
|||  
|-|-|  
|Konsolen\\. Schreibung|Übereinstimmung mit der Zeichenfolge „Console.Write“. Beachten Sie, dass das Zeichen "." mit Escapezeichen versehen wird, sodass es als literalzeitraum und nicht als Platzhalter interpretiert wird, der mit einem beliebigen Zeichen übereinstimmt.|  
|(Zeile)?|Übereinstimmung mit null oder einem Vorkommen der Zeichenfolge „Line“.|  
  
 **Beispiel 1**  
  
 Im folgenden Beispiel wird die <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType>-Methode aufgerufen, um alle Muster Übereinstimmungen in einer Eingabe Zeichenfolge abzurufen. Anschließend werden die <xref:System.Text.RegularExpressions.Match>-Objekte im zurückgegebenen <xref:System.Text.RegularExpressions.MatchCollection>-Objekt durchlaufen, um Informationen zu den einzelnen vergleichen anzuzeigen.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **Beispiel 2**  
  
 Im folgenden Beispiel werden die Methoden <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> und <xref:System.Text.RegularExpressions.Match.NextMatch%2A> aufgerufen, um eine Entsprechung gleichzeitig abzurufen.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die leere Gruppe ab. Alle fehlgeschlagenen Übereinstimmungen geben diese leere Übereinstimmung zurück.</summary>
        <value>Eine leere Übereinstimmung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft sollte nicht verwendet werden, um zu bestimmen, ob eine Entsprechung erfolgreich ist. Verwenden Sie stattdessen die `Match.Success`-Eigenschaft (die von <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>geerbt wird).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung der mit dem regulären Ausdruck übereinstimmenden Gruppen ab.</summary>
        <value>Die Zeichengruppen, die mit dem Muster übereinstimmen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Muster für reguläre Ausdrücke kann Teil Ausdrücke enthalten, die durch das Einschließen eines Teils des Musters für reguläre Ausdrücke in Klammern definiert werden. Jeder dieser Teil Ausdruck bildet eine Gruppe. Die <xref:System.Text.RegularExpressions.Match.Groups%2A>-Eigenschaft ermöglicht den Zugriff auf Informationen zu diesen Teil Ausdrücken. Beispielsweise weist das Muster für reguläre Ausdrücke `(\d{3})-(\d{3}-\d{4})`, das Nordamerika-Telefonnummern entspricht, zwei Teil Ausdrücke auf. Der erste besteht aus dem flächencode, der die ersten drei Ziffern der Telefonnummer darstellt. Diese Gruppe wird durch den ersten Teil des regulären Ausdrucks aufgezeichnet, `(\d{3})`. Die zweite besteht aus der einzelnen Telefonnummer, die die letzten sieben Ziffern der Telefonnummer darstellt. Diese Gruppe wird durch den zweiten Teil des regulären Ausdrucks aufgezeichnet, `(\d{3}-\d{4})`. Diese beiden Gruppen können dann aus dem <xref:System.Text.RegularExpressions.GroupCollection> Objekt abgerufen werden, das von der <xref:System.Text.RegularExpressions.Match.Groups%2A>-Eigenschaft zurückgegeben wird, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 Das <xref:System.Text.RegularExpressions.GroupCollection> Objekt, das von der <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, ist ein NULL basiertes Auflistungs Objekt, das immer über mindestens einen Member verfügt. Wenn die Engine für reguläre Ausdrücke keine Übereinstimmungen in einer bestimmten Eingabe Zeichenfolge finden kann, wird die <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>-Eigenschaft des einzelnen <xref:System.Text.RegularExpressions.Group> Objekts in der Auflistung (das Objekt bei Index 0) auf `false` festgelegt, und die <xref:System.Text.RegularExpressions.Capture.Value%2A>-Eigenschaft des <xref:System.Text.RegularExpressions.Group> Objekts wird auf <xref:System.String.Empty?displayProperty=nameWithType>festgelegt. Wenn die Engine für reguläre Ausdrücke eine Übereinstimmung finden kann, enthält das erste Element des <xref:System.Text.RegularExpressions.GroupCollection> Objekts (das Element bei Index 0), das von der <xref:System.Text.RegularExpressions.Match.Groups%2A>-Eigenschaft zurückgegeben wird, eine Zeichenfolge, die mit dem gesamten Muster für reguläre Ausdrücke übereinstimmt. Jedes nachfolgende Element vom Index eins nach oben stellt eine erfasste Gruppe dar, wenn der reguläre Ausdruck Erfassungs Gruppen einschließt. Weitere Informationen finden Sie im Abschnitt "Gruppierungskonstrukte und Objekte für reguläre Ausdrücke" im Artikel [Gruppierungskonstrukte](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) .  
  
   
  
## Examples  
 Im folgenden Beispiel wird versucht, ein Muster eines regulären Ausdrucks mit einer Beispiel Zeichenfolge zu vergleichen. Im Beispiel wird die <xref:System.Text.RegularExpressions.Match.Groups%2A>-Eigenschaft verwendet, um Informationen zu speichern, die von der Entsprechung zum Anzeigen der Konsole abgerufen werden.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein neues <see cref="T:System.Text.RegularExpressions.Match" />-Objekt mit den Ergebnissen für die nächste Übereinstimmung zurück und beginnt dabei an der Endposition der vorherigen Übereinstimmung (mit dem Zeichen, das dem letzten übereinstimmenden Zeichen folgt).</summary>
        <returns>Die folgende Übereinstimmung für einen regulären Ausdruck.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt dem erneuten Aufrufen von <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> und dem übergeben von (`Index+Length`) als neue Startposition.  
  
> [!NOTE]
>  Mit dieser Methode wird die aktuelle Instanz nicht geändert. Stattdessen wird ein neues <xref:System.Text.RegularExpressions.Match> Objekt zurückgegeben, das Informationen über die nächste Übereinstimmung enthält.  
  
 Wenn Sie versuchen, die nächste Übereinstimmung abzurufen, kann ein <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> ausgelöst werden, wenn ein Timeout Wert für übereinstimmende Vorgänge wirksam ist und der Versuch, die nächste Übereinstimmung zu finden, dieses Timeout Intervall überschreitet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Text.RegularExpressions.Match.NextMatch%2A>-Methode verwendet, um nach der ersten Übereinstimmung reguläre Ausdrucks Übereinstimmungen zu erfassen.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten.</exception>
        <block subset="none" type="usage"><para>Wenn ein Übereinstimmungs Versuch durch Aufrufen der <see cref="M:System.Text.RegularExpressions.Match.NextMatch" />-Methode wiederholt wird, gibt die Engine für reguläre Ausdrücke eine leere Übereinstimmung mit einer speziellen Behandlung In der Regel beginnt <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> mit der Suche nach der nächsten Übereinstimmung genau dort, wo die vorherige Übereinstimmung ausgelassen wurde. Nach einer leeren Entsprechung wird die <see cref="M:System.Text.RegularExpressions.Match.NextMatch" />-Methode jedoch um ein Zeichen fortgesetzt, bevor die nächste Übereinstimmung versucht wird. Durch dieses Verhalten wird sichergestellt, dass die Engine für reguläre Ausdrücke die Zeichenfolge durchläuft. Da eine leere Übereinstimmung nicht zu einer Vorwärtsbewegung führt, würde die nächste Übereinstimmung an derselben Stelle wie die vorherige Übereinstimmung beginnen und dieselbe leere Zeichenfolge wiederholt zuordnen.  
  
Dies wird im folgenden Beispiel veranschaulicht. Das Muster für reguläre Ausdrücke <c>a *</c> sucht nach 0 (null) oder mehr Vorkommen des Buchstabens "a" in der Zeichenfolge "abaabb". Wie die Ausgabe des Beispiels zeigt, findet die Suche sechs Übereinstimmungen. Der erste Übereinstimmungs Versuch findet das erste "a". Die zweite Übereinstimmung beginnt genau mit dem Ende der ersten Übereinstimmung vor dem ersten b. Es findet keine Vorkommen von "a" und gibt eine leere Zeichenfolge zurück. Die dritte Übereinstimmung beginnt nicht genau, wo die zweite Übereinstimmung endet, da die zweite Übereinstimmung eine leere Zeichenfolge zurückgegeben hat. Stattdessen beginnt ein Zeichen später nach dem ersten "b". Die dritte Entsprechung findet zwei Vorkommen von "a" und gibt "AA" zurück. Der vierte Übereinstimmungs Versuch beginnt mit dem Ende der dritten Übereinstimmung vor dem zweiten "b" und gibt eine leere Zeichenfolge zurück. Der fünfte Übereinstimmungs Versuch verschiebt ein Zeichen so weiter, dass es vor dem dritten "b" beginnt, und gibt eine leere Zeichenfolge zurück. Die sechste Entsprechung beginnt nach dem letzten "b" und gibt erneut eine leere Zeichenfolge zurück.  
  
[! Code-csharp[System. Text. RegularExpressions. Match. NextMatch # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)] [! Code-vb[System. Text. RegularExpressions. Match. NextMatch # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">Das zu verwendende Ersetzungsmuster.</param>
        <summary>Gibt die Erweiterung des angegebenen Ersetzungsmusters zurück.</summary>
        <returns>Die erweiterte Version des <paramref name="replacement" />-Parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Während die <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType>-Methode alle Übereinstimmungen in einer Eingabe Zeichenfolge durch ein angegebenes Ersetzungs Muster ersetzt, ersetzt die <xref:System.Text.RegularExpressions.Match.Result%2A>-Methode eine einzelne Übereinstimmung mit einem angegebenen Ersetzungs Muster. Da es mit einer einzelnen Übereinstimmung arbeitet, ist es auch möglich, die übereinstimmende Zeichenfolge zu verarbeiten, bevor Sie die <xref:System.Text.RegularExpressions.Match.Result%2A>-Methode aufruft.  
  
 Der `replacement`-Parameter ist ein Standardmäßiges Ersatz Muster für reguläre Ausdrücke. Sie kann aus Literalzeichen und Ersetzungen regulärer Ausdrücke bestehen. Weitere Informationen finden Sie unter [Ersetzungen in regulären Ausdrücken](~/docs/standard/base-types/substitutions-in-regular-expressions.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Bindestriche, die einen Klammer Ausdruck starten und beenden, durch Klammern ersetzt.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 Das Muster für reguläre Ausdrücke `--(.+?)--` wird entsprechend der folgenden Tabelle interpretiert:  
  
|Muster|BESCHREIBUNG|  
|-------------|-----------------|  
|`--`|Entsprechung für zwei Bindestriche.|  
|`(.+?)`|Eine Entsprechung für ein beliebiges Zeichen, jedoch so wenige Male wie möglich. Dies ist die erste Erfassungsgruppe.|  
|`--`|Entsprechung für zwei Bindestriche.|  
  
 Beachten Sie, dass das Muster für reguläre Ausdrücke `--(.+?)--` den Lazy quantififier `+?`verwendet. Wenn der gierige `+` Quantifizierer verwendet wird, würde die Engine für reguläre Ausdrücke nur eine einzige Entsprechung in der Eingabe Zeichenfolge finden.  
  
 Die Ersetzungs Zeichenfolge `($1)` ersetzt die Übereinstimmung mit der ersten erfassten Gruppe, die in Klammern eingeschlossen ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="replacement" /> ist <see langword="null" /></exception>
        <exception cref="T:System.NotSupportedException">Erweiterung ist für dieses Muster nicht zulässig.</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">Ersetzungen in regulären Ausdrücken</related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="inner">Eine der erwarteten Übereinstimmung entsprechende Übereinstimmung mit einem regulären Ausdruck.</param>
        <summary>Gibt eine der bereitgestellten Instanz entsprechende <see cref="T:System.Text.RegularExpressions.Match" />-Instanz zurück, die von mehreren Threads gemeinsam verwendet werden kann.</summary>
        <returns>Eine Übereinstimmung für einen regulären Ausdruck, die für mehrere Threads freigegeben werden kann.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inner" /> ist <see langword="null" /></exception>
      </Docs>
    </Member>
  </Members>
</Type>

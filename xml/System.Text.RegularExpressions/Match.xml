<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4d31d5a034bdb7a78a6dd9e2a78cda160deb9089" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58700221" /></Metadata><TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Ergebnisse aus einer einzelnen Übereinstimmung eines regulären Ausdrucks dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.RegularExpressions.Match> -Objekt ist unveränderlich und besitzt keinen öffentlichen Konstruktor. Eine Instanz von der <xref:System.Text.RegularExpressions.Match> Klasse wird zurückgegeben, durch die <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> -Methode und stellt das erste Muster in einer Zeichenfolge überein. Nachfolgende Übereinstimmungen werden durch dargestellt <xref:System.Text.RegularExpressions.Match> zurückgegebenen Objekte die <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> Methode. Darüber hinaus eine <xref:System.Text.RegularExpressions.MatchCollection> -Objekt, das besteht aus 0 (null), ein oder mehrere <xref:System.Text.RegularExpressions.Match> Objekte wird durch zurückgegeben, die <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> Methode.  
  
 Wenn die <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> Methode bei der Muster eines regulären Ausdrucks in einer Eingabezeichenfolge entsprechen, es gibt eine leere <xref:System.Text.RegularExpressions.MatchCollection> Objekt. Anschließend können Sie eine `foreach` -Konstrukt in C# oder ein `For Each` -Konstrukts in Visual Basic zum Durchlaufen der Auflistung.  
  
 Wenn die <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> Methode nicht das Muster des regulären Ausdrucks übereinstimmen, gibt es eine <xref:System.Text.RegularExpressions.Match> Objekt, das gleich <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>. Sie können die <xref:System.Text.RegularExpressions.Group.Success%2A> Eigenschaft, um zu bestimmen, ob die Übereinstimmung erfolgreich war. Dies wird im folgenden Beispiel veranschaulicht.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 Wenn eine Musterübereinstimmung erfolgreich ist die <xref:System.Text.RegularExpressions.Capture.Value%2A> Eigenschaft enthält die übereinstimmende Teilzeichenfolge, die <xref:System.Text.RegularExpressions.Capture.Index%2A> Eigenschaft gibt die nullbasierte Anfangsposition der übereinstimmenden Teilzeichenfolge in der Eingabezeichenfolge, an und <xref:System.Text.RegularExpressions.Capture.Length%2A> Eigenschaft gibt an, die Länge der übereinstimmenden Teilzeichenfolge in der Eingabezeichenfolge steht.  
  
 Da eine einzelne Übereinstimmung mehrere Erfassungsgruppen umfassen kann <xref:System.Text.RegularExpressions.Match> verfügt über eine <xref:System.Text.RegularExpressions.Match.Groups%2A> Eigenschaft, die zurückgibt der <xref:System.Text.RegularExpressions.GroupCollection>. Die <xref:System.Text.RegularExpressions.Match> Instanz selbst ist gleichbedeutend mit das erste Objekt in der Auflistung am `Match.Groups[0]` (`Match.Groups(0)` in Visual Basic), steht für die gesamte Übereinstimmung. Sie können die erfassten Gruppen in einer Übereinstimmung zugreifen, es gibt folgende Möglichkeiten:  
  
-   Sie können die Member durchlaufen die <xref:System.Text.RegularExpressions.GroupCollection> Objekt mit eine `foreach` (C#) oder `For Each` (Visual Basic) Konstrukt.  
  
-   Sie können die <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> Eigenschaft zum Abrufen von Gruppen durch die Anzahl der Erfassungsgruppe. Beachten Sie, dass Sie ermitteln können, welche nummerierten Gruppen in einem regulären Ausdruck vorhanden sind, durch Aufrufen der Instanz <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> Methode.  
  
-   Sie können die <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> Eigenschaft zum Abrufen von Gruppen mit dem Namen der Erfassungsgruppe. Beachten Sie, dass Sie ermitteln können, welche benannten Gruppen in einem regulären Ausdruck vorhanden sind, durch Aufrufen der Instanz <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Die folgenden Beispiele verwenden den regulären Ausdruck `Console\.Write(Line)?`. Der reguläre Ausdruck wird wie folgt interpretiert:  
  
|||  
|-|-|  
|Console\\.Write|Übereinstimmung mit der Zeichenfolge „Console.Write“. Beachten Sie, dass die "." Zeichen wird mit Escapezeichen versehen, sodass er als einen Literalpunkt interpretiert wird, statt als Platzhalter, der mit jedem Zeichen übereinstimmt.|  
|(Zeile)?|Übereinstimmung mit null oder einem Vorkommen der Zeichenfolge „Line“.|  
  
 **Beispiel 1**  
  
 Im folgenden Beispiel wird die <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> Methode zum Abrufen von allen musterübereinstimmungen in einer Eingabezeichenfolge. Iteriert dann die <xref:System.Text.RegularExpressions.Match> Objekte in der zurückgegebenen <xref:System.Text.RegularExpressions.MatchCollection> Objekt, das Informationen für jede Übereinstimmung anzuzeigen.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **Beispiel 2**  
  
 Im folgenden Beispiel wird die <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> und <xref:System.Text.RegularExpressions.Match.NextMatch%2A> Methoden, um eine Übereinstimmung zu einem Zeitpunkt abrufen.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die leere Gruppe ab. Alle fehlgeschlagenen Übereinstimmungen geben diese leere Übereinstimmung zurück.</summary>
        <value>Eine leere Übereinstimmung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft sollte nicht verwendet werden, um festzustellen, ob eine Übereinstimmung erfolgreich ist. Verwenden Sie stattdessen die `Match.Success` Eigenschaft (von denen geerbt <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung der mit dem regulären Ausdruck übereinstimmenden Gruppen ab.</summary>
        <value>Die Zeichengruppen, die mit dem Muster übereinstimmen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Muster eines regulären Ausdrucks zählen Teilausdrücken durchzuführen, die definiert werden, indem ein Teil der Muster für reguläre Ausdrücke in Klammern einschließen. Jeder solche Teilausdruck bildet eine Gruppe. Die <xref:System.Text.RegularExpressions.Match.Groups%2A> Eigenschaft bietet Zugriff auf Informationen zu diesen Teilausdruck entspricht. Zum Beispiel das Muster des regulären Ausdrucks `(\d{3})-(\d{3}-\d{4})`, der Telefonnummern für Nordamerika, entspricht zwei Teilausdrücke hat. Die erste besteht aus einer Ortskennzahl, die den ersten drei Ziffern der Telefonnummer besteht. Diese Gruppe wird durch den ersten Teil den regulären Ausdruck erfasst `(\d{3})`. Die zweite besteht aus der jeweiligen Telefonnummer, die in den letzten sieben Ziffern der Telefonnummer besteht. Diese Gruppe wird durch den zweiten Teil des regulären Ausdrucks, erfasst `(\d{3}-\d{4})`. Diese beiden Gruppen können dann abgerufen werden, aus der <xref:System.Text.RegularExpressions.GroupCollection> -Objekt, das von zurückgegeben wird die <xref:System.Text.RegularExpressions.Match.Groups%2A> Eigenschaft, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 Die <xref:System.Text.RegularExpressions.GroupCollection> zurückgegebenes Objekt der <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> Eigenschaft ist ein nullbasierten Auflistung-Objekt, das immer über mindestens einen Member verfügt. Wenn die Engine für reguläre Ausdrücke keine Übereinstimmung in einer Eingabezeichenfolge findet die <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> Eigenschaft der einzelnen <xref:System.Text.RegularExpressions.Group> Objekt in der Auflistung (das Objekt bei Index 0) festgelegt ist, um `false` und <xref:System.Text.RegularExpressions.Group> des Objekts <xref:System.Text.RegularExpressions.Capture.Value%2A>-Eigenschaftensatz auf <xref:System.String.Empty?displayProperty=nameWithType>. Wenn die Engine für reguläre Ausdrücke eine Übereinstimmung, die das erste Element finden, kann die <xref:System.Text.RegularExpressions.GroupCollection> zurückgegebenes Objekt (das Element am Index 0) der <xref:System.Text.RegularExpressions.Match.Groups%2A> Eigenschaft enthält eine Zeichenfolge mit dem Muster des gesamten regulären Ausdruck übereinstimmt. Jedes nachfolgende Element darstellt, aus dem Index eine aufwärts, eine erfasste Gruppe ist, wenn der reguläre Ausdruck enthält Erfassungsgruppen. Weitere Informationen finden Sie im Abschnitt "Gruppierung erstellt und regulären Ausdrucksobjekte" der [Gruppierungskonstrukte](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) Artikel.  
  
   
  
## Examples  
 Im folgenden Beispiel wird versucht, die Muster eines regulären Ausdrucks für eine Beispielzeichenfolge entsprechen. Im Beispiel wird die <xref:System.Text.RegularExpressions.Match.Groups%2A> Eigenschaft zum Speichern von Informationen, die von der Übereinstimmung für die Anzeige in der Konsole abgerufen werden.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein neues <see cref="T:System.Text.RegularExpressions.Match" />-Objekt mit den Ergebnissen für die nächste Übereinstimmung zurück und beginnt dabei an der Endposition der vorherigen Übereinstimmung (mit dem Zeichen, das dem letzten übereinstimmenden Zeichen folgt).</summary>
        <returns>Die folgende Übereinstimmung für einen regulären Ausdruck.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist vergleichbar mit einem Aufruf <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> erneut, und übergeben (`Index+Length`) wie das neue Startposition.  
  
> [!NOTE]
>  Diese Methode ändert nicht die aktuelle Instanz. Stattdessen gibt es eine neue <xref:System.Text.RegularExpressions.Match> -Objekt, das Informationen über die nächste Übereinstimmung enthält.  
  
 Versuch zum Abrufen der nächsten Übereinstimmung löst möglicherweise eine <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Wenn ein Timeoutwert für das Abgleichen von Vorgängen aktiviert ist, und der Versuch, die nächste Übereinstimmung zu finden ist länger, Timeoutintervall als.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Text.RegularExpressions.Match.NextMatch%2A> Methode zum Erfassen des regulären Ausdrucks entspricht, über die erste Übereinstimmung.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten.</exception>
        <block subset="none" type="usage"><para>Wenn ein Versuch wird wiederholt durch Aufrufen der <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> Methode, die Engine für reguläre Ausdrücke gibt leere Übereinstimmungen besondere Behandlung. In der Regel <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> beginnt die Suche für die nächste Übereinstimmung genau, wo die vorherige Übereinstimmung unterbrochen. Doch danach wird eine leere Übereinstimmung gibt die <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> Methode erhöht um ein Zeichen, bevor Sie versuchen, die nächste Übereinstimmung. Dieses Verhalten wird sichergestellt, dass die Engine für reguläre Ausdrücke durch die Zeichenfolge fortgesetzt wird. Da es sich bei eine leere Übereinstimmung keine vorwärtsbewegung ergibt, andernfalls startet die nächste Übereinstimmung in genau dieselbe Stelle ein wie die vorherige Übereinstimmung, und es würde die gleiche leere Zeichenfolge wiederholt übereinstimmen.  
  
Dies wird im folgenden Beispiel veranschaulicht. Muster für reguläre Ausdrücke <c>eine *</c> Suchvorgänge für NULL oder mehr Vorkommen des Buchstabens "a" in der Zeichenfolge "Abaabb". Wie die Ausgabe des Beispiels zeigt, findet die Suche sechs entspricht. Der erste Versuch sucht das erste "a". Die zweite Match-beginnt, in dem die erste exakt endet, vor dem ersten b. Es findet keine Vorkommen von "a" und eine leere Zeichenfolge zurückgegeben. Die dritte Übereinstimmung beginnt nun nicht genau, in dem zweiten beendet wurde, da die zweite Übereinstimmung eine leere Zeichenfolge zurückgegeben wurde. Stattdessen wird ein Zeichen später, nach der ersten "b". Die dritte Übereinstimmung sucht nach zwei Vorkommen von "a" und "aa" zurückgegeben. Der vierte Versuch beginnt, in denen die dritte Vergleich beendet wurde, bevor Sie die zweite "b", und eine leere Zeichenfolge zurückgegeben. Der fünfte Versuch setzt erneut ein Zeichen, damit sie vor der dritten "b" beginnt und eine leere Zeichenfolge zurückgegeben. Die sechste Übereinstimmung nach der letzten "b" beginnt und erneut eine leere Zeichenfolge zurückgegeben.  
  
[! Code-Csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)] [! Code – Vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">Das zu verwendende Ersetzungsmuster.</param>
        <summary>Gibt die Erweiterung des angegebenen Ersetzungsmusters zurück.</summary>
        <returns>Die erweiterte Version des <paramref name="replacement" />-Parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Während der <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> Methode ersetzt alle Übereinstimmungen in einer Eingabezeichenfolge eine Zeichenfolge mit einem angegebenen Ersetzungsmuster der <xref:System.Text.RegularExpressions.Match.Result%2A> Methode ersetzt eine einzelne Übereinstimmung mit einem angegebenen Ersetzungsmuster. Da es eine einzelne Übereinstimmung verarbeitet, es ist auch möglich, zu verarbeiten, die übereinstimmende Zeichenfolge vor dem Aufruf der <xref:System.Text.RegularExpressions.Match.Result%2A> Methode.  
  
 Die `replacement` -Parameter ist ein Ersetzungsmuster standard regulären Ausdruck. Sie können von Literalzeichen und reguläre Ausdrücke Ersetzungen bestehen. Weitere Informationen finden Sie unter [Ersetzungen in regulären Ausdrücken](~/docs/standard/base-types/substitutions-in-regular-expressions.md).  
  
   
  
## Examples  
 Im folgende Beispiel ersetzt die Bindestriche aus, die Beginn und Ende ein Klammerausdrucks mit Klammern.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 Das Muster für reguläre Ausdrücke `--(.+?)--` wird entsprechend der folgenden Tabelle interpretiert:  
  
|Muster|Beschreibung |  
|-------------|-----------------|  
|`--`|Übereinstimmung mit zwei Bindestriche enthalten.|  
|`(.+?)`|Übereinstimmung mit beliebigem Zeichen eine oder mehrere, jedoch so wenige Male wie möglich. Dies ist die erste Erfassungsgruppe.|  
|`--`|Übereinstimmung mit zwei Bindestriche enthalten.|  
  
 Beachten Sie, dass das Muster für reguläre Ausdrücke `--(.+?)--` verwendet den trägen Quantifizierer `+?`. Wenn der gierige Quantifizierer `+` verwendet wurden, stattdessen die Engine für reguläre Ausdrücke würde nur eine einzelne Übereinstimmung in der Eingabezeichenfolge finden.  
  
 Die Ersetzungszeichenfolge `($1)` ersetzt die Übereinstimmung mit der ersten erfassten Gruppe, die in Klammern eingeschlossen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="replacement" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Erweiterung ist für dieses Muster nicht zulässig.</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">Ersetzungen</related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="inner">Eine der erwarteten Übereinstimmung entsprechende Übereinstimmung mit einem regulären Ausdruck.</param>
        <summary>Gibt eine der bereitgestellten Instanz entsprechende <see cref="T:System.Text.RegularExpressions.Match" />-Instanz zurück, die von mehreren Threads gemeinsam verwendet werden kann.</summary>
        <returns>Eine Übereinstimmung für einen regulären Ausdruck, die für mehrere Threads freigegeben werden kann.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inner" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
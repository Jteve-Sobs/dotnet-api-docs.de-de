<Type Name="Group" FullName="System.Text.RegularExpressions.Group">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6d20cf1f95643ad86282bc01bfd718f38a4c187a" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="37754984" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Group : System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Group extends System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Group" />
  <TypeSignature Language="VB.NET" Value="Public Class Group&#xA;Inherits Capture" />
  <TypeSignature Language="C++ CLI" Value="public ref class Group : System::Text::RegularExpressions::Capture" />
  <TypeSignature Language="F#" Value="type Group = class&#xA;    inherit Capture" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Capture</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt die Ergebnisse einer einzelnen Erfassungsgruppe dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Erfassungsgruppe kann 0 (null), eine oder mehrere Zeichenfolgen in einer einzelnen Übereinstimmung aufgrund Quantifizierer erfassen. (Weitere Informationen finden Sie unter [Quantifizierer](~/docs/standard/base-types/quantifiers-in-regular-expressions.md).) Alle Teilzeichenfolgen, die von einer einzelnen Erfassungsgruppe gefunden wird, stehen über die <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> Eigenschaft. Informationen zur letzten erfassten Teilzeichenfolge kann zugegriffen werden, direkt aus der `Value` und `Index` Eigenschaften. (Ist, wird die <xref:System.Text.RegularExpressions.Group> Instanz entspricht dem letzten Element der Auflistung zurückgegeben, die von der <xref:System.Text.RegularExpressions.Group.Captures%2A> -Eigenschaft, die die letzte Erfassung mit der Erfassungsgruppe widerspiegelt.)  
  
 Ein Beispiel hilft, um zu verdeutlichen, diese Beziehung zwischen einer <xref:System.Text.RegularExpressions.Group> Objekt und die <xref:System.Text.RegularExpressions.CaptureCollection?displayProperty=nameWithType> das zurückgegeben wird, indem die <xref:System.Text.RegularExpressions.Group.Captures%2A> Eigenschaft. Muster für reguläre Ausdrücke `(\b(\w+?)[,:;]?\s?)+[?.!]` entspricht ganzen Sätzen. Der reguläre Ausdruck wird entsprechend der Darstellung in der folgenden Tabelle definiert:  
  
|Muster|Beschreibung |  
|-------------|-----------------|  
|`\b`|Der Vergleich beginnt an einer Wortgrenze.|  
|`(\w+?)`|Entspricht einem oder mehreren Wortzeichen, aber so wenigen Zeichen wie möglich. Dies ist die zweite Erfassungsgruppe (innere). (Die erste Erfassungsgruppe enthält die `\b` Language-Element.)|  
|`[,:;]?`|Übereinstimmung mit keinem oder einem Vorkommen von einem Komma, Doppelpunkt oder Semikolon.|  
|`\s?`|Übereinstimmung mit keinem oder einem Vorkommen ein Leerzeichen.|  
|`(\b(\w+?)[,:;]?\s?)+`|Entspricht dem Muster mit einer Wortgrenze, einer oder mehrerer Wortzeichen gesucht, ein Interpunktionszeichen und ein Leerzeichen einmal oder mehrmals. Dies ist die erste Erfassungsgruppe.|  
|`[?.!]`|Entspricht jedem Vorkommen von einem Punkt, Fragezeichen oder Ausrufezeichen.|  
  
 In diesem Muster für reguläre Ausdrücke das Teilmuster `(\w+?)` dient mehreren Wörtern innerhalb eines Satzes überein. Allerdings den Wert des der <xref:System.Text.RegularExpressions.Group> Objekt darstellt, nur die letzte Übereinstimmung, die `(\w+?)` erfasst, wohingegen die <xref:System.Text.RegularExpressions.Group.Captures%2A> -Eigenschaft gibt eine <xref:System.Text.RegularExpressions.CaptureCollection> , die alle erfassten Text darstellt. Die Ausgabe zeigt, die <xref:System.Text.RegularExpressions.CaptureCollection> für die zweite Erfassungsgruppe vier Objekte enthält. Das letzte dieser entspricht dem <xref:System.Text.RegularExpressions.Group> Objekt.  
  
 [!code-csharp[System.Text.RegularExpressions.Group.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/cs/groupandcaptures1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Group.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/vb/groupandcaptures1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Captures">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.CaptureCollection Captures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.CaptureCollection Captures" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Group.Captures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Captures As CaptureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::CaptureCollection ^ Captures { System::Text::RegularExpressions::CaptureCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Captures : System.Text.RegularExpressions.CaptureCollection" Usage="System.Text.RegularExpressions.Group.Captures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.CaptureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung aller der Erfassungsgruppe entsprechenden Erfassungsübereinstimmungen in der Reihenfolge von innen nach außen und von links nach rechts ab (oder in der Reihenfolge von innen nach außen und von rechts nach links bei einer Änderung des regulären Ausdrucks mit der <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />-Option). Die Auflistung kann 0 (null) oder mehr Elemente enthalten.</summary>
        <value>Die Auflistung der Teilzeichenfolge, die mit der Gruppe übereinstimmen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Quantifizierer nicht für eine Erfassungsgruppe übernommen wird zu gruppieren, die von zurückgegebene Auflistung der <xref:System.Text.RegularExpressions.Group.Captures%2A> Eigenschaft enthält eine einzelne <xref:System.Text.RegularExpressions.Capture> -Objekt, das Informationen zu der gleichen Teilzeichenfolge als bietet die <xref:System.Text.RegularExpressions.Group> Objekt. Dies wird im folgenden Beispiel illustriert. Definiert einen regulären Ausdruck `\b(\w+)\b`, extrahiert ein einzelnes Wort, aus einem Satz. Die <xref:System.Text.RegularExpressions.Group> Objekt erfasst das Wort "This", und das einzelne Objekt in der <xref:System.Text.RegularExpressions.CaptureCollection> enthält Informationen über die gleiche Erfassung.  
  
 [!code-csharp[System.Text.RegularExpressions.Group.Captures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Group.Captures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures1.vb#1)]  
  
 Der wahre Nutzen von der <xref:System.Text.RegularExpressions.Group.Captures%2A> Eigenschaft tritt auf, wenn ein Quantifizierer für eine Erfassungsgruppe übernommen wird, damit die Gruppe mehrere Teilzeichenfolgen in einen einzelnen regulären Ausdruck erfasst. In diesem Fall die <xref:System.Text.RegularExpressions.Group> Objekt enthält Informationen zur letzten erfassten Teilzeichenfolge, während die <xref:System.Text.RegularExpressions.Group.Captures%2A> Eigenschaft enthält Informationen über alle von der Gruppe erfassten Teilzeichenfolgen. Im folgenden Beispiel ist der reguläre Ausdruck `\b(\w+\s*)+\.` entspricht einen vollständiger Satz, der einem Punkt endet. Die Gruppe `(\w+\s*)+` erfasst die einzelnen Wörter in der Auflistung. Da die <xref:System.Text.RegularExpressions.Group> Auflistung enthält nur Informationen zur letzten erfassten Teilzeichenfolge, zeichnet er das letzte Wort im Satz "Satz". Jedes Wort, das von der Gruppe erfassten ist jedoch verfügbar, aus der Auflistung zurückgegeben werden, indem die <xref:System.Text.RegularExpressions.Group.Captures%2A> Eigenschaft.  
  
 [!code-csharp[System.Text.RegularExpressions.Group.Captures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Group.Captures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Group.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Text.RegularExpressions.Group.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den Namen der Erfassungsgruppe zurück, die die aktuelle Instanz darstellt.</summary>
        <value>Der Name der Erfassungsgruppe, die die aktuelle Instanz darstellt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Success">
      <MemberSignature Language="C#" Value="public bool Success { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Success" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Group.Success" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Success As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Success { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Success : bool" Usage="System.Text.RegularExpressions.Group.Success" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Übereinstimmung erfolgreich ist.</summary>
        <value>
          <see langword="true" />, wenn die Übereinstimmung erfolgreich ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Success` Eigenschaft ist true, wenn mindestens eine Teilzeichenfolge, die von dieser Gruppe erfasst wurde. Dies entspricht dem booleschen Ausdruck (Group.Captures.Count > 0).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Group Synchronized (System.Text.RegularExpressions.Group inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Group Synchronized(class System.Text.RegularExpressions.Group inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Group) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Group ^ Synchronized(System::Text::RegularExpressions::Group ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Group -&gt; System.Text.RegularExpressions.Group" Usage="System.Text.RegularExpressions.Group.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="inner">Das <see cref="T:System.Text.RegularExpressions.Group" />-Eingabeobjekt.</param>
        <summary>Gibt ein dem bereitgestellten Objekt entsprechendes <see langword="Group" />-Objekt zurück, das auf sichere Weise von mehreren Threads gemeinsam verwendet werden kann.</summary>
        <returns>Das <see langword="Group" />-Objekt eines regulären Ausdrucks.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inner" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
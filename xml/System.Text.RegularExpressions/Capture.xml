<Type Name="Capture" FullName="System.Text.RegularExpressions.Capture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="63ff3269b227586e250aec846808fe66405a9b62" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86825806" /></Metadata><TypeSignature Language="C#" Value="public class Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Capture extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="VB.NET" Value="Public Class Capture" />
  <TypeSignature Language="C++ CLI" Value="public ref class Capture" />
  <TypeSignature Language="F#" Value="type Capture = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Capture extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Text.RegularExpressions" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Text.RegularExpressions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Ergebnisse einer einzelnen erfolgreichen Teilausdruckerfassung dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Text.RegularExpressions.Capture> -Objekt ist unveränderlich und verfügt über keinen öffentlichen Konstruktor. Instanzen werden durch das <xref:System.Text.RegularExpressions.CaptureCollection> -Objekt zurückgegeben, das von der-Eigenschaft und der-Eigenschaft zurückgegeben wird `Match.Captures` <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> . Die- `Match.Captures` Eigenschaft stellt jedoch Informationen zur gleichen Übereinstimmung wie das- <xref:System.Text.RegularExpressions.Match> Objekt bereit.  
  
 Wenn Sie keinen Quantifizierer auf eine Erfassungs Gruppe anwenden, gibt die- <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> Eigenschaft ein- <xref:System.Text.RegularExpressions.CaptureCollection> Objekt mit einem einzelnen-Objekt zurück, <xref:System.Text.RegularExpressions.Capture> das Informationen über die gleiche Erfassung wie das-Objekt bereitstellt <xref:System.Text.RegularExpressions.Group> . Wenn Sie einen Quantifizierer auf eine Erfassungs Gruppe anwenden, `Group.Index` `Group.Length` stellen die Eigenschaften, und `Group.Value` nur Informationen über die zuletzt erfasste Gruppe bereit, während die- <xref:System.Text.RegularExpressions.Capture> Objekte in der Informationen zu allen Teil Ausdrucks Erfassungen <xref:System.Text.RegularExpressions.CaptureCollection> bereitstellen. Dies wird im Beispiel veranschaulicht.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein regulärer Ausdruck definiert, der mit Sätzen übereinstimmt, die keine Interpunktions Zeichen (".") enthalten.  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb" id="Snippet1"::: 
  
 Das Muster für reguläre Ausdrücke `((\w+)[\s.])+` wird entsprechend der folgenden Tabelle definiert: Beachten Sie, dass in diesem regulären Ausdruck ein Quantifizierer (+) auf den gesamten regulären Ausdruck angewendet wird.  
  
|Muster|Beschreibung|  
|-------------|-----------------|  
|`(\w+)`|Übereinstimmung mit mindestens einem Wortzeichen. Dies ist die zweite Erfassungsgruppe.|  
|`[\s.])`|Entspricht einem Leerzeichen oder einem Leerzeichen (".").|  
|`((\w+)[\s.])`|Entsprechung für mindestens ein Wort Zeichen, gefolgt von einem Leerzeichen oder einem Leerzeichen ("."). Dies ist die erste Erfassungsgruppe.|  
|`((\w+)[\s.])+`|Entsprechung für ein oder mehrere Vorkommen eines Wort Zeichens oder von Zeichen gefolgt von einem Leerzeichen oder einem Leerzeichen (".").|  
  
 In diesem Beispiel besteht die Eingabe Zeichenfolge aus zwei Sätzen. Wie die Ausgabe zeigt, besteht der erste Satz aus nur einem Wort, sodass das- <xref:System.Text.RegularExpressions.CaptureCollection> Objekt ein einzelnes-Objekt enthält, <xref:System.Text.RegularExpressions.Capture> das die gleiche Erfassung wie das- <xref:System.Text.RegularExpressions.Group> Objekt darstellt. Der zweite Satz besteht aus mehreren Wörtern, sodass die <xref:System.Text.RegularExpressions.Group> Objekte nur Informationen über den letzten übereinstimmenden Teil Ausdruck enthalten. Gruppe 1, die die erste Erfassung darstellt, enthält das letzte Wort im Satz mit einem schließenden Zeitraum. Gruppe 2, die die zweite Erfassung darstellt, enthält das letzte Wort im Satz. Allerdings <xref:System.Text.RegularExpressions.Capture> erfassen die Objekte im-Objekt der Gruppe jede Teil Ausdrucks Übereinstimmung <xref:System.Text.RegularExpressions.CaptureCollection> . Die <xref:System.Text.RegularExpressions.Capture> Objekte in der Erfassungs Auflistung der ersten Erfassungs Gruppe enthalten Informationen über jedes aufgezeichnete Wort und jedes Leerzeichen bzw. jeden Leerraum. Die <xref:System.Text.RegularExpressions.Capture> Objekte in der Erfassungs Auflistung der zweiten Erfassungs Gruppe enthalten Informationen über jedes erfasste Wort.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.CaptureCollection" />
  </Docs>
  <Members>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Text.RegularExpressions.Capture.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Die Position in der ursprünglichen Zeichenfolge, an der das erste Zeichen der aufgezeichneten Teilzeichenfolge gefunden wurde.</summary>
        <value>Die nullbasierte Anfangsposition in der ursprünglichen Zeichenfolge, an der die aufgezeichnete Teilzeichenfolge gefunden wurde.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Text.RegularExpressions.Capture.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Länge der aufgezeichneten Teilzeichenfolge ab.</summary>
        <value>Die Länge der aufgezeichneten Teilzeichenfolge.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Capture.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="capture.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die erfasste Teilzeichenfolge von der Eingabezeichenfolge durch Aufrufen der <see cref="P:System.Text.RegularExpressions.Capture.Value" />-Eigenschaft ab.</summary>
        <returns>Die Teilzeichenfolge, die von der Übereinstimmung aufgezeichnet wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ToString`ist tatsächlich ein interner-Aufrufder- <xref:System.Text.RegularExpressions.Capture.Value%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Text.RegularExpressions.Capture.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aufgezeichnete Teilzeichenfolge aus der Eingabezeichenfolge ab.</summary>
        <value>Die Teilzeichenfolge, die von der Übereinstimmung aufgezeichnet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn beim Abrufen der-Methode oder der-Methode keine Entsprechung <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> gefunden wird, ist der Wert der zurückgegebenen- `Match.Value` Eigenschaft <xref:System.String.Empty?displayProperty=nameWithType> . , Wenn die Engine für reguläre Ausdrücke keine Entsprechung für eine Erfassungs Gruppe finden kann. der Wert der zurückgegebenen `Group.Value` Eigenschaft ist <xref:System.String.Empty?displayProperty=nameWithType> . Eine Abbildung finden Sie im zweiten Beispiel.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein regulärer Ausdruck definiert, der mit Sätzen übereinstimmt, die keine Interpunktions Zeichen (".") enthalten. Die- `Match.Value` Eigenschaft zeigt die Ergebnis Zeichenfolge, die aus einem übereinstimmenden Satz besteht, für jede Übereinstimmung an. Die- `Group.Value` Eigenschaft zeigt die Ergebnis Zeichenfolge für jede Erfassungs Gruppe an. Sie besteht aus der letzten von dieser Erfassungs Gruppe erfassten Zeichenfolge. Die- <xref:System.Text.RegularExpressions.Capture.Value%2A?displayProperty=nameWithType> Eigenschaft zeigt die Ergebnis Zeichenfolge für jede Erfassung an.  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb" id="Snippet1":::  
  
 Das Muster für reguläre Ausdrücke `((\w+)[\s.])+` wird entsprechend der folgenden Tabelle definiert: Beachten Sie, dass in diesem regulären Ausdruck ein Quantifizierer (+) auf den gesamten regulären Ausdruck angewendet wird.  
  
|Muster|Beschreibung|  
|-------------|-----------------|  
|`(\w+)`|Übereinstimmung mit mindestens einem Wortzeichen. Dies ist die zweite Erfassungsgruppe.|  
|`[\s.])`|Entspricht einem Leerzeichen oder einem Leerzeichen (".").|  
|`((\w+)[\s.])`|Entsprechung für mindestens ein Wort Zeichen, gefolgt von einem Leerzeichen oder einem Leerzeichen ("."). Dies ist die erste Erfassungsgruppe.|  
|`((\w+)[\s.])+`|Entsprechung für ein oder mehrere Vorkommen eines Wort Zeichens oder von Zeichen gefolgt von einem Leerzeichen oder einem Leerzeichen (".").|  
  
 In diesem Beispiel besteht die Eingabe Zeichenfolge aus zwei Sätzen. Wie die Ausgabe zeigt, besteht der erste Satz aus nur einem Wort, sodass das- <xref:System.Text.RegularExpressions.CaptureCollection> Objekt ein einzelnes-Objekt enthält, <xref:System.Text.RegularExpressions.Capture> das die gleiche Erfassung wie das- <xref:System.Text.RegularExpressions.Group> Objekt darstellt. Der zweite Satz besteht aus mehreren Wörtern, sodass die <xref:System.Text.RegularExpressions.Group> Objekte nur Informationen über den letzten übereinstimmenden Teil Ausdruck enthalten. Gruppe 1, die die erste Erfassung darstellt, enthält das letzte Wort im Satz mit einem schließenden Zeitraum. Gruppe 2, die die zweite Erfassung darstellt, enthält das letzte Wort im Satz. Allerdings <xref:System.Text.RegularExpressions.Capture> erfassen die Objekte im-Objekt der Gruppe jede Teil Ausdrucks Übereinstimmung <xref:System.Text.RegularExpressions.CaptureCollection> . Die <xref:System.Text.RegularExpressions.Capture> Objekte in der Erfassungs Auflistung der ersten Erfassungs Gruppe enthalten Informationen über jedes aufgezeichnete Wort und jedes Leerzeichen bzw. jeden Leerraum. Die <xref:System.Text.RegularExpressions.Capture> Objekte in der Erfassungs Auflistung der zweiten Erfassungs Gruppe enthalten Informationen über jedes erfasste Wort.  
  
 Im folgenden Beispiel wird ein Muster für reguläre Ausdrücke,, verwendet, `^([a-z]+)(\d+)*\.([a-z]+(\d)*)$` um eine Produktnummer abzugleichen, die aus zwei Teilen besteht, die durch einen-Zeitraum getrennt sind. Beide Teile bestehen aus alphabetischen Zeichen, gefolgt von optionalen Zahlen. Da die erste Eingabe Zeichenfolge nicht mit dem Muster identisch ist, ist der Wert der-Eigenschaft des zurückgegebenen <xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType> -Objekts `Value` <xref:System.String.Empty?displayProperty=nameWithType> . Wenn das Muster des regulären Ausdrucks nicht mit einer Erfassungs Gruppe übereinstimmen kann, ist der Wert der <xref:System.Text.RegularExpressions.Group> -Eigenschaft des entsprechenden Objekts gleichermaßen `Value` <xref:System.String.Empty?displayProperty=nameWithType> .  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/cs/value1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/vb/value1.vb" id="Snippet1":::  
  
 Das Muster für reguläre Ausdrücke ist wie in der folgenden Tabelle gezeigt definiert:  
  
|Muster|Beschreibung|  
|-------------|-----------------|  
|`^`|Beginnt die Suche am Anfang der Zeichenfolge.|  
|`([a-z]+)`|Entspricht einem oder mehreren Vorkommen eines beliebigen Zeichens von a bis z. Da das Modul für reguläre Ausdrücke die- <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> Option übermittelt, wird bei diesem Vergleich die Groß-/Kleinschreibung nicht beachtet Dies ist die erste Erfassungsgruppe.|  
|`(\d+)?`|Entsprechung für NULL oder ein Vorkommen von einer oder mehreren Dezimalziffern. Dies ist die zweite Erfassungsgruppe.|  
|`\.`|Entspricht einem literalzeilenzeichen.|  
|`([a-z]+`|Entspricht einem oder mehreren Vorkommen eines beliebigen Zeichens von a bis z. Bei dem Vergleich wird Groß- und Kleinschreibung nicht unterschieden.|  
|`(\d)*`|0 (null) oder mehr Dezimalstellen sollen übereinstimmen. Eine einzelne übereinstimmende Ziffer ist die vierte Erfassungs Gruppe.|  
|`([a-z]+(\d)*)`|Entsprechung für ein oder mehrere alphabetische Zeichen von a bis z, gefolgt von NULL, einer oder mehreren Dezimalziffern. Dies ist die vierte Erfassungsgruppe.|  
|`$`|Schließt die Entsprechung am Ende der Zeichenfolge ab.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

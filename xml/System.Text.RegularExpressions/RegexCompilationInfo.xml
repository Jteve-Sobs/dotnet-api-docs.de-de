<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0341d43339b5276298b0f1ef5a49aeec5a785135" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75159413" /></Metadata><TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <TypeSignature Language="F#" Value="type RegexCompilationInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Informationen zu einem regulären Ausdruck bereit, die zum Kompilieren eines regulären Ausdrucks zu einer eigenständigen Assembly verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Array von <xref:System.Text.RegularExpressions.RegexCompilationInfo>-Objekten wird an die <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>-Methode übermittelt, um Informationen zu jedem regulären Ausdruck bereitzustellen, der in die Assembly eingeschlossen werden soll. Jeder kompilierte reguläre Ausdruck, der in der Assembly enthalten ist, wird als von <xref:System.Text.RegularExpressions.Regex>abgeleiteter Klasse dargestellt. Die Eigenschaften des <xref:System.Text.RegularExpressions.RegexCompilationInfo> Typs definieren den Klassennamen des regulären Ausdrucks, den voll qualifizierten Namen (d. h. seinen Namespace und den Typnamen), das Muster des regulären Ausdrucks, zusätzliche Optionen (z. b. ob der reguläre Ausdruck die Groß-/Kleinschreibung beachtet) und ein Timeout Intervall, das angibt, wie lange die Engine für reguläre Ausdrücke nach einer Entsprechung suchen soll.  
  
 Sie können ein <xref:System.Text.RegularExpressions.RegexCompilationInfo> Objekt instanziieren, indem Sie den überladenen Klassenkonstruktor aufrufen.  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
    <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">Kompilierung und Wiederverwendung</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />-Klasse.</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">Sprachelemente für reguläre Ausdrücke</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">Der reguläre Ausdruck, der kompiliert werden soll.</param>
        <param name="options">Die bei der Kompilierung des regulären Ausdrucks zu verwendenden Optionen für reguläre Ausdrücke.</param>
        <param name="name">Der Name des Typs, der den kompilierten regulären Ausdruck darstellt.</param>
        <param name="fullnamespace">Der Namespace, zu dem der neue Typ gehört.</param>
        <param name="ispublic"><see langword="true" />, um den kompilierten regulären Ausdruck öffentlich sichtbar zu machen, andernfalls <see langword="false" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />-Klasse, die Informationen zu einem regulären Ausdruck enthält, der in eine Assembly eingeschlossen werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeder Parameter des <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Konstruktors entspricht direkt einer Eigenschaft der <xref:System.Text.RegularExpressions.RegexCompilationInfo>-Klasse. Da alle Eigenschaften Lese-/Schreibzugriff haben, können ihre Werte auch direkt zugewiesen werden.  
  
 Die <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>-Methode generiert eine Assembly, die kompilierte reguläre Ausdrücke enthält. Daher sollten Sie <xref:System.Text.RegularExpressions.RegexOptions.Compiled> nicht als einen der Werte `options`angeben.  
  
 Wenn `ispublic` `true`ist, erhält die kompilierte Klasse regulärer Ausdrücke öffentliche Zugriffsmöglichkeiten. Das heißt, Sie kann aus Code instanziiert werden, der in einer beliebigen Assembly ausgeführt wird. Wenn `ispublic` `false`ist, erhält die kompilierte Klasse regulärer Ausdrücke `internal` ( C#in) oder `Friend` (in Visual Basic)-Barrierefreiheit. Das heißt, Sie kann nur aus Code instanziiert werden, der in derselben Assembly wie die Klasse regulärer Ausdrücke ausgeführt wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein kompilierter regulärer Ausdruck erstellt und in zwei Schritten verwendet.  
  
 Kompilieren Sie im ersten Schritt das folgende Codebeispiel, und führen Sie es aus. Der <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A>-Konstruktor im Codebeispiel definiert einen kompilierten regulären Ausdruck. Das Ergebnis der Ausführung des Codes ist eine Assembly mit dem Namen "FishRegex. dll", die einen kompilierten Typ eines regulären Ausdrucks namens "`FishRegex`" enthält.  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 Kompilieren Sie im zweiten Schritt das folgende Codebeispiel mithilfe eines Verweises auf "FishRegex. dll", und führen Sie dann die resultierende ausführbare Datei aus. Die ausführbare Datei entspricht einer Ziel Zeichenfolge unter Verwendung des `FishRegex` Typs und zeigt die Übereinstimmungen, die Gruppe, die Erfassungs Gruppe und die Indexposition der Übereinstimmungen in der Ziel Zeichenfolge an.  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> ist <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="fullnamespace" /> ist <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Dieser Konstruktor erstellt einen kompilierten regulären Ausdruck, der den Standard Timeout Wert der Anwendungsdomäne verwendet, in der er erstellt wird. Wenn ein Timeout Wert für die Anwendungsdomäne definiert ist, verwendet der kompilierte reguläre Ausdruck den Wert <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, wodurch verhindert wird, dass bei einem Muster Vergleichs Vorgang ein Timeout auftritt. Der empfohlene Konstruktor zum Erstellen eines kompilierten regulären Ausdrucks ist <see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />, mit dem Sie das Timeout Intervall festlegen können.</para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool * TimeSpan -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="fullnamespace" Type="System.String" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ispublic" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="5" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pattern">Der reguläre Ausdruck, der kompiliert werden soll.</param>
        <param name="options">Die bei der Kompilierung des regulären Ausdrucks zu verwendenden Optionen für reguläre Ausdrücke.</param>
        <param name="name">Der Name des Typs, der den kompilierten regulären Ausdruck darstellt.</param>
        <param name="fullnamespace">Der Namespace, zu dem der neue Typ gehört.</param>
        <param name="ispublic"><see langword="true" />, um den kompilierten regulären Ausdruck öffentlich sichtbar zu machen, andernfalls <see langword="false" />.</param>
        <param name="matchTimeout">Das standardmäßige Timeoutintervall für den regulären Ausdruck.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />-Klasse, die Informationen zu einem regulären Ausdruck mit einem angegebenen Timeoutwert enthält, der in eine Assembly eingeschlossen werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeder Parameter des <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Konstruktors entspricht direkt einer Eigenschaft der <xref:System.Text.RegularExpressions.RegexCompilationInfo>-Klasse. Da alle Eigenschaften Lese-/Schreibzugriff haben, können ihre Werte auch direkt zugewiesen werden.  
  
 Die <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>-Methode generiert eine Assembly, die kompilierte reguläre Ausdrücke enthält. Daher sollten Sie <xref:System.Text.RegularExpressions.RegexOptions.Compiled> nicht als einen der Werte `options`angeben.  
  
 Wenn `ispublic` `true`ist, erhält die kompilierte Klasse regulärer Ausdrücke öffentliche Zugriffsmöglichkeiten. Das heißt, Sie kann aus Code instanziiert werden, der in einer beliebigen Assembly ausgeführt wird. Wenn `ispublic` `false`ist, erhält die kompilierte Klasse regulärer Ausdrücke `internal` ( C#in) oder `Friend` (in Visual Basic)-Barrierefreiheit. Das heißt, Sie kann nur aus Code instanziiert werden, der in derselben Assembly wie die Klasse regulärer Ausdrücke ausgeführt wird.  
  
 Der `matchTimeout`-Parameter definiert das Standard Timeout Intervall für den kompilierten regulären Ausdruck. Dieser Wert stellt die ungefähre Zeitspanne dar, die ein kompiliertes reguläres Ausdrucks Objekt einen einzelnen übereinstimmenden Vorgang ausführt, bevor ein Timeout für den Vorgang eintritt. das Modul für reguläre Ausdrücke löst während der nächsten zeitlichen Prüfung eine <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Ausnahme aus. Weitere Informationen zum Timeout Wert finden Sie in der <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A>-Eigenschaft.  
  
> [!IMPORTANT]
>  Es wird empfohlen, dass Sie für einen kompilierten regulären Ausdruck immer einen Standard Timeout Wert festlegen. Consumer der Bibliothek für reguläre Ausdrücke können diesen Timeout Wert überschreiben, indem Sie einen <xref:System.TimeSpan> Wert übergeben, der das neue Timeout Intervall für diese Konstruktorüberladung darstellt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein einzelner kompilierter regulärer Ausdruck mit dem Namen `DuplicateChars` definiert, der zwei oder mehr Vorkommen desselben Zeichens in einer Eingabe Zeichenfolge identifiziert. Der kompilierte reguläre Ausdruck hat ein Standard Timeout von 2 Sekunden. Wenn Sie das Beispiel ausführen, wird eine Klassenbibliothek mit dem Namen RegExLib. dll erstellt, die den kompilierten regulären Ausdruck enthält.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 Das Muster für reguläre Ausdrücke `(\w)\1+` wird entsprechend der folgenden Tabelle definiert:  
  
|Muster|Beschreibung|  
|-------------|-----------------|  
|`(\w)`|Suchen Sie nach einem beliebigen Wort Zeichen, und weisen Sie es der ersten Erfassungs Gruppe zu.|  
|`\1+`|Entspricht einem oder mehreren Vorkommen des Werts der ersten erfassten Gruppe.|  
  
 Im folgenden Beispiel wird der `DuplicatedChars` reguläre Ausdruck verwendet, um doppelte Zeichen in einem Zeichen folgen Array zu identifizieren. Wenn der `DuplicatedChars`-Konstruktor aufgerufen wird, wird das Timeout Intervall in 5 Sekunden geändert.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> ist <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="fullnamespace" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="matchTimeout" /> ist negativ, null oder größer als ca. 24 Tage.</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der kompilierte reguläre Ausdruck öffentlich sichtbar ist, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn der reguläre Ausdruck öffentlich sichtbar ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A>-Eigenschaft `false`ist, kann die Klasse für reguläre Ausdrücke, die von der aktuellen Instanz definiert wird, nur durch Code instanziiert werden, der in der Assembly ausgeführt wird, in der die-Klasse enthalten ist. Da jedoch die <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType>-Methode eine Assembly generiert, die nur kompilierte reguläre Ausdrücke enthält und keinen zusätzlichen Code hinzufügen kann, gibt es im Allgemeinen keinen Grund, dieser Eigenschaft den Wert `false`zuzuweisen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das das standardmäßige Timeoutintervall für reguläre Ausdrücke ab oder legt dieses fest.</summary>
        <value>Das standardmäßige maximale Zeitintervall, das in einem Mustervergleichsvorgang verstreichen kann, bevor eine <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />-Ausnahme ausgelöst wird, oder <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, wenn Timeouts deaktiviert sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A>-Eigenschaft definiert das Standard Timeout Intervall für den kompilierten regulären Ausdruck. Dieser Wert stellt die ungefähre Zeitspanne dar, die ein kompilierter regulärer Ausdruck vor dem Timeout des Vorgangs einen einzelnen übereinstimmenden Vorgang ausführt, und die Engine für reguläre Ausdrücke löst während der nächsten zeitlichen Prüfung eine <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Ausnahme aus.  
  
> [!IMPORTANT]
>  Es wird empfohlen, dass Sie für einen kompilierten regulären Ausdruck immer einen Standard Timeout Wert festlegen. Consumer der Bibliothek für reguläre Ausdrücke können diesen Timeout Wert überschreiben, indem Sie einen <xref:System.TimeSpan> Wert, der das neue Timeout Intervall darstellt, an den Klassenkonstruktor des kompilierten regulären Ausdrucks übergeben.  
  
 Sie können einem <xref:System.Text.RegularExpressions.RegexCompilationInfo> Objekt auf eine der folgenden weisen einen Standard Timeout Wert zuweisen:  
  
-   Indem Sie die <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>-Methode aufrufen und die Zeichen folgen Darstellung eines <xref:System.TimeSpan> Werts für die Eigenschaft "REGEX_DEFAULT_MATCH_TIMEOUT" bereitstellen.  
  
-   Durch Aufrufen des <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29>-Konstruktors und Bereitstellen eines Werts für den `matchTimeout`-Parameter.  
  
-   Durch Festlegen des Werts dieser Eigenschaft.  
  
 Berücksichtigen Sie die folgenden Faktoren, um ein angemessenes Timeout Intervall festzulegen:  
  
-   Die Länge und die Komplexität des Musters für reguläre Ausdrücke. Längere und komplexere reguläre Ausdrücke erfordern mehr Zeit als kürzere und einfachere.  
  
-   Der erwartete Computer Ladevorgang. Die Verarbeitung erfordert mehr Zeit für Systeme mit hoher CPU-und Arbeitsspeicher Auslastung.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein einzelner kompilierter regulärer Ausdruck mit dem Namen `DuplicateChars` definiert, der zwei oder mehr Vorkommen desselben Zeichens in einer Eingabe Zeichenfolge identifiziert. Der kompilierte reguläre Ausdruck hat ein Standard Timeout von 2 Sekunden. Wenn Sie das Beispiel ausführen, wird eine Klassenbibliothek mit dem Namen RegExLib. dll erstellt, die den kompilierten regulären Ausdruck enthält.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 Das Muster für reguläre Ausdrücke `(\w)\1+` wird entsprechend der folgenden Tabelle definiert:  
  
|Muster|Beschreibung|  
|-------------|-----------------|  
|`(\w)`|Suchen Sie nach einem beliebigen Wort Zeichen, und weisen Sie es der ersten Erfassungs Gruppe zu.|  
|`\1+`|Entspricht einem oder mehreren Vorkommen des Werts der ersten erfassten Gruppe.|  
  
 Im folgenden Beispiel wird der `DuplicatedChars` reguläre Ausdruck verwendet, um doppelte Zeichen in einem Zeichen folgen Array zu identifizieren. Wenn der `DuplicatedChars`-Konstruktor aufgerufen wird, wird das Timeout Intervall in 5 Sekunden geändert.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Typs ab, der den kompilierten regulären Ausdruck darstellt, oder legt diesen fest.</summary>
        <value>Der Name des neuen Typs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.RegularExpressions.RegexCompilationInfo>-Klasse wird verwendet, um einen kompilierten regulären Ausdruck zu definieren, der als von <xref:System.Text.RegularExpressions.Regex>abgeleiteter Klasse dargestellt wird. Die <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>-Eigenschaft definiert den Klassennamen des Typs für reguläre Ausdrücke, und die Eigenschaften <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> und <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> definieren den voll qualifizierten Namen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert für diese Eigenschaft ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der Wert für diese Eigenschaft ist eine leere Zeichenfolge.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namespace ab, zu dem der neue Typ gehört, oder legt diesen fest.</summary>
        <value>Der Namespace des neuen Typs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.RegularExpressions.RegexCompilationInfo>-Klasse wird verwendet, um einen kompilierten regulären Ausdruck zu definieren, der als von <xref:System.Text.RegularExpressions.Regex>abgeleiteter Klasse dargestellt wird. Die <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>-Eigenschaft definiert den Namespace, der den Typ des kompilierten regulären Ausdrucks enthält, und die Eigenschaften <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> und <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> definieren zusammen den voll qualifizierten Namen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert für diese Eigenschaft ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die beim Kompilieren des regulären Ausdrucks zu verwendenden Optionen ab oder legt diese fest.</summary>
        <value>Eine bitweise Kombination der Enumerationswerte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>-Methode generiert eine Assembly, die kompilierte reguläre Ausdrücke enthält. Daher müssen Sie <xref:System.Text.RegularExpressions.RegexOptions.Compiled> nicht als einen der Werte dieser Eigenschaft angeben. Wenn Sie vorhanden ist, wird die <xref:System.Text.RegularExpressions.RegexOptions.Compiled>-Option ignoriert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pattern : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den zu kompilierenden regulären Ausdruck ab oder legt diesen fest.</summary>
        <value>Der reguläre Ausdruck, der kompiliert werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A>-Eigenschaft kann einen beliebigen gültigen regulären Ausdruck enthalten. Wenn der Wert der <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A>-Eigenschaft kein syntaktisch korrektes Muster für reguläre Ausdrücke ist, löst der aufzurufende <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Methode eine <xref:System.ArgumentException>aus.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert für diese Eigenschaft ist <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expressions.md">Reguläre Ausdrücke von .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">Sprachelemente für reguläre Ausdrücke</related>
      </Docs>
    </Member>
  </Members>
</Type>

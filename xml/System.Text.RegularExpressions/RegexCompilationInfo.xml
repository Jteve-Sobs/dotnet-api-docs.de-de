<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="77167d377303668fef518b19940f6a992292d4cc" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57958207" /></Metadata><TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <TypeSignature Language="F#" Value="type RegexCompilationInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Informationen zu einem regulären Ausdruck bereit, die zum Kompilieren eines regulären Ausdrucks zu einer eigenständigen Assembly verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Array von <xref:System.Text.RegularExpressions.RegexCompilationInfo> Objekte übergeben wird, um die <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Methode zum Bereitstellen von Informationen zu einzelnen regulären Ausdruck in der Assembly einbezogen werden. Jeder kompilierte reguläre Ausdruck, der in der Assembly enthalten ist wird dargestellt, wie eine Klasse von abgeleitet <xref:System.Text.RegularExpressions.Regex>. Die Eigenschaften der <xref:System.Text.RegularExpressions.RegexCompilationInfo> Typendefinition Klassenname für den regulären Ausdruck, lautet der vollqualifizierte Name (d. h. den Namespace und Name des Typs), die Muster für reguläre Ausdrücke, ggf. weiteren Optionen (z. B., ob der reguläre Ausdruck ist Groß-/Kleinschreibung), und ein Timeoutintervall an, der angibt, wie lange die Engine für reguläre Ausdrücke nach einer Übereinstimmung suchen soll.  
  
 Instanziieren Sie ein <xref:System.Text.RegularExpressions.RegexCompilationInfo> Objekt durch Aufrufen des Konstruktors überladene Klasse.  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
    <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">Kompilierung und Wiederverwendung</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />-Klasse.</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">Sprachelemente für reguläre Ausdrücke</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">Der reguläre Ausdruck, der kompiliert werden soll.</param>
        <param name="options">Die bei der Kompilierung des regulären Ausdrucks zu verwendenden Optionen für reguläre Ausdrücke.</param>
        <param name="name">Der Name des Typs, der den kompilierten regulären Ausdruck darstellt.</param>
        <param name="fullnamespace">Der Namespace, zu dem der neue Typ gehört.</param>
        <param name="ispublic"><see langword="true" />, um den kompilierten regulären Ausdruck öffentlich sichtbar zu machen, andernfalls <see langword="false" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />-Klasse, die Informationen zu einem regulären Ausdruck enthält, der in eine Assembly eingeschlossen werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeder Parameter des der <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Konstruktor entspricht direkt an eine Eigenschaft der <xref:System.Text.RegularExpressions.RegexCompilationInfo> Klasse. Da alle Eigenschaften lesen/schreiben, können ihre Werte auch direkt zugewiesen werden.  
  
 Die <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Methode generiert eine Assembly, die kompilierte reguläre Ausdrücke enthält. Aus diesem Grund sollten Sie keinen angeben <xref:System.Text.RegularExpressions.RegexOptions.Compiled> als einen der Werte von `options`.  
  
 Wenn `ispublic` ist `true`, die kompilierten regulären Ausdruck-Klasse erhält öffentliche Barrierefreiheit. D. h. Sie können aus Code instanziiert werden, die in einer beliebigen Assembly ausgeführt wird. Wenn `ispublic` ist `false`, die kompilierten regulären Ausdruck-Klasse erhält `internal` (in C#) oder `Friend` (in Visual Basic) Barrierefreiheit. D. h. Sie kann nur über den Code instanziiert werden, die in der gleichen Assembly wie die Klasse regulärer Ausdrücke ausgeführt wird.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt und verwendet einen kompilierten regulären Ausdruck in zwei Schritten.  
  
 Klicken Sie im ersten Schritt kompilieren Sie, und führen Sie im folgenden Codebeispiel wird. Die <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A> -Konstruktor im Beispiel definiert einen kompilierten regulären Ausdruck. Das Ergebnis der Ausführung des Codes ist eine Assembly namens FishRegex.dll, die einen kompilierten regulären Ausdruck-Typ, der mit dem Namen enthält `FishRegex`.  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 Kompilieren Sie im zweiten Schritt das folgende Codebeispiel, das mit einem Verweis auf FishRegex.dll, und führen Sie dann die resultierende ausführbare Datei. Die ausführbare Datei mit eine Zielzeichenfolge übereinstimmt, mit der `FishRegex` geben, und zeigt die Übereinstimmung, Gruppe, Erfassungsgruppe und die Indexposition der übereinstimmenden in der Zielzeichenfolge.  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> ist <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="name" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="fullnamespace" /> ist <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Dieser Konstruktor erstellt einen kompilierten regulären Ausdruck, der den Standardtimeoutwert der Anwendungsdomäne verwendet, in dem es erstellt wird. Wenn Sie ein Timeoutwert für die Anwendungsdomäne definiert ist, verwendet der kompilierte reguläre Ausdruck den Wert <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, die verhindern, dass ein mustervergleichsvorgang zeitüberschreitungen. Der empfohlene Konstruktor zum Erstellen eines kompilierten regulären Ausdrucks ist <see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />, mit dem Sie das Timeoutintervall festlegen.</para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool * TimeSpan -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="fullnamespace" Type="System.String" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ispublic" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="5" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pattern">Der reguläre Ausdruck, der kompiliert werden soll.</param>
        <param name="options">Die bei der Kompilierung des regulären Ausdrucks zu verwendenden Optionen für reguläre Ausdrücke.</param>
        <param name="name">Der Name des Typs, der den kompilierten regulären Ausdruck darstellt.</param>
        <param name="fullnamespace">Der Namespace, zu dem der neue Typ gehört.</param>
        <param name="ispublic"><see langword="true" />, um den kompilierten regulären Ausdruck öffentlich sichtbar zu machen, andernfalls <see langword="false" />.</param>
        <param name="matchTimeout">Das standardmäßige Timeoutintervall für den regulären Ausdruck.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />-Klasse, die Informationen zu einem regulären Ausdruck mit einem angegebenen Timeoutwert enthält, der in eine Assembly eingeschlossen werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeder Parameter des der <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Konstruktor entspricht direkt an eine Eigenschaft der <xref:System.Text.RegularExpressions.RegexCompilationInfo> Klasse. Da alle Eigenschaften lesen/schreiben, können ihre Werte auch direkt zugewiesen werden.  
  
 Die <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Methode generiert eine Assembly, die kompilierte reguläre Ausdrücke enthält. Aus diesem Grund sollten Sie keinen angeben <xref:System.Text.RegularExpressions.RegexOptions.Compiled> als einen der Werte von `options`.  
  
 Wenn `ispublic` ist `true`, die kompilierten regulären Ausdruck-Klasse erhält öffentliche Barrierefreiheit. D. h. Sie können aus Code instanziiert werden, die in einer beliebigen Assembly ausgeführt wird. Wenn `ispublic` ist `false`, die kompilierten regulären Ausdruck-Klasse erhält `internal` (in C#) oder `Friend` (in Visual Basic) Barrierefreiheit. D. h. Sie kann nur über den Code instanziiert werden, die in der gleichen Assembly wie die Klasse regulärer Ausdrücke ausgeführt wird.  
  
 Die `matchTimeout` Parameter definiert das standardmäßige Timeoutintervall für den kompilierten regulären Ausdruck. Dieser Wert gibt die ungefähre Dauer der Zeit, die einen kompilierten regulären Ausdruck-Objekt ein einzelnes übereinstimmenden Vorgangs ausgeführt wird, bevor ein Timeout des Vorgangs und die Engine für reguläre Ausdrücke löst eine <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Ausnahme während der nächsten Überprüfung der zeitlichen Steuerung . Weitere Informationen zu den Timeoutwert, finden Sie unter den <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> Eigenschaft.  
  
> [!IMPORTANT]
>  Es wird empfohlen, dass Sie immer einen Standard-Timeoutwert für einen kompilierten regulären Ausdruck festlegen. Consumer Ihrer Bibliothek für reguläre Ausdrücke können diesen Timeoutwert überschreiben, indem Sie übergeben eine <xref:System.TimeSpan> Wert, der das neue Timeoutintervall für diese Konstruktorüberladung darstellt.  
  
   
  
## Examples  
 Das folgende Beispiel definiert einen einzelnen kompilierten regulären Ausdruck, der mit dem Namen `DuplicateChars` , zwei oder mehr Vorkommen des gleichen Zeichens in einer Eingabezeichenfolge angibt. Der kompilierte reguläre Ausdruck ist ein Standardtimeout von 2 Sekunden. Wenn Sie das Beispiel ausführen, erstellt er eine Klassenbibliothek, die mit dem Namen RegexLib.dll erstellt, die den kompilierten regulären Ausdruck enthält.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 Das Muster für reguläre Ausdrücke `(\w)\1+` wird entsprechend der folgenden Tabelle definiert:  
  
|Muster|Beschreibung |  
|-------------|-----------------|  
|`(\w)`|Übereinstimmung mit beliebigem Wortzeichen, und weisen sie die erste Erfassungsgruppe.|  
|`\1+`|Übereinstimmung mit mindestens den Wert der ersten erfassten Gruppe.|  
  
 Im folgenden Beispiel wird die `DuplicatedChars` regulären Ausdruck zur Identifizierung von doppelter Zeichen in einem Zeichenfolgenarray. Bei Aufruf der `DuplicatedChars` Konstruktor das Timeoutintervall wird auf alle 0,5 Sekunden geändert.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> ist <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="name" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="fullnamespace" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="matchTimeout" /> ist negativ, null oder größer als ca. 24 Tage.</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der kompilierte reguläre Ausdruck öffentlich sichtbar ist, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn der reguläre Ausdruck öffentlich sichtbar ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A> Eigenschaft `false`, die Klasse regulärer Ausdrücke, die definiert, die von der aktuellen Instanz kann nur von Code, der in der Assembly ausgeführt wird, mit der Klasse instanziiert werden. Aber da die <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType> Methode generiert eine Assembly, die nur kompilierte reguläre Ausdrücke enthält, und lässt keine zusätzlichen Code hinzugefügt werden, besteht im Allgemeinen keinen Grund, diese Eigenschaft den Wert zuweisen `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das das standardmäßige Timeoutintervall für reguläre Ausdrücke ab oder legt dieses fest.</summary>
        <value>Das standardmäßige maximale Zeitintervall, das in einem Mustervergleichsvorgang verstreichen kann, bevor eine <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />-Ausnahme ausgelöst wird, oder <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, wenn Timeouts deaktiviert sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> Eigenschaft definiert das standardmäßige Timeoutintervall für den kompilierten regulären Ausdruck. Dieser Wert gibt die ungefähre Dauer der Zeit, die ein kompilierter regulärer Ausdruck ausgeführt wird, ein einzelnes übereinstimmenden Vorgangs, bevor ein Timeout des Vorgangs und die Engine für reguläre Ausdrücke löst eine <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Ausnahme während der nächsten Überprüfung der zeitlichen Steuerung.  
  
> [!IMPORTANT]
>  Es wird empfohlen, dass Sie immer einen Standard-Timeoutwert für einen kompilierten regulären Ausdruck festlegen. Consumer Ihrer Bibliothek für reguläre Ausdrücke können diesen Timeoutwert überschreiben, indem Sie übergeben eine <xref:System.TimeSpan> Wert, der das neue Timeoutintervall an Klassenkonstruktor den kompilierten regulären Ausdruck darstellt.  
  
 Sie können einen Standard-Timeoutwert zum Zuweisen einer <xref:System.Text.RegularExpressions.RegexCompilationInfo> Objekt in einem der folgenden Methoden:  
  
-   Durch Aufrufen der <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> -Methode und die Bereitstellung der angegebene Zeichenfolgendarstellung einer <xref:System.TimeSpan> Wert für die Eigenschaft "REGEX_DEFAULT_MATCH_TIMEOUT".  
  
-   Durch Aufrufen der <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29> Konstruktor und ein Wert für die `matchTimeout` Parameter.  
  
-   Durch Festlegen des Werts dieser Eigenschaft.  
  
 Um eine angemessene Timeoutintervall festzulegen, Faktoren Sie die folgenden:  
  
-   Die Länge und Komplexität der Muster des regulären Ausdrucks. Längere und komplexere reguläre Ausdrücken benötigen mehr Zeit als kürzer und einfacher.  
  
-   Der erwartete computerauslastung. Die Verarbeitung dauert länger auf Systemen mit hoher CPU- und speicherauslastung.  
  
   
  
## Examples  
 Das folgende Beispiel definiert einen einzelnen kompilierten regulären Ausdruck, der mit dem Namen `DuplicateChars` , zwei oder mehr Vorkommen des gleichen Zeichens in einer Eingabezeichenfolge angibt. Der kompilierte reguläre Ausdruck ist ein Standardtimeout von 2 Sekunden. Wenn Sie das Beispiel ausführen, erstellt er eine Klassenbibliothek, die mit dem Namen RegexLib.dll erstellt, die den kompilierten regulären Ausdruck enthält.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 Das Muster für reguläre Ausdrücke `(\w)\1+` wird entsprechend der folgenden Tabelle definiert:  
  
|Muster|Beschreibung |  
|-------------|-----------------|  
|`(\w)`|Übereinstimmung mit beliebigem Wortzeichen, und weisen sie die erste Erfassungsgruppe.|  
|`\1+`|Übereinstimmung mit mindestens den Wert der ersten erfassten Gruppe.|  
  
 Im folgenden Beispiel wird die `DuplicatedChars` regulären Ausdruck zur Identifizierung von doppelter Zeichen in einem Zeichenfolgenarray. Bei Aufruf der `DuplicatedChars` Konstruktor das Timeoutintervall wird auf alle 0,5 Sekunden geändert.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Typs ab, der den kompilierten regulären Ausdruck darstellt, oder legt diesen fest.</summary>
        <value>Der Name des neuen Typs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.RegularExpressions.RegexCompilationInfo> Klasse wird verwendet, um einen kompilierten regulären Ausdruck zu definieren, die dargestellt wird, wie eine Klasse von abgeleitet <xref:System.Text.RegularExpressions.Regex>. Die <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> Eigenschaft definiert, den Klassennamen des Typs reguläre Ausdrücke und die <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> und <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> Eigenschaften definieren zusammen den vollqualifizierten Namen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert für diese Eigenschaft ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der Wert für diese Eigenschaft ist eine leere Zeichenfolge.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namespace ab, zu dem der neue Typ gehört, oder legt diesen fest.</summary>
        <value>Der Namespace des neuen Typs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.RegularExpressions.RegexCompilationInfo> Klasse wird verwendet, um einen kompilierten regulären Ausdruck zu definieren, die dargestellt wird, wie eine Klasse von abgeleitet <xref:System.Text.RegularExpressions.Regex>. Die <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> Eigenschaft definiert den Namespace, der den kompilierten regulären Ausdruck enthält, und die <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> und <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> Eigenschaften definieren zusammen den vollqualifizierten Namen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert für diese Eigenschaft ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die beim Kompilieren des regulären Ausdrucks zu verwendenden Optionen ab oder legt diese fest.</summary>
        <value>Eine bitweise Kombination der Enumerationswerte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Methode generiert eine Assembly, die kompilierte reguläre Ausdrücke enthält. Sie müssen daher keine an <xref:System.Text.RegularExpressions.RegexOptions.Compiled> als einen der Werte dieser Eigenschaft. Wenn es vorhanden ist, ist die <xref:System.Text.RegularExpressions.RegexOptions.Compiled> Option wird ignoriert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pattern : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den zu kompilierenden regulären Ausdruck ab oder legt diesen fest.</summary>
        <value>Der reguläre Ausdruck, der kompiliert werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> -Eigenschaft kann einen beliebigen gültigen regulären Ausdruck enthalten. Wenn der Wert des der <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> Eigenschaft ist kein syntaktisch korrekte reguläres Ausdrucksmuster, den Aufruf der <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> -Methode löst eine <xref:System.ArgumentException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert für diese Eigenschaft ist <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expressions.md">Reguläre Ausdrücke von .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">Sprachelemente für reguläre Ausdrücke</related>
      </Docs>
    </Member>
  </Members>
</Type>
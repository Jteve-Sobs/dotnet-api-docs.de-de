<Type Name="ListView" FullName="System.Windows.Forms.ListView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="48abdad84545b1f08adb5ce8c31cae031c876452" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659194" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListView : System.Windows.Forms.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListView extends System.Windows.Forms.Control" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListView" />
  <TypeSignature Language="VB.NET" Value="Public Class ListView&#xA;Inherits Control" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListView : System::Windows::Forms::Control" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Listenansicht-Steuerelement von Windows dar, das eine Auflistung von Elementen anzeigt, die in einer von vier Ansichten angezeigt werden können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.ListView> Steuerelement ermöglicht es Ihnen, um eine Liste von Elementen mit Elementtext und optional einem Symbol für den Typ des Elements anzuzeigen. Beispielsweise ist die Windows-Explorer-Liste der Dateien im Aussehen ähnlich, ein <xref:System.Windows.Forms.ListView> Steuerelement. Es zeigt eine Liste der Dateien und Ordnern, die derzeit in der Struktur ausgewählt. Einzelnen Dateien und Ordner zeigt ein Symbol zugeordnet, bis er zur Identifizierung den Typ der Datei oder des Ordners an. Die <xref:System.Windows.Forms.ListViewItem> Klasse steht für ein Element innerhalb einer <xref:System.Windows.Forms.ListView> Steuerelement. Die Elemente, die in der Liste angezeigt werden, können in einer von fünf verschiedenen Ansichten angezeigt werden. Elemente können als große Symbole, kleine Symbole oder kleine Symbole in einer vertikalen Liste angezeigt werden. Elemente können auch Unterelemente verfügen, die Informationen enthalten, die zum übergeordneten Element verknüpft ist. Die Detailansicht können Sie das Element und seine Unterelemente in einem Raster mit Spaltenüberschriften angezeigt, die in einem Unterelement angezeigten Informationen zu identifizieren. Ansicht "Nebeneinander", die Verfügbarkeit begrenzt ist, wie unten beschrieben, können Sie das Element und seine Unterelemente als Kachel anzuzeigen, die ein großes Symbol neben dem Textinformationen enthält. <xref:System.Windows.Forms.ListView> unterstützt Einzel- oder Mehrfachauswahl. Mehrfachauswahl ermöglicht dem Benutzer das auswählen aus einer Liste von Elementen auf ähnliche Weise wie eine <xref:System.Windows.Forms.ListBox> Steuerelement. Darüber hinaus kann der Benutzer die ausgewählten Elemente zur Ausführung eines Tasks aktivieren. Beispielsweise können Sie eine <xref:System.Windows.Forms.ListView> Steuerelement, um eine Liste der Dateien anzuzeigen, die die Anwendung anschließend öffnen und verwenden kann. Der Benutzer kann die Dateien zu öffnen, und klicken Sie dann darauf doppelklicken, um die Elemente zu aktivieren, und öffnen Sie die Dateien in der Anwendung auswählen. Die <xref:System.Windows.Forms.ListView> können auch anzeigen, Kontrollkästchen, die mithilfe der <xref:System.Windows.Forms.ListView.CheckBoxes%2A> -Eigenschaft, um die Benutzer überprüfen Sie die Elemente, die sie für eine Aktion ausführen möchten. Sie können die <xref:System.Windows.Forms.ListView> Steuerelement in einer Vielzahl von Möglichkeiten. Das Steuerelement kann verwendet werden, zum Anzeigen von Informationen aus einer Anwendung, einer Datenbank oder einer Textdatei. Die <xref:System.Windows.Forms.ListView> kann auch verwendet werden, zum Abrufen von Informationen aus der Benutzer, z. B. einen Satz von zu verarbeitenden Dateien auswählen.  
  
 <xref:System.Windows.Forms.ListView> Stellt eine große Anzahl von Eigenschaften, die Flexibilität in Darstellung und Verhalten zu ermöglichen. Die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaft können Sie die Art und Weise geändert, in dem Elemente angezeigt werden. Die <xref:System.Windows.Forms.ListView.LargeImageList%2A>, <xref:System.Windows.Forms.ListView.SmallImageList%2A>, und <xref:System.Windows.Forms.ListView.StateImageList%2A> Eigenschaften ermöglichen Ihnen das Festlegen der <xref:System.Windows.Forms.ImageList> Objekte, die für Elemente und in der angezeigten Bilder enthalten die <xref:System.Windows.Forms.ListView.StateImageList%2A>, die Kontrollkästchen, die angezeigt wird, wenn die <xref:System.Windows.Forms.ListView.CheckBoxes%2A> -Eigenschaftensatz auf `true`. Um zu bestimmen, welche Elemente aktiviert sind, können Sie die <xref:System.Windows.Forms.ListView.CheckedItems%2A> aufzurufende Eigenschaft der <xref:System.Windows.Forms.ListView.CheckedListViewItemCollection> Auflistung. Die <xref:System.Windows.Forms.ListView.Columns%2A> Eigenschaft ermöglicht den Zugriff auf die <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>, die speichert der Spaltenüberschriften, die angezeigt wird, wenn die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft des Steuerelements auf festgelegt ist <xref:System.Windows.Forms.View.Details>. Elemente werden hinzugefügt oder daraus entfernt die <xref:System.Windows.Forms.ListView> über die <xref:System.Windows.Forms.ListView.Items%2A> Eigenschaft. Die <xref:System.Windows.Forms.ListView.Items%2A> Eigenschaft ermöglicht den Zugriff auf die <xref:System.Windows.Forms.ListView.ListViewItemCollection> des Steuerelements, der Methoden zum Bearbeiten der Elemente im Steuerelement bereitstellt. Wenn der Benutzer den Text eines Elements bearbeiten können sollen, können Sie mithilfe der <xref:System.Windows.Forms.ListView.LabelEdit%2A> Eigenschaft. Wenn das Steuerelement eine große Anzahl von Elementen enthält, ist es oft einfacher, für den Benutzer an, die in einer sortierten Liste angezeigt. Sie können die <xref:System.Windows.Forms.ListView.Sorting%2A> Eigenschaft, um die Elemente alphabetisch sortieren. Sie können auch vollständig Anpassen der Darstellung von einem <xref:System.Windows.Forms.ListView> Steuerelement. Legen Sie hierzu die <xref:System.Windows.Forms.ListView.OwnerDraw%2A> Eigenschaft `true` und eine oder mehrere der folgenden Ereignisse behandeln: <xref:System.Windows.Forms.ListView.DrawItem>, <xref:System.Windows.Forms.ListView.DrawSubItem>, <xref:System.Windows.Forms.ListView.DrawColumnHeader>.  
  
 Viele der Eigenschaften von der <xref:System.Windows.Forms.ListView> festlegen, handelt es verwendet wird, wenn die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft des Steuerelements festgelegt ist, um <xref:System.Windows.Forms.View.Details>. Die <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> Eigenschaft ermöglicht dem Benutzer von Ihrem <xref:System.Windows.Forms.ListView> Steuerelement so konfigurieren Sie die Reihenfolge der Spalten zur Laufzeit neu. Die <xref:System.Windows.Forms.ListView.FullRowSelect%2A> -Eigenschaft kann ein Element und seine Unterelemente statt nur das Element ausgewählt werden. Zum Anzeigen von Gitternetzlinien in der Detailansicht, um die Grenzen von Elementen und Unterelementen im Identifizieren der <xref:System.Windows.Forms.ListView>, können Sie die <xref:System.Windows.Forms.ListView.GridLines%2A> Eigenschaft. Die <xref:System.Windows.Forms.ListView.HeaderStyle%2A> -Eigenschaft können Sie den Typ des anzuzeigenden Spaltenheader angeben.  
  
 Ein <xref:System.Windows.Forms.ListView> Steuerelement in Virtueller Modus betrieben werden kann, in denen <xref:System.Windows.Forms.ListViewItem> Objekte dynamisch generiert werden, statt in gespeichert werden die <xref:System.Windows.Forms.ListView.Items%2A> Auflistung. Dies kann für den Umgang mit sehr umfangreichen Listen oder Listen, die häufig geändert werden, deren Inhalt nützlich sein. Legen Sie zum Aktivieren des virtuellen Modus der <xref:System.Windows.Forms.ListView.VirtualMode%2A> Eigenschaft `true` und behandeln die <xref:System.Windows.Forms.ListView.RetrieveVirtualItem>, <xref:System.Windows.Forms.ListView.CacheVirtualItems>, und <xref:System.Windows.Forms.ListView.SearchForVirtualItem> Ereignisse.  
  
 Zusätzlich zu den viele Eigenschaften, die für die verfügbaren einen <xref:System.Windows.Forms.ListView> steuern, es gibt Methoden und Ereignisse, die Ihre Anwendung verwenden können, um zusätzliche Funktionen bereitzustellen der <xref:System.Windows.Forms.ListView>. Die <xref:System.Windows.Forms.ListView.BeginUpdate%2A> und <xref:System.Windows.Forms.ListView.EndUpdate%2A> Methoden ermöglichen es Ihnen, die Leistung zu verbessern, wenn Sie viele Elemente zum Hinzufügen einer <xref:System.Windows.Forms.ListView> durch verhindern, dass das Steuerelement aktualisiert jedes Mal, die ein Element hinzugefügt wird. Wenn Ihre <xref:System.Windows.Forms.ListView> -Steuerelement angezeigt wird, Elemente und Unterelemente, Sie wollen Funktionalität bereitstellen, wenn der Benutzer ein Unterelement klickt. Um das Element zu bestimmen, dessen Unterelement geklickt wird, können Sie die <xref:System.Windows.Forms.ListView.GetItemAt%2A> Methode. Bei der Überprüfung der Elemente ausführen, nachdem der Benutzer sie bearbeitet wurde, können Sie ein bestimmtes Element für den Benutzer so ändern Sie anzeigen möchten. Die <xref:System.Windows.Forms.ListView.EnsureVisible%2A> Methode kann aufgerufen werden, um sicherzustellen, dass das spezifische Element in den sichtbaren Bereich des Steuerelements.  
  
 Wenn die <xref:System.Windows.Forms.ListView.LabelEdit%2A> -Eigenschaftensatz auf `true`, können Sie Aufgaben, z. B. überprüfen den Text bearbeitet werden, vor und nach dem Text geändert, indem das Erstellen eines ereignishandlers für Ausführen der <xref:System.Windows.Forms.ListView.BeforeLabelEdit> und <xref:System.Windows.Forms.ListView.AfterLabelEdit> Ereignisse. Um Aufgaben wie das Öffnen einer Datei oder das Anzeigen eines Dialogfelds zum Bearbeiten eines Elements angezeigt, eine <xref:System.Windows.Forms.ListView>, können Sie einen Ereignishandler für die <xref:System.Windows.Forms.ListView.ItemActivate> Ereignis. Wenn Sie zulassen, den Benutzer zum Sortieren der Elemente in dass einer <xref:System.Windows.Forms.ListView> Wenn sie einen Spaltenheader klicken, können Sie erstellen einen Ereignishandler für die <xref:System.Windows.Forms.ListView.ColumnClick> Ereignis, um den Sortiervorgang auszuführen. Wenn die <xref:System.Windows.Forms.ListView.CheckBoxes%2A> -Eigenschaftensatz auf `true`, können Sie ermitteln, wann eine Änderung der Aktivierungszustand eines Elements durch Behandeln aufgetreten ist die <xref:System.Windows.Forms.ListView.ItemCheck> Ereignis.  
  
 Sie können auch festlegen, ein Hintergrundbild für die <xref:System.Windows.Forms.ListView> mit der <xref:System.Windows.Forms.Control.BackgroundImage%2A> Eigenschaft. Ihre Anwendung benötigen die <xref:System.STAThreadAttribute> auf seine `Main` Methode, um das Hintergrundbild für richtigerweise der <xref:System.Windows.Forms.ListView> Steuerelement. Darüber hinaus, wenn ein <xref:System.Windows.Forms.ListView> Steuerelement mit einem Hintergrundbild in Internet Explorer gehostet wird, geben Sie als eine abhängige Assembly in der Manifestdatei der Anwendung sicherzustellen, dass das Hintergrundbild angezeigten Eigenschaft comctl32.dll, Version 6.0.  
  
> [!NOTE]
>  Festlegen der <xref:System.Windows.Forms.Control.Cursor%2A> -Eigenschaft für eine <xref:System.Windows.Forms.ListView> Steuerelement hat keine Auswirkung auf die Darstellung des Cursors in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Version 1.1 und früher.  
  
 Windows XP und Windows Server 2003 stellen drei Funktionen, die verbessern die <xref:System.Windows.Forms.ListView> steuern, wenn die Anwendung aufruft, die <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> Methode: Kachelansicht, Gruppierung und die Einfügemarke.  
  
 Ansicht "Nebeneinander" können Sie die grafischen und textbasierten Daten neu verteilen, indem das Anzeigen von Elementen und Unterelementen Text neben große Symbole. Legen Sie die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType> um dieses Verhalten zu aktivieren.  
  
 Die Grouping-Funktion können Sie Elemente visuell in verwandten Kategorien zu gruppieren. Verwenden der <xref:System.Windows.Forms.ListView.Groups%2A> hinzuzufügenden Eigenschaft <xref:System.Windows.Forms.ListViewGroup> -Objekte und die <xref:System.Windows.Forms.ListView> steuern, wenn Sie diese Funktion aktivieren möchten. Um das Feature vorübergehend zu deaktivieren, legen die <xref:System.Windows.Forms.ListView.ShowGroups%2A> Eigenschaft `false`.  
  
 Das Einfügemarkenfeature können Sie die Drag-and-Drop-Element visuelles Feedback an Ablageorte Neupositionieren bereitzustellen. Verwenden der <xref:System.Windows.Forms.ListViewInsertionMark> Objekt abgerufen wird, über die <xref:System.Windows.Forms.ListView.InsertionMark%2A> Eigenschaft, um die Einfügemarke anzuzeigen.  
  
 Diese Funktionen sind nur unter Windows XP und Windows Server 2003 verfügbar sind. Unter früheren Betriebssystemen hat der Code, die für diese Funktionen sind keine Auswirkungen, Ansicht "Nebeneinander" angezeigt wird, wie die Ansicht "große Symbole" und die Einfügemarke und Gruppen werden nicht angezeigt. In einigen Fällen können Sie Code, der bestimmt, ob diese Funktionen verfügbar sind, einschließen möchten und eine andere Funktionalität bereitstellen, wenn sie nicht verfügbar sind. Diese Funktionen werden von der gleichen Bibliothek bereitgestellt, die das Feature des Betriebssystems Designs bereitstellt. Aufrufen, um die Verfügbarkeit dieser Bibliothek zu überprüfen, die <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> -methodenüberladung, und übergeben Sie die <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> Wert.  
  
 Die folgende Tabelle zeigt einige der <xref:System.Windows.Forms.ListView> Member und die Ansichten, die sie in gültig sind.  
  
|ListView-Element|Ansicht|  
|---------------------|----------|  
|<xref:System.Windows.Forms.ListView.Alignment%2A>-Eigenschaft|<xref:System.Windows.Forms.View.SmallIcon> oder <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoArrange%2A>-Eigenschaft|<xref:System.Windows.Forms.View.SmallIcon> oder <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A>-Methode|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.Columns%2A>-Eigenschaft|<xref:System.Windows.Forms.View.Details> oder <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem>-Ereignis|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.FindItemWithText%2A>-Methode|<xref:System.Windows.Forms.View.Details>, <xref:System.Windows.Forms.View.List>oder <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.FindNearestItem%2A>-Methode|<xref:System.Windows.Forms.View.SmallIcon> oder <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.GetItemAt%2A>-Methode|<xref:System.Windows.Forms.View.Details> oder <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Groups%2A>-Eigenschaft|Alle Ansichten außer <xref:System.Windows.Forms.View.List>|  
|<xref:System.Windows.Forms.ListView.HeaderStyle%2A>-Eigenschaft|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.InsertionMark%2A>-Eigenschaft|<xref:System.Windows.Forms.View.LargeIcon>, <xref:System.Windows.Forms.View.SmallIcon>oder <xref:System.Windows.Forms.View.Tile>|  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement:  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="T:System.Windows.Forms.ImageList" />
    <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.ListView" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement:  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activation">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ItemActivation Activation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ItemActivation Activation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Activation" />
      <MemberSignature Language="VB.NET" Value="Public Property Activation As ItemActivation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ItemActivation Activation { System::Windows::Forms::ItemActivation get(); void set(System::Windows::Forms::ItemActivation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemActivation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ der Aktion ab, die der Benutzer zum Aktivieren eines Elements ausführen muss, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.ItemActivation" />-Werte. Der Standardwert ist <see cref="F:System.Windows.Forms.ItemActivation.Standard" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.Activation%2A> Eigenschaft können Sie angeben, wie der Benutzer ein Element im aktivieren, wird die <xref:System.Windows.Forms.ListView> Steuerelement. Aktivieren eines Elements in einem <xref:System.Windows.Forms.ListView> unterscheidet sich nur ein Element auszuwählen. Wenn ein Element aktiviert ist, eine Aktion erfolgt in der Regel in einem Ereignishandler für das <xref:System.Windows.Forms.ListView.ItemActivate> Ereignis. Wenn ein Element aktiviert ist, können Sie z. B. eine Datei öffnen oder Anzeigen eines Dialogfelds, das das Element, das bearbeitet werden kann. Ein Element doppelgeklickt wird in der Regel vom Benutzer zu aktivieren. Wenn die <xref:System.Windows.Forms.ListView.Activation%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.ItemActivation.OneClick>, auf das Element ein Mal aktiviert wird. Festlegen der <xref:System.Windows.Forms.ListView.Activation%2A> Eigenschaft <xref:System.Windows.Forms.ItemActivation.TwoClick> unterscheidet sich von der standardmäßigen Doppelklick da die zwei aufeinander folgende Mausklicks zwischen aufweisen können.  
  
> [!NOTE]
>  Wenn die <xref:System.Windows.Forms.ListView.Activation%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.ItemActivation.OneClick> oder <xref:System.Windows.Forms.ItemActivation.TwoClick>, Bearbeiten von Bezeichnungen werden zugelassen, unabhängig vom Wert von der <xref:System.Windows.Forms.ListView.LabelEdit%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der angegebene Wert ist kein <see cref="T:System.Windows.Forms.ItemActivation" />-Member.</exception>
        <altmember cref="T:System.Windows.Forms.ItemActivation" />
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
      </Docs>
    </Member>
    <Member MemberName="AfterLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler AfterLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler AfterLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ AfterLabelEdit;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Bezeichnung eines Elements vom Benutzer bearbeitet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.AfterLabelEdit> Ereignis tritt auf, wenn der Benutzer abgeschlossen ist, ändern den Text für ein Element. Die neue Zeichenfolge, die Benutzertypen für das Element an das Ereignis übergeben wird, und der Ereignishandler kann die Änderung ablehnen. Wenn der Ereignishandler die Änderung ablehnt, wird der Text vorlag, bevor der Benutzer gestartet wurde, bearbeiten das Element auf den Text zurückgesetzt.  
  
> [!NOTE]
>  Da die <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> Ereignis erfolgt vor die Bearbeitung Bezeichnung ein Commit ausgeführt wurde, Aufrufen der <xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=nameWithType> -Methode in einen Handler für dieses Ereignis wird das Element mit dem ursprünglichen Wert zu sortieren.  
  
 In der Reihenfolge für die <xref:System.Windows.Forms.ListView.AfterLabelEdit> Ereignis ausgelöst wurde, die <xref:System.Windows.Forms.ListView.LabelEdit%2A> Eigenschaft von der <xref:System.Windows.Forms.ListView> Steuerelement muss festgelegt werden, um `true`.  
  
 Sie können einen Ereignishandler für erstellen die <xref:System.Windows.Forms.ListView.BeforeLabelEdit> Ereignis, um Aufgaben durchzuführen, bevor der Benutzer den Text eines Elements bearbeitet.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListView.AfterLabelEdit> Ereignis, um eine neu bearbeitete Beschriftung auf alphabetische Zeichen beschränken. Im Beispiel wird die <xref:System.Text.ASCIIEncoding> Klasse, um den ASCII-Zeichencode der einzelnen Zeichen, der die neue Bezeichnung erhalten. Wenn das Zeichen zwischen den ASCII-Codes, die Zahlen darstellen fällt, kann nicht die neue Bezeichnung für das Element angewendet werden. Dieses Beispiel benötigen Sie nach der Erstellung einer <xref:System.Windows.Forms.ListView> Steuerelement eines Formulars und Elemente hinzugefügt. Im Beispiel erfordert auch, dass Sie eine Verbindung hergestellt haben die <xref:System.Windows.Forms.ListView.AfterLabelEdit> Ereignis an den Ereignishandler, der im Beispielcode definiert. Zum Verwenden der <xref:System.Text.ASCIIEncoding> -Klasse, die Datei umfasst das <xref:System.Text> Namespace.  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ListViewAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Alignment" />
      <MemberSignature Language="VB.NET" Value="Public Property Alignment As ListViewAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewAlignment Alignment { System::Windows::Forms::ListViewAlignment get(); void set(System::Windows::Forms::ListViewAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Ausrichtung von Elementen im Steuerelement ab oder legt diese fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.ListViewAlignment" />-Werte. Der Standardwert ist <see cref="F:System.Windows.Forms.ListViewAlignment.Top" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.Alignment%2A> Eigenschaft wirkt sich nur auf die Ausrichtung bei der <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.LargeIcon> oder <xref:System.Windows.Forms.View.SmallIcon>.  
  
> [!NOTE]
>  Diese Eigenschaft wirkt sich nicht mit der <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.List>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der angegebene Wert ist keiner der <see cref="T:System.Windows.Forms.ListViewAlignment" />-Werte.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
      </Docs>
    </Member>
    <Member MemberName="AllowColumnReorder">
      <MemberSignature Language="C#" Value="public bool AllowColumnReorder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowColumnReorder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AllowColumnReorder" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowColumnReorder As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowColumnReorder { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Benutzer Spaltenköpfe ziehen können, um die Spalten im Steuerelement neu anzuordnen, oder legt diesen fest.</summary>
        <value>
          <see langword="true" /> Wenn die neuanordnung von Drag &amp; Drop-zulässig ist andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Festlegen des Werts der <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> Eigenschaft hat keine Auswirkungen, es sei denn, die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.Details>. Sie können diese Eigenschaft verwenden, um Benutzern das Verschieben von Spalten im Steuerelement zur Laufzeit ermöglichen. Wenn die <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> -Eigenschaftensatz auf `true`, Benutzer können die Spalten im Steuerelement auf das Element und seine Unterelemente auf eine Weise anzuzeigen, die ihre Anforderungen in Ihrer Anwendung erfüllt positionieren.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement:  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrangeIcons">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ordnet Elemente im Steuerelement an, wenn sie als Symbole angezeigt werden.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ordnet Elemente im Steuerelement auf Grundlage des Werts der <see cref="P:System.Windows.Forms.ListView.Alignment" />-Eigenschaft an, wenn diese als Symbole angezeigt werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> Methode ist nur hilfreich, wenn die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.LargeIcon> oder <xref:System.Windows.Forms.View.SmallIcon>. Aufrufen von dieser Version von der <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> Methode ordnet die Elemente anhand des Werts von der <xref:System.Windows.Forms.ListView.Alignment%2A> Eigenschaft. Dazu führen, dass die Elemente so ausgerichtet werden basierend auf einem Wert, der von der unterscheidet die <xref:System.Windows.Forms.ListView.Alignment%2A> -Eigenschaft, verwenden Sie die andere Version von den <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons (System.Windows.Forms.ListViewAlignment value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons(valuetype System.Windows.Forms.ListViewAlignment value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons (value As ListViewAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons(System::Windows::Forms::ListViewAlignment value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.ListViewAlignment" />
      </Parameters>
      <Docs>
        <param name="value">Einer der <see cref="T:System.Windows.Forms.ListViewAlignment" />-Werte.</param>
        <summary>Ordnet Elemente im Steuerelement mit einer angegebenen Einstellung für die Ausrichtung an, wenn sie als Symbole angezeigt werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> Methode ist nur hilfreich, wenn die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.LargeIcon> oder <xref:System.Windows.Forms.View.SmallIcon>. Diese Version von der <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> Methode ordnet die Symbole in der <xref:System.Windows.Forms.ListView> basierend auf den <xref:System.Windows.Forms.ListViewAlignment> im angegebenen Wert der `value` Parameter. Beim Aufrufen dieser Methode ändert sich nicht auf den Wert der <xref:System.Windows.Forms.ListView.Alignment%2A> Eigenschaft des Steuerelements. Diese Methode wird verwendet, um das Anordnen von Symbolen für das Steuerelement mit einem anderen Wert als der der <xref:System.Windows.Forms.ListView.Alignment%2A> Eigenschaft. Dazu führen, dass die Elemente so ausgerichtet werden basierend auf dem Wert des der <xref:System.Windows.Forms.ListView.Alignment%2A> -Eigenschaft, die andere Version von der <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der im <paramref name="value" />-Parameter angegebene Wert ist kein Member der <see cref="T:System.Windows.Forms.ListViewAlignment" />-Enumeration.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoArrange">
      <MemberSignature Language="C#" Value="public bool AutoArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AutoArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoArrange { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, ob die Anordnung von Symbolen automatisch beibehalten wird, oder legt dieses fest.</summary>
        <value>
          <see langword="true" />, wenn die Anordnung von Symbolen automatisch beibehalten wird und die Symbole am Datenblatt ausgerichtet werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.AutoArrange%2A> Eigenschaft nur ordnet Elemente im die <xref:System.Windows.Forms.ListView> steuern, wann die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.LargeIcon> oder <xref:System.Windows.Forms.View.SmallIcon>. So ändern Sie die Ausrichtung der Elemente in der <xref:System.Windows.Forms.ListView> steuern, verwenden Sie die <xref:System.Windows.Forms.ListView.Alignment%2A> Eigenschaft. Sie können <xref:System.Windows.Forms.ListView.AutoArrange%2A> um sicherzustellen, dass alle Elemente in Ihrer <xref:System.Windows.Forms.ListView> Steuerelement automatisch angeordnet werden, vermeiden Sie überlappende zur Laufzeit.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumn (columnIndex As Integer, headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumn(int columnIndex, System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="columnIndex">Der nullbasierte Index der Spalte, deren Breite geändert werden soll.</param>
        <param name="headerAutoResize">Einer der <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" />-Werte.</param>
        <summary>Ändert die Breite der angegebenen Spalte gemäß der Formatvorlage für die Größenänderung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Aufrufen dieser Methode ist nur wirksam einmal die <xref:System.Windows.Forms.ListView> und enthält <xref:System.Windows.Forms.Form> erstellt wurden, und die <xref:System.Windows.Forms.ListView> Spaltenüberschriften und Spalten mit Elementen aufgefüllt werden. Wenn Sie neue Elemente hinzufügen der <xref:System.Windows.Forms.ListView>, die Spaltengröße werden nicht ändern, es sei denn, <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> erneut aufgerufen wird.  
  
   
  
## Examples  
 Im folgende Beispiel initialisiert eine <xref:System.Windows.Forms.ListView> in der Detailansicht und automatisch ändert die Größe der Spalten, die mithilfe der <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> Methode. Um dieses Beispiel auszuführen, fügen Sie diesen Code in einem Windows Form, und rufen die `InitializeResizingListView` Methode aus den Konstruktor des Formulars oder <xref:System.Windows.Forms.Form.Load> -Ereignishandler.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> ist größer als 0 (null), wenn <see cref="P:System.Windows.Forms.ListView.Columns" /><see langword="null" /> ist.  
  
 - oder -   
  
 <paramref name="columnIndex" /> ist kleiner als 0 (null) oder größer als die Anzahl der festgelegten Spalten.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="headerAutoResize" /> ist kein Member der <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" />-Enumeration.</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns (System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumns(System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumns (headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumns(System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="headerAutoResize">Einer der <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" />-Werte.</param>
        <summary>Ändert die Breite der Spalten gemäß der Formatvorlage für die Größenänderung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Aufrufen dieser Methode ist nur wirksam einmal die <xref:System.Windows.Forms.ListView> und enthält <xref:System.Windows.Forms.Form> erstellt wurden, und die <xref:System.Windows.Forms.ListView> Spaltenüberschriften und Spalten mit Elementen aufgefüllt werden. Wenn Sie neue Elemente hinzufügen der <xref:System.Windows.Forms.ListView>, die Spaltengröße werden nicht ändern, es sei denn, <xref:System.Windows.Forms.ListView.AutoResizeColumns%2A> erneut aufgerufen wird.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Initialisieren einer <xref:System.Windows.Forms.ListView> in der Detailansicht und automatische Größenänderung der Spalten, die mithilfe der <xref:System.Windows.Forms.ListView.AutoResizeColumns%2A> Methode. Um dieses Beispiel auszuführen, fügen Sie diesen Code in einem Windows Form, und rufen die `InitializeResizingListView2` Methode aus den Konstruktor des Formulars oder <xref:System.Windows.Forms.Form.Load> -Ereignishandler.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#9)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" /> wird mit einem anderen Wert als <see cref="F:System.Windows.Forms.ColumnHeaderAutoResizeStyle.None" /> aufgerufen, wenn <see cref="P:System.Windows.Forms.ListView.View" /> nicht auf <see cref="F:System.Windows.Forms.View.Details" /> festgelegt ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Hintergrundfarbe ab oder legt sie fest.</summary>
        <value>Die <see cref="T:System.Drawing.Color" /> des Hintergrunds.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.Windows.Forms.ImageLayout" />-Wert ab oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.ImageLayout" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft hat keine Auswirkung auf das Layout des Hintergrundbilds für die <xref:System.Windows.Forms.ListView> -Steuerelement, wird daher im Designer oder von IntelliSense nicht angezeigt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der angegebene Wert ist keiner der <see cref="T:System.Windows.Forms.ImageLayout" />-Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich die <see cref="P:System.Windows.Forms.ListView.BackgroundImageLayout" />-Eigenschaft ändert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageTiled">
      <MemberSignature Language="C#" Value="public bool BackgroundImageTiled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BackgroundImageTiled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageTiled" />
      <MemberSignature Language="VB.NET" Value="Public Property BackgroundImageTiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BackgroundImageTiled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Hintergrundbild von <see cref="T:System.Windows.Forms.ListView" /> aufgeteilt werden soll, oder legt diesen Wert fest.</summary>
        <value>
          <see langword="true" />, wenn das Hintergrundbild der <see cref="T:System.Windows.Forms.ListView" /> aufgeteilt werden soll, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.BackgroundImageTiled%2A> -Eigenschaft gibt `false` Wenn ein Bild nicht festgelegt ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ BeforeLabelEdit;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer mit dem Bearbeiten der Bezeichnung eines Elements beginnt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.BeforeLabelEdit> Ereignis tritt auf, wenn der Benutzer beginnt, ändern den Text für ein Element. Wenn der Ereignishandler das Ereignis abgebrochen wird, kann der Benutzer den Text nicht bearbeiten. Verwenden Sie dieses Ereignis, um zu verhindern, dass den Benutzer bestimmte Elemente im Bearbeiten der <xref:System.Windows.Forms.ListView> Steuerelement. Wenn die <xref:System.Windows.Forms.ListView.LabelEdit%2A> Eigenschaft von der <xref:System.Windows.Forms.ListView> Steuerelement auf festgelegt ist `false`, die <xref:System.Windows.Forms.ListView.BeforeLabelEdit> Ereignis wird nicht ausgelöst; alle Benutzer bei dem Versuch elementbezeichnungen bearbeiten werden automatisch abgelehnt.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Behandlung der <xref:System.Windows.Forms.ListView.BeforeLabelEdit> -Ereignisses und die Verwendung der <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A?displayProperty=nameWithType> und <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A?displayProperty=nameWithType> Eigenschaften. Fügen Sie zum Ausführen des Beispiels den folgenden Code in ein Formular, enthält ein <xref:System.Windows.Forms.ListView> Steuerelement namens `ListView1` und mit mindestens drei Elementen aufgefüllt. Stellen Sie sicher, dass im Beispiel wird der Ereignishandler das Ereignis zugeordnet ist.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verhindert das Zeichnen des Steuerelements bis zum Aufruf der <see cref="M:System.Windows.Forms.ListView.EndUpdate" />-Methode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die bevorzugte Methode zum Hinzufügen mehrerer Elemente zu einer <xref:System.Windows.Forms.ListView> ist die Verwendung der <xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A> Methode der <xref:System.Windows.Forms.ListView.ListViewItemCollection> (erfolgt über die <xref:System.Windows.Forms.ListView.Items%2A> Eigenschaft der <xref:System.Windows.Forms.ListView>). Dadurch können Sie ein Array von Elementen der Liste in einem einzigen Vorgang hinzuzufügen. Jedoch wenn hinzuzufügenden Elemente einzeln mithilfe der <xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A> Methode der <xref:System.Windows.Forms.ListView.ListViewItemCollection> -Klasse, die Sie verwenden die <xref:System.Windows.Forms.ListView.BeginUpdate%2A> Methode, um zu verhindern, dass das Steuerelement neu gezeichnet der <xref:System.Windows.Forms.ListView> jedes Mal, die ein Element hinzugefügt wird. Wenn Sie den Vorgang des Hinzufügens von Elementen zum Steuerelement abgeschlossen haben, rufen Sie die <xref:System.Windows.Forms.ListView.EndUpdate%2A> Methode zum Aktivieren der <xref:System.Windows.Forms.ListView> zum erneuten Zeichnen verwendet. Diese Vorgehensweise beim Hinzufügen von Elementen kann Flackern zeichnen die <xref:System.Windows.Forms.ListView> Wenn große Anzahl von Elementen zum Steuerelement hinzugefügt wird.  
  
 Wenn <xref:System.Windows.Forms.ListView.BeginUpdate%2A> mehr als einmal aufgerufen wird <xref:System.Windows.Forms.ListView.EndUpdate%2A> muss eine entsprechende Anzahl, wie oft aufgerufen werden. Bis zum letzten Aufruf von <xref:System.Windows.Forms.ListView.EndUpdate%2A> der <xref:System.Windows.Forms.ListView> nicht neu gezeichnet wird. Außerdem mehrere Aufrufe <xref:System.Windows.Forms.ListView.BeginUpdate%2A> haben keine Auswirkungen.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Initialisieren einer <xref:System.Windows.Forms.ListView> Steuerelement Kontrollkästchen enthalten. Außerdem wird veranschaulicht, wie die <xref:System.Windows.Forms.ListView.BeginUpdate%2A> und <xref:System.Windows.Forms.ListView.EndUpdate%2A> Methoden. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular, enthält ein <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1`. Rufen Sie die `InititalizeListView` Methode aus den Konstruktor des Formulars oder `Load` Methode.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.EndUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Rahmenart des Steuerelements ab oder legt diese fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.BorderStyle" />-Werte. Der Standardwert ist <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können Sie die <xref:System.Windows.Forms.ListView.BorderStyle%2A> Eigenschaft so ändern Sie die Rahmenart der <xref:System.Windows.Forms.ListView> Steuerelement, das die formateinstellungen Rahmen anderer Steuerelemente auf dem Formular entsprechend. Beispielsweise, wenn keines der anderen Steuerelementen auf dem Formular einen Rahmen angezeigt wird, legen Sie die <xref:System.Windows.Forms.ListView.BorderStyle%2A> Eigenschaft von der <xref:System.Windows.Forms.ListView> die Steuerung an <xref:System.Windows.Forms.BorderStyle.None> entsprechend den andere Steuerelemente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der angegebene Wert ist keiner der <see cref="T:System.Windows.Forms.BorderStyle" />-Werte.</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="CacheVirtualItems">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.CacheVirtualItems" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CacheVirtualItems As CacheVirtualItemsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::CacheVirtualItemsEventHandler ^ CacheVirtualItems;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CacheVirtualItemsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich die Inhalte des Anzeigebereichs für eine <see cref="T:System.Windows.Forms.ListView" /> im virtuellen Modus geändert haben und die <see cref="T:System.Windows.Forms.ListView" /> bestimmt, dass ein neuer Bereich von Elementen erforderlich ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis tritt nur auf, wenn <xref:System.Windows.Forms.ListView.VirtualMode%2A> ist `true`. Behandeln dieses Ereignis kann die <xref:System.Windows.Forms.ListView> Elementinformationen aktualisieren, im Cache, damit es sofort verfügbar ist. Dies kann die Leistung bei umfangreichen Listen oder Listen, deren Elemente berechnet teuren sind, verbessern.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Elements. Im Beispiel überprüft der Ereignishandler, um sicherzustellen, dass eine Aktualisierung des Cache wirklich notwendig ist, und erstellt ihn neu Cache. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Windows.Forms.ListView.VirtualMode%2A> Eigenschaft.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public bool CheckBoxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckBoxes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckBoxes" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckBoxes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckBoxes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob neben jedem Element im Steuerelement ein Kontrollkästchen angezeigt wird, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn neben jedem Element im <see cref="T:System.Windows.Forms.ListView" />-Steuerelement ein Kontrollkästchen angezeigt wird, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.CheckBoxes%2A> -Eigenschaft können Sie das Kontrollkästchen neben jedem Element in der Liste angezeigt. Dadurch kann die Anwendung aus, um eine Liste von Elementen anzuzeigen (und Unterelementen, wenn die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf `View.Details`), dass der Benutzer auswählen kann, indem Sie auf das Kontrollkästchen. Die <xref:System.Windows.Forms.ListView.CheckBoxes%2A> Eigenschaft bietet eine Möglichkeit zur Auswahl mehrerer Elemente in der <xref:System.Windows.Forms.ListView> Steuerelement ohne die STRG-Taste. Je nach Ihrer Anwendung kann die Verwendung von Kontrollkästchen Elemente statt der Standard Auswählen mehrerer Auswahlmethode für den Benutzer einfacher sein. Auch wenn die <xref:System.Windows.Forms.ListView.MultiSelect%2A> Eigenschaft von der <xref:System.Windows.Forms.ListView> Steuerelement auf festgelegt ist `false`, können Sie weiterhin anzeigen Kontrollkästchen und mehrere Auswahlfunktionen für den Benutzer bereitstellen. Diese Funktion kann nützlich sein, wenn Sie mehrere Elemente ausgewählt werden soll oder noch nicht immer noch den Benutzer mehrere Elemente aus der Liste zum Ausführen eines Vorgangs innerhalb der Anwendung zulassen möchten.  
  
 Um zu bestimmen, wann ein Element aktiviert wurde, erstellen Sie einen Ereignishandler für das <xref:System.Windows.Forms.ListView.ItemCheck> Ereignis. Um alle Elemente abzurufen, die eingecheckt werden die <xref:System.Windows.Forms.ListView>, verwenden Sie die <xref:System.Windows.Forms.ListView.CheckedItems%2A> aufzurufende Eigenschaft der <xref:System.Windows.Forms.ListView.CheckedIndexCollection> für das Steuerelement. Um die Indizes aller Elemente abzurufen, die eingecheckt werden die <xref:System.Windows.Forms.ListView>, verwenden Sie die <xref:System.Windows.Forms.ListView.CheckedIndices%2A> Eigenschaft.  
  
 Wenn ein <xref:System.Windows.Forms.ImageList> wird angegeben, der <xref:System.Windows.Forms.ListView.StateImageList%2A> -Eigenschaft, die Bilder an den Indexpositionen 0 und 1 in der <xref:System.Windows.Forms.ImageList> anstelle dieses Kontrollkästchen angezeigt werden. Das Bild an Indexposition 0 wird angezeigt, statt das Kontrollkästchen deaktiviert, und das Bild an Indexposition 1 anstelle der aktivierten Kontrollkästchens angezeigt.  
  
> [!NOTE]
>  Bei Festlegung dieser Eigenschaft auf `true`die <xref:System.Windows.Forms.ListView.ItemCheck> Ereignis auftritt.  
>   
>  Kontrollkästchen werden nicht angezeigt, wenn die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.Tile>.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="P:System.Windows.Forms.ListView.MultiSelect" />
      </Docs>
    </Member>
    <Member MemberName="CheckedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedIndexCollection CheckedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedIndexCollection CheckedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedIndices As ListView.CheckedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedIndexCollection ^ CheckedIndices { System::Windows::Forms::ListView::CheckedIndexCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Indizes der gegenwärtig im Steuerelement aktivierten Elemente ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />, die die Indizes der gegenwärtig aktivierten Elemente enthält. Wenn gegenwärtig keine Elemente aktiviert sind, wird eine leere <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" /> zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist nur hilfreich, wenn die <xref:System.Windows.Forms.ListView.CheckBoxes%2A> Eigenschaft von der <xref:System.Windows.Forms.ListView> Steuerelement festgelegt ist, um `true`. Die <xref:System.Windows.Forms.ListView.CheckedIndices%2A> -Eigenschaft gibt eine Auflistung, die die Indexpositionen in enthält die <xref:System.Windows.Forms.ListView.ListViewItemCollection> aller Elemente, die im Steuerelement überprüft werden. Weitere Informationen zum Bearbeiten der Elemente in der Auflistung finden Sie unter <xref:System.Windows.Forms.ListView.CheckedIndexCollection>.  
  
 Wenn Sie zum Abrufen einer Auflistung der Elemente, die eingecheckt werden soll die <xref:System.Windows.Forms.ListView> -Steuerelement, statt die Indexpositionen der Elemente, die überprüft wurden, verwenden die <xref:System.Windows.Forms.ListView.CheckedItems%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedItems" />
      </Docs>
    </Member>
    <Member MemberName="CheckedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedListViewItemCollection CheckedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedListViewItemCollection CheckedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedItems As ListView.CheckedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedListViewItemCollection ^ CheckedItems { System::Windows::Forms::ListView::CheckedListViewItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die gegenwärtig im Steuerelement aktivierten Elemente ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />, die die gegenwärtig aktivierten Elemente enthält. Wenn gegenwärtig keine Elemente aktiviert sind, wird eine leere <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" /> zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist nur hilfreich, wenn die <xref:System.Windows.Forms.ListView.CheckBoxes%2A> Eigenschaft von der <xref:System.Windows.Forms.ListView> Steuerelement festgelegt ist, um `true`. Die <xref:System.Windows.Forms.ListView.CheckedItems%2A> -Eigenschaft gibt eine Auflistung, die alle Elemente enthält, die im Steuerelement überprüft werden. Weitere Informationen zum Bearbeiten der Elemente in der Auflistung finden Sie unter <xref:System.Windows.Forms.ListView.CheckedListViewItemCollection>.  
  
 Wenn Sie eine Auflistung von Indexpositionen in abrufen möchten die <xref:System.Windows.Forms.ListView.ListViewItemCollection> der Elemente, die eingecheckt werden die <xref:System.Windows.Forms.ListView> -Steuerelement, statt die Elemente, die überprüft wurden, verwenden die <xref:System.Windows.Forms.ListView.CheckedIndices%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, eine aktivierte <xref:System.Windows.Forms.ListView> , verarbeitet die <xref:System.Windows.Forms.ListView.ItemChecked> Ereignis. Im Beispiel wird die <xref:System.Windows.Forms.ListView.CheckedItems%2A> Eigenschaft, um einen neuen Preis jedes Mal berechnen, die ein Element aktiviert oder deaktiviert wird. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular, enthält ein <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1` und ein <xref:System.Windows.Forms.TextBox> mit dem Namen `Textbox1`. Rufen Sie die `InititalizeListView` Methode aus den Konstruktor des Formulars oder `Load` Methode.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedIndices" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle Elemente und Spalten aus dem Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Methode verwenden, entfernen Sie alle Elemente und Spalten aus der <xref:System.Windows.Forms.ListView> Steuerelement ohne Aufrufen die einzelnen `Clear` Methoden aus der <xref:System.Windows.Forms.ListView.ColumnHeaderCollection> und <xref:System.Windows.Forms.ListView.ListViewItemCollection> Klassen.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.ListView.Clear%2A> Methode löscht keinen <xref:System.Windows.Forms.ListView.Groups%2A> angegeben für die <xref:System.Windows.Forms.ListView> Steuerelement. So löschen Sie <xref:System.Windows.Forms.ListView.Groups%2A> Aufrufen <xref:System.Windows.Forms.ListViewGroupCollection.Clear%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Windows.Forms.ListView.Clear%2A> und <xref:System.Windows.Forms.ListViewItem.Selected%2A?displayProperty=nameWithType> Elemente. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular, enthält ein <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1` und eine Schaltfläche, die sich im unteren Bereich des Formulars, mit dem Namen befindet `Button1`. Rufen Sie die `InitializeListView` Methode aus den Konstruktor des Formulars oder `Load` Methode.  
  
 [!code-cpp[System.Windows.Forms.ListView4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.ColumnHeaderCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="ColumnClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnClickEventHandler ColumnClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnClickEventHandler ColumnClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnClick As ColumnClickEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnClickEventHandler ^ ColumnClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn Benutzer im Listenansicht-Steuerelement auf einen Spaltenkopf klicken.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Windows.Forms.ListView.ColumnClick> Ereignis tritt auf, wenn der Benutzer, eine der angegebenen Spalte in der Detailansicht der Elemente in klickt einer <xref:System.Windows.Forms.ListView> Steuerelement (wenn der <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.Details>). Die <xref:System.Windows.Forms.ListView.ColumnClick> Ereignis erfolgt in der Regel zum Sortieren der Elemente in der <xref:System.Windows.Forms.ListView> anhand der Spalte sortiert werden, auf die geklickt wurde.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt ein Formular, enthält ein <xref:System.Windows.Forms.ListView> Steuerelement, das manuell sortiert, Elemente, wenn eine Spalte in der <xref:System.Windows.Forms.ListView> Steuerelement geklickt wird. Im Beispiel definiert eine Klasse namens `ListViewItemComparer` , implementiert die <xref:System.Collections.IComparer?displayProperty=nameWithType> -Schnittstelle, die führt die <xref:System.Windows.Forms.ListViewItem> Vergleich. Das Beispiel erstellt eine Instanz des `ListViewItemComparer` und verwendet, um das Festlegen der <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> Eigenschaft der <xref:System.Windows.Forms.ListView> Steuerelement. Die <xref:System.Windows.Forms.ListView.Sort%2A> -Methodenaufruf in der <xref:System.Windows.Forms.ListView.ColumnClick> -Ereignishandler verwendet die in definierten Methoden `ListViewItemComparer` , erfolgt die Sortierung der Elemente, die basierend auf der Spalte, auf die geklickt wird.  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ColumnReordered">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnReordered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnReordered As ColumnReorderedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnReorderedEventHandler ^ ColumnReordered;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnReorderedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Reihenfolge der Spaltenheader geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.ColumnReordered> Ereignis ist ein abbrechbares Ereignis und können abgebrochen werden durch die Behandlung des Ereignisses und der Einstellung der <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft `true`. Jedoch, wenn das Ereignis abgebrochen wird, die <xref:System.Windows.Forms.ColumnReorderedEventArgs.NewDisplayIndex%2A> von der <xref:System.Windows.Forms.ColumnReorderedEventArgs> ändert sich nicht auf die <xref:System.Windows.Forms.ColumnReorderedEventArgs.OldDisplayIndex%2A> Wert.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Elements. Im Beispiel meldet ein Ereignishandler für das Vorkommen der <xref:System.Windows.Forms.ListView.ColumnReordered> Ereignis. Dieser Bericht hilft Ihnen, um zu erfahren, wann das Ereignis tritt auf, und unterstützen Sie beim Debuggen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, sollten Sie ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, das eine Instanz des Typs enthält <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.ListView.ColumnReordered> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#467](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#467)]
 [!code-vb[System.Windows.Forms.EventExamples#467](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#467)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ColumnHeaderCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ColumnHeaderCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As ListView.ColumnHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ColumnHeaderCollection ^ Columns { System::Windows::Forms::ListView::ColumnHeaderCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ColumnHeaderCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ColumnHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung aller Spaltenköpfe ab, die im Steuerelement angezeigt werden.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />, die die Spaltenheader darstellt, die angezeigt werden, wenn die <see cref="P:System.Windows.Forms.ListView.View" />-Eigenschaft auf <see cref="F:System.Windows.Forms.View.Details" /> festgelegt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.Columns%2A> Eigenschaft gibt eine Auflistung mit den <xref:System.Windows.Forms.ColumnHeader> Objekte, die in angezeigt werden die <xref:System.Windows.Forms.ListView> Steuerelement. <xref:System.Windows.Forms.ColumnHeader> -Objekte definieren die Spalten, die in angezeigt werden die <xref:System.Windows.Forms.ListView> steuern, wann die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.Details>. Jede Spalte dient zum Anzeigen von Unterelementinformationen für jedes Element in der <xref:System.Windows.Forms.ListView>. Weitere Informationen zum Bearbeiten der Elemente in der Auflistung finden Sie unter <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>.  
  
> [!NOTE]
>  Wenn Ihre <xref:System.Windows.Forms.ListView> Steuerelement enthält keine Spaltenheader angegeben, und legen Sie die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft <xref:System.Windows.Forms.View.Details>, die <xref:System.Windows.Forms.ListView> Steuerelement keine Elemente angezeigt.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanged As ColumnWidthChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangedEventHandler ^ ColumnWidthChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, nachdem die Breite einer Spalte erfolgreich geändert wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird nicht ausgeführt, wenn das Ändern der Spaltenbreite, in abgebrochen wird der <xref:System.Windows.Forms.ListView.ColumnWidthChanging> Ereignis  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Elements. Im Beispiel meldet ein Ereignishandler für das Vorkommen der <xref:System.Windows.Forms.ListView.ColumnWidthChanged> Ereignis. Dieser Bericht hilft Ihnen, um zu erfahren, wann das Ereignis tritt auf, und unterstützen Sie beim Debuggen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, sollten Sie ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, das eine Instanz des Typs enthält <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.ListView.ColumnWidthChanged> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#468](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#468)]
 [!code-vb[System.Windows.Forms.EventExamples#468](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#468)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanging">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanging As ColumnWidthChangingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangingEventHandler ^ ColumnWidthChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich die Breite einer Spalte ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit diesem Ereignis können Sie überprüfen, ob die neue Spaltenbreite mit der <xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType> -Eigenschaft, und "Abbrechen", das Ereignis bei der Auswahl durch Festlegen der <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft `true`.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Behandlung der <xref:System.Windows.Forms.ListView.ColumnWidthChanging> Ereignis. Außerdem zeigt es die <xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType> und <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Elemente. Um dieses Beispiel auszuführen, fügen Sie den Code in einem Windows Form. Rufen Sie `InitializeListView1` aus den Konstruktor des Formulars oder <xref:System.Windows.Forms.Form.Load> -Ereignishandler.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein Handle für das Steuerelement.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ist für diese Klasse nicht relevant.</summary>
        <value>
          <see langword="null" /> in allen Fällen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standardgröße des Steuerelements ab.</summary>
        <value>Die Standard-<see cref="T:System.Drawing.Size" /> des Steuerelements.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Gibt die von <see cref="T:System.Windows.Forms.ListView" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie die <xref:System.Windows.Forms.ListView.Dispose%2A> Methode, wenn die Komponente nicht mehr benötigt wird. Diese Methode entfernt die Komponente aus dem zugehörigen Container, (falls die Komponente über eine Site verfügt) und löst das Dispose-Ereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected override bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DoubleBuffered" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DoubleBuffered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool DoubleBuffered { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Steuerelement seine Oberfläche unter Verwendung eines sekundären Puffers neu zeichnen soll, um Flackern zu verringern oder zu vermeiden, oder legt diesen Wert fest.</summary>
        <value>
          <see langword="true" />, wenn die Oberfläche des Steuerelements mit Doppelpufferung gezeichnet werden soll, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawColumnHeader">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawColumnHeader" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawColumnHeader As DrawListViewColumnHeaderEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewColumnHeaderEventHandler ^ DrawColumnHeader;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewColumnHeaderEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Detailansicht einer <see cref="T:System.Windows.Forms.ListView" /> gezeichnet wird und die <see cref="P:System.Windows.Forms.ListView.OwnerDraw" />-Eigenschaft auf <see langword="true" /> festgelegt ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit diesem Ereignis können Sie die Darstellung anpassen einer <xref:System.Windows.Forms.ListView> -Steuerelement mit dem Ownerdrawing. Es wird ausgelöst, nur, wenn die <xref:System.Windows.Forms.ListView.OwnerDraw%2A> -Eigenschaftensatz auf `true` und <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>. Dieses Ereignis kann auftreten, für die einzelnen Spaltenüberschriften im Steuerelement. Weitere Informationen zu Ownerdrawing finden Sie unter der <xref:System.Windows.Forms.ListView.OwnerDraw%2A> Referenzthemen.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel stellt eine Implementierung von einem <xref:System.Windows.Forms.ListView.DrawColumnHeader> -Ereignishandler. Das vollständige Beispiel, einschließlich der Implementierung der der <xref:System.Windows.Forms.ListView.DrawSubItem> -Ereignishandler finden Sie unter der <xref:System.Windows.Forms.ListView.OwnerDraw%2A> Referenzthema.  
  
 [!code-csharp[ListViewOwnerDraw#5](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#5)]
 [!code-vb[ListViewOwnerDraw#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawListViewItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewItemEventHandler ^ DrawItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn eine <see cref="T:System.Windows.Forms.ListView" /> gezeichnet wird und die <see cref="P:System.Windows.Forms.ListView.OwnerDraw" />-Eigenschaft auf <see langword="true" /> festgelegt ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit diesem Ereignis können Sie die Darstellung anpassen einer <xref:System.Windows.Forms.ListView> -Steuerelement mit dem Ownerdrawing. Es wird ausgelöst, nur, wenn die <xref:System.Windows.Forms.ListView.OwnerDraw%2A> -Eigenschaftensatz auf `true`. Weitere Informationen zu Ownerdrawing, finden Sie unter der <xref:System.Windows.Forms.ListView.OwnerDraw%2A> Referenzthemen.  
  
 Die <xref:System.Windows.Forms.ListView.DrawItem> Ereignis kann auftreten, für die einzelnen <xref:System.Windows.Forms.ListView> Element. Wenn die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, die <xref:System.Windows.Forms.ListView.DrawSubItem> und <xref:System.Windows.Forms.ListView.DrawColumnHeader> auch Ereignisse auftreten. In diesem Fall können Sie behandeln die <xref:System.Windows.Forms.ListView.DrawItem> Ereignis, um allgemeine Elemente für alle Elemente, z. B. den Hintergrund zeichnen und behandeln die <xref:System.Windows.Forms.ListView.DrawSubItem> Ereignis Elemente für einzelne Unterelemente, z. B. Textwerte gezeichnet werden soll. Sie können auch alle Elemente in zeichnen die <xref:System.Windows.Forms.ListView> steuern mit nur einer der beiden Ereignisse, obwohl dies umständlicher sein kann. Um Spaltenüberschriften in der Detailansicht zu zeichnen, müssen Sie behandeln die <xref:System.Windows.Forms.ListView.DrawColumnHeader> Ereignis.  
  
> [!NOTE]
>  Aufgrund eines Fehlers im zugrunde liegenden Win32-Steuerelement die <xref:System.Windows.Forms.ListView.DrawItem> Ereignis tritt auf, ohne begleitende <xref:System.Windows.Forms.ListView.DrawSubItem> Ereignisse einmal pro Zeile in der Detailansicht, wenn der Mauszeiger über der Zeile bewegt wird, verursacht nichts gezeichnet wird, eine <xref:System.Windows.Forms.ListView.DrawSubItem> Ereignishandler sein gezeichnetes veranlasst einen benutzerdefinierten Hintergrund gezeichnet wird, einem <xref:System.Windows.Forms.ListView.DrawItem> -Ereignishandler. Siehe das Beispiel in der <xref:System.Windows.Forms.ListView.OwnerDraw%2A> Referenzthema für dieses Problem zu umgehen, die jede Zeile wird ungültig, wenn das zusätzliche Ereignis auftritt. Eine alternative problemumgehung darin, alle Ihre benutzerdefinierten Code zum Zeichnen einem <xref:System.Windows.Forms.ListView.DrawSubItem> -Ereignishandler und Paint-Hintergrund für das gesamte Element (einschließlich der Unterelemente) nur, wenn die <xref:System.Windows.Forms.DrawListViewSubItemEventArgs.ColumnIndex%2A?displayProperty=nameWithType> Wert ist 0.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel stellt eine Implementierung von einem <xref:System.Windows.Forms.ListView.DrawItem> -Ereignishandler. Das vollständige Beispiel finden Sie unter der <xref:System.Windows.Forms.ListView.OwnerDraw%2A> Referenzthema.  
  
 [!code-csharp[ListViewOwnerDraw#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#3)]
 [!code-vb[ListViewOwnerDraw#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawSubItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawSubItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawSubItem As DrawListViewSubItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewSubItemEventHandler ^ DrawSubItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewSubItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Detailansicht einer <see cref="T:System.Windows.Forms.ListView" /> gezeichnet wird und die <see cref="P:System.Windows.Forms.ListView.OwnerDraw" />-Eigenschaft auf <see langword="true" /> festgelegt ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit diesem Ereignis können Sie die Darstellung anpassen einer <xref:System.Windows.Forms.ListView> -Steuerelement mit dem Ownerdrawing. Es wird ausgelöst, nur, wenn die <xref:System.Windows.Forms.ListView.OwnerDraw%2A> -Eigenschaftensatz auf `true` und <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>. Weitere Informationen zu Ownerdrawing finden Sie unter der <xref:System.Windows.Forms.ListView.OwnerDraw%2A> Referenzthemen.  
  
> [!NOTE]
>  Unterelementinformationen werden in der Regel in der Ansicht "Nebeneinander" angezeigt sowie die Details anzuzeigen, aber in der Ansicht "Nebeneinander" muss es in einen Handler für gezeichnet werden die <xref:System.Windows.Forms.ListView.DrawItem> Ereignis.  
  
 Die <xref:System.Windows.Forms.ListView.DrawSubItem> Ereignis kann auftreten, für die einzelnen <xref:System.Windows.Forms.ListView> Unterelements. Sie behandeln können die <xref:System.Windows.Forms.ListView.DrawItem> Ereignis, um allgemeine Elemente, die alle Unterelemente, z. B. den Hintergrund zeichnen und behandeln die <xref:System.Windows.Forms.ListView.DrawSubItem> Ereignis Elemente für einzelne Unterelemente, z. B. Textwerte gezeichnet werden soll. Sie können auch alle Elemente in zeichnen die <xref:System.Windows.Forms.ListView> steuern mit nur einer der beiden Ereignisse, obwohl dies umständlicher sein kann. Um Spaltenüberschriften in der Detailansicht zu zeichnen, müssen Sie behandeln die <xref:System.Windows.Forms.ListView.DrawColumnHeader> Ereignis.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.ListView.DrawSubItem> Ereignis tritt nicht auf für alle Unterelemente für die keine <xref:System.Windows.Forms.ColumnHeader> Objekt wurde hinzugefügt, um die <xref:System.Windows.Forms.ListView.Columns%2A> Auflistung. Beachten Sie auch, dass das erste Unterelement jedes <xref:System.Windows.Forms.ListViewItem> Objekt stellt das übergeordnete Element selbst dar und wird in der ersten Spalte angezeigt.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel stellt eine Implementierung von einem <xref:System.Windows.Forms.ListView.DrawSubItem> -Ereignishandler. Das vollständige Beispiel finden Sie unter der <xref:System.Windows.Forms.ListView.OwnerDraw%2A> Referenzthema.  
  
 [!code-csharp[ListViewOwnerDraw#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#4)]
 [!code-vb[ListViewOwnerDraw#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Nimmt das Zeichnen des Listenfeld-Steuerelements wieder auf, nachdem es durch die <see cref="M:System.Windows.Forms.ListView.BeginUpdate" />-Methode angehalten wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die bevorzugte Methode zum Hinzufügen mehrerer Elemente zu einer <xref:System.Windows.Forms.ListView> ist die Verwendung der <xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A> Methode der <xref:System.Windows.Forms.ListView.ListViewItemCollection> (erfolgt über die <xref:System.Windows.Forms.ListView.Items%2A> Eigenschaft der <xref:System.Windows.Forms.ListView>). Dadurch können Sie ein Array von Elementen der Liste in einem einzigen Vorgang hinzuzufügen. Allerdings, wenn Sie den hinzuzufügenden Elemente einzeln mithilfe der <xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A> Methode der <xref:System.Windows.Forms.ListView.ListViewItemCollection> -Klasse, die Sie verwenden die <xref:System.Windows.Forms.ListView.BeginUpdate%2A> Methode, um zu verhindern, dass das Steuerelement neu gezeichnet der <xref:System.Windows.Forms.ListView> jedes Mal ein Element hinzugefügt wird. Nach dem Sie den Vorgang des Hinzufügens von Elementen zum Steuerelement abgeschlossen haben, rufen Sie die <xref:System.Windows.Forms.ListView.EndUpdate%2A> Methode zum Aktivieren der <xref:System.Windows.Forms.ListView> zum erneuten Zeichnen verwendet. Diese Vorgehensweise beim Hinzufügen von Elementen kann Flackern zeichnen die <xref:System.Windows.Forms.ListView> Wenn eine große Anzahl von Elementen werden an das Steuerelement hinzugefügt wird.  
  
 Wenn <xref:System.Windows.Forms.ListView.BeginUpdate%2A> mehr als einmal aufgerufen wird <xref:System.Windows.Forms.ListView.EndUpdate%2A> muss eine entsprechende Anzahl, wie oft aufgerufen werden. Bis zum letzten Aufruf von <xref:System.Windows.Forms.ListView.EndUpdate%2A> der <xref:System.Windows.Forms.ListView> nicht neu gezeichnet wird. Außerdem mehrere Aufrufe <xref:System.Windows.Forms.ListView.BeginUpdate%2A> haben keine Auswirkungen.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Initialisieren einer <xref:System.Windows.Forms.ListView> Steuerelement Kontrollkästchen enthalten. Außerdem zeigt es die Verwendung der <xref:System.Windows.Forms.ListView.BeginUpdate%2A> und <xref:System.Windows.Forms.ListView.EndUpdate%2A> Methoden. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular mit einem <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1`. Rufen Sie die `InititalizeListView` Methode aus den Konstruktor des Formulars oder `Load` Methode.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.BeginUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EnsureVisible">
      <MemberSignature Language="C#" Value="public void EnsureVisible (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureVisible(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureVisible (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnsureVisible(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements, das durch einen Bildlauf sichtbar gemacht werden soll.</param>
        <summary>Gewährleistet, dass das angegebene Element im Steuerelement angezeigt wird und führt ggf. einen Bildlauf durch den Inhalt des Steuerelements durch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Methode verwenden, um sicherzustellen, dass ein bestimmtes Element innerhalb der <xref:System.Windows.Forms.ListView> Steuerelement. Bei der Validierung für die Elemente im ein <xref:System.Windows.Forms.ListView>, können Sie Aufrufen der <xref:System.Windows.Forms.ListView.EnsureVisible%2A> Methode, um sicherzustellen, dass ein Element, das Fehler bei der Überprüfung, in angezeigt wird der <xref:System.Windows.Forms.ListView> Steuerelement, damit den Benutzer Änderungen auf das Element ausführen können. Wenn das Element, das Sie sicherstellen möchten, sichtbar ist befindet sich über den sichtbaren Bereich des der <xref:System.Windows.Forms.ListView> steuern Aufrufen der <xref:System.Windows.Forms.ListView.EnsureVisible%2A> -Methode wird der Inhalt des Steuerelements einen Bildlauf durch, bis sie das erste Element im sichtbaren Bereich des Steuerelements ist. Wenn das Element unterhalb des sichtbaren Bereichs der der <xref:System.Windows.Forms.ListView> zu steuern, Aufrufen der <xref:System.Windows.Forms.ListView.EnsureVisible%2A> -Methode führt einen Bildlauf durch den Inhalt des der <xref:System.Windows.Forms.ListView> steuern, bis das Element das letzte Element im sichtbaren Bereich des Steuerelements.  
  
 Um festzustellen, ob ein Element am Anfang der Anzeigebereich des befindet eine <xref:System.Windows.Forms.ListView> steuern, verwenden Sie die <xref:System.Windows.Forms.ListView.TopItem%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.TopItem" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindItemWithText">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sucht das erste <see cref="T:System.Windows.Forms.ListViewItem" />, das mit dem angegebenen Textwert beginnt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der zu suchende Text.</param>
        <summary>Sucht das erste <see cref="T:System.Windows.Forms.ListViewItem" />, das mit dem angegebenen Textwert beginnt.</summary>
        <returns>Das erste <see cref="T:System.Windows.Forms.ListViewItem" />, das mit dem angegebenen Textwert beginnt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Groß- und Kleinschreibung wird bei der Suche nicht berücksichtigt.  
  
 Die `text` Parameter kann eine Teilzeichenfolge des gewünschten übereinstimmenden Texts angeben. Diese Methode wird außerdem das erste Element zurück, das mit dem angegebenen Text beginnt. Z. B. wenn ein <xref:System.Windows.Forms.ListView> enthält zwei Listenelemente – das erste Element Text "Winkel Bracket" und der Text des zweiten Elements auf "bracket" festgelegt – einen Aufruf von <xref:System.Windows.Forms.ListView.FindItemWithText%2A> übergeben `brack` wie der Parameter das Element zurück, dessen Text ist "bracket".  
  
 Die <xref:System.Windows.Forms.ListView.FindItemWithText%2A> -Methode zurückkehrt `null` , wenn die Liste leer ist oder kein übereinstimmendes Element vorhanden ist.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die <xref:System.Windows.Forms.ListView.FindItemWithText%2A> Methode. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in einem Windows Form, und rufen die `InitializeFindListView` Methode aus den Konstruktor des Formulars oder <xref:System.Windows.Forms.Form.Load> -Ereignishandler. Klicken Sie auf die Schaltfläche, um die Ergebnisse des Methodenaufrufs anzuzeigen.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">Der zu suchende Text.</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" />, wenn Unterelemente in der Suche enthalten sein sollen, andernfalls <see langword="false" />.</param>
        <param name="startIndex">Der Index des Elements, bei dem mit der Suche begonnen werden soll.</param>
        <summary>Sucht das erste <see cref="T:System.Windows.Forms.ListViewItem" /> oder, sofern angegeben, das erste <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, das mit dem angegebenen Textwert beginnt. Die Suche beginnt am angegebenen Index.</summary>
        <returns>Das erste <see cref="T:System.Windows.Forms.ListViewItem" />, das mit dem angegebenen Textwert beginnt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Groß- und Kleinschreibung wird bei der Suche nicht berücksichtigt.  
  
 Die `text` Parameter kann eine Teilzeichenfolge des gewünschten übereinstimmenden Texts angeben. Diese Methode wird außerdem das erste Element zurück, das mit dem angegebenen Text beginnt. Z. B. wenn ein <xref:System.Windows.Forms.ListView> enthält zwei Listenelemente – das erste Element Text "Winkel Bracket" und der Text des zweiten Elements auf "bracket" festgelegt – einen Aufruf von <xref:System.Windows.Forms.ListView.FindItemWithText%2A> übergeben "Brack" ist "bracket", wie der Parameter dem Element, dessen Text zurück.  
  
 Die <xref:System.Windows.Forms.ListView.FindItemWithText%2A> -Methode zurückkehrt `null` , wenn die Liste leer ist oder kein übereinstimmendes Element vorhanden ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> ist kleiner als 0 (null) oder größer als die Anzahl der Elemente in <see cref="T:System.Windows.Forms.ListView" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex, bool isPrefixSearch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer, isPrefixSearch As Boolean) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="isPrefixSearch" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">Der zu suchende Text.</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" />, wenn Unterelemente in der Suche enthalten sein sollen, andernfalls <see langword="false" />.</param>
        <param name="startIndex">Der Index des Elements, bei dem mit der Suche begonnen werden soll.</param>
        <param name="isPrefixSearch">
          <see langword="true" />, wenn Teilübereinstimmungen zulässig sind, andernfalls <see langword="false" />.</param>
        <summary>Sucht das erste <see cref="T:System.Windows.Forms.ListViewItem" /> oder, sofern angegeben, das erste <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, das mit dem angegebenen Textwert beginnt. Die Suche beginnt am angegebenen Index.</summary>
        <returns>Das erste <see cref="T:System.Windows.Forms.ListViewItem" />, das mit dem angegebenen Textwert beginnt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.FindItemWithText%2A> -Methode zurückkehrt `null` , wenn die Liste leer ist oder kein übereinstimmendes Element vorhanden ist.  
  
 Die Groß- und Kleinschreibung wird bei der Suche nicht berücksichtigt.  
  
 Die `text` Parameter kann eine Teilzeichenfolge des gewünschten übereinstimmenden Texts angeben. Diese Methode gibt das erste Element, das mit dem angegebenen Text beginnt zurück, es sei denn, `false` für übergeben `isPrefixSearch`. Z. B. wenn ein <xref:System.Windows.Forms.ListView> enthält zwei Listenelemente – das erste Element Text "Winkel Bracket" und der Text des zweiten Elements auf "bracket" festgelegt – einen Aufruf von <xref:System.Windows.Forms.ListView.FindItemWithText%2A> übergeben "Brack" ist "bracket", wie der Suchtext ein, dessen Text des Elements zurück. Wenn `isPrefixSearch` festgelegt ist, um `false`, dieser Aufruf wird zurückgegeben, `null`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> ist kleiner als 0 (null) oder größer als die Anzahl der Elemente in der <see cref="T:System.Windows.Forms.ListView" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindNearestItem">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sucht von einem angegebenen Punkt aus in der angegebenen Richtung nach dem nächsten Element.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint dir, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint dir, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint dir, System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="dir">Einer der <see cref="T:System.Windows.Forms.SearchDirectionHint" />-Werte.</param>
        <param name="point">Der Punkt, an dem die Suche beginnen soll.</param>
        <summary>Sucht vom angegebenen Punkt aus in der angegebenen Richtung nach dem nächsten Element.</summary>
        <returns>Das <see cref="T:System.Windows.Forms.ListViewItem" />, das dem angegebenen Punkt in der angegebenen Richtung am nächsten ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.FindNearestItem%2A> -Methode zurückkehrt `null` Wenn in der angegebenen Richtung kein Element gefunden wird. Das nächste Element identifizieren können, hängt davon ab, das Betriebssystem, die die Anwendung ausgeführt wird und wirkt sich die Ergebnisse der <xref:System.Windows.Forms.ListView.FindNearestItem%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> ist auf einen anderen Wert als <see cref="F:System.Windows.Forms.View.SmallIcon" /> oder <see cref="F:System.Windows.Forms.View.LargeIcon" /> festgelegt.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint searchDirection, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint searchDirection, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindNearestItem (searchDirection As SearchDirectionHint, x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint searchDirection, int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchDirection" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="searchDirection">Einer der <see cref="T:System.Windows.Forms.SearchDirectionHint" />-Werte.</param>
        <param name="x">Die x-Koordinate für den Punkt, an dem die Suche beginnen soll.</param>
        <param name="y">Die y-Koordinate für den Punkt, an dem die Suche beginnen soll.</param>
        <summary>Sucht von den angegebenen x- und y-Koordinaten ausgehend in der angegebenen Richtung nach dem nächsten Element.</summary>
        <returns>Das <see cref="T:System.Windows.Forms.ListViewItem" />, das den angegebenen Koordinaten in der angegebenen Richtung am nächsten ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.FindNearestItem%2A> -Methode zurückkehrt `null` Wenn in der angegebenen Richtung kein Element gefunden wird. Das nächste Element identifizieren können, hängt davon ab, das Betriebssystem, die die Anwendung ausgeführt wird und wirkt sich die Ergebnisse der <xref:System.Windows.Forms.ListView.FindNearestItem%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> ist auf einen anderen Wert als <see cref="F:System.Windows.Forms.View.SmallIcon" /> oder <see cref="F:System.Windows.Forms.View.LargeIcon" /> festgelegt.</exception>
      </Docs>
    </Member>
    <Member MemberName="FocusedItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FocusedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem FocusedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FocusedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusedItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ FocusedItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Element im Steuerelement ab, das gegenwärtig den Fokus besitzt, oder legt dieses fest.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.ListViewItem" />, das das Element mit dem Fokus darstellt, oder <see langword="null" />, wenn kein Element in der <see cref="T:System.Windows.Forms.ListView" /> den Fokus besitzt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.FocusedItem%2A> -Eigenschaft gibt die <xref:System.Windows.Forms.ListViewItem> , die das Element, das aktuell angezeigt Fokusrechtecks für darstellt der <xref:System.Windows.Forms.ListView> Steuerelement. Da eine <xref:System.Windows.Forms.ListView> Steuerelement hat keine direkt bearbeitet werden Bereiche als die Elemente angezeigt, wenn die <xref:System.Windows.Forms.ListView> Steuerelement den Fokus hat, ein Element innerhalb der <xref:System.Windows.Forms.ListView> zeigt das Fokusrechteck um die Elementtext. In der Regel das zuletzt ausgewählte Element in der <xref:System.Windows.Forms.ListView> Steuerelement ist das Element den Fokus besitzt. Obwohl ein Element das Fokusrechteck anzeigen diejenige sein kann, nicht tatsächlich möglicherweise ein ausgewähltes Element in der <xref:System.Windows.Forms.ListView>. Verwenden der <xref:System.Windows.Forms.ListView.SelectedItems%2A> oder <xref:System.Windows.Forms.ListView.SelectedIndices%2A> Eigenschaften zum Abrufen der ausgewählten Elemente in der <xref:System.Windows.Forms.ListView> -Steuerelement, das <xref:System.Windows.Forms.ListView.FocusedItem%2A> Eigenschaft ist nicht unbedingt aktiviert. Können Sie die <xref:System.Windows.Forms.ListView.FocusedItem%2A> -Eigenschaft können Sie bestimmen, welches Element entsprechend seiner letzten geklickt haben, der <xref:System.Windows.Forms.ListView> Steuerelements, unabhängig von der Auswahlzustand.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Vordergrundfarbe ab oder legt sie fest.</summary>
        <value>Die <see cref="T:System.Drawing.Color" />, die die Vordergrundfarbe darstellt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullRowSelect">
      <MemberSignature Language="C#" Value="public bool FullRowSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullRowSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FullRowSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property FullRowSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FullRowSelect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob beim Klicken auf ein Element alle seine Unterelemente ausgewählt werden, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn beim Klicken auf ein Element das Element und alle seine Unterelemente ausgewählt werden, <see langword="false" />, wenn beim Klicken auf ein Element nur das Element selbst ausgewählt wird. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.FullRowSelect%2A> Eigenschaft hat keine Auswirkungen, es sei denn, der <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft von der <xref:System.Windows.Forms.ListView> Steuerelement festgelegt ist, um <xref:System.Windows.Forms.View.Details>. Die <xref:System.Windows.Forms.ListView.FullRowSelect%2A> Eigenschaft wird normalerweise verwendet, wenn eine <xref:System.Windows.Forms.ListView> Zeigt Elemente mit vielen Unterelemente und es ist wichtig, in der Lage, die ausgewählten Elemente angezeigt, wenn es sich bei der Elementtext nicht aufgrund von horizontalen Bildlauf bei der der Inhalt des Steuerelements angezeigt wird.  
  
> [!NOTE]
>  Wenn <xref:System.Windows.Forms.ListView.FullRowSelect%2A> festgelegt ist, um `true`, QuickInfos für eine <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> nicht angezeigt werden; nur die QuickInfo für das übergeordnete Element <xref:System.Windows.Forms.ListViewItem> wird angezeigt.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="F:System.Windows.Forms.View.Details" />
      </Docs>
    </Member>
    <Member MemberName="GetItemAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem GetItemAt (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem GetItemAt(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemAt (x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ GetItemAt(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Die x-Koordinate der Position für die Suche nach einem Element (ausgedrückt in Clientkoordinaten).</param>
        <param name="y">Die y-Koordinate der Position für die Suche nach einem Element (ausgedrückt in Clientkoordinaten).</param>
        <summary>Ruft das Element an der angegebenen Position ab.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.ListViewItem" />, das das Element an der angegebenen Position darstellt. Wenn sich an der angegebenen Position kein Element befindet, gibt die Methode <see langword="null" /> zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.GetItemAt%2A> Methode können Sie ermitteln, welches Element an einer bestimmten Position in der Clientbereich befindet der <xref:System.Windows.Forms.ListView> Steuerelement. Sie können diese Methode verwenden, wenn der Benutzer klickt oder ein Unterelement klickt (wenn der <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf `View.Details`) und Sie möchten, um zu bestimmen, welches Element besitzt das Unterelement ab, auf die geklickt wurde, basierend auf der Mauskoordinaten zum Zeitpunkt die Maus geklickt .  
  
> [!NOTE]
>  Wenn die <xref:System.Windows.Forms.ListView.FullRowSelect%2A> Eigenschaftswert ist `false`, nur, wenn der angegebene Speicherort innerhalb der Grenzen des übergeordneten Elements ist (die in der ersten Spalte angezeigt wird, wenn das Steuerelement im Detailbereich ausgeführt wird), gibt diese Methode ein Element zurück. Sie müssen festlegen, die <xref:System.Windows.Forms.ListView.FullRowSelect%2A> Eigenschaft, um `true` zum Abrufen eines Elements mit dieser Methode erhält einen Speicherort innerhalb der Grenzen eines Unterelements. Sie können auch die <xref:System.Windows.Forms.ListView.HitTest%2A> Methode, um detaillierte Informationen über das Element an einer bestimmten Position abrufen.  
  
 Dazu Drag-and-Drop Neupositionieren von Elementen innerhalb einer <xref:System.Windows.Forms.ListView>, möglicherweise möchten Sie verwenden die <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType> Methode statt über das <xref:System.Windows.Forms.ListView.GetItemAt%2A> Methode. Die <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType> Methode sucht das nächste Element unabhängig davon, wo sich der Mauszeiger befindet. Die <xref:System.Windows.Forms.ListView.GetItemAt%2A> , andererseits, Methodenrückgabe `null` , wenn kein Element am angegebenen Speicherort vorhanden ist.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.ListViewInsertionMark> Klasse wird nur unter Windows XP und Windows Server 2003 unterstützt, wenn die Anwendung ruft die <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Windows.Forms.PictureBox> und <xref:System.Windows.Forms.ListView> Steuerelemente. Die <xref:System.Windows.Forms.PictureBox> wird initialisiert, indem die <xref:System.Windows.Forms.PictureBox.BorderStyle%2A?displayProperty=nameWithType> und <xref:System.Windows.Forms.PictureBox.SizeMode%2A?displayProperty=nameWithType> Eigenschaften mithilfe der <xref:System.Windows.Forms.BorderStyle> und <xref:System.Windows.Forms.PictureBoxSizeMode> Enumerationen, bzw. Die <xref:System.Windows.Forms.ListView> wird mit Bildern aus dem Verzeichnis "Samples" aufgefüllt. Die <xref:System.Windows.Forms.ListView.GetItemAt%2A> -Methode verwendet wird, bei der Verarbeitung von der <xref:System.Windows.Forms.ListView> des Steuerelements <xref:System.Windows.Forms.Control.MouseDown> Ereignis, um zu bestimmen, ob ein Element ausgewählt ist. Wenn ein Element ausgewählt ist, zeigt der Ereignishandler die ausgewählte Datei durch Festlegen der <xref:System.Windows.Forms.PictureBox.Image%2A?displayProperty=nameWithType> Eigenschaft. Im Beispiel erfordert das Vorhandensein des JPG-Dateien im Verzeichnis C:\documents and Einstellungen\All Benutzer\Dokumente\Eigene Bilder\beispielbilder. Um dieses Beispiel auszuführen, fügen Sie den Code in ein Formular, und rufen die `InitializePictureBox` und `PopulateListView` Methoden in den Konstruktor des Formulars oder `Load` Methode. Stellen Sie sicher, dass alle Ereignisse den Ereignishandler zugeordnet sind.  
  
 [!code-cpp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetItemRect">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft das umschließende Rechteck für ein Element im Steuerelement ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements in der <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />, dessen umschließendes Rechteck zurückgegeben werden soll.</param>
        <summary>Ruft das umschließende Rechteck für ein bestimmtes Element im Listenansicht-Steuerelement ab.</summary>
        <returns>Ein <see cref="T:System.Drawing.Rectangle" />, das das umschließende Rechteck des angegebenen <see cref="T:System.Windows.Forms.ListViewItem" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das umschließende Rechteck zurückgegeben, die von dieser Version der <xref:System.Windows.Forms.ListView.GetItemRect%2A> Methode darstellt, das gesamte Element einschließlich Symbol, Elementtext und Unterelementtext. Um ein bestimmten Teil des Elements Begrenzungsrechteck anzugeben, verwenden Sie die andere Version der der <xref:System.Windows.Forms.ListView.GetItemRect%2A> Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index, System.Windows.Forms.ItemBoundsPortion portion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index, valuetype System.Windows.Forms.ItemBoundsPortion portion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32,System.Windows.Forms.ItemBoundsPortion)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer, portion As ItemBoundsPortion) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index, System::Windows::Forms::ItemBoundsPortion portion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="portion" Type="System.Windows.Forms.ItemBoundsPortion" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements in der <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />, dessen umschließendes Rechteck zurückgegeben werden soll.</param>
        <param name="portion">Einer der <see cref="T:System.Windows.Forms.ItemBoundsPortion" />-Werte, der den Teil des <see cref="T:System.Windows.Forms.ListViewItem" /> darstellt, für den das umschließende Rechteck abgerufen werden soll.</param>
        <summary>Ruft den angegebenen Teil des umschließenden Rechtecks für ein bestimmtes Element im Listenansicht-Steuerelement ab.</summary>
        <returns>Ein <see cref="T:System.Drawing.Rectangle" />, das das umschließende Rechteck für den angegebenen Teil des angegebenen <see cref="T:System.Windows.Forms.ListViewItem" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das umschließende Rechteck zurückgegeben, die von dieser Version von den <xref:System.Windows.Forms.ListView.GetItemRect%2A> Methode darstellt, nur den Abschnitt des angegebenen Elements der `portion` Parameter. Um das umschließende Rechteck des gesamten Elements zurückzugeben, verwenden Sie die andere Version von den <xref:System.Windows.Forms.ListView.GetItemRect%2A> Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ItemBoundsPortion" />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public bool GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.GridLines" />
      <MemberSignature Language="VB.NET" Value="Public Property GridLines As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GridLines { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Datenblattlinien zwischen den Zeilen und Spalten mit den Elementen und Unterelementen im Steuerelement angezeigt werden, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn Datenblattlinien zwischen Elementen und Unterelementen gezeichnet werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.GridLines%2A> Eigenschaft hat keine Auswirkungen, es sei denn, der <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft von der <xref:System.Windows.Forms.ListView> Steuerelement festgelegt ist, um <xref:System.Windows.Forms.View.Details>. Die <xref:System.Windows.Forms.ListView.GridLines%2A> -Eigenschaft können Sie die anzuzeigenden Zeilen ein, um zu identifizieren, die Zeilen und Spalten, die in angezeigt werden die <xref:System.Windows.Forms.ListView> steuern, wenn sie Elemente und deren Unterelemente angezeigt. Rasterlinien, die angezeigt werden bieten nicht die Möglichkeit, Zeilen und Spalten als eine Anwendung zu ändern, wie z. B. Microsoft Excel angegeben. Nur Spalten kann geändert werden, wenn die Spaltenheader angezeigt werden, indem Sie den Mauszeiger auf die rechte Seite der Spalte, die Größe und auf, und Sie ziehen, bis die Spalte die gewünschte beträgt. Die Raster Linien-Funktion wird verwendet, um den Benutzer des Steuerelements sichtbar Grenzen zwischen Elementen und Unterelementen bereitzustellen.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewGroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewGroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Groups" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Groups As ListViewGroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewGroupCollection ^ Groups { System::Windows::Forms::ListViewGroupCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewGroupCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewGroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung von <see cref="T:System.Windows.Forms.ListViewGroup" />-Objekten ab, die dem Steuerelement zugeordnet sind.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListViewGroupCollection" />, die alle Gruppen im <see cref="T:System.Windows.Forms.ListView" />-Steuerelement enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView> gruppenfunktion ermöglicht die Erstellung visuelle Gruppen logisch zusammengehörigen <xref:System.Windows.Forms.ListView> Elemente. Jede Gruppe besteht aus einem TextHeader, gefolgt von einer horizontalen Linie und die Elemente, die zu dieser Gruppe zugewiesen. Sie können den Headertext linksbündig, rechtsbündig oder zentriert des Steuerelements ausgerichtet. Alle Gruppen zugewiesen eine <xref:System.Windows.Forms.ListView> Steuerelement angezeigt werden, wenn die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft wird auf einen Wert festgelegt, außer <xref:System.Windows.Forms.View.List?displayProperty=nameWithType>.  
  
 <xref:System.Windows.Forms.ListView> Gruppen können Ihre Benutzer die Elemente zu suchen, die sie suchen durch die Elemente in hilfreichen Kategorien unterteilen. Sie können die Kategorien erstellen, Sie müssen. Ein typischer Ansatz werden die Elemente gruppiert werden basierend auf der Art, die die Liste sortiert wird. Beispielsweise können Sie die Elemente nach dem ersten Buchstaben des Elementnamens gruppieren, wenn die Liste alphabetisch oder nach Unterelemente z. B. Datentyp oder wenn die Liste sortiert wird, indem Sie auf eine Spaltenüberschrift in der Detailansicht Datum sortiert wird. Windows-Explorer verwendet diese Art der Gruppierung an.  
  
 Für die Verwendung die Grouping-Funktion hinzufügen, eine oder mehrere <xref:System.Windows.Forms.ListViewGroup> -Objekte und die <xref:System.Windows.Forms.ListView.Groups%2A> Auflistung von einem <xref:System.Windows.Forms.ListView> Steuerelement. Legen Sie den Text und die Ausrichtung die <xref:System.Windows.Forms.ListViewGroup.%23ctor%2A> Konstruktor, oder setzen Sie sie mithilfe der <xref:System.Windows.Forms.ListViewGroup.Header%2A?displayProperty=nameWithType> und <xref:System.Windows.Forms.ListViewGroup.HeaderAlignment%2A?displayProperty=nameWithType> Eigenschaften.  
  
 Um die gruppenfunktion vorübergehend zu deaktivieren, legen die <xref:System.Windows.Forms.ListView.ShowGroups%2A> Eigenschaft `false`.  
  
 Zuweisen ein Elements zu einer Gruppe durch Angeben der Gruppe in der <xref:System.Windows.Forms.ListViewItem.%23ctor%2A> Konstruktor durch Festlegen der <xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType> -Eigenschaft, oder indem Sie direkt dem Element aus, um die <xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType> Auflistung von einer Gruppe. Alle Elemente sollten Gruppen zugewiesen werden, bevor sie angezeigt werden. Alle Elemente, die nicht zu einer Gruppe zugewiesen sind erscheint in der Standardgruppe, besitzt die Header-Bezeichnung "DefaultGroup{0}". Die Standardgruppe ist nicht Bestandteil der <xref:System.Windows.Forms.ListView.Groups%2A> -Auflistung, und kann nicht geändert werden. Es ist in erster Linie erleichtert das Debuggen, um sicherzustellen, dass alle Elemente ordnungsgemäß Gruppen hinzugefügt wurden.  
  
 Ein Element kann jeweils nur in einer Gruppe sein. Sie können ändern, dass die Gruppe, zu dem ein Element, indem Sie festlegen gehört, der <xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType> Eigenschaft zur Laufzeit oder indem sie zum Hinzufügen der <xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType> Sammlung einer anderen Gruppe automatisch aus der vorherigen Gruppe entfernt.  
  
 Das Einfügemarkenfeature ist deaktiviert, bei Verwendung von Gruppen. Dies ist, da die gruppenfunktion Elemente durch Gruppenmitgliedschaft, sortiert während das Einfügemarkenfeature verwendet wird, mit Neupositionieren von Drag & Drop in eine <xref:System.Windows.Forms.ListView> Steuerelement, das noch nicht seine Elemente sortieren.  
  
 <xref:System.Windows.Forms.ListView> Gruppen sind nur unter Windows XP und Windows Server 2003 verfügbar, wenn die Anwendung aufruft die <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> Methode. Unter älteren Betriebssystemen Code in Zusammenhang mit Gruppen hat keine Auswirkungen, und die Gruppen werden nicht angezeigt. Jeglicher Code, der die Grouping-Funktion abhängt kann daher nicht ordnungsgemäß funktioniert.  
  
 Sie können z. B. Code enthalten, die bestimmt, ob die Grouping-Funktion verfügbar ist, zu eine andere Funktionalität bereitstellen, wenn sie nicht verfügbar ist. Sie möchten z. B. Geben Sie alternative Sortierung, wenn die Ausführung unter Betriebssystemen, die Sortierung nach Gruppen nicht unterstützen.  
  
 Die Grouping-Funktion wird von der gleichen Bibliothek bereitgestellt, die das Feature des Betriebssystems Designs bereitstellt. Aufrufen, um die Verfügbarkeit dieser Bibliothek zu überprüfen, die <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> -methodenüberladung, und übergeben Sie die <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> Wert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListView> gruppenfunktion, Elemente nach Unterelementwert in der Detailansicht zu organisieren. Diese Form der Gruppierung ähnelt der Gruppierung in Windows-Explorer verwendet. Im Beispiel werden die Gruppen dynamisch erstellt. Für jede Unterelementspalte ist eine Gruppe für jeden eindeutigen Unterelementwert erstellt. Für das übergeordnete Element-Spalte wird eine Gruppe für jeden eindeutigen Anfangsbuchstaben erstellt. Durch das Klicken auf eine Spalte sortiert die Elemente in den Gruppen, die für diese Spalte erstellt. Beim erneuten Klicken auf die gleiche Spaltenüberschrift kehrt die Reihenfolge der Gruppen.  
  
 [!code-cpp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CPP/listviewgroupsexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CS/listviewgroupsexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/VB/listviewgroupsexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.ShowGroups" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ColumnHeaderStyle HeaderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ColumnHeaderStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HeaderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderStyle As ColumnHeaderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ColumnHeaderStyle HeaderStyle { System::Windows::Forms::ColumnHeaderStyle get(); void set(System::Windows::Forms::ColumnHeaderStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnHeaderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Spaltenkopfstil ab oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.ColumnHeaderStyle" />-Werte. Der Standardwert ist <see cref="F:System.Windows.Forms.ColumnHeaderStyle.Clickable" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.HeaderStyle%2A> -Eigenschaft können Sie angeben, welche Spaltenüberschriften angezeigt wird, wenn die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft der <xref:System.Windows.Forms.ListView> Steuerelement auf festgelegt ist <xref:System.Windows.Forms.View.Details> und die <xref:System.Windows.Forms.ListView> -Steuerelement <xref:System.Windows.Forms.ColumnHeader> Objekte, die in der angegeben<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>. <xref:System.Windows.Forms.ColumnHeader> -Objekte definieren die Spalten, die in angezeigt werden die <xref:System.Windows.Forms.ListView> Steuerelement. Jede Spalte dient zum Anzeigen von Unterelementinformationen für jedes Element in der <xref:System.Windows.Forms.ListView>.  
  
 Die <xref:System.Windows.Forms.ListView.HeaderStyle%2A> -Eigenschaft können Sie angeben, ob die Spaltenköpfe sichtbar sind, oder wenn sie sichtbar sind, gibt an, ob sie als Schaltflächen geklickt werden kann funktioniert. Wenn die <xref:System.Windows.Forms.ListView.HeaderStyle%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.ColumnHeaderStyle.None?displayProperty=nameWithType>, Spaltenüberschriften werden nicht angezeigt, obwohl die Elemente und Unterelemente von der <xref:System.Windows.Forms.ListView> Steuerelement sind weiterhin in Spalten angeordnet. Wenn die <xref:System.Windows.Forms.ListView.HeaderStyle%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.ColumnHeaderStyle.Clickable?displayProperty=nameWithType>, Spaltenheader verhält Sie sich wie Schaltflächen, die Benutzer klicken können, um eine Aktion, z. B. Sortieren der Elemente in der <xref:System.Windows.Forms.ListView> steuern, verwenden die Elemente in der Spalte, auf die geklickt wurde als Schlüssel. Sie können dieses Verhalten implementieren, in einen Handler für das <xref:System.Windows.Forms.ListView.ColumnClick> Ereignis. Wenn die <xref:System.Windows.Forms.ListView.HeaderStyle%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.ColumnHeaderStyle.Nonclickable?displayProperty=nameWithType>, die Spaltenüberschriften angezeigt, jedoch kann nicht geklickt werden kann.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht eine <xref:System.Windows.Forms.ListView> , die mehrere Elemente ausgewählt werden können. Das Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.ListView.HideSelection%2A> und <xref:System.Windows.Forms.ListView.HeaderStyle%2A> Eigenschaften. Außerdem zeigt es die <xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType> und <xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType> Eigenschaften. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular, enthält ein <xref:System.Windows.Forms.ListView> Objekt mit dem Namen `ListView1` und ein <xref:System.Windows.Forms.TextBox> mit dem Namen `TextBox1`. Rufen Sie die `InitializeListView` Methode aus den Konstruktor des Formulars oder <xref:System.Windows.Forms.Form.Load> -Ereignishandler.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der angegebene Wert ist keiner der <see cref="T:System.Windows.Forms.ColumnHeaderStyle" />-Werte.</exception>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnHeaderStyle" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="HideSelection">
      <MemberSignature Language="C#" Value="public bool HideSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HideSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HideSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HideSelection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das ausgewählte Element im Steuerelement hervorgehoben bleibt, wenn das Steuerelement den Fokus verloren hat, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn das Steuerelement den Fokus nicht mehr besitzt und das ausgewählte Element nicht mehr hervorgehoben ist, <see langword="false" />, wenn das Steuerelement den Fokus nicht mehr besitzt und das ausgewählte Element weiterhin hervorgehoben ist. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft auf festgelegt ist `false`, ausgewählte Elemente in der <xref:System.Windows.Forms.ListView> Steuerelement bleibt hervorgehoben, in einer anderen Farbe als die aktuelle Auswahl durch das Betriebssystem angegeben, wenn der <xref:System.Windows.Forms.ListView> Steuerelement den Fokus verliert. Diese Eigenschaft können Sie Elemente beibehalten, die ausgewählt werden, indem der Benutzer sichtbar, wenn der Benutzer klickt auf ein anderes Steuerelement im Formular oder auf ein anderes Fenster verschiebt.  
  
> [!NOTE]
>  Wenn Sie mit der Zugriff auf Ihre Anwendungen Bedenken haben, wird empfohlen, Sie festzulegen, die <xref:System.Windows.Forms.ListView.HideSelection%2A> Eigenschaft `false`.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht eine <xref:System.Windows.Forms.ListView> , die mehrere Elemente ausgewählt werden können. Das Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.ListView.HideSelection%2A> und <xref:System.Windows.Forms.ListView.HeaderStyle%2A> Eigenschaften. Außerdem zeigt es die <xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType>, und <xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType> Eigenschaften. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular, enthält ein <xref:System.Windows.Forms.ListView> Objekt mit dem Namen `ListView1` und ein <xref:System.Windows.Forms.TextBox> mit dem Namen `TextBox1`. Rufen Sie die `InitializeListView` Methode aus den Konstruktor des Formulars oder <xref:System.Windows.Forms.Form.Load> -Ereignishandler.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTest">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stellt Elementinformationen bereit, wenn eine x- und eine y-Koordinate angegeben sind.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Der <see cref="T:System.Drawing.Point" />, an dem die Elementinformationen abgerufen werden sollen. Die Koordinaten sind relativ zur linken oberen Ecke des Steuerelements.</param>
        <summary>Stellt Elementinformationen bereit, wenn ein Punkt angegeben ist.</summary>
        <returns>Elementinformationen, wenn ein Punkt angegeben ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um zu bestimmen, ob ein Punkt innerhalb eines Elements oder Unterelements befindet und, in dem in das Element der Punkt, z. B. auf den Bezeichnung "oder" Image "befindet. Die Koordinaten befinden sich außerhalb des Steuerelements, das zurückgegebene <xref:System.Windows.Forms.ListViewHitTestInfo> Objekt verfügt über eine <xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A> Eigenschaft von "None"; und die <xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A> und <xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A> Eigenschaften werden festgelegt, um `null`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Punkt enthält Koordinaten, die kleiner als 0 (null) sind.</exception>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function HitTest (x As Integer, y As Integer) As ListViewHitTestInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Die x-Koordinate, an der die Elementinformationen abgerufen werden sollen. Die Koordinate ist relativ zur linken oberen Ecke des Steuerelements.</param>
        <param name="y">Die y-Koordinate, an der die Elementinformationen abgerufen werden sollen. Die Koordinate ist relativ zur linken oberen Ecke des Steuerelements.</param>
        <summary>Stellt Elementinformationen bereit, wenn x- und y-Koordinaten angegeben sind.</summary>
        <returns>Elementinformationen, wenn x- und y-Koordinaten angegeben sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um zu bestimmen, ob ein Punkt innerhalb eines Elements oder Unterelements befindet und, in dem in das Element der Punkt, z. B. auf den Bezeichnung "oder" Image "befindet. Die Koordinaten befinden sich außerhalb des Steuerelements, das zurückgegebene <xref:System.Windows.Forms.ListViewHitTestInfo> Objekt verfügt über eine <xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A> Eigenschaft von "None"; und die <xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A> und <xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A> Eigenschaften werden festgelegt, um `null`.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.ListView.HitTest%2A> Methode, um zu bestimmen, den Speicherort eines Mausereignisses in einer <xref:System.Windows.Forms.ListView>. Um dieses Beispiel auszuführen, fügen Sie ihn in ein Windows-Formular, enthält ein <xref:System.Windows.Forms.ListView> mit dem Namen `listView1` , die mit Elementen gefüllt ist. Ordnen Sie die <xref:System.Windows.Forms.Control.MouseDown> -Ereignis für `listView1` mit der `listView1_MouseDown` Methode in diesem Beispiel.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die x- oder y-Koordinate ist kleiner als 0 (null).</exception>
      </Docs>
    </Member>
    <Member MemberName="HotTracking">
      <MemberSignature Language="C#" Value="public bool HotTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HotTracking" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HotTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property HotTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HotTracking { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Text eines Elements oder Unterelements als Link dargestellt wird, wenn der Mauszeiger darüber bewegt wird.</summary>
        <value>
          <see langword="true" />, wenn der Elementtext als Link dargestellt wird, wenn der Mauszeiger darüber bewegt wird, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hot Track für Willcause Aktivieren der <xref:System.Windows.Forms.ListView.Activation%2A> Eigenschaft festgelegt werden, um <xref:System.Windows.Forms.ItemActivation.OneClick> und die <xref:System.Windows.Forms.ListView.HoverSelection%2A> Eigenschaft festgelegt werden, um `true`. Darüber hinaus wird zur Laufzeit Bezeichnung Bearbeiten nicht zulässig, wenn hot Track aktiviert ist.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht eine <xref:System.Windows.Forms.ListView> mit hot Track aktiviert. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in einem Windows Form, und rufen die `InitializeHotTrackingListView` Methode aus den Konstruktor des Formulars oder <xref:System.Windows.Forms.Form.Load> -Ereignishandler.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HoverSelection">
      <MemberSignature Language="C#" Value="public bool HoverSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HoverSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HoverSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HoverSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HoverSelection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein Element automatisch ausgewählt wird, wenn der Mauszeiger einige Sekunden auf dem betreffenden Element ruht, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn beim Zeigen mit dem Mauszeiger auf ein bestimmtes Element dieses automatisch ausgewählt wird, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft festgelegt wird, um `true`, der Benutzer kann zeigen Sie auf ein Element in der <xref:System.Windows.Forms.ListView> Steuerelement, um das Element auszuwählen. Mehrere Elemente ausgewählt werden können (wenn die <xref:System.Windows.Forms.ListView.MultiSelect%2A> Eigenschaft festgelegt ist auf "true") von gedrückter STRG-Taste auf jedes Element verweist. Sie können diese Funktion eine einfachere Methode für den Benutzer der Anwendung zum Auswählen von Elementen im Bereitstellen der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertionMark">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewInsertionMark InsertionMark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewInsertionMark InsertionMark" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.InsertionMark" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertionMark As ListViewInsertionMark" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewInsertionMark ^ InsertionMark { System::Windows::Forms::ListViewInsertionMark ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewInsertionMark</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt zum Anzeigen der erwarteten Position für das Ablegen ab, wenn ein Element innerhalb eines <see cref="T:System.Windows.Forms.ListView" />-Steuerelements gezogen wird.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.ListViewInsertionMark" />-Objekt, das die Einfügemarke darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView> Einfügemarkenfeature können Sie die erwartete Dateiablage-Speicherort in einem Drag & Drop-Vorgang grafisch angeben, wenn ein Element an eine neue Position gezogen wird. Dieses Feature funktioniert nur, wenn die <xref:System.Windows.Forms.ListView.AutoArrange%2A> -Eigenschaftensatz auf `true` und wann die <xref:System.Windows.Forms.ListView> Steuerelement werden nicht sortiert die Elemente automatisch. Um zu verhindern, dass automatische Sortierung, die <xref:System.Windows.Forms.ListView.Sorting%2A> Eigenschaft muss festgelegt werden, um <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> und <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft muss festgelegt werden, um <xref:System.Windows.Forms.View.LargeIcon?displayProperty=nameWithType>, <xref:System.Windows.Forms.View.SmallIcon?displayProperty=nameWithType>, oder <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>. Darüber hinaus das Einfügemarkenfeature möglicherweise nicht sichtbar, mit der <xref:System.Windows.Forms.ListView> Funktion gruppieren, da die Grouping-Funktion die Elemente durch Gruppenmitgliedschaft sortiert.  
  
 Die <xref:System.Windows.Forms.ListViewInsertionMark> Klasse dient in der Regel in einem Ereignishandler für das <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> oder <xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType> Ereignis, um die Position der Einfügemarke aktualisieren ein Elements gezogen wird. Darüber hinaus wird in einem Ereignishandler für das <xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType> oder <xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType> Ereignis, um ein gezogenes Element an der richtigen Position eingefügt. Weitere Informationen finden Sie unter <xref:System.Windows.Forms.ListViewInsertionMark> und [Vorgehensweise: Anzeigen einer Einfügemarke in einem ListView-Steuerelement in Windows Forms](~/docs/framework/winforms/controls/how-to-display-an-insertion-mark-in-a-windows-forms-listview-control.md).  
  
> [!NOTE]
>  Das Einfügemarkenfeature steht nur unter Windows XP und Windows Server 2003 werden, wenn die Anwendung aufruft die <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> Methode. Unter früheren Betriebssystemen hat Code in Zusammenhang mit der Einfügemarke keine Auswirkungen, und die Einfügemarke wird daher nicht angezeigt. Daher kann die jeglicher Code, der das Einfügemarkenfeature hängt nicht ordnungsgemäß. Sie können z. B. Code enthalten, der bestimmt, ob diese Funktion verfügbar ist, zu eine andere Funktionalität bereitstellen, wenn sie nicht verfügbar ist. Sie möchten beispielsweise der gesamte Code zu umgehen, der bei Ausführung unter Betriebssystemen, die keine Einfügemarken unterstützen Neupositionieren Drag-and-Drop-Element implementiert.  
>   
>  Das Einfügemarkenfeature wird von der gleichen Bibliothek bereitgestellt, die das Feature des Betriebssystems Designs bereitstellt. Aufrufen, um die Verfügbarkeit dieser Bibliothek zu überprüfen, die <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> -methodenüberladung, und übergeben Sie die <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> Wert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListView> Einfügemarkenfeature. In diesem Beispiel implementiert die Drag-and-Drop Neuordnung mithilfe der standardmäßigen Ziehereignisse. Die Position der Einfügemarke wird aktualisiert, in einen Handler für das <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> Ereignis. In diesem Handler die Position des Mauszeigers im Vergleich zu den Mittelpunkt des nächsten Elements, und das Ergebnis wird verwendet, um zu bestimmen, ob die Einfügemarke nach links oder rechts neben dem Element angezeigt wird.  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Einer der <see cref="T:System.Windows.Forms.Keys" />-Werte.</param>
        <summary>Bestimmt, ob es sich bei der angegebenen Taste um eine normale Eingabetaste handelt oder um eine Sondertaste, für die eine Vorverarbeitung erforderlich ist.</summary>
        <returns>
          <see langword="true" />, wenn die angegebene Taste eine normale Taste ist, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemActivate">
      <MemberSignature Language="C#" Value="public event EventHandler ItemActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ItemActivate" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemActivate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemActivate As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ItemActivate;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Element aktiviert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.ItemActivate> Ereignis tritt auf, wenn der Benutzer ein oder mehrere Elemente in aktiviert die <xref:System.Windows.Forms.ListView> Steuerelement. Der Benutzer kann ein Element mit einem einfaches Klicken oder doppelklicken Sie darauf, abhängig vom Wert aktivieren die <xref:System.Windows.Forms.ListView.Activation%2A> Eigenschaft oder der Tastatur. Von innerhalb des ereignishandlers für die <xref:System.Windows.Forms.ListView.ItemActivate> -Ereignis, die Sie verweisen die <xref:System.Windows.Forms.ListView.SelectedItems%2A> oder <xref:System.Windows.Forms.ListView.SelectedIndices%2A> Eigenschaften zum Zugriff auf die Auflistung der ausgewählten Elemente im die <xref:System.Windows.Forms.ListView> um zu bestimmen, welche Elemente aktiviert sind.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Elements. Im Beispiel meldet ein Ereignishandler für das Vorkommen der <xref:System.Windows.Forms.ListView.ItemActivate> Ereignis. Dieser Bericht hilft Ihnen, um zu erfahren, wann das Ereignis tritt auf, und unterstützen Sie beim Debuggen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, sollten Sie ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, das eine Instanz des Typs enthält <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.ListView.ItemActivate> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#473](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#473)]
 [!code-vb[System.Windows.Forms.EventExamples#473](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#473)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ItemCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckEventHandler ItemCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckEventHandler ItemCheck" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemCheck" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCheck As ItemCheckEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckEventHandler ^ ItemCheck;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Aktivierungszustand eines Elements geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.CheckBoxes%2A> Eigenschaft muss festgelegt werden, auf "true" in der Reihenfolge für die Kontrollkästchen neben jedem Element im anzuzeigenden der <xref:System.Windows.Forms.ListView> Steuerelement. Die <xref:System.Windows.Forms.ListView.ItemCheck> Ereignis tritt auf, wenn der Aktivierungszustand eines Elements geändert wird oder wenn die <xref:System.Windows.Forms.ListView.CheckBoxes%2A> -Eigenschaftensatz auf `true`. Können, erstellen Sie einen Ereignishandler für das <xref:System.Windows.Forms.ListView.ItemCheck> Ereignis, um Aufgaben wie das Ändern des Zustands eines Elements oder eine andere anwendungsspezifische Aufgabe jedes Mal ein Element eingecheckt wird die <xref:System.Windows.Forms.ListView> Steuerelement.  
  
> [!NOTE]
>  Wenn das Fensterhandle nicht, wenn erstellt wurde die <xref:System.Windows.Forms.ListView.ItemCheck> Ereignis ausgelöst wird, wird das Ereignis verzögert werden. Sobald das Fensterhandle (wenn das Formular angezeigt wird) erstellt wurde, eine verzögert <xref:System.Windows.Forms.ListView.ItemCheck> Ereignisse ausgelöst werden soll. Weitere Informationen finden Sie unter <xref:System.Windows.Forms.Control.HandleCreated>.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, eine aktivierte <xref:System.Windows.Forms.ListView> Steuerelement, behandelt der <xref:System.Windows.Forms.ListView.ItemCheck> Ereignis. Die Methode verwendet die <xref:System.Windows.Forms.ItemCheckEventArgs.CurrentValue%2A?displayProperty=nameWithType> und <xref:System.Windows.Forms.ItemCheckEventArgs.Index%2A?displayProperty=nameWithType> Eigenschaften abrufen und Berechnen des Preises der Menüelemente ausgewählt. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular mit einem `ListView` mit dem Namen `ListView1` und ein `TextBox` mit dem Namen `Textbox1`. Rufen Sie die `InititalizeListView` Methode aus den Konstruktor des Formulars oder `Load` Methode. Sicherstellen, dass die <xref:System.Windows.Forms.ListView.ItemCheck> Ereignis in diesem Beispiel wird der Ereignishandler zugeordnet ist.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemChecked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckedEventHandler ItemChecked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckedEventHandler ItemChecked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemChecked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemChecked As ItemCheckedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckedEventHandler ^ ItemChecked;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Aktivierungszustand eines Elements geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis ähnelt dem <xref:System.Windows.Forms.ListView.ItemCheck> Ereignis jedoch ausgelöst wird, nachdem das Element eingecheckt wurde.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Elements. Im Beispiel meldet ein Ereignishandler für das Vorkommen der <xref:System.Windows.Forms.ListView.ItemChecked> Ereignis. Dieser Bericht hilft Ihnen, um zu erfahren, wann das Ereignis tritt auf, und unterstützen Sie beim Debuggen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, sollten Sie ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Ein weiteres Beispiel finden Sie unter der <xref:System.Windows.Forms.ListView.ItemCheck> Ereignis. Der Code funktioniert ebenso gut, wenn der Ereignishandler angefügt ist die <xref:System.Windows.Forms.ListView.ItemChecked> Ereignis.  
  
 Um dieses Beispielcode auszuführen, fügen Sie ihn in ein Projekt, das eine Instanz des Typs enthält <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.ListView.ItemChecked> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#475](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#475)]
 [!code-vb[System.Windows.Forms.EventExamples#475](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#475)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemDragEventHandler ItemDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemDragEventHandler ItemDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemDrag As ItemDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemDragEventHandler ^ ItemDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer beginnt, ein Element zu ziehen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.ItemDrag> Ereignis tritt auf, wenn der Benutzer beginnt, ein Element zu ziehen. In der Regel den Ereignishandler für das <xref:System.Windows.Forms.ListView.ItemDrag> Ereignis führt die Aufgabe aus ziehen durch Aufrufen der <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType> Methode. Verwenden Sie dieses Ereignis zum Ausführen der erforderlichen Aufgaben für das Ziehen von Elementen in eine und aus Ihrer Anwendungsverzeichnis <xref:System.Windows.Forms.ListView> Steuerelement.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Elements. Im Beispiel meldet ein Ereignishandler für das Vorkommen der <xref:System.Windows.Forms.ListView.ItemDrag> Ereignis. Dieser Bericht hilft Ihnen, um zu erfahren, wann das Ereignis tritt auf, und unterstützen Sie beim Debuggen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, sollten Sie ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, das eine Instanz des Typs enthält <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.ListView.ItemDrag> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#476](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#476)]
 [!code-vb[System.Windows.Forms.EventExamples#476](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#476)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemMouseHover">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemMouseHover" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemMouseHover As ListViewItemMouseHoverEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemMouseHoverEventHandler ^ ItemMouseHover;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemMouseHoverEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Maus über ein Element bewegt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Elements. Im Beispiel meldet ein Ereignishandler für das Vorkommen der <xref:System.Windows.Forms.ListView.ItemMouseHover> Ereignis. Dieser Bericht hilft Ihnen, um zu erfahren, wann das Ereignis tritt auf, und unterstützen Sie beim Debuggen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, sollten Sie ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, das eine Instanz des Typs enthält <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.ListView.ItemMouseHover> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#477](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#477)]
 [!code-vb[System.Windows.Forms.EventExamples#477](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#477)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ListViewItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ListViewItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListView.ListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ListViewItemCollection ^ Items { System::Windows::Forms::ListView::ListViewItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewItemCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung mit allen Elementen im Steuerelement ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />, die alle Elemente im <see cref="T:System.Windows.Forms.ListView" />-Steuerelement enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mithilfe der <xref:System.Windows.Forms.ListView.ListViewItemCollection> von dieser Eigenschaft zurückgegeben wird, Sie können Elemente hinzufügen, Entfernen von Elementen und Anzahl von Elementen zu erhalten. Weitere Informationen zu den Tasks, die mit den Elementen in der Auflistung ausgeführt werden können, finden Sie unter der <xref:System.Windows.Forms.ListView.ListViewItemCollection> -Klasse Referenzthemen.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="ItemSelectionChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemSelectionChanged As ListViewItemSelectionChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemSelectionChangedEventHandler ^ ItemSelectionChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemSelectionChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Auswahlzustand eines Elements geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im virtuellen Modus der <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> -Ereignis tritt auf, wenn der Auswahlzustand mehrerer Elemente geändert.  
  
 Die <xref:System.Windows.Forms.ListView.ItemSelectionChanged> Ereignis wird ausgegeben, wenn der Elementstatus von ausgewählten aufgehoben oder umgekehrt ändert.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Elements. Im Beispiel meldet ein Ereignishandler für das Vorkommen der <xref:System.Windows.Forms.ListView.ItemSelectionChanged> Ereignis. Dieser Bericht hilft Ihnen, um zu erfahren, wann das Ereignis tritt auf, und unterstützen Sie beim Debuggen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, sollten Sie ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, das eine Instanz des Typs enthält <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.ListView.ItemSelectionChanged> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#478](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#478)]
 [!code-vb[System.Windows.Forms.EventExamples#478](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#478)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      </Docs>
    </Member>
    <Member MemberName="LabelEdit">
      <MemberSignature Language="C#" Value="public bool LabelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelEdit { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Benutzer die Bezeichnungen von Elementen im Steuerelement bearbeiten können, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn der Benutzer die Bezeichnungen von Elementen zur Laufzeit bearbeiten kann, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.ListView.LabelEdit%2A> -Eigenschaftensatz auf `true`, der Benutzer kann den Text eines Elements zu ändern, indem Sie auf den Elementtext, um ihn auszuwählen, und klicken Sie dann auf den Elementtext erneut aus, um den Bezeichnungstext in put-Bearbeitungsmodus. Benutzer kann dann ändern oder ersetzen die Beschriftung des Elements. Sie können die <xref:System.Windows.Forms.ListView.BeforeLabelEdit> und <xref:System.Windows.Forms.ListView.AfterLabelEdit> Ereignisse, um Aufgaben auszuführen, bevor und nachdem der Benutzer ein Element Text bearbeitet. Der Text von Unterelementen kann nicht geändert werden, wenn diese Eigenschaft, um festgelegt wird `true`. Um den Text der Unterelemente zu ändern, können Sie ein Dialogfeld für Benutzer anzeigen, wenn sie ein Unterelement im Steuerelement doppelklicken.  
  
> [!NOTE]
>  Wenn die <xref:System.Windows.Forms.ListView.Activation%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.ItemActivation.OneClick> oder <xref:System.Windows.Forms.ItemActivation.TwoClick>, Bearbeiten von Bezeichnungen werden zugelassen, unabhängig vom Wert von der <xref:System.Windows.Forms.ListView.LabelEdit%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="LabelWrap">
      <MemberSignature Language="C#" Value="public bool LabelWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelWrap { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Elementbezeichnungen umbrochen werden, wenn Elemente im Steuerelement als Symbole angezeigt werden, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn Elementbezeichnungen bei der Anzeige von Elementen als Symbole umbrochen werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.ListView.LabelWrap%2A> -Eigenschaftensatz auf `true`, der Elementtext wird in die nächste Zeile des Texts umbrochen, falls erforderlich. Wenn der Text länger als zwei Textzeilen ist, wird der Text gekürzt. Wenn der Benutzer das Element auswählt, wird der Elementtext angezeigt. Wenn die <xref:System.Windows.Forms.ListView.LabelWrap%2A> -Eigenschaftensatz auf `false`, alle Elementtext wird in einer einzelnen Zeile angezeigt. Das gesamte Elementtext wird angezeigt, wenn die <xref:System.Windows.Forms.ListView.LabelWrap%2A> auf festgelegt ist `false`. Diese Eigenschaft wird nur verwendet, wenn die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.LargeIcon> oder <xref:System.Windows.Forms.View.SmallIcon>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="LargeImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList LargeImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList LargeImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LargeImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property LargeImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ LargeImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Windows.Forms.ImageList" /> ab, die verwendet werden soll, wenn die Elemente im Steuerelement als große Symbole angezeigt werden, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ImageList" /> mit den Symbolen, die verwendet werden sollen, wenn die <see cref="P:System.Windows.Forms.ListView.View" />-Eigenschaft auf <see cref="F:System.Windows.Forms.View.LargeIcon" /> festgelegt ist. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Windows.Forms.ListView.LargeImageList%2A> Eigenschaft ermöglicht Ihnen die Angabe ein <xref:System.Windows.Forms.ImageList> -Objekt, das beim Anzeigen von Elementen mit großen Symbolen zu verwendende Symbole enthält (wenn der <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft auf festgelegt ist <xref:System.Windows.Forms.View.LargeIcon>). Die <xref:System.Windows.Forms.ListView> -Steuerelement Grafiken zu formatieren, akzeptiert der <xref:System.Windows.Forms.ImageList> Steuerelement unterstützt, wenn Symbole angezeigt. Die <xref:System.Windows.Forms.ListView> Steuerelement ist nicht beschränkt auf ICO-Dateien. Einmal eine <xref:System.Windows.Forms.ImageList> zugewiesen ist die <xref:System.Windows.Forms.ListView.LargeImageList%2A> -Eigenschaft, die Sie festlegen können die <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> -Eigenschaft jedes <xref:System.Windows.Forms.ListViewItem> in der <xref:System.Windows.Forms.ListView> Steuerelement an die Indexposition des entsprechenden Bilds in der <xref:System.Windows.Forms.ImageList>. Die Größe der Symbole für die <xref:System.Windows.Forms.ListView.LargeImageList%2A> wird angegeben, indem die <xref:System.Windows.Forms.ImageList.ImageSize%2A>.  
  
 Da nur ein Index für die angegeben werden kann die <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType> -Eigenschaft, die <xref:System.Windows.Forms.ImageList> Objekte in angegebenen der <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften müssen dieselben Indexpositionen für die anzuzeigenden Bilder. Z. B. wenn die <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> Eigenschaft eine <xref:System.Windows.Forms.ListViewItem> festgelegt ist auf 0, muss sich die Bilder, die für kleine und große Symbole an die gleiche Indexposition in der <xref:System.Windows.Forms.ImageList> Objekte in angegebenen der <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften.  
  
> [!NOTE]
>  Wenn die Bilder mit Schlüsseln angegeben werden, müssen Sie kleine und große Versionen des Bilds an der gleichen Indexposition in der jeweiligen Bildliste zu platzieren. Beim Wechsel zwischen den Ansichten ist die Indexposition des Bilds in einer Liste verwendet, das Bild in die andere Liste unabhängig von der angegebenen Schlüsselwert gesucht werden soll.  
  
 Festlegen der <xref:System.Windows.Forms.ImageList> beim Anzeigen von Elementen mit kleinen Symbolen verwendet (alle Ansichtsmodi außer <xref:System.Windows.Forms.View.LargeIcon>), verwenden Sie die <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaft. Wenn Sie Bilder verwenden, um die Anzeige Elementstatus verwenden möchten die <xref:System.Windows.Forms.ListView.StateImageList%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="ListViewItemSorter">
      <MemberSignature Language="C#" Value="public System.Collections.IComparer ListViewItemSorter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IComparer ListViewItemSorter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      <MemberSignature Language="VB.NET" Value="Public Property ListViewItemSorter As IComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IComparer ^ ListViewItemSorter { System::Collections::IComparer ^ get(); void set(System::Collections::IComparer ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Sortiervergleich für das Steuerelement ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Collections.IComparer" />, der den Sortiervergleich für das Steuerelement darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> -Eigenschaft können Sie zum Angeben des Objekts, der ausführt, die Sortierung der Elemente in einer <xref:System.Windows.Forms.ListView> steuern, wann die <xref:System.Windows.Forms.ListView.Sort%2A> -Methode aufgerufen wird oder wenn Elemente der Liste hinzugefügt werden. Beachten Sie, dass Elemente nicht automatisch sortiert werden, wenn ihre Bezeichnungstext geändert wird.  
  
 Das angegebene Objekt muss eine Instanz einer Klasse, die implementiert werden die <xref:System.Collections.IComparer> -Schnittstelle, die eine einzige namens Methode <xref:System.Collections.Comparer.Compare%2A?displayProperty=nameWithType>.  
  
 Diese Eigenschaft können Sie benutzerdefinierten Sortieren, z. B. beim Klicken auf ein Spaltenheader in der Detailansicht bereitstellen. Zu diesem Zweck erstellen Sie eine Klasse, implementiert die <xref:System.Collections.IComparer> Schnittstelle und einen Konstruktor, der den Index einer Spalte zu sortieren akzeptiert bereit. Sie können dann implementieren Sie einen Handler für das <xref:System.Windows.Forms.ListView.ColumnClick> Ereignis, das eine Instanz dieser Klasse mit dem Index der Spalte, auf die geklickt wurde erstellt. Beim Festlegen der <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> Eigenschaft, um die neue Instanz der <xref:System.Windows.Forms.ListView> Steuerelement automatisch mithilfe des angegebenen Objekts sortiert wird. Nachfolgende Aufrufe der <xref:System.Windows.Forms.ListView.Sort%2A> Methode verwenden das gleiche Objekt.  
  
> [!NOTE]
>  Beim Festlegen der Wert der <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> -Eigenschaft, die <xref:System.Windows.Forms.ListView.Sort%2A> Methode wird automatisch aufgerufen.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt ein Formular, enthält ein <xref:System.Windows.Forms.ListView> Steuerelement, das manuell sortiert, Elemente, wenn eine Spalte in der <xref:System.Windows.Forms.ListView> Steuerelement geklickt wird. Im Beispiel definiert eine Klasse namens `ListViewItemComparer` , implementiert die <xref:System.Collections.IComparer?displayProperty=nameWithType> -Schnittstelle, die führt die <xref:System.Windows.Forms.ListViewItem> Vergleich. Das Beispiel erstellt eine Instanz des `ListViewItemComparer` und verwendet, um das Festlegen der <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> Eigenschaft der <xref:System.Windows.Forms.ListView> Steuerelement. Die <xref:System.Windows.Forms.ListView.Sort%2A> -Methodenaufruf in der <xref:System.Windows.Forms.ListView.ColumnClick> -Ereignishandler verwendet die in definierten Methoden `ListViewItemComparer` , erfolgt die Sortierung der Elemente, die basierend auf der Spalte, auf die geklickt wird.  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
      </Docs>
    </Member>
    <Member MemberName="MultiSelect">
      <MemberSignature Language="C#" Value="public bool MultiSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.MultiSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiSelect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob mehrere Elemente ausgewählt werden können, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn mehrere Elemente im Steuerelement gleichzeitig ausgewählt werden können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.ListView.MultiSelect%2A> -Eigenschaftensatz auf `true`, Auswahl mehrerer Elemente der <xref:System.Windows.Forms.ListView> Steuerelement. Um mehrere Elemente auswählen zu können, muss der Benutzer STRG gedrückt halten, während Sie auf die Elemente auswählen. Aufeinander folgende Elemente können ausgewählt werden, indem Sie auf das erste Element auswählen und dann bei gedrückter Umschalttaste auf das letzte Element auswählen. Können Sie zum Auswählen mehrerer Elemente in der Mehrfachauswahl die <xref:System.Windows.Forms.ListView> steuern und führt einen Vorgang für alle ausgewählten Elemente. Der Benutzer kann beispielsweise mehrere Elemente auswählen und per Rechtsklick ein ausgewähltes Element um ein Kontextmenü anzuzeigen, die eine Reihe von Aufgaben anzeigt, die für die ausgewählten Elemente ausgeführt werden können.  
  
 Um zu bestimmen, welche Elemente ausgewählt sind, in der <xref:System.Windows.Forms.ListView> steuern, verwenden Sie die <xref:System.Windows.Forms.ListView.SelectedItems%2A> Eigenschaft. Die <xref:System.Windows.Forms.ListView.SelectedItems%2A> Eigenschaft ermöglicht den Zugriff auf die <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> , die eine Liste der ausgewählten Elemente enthält. Wenn Sie die Indexpositionen, in möchten der <xref:System.Windows.Forms.ListView.ListViewItemCollection> anstelle der Elemente können Sie die <xref:System.Windows.Forms.ListView.SelectedIndices%2A> aufzurufende Eigenschaft der <xref:System.Windows.Forms.ListView.SelectedIndexCollection>.  
  
 Wenn Sie nicht in die Mehrfachauswahl unterstützen möchten die <xref:System.Windows.Forms.ListView>, möchten dennoch bieten den Benutzer eine Möglichkeit, mehrere Elemente ausgewählt werden, Sie können Kontrollkästchen anzeigen, indem Sie die Einstellung der <xref:System.Windows.Forms.ListView.CheckBoxes%2A> Eigenschaft, um `true`.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht eine <xref:System.Windows.Forms.ListView> , die mehrere Elemente ausgewählt werden können. Das Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.ListView.HideSelection%2A> und <xref:System.Windows.Forms.ListView.HeaderStyle%2A> Eigenschaften. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular, enthält ein <xref:System.Windows.Forms.ListView> Objekt mit dem Namen `ListView1` und ein <xref:System.Windows.Forms.TextBox> mit dem Namen `TextBox1`. Rufen Sie die `InitializeListView` Methode aus den Konstruktor des Formulars oder `Load` Methode.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.LabelEditEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnAfterLabelEdit%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListView.AfterLabelEdit> Ereignis, um eine neu bearbeitete Beschriftung auf alphabetische Zeichen beschränken. Im Beispiel wird die <xref:System.Text.ASCIIEncoding> Klasse, um den ASCII-Zeichencode der einzelnen Zeichen, der die neue Bezeichnung erhalten. Wenn das Zeichen zwischen den ASCII-Codes, die Zahlen darstellen fällt, kann nicht die neue Bezeichnung für das Element angewendet werden. Dieses Beispiel benötigen Sie nach der Erstellung einer <xref:System.Windows.Forms.ListView> Steuerelement eines Formulars und Elemente hinzugefügt. Im Beispiel erfordert auch, dass Sie eine Verbindung hergestellt haben die <xref:System.Windows.Forms.ListView.AfterLabelEdit> Ereignis an den Ereignishandler, der im Beispielcode definiert. Zum Verwenden der <xref:System.Text.ASCIIEncoding> -Klasse, die Datei umfasst das <xref:System.Text> Namespace.  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackgroundImageChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnBackgroundImageChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.LabelEditEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnBeforeLabelEdit%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCacheVirtualItems">
      <MemberSignature Language="C#" Value="protected virtual void OnCacheVirtualItems (System.Windows.Forms.CacheVirtualItemsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCacheVirtualItems(class System.Windows.Forms.CacheVirtualItemsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCacheVirtualItems (e As CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCacheVirtualItems(System::Windows::Forms::CacheVirtualItemsEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.CacheVirtualItemsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.CacheVirtualItemsEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.CacheVirtualItems" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnCacheVirtualItems%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnClick (System.Windows.Forms.ColumnClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnClick(class System.Windows.Forms.ColumnClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnClick (e As ColumnClickEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnClick(System::Windows::Forms::ColumnClickEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.ColumnClickEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.ColumnClick" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnColumnClick%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt ein Formular, enthält ein <xref:System.Windows.Forms.ListView> Steuerelement, das manuell sortiert, Elemente, wenn eine Spalte in der <xref:System.Windows.Forms.ListView> Steuerelement geklickt wird. Im Beispiel definiert eine Klasse namens `ListViewItemComparer` , implementiert die <xref:System.Collections.IComparer?displayProperty=nameWithType> -Schnittstelle, die führt die <xref:System.Windows.Forms.ListViewItem> Vergleich. Das Beispiel erstellt eine Instanz des `ListViewItemComparer` und verwendet, um das Festlegen der <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> Eigenschaft der <xref:System.Windows.Forms.ListView> Steuerelement. Die <xref:System.Windows.Forms.ListView.Sort%2A> -Methodenaufruf in der <xref:System.Windows.Forms.ListView.ColumnClick> -Ereignishandler verwendet die in definierten Methoden `ListViewItemComparer` , erfolgt die Sortierung der Elemente, die basierend auf der Spalte, auf die geklickt wird.  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnClickEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnColumnReordered">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnReordered (System.Windows.Forms.ColumnReorderedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnReordered(class System.Windows.Forms.ColumnReorderedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnReordered (e As ColumnReorderedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnReordered(System::Windows::Forms::ColumnReorderedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnReorderedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Forms.ColumnReorderedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.ColumnReordered" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnColumnReordered%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanged (System.Windows.Forms.ColumnWidthChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanged(class System.Windows.Forms.ColumnWidthChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanged (e As ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanged(System::Windows::Forms::ColumnWidthChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.ColumnWidthChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnColumnWidthChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanging (System.Windows.Forms.ColumnWidthChangingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanging(class System.Windows.Forms.ColumnWidthChangingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanging (e As ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanging(System::Windows::Forms::ColumnWidthChangingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.ColumnWidthChangingEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanging" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.ColumnWidthChanging> -Ereignis tritt nicht Drag-Funktion, die Option "Fensterinhalt beim Ziehen anzeigen" ist deaktiviert, wenn das Fenster vollständige's.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnColumnWidthChanging%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawColumnHeader">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawColumnHeader (System.Windows.Forms.DrawListViewColumnHeaderEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawColumnHeader(class System.Windows.Forms.DrawListViewColumnHeaderEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawColumnHeader (e As DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawColumnHeader(System::Windows::Forms::DrawListViewColumnHeaderEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnDrawColumnHeader%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawListViewItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawListViewItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawListViewItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawListViewItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.DrawItem" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnDrawItem%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnDrawSubItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawSubItem (System.Windows.Forms.DrawListViewSubItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawSubItem(class System.Windows.Forms.DrawListViewSubItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawSubItem (e As DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawSubItem(System::Windows::Forms::DrawListViewSubItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewSubItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.DrawSubItem" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnDrawSubItem%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see langword="FontChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.HandleCreated" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.HandleDestroyed" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnItemActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnItemActivate (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemActivate(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemActivate (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemActivate(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.ItemActivate" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnItemActivate%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCheck (System.Windows.Forms.ItemCheckEventArgs ice);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCheck(class System.Windows.Forms.ItemCheckEventArgs ice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCheck (ice As ItemCheckEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCheck(System::Windows::Forms::ItemCheckEventArgs ^ ice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ice" Type="System.Windows.Forms.ItemCheckEventArgs" />
      </Parameters>
      <Docs>
        <param name="ice">Ein <see cref="T:System.Windows.Forms.ItemCheckEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.ItemCheck" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnItemCheck%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemCheck" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemChecked">
      <MemberSignature Language="C#" Value="protected virtual void OnItemChecked (System.Windows.Forms.ItemCheckedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemChecked(class System.Windows.Forms.ItemCheckedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemChecked (e As ItemCheckedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemChecked(System::Windows::Forms::ItemCheckedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemCheckedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.ItemCheckedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.ItemChecked" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnItemChecked%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDrag (System.Windows.Forms.ItemDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDrag(class System.Windows.Forms.ItemDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemDrag (e As ItemDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemDrag(System::Windows::Forms::ItemDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.ItemDragEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.ItemDrag" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnItemDrag%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemDrag" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnItemMouseHover (System.Windows.Forms.ListViewItemMouseHoverEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemMouseHover(class System.Windows.Forms.ListViewItemMouseHoverEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemMouseHover (e As ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemMouseHover(System::Windows::Forms::ListViewItemMouseHoverEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemMouseHoverEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.ListViewItemMouseHoverEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.ItemMouseHover" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnItemMouseHover%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnItemSelectionChanged (System.Windows.Forms.ListViewItemSelectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemSelectionChanged(class System.Windows.Forms.ListViewItemSelectionChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemSelectionChanged (e As ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemSelectionChanged(System::Windows::Forms::ListViewItemSelectionChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnItemSelectionChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected override void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseHover(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.MouseHover" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.ListView.OnMouseHover%2A> Methode wird aufgerufen, wenn die mauszeigerbewegung über ein <xref:System.Windows.Forms.ListViewItem>, löst die Methode die <xref:System.Windows.Forms.ListView.ItemMouseHover> Ereignis.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnMouseHover%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.MouseLeave" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.ParentChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.Resize" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRetrieveVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnRetrieveVirtualItem (System.Windows.Forms.RetrieveVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRetrieveVirtualItem(class System.Windows.Forms.RetrieveVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRetrieveVirtualItem (e As RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRetrieveVirtualItem(System::Windows::Forms::RetrieveVirtualItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.RetrieveVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.RetrieveVirtualItemEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnRetrieveVirtualItem%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRightToLeftLayoutChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRightToLeftLayoutChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSearchForVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnSearchForVirtualItem (System.Windows.Forms.SearchForVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSearchForVirtualItem(class System.Windows.Forms.SearchForVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSearchForVirtualItem (e As SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSearchForVirtualItem(System::Windows::Forms::SearchForVirtualItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.SearchForVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.SearchForVirtualItemEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.SearchForVirtualItem" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnSearchForVirtualItem%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnSelectedIndexChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected override void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVirtualItemsSelectionRangeChanged (System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVirtualItemsSelectionRangeChanged(class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVirtualItemsSelectionRangeChanged (e As ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVirtualItemsSelectionRangeChanged(System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.OwnerDraw" />
      <MemberSignature Language="VB.NET" Value="Public Property OwnerDraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OwnerDraw { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob das <see cref="T:System.Windows.Forms.ListView" />-Steuerelement vom Betriebssystem oder durch selbst bereitgestellten Code gezeichnet wird.</summary>
        <value>
          <see langword="true" />, wenn das <see cref="T:System.Windows.Forms.ListView" />-Steuerelement von Code gezeichnet wird, den Sie bereitstellen; <see langword="false" />, wenn das <see cref="T:System.Windows.Forms.ListView" />-Steuerelement vom Betriebssystem gezeichnet wird. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.ListView> Steuerelement wird normalerweise vom Betriebssystem gezeichnet. Um die Darstellung anpassen <xref:System.Windows.Forms.ListView> Elemente und Unterelemente Spaltenüberschriften Satz der <xref:System.Windows.Forms.ListView.OwnerDraw%2A> Eigenschaft `true` , und geben Sie einen Handler für eine oder mehrere der folgenden Ereignisse: <xref:System.Windows.Forms.ListView.DrawItem>, <xref:System.Windows.Forms.ListView.DrawSubItem>, <xref:System.Windows.Forms.ListView.DrawColumnHeader>. Dies wird Ownerdrawing bezeichnet. Wenn die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, alle drei Ereignisse auftreten; hingegen nur die <xref:System.Windows.Forms.ListView.DrawItem> Ereignis tritt auf.  
  
> [!NOTE]
>  Unterelementinformationen werden in der Regel in der Ansicht "Nebeneinander" angezeigt sowie die Details anzuzeigen, aber in der Ansicht "Nebeneinander" muss es in einen Handler für gezeichnet werden die <xref:System.Windows.Forms.ListView.DrawItem> Ereignis. Die <xref:System.Windows.Forms.ListView.DrawSubItem> Ereignis tritt nicht auf für alle Unterelemente für die keine <xref:System.Windows.Forms.ColumnHeader> Objekt wurde hinzugefügt, um die <xref:System.Windows.Forms.ListView.Columns%2A> Auflistung. Beachten Sie auch, dass das erste Unterelement jedes <xref:System.Windows.Forms.ListViewItem> Objekt stellt das übergeordnete Element selbst dar und wird in der ersten Spalte angezeigt.  
  
 In der Detailansicht können Sie behandeln die <xref:System.Windows.Forms.ListView.DrawItem> Ereignis, um allgemeine Elemente, die alle Unterelemente, z. B. den Hintergrund zeichnen und behandeln die <xref:System.Windows.Forms.ListView.DrawSubItem> Ereignis Elemente für einzelne Unterelemente, z. B. Textwerte gezeichnet werden soll. Sie können auch alle Elemente in zeichnen die <xref:System.Windows.Forms.ListView> steuern mit nur einer der beiden Ereignisse, obwohl dies umständlicher sein kann. Um Spaltenüberschriften in der Detailansicht zu zeichnen, müssen Sie behandeln die <xref:System.Windows.Forms.ListView.DrawColumnHeader> Ereignis.  
  
> [!NOTE]
>  Zur Vermeidung von Problemen Flackern von Grafiken beim Ownerdrawing der <xref:System.Windows.Forms.ListView> steuern und Festlegen der <xref:System.Windows.Forms.ListView.DoubleBuffered%2A> Eigenschaft `true`.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie benutzerdefinierte Zeichnung für Bereitstellen einer <xref:System.Windows.Forms.ListView> Steuerelement. Die <xref:System.Windows.Forms.ListView> im Beispiel-Steuerelement einem Farbverlaufshintergrund. Unterelemente mit negativen Werten haben einen roten Vordergrund und schwarzem Hintergrund.  
  
 Ein Handler für das <xref:System.Windows.Forms.ListView.DrawItem> Ereignis zeichnet den Hintergrund für das gesamte Element. Ein Handler für das <xref:System.Windows.Forms.ListView.DrawSubItem> Ereignis zeichnet die Textwerte sowie Text und Hintergrund für Unterelemente, die negative Werte haben. Ein Handler für das <xref:System.Windows.Forms.ListView.DrawColumnHeader> Ereignis zeichnet jede Spaltenüberschrift.  
  
 Ein <xref:System.Windows.Forms.ContextMenu> Komponente bietet eine Möglichkeit, zwischen der Ansicht und der Listenansicht zu wechseln. In der Listenansicht, nur die <xref:System.Windows.Forms.ListView.DrawItem> Ereignis wird ausgelöst. In diesem Fall Text und Hintergrund werden sowohl in gezeichnet der <xref:System.Windows.Forms.ListView.DrawItem> -Ereignishandler.  
  
 [!code-csharp[ListViewOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#1)]
 [!code-vb[ListViewOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Abstand zwischen dem <see cref="T:System.Windows.Forms.ListView" />-Steuerelement und seinem Inhalt ab oder legt diesen fest.</summary>
        <value>Der <see cref="T:System.Windows.Forms.Padding" />, der den Abstand zwischen dem <see cref="T:System.Windows.Forms.ListView" />-Steuerelement und seinem Inhalt angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Wert der <see cref="P:System.Windows.Forms.ListView.Padding" />-Eigenschaft ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn das <see cref="T:System.Windows.Forms.ListView" />-Steuerelement gezeichnet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView> Steuerelement wird vom Betriebssystem oder Besitzer wird gezeichnet werden, sodass der <xref:System.Windows.Forms.ListView.Paint> Ereignis wird nie ausgelöst. Weitere Informationen zu Ownerdrawing-, finden Sie unter der <xref:System.Windows.Forms.ListView.OwnerDraw%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RealizeProperties">
      <MemberSignature Language="C#" Value="protected void RealizeProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RealizeProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RealizeProperties" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RealizeProperties ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RealizeProperties();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialisiert die Eigenschaften des <see cref="T:System.Windows.Forms.ListView" />-Steuerelements, die die Darstellung des Steuerelements verwalten.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedrawItems">
      <MemberSignature Language="C#" Value="public void RedrawItems (int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedrawItems(int32 startIndex, int32 endIndex, bool invalidateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RedrawItems(System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RedrawItems (startIndex As Integer, endIndex As Integer, invalidateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RedrawItems(int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
        <Parameter Name="invalidateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startIndex">Der Index für das erste Element im neu zu zeichnenden Bereich.</param>
        <param name="endIndex">Der Index für das letzte Element des neu zu zeichnenden Bereichs.</param>
        <param name="invalidateOnly">
          <see langword="true" />, um den Bereich von Elementen ungültig zu machen, <see langword="false" />, um die Elemente ungültig zu machen und neu zu zeichnen.</param>
        <summary>Erzwingt das Neuzeichnen eines Bereichs von <see cref="T:System.Windows.Forms.ListViewItem" />-Objekten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.RedrawItems%2A> Methode kann Folgendes sein verwendet, ob die <xref:System.Windows.Forms.ListView> befindet sich im virtuellen Modus oder im normalen Modus.  
  
 Wenn die <xref:System.Windows.Forms.ListView.BeginUpdate%2A> -Methode aufgerufen wurde, vor dem Aufruf von <xref:System.Windows.Forms.ListView.RedrawItems%2A>, das Neuzeichnen wird nicht ausgeführt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> oder <paramref name="endIndex" /> ist kleiner als 0 (null), größer oder gleich der Anzahl von Elementen in der <see cref="T:System.Windows.Forms.ListView" /> bzw. im virtuellen Modus größer als der Wert von <see cref="P:System.Windows.Forms.ListView.VirtualListSize" />.  
  
 - oder -   
  
 Der angegebene <paramref name="startIndex" /> ist größer als der <paramref name="endIndex." />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RetrieveVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RetrieveVirtualItem As RetrieveVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::RetrieveVirtualItemEventHandler ^ RetrieveVirtualItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RetrieveVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich <see cref="T:System.Windows.Forms.ListView" /> im virtuellen Modus befindet und ein <see cref="T:System.Windows.Forms.ListViewItem" /> erforderlich ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine <xref:System.Windows.Forms.ListView> Objekt befindet sich im virtuellen Modus, Erstellung <xref:System.Windows.Forms.ListViewItem> Objekte dynamisch anstelle der <xref:System.Windows.Forms.ListView.Items%2A> Auflistung. Dieses Ereignis wird ausgelöst, wenn das Objekt zu erstellen, muss ein <xref:System.Windows.Forms.ListViewItem> Objekt. Ein Handler für dieses Ereignis sollte die entsprechende erstellen <xref:System.Windows.Forms.ListViewItem> oder aus dem Cache abgerufen, und übergeben Sie ihn wieder über die <xref:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item%2A> Eigenschaft.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, einen Handler für dieses Ereignis. In diesem Beispiel benötigt listView1 jedes <xref:System.Windows.Forms.ListViewItem> das Quadrat des jeweiligen Indexes angezeigt. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Windows.Forms.ListView.VirtualMode%2A> Eigenschaft.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#2)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item" />-Eigenschaft ist nicht auf ein Element festgelegt, wenn das <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />-Ereignis behandelt wird.</exception>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayout">
      <MemberSignature Language="C#" Value="public virtual bool RightToLeftLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeftLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.RightToLeftLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeftLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RightToLeftLayout { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Layout des Steuerelements von rechts nach links erfolgt, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, um anzugeben, dass das Layout des <see cref="T:System.Windows.Forms.ListView" />-Steuerelements von rechts nach links erfolgt, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView> Eigenschaft ist für die Verwendung mit internationale Anwendungen, in denen die Sprache von rechts nach links gelesen. Wenn Sie festlegen, <xref:System.Windows.Forms.ListView> und <xref:System.Windows.Forms.RightToLeft> auf Inhalt und Text des Steuerelements "true" angeordnet werden von rechts nach links.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RightToLeftLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RightToLeftLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Wert der <see cref="P:System.Windows.Forms.ListView.RightToLeftLayout" />-Eigenschaft ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Elements. Im Beispiel meldet ein Ereignishandler für das Vorkommen der <xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged> Ereignis. Dieser Bericht hilft Ihnen, um zu erfahren, wann das Ereignis tritt auf, und unterstützen Sie beim Debuggen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, sollten Sie ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, das eine Instanz des Typs enthält <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#462](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#462)]
 [!code-vb[System.Windows.Forms.EventExamples#462](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#462)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrollable">
      <MemberSignature Language="C#" Value="public bool Scrollable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Scrollable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Scrollable" />
      <MemberSignature Language="VB.NET" Value="Public Property Scrollable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Scrollable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob dem Steuerelement eine Bildlaufleiste hinzugefügt wird, wenn nicht genügend Platz für die Anzeige aller Elemente vorhanden ist, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn dem Steuerelement eine Bildlaufleiste hinzugefügt wird, um ggf. alle Elemente anzeigen zu können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft festgelegt wird, um `true`die <xref:System.Windows.Forms.ListView> zeigt eine vertikale Bildlaufleiste verwenden, wenn die Anzahl der Elemente, die Größe des Clientbereichs des Steuerelements überschreitet. Sie können diese Eigenschaft verwenden, um sicherzustellen, dass der Benutzer alle Elemente zugreifen kann, die in verfügbaren der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
> [!NOTE]
>  In Versionen von der [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] vor Version 2.0 wurde die Spaltenheader wurden nicht richtig gezeichnet, beim Festlegen dieser Eigenschaft auf `false` und Ändern der Größe des Steuerelements, um es zu vergrößern. Um dieses Problem zu umgehen, legen Sie diese Eigenschaft auf `true` in einem <xref:System.Windows.Forms.Form.ResizeBegin> -Ereignishandler und wieder in `false` in einen <xref:System.Windows.Forms.Form.ResizeEnd> -Ereignishandler.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchForVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SearchForVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SearchForVirtualItem As SearchForVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::SearchForVirtualItemEventHandler ^ SearchForVirtualItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SearchForVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich <see cref="T:System.Windows.Forms.ListView" /> im virtuellen Modus befindet und eine Suche ausgeführt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis tritt auf, wenn eine <xref:System.Windows.Forms.ListView> befindet sich im virtuellen Modus und die <xref:System.Windows.Forms.ListView.FindNearestItem%2A> oder <xref:System.Windows.Forms.ListView.FindItemWithText%2A> Methode wird aufgerufen. Wenn dieses Ereignis zu behandeln, sollten Sie berechnen, welches Element aus der Liste der Elemente, die vom der <xref:System.Windows.Forms.ListView.Items%2A> Eigenschaft entspricht den Suchkriterien entsprechen, und legen die <xref:System.Windows.Forms.SearchForVirtualItemEventArgs.Index%2A?displayProperty=nameWithType> Eigenschaft auf den Index des der <xref:System.Windows.Forms.ListViewItem>. Wenn ein Element nicht angegeben wird, <xref:System.Windows.Forms.ListView.FindNearestItem%2A> und <xref:System.Windows.Forms.ListView.FindItemWithText%2A> zurück `null`.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Elements. Im Beispiel wird eine Suche die nächste Übereinstimmung mit einer angegebenen Ganzzahl in einer Liste von ersten zehntausend Quadrate zurückgegeben. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Windows.Forms.ListView.VirtualMode%2A> Eigenschaft.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#4)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die <see cref="P:System.Windows.Forms.ListView.SelectedIndices" />-Auflistung geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.SelectedIndices%2A> Auflistung geändert wird, wenn die <xref:System.Windows.Forms.ListViewItem.Selected%2A> Eigenschaft eine <xref:System.Windows.Forms.ListViewItem> ändert. Die Änderung der Eigenschaft kann programmgesteuert auftreten oder wenn der Benutzer wählt ein Element oder hebt die Auswahl eines Elements. Wenn der Benutzer ein Element ohne gedrückter STRG-Taste zum Ausführen einer Mehrfachauswahl auswählt, hebt das Steuerelement zuerst die vorherige Auswahl. In diesem Fall tritt dieses Ereignis einmal für jedes Element, das zuvor ausgewählte und den Zeitpunkt für das neu ausgewählte Element.  
  
 Um zu bestimmen, welche Elemente ausgewählt sind, in der <xref:System.Windows.Forms.ListView> steuern, verwenden Sie die <xref:System.Windows.Forms.ListView.SelectedItems%2A> aufzurufende Eigenschaft der <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>. Sie können einen Ereignishandler für dieses Ereignis, um Aufgaben auszuführen, wenn eine in der ausgewählten Elemente Änderung erstellen die <xref:System.Windows.Forms.ListView> Steuerelement.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListView.SelectedItems%2A> -Eigenschaft, <xref:System.Windows.Forms.ListView.SelectedIndexChanged> Ereignis <xref:System.Windows.Forms.ListView.HeaderStyle%2A> Elemente, und die <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> Klasse. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular, enthält ein <xref:System.Windows.Forms.ListView> Objekt mit dem Namen `ListView1` und ein <xref:System.Windows.Forms.TextBox> mit dem Namen `TextBox1`. Rufen Sie die `InitializeListView` Methode aus den Konstruktor des Formulars oder `Load` Methode. Dieses Beispiel benötigen Sie, dass der Ereignishandler korrekt zugeordnet ist die <xref:System.Windows.Forms.ListView.SelectedIndexChanged> Ereignis  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
        <altmember cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListView.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListView::SelectedIndexCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Indizes der ausgewählten Elemente im Steuerelement ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />, die die Indizes der ausgewählten Elemente enthält. Wenn gegenwärtig keine Elemente ausgewählt sind, wird eine leere <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" /> zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.SelectedIndices%2A> Eigenschaft enthält keine Indizes aus, wenn die Eigenschaft, bevor zugegriffen wird die <xref:System.Windows.Forms.ListView> Handle erstellt wird bei der <xref:System.Windows.Forms.ListView> anfänglich für die Anzeige im Formular geladen wird. Sie können überprüfen, um festzustellen, ob das Handle erstellt wird, mit der <xref:System.Windows.Forms.Control.IsHandleCreated%2A> Eigenschaft. Wenn die <xref:System.Windows.Forms.ListView.MultiSelect%2A> -Eigenschaftensatz auf `true`, gibt diese Eigenschaft eine Auflistung mit den Indizes aller Elemente, die im ausgewählten der <xref:System.Windows.Forms.ListView>. Für eine Einfachauswahl <xref:System.Windows.Forms.ListView>, gibt diese Eigenschaft eine Auflistung mit einem einzelnen Element mit dem Index des ausgewählten Elements in nur die <xref:System.Windows.Forms.ListView>. Weitere Informationen zu den Tasks, die mit den Elementen in der Auflistung ausgeführt werden können, finden Sie unter <xref:System.Windows.Forms.ListView.SelectedIndexCollection>.  
  
 Wenn Sie möchten, zum Abrufen einer Auflistung der Elemente, die im ausgewählten der <xref:System.Windows.Forms.ListView> -Steuerelement, statt die Indexpositionen der Elemente, die ausgewählt sind, verwenden die <xref:System.Windows.Forms.ListView.SelectedItems%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.ListView.SelectedIndices%2A>, <xref:System.Windows.Forms.ListView.SelectedIndexChanged>, und <xref:System.Windows.Forms.ListView.HeaderStyle%2A> Elemente und die <xref:System.Windows.Forms.ListView.SelectedIndexCollection> Klasse. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular, enthält ein <xref:System.Windows.Forms.ListView> Objekt mit dem Namen `ListView1` und ein <xref:System.Windows.Forms.TextBox> mit dem Namen `TextBox1`. Rufen Sie die `InitializeListView` Methode aus den Konstruktor des Formulars oder `Load` Methode. Dieses Beispiel benötigen Sie der Ereignishandler korrekt zugeordnet ist die <xref:System.Windows.Forms.ListView.SelectedIndexChanged> Ereignis.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView1#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView1#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedListViewItemCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedListViewItemCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListView.SelectedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedListViewItemCollection ^ SelectedItems { System::Windows::Forms::ListView::SelectedListViewItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die im Steuerelement ausgewählten Elemente ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />, die die im Steuerelement ausgewählten Elemente enthält. Wenn gegenwärtig keine Elemente ausgewählt sind, wird eine leere <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" /> zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.SelectedItems%2A> Eigenschaft enthält keine Elemente aus, wenn die Eigenschaft, bevor zugegriffen wird die <xref:System.Windows.Forms.ListView> Handle erstellt wird beim <xref:System.Windows.Forms.ListView> anfänglich für die Anzeige im Formular geladen wird. Sie können überprüfen, um festzustellen, ob das Handle erstellt wird, mit der <xref:System.Windows.Forms.Control.IsHandleCreated%2A> Eigenschaft. Wenn die <xref:System.Windows.Forms.ListView.MultiSelect%2A> -Eigenschaftensatz auf `true`, gibt diese Eigenschaft eine Auflistung mit den Elementen, die im ausgewählten der <xref:System.Windows.Forms.ListView>. Für eine Einfachauswahl <xref:System.Windows.Forms.ListView>, gibt diese Eigenschaft eine Auflistung, die nur in ausgewählten Element enthält die <xref:System.Windows.Forms.ListView>. Weitere Informationen zu den Tasks, die mit den Elementen in der Auflistung ausgeführt werden können, finden Sie unter <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>.  
  
 Wenn Sie eine Auflistung von Indexpositionen in abrufen möchten die <xref:System.Windows.Forms.ListView.ListViewItemCollection> der Elemente, die im ausgewählten der <xref:System.Windows.Forms.ListView> -Steuerelement, statt die Elemente, die ausgewählt sind, verwenden die <xref:System.Windows.Forms.ListView.SelectedIndices%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.ListView.SelectedItems%2A>, <xref:System.Windows.Forms.ListView.SelectedIndexChanged> -Ereignis und <xref:System.Windows.Forms.ListView.HeaderStyle%2A> Elemente und die <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> Klasse. Um dieses Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular, enthält ein <xref:System.Windows.Forms.ListView> Objekt mit dem Namen `ListView1` und ein <xref:System.Windows.Forms.TextBox> mit dem Namen `TextBox1`. Rufen Sie die `InitializeListView` Methode aus den Konstruktor des Formulars oder `Load` Methode. Dieses Beispiel benötigen Sie der Ereignishandler korrekt zugeordnet ist die <xref:System.Windows.Forms.ListView.SelectedIndexChanged> Ereignis  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ShowGroups">
      <MemberSignature Language="C#" Value="public bool ShowGroups { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowGroups" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowGroups As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowGroups { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Elemente in Gruppen angezeigt werden, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, um Elemente in Gruppen anzuzeigen, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Gruppen zugewiesen eine <xref:System.Windows.Forms.ListView> Steuerelement angezeigt werden, wenn die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft wird auf einen Wert festgelegt, außer <xref:System.Windows.Forms.View.List>. Die <xref:System.Windows.Forms.ListView> gruppenfunktion ermöglicht die Erstellung visuelle Gruppen logisch zusammengehörigen <xref:System.Windows.Forms.ListView> Elemente unter Windows XP und Windows Server 2003. Um dieses Feature zu aktivieren, muss Ihre Anwendung Aufrufen der <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> Methode. Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Windows.Forms.ListView.Groups%2A>-Eigenschaft.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Groups" />
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="ShowItemToolTips">
      <MemberSignature Language="C#" Value="public bool ShowItemToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowItemToolTips" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowItemToolTips" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowItemToolTips As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowItemToolTips { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob für die in <see cref="T:System.Windows.Forms.ListViewItem" /> enthaltenen <see cref="T:System.Windows.Forms.ListView" />-Objekte die QuickInfo angezeigt wird, oder legt diesen Wert fest.</summary>
        <value>
          <see langword="true" />, wenn die <see cref="T:System.Windows.Forms.ListViewItem" />-QuickInfo angezeigt werden soll, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.ListView.ShowItemToolTips%2A> -Eigenschaftensatz auf `true`, stellen alle <xref:System.Windows.Forms.ListViewItem> , die eine QuickInfo angezeigt wurde; andernfalls wird nichts angezeigt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListView.ShowItemToolTips%2A> und <xref:System.Windows.Forms.ListViewItem.ToolTipText%2A?displayProperty=nameWithType> Eigenschaften. Um dieses Beispiel auszuführen, fügen Sie den Code in einem Windows Form, und rufen `InitializeItemsWithToolTips` aus den Konstruktor des Formulars oder <xref:System.Windows.Forms.Form.Load> -Ereignishandler.  
  
 [!code-csharp[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmallImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList SmallImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList SmallImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SmallImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property SmallImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ SmallImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Windows.Forms.ImageList" /> ab, die verwendet werden soll, wenn die Elemente im Steuerelement als kleine Symbole angezeigt werden, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ImageList" /> mit den Symbolen, die verwendet werden sollen, wenn die <see cref="P:System.Windows.Forms.ListView.View" />-Eigenschaft auf <see cref="F:System.Windows.Forms.View.SmallIcon" /> festgelegt ist. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaft ermöglicht Ihnen die Angabe ein <xref:System.Windows.Forms.ImageList> -Objekt, das beim Anzeigen von Elementen mit kleinen Symbolen verwendet Symbole enthält (wenn der <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft auf einen beliebigen Wert außer festgelegt ist <xref:System.Windows.Forms.View.LargeIcon>). Die <xref:System.Windows.Forms.ListView> -Steuerelement Grafiken zu formatieren, akzeptiert der <xref:System.Windows.Forms.ImageList> Steuerelement unterstützt, wenn Symbole angezeigt. Die <xref:System.Windows.Forms.ListView> Steuerelement ist nicht beschränkt auf ICO-Dateien. Einmal eine <xref:System.Windows.Forms.ImageList> zugewiesen ist die <xref:System.Windows.Forms.ListView.SmallImageList%2A> -Eigenschaft, die Sie festlegen können die <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> -Eigenschaft jedes <xref:System.Windows.Forms.ListViewItem> in der <xref:System.Windows.Forms.ListView> Steuerelement an die Indexposition des entsprechenden Bilds in der <xref:System.Windows.Forms.ImageList>. Die Größe der Symbole für die <xref:System.Windows.Forms.ListView.SmallImageList%2A> wird angegeben, indem die <xref:System.Windows.Forms.ImageList.ImageSize%2A> Eigenschaft.  
  
 Da nur ein Index für die angegeben werden kann die <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType> -Eigenschaft, die <xref:System.Windows.Forms.ImageList> Objekte in angegebenen der <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften müssen dieselben Indexpositionen für die anzuzeigenden Bilder. Z. B. wenn die <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> Eigenschaft eine <xref:System.Windows.Forms.ListViewItem> festgelegt ist auf 0, muss sich die Bilder, die für kleine und große Symbole an die gleiche Indexposition in der <xref:System.Windows.Forms.ImageList> Objekte in angegebenen der <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften.  
  
> [!NOTE]
>  Wenn die Bilder mit Schlüsseln angegeben werden, müssen Sie kleine und große Versionen des Bilds an der gleichen Indexposition in der jeweiligen Bildliste zu platzieren. Beim Wechsel zwischen den Ansichten ist die Indexposition des Bilds in einer Liste verwendet, das Bild in die andere Liste unabhängig von der angegebenen Schlüsselwert gesucht werden soll.  
  
 Festlegen der <xref:System.Windows.Forms.ImageList> beim Anzeigen von Elementen mit große Symbole verwendet (wenn die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft auf festgelegt ist <xref:System.Windows.Forms.View.LargeIcon>), verwenden die <xref:System.Windows.Forms.ListView.LargeImageList%2A> Eigenschaft. Wenn Sie Bilder verwenden, um die Anzeige Elementstatus verwenden möchten die <xref:System.Windows.Forms.ListView.StateImageList%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sortiert die Elemente der Listenansicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalerweise werden Elemente mit sortiert die <xref:System.Windows.Forms.ListView.Sorting%2A> -Eigenschaft, die Elemente, die basierend auf den Elementtext sortiert. Um die Sortierreihenfolge anzupassen, müssen Sie eine Klasse, die implementiert Schreiben der <xref:System.Collections.IComparer> Schnittstelle, und legen Sie die <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> Eigenschaft auf ein Objekt dieser Klasse. Dies empfiehlt sich beispielsweise, wenn Sie Elemente nach Unterelementtext sortieren möchten. Weitere Informationen zum Ausführen der manuellen Sortierung von Elementen finden Sie im Beispiel für die <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> Eigenschaft.  
  
 Wenn die <xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType> Eigenschaft wird auf einen Wert festgelegt, außer <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> oder, wenn die <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> Eigenschaft festgelegt ist, automatisch die Liste sortiert wird, wenn Elemente hinzugefügt werden. Elemente werden nicht automatisch sortiert werden, wenn der Bezeichnungstext ändert.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      </Docs>
    </Member>
    <Member MemberName="Sorting">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.SortOrder Sorting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SortOrder Sorting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Sorting" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorting As SortOrder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::SortOrder Sorting { System::Windows::Forms::SortOrder get(); void set(System::Windows::Forms::SortOrder value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SortOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Sortierreihenfolge für Elemente im Steuerelement ab oder legt diese fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.SortOrder" />-Werte. Der Standardwert ist <see cref="F:System.Windows.Forms.SortOrder.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.Sorting%2A> -Eigenschaft können Sie angeben, und zwar unabhängig davon, ob Elemente sortiert werden, in der <xref:System.Windows.Forms.ListView> Steuerelement. Standardmäßig wird keine Sortierung ausgeführt. Bei der <xref:System.Windows.Forms.ListView.Sorting%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.SortOrder.Ascending> oder <xref:System.Windows.Forms.SortOrder.Descending>, die Elemente in der <xref:System.Windows.Forms.ListView> werden automatisch in aufsteigender alphabetischen Reihenfolge sortiert (wenn die Eigenschaft auf festgelegt ist <xref:System.Windows.Forms.SortOrder.Ascending>) oder absteigender alphabetischer Reihenfolge (bei der -Eigenschaftensatz auf <xref:System.Windows.Forms.SortOrder.Descending>). Sie können diese Eigenschaft verwenden, Elemente, die in angezeigt werden, automatisch zu sortieren Ihre <xref:System.Windows.Forms.ListView> Steuerelement, damit sie leichter für Benutzer, um Elemente zu suchen, wenn eine große Anzahl von Elementen zur Verfügung stehen.  
  
 Wenn Sie einen eigenen Elemente sortieren, anstatt ausführen möchten die <xref:System.Windows.Forms.ListView.Sorting%2A> -Eigenschaft, mit der <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> Eigenschaft in Kombination mit der <xref:System.Windows.Forms.ListView.Sort%2A> Methode.  
  
 Wenn die <xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType> Eigenschaft wird auf einen Wert festgelegt, außer <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> oder, wenn die <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> Eigenschaft festgelegt ist, wird automatisch die Liste sortiert beim Hinzufügen von Elementen. Elemente werden nicht automatisch sortiert werden, wenn der Bezeichnungstext ändert.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der angegebene Wert ist keiner der <see cref="T:System.Windows.Forms.SortOrder" />-Werte.</exception>
        <altmember cref="T:System.Windows.Forms.SortOrder" />
      </Docs>
    </Member>
    <Member MemberName="StateImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList StateImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList StateImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.StateImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property StateImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ StateImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Windows.Forms.ImageList" /> ab, die den von der Anwendung definierten Zuständen im Steuerelement zugeordnet ist, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ImageList" />, die eine Gruppe von Zustandsgrafiken enthält, mit denen der von der Anwendung definierte Zustand eines Elements angegeben werden kann. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.StateImageList%2A> Eigenschaft ermöglicht Ihnen die Angabe einer <xref:System.Windows.Forms.ImageList> , Bilder, die zur Darstellung eines Elements in einem anwendungsspezifischen Status enthält eine <xref:System.Windows.Forms.ListView> Steuerelement. Status der Bilder werden auf der linken Seite eines Symbols für das Element angezeigt. Status Bilder, z. B. checked und unchecked Kontrollkästchen können Sie anwendungsspezifische Elementzustände anzugeben. Status Bilder sind in allen Ansichten des sichtbar der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
 Wenn ein <xref:System.Windows.Forms.ImageList> wird angegeben, der <xref:System.Windows.Forms.ListView.StateImageList%2A> Eigenschaft und die <xref:System.Windows.Forms.ListView.CheckBoxes%2A> -Eigenschaftensatz auf `true`, die Bilder an den Indexpositionen 0 und 1 in der <xref:System.Windows.Forms.ImageList> werden angezeigt, statt das Kontrollkästchen. Das Bild an Indexposition 0 wird angezeigt, statt das Kontrollkästchen deaktiviert, und das Bild an Indexposition 1 anstelle der aktivierten Kontrollkästchens angezeigt.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ist für diese Klasse nicht relevant.</summary>
        <value>Der im <see cref="T:System.Windows.Forms.ListView" />-Steuerelement anzuzeigende Text.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich die <see cref="P:System.Windows.Forms.ListView.Text" />-Eigenschaft ändert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size TileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size TileSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property TileSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size TileSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Größe der in der Kachelansicht angezeigten Fenster ab oder legt die Größe fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Size" />, die die neue Fenstergröße enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft steuert die Größe der Kacheln, wenn die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>. Durch Festlegen dieser Eigenschaft ist nützlich, um Zeilenumbrüche zu vermeiden, wenn Unterelementtext zu lang, die auf einer einzelnen Zeile angezeigt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListView> Tiling-Funktion. Im Beispiel zeigt die Ansicht "Nebeneinander" Elemente, die Bücher darstellen. Jedes Element wird als eine Kachel, enthält ein Symbol für ein Buch, den Titel, Autor und Jahr der Veröffentlichung angezeigt. Für den Beispielcode funktioniert müssen Sie eine Symboldatei, die Book.ico im selben Verzeichnis wie das Beispiel einschließen. Sehen Sie die Kachel ohne Symbole, die im Zusammenhang mit Zeilen auskommentieren der <xref:System.Windows.Forms.ImageList> Objekt.  
  
 [!code-cpp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CPP/listviewtilingexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CS/listviewtilingexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/VB/listviewtilingexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="TopItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem TopItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem TopItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TopItem" />
      <MemberSignature Language="VB.NET" Value="Public Property TopItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ TopItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das erste sichtbare Element im Steuerelement ab oder legt das Element fest.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.ListViewItem" />, das das erste sichtbare Element im Steuerelement darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zu Beginn wird das Element mit die Indexposition 0 (null) am Anfang der <xref:System.Windows.Forms.ListView> Steuerelement. Wenn die <xref:System.Windows.Forms.ListView> Inhalt des Steuerelements ein Bildlauf ausgeführt werden, kann ein anderes Element am oberen Rand des Steuerelements. Sie können diese Eigenschaft anzugeben oder zu bestimmen, welches Element am oberen Rand angezeigt wird der <xref:System.Windows.Forms.ListView> Steuerelement. Der Wert, der die <xref:System.Windows.Forms.ListView.TopItem%2A> Eigenschaft wird nicht immer beibehalten, je nachdem, in dem das gewünschte oberste Element in der Liste angezeigt wird.  
  
 Die Anzahl der Elemente angezeigt, in einem <xref:System.Windows.Forms.ListView> Steuerelement zu einem beliebigen Zeitpunkt auf die Höhe der Listenansicht als auch die Größe der darin enthaltenen Elemente abhängt. Wenn die Elemente der Höhe der Listenansicht überschreiten, werden die Elemente auf mehreren Seiten weiterhin der Benutzer einen Bildlauf kann. Wenn Sie festlegen, die <xref:System.Windows.Forms.ListView.TopItem%2A> Eigenschaft, um ein Element in der letzten Seite des der <xref:System.Windows.Forms.ListView>, das Element wird automatisch Bildlauf angezeigt werden; jedoch <xref:System.Windows.Forms.ListView.TopItem%2A> festgelegt, um das tatsächliche obere Element der letzten Seite.  
  
 Um sicherzustellen, dass ein bestimmtes Element in den sichtbaren Bereich des Steuerelements (jedoch nicht unbedingt in der obersten Position), verwenden die <xref:System.Windows.Forms.ListView.EnsureVisible%2A> Methode.  
  
> [!NOTE]
>  Durch Festlegen dieser Eigenschaft hat keine Wirkung, wenn die <xref:System.Windows.Forms.ListView.Scrollable%2A> Eigenschaftswert ist `false`.  
>   
>  Durch Festlegen dieser Eigenschaft wird nicht unterstützt in Versionen von der [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] vor Version 2.0.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, Zurücksetzen des Formats der eine <xref:System.Windows.Forms.ListViewItem> Unterelemente mithilfe des-Objekts den <xref:System.Windows.Forms.ListView.TopItem%2A> Eigenschaft und die <xref:System.Windows.Forms.ListViewItem.ListViewSubItem.ResetStyle%2A?displayProperty=nameWithType> Methode. Fügen Sie zum Ausführen des Beispiels den folgenden Code in ein Formular mit einer Schaltfläche mit dem Namen `Button1` , und rufen Sie die `InitializeListView` -Methode im Konstruktor des Formulars oder <xref:System.Windows.Forms.Form.Load> -Ereignishandler.  
  
 [!code-cpp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Windows.Forms.ListView.View" />-Eigenschaft ist auf <see cref="F:System.Windows.Forms.View.LargeIcon" />, <see cref="F:System.Windows.Forms.View.SmallIcon" /> oder <see cref="F:System.Windows.Forms.View.Tile" /> festgelegt.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolgendarstellung des <see cref="T:System.Windows.Forms.ListView" />-Steuerelements zurück.</summary>
        <returns>Eine Zeichenfolge, die den Steuerelementtyp, die Anzahl der Elemente im <see cref="T:System.Windows.Forms.ListView" />-Steuerelement sowie den Typ des ersten Elements in der <see cref="T:System.Windows.Forms.ListView" /> angibt, wenn die Anzahl nicht 0 (null) ist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateExtendedStyles">
      <MemberSignature Language="C#" Value="protected void UpdateExtendedStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateExtendedStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.UpdateExtendedStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateExtendedStyles ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateExtendedStyles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualisiert die erweiterten Stile, die auf das Listenansicht-Steuerelement angewendet werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können Sie die <xref:System.Windows.Forms.ListView.UpdateExtendedStyles%2A> Methode in der abgeleiteten Klasse überschreiben Sie die erweiterten Stile, die verwendet werden, indem die <xref:System.Windows.Forms.ListView> Steuerelement. Wenn Sie diese Methode aufrufen, Sie sollten sicherstellen, dass die erweiterten Stile, die durch Eigenschaften festgelegt werden, auf die <xref:System.Windows.Forms.ListView> Steuerelement in die abgeleitete Version des Steuerelements verwendet werden.  
  
 Im folgenden werden die Eigenschaften, die einen erweiterten Stil zum Anwenden der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
-   <xref:System.Windows.Forms.ListView.Activation%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.HoverSelection%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.AllowColumnReorder" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
        <altmember cref="P:System.Windows.Forms.ListView.FullRowSelect" />
        <altmember cref="P:System.Windows.Forms.ListView.GridLines" />
        <altmember cref="P:System.Windows.Forms.ListView.HoverSelection" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleStateImageBehavior">
      <MemberSignature Language="C#" Value="public bool UseCompatibleStateImageBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleStateImageBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCompatibleStateImageBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCompatibleStateImageBehavior { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, mit dem angegeben wird, ob für die <see cref="T:System.Windows.Forms.ListView" /> ein Verhalten der Zustandsgrafik verwendet wird, das mit [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], Version 1.1, oder [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], Version 2.0, kompatibel ist, oder legt diesen Wert fest.</summary>
        <value>
          <see langword="true" />, wenn das Verhalten der Zustandsgrafik mit [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], Version 1.1 kompatibel ist; <see langword="false" />, wenn das Verhalten mit [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], Version 2.0 kompatibel ist. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Änderungen an der <xref:System.Windows.Forms.ListView> steuern, der [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 aktivieren benutzerdefinierter Zustandsbilder festgelegt werden, um anzugeben, ob ein Element aktiviert oder deaktiviert ist oder in einem unbestimmten Zustand. Durch das Hinzufügen dieser Funktion wird die [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 weist ein anderes Verhalten als .NET Framework 1.1. Wenn Sie Anwendungen erstellt haben, die abhängig vom Verhalten in der [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1, stellen sicher, dass die <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> -Eigenschaftensatz auf `true`, dies ist der Standardwert. Um die Vorteile der benutzerdefinierten Zustandsbilder vollständig nutzen zu können, ist <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> auf `false`.  
  
> [!NOTE]
>  Bei Verwendung der [!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)] -Designer die <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> -Eigenschaftensatz auf `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.View View { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.View View" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.View" />
      <MemberSignature Language="VB.NET" Value="Public Property View As View" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::View View { System::Windows::Forms::View get(); void set(System::Windows::Forms::View value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, wie Elemente im Steuerelement angezeigt werden, oder legt dieses fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.View" />-Werte. Der Standardwert ist <see cref="F:System.Windows.Forms.View.LargeIcon" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaft können Sie angeben, die Art der Anzeige der <xref:System.Windows.Forms.ListView> Steuerelement verwendet, um Elemente anzuzeigen. Sie können festlegen, die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft, um jedes Element mit großen oder kleinen Symbolen anzuzeigen, oder Elemente in einer vertikalen Liste anzeigen. Die ausführlichste Option ist die Detailansicht, die Sie nicht nur die Elemente jedoch alle Unterelemente für jedes Element anzeigen kann. Jedes Element wird in einem Raster mit der jedes Element vertikal aufgelistet und die Unterelemente für jedes Element in einer Spalte mit Spaltenüberschriften angezeigt angezeigt. Die Detailansicht ist eine ideale Möglichkeit, Datenbankinformationen für einen Benutzer angezeigt. Windows XP und Windows Server 2003 können Sie Elemente als Kacheln anzeigen, die grafischen und textbasierten Daten neu verteilen, indem Sie ein großes Symbol zusammen mit Informationen zu den Unterelementen Ihrer Wahl anzeigen. Zum Aktivieren der Tile-Ansicht Ihrer Anwendung aufrufen, muss die <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> Methode. Die Miniaturansicht zeigt jedes Element mit einem Symbol und Textinformationen rechts neben dem Symbol an. Die großes Bild zeigt die einzelnen Elemente durch ein Symbol und Textinformationen unterhalb des Symbols. Die Größe der Symbole für die Bildliste wird angegeben, durch die <xref:System.Windows.Forms.ImageList.ImageSize%2A> Eigenschaft von der <xref:System.Windows.Forms.ImageList> für die <xref:System.Windows.Forms.ListView.SmallImageList%2A> oder <xref:System.Windows.Forms.ListView.LargeImageList%2A> Eigenschaften.  
  
> [!NOTE]
>  Wenn Sie mehrere Bildlisten für kleine und große Symbolansicht mit verwenden eine <xref:System.Windows.Forms.ListView> -Steuerelement, platzieren Sie kleine und große Versionen des Image gleichzeitig Indexposition, an der in der jeweiligen Bildliste. Beim Wechsel zwischen den Ansichten ist die Indexposition des Bilds in einer Liste verwendet, das Bild in die andere Liste unabhängig von der angegebenen Schlüsselwert gesucht werden soll.  
  
 Die meisten Eigenschaften in der <xref:System.Windows.Forms.ListView> Steuerelement beeinflussen, wie die verschiedenen Ansichten Verhalten oder angezeigt werden. Einige Eigenschaften, die sich auf die Ansichten für die Elemente sind nur hilfreich, wenn die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft auf einen bestimmten Wert festgelegt ist, während andere in allen Ansichten nützlich sind. Z. B. Eigenschaften, z. B. <xref:System.Windows.Forms.ListView.GridLines%2A> und <xref:System.Windows.Forms.ListView.FullRowSelect%2A> sind nur hilfreich, wenn die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, während die <xref:System.Windows.Forms.ListView.MultiSelect%2A> und <xref:System.Windows.Forms.ListView.CheckBoxes%2A> Eigenschaften sind in allen Ansichten nützlich.  
  
 Die folgende Tabelle zeigt einige der <xref:System.Windows.Forms.ListView> Member und die Ansichten, die sie in gültig sind.  
  
|ListView-Element|Ansicht|  
|---------------------|----------|  
|<xref:System.Windows.Forms.ListView.Alignment%2A>-Eigenschaft|<xref:System.Windows.Forms.View.SmallIcon> oder <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoArrange%2A>-Eigenschaft|<xref:System.Windows.Forms.View.SmallIcon> oder <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A>-Methode|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.CheckBoxes%2A>|Alle Ansichten außer <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Columns%2A>-Eigenschaft|<xref:System.Windows.Forms.View.Details> oder <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem>-Ereignis|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.FindItemWithText%2A>-Methode|<xref:System.Windows.Forms.View.Details>, <xref:System.Windows.Forms.View.List>oder <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.FindNearestItem%2A>-Methode|<xref:System.Windows.Forms.View.SmallIcon> oder <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.GetItemAt%2A>-Methode|<xref:System.Windows.Forms.View.Details> oder <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Groups%2A>-Eigenschaft|Alle Ansichten außer <xref:System.Windows.Forms.View.List>|  
|<xref:System.Windows.Forms.ListView.HeaderStyle%2A>-Eigenschaft|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.InsertionMark%2A>-Eigenschaft|<xref:System.Windows.Forms.View.LargeIcon>, <xref:System.Windows.Forms.View.SmallIcon>oder <xref:System.Windows.Forms.View.Tile>|  
  
 Sie können die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft, um unterschiedliche Sichten der Daten in der Anwendung bereitzustellen, oder So sperren Sie eine bestimmte Ansicht, um diese Vorteile zu nutzen. Z. B. die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaftensatz wird häufig zum <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType> , da die Detailansicht eine Reihe von Optionen, die nicht in den anderen Ansichten zur Verfügung stellt.  
  
> [!NOTE]
>  Wenn Ihre <xref:System.Windows.Forms.ListView> Steuerelement enthält keine Spaltenheader angegeben, und legen Sie die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, die <xref:System.Windows.Forms.ListView> Steuerelement keine Elemente angezeigt. Wenn Ihre <xref:System.Windows.Forms.ListView> Steuerelement enthält keine Spaltenheader angegeben, und legen Sie die <xref:System.Windows.Forms.ListView.View%2A> Eigenschaft, um <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>, die <xref:System.Windows.Forms.ListView> Steuerelement wird keine Unterelemente angezeigt.  
  
 Ansicht "Nebeneinander" wird jedes Element mit einem großen Symbol auf der linken und der Text auf der rechten Seite angezeigt. Die Textinformationen besteht aus den Elementnamen gefolgt von Unterelemente. Standardmäßig wird nur das erste Unterelement angezeigt, der die Bezeichnung des Elements entspricht. Um zusätzliche Unterelemente anzuzeigen, fügen Sie <xref:System.Windows.Forms.ColumnHeader> Datenbankobjekte in der <xref:System.Windows.Forms.ListView.Columns%2A> Auflistung. Jedes Unterelement in der Kachel entspricht einer Spaltenüberschrift. Um zu steuern, welche Unterelemente und die Reihenfolge, in der sie angezeigt werden, müssen Sie festlegen der <xref:System.Windows.Forms.ListViewItem.ListViewSubItem.Name%2A?displayProperty=nameWithType> Eigenschaft für jedes Element und die <xref:System.Windows.Forms.ColumnHeader.Name%2A?displayProperty=nameWithType> Eigenschaft für jeden Header. Sie können dann hinzufügen, entfernen und neu anordnen Header in der <xref:System.Windows.Forms.ListView.Columns%2A> -Auflistung, um das gewünschte Ergebnis zu erzielen.  
  
 Um die Größe der Kacheln in der Ansicht "Nebeneinander" zu steuern, legen die <xref:System.Windows.Forms.ListView.TileSize%2A> Eigenschaft. Dies ist nützlich, um Zeilenumbrüche zu vermeiden, wenn Unterelementtext für eine einzelne Zeile zu lang ist.  
  
 Ein Beispiel der Ansicht "Nebeneinander" finden Sie unter der <xref:System.Windows.Forms.ListView.TileSize%2A> Eigenschaft.  
  
> [!NOTE]
>  Obwohl Spalten nur in der Detailansicht angezeigt werden, werden die Unterelemente ohne Spaltenheader nicht in der Detailansicht oder der Ansicht "Nebeneinander" angezeigt.  
  
 Ansicht "Nebeneinander" steht nur unter Windows XP und Windows Server 2003 werden, wenn die Anwendung aufruft die <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> Methode. Unter älteren Betriebssystemen hat Code in Bezug auf die Ansicht "Nebeneinander" keine Auswirkungen, und das <xref:System.Windows.Forms.ListView>-Steuerelement wird in der Ansicht "Große Symbole" angezeigt. Daher kann die jeglicher Code, der von der Ansicht "Nebeneinander" abhängig ist nicht ordnungsgemäß.  
  
 Sie können z. B. Code enthalten, die bestimmt, ob die Ansicht "Nebeneinander" verfügbar ist, zu eine andere Funktionalität bereitstellen, wenn sie nicht verfügbar ist. Beispielsweise bei Verwendung von Ownerdrawing zum Anpassen der Darstellung von <xref:System.Windows.Forms.ListView> Elemente in der Ansicht "Nebeneinander", möglicherweise möchten Code zum Zeichnen, die die Ansicht "große Symbole" verwenden, bei der Ausführung unter Betriebssystemen, die Ansicht "Nebeneinander" nicht unterstützen.  
  
 Die Funktion "Nebeneinanderanzeige" wird von der gleichen Bibliothek bereitgestellt, die das Feature des Betriebssystems Designs bereitstellt. Aufrufen, um die Verfügbarkeit dieser Bibliothek zu überprüfen, die <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> -methodenüberladung, und übergeben Sie die <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> Wert.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ListView> Steuerelement mit drei <xref:System.Windows.Forms.ListViewItem> angegebenen Objekte und drei <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> Objekte, die für jedes Element angegeben. Im Beispiel wird auch erstellt <xref:System.Windows.Forms.ColumnHeader> Objekte die Unterelemente in der Detailansicht angezeigt. Zwei <xref:System.Windows.Forms.ImageList> Objekte werden auch im Bereitstellen von Images für das Codebeispiel erstellt die <xref:System.Windows.Forms.ListViewItem> Objekte. Diese <xref:System.Windows.Forms.ImageList> Objekte werden hinzugefügt, um die <xref:System.Windows.Forms.ListView.LargeImageList%2A> und <xref:System.Windows.Forms.ListView.SmallImageList%2A> Eigenschaften. Das Beispiel verwendet die folgenden Eigenschaften bei der Erstellung der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Dieses Beispiel benötigen Sie, dass Sie den Code hinzugefügt haben eine <xref:System.Windows.Forms.Form> und rufen Sie die Methode, die im Beispiel aus dem Konstruktor oder eine andere Methode auf dem Formular erstellt. Im Beispiel erfordert auch, dass Bilder mit dem Namen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, und `MyLargeImage2` befinden sich im Stammverzeichnis von Laufwerk "c"  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der angegebene Wert ist keiner der <see cref="T:System.Windows.Forms.View" />-Werte.</exception>
        <altmember cref="T:System.Windows.Forms.View" />
        <altmember cref="P:System.Windows.Forms.ListView.TileSize" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="VirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VirtualItemsSelectionRangeChanged As ListViewVirtualItemsSelectionRangeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventHandler ^ VirtualItemsSelectionRangeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich eine <see cref="T:System.Windows.Forms.ListView" /> im virtuellen Modus befindet und der Auswahlzustand eines Bereichs von Elementen geändert wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.ListView> befindet sich nicht im virtuellen Modus der <xref:System.Windows.Forms.ListView.ItemSelectionChanged> Ereignis erfolgt.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Elements. Im Beispiel meldet ein Ereignishandler für das Vorkommen der <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> Ereignis. Dieser Bericht hilft Ihnen, um zu erfahren, wann das Ereignis tritt auf, und unterstützen Sie beim Debuggen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, sollten Sie ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, das eine Instanz des Typs enthält <xref:System.Windows.Forms.ListView> mit dem Namen `ListView1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#482](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#482)]
 [!code-vb[System.Windows.Forms.EventExamples#482](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#482)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      </Docs>
    </Member>
    <Member MemberName="VirtualListSize">
      <MemberSignature Language="C#" Value="public int VirtualListSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualListSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualListSize" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualListSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VirtualListSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von <see cref="T:System.Windows.Forms.ListViewItem" />-Objekten in einer Liste im virtuellen Modus ab, oder legt diese fest.</summary>
        <value>Die Anzahl von <see cref="T:System.Windows.Forms.ListViewItem" />-Objekten, die im virtuellen Modus in der <see cref="T:System.Windows.Forms.ListView" /> enthalten sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Abrufen oder Festlegen der <xref:System.Windows.Forms.ListView.VirtualListSize%2A> Eigenschaft beim <xref:System.Windows.Forms.ListView.VirtualMode%2A> festgelegt `false` hat keine Auswirkung auf die <xref:System.Windows.Forms.ListView>.  
  
 Wenn <xref:System.Windows.Forms.ListView.VirtualMode%2A> festgelegt ist, um `true`, und die <xref:System.Windows.Forms.ListView.VirtualListSize%2A> Eigenschaft größer als 0 ist, müssen Sie behandeln die <xref:System.Windows.Forms.ListView.RetrieveVirtualItem> -Ereignis, und ein gültiges <xref:System.Windows.Forms.ListViewItem>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> ist auf einen Wert unter 0 (null) festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> ist auf <see langword="true" /> festgelegt, <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> ist größer als 0 (null), und <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> wird nicht behandelt.</exception>
        <altmember cref="P:System.Windows.Forms.ListView.VirtualMode" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMode">
      <MemberSignature Language="C#" Value="public bool VirtualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VirtualMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualMode" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool VirtualMode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob für das <see cref="T:System.Windows.Forms.ListView" />-Steuerelement eigene Operationen zur Datenverwaltung bereitgestellt wurden.</summary>
        <value>
          <see langword="true" />, wenn <see cref="T:System.Windows.Forms.ListView" /> Datenverwaltungsvorgänge verwendet, die Sie bereitstellen; andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Festlegen der <xref:System.Windows.Forms.ListView.VirtualMode%2A> Eigenschaft `true` setzt die <xref:System.Windows.Forms.ListView> in virtuellen Modus. In der virtuelle Modus wird die normale <xref:System.Windows.Forms.ListView.Items%2A> Auflistung wird nicht verwendet. Stattdessen <xref:System.Windows.Forms.ListViewItem> Objekte werden dynamisch erstellt, als die <xref:System.Windows.Forms.ListView> benötigt werden.  
  
 Virtueller Modus kann in vielen Situationen nützlich sein. Wenn eine <xref:System.Windows.Forms.ListView> Objekt muss aufgefüllt sein, aus einer sehr großen Auflistung bereits im Arbeitsspeicher, erstellen eine <xref:System.Windows.Forms.ListViewItem> -Objekt für jeden Eintrag sehr aufwändig sein kann. Im virtuellen Modus werden nur die erforderlichen Elemente erstellt. In anderen Fällen können die Werte von der <xref:System.Windows.Forms.ListViewItem> Objekte müssen häufig neu berechnet werden, und dadurch für die gesamte Auflistung Leistung nicht akzeptabel wäre. Im virtuellen Modus werden nur die erforderlichen Elemente berechnet.  
  
 Damit der virtuelle Modus verwenden zu können, müssen Sie behandeln die <xref:System.Windows.Forms.ListView.RetrieveVirtualItem> Ereignis, das ausgelöst wird, dass Sie jedes Mal die <xref:System.Windows.Forms.ListView> erfordert ein Element. Dieser Ereignishandler zu erstellende der <xref:System.Windows.Forms.ListViewItem> Objekt, das am angegebenen Index gehört. Darüber hinaus die <xref:System.Windows.Forms.ListView.VirtualListSize%2A> Eigenschaft muss auf die Größe der virtuellen Liste festgelegt werden.  
  
 Behandlung von der <xref:System.Windows.Forms.ListView.SearchForVirtualItem> Ereignis ermöglicht das Suchen in der virtuelle Modus. Wenn dieses Ereignis nicht behandelt wird, die <xref:System.Windows.Forms.ListView.FindItemWithText%2A> und <xref:System.Windows.Forms.ListView.FindNearestItem%2A> Methoden zurück, `null`.  
  
 Sie behandeln können die <xref:System.Windows.Forms.ListView.CacheVirtualItems> Ereignis, um einen Cache der verwalten <xref:System.Windows.Forms.ListViewItem> Objekte. Wenn die Berechnung oder Suche beim Erstellen einer <xref:System.Windows.Forms.ListViewItem> Objekt ist teuer, warten ein Cache kann die Leistung verbessern.  
  
 Wenn die <xref:System.Windows.Forms.ListView.View%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.View.Tile>, der Wert wird automatisch geändert werden, um <xref:System.Windows.Forms.View.LargeIcon> Wenn <xref:System.Windows.Forms.ListView.VirtualMode%2A> festgelegt ist, um `true`.  
  
 Im virtuellen Modus der <xref:System.Windows.Forms.ListView.Items%2A> Sammlung ist deaktiviert. Versucht, darauf zuzugreifen, löst eine <xref:System.InvalidOperationException>. Dasselbe gilt für die <xref:System.Windows.Forms.ListView.CheckedItems%2A> Auflistung und die <xref:System.Windows.Forms.ListView.SelectedItems%2A> Auflistung. Wenn Sie die ausgewählten oder überprüften Elemente abrufen möchten, verwenden Sie die <xref:System.Windows.Forms.ListView.SelectedIndices%2A> und <xref:System.Windows.Forms.ListView.CheckedIndices%2A> Sammlungen stattdessen.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht eine einfache <xref:System.Windows.Forms.ListView> , deren Inhalt werden die ersten zehn Tausend Quadrate. Es behandelt, suchen und verwendet einen Cache für eine höhere Leistung.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> ist auf <see langword="true" /> festgelegt, und eine der folgenden Voraussetzungen ist erfüllt:  
  
-   <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> ist größer als 0 (null), und <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> wird nicht behandelt.  
  
     - oder -   
  
-   <see cref="P:System.Windows.Forms.ListView.Items" />, <see cref="P:System.Windows.Forms.ListView.CheckedItems" /> oder <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> enthält Elemente.  
  
     - oder -   
  
-   <see cref="P:System.Windows.Forms.ListView.Items" /> wird bearbeitet.</exception>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Die zu verarbeitende Windows-<see cref="T:System.Windows.Forms.Message" />.</param>
        <summary>Überschreibt <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="MaskedTextBox" FullName="System.Windows.Forms.MaskedTextBox">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e49b474ee1b64e6e65bf4b64871e29836dc8d1d7" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73397089" /></Metadata><TypeSignature Language="C#" Value="public class MaskedTextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MaskedTextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MaskedTextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class MaskedTextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class MaskedTextBox : System::Windows::Forms::TextBoxBase" />
  <TypeSignature Language="F#" Value="type MaskedTextBox = class&#xA;    inherit TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("MaskInputRejected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Mask")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Verwendet eine Maske, um ordnungsgemäße Benutzereingaben von nicht ordnungsgemäßen zu unterscheiden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox>-Klasse ist ein erweitertes <xref:System.Windows.Forms.TextBox> Steuerelement, das eine deklarative Syntax zum akzeptieren oder ablehnen von Benutzereingaben unterstützt. Mit der <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>-Eigenschaft können Sie die folgende Eingabe angeben, ohne eine benutzerdefinierte Validierungs Logik in Ihre Anwendung schreiben zu müssen:  
  
-   Erforderliche Eingabezeichen.  
  
-   Optionale Eingabezeichen.  
  
-   Der Typ der Eingabe, der an einer bestimmten Position in der Maske erwartet wird. beispielsweise eine Ziffer oder ein alphabetisches oder alphanumerisches Zeichen.  
  
-   Masken Literale oder Zeichen, die direkt in der <xref:System.Windows.Forms.MaskedTextBox>angezeigt werden sollen; beispielsweise die Bindestriche (-) in einer Telefonnummer oder das Währungssymbol in einem Preis.  
  
-   Spezielle Verarbeitung von Eingabezeichen; um z. b. alphabetische Zeichen in Großbuchstaben zu konvertieren.  
  
 Wenn ein <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement zur Laufzeit angezeigt wird, stellt es die Maske als eine Reihe von Eingabe Aufforderungs Zeichen und optionale Literalzeichen dar. Jede bearbeitbare Masken Position, die eine erforderliche oder optionale Eingabe darstellt, wird mit einem einzelnen Eingabe Aufforderungs Zeichen angezeigt. Beispielsweise wird das Nummern Zeichen (#) häufig als Platzhalter für die Eingabe eines numerischen Zeichens verwendet. Sie können die <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>-Eigenschaft verwenden, um ein benutzerdefiniertes Eingabe Aufforderungs Zeichen anzugeben. Die <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A>-Eigenschaft bestimmt, ob der Benutzer die Eingabe Aufforderungs Zeichen sieht, wenn das Steuerelement den Eingabefokus verliert.  
  
 Wenn der Benutzereingaben in das maskierte Textfeld eingibt, werden die entsprechenden Eingabezeichen in sequenzieller Weise durch gültige Eingabezeichen ersetzt. Wenn der Benutzer ein ungültiges Eingabezeichen eingibt, findet kein Ersatz statt. stattdessen wird ein Signal ausgegeben, wenn die <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A>-Eigenschaft auf `true`festgelegt ist und das <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>-Ereignis ausgelöst wird. Sie können Ihre eigene benutzerdefinierte Fehler Logik bereitstellen, indem Sie dieses Ereignis übergeben.  
  
 Wenn die aktuelle Einfügemarke ein Literalzeichen ist, verfügt der Benutzer über eine Reihe von Optionen:  
  
-   Wenn ein anderes Zeichen als das Eingabe Aufforderungs Zeichen eingegeben wird, wird das Literale automatisch übersprungen, und das Eingabezeichen wird auf die nächste bearbeitbare Position angewendet, die durch das nächste Aufforderungs Zeichen dargestellt wird.  
  
-   Wenn das Eingabe Aufforderungs Zeichen eingegeben wird und die <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>-Eigenschaft den Wert true hat, überschreibt die Eingabe das Eingabe Aufforderungs Zeichen, und die Einfügemarke wird an die nächste Position in der Maske verschoben.  
  
-   Wie immer der Fall ist, können die Pfeiltasten verwendet werden, um zu einer vorherigen oder nachfolgenden Position zu navigieren.  
  
 Sie können die <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A>-Eigenschaft verwenden, um zu überprüfen, ob der Benutzer alle erforderlichen Eingaben eingegeben hat. Die <xref:System.Windows.Forms.MaskedTextBox.Text%2A>-Eigenschaft ruft immer die Eingabe des Benutzers ab, der gemäß der Mask-und <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>-Eigenschaft formatiert ist.  
  
 Das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement setzt tatsächlich die gesamte Masken Verarbeitung auf die <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> Klasse aus, die von der <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>-Eigenschaft angegeben wird. Dieser Standardanbieter unterstützt alle Unicode-Zeichen mit Ausnahme von Surrogates und vertikal kombinierten Zeichen. die <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>-Eigenschaft kann jedoch verwendet werden, um die Eingabe auf die Zeichen Sets a-z, a-z und 0-9 einzuschränken.  
  
 Masken garantieren nicht notwendigerweise, dass die Eingabe eines Benutzers einen gültigen Wert für einen bestimmten Typ darstellt. Beispielsweise kann-9 für ein Alter in Jahren eingegeben werden. Sie können überprüfen, ob die Eingabe eines Benutzers einen gültigen Wert darstellt, indem Sie der <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>-Eigenschaft eine Instanz des Werttyps zuweisen. Sie können erkennen, ob der Benutzer den Fokus aus <xref:System.Windows.Forms.MaskedTextBox> entfernt, wenn er einen ungültigen Wert enthält, indem er das <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> Ereignis überwacht. Wenn die Typüberprüfung erfolgreich ist, ist das Objekt, das den Wert darstellt, über die <xref:System.Windows.Forms.TypeValidationEventArgs.ReturnValue%2A>-Eigenschaft des <xref:System.Windows.Forms.TypeValidationEventArgs>-Parameters verfügbar.  
  
 Wie beim <xref:System.Windows.Forms.TextBox>-Steuerelement funktionieren einige gängige Tastenkombinationen nicht mit <xref:System.Windows.Forms.MaskedTextBox>. Insbesondere hat STRG + R (rechtsbündig), STRG + l (linker Text rechtsbündig) und STRG + l (Mitteltext) keine Auswirkung.  
  
## <a name="compatibility-with-visual-basic-60"></a>Kompatibilität mit Visual Basic 6,0  
 <xref:System.Windows.Forms.MaskedTextBox> wurde entwickelt, um den größten Teil der Funktionalität des maskierten Bearbeitungs Steuer Elements in Visual Basic 6,0 beizubehalten. In der folgenden Tabelle werden die allgemeinen Eigenschaften des maskierten Bearbeitungs Steuer Elements aufgelistet und deren Entsprechungen auf <xref:System.Windows.Forms.MaskedTextBox>.  
  
|Maskiertes Bearbeitungs Steuerelement (Visual Basic 6,0) (Eigenschaft)|Äquivalente MaskedTextBox-Eigenschaft ([!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)])|  
|-------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------|  
|`AllowPrompt` -Eigenschaft|<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>|  
|`AutoTab` -Eigenschaft|Keine|  
|`ClipMode` -Eigenschaft|<xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>|  
|`ClipText` -Eigenschaft|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (wenn <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> auf "<xref:System.Windows.Forms.MaskFormat.ExcludePromptAndLiterals>" festgelegt ist)|  
|`Format` -Eigenschaft|Keine|  
|`FormattedText` -Eigenschaft|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (wenn <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> auf "<xref:System.Windows.Forms.MaskFormat.IncludePromptAndLiterals>" festgelegt ist)|  
|`Mask` -Eigenschaft|<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>|  
|`PromptChar` -Eigenschaft|<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>|  
|`PromptInclude` -Eigenschaft|<xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>|  
|`ValidationError` -Ereignis|<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>|  
  
> [!CAUTION]
>  Das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement unterstützt keine mehrzeilige Konfiguration oder rückgängig-Funktion. Obwohl die diesen Features zugeordneten Member in Bezug auf die Kompatibilität mit der <xref:System.Windows.Forms.TextBoxBase> Basisklasse beibehalten wurden, führen Ihre Implementierungen keine Aktionen aus.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der <xref:System.Windows.Forms.MaskedTextBox> initialisiert, um ein Datum zu akzeptieren, und verwendet sowohl das <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>-als auch das <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>-Ereignis, um den Benutzer auf ungültige Eingaben zu benachrichtigen.  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
    <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/235d6121-027d-481d-8d59-4f6794d15d0c">MaskedTextBox-Steuerelement (Windows Forms)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.MaskedTextBox" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.MaskedTextBox" />-Klasse mit Standardwerten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standard <xref:System.Windows.Forms.MaskedTextBox.%23ctor>-Konstruktor legt die <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>-Eigenschaft auf eine NULL-Maske fest, die durch die Zeichenfolge "< >" dargestellt wird. Eine NULL-Maske akzeptiert eine beliebige Kombination von Zeichen als Eingabe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (System.ComponentModel.MaskedTextProvider maskedTextProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.MaskedTextProvider maskedTextProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.ComponentModel.MaskedTextProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::ComponentModel::MaskedTextProvider ^ maskedTextProvider);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MaskedTextBox : System.ComponentModel.MaskedTextProvider -&gt; System.Windows.Forms.MaskedTextBox" Usage="new System.Windows.Forms.MaskedTextBox maskedTextProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="maskedTextProvider" Type="System.ComponentModel.MaskedTextProvider" />
      </Parameters>
      <Docs>
        <param name="maskedTextProvider">Ein Sprachanbieter für benutzerdefinierte Masken, abgeleitet von der <see cref="T:System.ComponentModel.MaskedTextProvider" />-Klasse.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.MaskedTextBox" />-Klasse unter Verwendung des angegebenen Sprachanbieters für die benutzerdefinierte Maske.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dem `maskedTextProvider`-Parameter wird die von <xref:System.Windows.Forms.MaskedTextBox>verwendete Maskierungs Sprache definiert. Er ist dafür verantwortlich, die Maske zu übernehmen und zu bestimmen, ob die Benutzereingabe der aktuellen Masken Position entspricht. Sie können eine neue Klasse von <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> ableiten, um eine eigene benutzerdefinierte Maskierungs Sprache zu definieren, und den <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29>-Konstruktor verwenden, um die Standard <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>zu ersetzen.  
  
 Wenn Sie die standardmäßige Maskierungs Sprache verwenden und eine eigene Eingabemaske angeben möchten, müssen Sie diesen Konstruktor nicht verwenden. Stattdessen können Sie entweder den <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29>-Konstruktor verwenden oder den Parameter losen Konstruktor verwenden und dann die <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>-Eigenschaft festlegen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="maskedTextProvider" /> ist <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (string mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mask As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::String ^ mask);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MaskedTextBox : string -&gt; System.Windows.Forms.MaskedTextBox" Usage="new System.Windows.Forms.MaskedTextBox mask" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mask">Eine <see cref="T:System.String" />, die die Eingabemaske darstellt. Der Anfangswert der <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" />-Eigenschaft.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.MaskedTextBox" />-Klasse unter Verwendung der angegebenen Eingabemaske.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29>-Konstruktor verwendet die Standard <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> mit den Eingabe `mask`, um Benutzereingaben in die <xref:System.Windows.Forms.MaskedTextBox>zu analysieren.  
  
 Wenn Sie der <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>-Eigenschaft eine neue Maske zuweisen, wird der von diesem Konstruktor festgelegte Wert überschrieben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="mask" /> ist <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTab">
      <MemberSignature Language="C#" Value="public bool AcceptsTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsTab" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsTab As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsTab { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AcceptsTab : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.AcceptsTab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, mit dem bestimmt wird, wie die TAB-TASTE für mehrzeilige Konfigurationen behandelt wird, oder legt diesen fest. Diese Eigenschaft wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht unterstützt.</summary>
        <value><see langword="false" /> in allen Fällen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A>-Eigenschaft wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. Da das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement die mehrzeilige Konfiguration jedoch nicht unterstützt, wird diese Eigenschaft nicht unterstützt.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTabChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AcceptsTabChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AcceptsTabChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AcceptsTabChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AcceptsTabChanged;" />
      <MemberSignature Language="F#" Value="member this.AcceptsTabChanged : EventHandler " Usage="member this.AcceptsTabChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich der Wert der <see cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />-Eigenschaft geändert hat. Dieses Ereignis wird nicht durch <see cref="T:System.Windows.Forms.MaskedTextBox" /> ausgelöst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged> Ereignis wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. Da das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement die mehrzeilige Konfiguration jedoch nicht unterstützt, wird dieses Ereignis nicht unterstützt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AllowPromptAsInput">
      <MemberSignature Language="C#" Value="public bool AllowPromptAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPromptAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowPromptAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowPromptAsInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowPromptAsInput : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> eine gültige Dateneingabe darstellt, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn das Eingabeaufforderungszeichen im Steuerelement eingegeben werden kann, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Auch wenn <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> `true`ist, muss das Eingabe Aufforderungs Zeichen für die aktuelle Position in der Maske gültig sein, damit Sie akzeptiert wird. Wenn <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> z. b. "*" ist, und die aktuelle Position in der Maske verlangt, dass der Benutzer eine Ziffer eingibt, schlägt das Eingeben eines Sternchen (\*) fehl und bewirkt, dass das <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> Ereignis stattfindet.  
  
 Die <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>-Eigenschaft hat Vorrang vor <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="AsciiOnly">
      <MemberSignature Language="C#" Value="public bool AsciiOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsciiOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property AsciiOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsciiOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AsciiOnly : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Windows.Forms.MaskedTextBox" />-Steuerelement Zeichen akzeptiert, die nicht zum ASCII-Zeichensatz gehören, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn nur ASCII-Zeichen akzeptiert werden, <see langword="false" />, wenn das <see cref="T:System.Windows.Forms.MaskedTextBox" />-Steuerelement ein beliebiges Unicode-Zeichen akzeptieren kann. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `true`, schränkt <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> Benutzereingaben auf die Zeichen a-z und a-z ein. ASCII-Steuerzeichen sind nicht zulässig.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      </Docs>
    </Member>
    <Member MemberName="BeepOnError">
      <MemberSignature Language="C#" Value="public bool BeepOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BeepOnError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property BeepOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BeepOnError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BeepOnError : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.BeepOnError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das maskierte Textfeld-Steuerelement den Systemsignalton für jeden zurückgewiesenen Tastenanschlag auslöst, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn das <see cref="T:System.Windows.Forms.MaskedTextBox" />-Steuerelement bei einer ungültigen Eingabe einen Signalton ausgeben soll, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> Ereignis tritt weiterhin auf, wenn die <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A>-Eigenschaft auf `true`festgelegt ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      </Docs>
    </Member>
    <Member MemberName="CanUndo">
      <MemberSignature Language="C#" Value="public bool CanUndo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUndo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanUndo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanUndo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanUndo : bool" Usage="System.Windows.Forms.MaskedTextBox.CanUndo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der vorhergehende Vorgang rückgängig gemacht werden kann. Diese Eigenschaft wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht unterstützt.</summary>
        <value><see langword="false" /> in allen Fällen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.CanUndo%2A>-Eigenschaft wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. Da <xref:System.Windows.Forms.MaskedTextBox> jedoch keine Rückgängig-Funktionalität unterstützt, hat diese Eigenschaft immer den Wert `false`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="ClearUndo">
      <MemberSignature Language="C#" Value="public void ClearUndo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearUndo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearUndo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearUndo();" />
      <MemberSignature Language="F#" Value="override this.ClearUndo : unit -&gt; unit" Usage="maskedTextBox.ClearUndo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht alle Informationen über den letzten Vorgang aus dem Rückgängig-Puffer für das Textfeld. Diese Methode wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht unterstützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.ClearUndo%2A>-Methode wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. <xref:System.Windows.Forms.MaskedTextBox> unterstützt jedoch keine Rückgängig-Funktionalität.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateHandle : unit -&gt; unit" Usage="maskedTextBox.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein Handle für das Steuerelement.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.MaskedTextBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die benötigten Erstellungsparameter ab, wenn das Steuerelementhandle erstellt wird.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.CreateParams" />-Objekt, das die Informationen darstellt, die zum Erstellen eines Steuerelements erforderlich sind.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Windows.Forms.MaskedTextBox.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die mit dem maskierten Textfeld verknüpften Kulturinformationen ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das die von <see cref="T:System.Windows.Forms.MaskedTextBox" /> unterstützte Kultur darstellt.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Windows.Forms.MaskedTextBox.Culture" /> wurde auf <see langword="null" /> festgelegt.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="CutCopyMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat CutCopyMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat CutCopyMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property CutCopyMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat CutCopyMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberSignature Language="F#" Value="member this.CutCopyMaskFormat : System.Windows.Forms.MaskFormat with get, set" Usage="System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, ob Literale und Eingabeaufforderungszeichen in die Zwischenablage kopiert werden, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.MaskFormat" />-Werte. Die Standardeinstellung ist <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>-Eigenschaft bestimmt, wie im <xref:System.Windows.Forms.MaskedTextBox> Steuerelement ausgewähltes Text interpretiert wird, wenn er in die Zwischenablage kopiert oder über die <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>-Eigenschaft abgerufen wird. Insbesondere wird festgelegt, ob Literalzeichen, Eingabe Aufforderungs Zeichen oder beides beim Zugriff auf den ausgewählten Text eingeschlossen werden. Wenn Eingabe Aufforderungs Zeichen ausgeschlossen werden, werden Sie in Leerzeichen in der kopierten Zeichenfolge transformiert.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>-Eigenschaft dient in Bezug darauf, wie die <xref:System.Windows.Forms.MaskedTextBox.Text%2A>-Eigenschaft interpretiert wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Die Eigenschaft wurde mit einem ungültigen <see cref="T:System.Windows.Forms.MaskFormat" />-Wert festgelegt.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="FormatProvider">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatProvider As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatProvider { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatProvider : IFormatProvider with get, set" Usage="System.Windows.Forms.MaskedTextBox.FormatProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.IFormatProvider" /> ab, der beim Ausführen einer Typvalidierung verwendet werden soll, oder legt diesen fest.</summary>
        <value>Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> bestimmt, welche Symbole für die Währung, das Datum und andere Kultur abhängige Masken Platzhalter verwendet werden, wenn die Typvalidierung erfolgt und das Steuerelement eine <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> Eigenschaft ungleich NULL hat.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
      </Docs>
    </Member>
    <Member MemberName="GetCharFromPosition">
      <MemberSignature Language="C#" Value="public override char GetCharFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance char GetCharFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharFromPosition (pt As Point) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override char GetCharFromPosition(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="override this.GetCharFromPosition : System.Drawing.Point -&gt; char" Usage="maskedTextBox.GetCharFromPosition pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Die Position, von der aus das nächststehende Zeichen gesucht werden soll.</param>
        <summary>Ruft das Zeichen ab, das der angegebenen Position im Steuerelement am nächsten liegt.</summary>
        <returns>Das Zeichen an der angegebenen Position.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetCharIndexFromPosition">
      <MemberSignature Language="C#" Value="public override int GetCharIndexFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharIndexFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharIndexFromPosition (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharIndexFromPosition(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="override this.GetCharIndexFromPosition : System.Drawing.Point -&gt; int" Usage="maskedTextBox.GetCharIndexFromPosition pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Die zu suchende Position.</param>
        <summary>Ruft den Index des Zeichens ab, das sich am nächsten zur angegebenen Position befindet.</summary>
        <returns>Der nullbasierte Zeichenindex an der angegebenen Position.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexFromLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexFromLine (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexFromLine(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexFromLine (lineNumber As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexFromLine(int lineNumber);" />
      <MemberSignature Language="F#" Value="override this.GetFirstCharIndexFromLine : int -&gt; int" Usage="maskedTextBox.GetFirstCharIndexFromLine lineNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">Dieser Parameter wird nicht verwendet.</param>
        <summary>Ruft den Index des ersten Zeichens einer bestimmten Zeile ab. Diese Methode wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht unterstützt.</summary>
        <returns>Diese Methode gibt immer 0 (Null) zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine%2A>-Methode wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. Da das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement die mehrzeilige Konfiguration jedoch nicht unterstützt, wird diese Methode nicht unterstützt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexOfCurrentLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexOfCurrentLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexOfCurrentLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexOfCurrentLine () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexOfCurrentLine();" />
      <MemberSignature Language="F#" Value="override this.GetFirstCharIndexOfCurrentLine : unit -&gt; int" Usage="maskedTextBox.GetFirstCharIndexOfCurrentLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft den Index des ersten Zeichens der aktuellen Zeile ab. Diese Methode wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht unterstützt.</summary>
        <returns>Diese Methode gibt immer 0 (Null) zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine%2A>-Methode wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. Da das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement die mehrzeilige Konfiguration jedoch nicht unterstützt, wird diese Methode nicht unterstützt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineFromCharIndex">
      <MemberSignature Language="C#" Value="public override int GetLineFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLineFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLineFromCharIndex (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLineFromCharIndex(int index);" />
      <MemberSignature Language="F#" Value="override this.GetLineFromCharIndex : int -&gt; int" Usage="maskedTextBox.GetLineFromCharIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Dieser Parameter wird nicht verwendet.</param>
        <summary>Ruft die Zeilennummer der angegebenen Zeichenposition innerhalb des Steuerelementtexts ab. Diese Methode wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht unterstützt.</summary>
        <returns>Diese Methode gibt immer 0 (Null) zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex%2A>-Methode wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. Da das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement die mehrzeilige Konfiguration jedoch nicht unterstützt, wird diese Methode nicht unterstützt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromCharIndex">
      <MemberSignature Language="C#" Value="public override System.Drawing.Point GetPositionFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Point GetPositionFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPositionFromCharIndex (index As Integer) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Drawing::Point GetPositionFromCharIndex(int index);" />
      <MemberSignature Language="F#" Value="override this.GetPositionFromCharIndex : int -&gt; System.Drawing.Point" Usage="maskedTextBox.GetPositionFromCharIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der Index des Zeichens, für das die Position abgerufen werden soll.</param>
        <summary>Ruft die Position innerhalb des Steuerelements am angegebenen Zeichenindex ab.</summary>
        <returns>Die Position des angegebenen Zeichens im Clientrechteck des Steuerelements.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HidePromptOnLeave">
      <MemberSignature Language="C#" Value="public bool HidePromptOnLeave { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HidePromptOnLeave" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      <MemberSignature Language="VB.NET" Value="Public Property HidePromptOnLeave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HidePromptOnLeave { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HidePromptOnLeave : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Eingabeaufforderungszeichen in der Eingabemaske ausgeblendet werden, wenn das Steuerelement den Fokus verloren hat, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> ausgeblendet wird, wenn <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht den Fokus besitzt; andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="InsertKeyMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.InsertKeyMode InsertKeyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.InsertKeyMode InsertKeyMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertKeyMode As InsertKeyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::InsertKeyMode InsertKeyMode { System::Windows::Forms::InsertKeyMode get(); void set(System::Windows::Forms::InsertKeyMode value); };" />
      <MemberSignature Language="F#" Value="member this.InsertKeyMode : System.Windows.Forms.InsertKeyMode with get, set" Usage="System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InsertKeyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Texteinfügemodus des maskierten Textfeld-Steuerelements ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.InsertKeyMode" />-Wert, der den aktuellen Einfügemodus angibt. Die Standardeinstellung ist <see cref="F:System.Windows.Forms.InsertKeyMode.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>-Eigenschaft steuert das Zeichen Einfügungs Verhalten des <xref:System.Windows.Forms.MaskedTextBox> Steuer Elements. Der Status dieser Eigenschaft wird durch die <xref:System.Windows.Forms.InsertKeyMode>-Enumeration definiert, die immer on, always Off oder festgelegt werden kann, um die Einstellung der Tastatur des Benutzers zu berücksichtigen. Diese Eigenschaft ersetzt den Einfügemodus der Tastatur. Wenn die Tastatur z. b. auf überschreiben festgelegt ist, aber <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> auf `Insert`festgelegt ist, wird die <xref:System.Windows.Forms.MaskedTextBox> im Einfügemodus ausgeführt. Die <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>-Eigenschaft greift auf den echten Einfügemodus der <xref:System.Windows.Forms.MaskedTextBox>zu.  
  
 Wenn das ändern <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> den Wert <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>ändert, wird das <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> Ereignis durch <xref:System.Windows.Forms.MaskedTextBox> angehoben.  
  
 Diese Eigenschaft hat keine Auswirkung, wenn keine Maske festgelegt wurde.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Beim Festlegen dieser Eigenschaft wurde ein ungültiger <see cref="T:System.Windows.Forms.InsertKeyMode" />-Wert angegeben.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="maskedTextBox.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Einer der <see cref="T:System.Windows.Forms.Keys" />-Werte.</param>
        <summary>Bestimmt, ob es sich bei der angegebenen Taste um eine normale Eingabetaste handelt oder um eine Sondertaste, für die eine Vorverarbeitung erforderlich ist.</summary>
        <returns><see langword="true" />, wenn die angegebene Taste eine normale Eingabetaste ist, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteMode">
      <MemberSignature Language="C#" Value="public bool IsOverwriteMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOverwriteMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOverwriteMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOverwriteMode { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOverwriteMode : bool" Usage="System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob eine vorhandene Eingabe durch eine neue Benutzereingabe überschrieben wird.</summary>
        <value><see langword="true" />, wenn <see cref="T:System.Windows.Forms.MaskedTextBox" /> vorhandene Zeichen durch neue, vom Benutzer eingegebene Zeichen überschrieben werden; <see langword="false" />, wenn vorhandene Zeichen durch <see cref="T:System.Windows.Forms.MaskedTextBox" /> nach vorn verschoben werden. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> berücksichtigt sowohl den Wert der Eigenschaft <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> als auch den Zustand der Tastatur des Benutzers. Wenn <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> auf <xref:System.Windows.Forms.InsertKeyMode.Insert> oder <xref:System.Windows.Forms.InsertKeyMode.Overwrite>festgelegt ist, geben <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> entweder `false` bzw. `true`zurück. Wenn <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> auf <xref:System.Windows.Forms.InsertKeyMode.Default>festgelegt ist, wird der Zustand der Einfügetaste zurückgegeben.  
  
 Wenn <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> `false`ist, lehnt <xref:System.Windows.Forms.MaskedTextBox> als ungültigen Zeichen Eintrag ab, der zu einer Verletzung an beliebiger Stelle in der Maske führen würde. Wenn das Einfügen eines Zeichens dazu führt, dass ein Zeichen in eine Masken Position verschoben wird, in der es nicht gültig wäre, wird die Zeichen Einfügung zurückgewiesen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler IsOverwriteModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler IsOverwriteModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsOverwriteModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ IsOverwriteModeChanged;" />
      <MemberSignature Language="F#" Value="member this.IsOverwriteModeChanged : EventHandler " Usage="member this.IsOverwriteModeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt nach einer Änderung des Einfügemodus ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged>-Ereignis wird ausgelöst, nachdem der Wert der <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>-Eigenschaft geändert wurde.  
  
 Dieses Ereignis ist erforderlich, um Daten ordnungsgemäß an ein <xref:System.Windows.Forms.MaskedTextBox> Steuerelement zu binden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged>-Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, sollten Sie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> durch <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ersetzen oder die Nachricht an eine mehrzeilige <xref:System.Windows.Forms.TextBox> anhängen.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz vom Typ "<xref:System.Windows.Forms.MaskedTextBox>" mit dem Namen "`MaskedTextBox1`" enthält. Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged>-Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#484](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#484)]
 [!code-vb[System.Windows.Forms.EventExamples#484](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#484)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Lines">
      <MemberSignature Language="C#" Value="public string[] Lines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Lines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Lines" />
      <MemberSignature Language="VB.NET" Value="Public Property Lines As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Lines { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Lines : string[] with get, set" Usage="System.Windows.Forms.MaskedTextBox.Lines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Textzeilen in mehrzeiligen Konfigurationen ab oder legt diese fest. Diese Eigenschaft wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht unterstützt.</summary>
        <value>Ein Array vom Typ <see cref="T:System.String" />, das eine einzelne Zeile enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.Lines%2A>-Eigenschaft wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. Da das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement die mehrzeilige Konfiguration jedoch nicht unterstützt, wird diese Eigenschaft nicht unterstützt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="Mask">
      <MemberSignature Language="C#" Value="public string Mask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Mask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Mask" />
      <MemberSignature Language="VB.NET" Value="Public Property Mask As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Mask { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Mask : string with get, set" Usage="System.Windows.Forms.MaskedTextBox.Mask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die zur Laufzeit zu verwendende Eingabemaske ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.String" />, die die aktuelle Maske darstellt. Der Standardwert ist eine leere Zeichenfolge, die jede Eingabe ermöglicht.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> ist die Standard Eigenschaft für die <xref:System.Windows.Forms.MaskedTextBox>-Klasse.  
  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> muss eine Zeichenfolge sein, die aus einem oder mehreren der Maskierungs Elemente besteht, wie in der folgenden Tabelle dargestellt. Die von <xref:System.Windows.Forms.MaskedTextBox> verwendete Maskierungs Sprache wird durch die zugeordnete <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>definiert. Der Standardanbieter gibt eine Maskierungs Sprache auf der Grundlage derjenigen an, die das maskierte Bearbeitungs Steuerelement in Visual Basic 6,0 verwendet, und sollte den Benutzern, die von dieser Plattform migrieren, sehr vertraut sein.  
  
|Maskierungs Element|Beschreibung|  
|---------------------|-----------------|  
|0|Ziffer, erforderlich. Dieses Element akzeptiert eine beliebige einzelne Ziffer zwischen 0 und 9.|  
|9|Ziffern oder Leerzeichen, optional.|  
|#|Ziffern oder Leerzeichen, optional. Wenn diese Position in der Maske leer ist, wird Sie als Leerzeichen in der <xref:System.Windows.Forms.MaskedTextBox.Text%2A>-Eigenschaft gerendert. Plus Zeichen (+) und Minuszeichen (-) sind zulässig.|  
|L|Buchstabe, erforderlich. Schränkt die Eingabe auf die ASCII-Buchstaben a-z und a-z ein. Dieses Masken Element entspricht [a-zA-Z] in regulären Ausdrücken.|  
|?|Buchstabe, optional. Schränkt die Eingabe auf die ASCII-Buchstaben a-z und a-z ein. Dieses Masken Element entspricht [a-zA-Z]? in regulären Ausdrücken.|  
|&|Zeichen, erforderlich. Wenn die <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>-Eigenschaft auf true festgelegt ist, verhält sich dieses Element wie das L-Element.|  
|C|Zeichen, optional. Ein beliebiges nicht-Steuerzeichen. Wenn die <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>-Eigenschaft auf `true`festgelegt ist, verhält sich dieses Element wie das "?"-Element.|  
|A|Alphanumerisch, erforderlich. Wenn die <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>-Eigenschaft auf `true`festgelegt ist, sind die einzigen Zeichen, die Sie akzeptieren, die ASCII-Buchstaben a-z und a-z. Dieses Masken Element verhält sich wie das "a"-Element.|  
|eine|Alphanumerisch, optional. Wenn die <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>-Eigenschaft auf `true`festgelegt ist, sind die einzigen Zeichen, die Sie akzeptieren, die ASCII-Buchstaben a-z und a-z. Dieses Masken Element verhält sich wie das "A"-Element.|  
|.|Dezimal Platzhalter. Das tatsächliche Anzeige Zeichen ist das für den Format Anbieter geeignete Dezimalzeichen, das durch die <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>-Eigenschaft des Steuer Elements bestimmt wird.|  
|,|Tausender Platzhalter. Das tatsächliche Anzeige Zeichen ist der für den Format Anbieter geeignete Tausender Platzhalter, der durch die <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>-Eigenschaft des Steuer Elements bestimmt wird.|  
|:|Zeit Trennzeichen. Das tatsächliche Anzeige Zeichen ist das für den Format Anbieter geeignete Zeit Symbol, das durch die <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>-Eigenschaft des Steuer Elements bestimmt wird.|  
|/|Datums Trennzeichen. Das tatsächliche Anzeige Zeichen ist das für den Format Anbieter geeignete Datums Symbol, das durch die <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>-Eigenschaft des Steuer Elements bestimmt wird.|  
|$|Währungssymbol. Das tatsächlich angezeigte Zeichen ist das Währungssymbol, das für den Format Anbieter geeignet ist, wie durch die <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>-Eigenschaft des Steuer Elements festgelegt.|  
|\<|Nach unten verschieben. Konvertiert alle Zeichen, die Folgen, in Kleinbuchstaben.|  
|>|Nach oben verschieben. Konvertiert alle Zeichen, die Folgen, in Großbuchstaben.|  
|&#124;|Deaktivieren Sie eine vorherige Verschiebung nach oben oder nach unten.|  
|&#92;|Weg. Schützt ein Masken Zeichen und verwandelt es in ein Literalzeichen. "\\\\" ist die Escapesequenz für einen umgekehrten Schrägstrich.|  
|Alle anderen Zeichen|Literale. Alle nicht Maskierungs Elemente werden innerhalb <xref:System.Windows.Forms.MaskedTextBox>als sich selbst angezeigt. Literale belegen zur Laufzeit immer eine statische Position in der Maske und können vom Benutzer nicht verschoben oder gelöscht werden.|  
  
 Wenn Sie eine Maske ändern, wenn <xref:System.Windows.Forms.MaskedTextBox> bereits eine Benutzereingabe enthält, die von einer vorherigen Maske gefiltert wurde, versuchen <xref:System.Windows.Forms.MaskedTextBox>, diese Eingabe in die neue Masken Definition zu migrieren. Wenn ein Fehler auftritt, wird die vorhandene Eingabe gelöscht. Wenn Sie eine Zeichenfolge der Länge 0 (null) als Maske zuweisen, werden alle vorhandenen Daten im-Steuerelement beibehalten. Wenn Sie mit einer Maske der Länge 0 (null) verwendet wird, verhält sich <xref:System.Windows.Forms.MaskedTextBox> wie ein einzeilige <xref:System.Windows.Forms.TextBox> Steuerelement.  
  
 Die Symbole Decimal (.), Tausendstel (,), time (:), Date (/) und Currency ($) werden standardmäßig so angezeigt, wie Sie in der Kultur der Anwendung definiert sind. Sie können erzwingen, dass Sie Symbole für eine andere Kultur mit der <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>-Eigenschaft anzeigen.  
  
 Die Zeichen Einfügung in die Maske zur Laufzeit wird durch die <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>-Eigenschaft gesteuert. Benutzer können mithilfe der nach-links-und nach-rechts-Taste oder des Mauszeigers durch die Maske navigieren und optionale Positionen in der Maske überspringen, indem Sie ein Leerzeichen eingeben.  
  
> [!IMPORTANT]
>  <xref:System.Windows.Forms.MaskedTextBox> unterstützt alle Unicode-Zeichen mit Ausnahme von Surrogates und vertikal kombinierten Zeichen.  
  
 In der folgenden Tabelle sind Beispiel Masken aufgeführt.  
  
|Format|Verhalten|  
|----------|--------------|  
|`00/00/0000`|Ein Datum (Tag, numerischer Monat, Jahr) im internationalen Datumsformat. Das Zeichen "/" ist ein logisches Datums Trennzeichen und wird dem Benutzer als Datums Trennzeichen angezeigt, das der aktuellen Kultur der Anwendung entspricht.|  
|`00->L<LL-0000`|Ein Datum (Tag, Monats Abkürzung und Jahr) in USA Format, in dem die drei buchstabige Monats Abkürzung mit einem ersten Großbuchstaben, gefolgt von zwei Kleinbuchstaben, angezeigt wird.|  
|`(999)-000-0000`|USA Telefonnummer, flächencode optional. Wenn Benutzer die optionalen Zeichen nicht eingeben möchten, können Sie entweder Leerzeichen eingeben oder den Mauszeiger direkt an der Position in der Maske platzieren, die durch die erste 0 dargestellt wird.|  
|`$999,999.00`|Ein Währungswert im Bereich von 0 bis 999999. Die Währungs-, Tausendstel-und Dezimalzeichen werden zur Laufzeit durch ihre kulturspezifischen Entsprechungen ersetzt.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die an die <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" />-Eigenschaft übergebene Zeichenfolge stellt keine gültige Maske dar. Ungültige Masken schließen Masken ein, die nicht druckbare Zeichen enthalten.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MaskChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MaskChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MaskChanged;" />
      <MemberSignature Language="F#" Value="member this.MaskChanged : EventHandler " Usage="member this.MaskChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt nach einer Änderung der Eingabemaske ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Windows.Forms.MaskedTextBox.MaskChanged>-Ereignis wird ausgelöst, nachdem der Wert der <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>-Eigenschaft geändert wurde. Dieses Ereignis wird auch ausgelöst, wenn die <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> indirekt von einem Member wie <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>und <xref:System.Windows.Forms.MaskedTextBox.Culture%2A>geändert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.MaskedTextBox.MaskChanged>-Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, sollten Sie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> durch <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ersetzen oder die Nachricht an eine mehrzeilige <xref:System.Windows.Forms.TextBox> anhängen.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz vom Typ "<xref:System.Windows.Forms.MaskedTextBox>" mit dem Namen "`MaskedTextBox1`" enthält. Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.MaskedTextBox.MaskChanged>-Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#485](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#485)]
 [!code-vb[System.Windows.Forms.EventExamples#485](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#485)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskCompleted">
      <MemberSignature Language="C#" Value="public bool MaskCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.MaskCompleted : bool" Usage="System.Windows.Forms.MaskedTextBox.MaskCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob alle erforderlichen Eingaben in der Eingabemaske vorgenommen wurden.</summary>
        <value><see langword="true" />, wenn alle erforderlichen Eingaben in der Maske erfolgt sind, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> überprüft nur erforderliche Eingabeelemente. Verwenden Sie stattdessen die <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A>-Eigenschaft, um zu bestimmen, ob alle erforderlichen und optionalen Eingabeelemente ausgefüllt wurden.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="MaskedTextProvider">
      <MemberSignature Language="C#" Value="public System.ComponentModel.MaskedTextProvider MaskedTextProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.MaskedTextProvider MaskedTextProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskedTextProvider As MaskedTextProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::MaskedTextProvider ^ MaskedTextProvider { System::ComponentModel::MaskedTextProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MaskedTextProvider : System.ComponentModel.MaskedTextProvider" Usage="System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.MaskedTextProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Klon des Maskenanbieters ab, der dieser Instanz des maskierten Textfeld-Steuerelements zugeordnet ist.</summary>
        <value>Ein Anbieter der Maskierungssprache vom Typ <see cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>-Eigenschaft definiert das Masken-und die Maskierungs Sprache, das vom <xref:System.Windows.Forms.MaskedTextBox> Steuerelement verwendet wird. Der Standardanbieter ist die <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>-Klasse. ein benutzerdefinierter Anbieter kann jedoch mit dem <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29>-Konstruktor angegeben werden.  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> kann nicht direkt festgelegt werden. Beim Festlegen einiger der Eigenschaften von <xref:System.Windows.Forms.MaskedTextBox>, z. b. <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>und <xref:System.Windows.Forms.MaskedTextBox.Culture%2A>, kann jedoch intern eine neue <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>erstellt werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
      </Docs>
    </Member>
    <Member MemberName="MaskFull">
      <MemberSignature Language="C#" Value="public bool MaskFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskFull" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskFull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.MaskFull : bool" Usage="System.Windows.Forms.MaskedTextBox.MaskFull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob alle erforderlichen und optionalen Eingaben in der Eingabemaske vorgenommen wurden.</summary>
        <value><see langword="true" />, wenn alle erforderlichen und optionalen Eingaben erfolgt sind, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A>-Eigenschaft innerhalb des <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>-Ereignis Handlers verwenden, um zu bestimmen, ob die Eingabe des Benutzers abgelehnt wurde, weil keine weiteren Eingaben in der Maske vorhanden sind. Verwenden Sie die <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A>-Eigenschaft, um zu bestimmen, ob nur erforderliche Eingabeelemente eingegeben wurden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>-Ereignis behandelt, und es wird ein <xref:System.Windows.Forms.ToolTip> verwendet, um den Benutzer zu benachrichtigen, wenn versucht wird, Daten einzugeben, nachdem alle Positionen in der Maske verwendet wurden.  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="MaskInputRejected">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskInputRejected As MaskInputRejectedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MaskInputRejectedEventHandler ^ MaskInputRejected;" />
      <MemberSignature Language="F#" Value="member this.MaskInputRejected : System.Windows.Forms.MaskInputRejectedEventHandler " Usage="member this.MaskInputRejected : System.Windows.Forms.MaskInputRejectedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskInputRejectedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Eingabe oder das zugewiesene Zeichen nicht mit dem entsprechenden Formatelement der Eingabemaske übereinstimmt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> ist das Standard Ereignis für die <xref:System.Windows.Forms.MaskedTextBox>-Klasse.  
  
 Das <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>-Ereignis tritt auf, wenn ein Zeichen von der Eingabemaske abgelehnt wird. Die durch die <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>-Eigenschaft dargestellte Eingabemaske wird von dem maskierten Text Anbieter interpretiert, der dem Steuerelement über die <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>-Eigenschaft zugeordnet ist. <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> wird in den folgenden Situationen ausgelöst:  
  
-   Ein Eingabezeichen stimmt nicht mit dem entsprechenden Format Element überein. Der Benutzer gibt z. b. ein alphabetisches Zeichen ein, wenn eine Ziffer erforderlich ist. Dies ist wahrscheinlich der häufigste Grund, warum dieses Ereignis ausgelöst wird.  
  
-   Der Benutzer versucht, über das Ende der Maske hinausgehende Zeichen einzugeben, entweder weil die Maske bereits ausgefüllt wurde oder die aktuelle Position der Einfügemarke an das Ende der angezeigten Eingabemasken Zeichenfolge verschoben wurde.  
  
-   Bei einem Einfügevorgang wird entweder ein Zeichen eingefügt, das nicht mit dem zugehörigen Format Element identisch ist, oder wenn die <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>-Eigenschaft `false`ist, werden vorhandene Zeichen in neue Positionen verlagert, wo Sie nicht mit ihren Format Elementen identisch sind.  
  
-   Ein Ausschneide Vorgang verschiebt vorhandene Zeichen nach links, und ein oder mehrere Zeichen stimmen nicht mit den neu zugeordneten Format Elementen identisch.  
  
-   An der <xref:System.Windows.Forms.MaskedTextBox.Text%2A>-Eigenschaft wurde eine Zuweisung vorgenommen, und die zugewiesene Zeichenfolge verursachte mindestens einen Masken Verstoß.  
  
 Wenn dem Steuerelement eine Zeichenfolge zugewiesen wurde, die bewirkt, dass <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> auftritt, wird in <xref:System.Windows.Forms.MaskedTextBox>kein Teil der Zeichenfolge angezeigt.  
  
 Die Standardbehandlung für <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> wird einen Signal Sound abspielen, wenn die <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A>-Eigenschaft auf `true`festgelegt ist. Dieses Ereignis wird häufig behandelt, um benutzerdefinierte Fehlerbehandlung zu implementieren, z. b. um zum nächsten Benutzereingabe-Steuerelement zu wechseln, wenn die Maske voll ist, oder um ein benutzerdefiniertes Fehler Dialogfeld oder eine QuickInfo anzuzeigen, wenn das Eingabezeichen ungültig ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>-Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, sollten Sie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> durch <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ersetzen oder die Nachricht an eine mehrzeilige <xref:System.Windows.Forms.TextBox> anhängen.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz vom Typ "<xref:System.Windows.Forms.MaskedTextBox>" mit dem Namen "`MaskedTextBox1`" enthält. Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>-Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#486](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#486)]
 [!code-vb[System.Windows.Forms.EventExamples#486](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#486)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.Windows.Forms.MaskInputRejectedEventArgs" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public override int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxLength : int with get, set" Usage="System.Windows.Forms.MaskedTextBox.MaxLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die maximale Anzahl an Zeichen ab, die Benutzer in das Textfeld-Steuerelement eingeben oder einfügen können, oder legt diese fest. Diese Eigenschaft wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht unterstützt.</summary>
        <value>Diese Eigenschaft gibt immer 0 zurück.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informationen dazu, wie Sie die maximale Länge einer Zeichenfolge in einer <xref:System.Windows.Forms.MaskedTextBox>ermitteln, finden Sie in der <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>-Eigenschaft und in der <xref:System.Windows.Forms.MaskInputRejectedEventArgs.Position%2A>-Eigenschaft in der <xref:System.Windows.Forms.MaskInputRejectedEventArgs>-Klasse.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskInputRejectedEventArgs.Position" />
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Multiline : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.Multiline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob dies ein mehrzeiliges Textfeld-Steuerelement ist, oder legt diesen fest. Diese Eigenschaft wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht vollständig unterstützt.</summary>
        <value>Diese Eigenschaft gibt immer <see langword="false" /> zurück.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A>-Eigenschaft wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. Da das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement die mehrzeilige Konfiguration jedoch nicht unterstützt, wird diese Eigenschaft nicht vollständig unterstützt. Es kann nicht festgelegt werden, und es wird immer zu `false`aufgelöst.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="MultilineChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MultilineChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MultilineChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MultilineChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MultilineChanged;" />
      <MemberSignature Language="F#" Value="member this.MultilineChanged : EventHandler " Usage="member this.MultilineChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt normalerweise ein, wenn der Wert der <see cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />-Eigenschaft geändert wurde. Dieses Ereignis wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> jedoch nicht ausgelöst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Windows.Forms.MaskedTextBox.MultilineChanged> Ereignis wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. Da das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement die mehrzeilige Konfiguration jedoch nicht unterstützt, ist dieses Ereignis in <xref:System.Windows.Forms.MaskedTextBox>nicht implementiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBackColorChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Tritt auf, wenn sich der Wert der <see cref="P:System.Windows.Forms.Control.BackColor" />-Eigenschaft ändert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="maskedTextBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.HandleCreated" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsOverwriteModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsOverwriteModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsOverwriteModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsOverwriteModeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsOverwriteModeChanged : EventArgs -&gt; unit&#xA;override this.OnIsOverwriteModeChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnIsOverwriteModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="maskedTextBox.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.KeyEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.KeyDown" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit" Usage="maskedTextBox.OnKeyPress e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.KeyPressEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.KeyPress" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="maskedTextBox.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.KeyEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.KeyUp" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMaskChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMaskChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMaskChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMaskChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMaskChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMaskChanged : EventArgs -&gt; unit&#xA;override this.OnMaskChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnMaskChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.MaskedTextBox.OnMaskChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnMultilineChanged">
      <MemberSignature Language="C#" Value="protected override void OnMultilineChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMultilineChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMultilineChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMultilineChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMultilineChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnMultilineChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das Ereignisdaten enthält.</param>
        <summary>Löst normalerweise das <see cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />-Ereignis aus, ist aber für <see cref="T:System.Windows.Forms.MaskedTextBox" /> deaktiviert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.OnMultilineChanged%2A>-Methode wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. Da das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement die mehrzeilige Konfiguration jedoch nicht unterstützt, wird diese Methode überschrieben, um keine Aktionen auszuführen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextAlignChanged : EventArgs -&gt; unit&#xA;override this.OnTextAlignChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnTextAlignChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.TextChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.MaskedTextBox.OnTextChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected override void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="maskedTextBox.OnValidating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.ComponentModel.CancelEventArgs" />, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.Validating" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A>-Methode bewirkt, dass die Eingabe Zeichenfolge mit der <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>-Eigenschaft überprüft wird, wenn ein <xref:System.Type> für diese Eigenschaft angegeben wurde. Anschließend wird auch das <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>-Ereignis erhoben.  
  
> [!NOTE]
>  Um die Konsistenz mit textbasierten Steuerelementen sicherzustellen, erfolgt die Validierung auch dann, wenn die <xref:System.Windows.Forms.MaskedTextBox> schreibgeschützt ist (Ihre <xref:System.Windows.Forms.MaskedTextBox.ReadOnly%2A>-Eigenschaft ist auf `true`festgelegt).  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Während der Analyse der Eingabezeichenfolge ist eine schwerwiegende Ausnahme aufgetreten.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PasswordChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PasswordChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.PasswordChar : char with get, set" Usage="System.Windows.Forms.MaskedTextBox.PasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('\0')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Zeichen ab, das als Ersatz für Benutzereingaben angezeigt werden soll, oder legt dieses fest.</summary>
        <value>Der als Kennwortzeichen verwendete <see cref="T:System.Char" />-Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei vertraulichen Benutzereingaben ist es üblich, die vom Benutzer eingegebenen tatsächlichen Informationen zu verbergen. Wenn die <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>-Eigenschaft auf ein nicht-NULL-Zeichen festgelegt ist, zeigt <xref:System.Windows.Forms.MaskedTextBox> dieses Zeichen für alle Eingaben in das-Steuerelement an. Wenn diese Eigenschaft auf `null` festgelegt wird, wird diese Funktion deaktiviert.  
  
 Wenn Sie das vom Betriebssystem bereitgestellte Kenn Wort Zeichen verwenden möchten, das in Comctl32. dll definiert ist, verwenden Sie stattdessen die <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>-Eigenschaft. Wenn die Eigenschaften <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> und <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> aktiviert sind, hat letztere Vorrang.  
  
> [!IMPORTANT]
>  Als Sicherheits Überlegung deaktiviert das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement Ausschneide-und Kopiervorgänge für Kenn Wort geschützte Zeichen folgen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Das beim Festlegen dieser Eigenschaft angegebene Zeichen ist kein gültiges Kennwortzeichen, wie es durch die <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />-Methode der <see cref="T:System.ComponentModel.MaskedTextProvider" />-Klasse bestimmt wird.</exception>
        <exception cref="T:System.InvalidOperationException">Das angegebene Kennwortzeichen entspricht dem aktuellen Eingabeaufforderungszeichen <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />. Die zwei Zeichen müssen unterschiedlich sein.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey : Message * System.Windows.Forms.Keys -&gt; bool" Usage="maskedTextBox.ProcessCmdKey (msg, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">Eine als Verweis übergebene <see cref="T:System.Windows.Forms.Message" />, die die zu verarbeitende Fenstermeldung darstellt.</param>
        <param name="keyData">Einer der <see cref="T:System.Windows.Forms.Keys" />-Werte, die die zu verarbeitende Tastenkombination darstellen.</param>
        <summary>Verarbeitet eine Befehlstaste.</summary>
        <returns><see langword="true" />, wenn die Befehlstaste vom Steuerelement verarbeitet wurde, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected internal override bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ProcessKeyMessage (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool ProcessKeyMessage(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.ProcessKeyMessage : Message -&gt; bool" Usage="maskedTextBox.ProcessKeyMessage m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Eine als Verweis übergebene <see cref="T:System.Windows.Forms.Message" />, die die zu verarbeitende Fenstermeldung darstellt.</param>
        <summary>Überschreibt die Basisimplementierung dieser Methode, um Eingabesprachenänderungen zu behandeln.</summary>
        <returns><see langword="true" />, wenn die Meldung vom Steuerelement verarbeitet wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> überschreibt die Implementierung von <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> des Basis Steuer Elements, um Zeichen Ereignisse ordnungsgemäß zu behandeln, wenn der Benutzer mithilfe eines Eingabemethoden-Editors (Input Method Editor, IME) Zeichen eingibt, wie z. b. für die Eingabe von Japanisch, Chinesisch und anderen komplexen nicht lateinischen Skripts. <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> erkennt alle WM_CHAR-Nachrichten, die nach dem Empfangen einer WM_IME_CHAR-Nachricht auftreten, und unterdrückt diese, um zu verhindern, dass diese Zeichen im Steuerelement angezeigt werden. Wenn Sie von diesem Steuerelement ableiten und diese Meldung außer Kraft setzen, sollten Sie dieses Verhalten duplizieren, wenn Sie möchten, dass das neue Steuerelement mit IMEs arbeitet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PromptChar">
      <MemberSignature Language="C#" Value="public char PromptChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PromptChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PromptChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PromptChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.PromptChar : char with get, set" Usage="System.Windows.Forms.MaskedTextBox.PromptChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('_')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Zeichen ab, das zur Darstellung des Fehlens einer Benutzereingabe in <see cref="T:System.Windows.Forms.MaskedTextBox" /> verwendet wird, oder legt dieses fest.</summary>
        <value>Das Zeichen, über das der Benutzer zur Eingabe aufgefordert wird. Der Standardwert ist ein Unterstrich (_).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> werden in <xref:System.Windows.Forms.MaskedTextBox> für alle Masken Positionen angezeigt, die der Benutzer noch nicht ausgefüllt hat.  
  
 Verwenden Sie die <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A>-Eigenschaft, um anzugeben, ob die Eingabeaufforderung angezeigt wird, wenn <xref:System.Windows.Forms.MaskedTextBox> keinen Fokus hat.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Das beim Festlegen dieser Eigenschaft angegebene Zeichen ist kein gültiges Eingabeaufforderungszeichen, wie es durch die <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />-Methode der <see cref="T:System.ComponentModel.MaskedTextProvider" />-Klasse bestimmt wird.</exception>
        <exception cref="T:System.InvalidOperationException">Das angegebene Eingabeaufforderungszeichen entspricht dem aktuellen Kennwortzeichen <see cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />. Die zwei Zeichen müssen unterschiedlich sein.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der im Textfeld enthaltene Text schreibgeschützt ist, oder legt diesen fest.</summary>
        <value><see langword="true" /> gibt an, dass der Text schreibgeschützt ist, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectInputOnFirstFailure">
      <MemberSignature Language="C#" Value="public bool RejectInputOnFirstFailure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RejectInputOnFirstFailure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
      <MemberSignature Language="VB.NET" Value="Public Property RejectInputOnFirstFailure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RejectInputOnFirstFailure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RejectInputOnFirstFailure : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Analyse der Benutzereingabe unterbrochen werden soll, wenn das erste ungültige Zeichen erreicht ist, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Verarbeitung der Eingabezeichenfolge beim ersten Analysefehler beendet werden soll, <see langword="false" />, wenn alle Fehler durch die Verarbeitung ignoriert werden sollen. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Manchmal wird der Benutzer in einem einzelnen Eingabevorgang mehrere Zeichen in eine <xref:System.Windows.Forms.MaskedTextBox> eingeben, in der Regel durch Kopieren und Einfügen einer Zeichenfolge. Wenn die gesamte Zeichenfolge gemäß ihrer Einfügeposition in der Eingabemaske nur gültige Zeichen enthält, wird der gesamte Vorgang erfolgreich ausgeführt. Wenn jedoch ein Fehler auftritt, hängt das Verhalten von <xref:System.Windows.Forms.MaskedTextBox> von dem Wert <xref:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure%2A>wie folgt ab:  
  
-   Wenn diese Eigenschaft `true`ist, wird die Verarbeitung der Eingabe Zeichenfolge mit dem ungültigen Zeichen beendet. Alle nachfolgenden Zeichen werden ignoriert. Ein einzelnes <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> Ereignis wird ausgelöst.  
  
-   Wenn diese Eigenschaft `false`ist, wird das ungültige Zeichen abgelehnt, aber die Verarbeitung wird mit dem nächsten Zeichen in der Eingabe Zeichenfolge fortgesetzt. Ein <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> Ereignis wird für jedes ungültige Zeichen in der Eingabe Zeichenfolge ausgelöst.  
  
 Die Eigenschaften <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>, <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A> und <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> können auch die Interpretation der Benutzereingabe beeinflussen.  
  
 Wenn die <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>-Eigenschaft `false`ist, werden alle Zeichen, die sich bereits in der Eingabemaske rechts von der Einfügemarke befinden, durch die akzeptierte Anzahl von Zeichen ersetzt. Diese Verschiebung kann zusätzliche Analyse-Fehler verursachen.  
  
 Ein Einfügevorgang kann Programm gesteuert durch Festlegen der <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>-Eigenschaft imitiert werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnPrompt">
      <MemberSignature Language="C#" Value="public bool ResetOnPrompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnPrompt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnPrompt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnPrompt { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ResetOnPrompt : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, wie ein dem Aufforderungszeichen entsprechendes Eingabezeichen behandelt werden soll, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn die Eingabe des Aufforderungszeichens die Zurücksetzung der aktuellen bearbeitbaren Position in der Maske zur Folge hat, andernfalls <see langword="false" />, um anzugeben, dass das Aufforderungszeichen wie ein normales Eingabezeichen verarbeitet werden soll. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der <xref:System.Windows.Forms.MaskedTextBox> können zwei Kategorien von Zeichen, insbesondere Leerzeichen und Eingabe Aufforderungs Zeichen, behandelt werden. In der Regel wird jedes Eingabezeichen anhand der Maske getestet und entweder akzeptiert oder abgelehnt. Wenn die <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>-Eigenschaft auf nicht-`null`festgelegt ist, führt das Festlegen der <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>-Eigenschaft auf `true` zu einer besonderen Verarbeitung für das Eingabe Aufforderungs Zeichen. Wenn der Benutzer das Eingabe Aufforderungs Zeichen in die Maske eingibt, bewirkt dies, dass die aktuelle Maske-Zeichenposition gelöscht und die aktuelle Position auf das nächste bearbeitbare Zeichen erweitert wird.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> hat Vorrang vor der Eigenschaft <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>, wie in der folgenden Tabelle gezeigt.  
  
|Renaheinprompt-Wert|AllowPromptAsInput-Wert|Resultierendes Verhalten|  
|-------------------------|------------------------------|------------------------|  
|`true`|`true`|Das Eingabe Aufforderungs Zeichen kann eingegeben werden und bewirkt, dass die aktuelle Masken Position zurückgesetzt wird. Dies ist die Standardeinstellung.|  
|`true`|`false`|Das Eingabe Aufforderungs Zeichen kann eingegeben werden und bewirkt, dass die aktuelle Masken Position zurückgesetzt wird.|  
|`false`|`true`|Das Eingabe Aufforderungs Zeichen wird als Standardeingabe Zeichen verarbeitet.|  
|`false`|`false`|Das Eingabe Aufforderungs Zeichen ist ungültig und löst ein <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> Ereignis aus.|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnSpace">
      <MemberSignature Language="C#" Value="public bool ResetOnSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnSpace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnSpace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ResetOnSpace : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, wie ein eingegebenes Leerzeichen zu behandeln ist, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn die Eingabe des Leerzeichens die Zurücksetzung der aktuellen bearbeitbaren Position in der Maske zur Folge hat, andernfalls <see langword="false" />, um anzugeben, dass das Leerzeichen wie ein normales Eingabezeichen verarbeitet werden soll. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der <xref:System.Windows.Forms.MaskedTextBox> können zwei Kategorien von Zeichen, insbesondere Leerzeichen und Eingabe Aufforderungs Zeichen, behandelt werden. In der Regel wird jedes Eingabezeichen anhand der Maske getestet und entweder akzeptiert oder abgelehnt. Wenn Sie die <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>-Eigenschaft auf `true` festlegen, führt dies dazu, dass die aktuelle Maske-Zeichenposition gelöscht und die aktuelle Position auf das nächste bearbeitbare Zeichen erweitert wird.  
  
 Der Typ der Zeicheneingabe bestimmt, ob die Maskierungs-Engine auf das nächste Zeichen in der Maske wechselt, oder bleibt an der aktuellen Position und wartet auf ein entsprechendes Zeichen. Wenn das Eingabezeichen ein Leerzeichen ist und nicht mit dem aktuellen, nicht bearbeitbaren Zeichen in der Maske identisch ist, springt die Maskierungs-Engine zum nächsten Zeichen in der Maske. Wenn das Eingabezeichen kein Leerzeichen ist und nicht mit dem aktuellen, nicht bearbeitbaren Zeichen in der Maske identisch ist, bleibt die Maskierungs-Engine an der aktuellen Masken Position, und es wird versucht, das nächste Eingabezeichen gegen Sie abzugleichen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="ScrollToCaret">
      <MemberSignature Language="C#" Value="public void ScrollToCaret ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollToCaret() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ScrollToCaret" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollToCaret ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollToCaret();" />
      <MemberSignature Language="F#" Value="override this.ScrollToCaret : unit -&gt; unit" Usage="maskedTextBox.ScrollToCaret " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt einen Bildlauf durch den Inhalt des Steuerelements bis zur aktuellen Caretposition durch. Diese Methode wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht unterstützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.ScrollToCaret%2A>-Methode wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. Da das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement die mehrzeilige Konfiguration jedoch nicht unterstützt, wird diese Methode überschrieben, um keine Aktionen auszuführen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="SelectedText">
      <MemberSignature Language="C#" Value="public override string SelectedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SelectedText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedText : string with get, set" Usage="System.Windows.Forms.MaskedTextBox.SelectedText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aktuelle Auswahl im <see cref="T:System.Windows.Forms.MaskedTextBox" />-Steuerelement ab oder legt diese fest.</summary>
        <value>Der derzeit ausgewählte Text als <see cref="T:System.String" />. Wenn derzeit kein Text ausgewählt ist, wird diese Eigenschaft in eine leere Zeichenfolge aufgelöst.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Auswahl, die mit dieser Eigenschaft abgerufen wird, wird entsprechend der Formatierungs Eigenschaften des-Steuer Elements formatiert, z. b. <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A><xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> und <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>. Die Auswahl, die mit dieser Eigenschaft festgelegt wird, verhält sich wie ein Einfügevorgang: jedes Zeichen wird mit der Maske verglichen, und das <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> Ereignis wird für ungültige Zeichen ausgelöst. Wenn <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> `true`ist, sind Literale und Eingabe Aufforderungs Zeichen beim Festlegen <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>zulässig und werden automatisch entfernt, sofern Sie nicht gegen die Maske verstoßen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SkipLiterals">
      <MemberSignature Language="C#" Value="public bool SkipLiterals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipLiterals" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipLiterals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipLiterals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipLiterals : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob literale Werte erneut eingegeben werden können, oder legt diesen fest.</summary>
        <value><see langword="true" />, damit Literale erneut eingegeben werden können, andernfalls <see langword="false" />, damit Literalzeichen nicht überschrieben werden können. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eingabemasken enthalten häufig Literale. Wenn der Benutzer zur Laufzeit Zeichen in den <xref:System.Windows.Forms.MaskedTextBox> eingibt, wird die aktuelle Zeichenposition manchmal auf ein Literalzeichen zurückgegriffen. Die <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>-Eigenschaft beschreibt, wie Benutzereingaben für das nächste Zeichen wie folgt behandelt werden:  
  
-   Wenn diese Eigenschaft `true`ist, kann der Benutzer entweder das gleiche Zeichen wie das Literale an der aktuellen Position eingeben oder das nächste bearbeitbare Zeichen eingeben. Dadurch wird die aktuelle Position auf diese Position gesprungen.  
  
-   Wenn diese Eigenschaft `false`ist, kann der Benutzer nur das nächste bearbeitbare Zeichen eingeben. Wenn die nächste Position in der Maske das Literalzeichen nicht akzeptiert (z. b. die Benutzer Typen "/" und die nächste Position nur Ziffern annimmt), wird das <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> Ereignis vom Steuerelement erhoben.  
  
 Beispielsweise sind in der "90/90/0000"-Datums Eingabemaske die Schrägstriche Literale. Angenommen, der Benutzer hat die ersten Ziffern "11" eingegeben, sodass sich die aktuelle Position in der Maske am ersten Schrägstrich (/) befindet. Wenn <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> `true`ist, verfügt der Benutzer über die folgenden gültigen Optionen:  
  
-   Der Benutzer kann ein "/"-Zeichen eingeben. Dies führt dazu, dass die Position auf das nächste Zeichen verschoben wird, das in diesem Beispiel die vierte Position ist, ein 9-Maskierungs Element.  
  
-   Der Benutzer kann das nächste bearbeitbare Zeichen eingeben, das in diesem Beispiel eine Ziffer ist. Die Ziffer wird überprüft, und die aktuelle Position wird automatisch an die fünfte Position verschoben, d. h. ein 0-Maskierungs Element.  
  
 Wenn <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> `false`ist, wird nur eine gültige Dateneingabe zugelassen. Dies ist in diesem Beispiel eine Ziffer.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.MaskedTextBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Text ab, wie er gerade angezeigt wird, oder legt diesen fest.</summary>
        <value>Eine <see cref="T:System.String" />, die den momentan durch das Steuerelement angezeigten Text enthält. Der Standardwert ist eine leere Zeichenfolge.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> ist die Standard Bindungs Eigenschaft für die <xref:System.Windows.Forms.MaskedTextBox>-Klasse.  
  
 Zeichen folgen, die mit dieser Eigenschaft abgerufen werden, werden gemäß den Formatierungs Eigenschaften des-Steuer Elements formatiert, wie <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> und <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>.  
  
 Sie können <xref:System.Windows.Forms.MaskedTextBox.Text%2A> abhängig von den Werten von <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>, <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>und <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>eine Zeichenfolge mit oder ohne Literalzeichen zuweisen.  
  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> ist die Standard Bindungs Eigenschaft für <xref:System.Windows.Forms.MaskedTextBox>.  
  
 Wenn sich der formatierte Textwert ändert, wird <xref:System.Windows.Forms.MaskedTextBox> das <xref:System.Windows.Forms.Control.TextChanged> Ereignis aufhebt. Andere Eigenschaften bewirken möglicherweise, dass dieser Wert geändert wird. Wenn Sie z. b. die <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>-Eigenschaft ändern, wird das <xref:System.Windows.Forms.Control.TextChanged>-Ereignis nicht erhöht, aber die <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>-Eigenschaft wird geändert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung des <xref:System.Windows.Forms.MaskedTextBox.Text%2A>-Attributs veranschaulicht.  
  
 [!code-vb[TestMaskedTextBox#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TestMaskedTextBox/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlign As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment TextAlign { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.TextAlign : System.Windows.Forms.HorizontalAlignment with get, set" Usage="System.Windows.Forms.MaskedTextBox.TextAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, wie Text in einem maskierten Textfeld-Steuerelement ausgerichtet wird, oder legt dies fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.HorizontalAlignment" />-Enumerationswerte, der angibt, wie Text relativ zum Steuerelement ausgerichtet ist. Die Standardeinstellung ist <see cref="F:System.Windows.Forms.HorizontalAlignment.Left" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A>-Eigenschaft verwenden, um den angezeigten Text in einem <xref:System.Windows.Forms.MaskedTextBox> so auszurichten, dass er mit dem Layout der visuellen Elemente auf dem Formular übereinstimmt. Wenn sich die Steuerelemente z. b. auf der rechten Seite des Formulars befinden, können Sie die <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A>-Eigenschaft auf <xref:System.Windows.Forms.HorizontalAlignment.Right>festlegen, und der Text wird am rechten Rand des Steuer Elements ausgerichtet, nicht an der standardmäßigen linken Ausrichtung.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der dieser Eigenschaft zugewiesene Wert ist nicht vom Typ <see cref="T:System.Windows.Forms.HorizontalAlignment" />.</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.AutoSize" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextAlignChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextAlignChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextAlignChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextAlignChanged;" />
      <MemberSignature Language="F#" Value="member this.TextAlignChanged : EventHandler " Usage="member this.TextAlignChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt nach einer Änderung der Textausrichtung ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged>-Ereignis wird ausgelöst, nachdem die <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A>-Eigenschaft geändert wurde.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged>-Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, sollten Sie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> durch <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ersetzen oder die Nachricht an eine mehrzeilige <xref:System.Windows.Forms.TextBox> anhängen.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz vom Typ "<xref:System.Windows.Forms.MaskedTextBox>" mit dem Namen "`MaskedTextBox1`" enthält. Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged>-Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#487](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#487)]
 [!code-vb[System.Windows.Forms.EventExamples#487](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#487)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public override int TextLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TextLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int" Usage="System.Windows.Forms.MaskedTextBox.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Länge des angezeigten Texts ab.</summary>
        <value>Ein Int32, das die Anzahl der Zeichen in der <see cref="P:System.Windows.Forms.MaskedTextBox.Text" />-Eigenschaft darstellt. <see cref="P:System.Windows.Forms.MaskedTextBox.TextLength" /> berücksichtigt Eigenschaften wie <see cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />, d. h., das Rückgabeergebnis kann je nachdem, ob das Steuerelement den Fokus besitzt, unterschiedlich ausfallen.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat TextMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat TextMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property TextMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat TextMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberSignature Language="F#" Value="member this.TextMaskFormat : System.Windows.Forms.MaskFormat with get, set" Usage="System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, ob Literale und Eingabeaufforderungszeichen in der formatierten Zeichenfolge enthalten sind, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.MaskFormat" />-Werte. Die Standardeinstellung ist <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>-Eigenschaft bestimmt, wie die Literalzeichen und Eingabe Aufforderungs Zeichen in der Maske beim Erzeugen der formatierten Zeichenfolge verarbeitet werden. Genauer gesagt, bestimmt es, ob Literalzeichen, Eingabe Aufforderungs Zeichen oder beides in der <xref:System.Windows.Forms.MaskedTextBox.Text%2A>-Eigenschaft enthalten sind. Wenn Eingabe Aufforderungs Zeichen ausgeschlossen werden, werden Sie in Leerzeichen in der formatierten Zeichenfolge transformiert.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>-Eigenschaft dient in Bezug darauf, wie die <xref:System.Windows.Forms.MaskedTextBox.Text%2A>-Eigenschaft interpretiert wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Die Eigenschaft wurde mit einem ungültigen <see cref="T:System.Windows.Forms.MaskFormat" />-Wert festgelegt.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="maskedTextBox.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge zurück, die das aktuelle maskierte Textfeld darstellt. Diese Methode überschreibt <see cref="M:System.Windows.Forms.TextBoxBase.ToString" />.</summary>
        <returns>Ein <see cref="T:System.String" /> mit Informationen über die aktuelle <see cref="T:System.Windows.Forms.MaskedTextBox" />. Die Zeichenfolge enthält den Typ, eine vereinfachte Ansicht der Eingabezeichenfolge und die formatierte Eingabezeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Version der <xref:System.Windows.Forms.MaskedTextBox.ToString%2A> Methode ruft die Basisklassen Implementierung dieser Methode auf <xref:System.Windows.Forms.TextBoxBase.ToString%2A?displayProperty=nameWithType>und fügt dann die Eingabe Zeichenfolge nach der Verarbeitung durch die Maske an. Diese Methode berücksichtigt Eigenschaften, die die Darstellung der formatierten Zeichenfolge ändern, mit den folgenden Ausnahmen:  
  
-   Die zurückgegebene Zeichenfolge enthält immer Eingabe Aufforderungs-und Literalzeichen, unabhängig von den Werten der <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>-Eigenschaft.  
  
-   Kenn Wort Zeichen werden ignoriert, sodass die tatsächlichen vom Benutzer eingegebenen Zeichen zurückgegeben werden. Mit anderen Worten, die Werte der Eigenschaften <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> und <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> werden ignoriert.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="TypeValidationCompleted">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypeValidationCompleted As TypeValidationEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TypeValidationEventHandler ^ TypeValidationCompleted;" />
      <MemberSignature Language="F#" Value="member this.TypeValidationCompleted : System.Windows.Forms.TypeValidationEventHandler " Usage="member this.TypeValidationCompleted : System.Windows.Forms.TypeValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TypeValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn <see cref="T:System.Windows.Forms.MaskedTextBox" /> die Analyse des aktuellen Werts unter Verwendung der <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />-Eigenschaft beendet hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement überprüft optional die Benutzereingaben anhand des Typs, der durch seine <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A?displayProperty=nameWithType>-Eigenschaft definiert wird. Wenn diese Eigenschaft nicht `null`ist, tritt die folgende Reihe von Ereignissen auf:  
  
1.  Die Validierungs Sequenz beginnt, wenn eine der folgenden Aktionen auftritt:  
  
    -   <xref:System.Windows.Forms.MaskedTextBox> Steuerelement den Fokus erhält.  
  
    -   Die <xref:System.Windows.Forms.MaskedTextBox.Text%2A>-Eigenschaft wird abgerufen.  
  
    -   Die <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> -Methode wird aufgerufen.  
  
2.  Jedes dieser Ereignisse führt zu einem Rückruf der `Parse`-Methode des Typs, der mit der <xref:System.Windows.Forms.TypeValidationEventArgs.ValidatingType%2A>-Eigenschaft angegeben wird. `Parse` ist für die Konvertierung der formatierten Eingabe Zeichenfolge in den Zieltyp verantwortlich. Eine erfolgreiche Konvertierung entspricht einer erfolgreichen Validierung.  
  
3.  Nachdem `Parse` zurückgegeben hat, wird das <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>-Ereignis ausgelöst. Der Ereignishandler für dieses Ereignis wird am häufigsten implementiert, um die Verarbeitung von Typ-oder Masken Validierung auszuführen. Er empfängt einen <xref:System.Windows.Forms.TypeValidationEventArgs> Parameter, der Informationen über die Konvertierung enthält. der <xref:System.Windows.Forms.TypeValidationEventArgs.IsValidInput%2A> Member gibt beispielsweise an, ob die Konvertierung erfolgreich war.  
  
4.  Nachdem der Ereignishandler für das <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>-Ereignis zurückgegeben wurde, wird das standardmäßige Validierungs Ereignis <xref:System.Windows.Forms.Control.Validating>ausgelöst. Ein Handler kann implementiert werden, um eine Standard Validierung auszuführen, u. u. das Abbrechen des Ereignisses.  
  
5.  Wenn das Ereignis in Schritt 3 nicht abgebrochen wird, wird das Standard Steuerelement-Validierungs Ereignis <xref:System.Windows.Forms.Control.Validated> ausgelöst.  
  
 Wenn die <xref:System.Windows.Forms.TypeValidationEventArgs.Cancel%2A>-Eigenschaft auf `true` im <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>-Ereignishandler festgelegt ist, wird das Ereignis abgebrochen, und das <xref:System.Windows.Forms.MaskedTextBox> Steuerelement behält den Fokus, es sei denn, das nachfolgende <xref:System.Windows.Forms.Control.Validating> Ereignis legt seine Version der <xref:System.ComponentModel.CancelEventArgs.Cancel%2A?displayProperty=nameWithType>-Eigenschaft auf `false`zurück.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird versucht, die Eingabe des Benutzers als gültiges <xref:System.DateTime> Objekt zu analysieren. Wenn dies nicht möglich ist, zeigt der <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> Ereignishandler dem Benutzer eine Fehlermeldung an. Wenn der Wert eine gültige <xref:System.DateTime>ist, überprüft der Code, ob das angegebene Datum nicht vor dem heutigen Datum liegt. Dieses Codebeispiel setzt voraus, dass das Windows Forms Projekt ein <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement mit dem Namen `MaskedTextBox1` und ein <xref:System.Windows.Forms.ToolTip> Steuerelement mit dem Namen `ToolTip1`enthält  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="T:System.Windows.Forms.TypeValidationEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public void Undo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Undo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.Undo" />
      <MemberSignature Language="VB.NET" Value="Public Sub Undo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Undo();" />
      <MemberSignature Language="F#" Value="override this.Undo : unit -&gt; unit" Usage="maskedTextBox.Undo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Macht die letzte Bearbeitung des Textfelds rückgängig. Diese Methode wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht unterstützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.Undo%2A>-Methode wird von der Basis <xref:System.Windows.Forms.TextBoxBase> Klasse geerbt. <xref:System.Windows.Forms.MaskedTextBox> unterstützt jedoch keine Rückgängig-Funktionalität.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      </Docs>
    </Member>
    <Member MemberName="UseSystemPasswordChar">
      <MemberSignature Language="C#" Value="public bool UseSystemPasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSystemPasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSystemPasswordChar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSystemPasswordChar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseSystemPasswordChar : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das vom Betriebssystem bereitgestellte Kennwortzeichen verwendet werden soll, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn das Systemkennwort als Eingabeaufforderungszeichen verwendet werden soll, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>-Eigenschaft bestimmt, ob eine vom Benutzer bereitgestellte Eingabe im <xref:System.Windows.Forms.MaskedTextBox> als mehrere Vorkommen eines Kenn Wort Zeichens angezeigt werden soll, das vom Betriebssystem definiert wird. <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> funktioniert ähnlich wie die <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>-Eigenschaft, aber anstelle eines vom Programmierer bereitgestellten Zeichens für die Eingabeaufforderung verwendet <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> eine vom Betriebssystem definierte Eingabeaufforderung. Diese Eigenschaft hat Vorrang vor <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>.  
  
> [!IMPORTANT]
>  Als Sicherheits Überlegung deaktiviert das <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement Ausschneide-und Kopiervorgänge für Kenn Wort geschützte Zeichen folgen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das angegebene Kennwortzeichen entspricht dem aktuellen Eingabeaufforderungszeichen <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />. Die zwei Zeichen müssen unterschiedlich sein.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public object ValidateText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateText () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateText();" />
      <MemberSignature Language="F#" Value="member this.ValidateText : unit -&gt; obj" Usage="maskedTextBox.ValidateText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert die Zeichenfolge der Benutzereingabe in eine Instanz des validierenden Typs.</summary>
        <returns>Falls erfolgreich, ein <see cref="T:System.Object" /> mit dem durch die <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />-Eigenschaft angegebenen Typ; andernfalls <see langword="null" />, um einen Konvertierungsfehler anzuzeigen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A>-Methode versucht, die in der <xref:System.Windows.Forms.MaskedTextBox.Text%2A>-Eigenschaft enthaltene formatierte Zeichenfolge in eine Instanz des Typs zu konvertieren, der durch die <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>-Eigenschaft angegeben wird. Eingabe Aufforderungs Zeichen werden in der formatierten Zeichenfolge ignoriert, Literale werden jedoch in Übereinstimmung mit dem aktuellen Wert der <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>-Eigenschaft behandelt.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> löst das <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>-Ereignis aus, nachdem die Konvertierung durchgeführt wurde, unabhängig von deren Erfolg.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Während der Analyse der Eingabezeichenfolge ist eine schwerwiegende Ausnahme aufgetreten.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ValidatingType">
      <MemberSignature Language="C#" Value="public Type ValidatingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValidatingType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ValidatingType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatingType : Type with get, set" Usage="System.Windows.Forms.MaskedTextBox.ValidatingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Datentyp ab, der verwendet wird, um die Dateneingabe durch den Benutzer zu überprüfen, oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Type" />, der den bei der Validierung verwendeten Datentyp darstellt. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Masken garantieren nicht, dass die Eingabe eines Benutzers einen gültigen Wert für einen bestimmten Typ darstellt. Der folgende C# Code zeigt eine Maske:  
  
```  
maskedTextBox1.Mask = "99/99/9999";  
```  
  
 Der folgende Visual Basic Code zeigt eine Maske:  
  
 `MaskedTextBox1.Mask = "99/99/9999"`  
  
 Diese Maske kann verlangen, dass der Benutzer acht Ziffern eingibt, aber nicht überprüfen kann, ob der Benutzer die Werte für Monat, Datum und Jahr im richtigen Bereich eingibt. "12/20/2003" und "70/90/0000" sind bis auf die Maske gleichermaßen gültig.  
  
 Sie können <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> verwenden, um zu überprüfen, ob die vom Benutzer eingegebenen Daten in den richtigen Bereich fallen (in dem zuvor erwähnten Fall), indem Sie eine Instanz des <xref:System.DateTime> Typs zuweisen. Der aktuelle Text im-Steuerelement wird überprüft, wenn der Benutzer das Steuerelement verlässt. Sie können bestimmen, ob die Überprüfung der Daten fehlschlägt, indem Sie das <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> Ereignis überwachen. <xref:System.Windows.Forms.MaskedTextBox> führt die Überprüfung nur <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> aus, wenn <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> `true`ist.  
  
 Wenn Sie eigene benutzerdefinierte Datentypen mit <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>verwenden möchten, müssen Sie eine statische `Parse` Methode implementieren, die eine Zeichenfolge als Parameter annimmt. Diese Methode muss mit einer oder beiden der folgenden Signaturen implementiert werden:  
  
 `public static Object Parse(string)`  
  
 `public static Object Parse(string, IFormatProvider)`  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird versucht, die Eingabe des Benutzers als gültiges <xref:System.DateTime>zu analysieren. Wenn dies nicht möglich ist, zeigt der <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> Ereignishandler dem Benutzer eine Fehlermeldung an. Wenn der Wert eine gültige <xref:System.DateTime>ist, führt der Code eine zusätzliche Überprüfung durch, um sicherzustellen, dass das angegebene Datum nicht vor dem heutigen Datum liegt. Dieses Codebeispiel setzt voraus, dass das Windows Forms Projekt ein <xref:System.Windows.Forms.MaskedTextBox>-Steuerelement mit dem Namen `MaskedTextBox1` und ein <xref:System.Windows.Forms.ToolTip> Steuerelement mit dem Namen `ToolTip1`enthält  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc : Message -&gt; unit" Usage="maskedTextBox.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Die zu verarbeitende Windows-<see cref="T:System.Windows.Forms.Message" />.</param>
        <summary>Verarbeitet Windows-Meldungen.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="WordWrap">
      <MemberSignature Language="C#" Value="public bool WordWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WordWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.WordWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property WordWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WordWrap { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WordWrap : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.WordWrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob im mehrzeiligen Textfeld-Steuerelement bei Bedarf automatisch ein Zeilenumbruch durchgeführt wird, oder legt diesen fest. Diese Eigenschaft wird von <see cref="T:System.Windows.Forms.MaskedTextBox" /> nicht unterstützt.</summary>
        <value>Die <see cref="P:System.Windows.Forms.MaskedTextBox.WordWrap" />-Eigenschaft gibt immer <see langword="false" /> zurück.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da <xref:System.Windows.Forms.MaskedTextBox> nicht mehrere Eingabezeilen unterstützt, wird die <xref:System.Windows.Forms.MaskedTextBox.WordWrap%2A>-Eigenschaft ignoriert.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="Timer" FullName="System.Windows.Forms.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="605adb65317c3aed410b30da1253c4608ed2231d" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70495736" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Tick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implementiert einen Zeitgeber, der ein Ereignis in benutzerdefinierten Intervallen auslöst. Dieser Zeitgeber ist für die Verwendung in Windows Forms-Anwendungen optimiert und muss in einem Fenster verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine <xref:System.Windows.Forms.Timer> wird verwendet, um ein Ereignis in benutzerdefinierten Intervallen zu erhöhen. Dieser Windows-Timer ist für eine Single Thread-Umgebung konzipiert, in der UI-Threads verwendet werden, um die Verarbeitung durchzuführen. Hierfür ist es erforderlich, dass der Benutzercode über ein UI-Meldungs-Pump verfügen muss  
  
 Wenn Sie diesen Timer verwenden, verwenden Sie <xref:System.Windows.Forms.Timer.Tick> das-Ereignis, um einen Abruf Vorgang auszuführen oder einen Begrüßungsbildschirm für einen angegebenen Zeitraum anzuzeigen. Wenn die <xref:System.Windows.Forms.Timer.Enabled%2A> -Eigenschaft auf `true` festgelegt ist <xref:System.Windows.Forms.Timer.Interval%2A> und die-Eigenschaft größer als 0 <xref:System.Windows.Forms.Timer.Tick> (null) ist, wird das- <xref:System.Windows.Forms.Timer.Interval%2A> Ereignis in Intervallen basierend auf der-Eigenschafts Einstellung ausgelöst.  
  
 Diese Klasse stellt Methoden zum Festlegen des Intervalls und zum Starten und Abbrechen des Timers bereit.  
  
> [!NOTE]
>  Bei der Windows Forms Timer-Komponente handelt es sich um einen Single Thread, der auf eine Genauigkeit von 55 Millisekunden beschränkt ist. Wenn Sie einen Multithread-Timer mit größerer Genauigkeit benötigen, verwenden <xref:System.Timers.Timer> Sie die- <xref:System.Timers> Klasse im-Namespace.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein einfacher Interval-Timer implementiert, der alle fünf Sekunden einen Alarm festlegt. Wenn der Alarm auftritt, wird <xref:System.Windows.Forms.MessageBox> von ein die Anzahl der Versuche angezeigt, mit denen der Alarm gestartet wurde, und der Benutzer wird aufgefordert, ob der Timer weiterhin ausgeführt werden soll.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Timer" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Timer" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein neuer Timer erstellt wird, ist er deaktiviert. Das heißt, <xref:System.Windows.Forms.Timer.Enabled%2A> ist auf `false`festgelegt. Um den Timer zu aktivieren, müssen <xref:System.Windows.Forms.Timer.Start%2A> Sie die- <xref:System.Windows.Forms.Timer.Enabled%2A> Methode `true`aufzurufen oder auf festlegen.  
  
 Wenn der Timer deaktiviert ist und der Timer außerhalb des Gültigkeits Bereichs liegt, wird der Timer verworfen, wenn Garbage Collection auftritt. Wenn der Timer aktiviert ist, und auch wenn er außerhalb des Gültigkeits Bereichs liegt, unterliegt er nicht Garbage Collection.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Timer : System.ComponentModel.IContainer -&gt; System.Windows.Forms.Timer" Usage="new System.Windows.Forms.Timer container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">Ein <see cref="T:System.ComponentModel.IContainer" />, der den Container für den Zeitgeber darstellt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Timer" />-Klasse gemeinsam mit einem angegebenen Container.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit <xref:System.Windows.Forms.Timer> dem-Konstruktor können Sie einem <xref:System.Windows.Forms.Timer> beliebiges <xref:System.ComponentModel.Container> -Objekt zuordnen. Indem Sie den <xref:System.Windows.Forms.Timer> like dieser zuordnen, übergeben Sie die Steuerung der Lebensdauer <xref:System.Windows.Forms.Timer> von an die <xref:System.ComponentModel.Container>. Dies kann hilfreich sein, wenn Sie eine Reihe von Komponenten in der Anwendung verwenden und alle gleichzeitig verwerfen möchten. Wenn Sie z. b. ein <xref:System.Windows.Forms.ToolTip>-, <xref:System.Windows.Forms.ImageList>ein-und <xref:System.Windows.Forms.Timer> ein- <xref:System.ComponentModel.Container>Feld mit <xref:System.ComponentModel.Container.Dispose%2A> einem verknüpfen <xref:System.ComponentModel.Container> , wird durch den Aufruf von für das auch die Beseitigung all dieser Komponenten erzwungen.  
  
 Wenn ein neuer Timer erstellt wird, ist er deaktiviert. Das heißt, <xref:System.Windows.Forms.Timer.Enabled%2A> ist auf `false`festgelegt. Um den Timer zu aktivieren, müssen <xref:System.Windows.Forms.Timer.Start%2A> Sie die- <xref:System.Windows.Forms.Timer.Enabled%2A> Methode `true`aufzurufen oder auf festlegen.  
  
 Diese Instanz ist so lange vorhanden, bis Ihr Container Sie in Garbage Collection freigibt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben. <see langword="false" />, um nur die nicht verwalteten Ressourcen freizugeben.</param>
        <summary>Gibt außer den Speicherressourcen alle Ressourcen frei, die vom Zeitgeber verwendet werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wird <xref:System.Windows.Forms.Timer.Dispose%2A> aufgerufen, wenn Sie mit der Verwendung des Timers fertig sind. Die <xref:System.Windows.Forms.Timer.Dispose%2A> -Methode versetzt den Timer in einen nicht verwendbaren Zustand. Nachdem Sie aufgerufen <xref:System.Windows.Forms.Timer.Dispose%2A>haben, müssen Sie alle Verweise auf den Timer freigeben, damit der Arbeitsspeicher, den Sie belegen, von Garbage Collection freigegeben werden kann.  
  
> [!NOTE]
>  Wird immer <xref:System.Windows.Forms.Timer.Dispose%2A> aufgerufen, bevor Sie den letzten Verweis auf den Timer freigeben. Andernfalls werden die Ressourcen, die der Timer verwendet, erst freigegeben, wenn Garbage Collection den Dekonstruktor des timerobjekts aufruft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob der Zeitgeber ausgeführt wird.</summary>
        <value><see langword="true" />, wenn der Zeitgeber gegenwärtig aktiviert ist, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Zeitgeber unterliegt nicht Garbage Collection, wenn der Wert `true`ist.  
  
 Das Aufrufen <xref:System.Windows.Forms.Timer.Start%2A> der-Methode ist das gleiche <xref:System.Windows.Forms.Timer.Enabled%2A> wie `true`das Festlegen von auf. Ebenso ist das Aufrufen <xref:System.Windows.Forms.Timer.Stop%2A> der-Methode identisch mit dem <xref:System.Windows.Forms.Timer.Enabled%2A> festlegen `false`von auf.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein einfacher Interval-Timer implementiert, der alle fünf Sekunden einen Alarm festlegt. Wenn der Alarm auftritt, wird <xref:System.Windows.Forms.MessageBox> von ein die Anzahl der Versuche angezeigt, mit denen der Alarm gestartet wurde, und der Benutzer wird aufgefordert, ob der Timer weiterhin ausgeführt werden soll.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public int Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Interval { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : int with get, set" Usage="System.Windows.Forms.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Zeitraum in Millisekunden vor dem Auslösen des <see cref="E:System.Windows.Forms.Timer.Tick" />-Ereignisses nach dem letzten Eintreten des <see cref="E:System.Windows.Forms.Timer.Tick" />-Ereignisses ab oder legt diesen fest.</summary>
        <value><see cref="T:System.Int32" /> gibt die Anzahl der Millisekunden vor dem Auslösen des <see cref="E:System.Windows.Forms.Timer.Tick" />-Ereignisses nach dem letzten Eintreten des <see cref="E:System.Windows.Forms.Timer.Tick" />-Ereignisses an. Der Wert kann nicht kleiner als eins sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um die Anzahl der Sekunden im Intervall zu erhalten, teilen Sie diese Zahl durch 1.000.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein einfacher Interval-Timer implementiert, der alle fünf Sekunden einen Alarm festlegt. Wenn der Alarm auftritt, wird <xref:System.Windows.Forms.MessageBox> von ein die Anzahl der Versuche angezeigt, mit denen der Alarm gestartet wurde, und der Benutzer wird aufgefordert, ob der Timer weiterhin ausgeführt werden soll.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTick">
      <MemberSignature Language="C#" Value="protected virtual void OnTick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTick : EventArgs -&gt; unit&#xA;override this.OnTick : EventArgs -&gt; unit" Usage="timer.OnTick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält. Diese ist immer <see cref="F:System.EventArgs.Empty" />.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Timer.Tick" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird für jeden Zeit Geber Tick aufgerufen. Es werden alle Methoden aufgerufen, die über <xref:System.Windows.Forms.Timer.Tick>hinzugefügt werden. Wenn Sie von <xref:System.Windows.Forms.Timer>erben, können Sie diese Methode überschreiben.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Stellen Sie beim Überschreiben <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> in einer abgeleiteten Klasse sicher, dass Sie die-Methode der Basisklasse aufzurufen. <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /></para></block>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Startet den Zeitgeber.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den Timer auch starten, indem Sie <xref:System.Windows.Forms.Timer.Enabled%2A> die- `true`Eigenschaft auf festlegen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein einfacher Interval-Timer implementiert, der alle fünf Sekunden einen Alarm festlegt. Wenn der Alarm auftritt, wird <xref:System.Windows.Forms.MessageBox> von ein die Anzahl der Versuche angezeigt, mit denen der Alarm gestartet wurde, und der Benutzer wird aufgefordert, ob der Timer weiterhin ausgeführt werden soll.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Hält den Zeitgeber an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den Timer auch abbrechen, indem Sie <xref:System.Windows.Forms.Timer.Enabled%2A> die- `false`Eigenschaft auf festlegen. Ein <xref:System.Windows.Forms.Timer> -Objekt kann innerhalb derselben Anwendungs Sitzung mehrmals aktiviert und deaktiviert werden.  
  
 Wenn <xref:System.Windows.Forms.Timer.Start%2A> Sie einen <xref:System.Windows.Forms.Timer> aufrufen <xref:System.Windows.Forms.Timer> , nachdem Sie durch <xref:System.Windows.Forms.Timer.Stop%2A> Aufrufen von deaktiviert haben, wird das unterbrochene Intervall von neu gestartet. Wenn Ihr <xref:System.Windows.Forms.Timer> für ein Intervall von 5000 Millisekunden festgelegt ist und Sie um <xref:System.Windows.Forms.Timer.Stop%2A> ungefähr <xref:System.Windows.Forms.Timer.Start%2A> 3000 Millisekunden aufrufen, bewirkt der <xref:System.Windows.Forms.Timer> Aufruf von, dass 5000 Millisekunden wartet, bevor <xref:System.Windows.Forms.Timer.Tick> das Ereignis ausgelöst wird.  
  
> [!NOTE]
>  Das Aufrufen von " <xref:System.Windows.Forms.Timer> Abbrechen" für beliebige innerhalb einer Windows Forms Anwendung kann <xref:System.Windows.Forms.Timer> dazu führen, dass Nachrichten von anderen Komponenten in der <xref:System.Windows.Forms.Timer> Anwendung sofort verarbeitet werden, da alle Komponenten auf dem Hauptanwendungs Thread ausgeführt werden. Wenn Sie über zwei <xref:System.Windows.Forms.Timer> Komponenten verfügen, eine auf 700 Millisekunden und eine auf 500 Millisekunden festgelegt ist und Sie <xref:System.Windows.Forms.Timer.Stop%2A> für den ersten <xref:System.Windows.Forms.Timer>aufzurufen, empfängt Ihre Anwendung möglicherweise zuerst einen Ereignis Rückruf für die zweite Komponente. Wenn dies problematisch ist, sollten Sie stattdessen <xref:System.Threading.Timer> die-Klasse <xref:System.Threading> im-Namespace verwenden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein einfacher Interval-Timer implementiert, der alle fünf Sekunden einen Alarm festlegt. Wenn der Alarm auftritt, wird <xref:System.Windows.Forms.MessageBox> von ein die Anzahl der Versuche angezeigt, mit denen der Alarm gestartet wurde, und der Benutzer wird aufgefordert, ob der Timer weiterhin ausgeführt werden soll.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Timer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine beliebige Zeichenfolge ab, die einen Benutzerzustand darstellt, oder legt diese fest.</summary>
        <value>Eine beliebige Zeichenfolge, die einen Benutzerzustand darstellt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Timer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn das angegebene Intervall für den Zeitgeber abgelaufen und der Zeitgeber aktiviert ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Aufrufen <xref:System.Diagnostics.Debug.Assert%2A> der-Methode <xref:System.Diagnostics.Debug> für die-Klasse <xref:System.Windows.Forms.Timer.Tick> innerhalb des Ereignisses verhält sich möglicherweise nicht wie erwartet, da das Anzeigen des Dialog Felds "Assert <xref:System.Windows.Forms.Timer.Tick> " möglicherweise dazu führt, dass Windows das Ereignis mehrmals auslöst. Es wird empfohlen, dass Sie keine Assertionen innerhalb dieses Ereignisses testen und stattdessen <xref:System.Diagnostics.Debug.Write%2A>die <xref:System.Diagnostics.Debug.WriteIf%2A>Methoden <xref:System.Diagnostics.Debug.WriteLine%2A>,, <xref:System.Diagnostics.Debug.WriteLineIf%2A> oder verwenden.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein einfacher Interval-Timer implementiert, der alle fünf Sekunden einen Alarm festlegt. Wenn der Alarm auftritt, wird <xref:System.Windows.Forms.MessageBox> von ein die Anzahl der Versuche angezeigt, mit denen der Alarm gestartet wurde, und der Benutzer wird aufgefordert, ob der Timer weiterhin ausgeführt werden soll.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge zurück, die den <see cref="T:System.Windows.Forms.Timer" /> darstellt.</summary>
        <returns>Eine Zeichenfolge, die das aktuelle <see cref="T:System.Windows.Forms.Timer" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.Timer.ToString%2A> -Methode gibt eine Zeichenfolge zurück, die den <xref:System.Windows.Forms.Timer.Interval%2A> Wert der-Eigenschaft enthält.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="TreeNodeCollection" FullName="System.Windows.Forms.TreeNodeCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3d8ce6201ce4c04e9a514ffbf42839c4ca0857f1" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75177314" /></Metadata><TypeSignature Language="C#" Value="public class TreeNodeCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TreeNodeCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class TreeNodeCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNodeCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type TreeNodeCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine Auflistung von<see cref="T:System.Windows.Forms.TreeNode" />-Objekten dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit den Methoden <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>und <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> können Sie einzelne Struktur Knoten aus der Auflistung hinzufügen und daraus entfernen.  
  
> [!NOTE]
>  Das Auflisten der Auflistung und das Entfernen von Knoten wird nicht unterstützt.  
  
 Sie können auch die Methoden <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> oder <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> verwenden, um alle Struktur Knoten aus der Auflistung hinzuzufügen oder daraus zu entfernen.  
  
 Klassen können nicht von der <xref:System.Windows.Forms.TreeNodeCollection>-Klasse erben.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt Kundeninformationen in einem <xref:System.Windows.Forms.TreeView>-Steuerelement an. In den Stamm Struktur Knoten werden Kundennamen angezeigt, und die untergeordneten Struktur Knoten zeigen die Bestellnummern an, die den einzelnen Kunden zugewiesen sind. In diesem Beispiel werden 1.000-Kunden mit jeweils 15 Bestellungen angezeigt. Das erneute Zeichnen des <xref:System.Windows.Forms.TreeView> wird mithilfe der Methoden <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> und <xref:System.Windows.Forms.TreeView.EndUpdate%2A> unterdrückt, und ein warte Vorgang <xref:System.Windows.Forms.Cursor> wird angezeigt, während die <xref:System.Windows.Forms.TreeView> Objekte erstellt und zeichnet.<xref:System.Windows.Forms.TreeNode> Für dieses Beispiel ist es erforderlich, dass Sie über ein `Customer` Objekt verfügen, das eine Auflistung von `Order`-Objekten enthalten kann. Außerdem ist es erforderlich, dass Sie eine Instanz eines <xref:System.Windows.Forms.TreeView>-Steuer Elements auf einer <xref:System.Windows.Forms.Form>erstellt haben.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TreeView" />
    <altmember cref="T:System.Windows.Forms.TreeNode" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt der Auflistung einen neuen Strukturknoten hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Add : string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der Bezeichnungstext, der vom <see cref="T:System.Windows.Forms.TreeNode" /> angezeigt wird.</param>
        <summary>Fügt am Ende der aktuellen Strukturknotenauflistung einen neuen Strukturknoten mit dem angegebenen Bezeichnungstext ein.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.TreeNode" />, der den Strukturknoten darstellt, der der Auflistung hinzugefügt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>-Methode verwenden.  
  
 Um eine <xref:System.Windows.Forms.TreeNode> zu entfernen, die Sie zuvor hinzugefügt haben, verwenden Sie die Methoden <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>oder <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt Kundeninformationen in einem <xref:System.Windows.Forms.TreeView>-Steuerelement an. In den Stamm Struktur Knoten werden Kundennamen angezeigt, und die untergeordneten Struktur Knoten zeigen die Bestellnummern an, die den einzelnen Kunden zugewiesen sind. In diesem Beispiel werden 1.000-Kunden mit jeweils 15 Bestellungen angezeigt. Das erneute Zeichnen des <xref:System.Windows.Forms.TreeView> wird mithilfe der Methoden <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> und <xref:System.Windows.Forms.TreeView.EndUpdate%2A> unterdrückt, und ein warte Vorgang <xref:System.Windows.Forms.Cursor> wird angezeigt, während die <xref:System.Windows.Forms.TreeView> Objekte erstellt und zeichnet.<xref:System.Windows.Forms.TreeNode> Für dieses Beispiel ist es erforderlich, dass Sie über ein `Customer` Objekt verfügen, das eine Auflistung von `Order`-Objekten enthalten kann. Außerdem ist es erforderlich, dass Sie eine Instanz eines <xref:System.Windows.Forms.TreeView>-Steuer Elements auf einer <xref:System.Windows.Forms.Form>erstellt haben.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Windows.Forms.TreeNode -&gt; int&#xA;override this.Add : System.Windows.Forms.TreeNode -&gt; int" Usage="treeNodeCollection.Add node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">Der der Auflistung hinzuzufügende <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <summary>Fügt am Ende der Strukturknotenauflistung einen zuvor erstellten Strukturknoten ein.</summary>
        <returns>Der nullbasierte Indexwert des <see cref="T:System.Windows.Forms.TreeNode" />, der der Strukturknotenauflistung hinzugefügt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Version der <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>-Methode ermöglicht Ihnen das Hinzufügen von zuvor erstellten <xref:System.Windows.Forms.TreeNode> Objekten am Ende der Struktur Knoten Auflistung.  
  
 Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>-Methode verwenden.  
  
 Um eine <xref:System.Windows.Forms.TreeNode> zu entfernen, die Sie zuvor hinzugefügt haben, verwenden Sie die Methoden <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>oder <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>.  
  
> [!NOTE]
>  Eine <xref:System.Windows.Forms.TreeNode> kann jeweils nur einem <xref:System.Windows.Forms.TreeView> Steuerelement zugewiesen werden. Um den Struktur Knoten einem neuen Strukturansicht-Steuerelement hinzuzufügen, müssen Sie ihn zuerst aus der anderen Strukturansicht entfernen oder ihn Klonen.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt Kundeninformationen in einem <xref:System.Windows.Forms.TreeView>-Steuerelement an. In den Stamm Struktur Knoten werden Kundennamen angezeigt, und die untergeordneten Struktur Knoten zeigen die Bestellnummern an, die den einzelnen Kunden zugewiesen sind. In diesem Beispiel werden 1.000-Kunden mit jeweils 15 Bestellungen angezeigt. Das erneute Zeichnen des <xref:System.Windows.Forms.TreeView> wird mithilfe der Methoden <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> und <xref:System.Windows.Forms.TreeView.EndUpdate%2A> unterdrückt, und ein warte Vorgang <xref:System.Windows.Forms.Cursor> wird angezeigt, während die <xref:System.Windows.Forms.TreeView> Objekte erstellt und zeichnet.<xref:System.Windows.Forms.TreeNode> Für dieses Beispiel ist es erforderlich, dass Sie über ein `Customer` Objekt verfügen, das eine Auflistung von `Order`-Objekten enthalten kann. Außerdem ist es erforderlich, dass Sie eine Instanz eines <xref:System.Windows.Forms.TreeView>-Steuer Elements auf einer <xref:System.Windows.Forms.Form>erstellt haben.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="node" /> ist derzeit einer anderen <see cref="T:System.Windows.Forms.TreeView" /> zugewiesen.</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des Strukturknotens.</param>
        <param name="text">Der im Strukturknoten anzuzeigende Text.</param>
        <summary>Erstellt einen neuen Strukturknoten mit dem angegebenen Schlüssel und dem angegebenen Text und fügt diesen in der Auflistung hinzu.</summary>
        <returns>Das der Auflistung hinzugefügte <see cref="T:System.Windows.Forms.TreeNode" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>-Methode verwenden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des Strukturknotens.</param>
        <param name="text">Der im Strukturknoten anzuzeigende Text.</param>
        <param name="imageIndex">Der Index des Bildes, das im Strukturknoten angezeigt werden soll.</param>
        <summary>Erstellt einen Strukturknoten mit dem angegebenen Schlüssel, dem angegebenen Text und dem angegebenen Bild und fügt diesen in der Auflistung hinzu.</summary>
        <returns>Das der Auflistung hinzugefügte <see cref="T:System.Windows.Forms.TreeNode" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Der `imageIndex`-Parameter verweist auf ein Bild in der <xref:System.Windows.Forms.TreeView.ImageList%2A>-Eigenschaft des übergeordneten <xref:System.Windows.Forms.TreeView>.  
  
 Der Struktur Knoten wird am Ende der Sammlung hinzugefügt. Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>-Methode verwenden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageKey" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des Strukturknotens.</param>
        <param name="text">Der im Strukturknoten anzuzeigende Text.</param>
        <param name="imageKey">Das im Strukturknoten anzuzeigende Bild.</param>
        <summary>Erstellt einen Strukturknoten mit dem angegebenen Schlüssel, dem angegebenen Text und dem angegebenen Bild und fügt diesen in der Auflistung hinzu.</summary>
        <returns>Das der Auflistung hinzugefügte <see cref="T:System.Windows.Forms.TreeNode" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Der Struktur Knoten wird am Ende der Sammlung hinzugefügt. Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>-Methode verwenden.  
  
 Der `imageKey`-Parameter verweist auf ein Bild in der <xref:System.Windows.Forms.TreeView.ImageList%2A>-Eigenschaft des übergeordneten <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * int * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * int * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageIndex, selectedImageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des Strukturknotens.</param>
        <param name="text">Der im Strukturknoten anzuzeigende Text.</param>
        <param name="imageIndex">Der Index des Bildes, das im Strukturknoten angezeigt werden soll.</param>
        <param name="selectedImageIndex">Der Index des Bildes, das im Strukturknoten angezeigt werden soll, wenn dieser ausgewählt wird.</param>
        <summary>Erstellt einen Strukturknoten mit dem angegebenen Schlüssel, dem angegebenen Text und den angegebenen Bildern und fügt diesen in der Auflistung hinzu.</summary>
        <returns>Der der Auflistung hinzugefügte Strukturknoten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Der Struktur Knoten wird am Ende der Sammlung hinzugefügt. Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>-Methode verwenden.  
  
 Der `imageIndex`-Parameter verweist auf ein Bild in der <xref:System.Windows.Forms.TreeView.ImageList%2A>-Eigenschaft des übergeordneten <xref:System.Windows.Forms.TreeView>.  
  
 Der `selectedImageIndex`-Parameter verweist auf ein Bild in der <xref:System.Windows.Forms.TreeView.StateImageList%2A>-Eigenschaft des übergeordneten <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageKey, selectedImageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageKey" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selectedImageKey" Type="System.String" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des Strukturknotens.</param>
        <param name="text">Der im Strukturknoten anzuzeigende Text.</param>
        <param name="imageKey">Der Schlüssel des Bildes, das im Strukturknoten angezeigt werden soll.</param>
        <param name="selectedImageKey">Der Schlüssel des Bildes, das angezeigt wird, wenn der Knoten ausgewählt wird.</param>
        <summary>Erstellt einen Strukturknoten mit dem angegebenen Schlüssel, dem angegebenen Text und den angegebenen Bildern und fügt diesen in der Auflistung hinzu.</summary>
        <returns>Das der Auflistung hinzugefügte <see cref="T:System.Windows.Forms.TreeNode" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Der Struktur Knoten wird am Ende der Sammlung hinzugefügt. Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>-Methode verwenden.  
  
 Der `imageKey`-Parameter verweist auf ein Bild in der <xref:System.Windows.Forms.TreeView.ImageList%2A>-Eigenschaft des übergeordneten <xref:System.Windows.Forms.TreeView>.  
  
 Der `selectedImageKey`-Parameter verweist auf ein Bild in der <xref:System.Windows.Forms.TreeView.StateImageList%2A>-Eigenschaft des übergeordneten <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.TreeNode[] nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.TreeNode[] nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.AddRange(System.Windows.Forms.TreeNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (nodes As TreeNode())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ nodes);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : System.Windows.Forms.TreeNode[] -&gt; unit&#xA;override this.AddRange : System.Windows.Forms.TreeNode[] -&gt; unit" Usage="treeNodeCollection.AddRange nodes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Windows.Forms.TreeNode[]" />
      </Parameters>
      <Docs>
        <param name="nodes">Ein Array von <see cref="T:System.Windows.Forms.TreeNode" />-Objekten, die die der Auflistung hinzuzufügenden Strukturknoten darstellen.</param>
        <summary>Fügt der Auflistung ein Array von zuvor erstellten Strukturknoten hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.TreeNode>-Objekte, die im `nodes` Array enthalten sind, werden an das Ende der Auflistung angefügt.  
  
 Sie können die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode verwenden, um schnell eine Gruppe von zuvor erstellten <xref:System.Windows.Forms.TreeNode> Objekten der Auflistung hinzuzufügen, statt jedes <xref:System.Windows.Forms.TreeNode> manuell mithilfe der <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>-Methode der Auflistung hinzuzufügen.  
  
 Um eine <xref:System.Windows.Forms.TreeNode> zu entfernen, die Sie zuvor hinzugefügt haben, verwenden Sie die Methoden <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>oder <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die <xref:System.Windows.Forms.TreeNodeCollection> aus einer <xref:System.Windows.Forms.TreeView> in eine temporäre <xref:System.Array>kopiert und der Inhalt des Arrays dann mithilfe der <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode zu einer anderen <xref:System.Windows.Forms.TreeView> hinzugefügt. Der <xref:System.Windows.Forms.TreeNodeCollection> aus dem Quell <xref:System.Windows.Forms.TreeView> wird mithilfe der <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>-Methode gelöscht. Für dieses Beispiel ist es erforderlich, dass Sie über zwei <xref:System.Windows.Forms.TreeView> Steuerelemente verfügen, eine mit einer Auflistung von <xref:System.Windows.Forms.TreeNode>-Objekten.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="nodes" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="nodes" /> ist das untergeordnete Element einer anderen <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="treeNodeCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle Strukturknoten aus der Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie die gesamte Sammlung von Struktur Knoten aus einer Strukturansicht löschen.  
  
 Um einen einzelnen Struktur Knoten aus der Auflistung zu entfernen, verwenden Sie die Methoden <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> oder <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>.  
  
 Um der Auflistung neue <xref:System.Windows.Forms.TreeNode> Objekte hinzuzufügen, verwenden Sie die Methoden <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>oder <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die <xref:System.Windows.Forms.TreeNodeCollection> aus einer <xref:System.Windows.Forms.TreeView> in eine temporäre <xref:System.Array>kopiert und der Inhalt des Arrays dann mithilfe der <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode zu einer anderen <xref:System.Windows.Forms.TreeView> hinzugefügt. Der <xref:System.Windows.Forms.TreeNodeCollection> aus dem Quell <xref:System.Windows.Forms.TreeView> wird mithilfe der <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>-Methode gelöscht. Für dieses Beispiel ist es erforderlich, dass Sie über zwei <xref:System.Windows.Forms.TreeView> Steuerelemente verfügen, eine mit einer Auflistung von <xref:System.Windows.Forms.TreeNode>-Objekten.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Contains(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (node As TreeNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.TreeNode -&gt; bool" Usage="treeNodeCollection.Contains node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">Die <see cref="T:System.Windows.Forms.TreeNode" />, die in der Auflistung gesucht werden soll.</param>
        <summary>Bestimmt, ob der angegebene Strukturknoten ein Member der Auflistung ist.</summary>
        <returns><see langword="true" />, wenn das <see cref="T:System.Windows.Forms.TreeNode" /> ein Member der Auflistung ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie bestimmen, ob ein <xref:System.Windows.Forms.TreeNode> ein Member der Auflistung ist, bevor Sie versuchen, Vorgänge für die <xref:System.Windows.Forms.TreeNode>auszuführen. Mit dieser Methode können Sie überprüfen, ob ein <xref:System.Windows.Forms.TreeNode> hinzugefügt wurde oder noch ein Member der Auflistung ist.  
  
 Die von dieser Methode benötigte Zeit ist proportional zur Größe der Knoten Auflistung. Sie sollten Sie daher vermeiden, Sie mit großen Auflistungen zu verwenden.  
  
 Diese Methode überprüft nur Verweis Gleichheit. Sie können Sie nicht verwenden, um zu bestimmen, ob ein entsprechender, aber ein anderer Knoten in der Auflistung ist.  
  
> [!NOTE]
>  Eine Implikation der Verweis Gleichheits Anforderung besteht darin, dass Sie das Verhalten dieser Methode für abgeleitete <xref:System.Windows.Forms.TreeNode> Typen nicht anpassen können, indem Sie die <xref:System.Object.Equals%2A>-Methode der <xref:System.Windows.Forms.TreeNode>-Klasse überschreiben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird festgelegt, ob ein angegebenes <xref:System.Windows.Forms.TreeNode> innerhalb eines <xref:System.Windows.Forms.TreeNodeCollection>ist, und anschließend wird die Auflistung aufgelistet. Für dieses Beispiel ist es erforderlich, dass Sie eine <xref:System.Windows.Forms.Form> mit einem <xref:System.Windows.Forms.TreeView> haben, das eine <xref:System.Windows.Forms.TreeNodeCollection> enthält, die eine <xref:System.Windows.Forms.TreeNode> mit dem Namen `myTreeNode2`enthält.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="treeNodeCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name der zu suchenden <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <summary>Bestimmt, ob die Auflistung einen Strukturknoten mit dem angegebenen Schlüssel enthält.</summary>
        <returns><see langword="true" />, um anzugeben, dass die Auflistung ein <see cref="T:System.Windows.Forms.TreeNode" /> mit dem angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Beim Schlüssel Vergleich wird die Groß-/Kleinschreibung nicht beachtet. Wenn der `key`-Parameter `null` oder eine leere Zeichenfolge ist, gibt die Eigenschaft <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> `false`zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (dest As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ dest, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="treeNodeCollection.CopyTo (dest, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">Das Zielarray.</param>
        <param name="index">Der Index im Zielarray, an dem mit dem Speichern begonnen wird.</param>
        <summary>Kopiert die gesamte Auflistung an eine angegebene Position in einem vorhandenen Array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Anzahl von <xref:System.Windows.Forms.TreeNode> Objekten in einem <xref:System.Windows.Forms.TreeNodeCollection>angezeigt, der Inhalt der Auflistung in ein <xref:System.Object> Array kopiert und eine Liste der Struktur Knoten in einem <xref:System.Windows.Forms.Label> Steuerelement angezeigt. Für dieses Beispiel ist es erforderlich, dass Sie über eine <xref:System.Windows.Forms.TreeView> mit mindestens einem <xref:System.Windows.Forms.TreeNode> in seiner <xref:System.Windows.Forms.TreeNodeCollection>und ein <xref:System.Windows.Forms.Label>-Steuerelement auf einem <xref:System.Windows.Forms.Form>verfügen.  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Gesamtanzahl der <see cref="T:System.Windows.Forms.TreeNode" />-Objekte in der Auflistung ab.</summary>
        <value>Die Gesamtanzahl der <see cref="T:System.Windows.Forms.TreeNode" />-Objekte in der Auflistung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.TreeNodeCollection.Count%2A>-Eigenschaft enthält die Anzahl der <xref:System.Windows.Forms.TreeNode> Objekte, die der Auflistung zugewiesen sind. Sie können den <xref:System.Windows.Forms.TreeNodeCollection.Count%2A>-Eigenschafts Wert als obere Begrenzung einer Schleife verwenden, um eine Auflistung zu durchlaufen.  
  
> [!NOTE]
>  Da der Indexwert einer Auflistung ein NULL basierter Index ist, müssen Sie einen von der Schleifen Variablen subtrahieren. Wenn Sie dies nicht berücksichtigen, überschreiten Sie die oberen Begrenzungen der Sammlung und lösen eine <xref:System.IndexOutOfRangeException> Ausnahme aus.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Anzahl von <xref:System.Windows.Forms.TreeNode> Objekten in einem <xref:System.Windows.Forms.TreeNodeCollection>angezeigt, der Inhalt der Auflistung in ein <xref:System.Object> Array kopiert und eine Liste der Struktur Knoten in einem <xref:System.Windows.Forms.Label> Steuerelement angezeigt. Für dieses Beispiel ist es erforderlich, dass Sie über eine <xref:System.Windows.Forms.TreeView> mit mindestens einem <xref:System.Windows.Forms.TreeNode> in seiner <xref:System.Windows.Forms.TreeNodeCollection>und ein <xref:System.Windows.Forms.Label>-Steuerelement auf einem <xref:System.Windows.Forms.Form>verfügen.  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeNode[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Find(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (key As String, searchAllChildren As Boolean) As TreeNode()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ Find(System::String ^ key, bool searchAllChildren);" />
      <MemberSignature Language="F#" Value="member this.Find : string * bool -&gt; System.Windows.Forms.TreeNode[]" Usage="treeNodeCollection.Find (key, searchAllChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des zu suchenden Strukturknotens.</param>
        <param name="searchAllChildren"><see langword="true" />, damit die untergeordneten Knoten der Strukturknoten durchsucht werden, andernfalls <see langword="false" />.</param>
        <summary>Sucht die Strukturknoten mit dem angegebenen Schlüssel, wobei optional auch die untergeordneten Knoten durchsucht werden.</summary>
        <returns>Ein Array von <see cref="T:System.Windows.Forms.TreeNode" />-Objekten, deren <see cref="P:System.Windows.Forms.TreeNode.Name" />-Eigenschaft dem angegebenen Schlüssel entsprechen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Beim Schlüssel Vergleich wird die Groß-/Kleinschreibung nicht beachtet. Wenn der `key`-Parameter `null` oder eine leere Zeichenfolge ist oder keine Übereinstimmungen vorhanden sind, gibt die <xref:System.Windows.Forms.TreeNodeCollection.Item%2A>-Eigenschaft ein leeres Array zurück`.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="treeNodeCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator zurück, mit dem die Strukturknotenauflistung durchlaufen werden kann.</summary>
        <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der die Strukturknotenauflistung darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird festgelegt, ob ein angegebenes <xref:System.Windows.Forms.TreeNode> innerhalb eines <xref:System.Windows.Forms.TreeNodeCollection>ist, und anschließend wird die Auflistung aufgelistet. Für dieses Beispiel ist es erforderlich, dass Sie eine <xref:System.Windows.Forms.Form> mit einem <xref:System.Windows.Forms.TreeView> haben, das eine <xref:System.Windows.Forms.TreeNodeCollection> enthält, die eine <xref:System.Windows.Forms.TreeNode> mit dem Namen `myTreeNode2`enthält.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOf(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Forms.TreeNode -&gt; int" Usage="treeNodeCollection.IndexOf node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">Die <see cref="T:System.Windows.Forms.TreeNode" />, die in der Auflistung gesucht werden soll.</param>
        <summary>Gibt den Index des angegebenen Strukturknotens in der Auflistung zurück.</summary>
        <returns>Der nullbasierte Index des in der Strukturknotenauflistung gefundenen Elements, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von dieser Methode benötigte Zeit ist proportional zur Größe der Knoten Auflistung. Sie sollten Sie daher vermeiden, Sie mit großen Auflistungen zu verwenden.  
  
 Diese Methode überprüft nur Verweis Gleichheit. Sie können Sie nicht verwenden, um den Index eines äquivalenten, aber anderen Knotens in der Auflistung abzurufen.  
  
> [!NOTE]
>  Eine Implikation der Verweis Gleichheits Anforderung besteht darin, dass Sie das Verhalten dieser Methode für abgeleitete <xref:System.Windows.Forms.TreeNode> Typen nicht anpassen können, indem Sie die <xref:System.Object.Equals%2A>-Methode der <xref:System.Windows.Forms.TreeNode>-Klasse überschreiben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird festgelegt, ob ein angegebenes <xref:System.Windows.Forms.TreeNode> innerhalb eines <xref:System.Windows.Forms.TreeNodeCollection>ist, und anschließend wird die Auflistung aufgelistet. Für dieses Beispiel ist es erforderlich, dass Sie eine <xref:System.Windows.Forms.Form> mit einem <xref:System.Windows.Forms.TreeView> haben, das eine <xref:System.Windows.Forms.TreeNodeCollection> enthält, die eine <xref:System.Windows.Forms.TreeNode> mit dem Namen `myTreeNode2`enthält.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#2)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#2)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : string -&gt; int&#xA;override this.IndexOfKey : string -&gt; int" Usage="treeNodeCollection.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des zu suchenden Strukturknotens.</param>
        <summary>Gibt den Index des ersten Vorkommens eines Strukturknotens mit dem angegebenen Schlüssel zurück.</summary>
        <returns>Der nullbasierte Index des ersten Vorkommens eines Strukturknotens mit dem angegebenen Schlüssel, sofern dieser gefunden wird, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Windows.Forms.TreeNodeCollection.IndexOfKey%2A> nacheinander aufgerufen wird, wird der zuletzt zurückgegebene Index zuerst auf eine Schlüssel Übereinstimmung geprüft. wenn keine Entsprechung vorhanden ist, beginnt die Suche am Anfang der Auflistung.  
  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Beim Schlüssel Vergleich wird die Groß-/Kleinschreibung nicht beachtet. Wenn `key` `null` oder eine leere Zeichenfolge ist, gibt die <xref:System.Windows.Forms.TreeNodeCollection.Item%2A>-Eigenschaft-1 zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Insert">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt ein Element an der angegebenen Position in die Auflistung ein.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Die Position in der Auflistung, an der der Knoten eingefügt werden soll.</param>
        <param name="text">Der im Strukturknoten anzuzeigende Text.</param>
        <summary>Erstellt einen Strukturknoten mit dem angegebenen Text und fügt diesen am angegebenen Index ein.</summary>
        <returns>Der <see cref="T:System.Windows.Forms.TreeNode" />, der in die Auflistung eingefügt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.TreeView.Sorted%2A>-Eigenschaft auf `true`festgelegt ist, wird der Wert des `index`-Parameters ignoriert. Der <xref:System.Windows.Forms.TreeNode> wird in die Strukturansicht eingefügt, und die <xref:System.Windows.Forms.TreeView> wird erneut sortiert.  
  
 Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode verwenden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (int index, System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Insert (index As Integer, node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * System.Windows.Forms.TreeNode -&gt; unit&#xA;override this.Insert : int * System.Windows.Forms.TreeNode -&gt; unit" Usage="treeNodeCollection.Insert (index, node)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">Die indizierte Position in der Auflistung, an der der Strukturknoten eingefügt werden soll.</param>
        <param name="node">Die in die Auflistung einzufügende <see cref="T:System.Windows.Forms.TreeNode" />-Klasse.</param>
        <summary>Fügt einen vorhandenen Strukturknoten an der angegebenen Position in die Strukturknotenauflistung ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.TreeView.Sorted%2A?displayProperty=nameWithType>-Eigenschaft auf `true`festgelegt ist, wird der Wert des `index`-Parameters ignoriert. Der <xref:System.Windows.Forms.TreeNode> wird in die Strukturansicht eingefügt, und der <xref:System.Windows.Forms.TreeView> wird zurückgegriffen.  
  
 Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode verwenden.  
  
 Um eine <xref:System.Windows.Forms.TreeNode> zu entfernen, die Sie zuvor hinzugefügt haben, verwenden Sie die Methoden <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>oder <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>.  
  
> [!NOTE]
>  Eine <xref:System.Windows.Forms.TreeNode> kann jeweils nur einem <xref:System.Windows.Forms.TreeView> Steuerelement zugewiesen werden. Um den Struktur Knoten einem neuen Strukturansicht-Steuerelement hinzuzufügen, müssen Sie ihn zuerst aus der anderen Strukturansicht entfernen oder ihn Klonen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der ausgewählte Struktur Knoten aus einem <xref:System.Windows.Forms.TreeView> entfernt und einer anderen hinzugefügt, wenn beide Struktur Knoten Auflistungen nicht schreibgeschützt sind. Beim Klicken auf eine <xref:System.Windows.Forms.Button> wird die <xref:System.Windows.Forms.TreeNode>, die durch die Eigenschaft <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> dargestellt wird, mithilfe der <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>-Methode aus einer <xref:System.Windows.Forms.TreeView> gelöscht und mithilfe der <xref:System.Windows.Forms.TreeView>-Methode dem anderen <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> hinzugefügt. Für dieses Beispiel ist es erforderlich, dass Sie über ein <xref:System.Windows.Forms.Form> verfügen, das zwei <xref:System.Windows.Forms.TreeView>-Steuerelemente und eine <xref:System.Windows.Forms.Button>enthält Die <xref:System.Windows.Forms.TreeView> Steuerelemente sollten `treeView1` und `treeView2`benannt werden.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="node" /> ist derzeit einer anderen <see cref="T:System.Windows.Forms.TreeView" /> zugewiesen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Die Position in der Auflistung, an der der Knoten eingefügt werden soll.</param>
        <param name="key">Der Name des Strukturknotens.</param>
        <param name="text">Der im Strukturknoten anzuzeigende Text.</param>
        <summary>Erstellt einen Strukturknoten mit dem angegebenen Text und dem angegebenen Schlüssel und fügt diesen in die Auflistung ein.</summary>
        <returns>Der <see cref="T:System.Windows.Forms.TreeNode" />, der in die Auflistung eingefügt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.TreeView.Sorted%2A>-Eigenschaft auf `true`festgelegt ist, wird der Wert des `index`-Parameters ignoriert. Der <xref:System.Windows.Forms.TreeNode> wird in die Strukturansicht eingefügt, und die <xref:System.Windows.Forms.TreeView> wird erneut sortiert.  
  
 Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode verwenden.  
  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageIndex" Type="System.Int32" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Die Position in der Auflistung, an der der Knoten eingefügt werden soll.</param>
        <param name="key">Der Name des Strukturknotens.</param>
        <param name="text">Der im Strukturknoten anzuzeigende Text.</param>
        <param name="imageIndex">Der Index des Bildes, das im Strukturknoten angezeigt werden soll.</param>
        <summary>Erstellt einen Strukturknoten mit dem angegebenen Schlüssel, dem angegebenen Text und dem angegebenen Bild und fügt diesen am angegebenen Index in die Auflistung ein.</summary>
        <returns>Der <see cref="T:System.Windows.Forms.TreeNode" />, der in die Auflistung eingefügt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.TreeView.Sorted%2A>-Eigenschaft auf `true`festgelegt ist, wird der Wert des `index`-Parameters ignoriert. Der <xref:System.Windows.Forms.TreeNode> wird in die Strukturansicht eingefügt, und die <xref:System.Windows.Forms.TreeView> wird erneut sortiert.  
  
 Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode verwenden.  
  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Der `imageIndex`-Parameter verweist auf ein Bild in der <xref:System.Windows.Forms.TreeView.ImageList%2A>-Eigenschaft des übergeordneten <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageKey" Type="System.String" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Die Position in der Auflistung, an der der Knoten eingefügt werden soll.</param>
        <param name="key">Der Name des Strukturknotens.</param>
        <param name="text">Der im Strukturknoten anzuzeigende Text.</param>
        <param name="imageKey">Der Schlüssel des Bildes, das im Strukturknoten angezeigt werden soll.</param>
        <summary>Erstellt einen Strukturknoten mit dem angegebenen Schlüssel, dem angegebenen Text und dem angegebenen Bild und fügt diesen am angegebenen Index in die Auflistung ein.</summary>
        <returns>Der <see cref="T:System.Windows.Forms.TreeNode" />, der in die Auflistung eingefügt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.TreeView.Sorted%2A>-Eigenschaft auf `true`festgelegt ist, wird der Wert des `index`-Parameters ignoriert. Der <xref:System.Windows.Forms.TreeNode> wird in die Strukturansicht eingefügt, und die <xref:System.Windows.Forms.TreeView> wird erneut sortiert.  
  
 Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode verwenden.  
  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Der `imageKey`-Parameter verweist auf ein Bild in der <xref:System.Windows.Forms.TreeView.ImageList%2A>-Eigenschaft des übergeordneten <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * int * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * int * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageIndex, selectedImageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageIndex" Type="System.Int32" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" Index="4" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Die Position in der Auflistung, an der der Knoten eingefügt werden soll.</param>
        <param name="key">Der Name des Strukturknotens.</param>
        <param name="text">Der im Strukturknoten anzuzeigende Text.</param>
        <param name="imageIndex">Der Index des Bildes, das im Strukturknoten angezeigt werden soll.</param>
        <param name="selectedImageIndex">Der Index des Bildes, das im Strukturknoten angezeigt werden soll, wenn dieser ausgewählt wird.</param>
        <summary>Erstellt einen Strukturknoten mit dem angegebenen Schlüssel, dem angegebenen Text und den angegebenen Bildern und fügt diesen am angegebenen Index in die Auflistung ein.</summary>
        <returns>Der <see cref="T:System.Windows.Forms.TreeNode" />, der in die Auflistung eingefügt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.TreeView.Sorted%2A>-Eigenschaft auf `true`festgelegt ist, wird der Wert des `index`-Parameters ignoriert. Der <xref:System.Windows.Forms.TreeNode> wird in die Strukturansicht eingefügt, und die <xref:System.Windows.Forms.TreeView> wird erneut sortiert.  
  
 Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode verwenden.  
  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Der `imageIndex`-Parameter verweist auf ein Bild in der <xref:System.Windows.Forms.TreeView.ImageList%2A>-Eigenschaft des übergeordneten <xref:System.Windows.Forms.TreeView>.  
  
 Der `selectedimageIndex`-Parameter verweist auf ein Bild in der <xref:System.Windows.Forms.TreeView.StateImageList%2A>-Eigenschaft des übergeordneten <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageKey, selectedImageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageKey" Type="System.String" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selectedImageKey" Type="System.String" Index="4" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Die Position in der Auflistung, an der der Knoten eingefügt werden soll.</param>
        <param name="key">Der Name des Strukturknotens.</param>
        <param name="text">Der im Strukturknoten anzuzeigende Text.</param>
        <param name="imageKey">Der Schlüssel des Bildes, das im Strukturknoten angezeigt werden soll.</param>
        <param name="selectedImageKey">Der Schlüssel des Bildes, das im Strukturknoten angezeigt werden soll, wenn dieser ausgewählt wird.</param>
        <summary>Erstellt einen Strukturknoten mit dem angegebenen Schlüssel, dem angegebenen Text und den angegebenen Bildern und fügt diesen am angegebenen Index in die Auflistung ein.</summary>
        <returns>Der <see cref="T:System.Windows.Forms.TreeNode" />, der in die Auflistung eingefügt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.TreeView.Sorted%2A>-Eigenschaft auf `true`festgelegt ist, wird der Wert des `index`-Parameters ignoriert. Der <xref:System.Windows.Forms.TreeNode> wird in die Strukturansicht eingefügt, und die <xref:System.Windows.Forms.TreeView> wird erneut sortiert.  
  
 Sie können der Auflistung auch neue <xref:System.Windows.Forms.TreeNode> Objekte hinzufügen, indem Sie die <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>-Methode oder die <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>-Methode verwenden.  
  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Der `imageKey`-Parameter verweist auf ein Bild in der <xref:System.Windows.Forms.TreeView.ImageList%2A>-Eigenschaft des übergeordneten <xref:System.Windows.Forms.TreeView>.  
  
 Der `selectedimageKey`-Parameter verweist auf ein Bild in der <xref:System.Windows.Forms.TreeView.StateImageList%2A>-Eigenschaft des übergeordneten <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Auflistung schreibgeschützt ist.</summary>
        <value><see langword="true" />, wenn die Auflistung schreibgeschützt ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird der ausgewählte Struktur Knoten aus einem <xref:System.Windows.Forms.TreeView> entfernt und einer anderen hinzugefügt, wenn beide Struktur Knoten Auflistungen nicht schreibgeschützt sind. Beim Klicken auf eine <xref:System.Windows.Forms.Button> wird die <xref:System.Windows.Forms.TreeNode>, die durch die Eigenschaft <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> dargestellt wird, mithilfe der <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>-Methode aus einer <xref:System.Windows.Forms.TreeView> gelöscht und mithilfe der <xref:System.Windows.Forms.TreeView>-Methode dem anderen <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> hinzugefügt. Für dieses Beispiel ist es erforderlich, dass Sie über ein <xref:System.Windows.Forms.Form> verfügen, das zwei <xref:System.Windows.Forms.TreeView>-Steuerelemente und eine <xref:System.Windows.Forms.Button>enthält Die <xref:System.Windows.Forms.TreeView> Steuerelemente sollten `treeView1` und `treeView2`benannt werden.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft einen Strukturknoten aus der Auflistung ab oder legt diesen fest.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[int] { System::Windows::Forms::TreeNode ^ get(int index); void set(int index, System::Windows::Forms::TreeNode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Forms.TreeNode with get, set" Usage="System.Windows.Forms.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Die indizierte Position des <see cref="T:System.Windows.Forms.TreeNode" /> in der Auflistung.</param>
        <summary>Ruft den <see cref="T:System.Windows.Forms.TreeNode" /> an der angegebenen indizierten Position in der Auflistung ab oder legt diesen fest.</summary>
        <value>Der <see cref="T:System.Windows.Forms.TreeNode" /> an der angegebenen indizierten Position in der Auflistung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie <xref:System.Windows.Forms.TreeNode> Objekte einem bestimmten Speicherort zuweisen oder Sie aus dem <xref:System.Windows.Forms.TreeNodeCollection>abrufen möchten, können Sie auf das Auflistungs Objekt mit einem bestimmten Indexwert verweisen. Der Indexwert des <xref:System.Windows.Forms.TreeNodeCollection> ist ein NULL basierter Index.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die ersten <xref:System.Windows.Forms.TreeNode> aus einer <xref:System.Windows.Forms.TreeView> entfernt, wenn deren <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType>-Eigenschaft auf "Node0" festgelegt ist. Beim Klicken auf einen <xref:System.Windows.Forms.Button> wird der erste <xref:System.Windows.Forms.TreeNode> in der <xref:System.Windows.Forms.TreeView> mithilfe der <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>-Methode gelöscht. Für dieses Beispiel ist es erforderlich, dass Sie eine <xref:System.Windows.Forms.TreeView> und eine <xref:System.Windows.Forms.Button> auf einem <xref:System.Windows.Forms.Form>erstellt haben. Der erste <xref:System.Windows.Forms.TreeNode> in Ihrem <xref:System.Windows.Forms.TreeView> sollte die Text-Eigenschaft "Node0" aufweisen.  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Wert ist kleiner als 0 oder größer als die Anzahl der Strukturknoten in der Auflistung.</exception>
        <altmember cref="P:System.Windows.Forms.TreeNodeCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[System::String ^] { System::Windows::Forms::TreeNode ^ get(System::String ^ key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Windows.Forms.TreeNode" Usage="System.Windows.Forms.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des <see cref="T:System.Windows.Forms.TreeNode" />, der aus der Auflistung abgerufen werden soll.</param>
        <summary>Ruft den Strukturknoten mit dem angegebenen Schlüssel aus der Auflistung ab.</summary>
        <value>Das <see cref="T:System.Windows.Forms.TreeNode" /> mit dem angegebenen Schlüssel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Beim Schlüssel Vergleich wird die Groß-/Kleinschreibung nicht beachtet. Wenn der `key`-Parameter `null` oder eine leere Zeichenfolge ist, gibt die Eigenschaft <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> `null`zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.Forms.TreeNode -&gt; unit" Usage="treeNodeCollection.Remove node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">Das zu entfernende <see cref="T:System.Windows.Forms.TreeNode" />-Element.</param>
        <summary>Entfernt den angegebenen Strukturknoten aus der Strukturknotenauflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein <xref:System.Windows.Forms.TreeNode> aus der Struktur Knoten Auflistung entfernt wird, werden alle nachfolgenden Struktur Knoten in der Auflistung um eine Position nach oben verschoben.  
  
 Sie können auch eine <xref:System.Windows.Forms.TreeNode> entfernen, die Sie zuvor hinzugefügt haben, indem Sie die Methoden <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> oder <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> verwenden.  
  
> [!NOTE]
>  Das Auflisten der Auflistung und das Entfernen von Knoten wird nicht unterstützt.  
  
 Um der Auflistung neue <xref:System.Windows.Forms.TreeNode> Objekte hinzuzufügen, verwenden Sie die Methoden <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>oder <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der ausgewählte Struktur Knoten aus einem <xref:System.Windows.Forms.TreeView> entfernt und einer anderen hinzugefügt, wenn beide Struktur Knoten Auflistungen nicht schreibgeschützt sind. Beim Klicken auf eine <xref:System.Windows.Forms.Button> wird die <xref:System.Windows.Forms.TreeNode>, die durch die Eigenschaft <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> dargestellt wird, mithilfe der <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>-Methode aus einer <xref:System.Windows.Forms.TreeView> gelöscht und mithilfe der <xref:System.Windows.Forms.TreeView>-Methode dem anderen <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> hinzugefügt. Für dieses Beispiel ist es erforderlich, dass Sie über ein <xref:System.Windows.Forms.Form> verfügen, das zwei <xref:System.Windows.Forms.TreeView>-Steuerelemente und eine <xref:System.Windows.Forms.Button>enthält Die <xref:System.Windows.Forms.TreeView> Steuerelemente sollten `treeView1` und `treeView2`benannt werden.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="treeNodeCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der Index der zu entfernenden <see cref="T:System.Windows.Forms.TreeNode" />-Klasse.</param>
        <summary>Entfernt am angegebenen Index einen Strukturknoten aus der Strukturknotenauflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein <xref:System.Windows.Forms.TreeNode> aus der Struktur Knoten Auflistung entfernt wird, werden alle nachfolgenden Struktur Knoten in der Auflistung um eine Position nach oben verschoben.  
  
 Sie können auch eine <xref:System.Windows.Forms.TreeNode> entfernen, die Sie zuvor hinzugefügt haben, indem Sie die Methoden <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> oder <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> verwenden.  
  
> [!NOTE]
>  Das Auflisten der Auflistung und das Entfernen von Knoten wird nicht unterstützt.  
  
 Um der Auflistung neue <xref:System.Windows.Forms.TreeNode> Objekte hinzuzufügen, verwenden Sie die Methoden <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>oder <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die ersten <xref:System.Windows.Forms.TreeNode> aus einer <xref:System.Windows.Forms.TreeView> entfernt, wenn deren <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType>-Eigenschaft auf "Node0" festgelegt ist. Beim Klicken auf einen <xref:System.Windows.Forms.Button> wird der erste <xref:System.Windows.Forms.TreeNode> in der <xref:System.Windows.Forms.TreeView> mithilfe der <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>-Methode gelöscht. Für dieses Beispiel ist es erforderlich, dass Sie eine <xref:System.Windows.Forms.TreeView> und eine <xref:System.Windows.Forms.Button> auf einem <xref:System.Windows.Forms.Form>erstellt haben. Der erste <xref:System.Windows.Forms.TreeNode> in Ihrem <xref:System.Windows.Forms.TreeView> sollte die Text-Eigenschaft "Node0" aufweisen.  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member RemoveByKey : string -&gt; unit&#xA;override this.RemoveByKey : string -&gt; unit" Usage="treeNodeCollection.RemoveByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des Strukturknotens, der aus der Auflistung entfernt werden soll.</param>
        <summary>Entfernt den Strukturknoten mit dem angegebenen Schlüssel aus der Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.TreeNode.Name%2A>-Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.TreeNode> im <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf die Auflistung synchronisiert (threadsicher) ist.</summary>
        <value><see langword="false" /> in allen Fällen.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</summary>
        <value>Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Windows.Forms.TreeNodeCollection" /> synchronisiert werden kann.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (node As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ node) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Das Objekt, das der Strukturknotenauflistung hinzugefügt werden soll.</param>
        <summary>Fügt ein Objekt am Ende der Strukturknotenauflistung hinzu.</summary>
        <returns>Der nullbasierte Indexwert des <see cref="T:System.Windows.Forms.TreeNode" />, der der Strukturknotenauflistung hinzugefügt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `node` keine <xref:System.Windows.Forms.TreeNodeCollection>ist, verwendet die <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Add%2A>-Methode die Zeichenfolge, die von der <xref:System.Windows.Forms.TreeNode.ToString%2A>-Methode der <xref:System.Windows.Forms.TreeNode>-Klasse zurückgegeben wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><paramref name="node" /> ist derzeit einem anderen <see cref="T:System.Windows.Forms.TreeView" />-Steuerelement zugewiesen.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="node" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (node As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ node) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Das Objekt, das in der Auflistung gesucht werden soll.</param>
        <summary>Bestimmt, ob der angegebene Strukturknoten ein Member der Auflistung ist.</summary>
        <returns><see langword="true" />, wenn <paramref name="node" /> ein Member der Auflistung ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `node` keine <xref:System.Windows.Forms.TreeNode>ist, gibt die <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Contains%2A>-Methode `false`zurück. Daher ist es nicht möglich, eine Zeichenfolge zu übergeben, um zu bestimmen, ob die Auflistung einen Knoten enthält, der den Wert der Zeichenfolge als <xref:System.Windows.Forms.TreeNode.Text%2A>-Eigenschaft aufweist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (node As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ node) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Die <see cref="T:System.Windows.Forms.TreeNode" />, die in der Auflistung gesucht werden soll.</param>
        <summary>Gibt den Index des angegebenen Strukturknotens in der Auflistung zurück.</summary>
        <returns>Der nullbasierte Index des in der Strukturknotenauflistung gefundenen Elements, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `node` keine <xref:System.Windows.Forms.TreeNode>ist, gibt die <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23IndexOf%2A>-Methode-1 zurück. Daher ist es nicht möglich, eine Zeichenfolge zu übergeben, um den Knoten zu finden, der den Wert der Zeichenfolge als <xref:System.Windows.Forms.TreeNode.Text%2A>-Eigenschaft aufweist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, node As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ node) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Die indizierte Position in der Auflistung, an der der Strukturknoten eingefügt werden soll.</param>
        <param name="node">Die in die Auflistung einzufügende <see cref="T:System.Windows.Forms.TreeNode" />-Klasse.</param>
        <summary>Fügt einen vorhandenen Strukturknoten an der angegebenen Position in die Strukturknotenauflistung ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.TreeView.Sorted%2A>-Eigenschaft auf `true`festgelegt ist, wird der `index`-Parameter ignoriert. Der <xref:System.Windows.Forms.TreeNode> wird in die Strukturansicht eingefügt, und die <xref:System.Web.UI.WebControls.TreeView> wird erneut sortiert.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="node" /> ist derzeit einer anderen <see cref="T:System.Windows.Forms.TreeView" /> zugewiesen.  
  
- oder - 
 <paramref name="node" /> ist keine <see cref="T:System.Windows.Forms.TreeNode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Strukturknotenauflistung eine feste Größe hat.</summary>
        <value><see langword="false" /> in allen Fällen.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index, an dem das Element abgerufen oder festgelegt werden soll.</param>
        <summary>Ruft den Strukturknoten am angegebenen Index in der Auflistung ab oder legt diesen fest.</summary>
        <value>Der <see cref="T:System.Windows.Forms.TreeNode" /> am angegebenen Index in der <see cref="T:System.Windows.Forms.TreeNodeCollection" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Der festgelegte Wert ist kein <see cref="T:System.Windows.Forms.TreeNode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (node As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ node) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Die aus der Auflistung zu entfernende <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <summary>Entfernt den angegebenen Strukturknoten aus der Strukturknotenauflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können keine Zeichenfolge übergeben, um den Knoten, der den Wert der Zeichenfolge aufweist, als <xref:System.Windows.Forms.TreeNode.Text%2A>-Eigenschaft zu entfernen.  
  
 Wenn ein <xref:System.Windows.Forms.TreeNode> aus der Struktur Knoten Auflistung entfernt wird, werden alle nachfolgenden Struktur Knoten in der Auflistung um eine Position nach oben verschoben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

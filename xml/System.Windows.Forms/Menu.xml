<Type Name="Menu" FullName="System.Windows.Forms.Menu">
  <Metadata><Meta Name="ms.openlocfilehash" Value="192d216ffbba95ccc82c30e0d18326d13ea2af83" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86727638" /></Metadata><TypeSignature Language="C#" Value="public abstract class Menu : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Menu extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Menu" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Menu&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Menu abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Menu = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.ListBindable(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ListBindable(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName Language="C#">[System.ComponentModel.Designer("Microsoft.VisualStudio.Windows.Forms.MenuDesigner, Microsoft.VisualStudio, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("Microsoft.VisualStudio.Windows.Forms.MenuDesigner, Microsoft.VisualStudio, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Basisfunktionen für alle Menüs dar.
    
Diese Klasse ist in .NET Core 3.1 und höheren Versionen nicht verfügbar. Verwenden Sie stattdessen <see cref="T:System.Windows.Forms.ToolStripDropDown" /> und <see cref="T:System.Windows.Forms.ToolStripDropDownMenu" />. Dadurch wird das <see cref="T:System.Windows.Forms.Menu" />-Steuerelement ersetzt und erweitert.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

Diese Klasse ist in .net Core 3,1 und höheren Versionen nicht verfügbar. Verwenden Sie stattdessen <see cref="T:System.Windows.Forms.ToolStripDropDown" /> und <see cref="T:System.Windows.Forms.ToolStripDropDownMenu" />.

Diese Klasse ist die Basisklasse für die <xref:System.Windows.Forms.MainMenu> <xref:System.Windows.Forms.MenuItem> Klassen, und <xref:System.Windows.Forms.ContextMenu> . Eine Instanz dieser Klasse kann nicht erstellt werden. Die Menüs für eine Anwendung bestehen aus- <xref:System.Windows.Forms.MenuItem> Objekten. Diese können andere <xref:System.Windows.Forms.MenuItem> Objekte enthalten, die unter Menü Elemente darstellen. Die- <xref:System.Windows.Forms.MenuItem> Objekte können in einer <xref:System.Windows.Forms.MainMenu> als gesamte Menüstruktur für ein Formular oder ein gespeichert werden <xref:System.Windows.Forms.ContextMenu> , das zum Anzeigen von Kontextmenüs verwendet wird. Diese Klasse stellt die Funktionalität bereit, die für alle Menü Klassen üblich ist.  
  
 Im Gegensatz zu vielen Basisklassen <xref:System.Windows.Forms.Menu> verwendet die-Klasse die abgeleiteten Klassen, um viele ihrer Eigenschaften zu definieren. Wenn Sie das Menü in einer MDI-Anwendung (Multiple Document Interface) verwenden, können Sie die-Eigenschaft verwenden, <xref:System.Windows.Forms.Menu.MdiListItem%2A> um ein anzugeben, <xref:System.Windows.Forms.MenuItem> das eine Liste der untergeordneten MDI-Formulare in der Anwendung anzeigt. Die- <xref:System.Windows.Forms.Menu.MenuItems%2A> Eigenschaft enthält eine Liste von- <xref:System.Windows.Forms.MenuItem> Objekten, die in der Menu-Klasse gespeichert sind. Für ein- <xref:System.Windows.Forms.MainMenu> oder- <xref:System.Windows.Forms.ContextMenu> Objekt enthält diese Eigenschaft alle- <xref:System.Windows.Forms.MenuItem> Objekte, die angezeigt werden. Bei einem <xref:System.Windows.Forms.MenuItem> stellt die- <xref:System.Windows.Forms.Menu.MenuItems%2A> Eigenschaft die ihm zugeordneten unter Menü Elemente dar.  
  
 Zusätzlich zu den Eigenschaften, die für alle abgeleiteten Menü Klassen bereitgestellt werden, <xref:System.Windows.Forms.Menu> stellt die-Klasse auch Methoden bereit, wie z. b. <xref:System.Windows.Forms.Menu.CloneMenu%2A> und <xref:System.Windows.Forms.Menu.MergeMenu%2A> , mit denen Sie neue Menüs aus vorhandenen Menüs erstellen und gleichzeitig zwei Menüstrukturen zusammenführen können.  
  
 Die- <xref:System.Windows.Forms.Menu> Klasse definiert auch die-Klasse <xref:System.Windows.Forms.Menu.MenuItemCollection> . Diese Klasse definiert die Auflistung von- <xref:System.Windows.Forms.MenuItem> Objekten, die von der-Eigenschaft verwendet werden <xref:System.Windows.Forms.Menu.MenuItems%2A> . Sie können die Methoden der- <xref:System.Windows.Forms.Menu.MenuItemCollection> Klasse verwenden, um Menü Elemente von, oder hinzuzufügen und zu entfernen <xref:System.Windows.Forms.MainMenu> <xref:System.Windows.Forms.ContextMenu> <xref:System.Windows.Forms.MenuItem> .
  
## Examples  
 Im folgenden Codebeispiel wird die abgeleitete-Klasse verwendet, <xref:System.Windows.Forms.MenuItem> um eine Menüstruktur für ein Formular zu erstellen. Im Beispielcode wird ein hinzugefügt, <xref:System.Windows.Forms.MenuItem> das das Menü Element der obersten Ebene darstellt, ein unter Menü Element zur Auswahl eines Schrift Grads hinzufügt und dann zwei unter Menü Elemente zu diesem Menü Element hinzufügt, die große und kleine Schriftart Optionen in einer Anwendung darstellen. Das Beispiel setzt voraus, dass es ein <xref:System.Windows.Forms.MainMenu> -Objekt mit dem Namen `mainMenu1` und vier-Objekte mit den <xref:System.Windows.Forms.MenuItem> Namen `menuItem1` , `menuItem2` , und gibt `menuItem3` `menuItem4` .  
  
 [!code-cpp[Classic Menu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu Example/CS/source.cs#1)]
 [!code-vb[Classic Menu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MainMenu" />
    <altmember cref="T:System.Windows.Forms.ContextMenu" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Menu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Menu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Menu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.Menu" Usage="new System.Windows.Forms.Menu items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">Ein Array vom Typ <see cref="T:System.Windows.Forms.MenuItem" /> mit den Objekten, die dem Menü hinzugefügt werden sollen.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Menu" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da <xref:System.Windows.Forms.Menu> eine abstrakte Klasse ist, können nur geerbte Klassen den Menü Konstruktor aufzurufen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="protected internal void CloneMenu (System.Windows.Forms.Menu menuSrc);" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CloneMenu(class System.Windows.Forms.Menu menuSrc) cil managed" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.CloneMenu(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CloneMenu (menuSrc As Menu)" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CloneMenu(System::Windows::Forms::Menu ^ menuSrc);" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.CloneMenu : System.Windows.Forms.Menu -&gt; unit" Usage="menu.CloneMenu menuSrc" />
      <MemberSignature Language="C#" Value="protected void CloneMenu (System.Windows.Forms.Menu menuSrc);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CloneMenu(class System.Windows.Forms.Menu menuSrc) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CloneMenu (menuSrc As Menu)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CloneMenu(System::Windows::Forms::Menu ^ menuSrc);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSrc" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="menuSrc">Das <see cref="T:System.Windows.Forms.Menu" />, das kopiert werden soll.</param>
        <summary>Kopiert das <see cref="T:System.Windows.Forms.Menu" />, das als Parameter an das aktuelle <see cref="T:System.Windows.Forms.Menu" /> übergeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kopiert die gesamte Liste von- <xref:System.Windows.Forms.MenuItem> Objekten (gespeichert in der, die in der <xref:System.Windows.Forms.Menu> übermittelt wird `menuSrc` ) in das aktuelle Menü. Sie können diese Methode in der abgeleiteten Klasse verwenden, um-Objekte zu klonen <xref:System.Windows.Forms.MenuItem> . Sie können dann von anderen Klassen, die von abgeleitet werden <xref:System.Windows.Forms.Menu> , wie z <xref:System.Windows.Forms.MainMenu> <xref:System.Windows.Forms.ContextMenu> . b., und, wieder verwendet werden <xref:System.Windows.Forms.MenuItem> .
  
## Examples  
 In diesem Beispiel wird ein Hauptmenü `mainMenu1` mit drei Menü Elementen erstellt: `File` , `Edit` und `View` . Anschließend wird die- <xref:System.Windows.Forms.Menu.CloneMenu%2A> Methode verwendet, um in zu kopieren `mainMenu1` `mainMenu2` . Das geklonte Menü wird dann dem Formular zugewiesen und angezeigt. Dieses Programm erfordert, dass Sie bereits einen mit dem Namen erstellt haben <xref:System.Windows.Forms.Form> `Form1` .  
  
 [!code-cpp[CloneMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CloneMenu/CPP/form1.cpp#1)]
 [!code-csharp[CloneMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CloneMenu/CS/form1.cs#1)]
 [!code-vb[CloneMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CloneMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.MainMenu" />
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected virtual IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IntPtr CreateMenuHandle();" />
      <MemberSignature Language="F#" Value="abstract member CreateMenuHandle : unit -&gt; nativeint&#xA;override this.CreateMenuHandle : unit -&gt; nativeint" Usage="menu.CreateMenuHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein neues Handle für <see cref="T:System.Windows.Forms.Menu" />.</summary>
        <returns>Ein Handle für das Menü, wenn die Methode erfolgreich ausgeführt wird, andernfalls <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="menu.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Gibt mit Ausnahme des Speichers die von der <see cref="T:System.Windows.Forms.Menu" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Windows.Forms.Menu.Dispose%2A> auf, wenn Sie <xref:System.Windows.Forms.Menu> nicht mehr benötigen. Die <xref:System.Windows.Forms.Menu.Dispose%2A>-Methode bewirkt, dass <xref:System.Windows.Forms.Menu> nicht mehr verwendet werden kann. Nachdem <xref:System.Windows.Forms.Menu.Dispose%2A> Sie aufgerufen haben, müssen Sie alle Verweise auf freigeben, <xref:System.Windows.Forms.Menu> damit der Arbeitsspeicher, den Sie belegen, von Garbage Collection freigegeben werden kann.  
  
> [!NOTE]
> Rufen Sie immer <xref:System.Windows.Forms.Menu.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Windows.Forms.Menu> freigeben. Andernfalls werden die Ressourcen, die <xref:System.Windows.Forms.Menu> von verwendet werden, erst freigegeben, wenn Garbage Collection den <xref:System.Windows.Forms.Menu> Dekonstruktor des Objekts aufruft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindHandle">
      <MemberSignature Language="C#" Value="public const int FindHandle = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 FindHandle = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Menu.FindHandle" />
      <MemberSignature Language="VB.NET" Value="Public Const FindHandle As Integer  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: int FindHandle = 0;" />
      <MemberSignature Language="F#" Value="val mutable FindHandle : int" Usage="System.Windows.Forms.Menu.FindHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Gibt an, dass die <see cref="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" />-Methode nach einem Handle suchen soll.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMenuItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem FindMenuItem (int type, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MenuItem FindMenuItem(int32 type, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMenuItem (type As Integer, value As IntPtr) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::MenuItem ^ FindMenuItem(int type, IntPtr value);" />
      <MemberSignature Language="F#" Value="member this.FindMenuItem : int * nativeint -&gt; System.Windows.Forms.MenuItem" Usage="menu.FindMenuItem (type, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Int32" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="type">Der Elementtyp, mit dessen Hilfe das <see cref="T:System.Windows.Forms.MenuItem" /> gesucht werden soll.</param>
        <param name="value">Das Element, mit dessen Hilfe das <see cref="T:System.Windows.Forms.MenuItem" /> gesucht werden soll.</param>
        <summary>Ruft das <see cref="T:System.Windows.Forms.MenuItem" /> ab, das den angegebenen Wert enthält.</summary>
        <returns>Das <see cref="T:System.Windows.Forms.MenuItem" />, das mit dem Wert übereinstimmt; andernfalls <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um mithilfe eines Handles nach einem zu suchen <xref:System.Windows.Forms.MenuItem> , übergeben <xref:System.Windows.Forms.Menu.FindHandle> Sie das-Feld als-Typ und das Handle von, das <xref:System.Windows.Forms.MenuItem> Sie als Wert ermitteln möchten.  
  
 Wenn <xref:System.Windows.Forms.MenuItem> Sie mithilfe einer Verknüpfung nach einem suchen möchten, übergeben <xref:System.Windows.Forms.Menu.FindShortcut> Sie das-Feld als-Typ und den Verknüpfungs Wert für das, das <xref:System.Windows.Forms.MenuItem> Sie als Wert suchen möchten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMergePosition">
      <MemberSignature Language="C#" Value="protected int FindMergePosition (int mergeOrder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance int32 FindMergePosition(int32 mergeOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.FindMergePosition(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function FindMergePosition (mergeOrder As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; int FindMergePosition(int mergeOrder);" />
      <MemberSignature Language="F#" Value="member this.FindMergePosition : int -&gt; int" Usage="menu.FindMergePosition mergeOrder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="mergeOrder">Die Position des zusammenzuführenden Menüelements in der Zusammenführungsfolge.</param>
        <summary>Gibt die Position zurück, an der ein Menüelement in das Menü eingefügt werden soll.</summary>
        <returns>Die Position, an der ein Menüelement in das Menü eingefügt werden soll.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die mergereihenfolge eines Menü Elements gibt die relative Position an, die dieses Menü Element annimmt, wenn die Menüstruktur, in der die <xref:System.Windows.Forms.MenuItem> enthalten ist, mit einer anderen zusammengeführt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindShortcut">
      <MemberSignature Language="C#" Value="public const int FindShortcut = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 FindShortcut = (1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Menu.FindShortcut" />
      <MemberSignature Language="VB.NET" Value="Public Const FindShortcut As Integer  = 1" />
      <MemberSignature Language="C++ CLI" Value="public: int FindShortcut = 1;" />
      <MemberSignature Language="F#" Value="val mutable FindShortcut : int" Usage="System.Windows.Forms.Menu.FindShortcut" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Gibt an, dass die <see cref="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" />-Methode nach einer Verknüpfung suchen soll.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ContextMenu GetContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ContextMenu GetContextMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.GetContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextMenu () As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ContextMenu ^ GetContextMenu();" />
      <MemberSignature Language="F#" Value="member this.GetContextMenu : unit -&gt; System.Windows.Forms.ContextMenu" Usage="menu.GetContextMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft das <see cref="T:System.Windows.Forms.ContextMenu" /> ab, das dieses Menü enthält.</summary>
        <returns>Das <see cref="T:System.Windows.Forms.ContextMenu" />, das dieses Menü enthält. Der Standardwert ist <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie einen Verweis auf das Abrufen <xref:System.Windows.Forms.ContextMenu> , in dem dieses Menü enthalten ist. Diese Eigenschaft gibt zurück, `null` Wenn das Menü nicht in einem enthalten ist <xref:System.Windows.Forms.ContextMenu> . Dies kann vorkommen, wenn das Menü in oder enthalten <xref:System.Windows.Forms.MenuItem> ist <xref:System.Windows.Forms.MainMenu> , oder wenn das Menü nicht in einem Menü enthalten ist. Sie können diese Eigenschaft verwenden, um zu bestimmen, ob gerade ein Menü verwendet wird, und um zu bestimmen, wo.
  
## Examples  
 In diesem Beispiel verwenden Sie die- <xref:System.Windows.Forms.Menu.GetContextMenu%2A> Methode zum Abrufen eines Verweises auf das Kontextmenü, das `menuItem1` oder enthält `menuItem2` , und zum Anzeigen der Kontextmenü Informationen in einem Meldungs Feld. Sie erstellen Programm gesteuert ein Kontextmenü mit zwei Elementen: `New` und `Open` . Dann fügen Sie die Funktionalität zu diesen Elementen hinzu, indem Sie die entsprechenden Ereignishandler erstellen. Wenn Sie das Beispiel ausführen, erhalten Sie ein Meldungs Feld mit dem Hinweis, dass Sie mit der rechten Maustaste auf das Formular klicken können, um das Kontextmenü anzuzeigen. Wenn Sie auf ein Menü Element klicken, wird eine weitere Meldung mit dem Hinweis angezeigt, auf welches Element geklickt wurde, und die Informationen werden im Kontextmenü angezeigt. Dieses Beispiel erfordert, dass Sie bereits einen mit dem Namen erstellt haben <xref:System.Windows.Forms.Form> `Form1` .  
  
 [!code-cpp[GetContextMenu2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetContextMenu2/CPP/form1.cpp#1)]
 [!code-csharp[GetContextMenu2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetContextMenu2/CS/form1.cs#1)]
 [!code-vb[GetContextMenu2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetContextMenu2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.GetMainMenu" />
      </Docs>
    </Member>
    <Member MemberName="GetMainMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MainMenu GetMainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MainMenu GetMainMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.GetMainMenu" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMainMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::MainMenu ^ GetMainMenu();" />
      <MemberSignature Language="F#" Value="member this.GetMainMenu : unit -&gt; System.Windows.Forms.MainMenu" Usage="menu.GetMainMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft das <see cref="T:System.Windows.Forms.MainMenu" /> ab, das dieses Menü enthält.</summary>
        <returns>Das <see cref="T:System.Windows.Forms.MainMenu" />, das dieses Menü enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie einen Verweis auf das-Menü abrufen, das <xref:System.Windows.Forms.MainMenu> sich derzeit in befindet. Diese Eigenschaft gibt zurück, `null` Wenn das Menü nicht in einem enthalten ist <xref:System.Windows.Forms.MainMenu> . Dies kann vorkommen, wenn das Menü in oder enthalten <xref:System.Windows.Forms.MenuItem> ist <xref:System.Windows.Forms.ContextMenu> , oder wenn das Menü nicht in einem Menü enthalten ist. Sie können diese Eigenschaft verwenden, um zu bestimmen, ob gerade ein Menü verwendet wird, und um zu bestimmen, wo.
  
## Examples  
 In diesem Beispiel werden <xref:System.Windows.Forms.MainMenu> die `mainMenu1` -,-und vier Menü Elemente,, `menuItem1` `menuItem2` , `menuItem3` und deklariert `menuItem4` . Der Anzeige werden nur die ersten drei Menü Elemente hinzugefügt `mainMenu1` . Das Programm prüft dann, ob `menuItem3` verwendet wird, d `true` . h., und bestimmt das Formular, in dem es verwendet wird. Ein Bezeichnungs Text wird verwendet, um den Namen des Formulars anzuzeigen, das den hostet <xref:System.Windows.Forms.MainMenu> . Wenn Sie das zu testende Menü Element ändern `menuItem4` , wird die Bedingung als ausgewertet, `false` da `menuItem4` nie verwendet wurde. Dieses Beispiel erfordert, dass Sie einen mit dem Namen erstellt haben <xref:System.Windows.Forms.Form> `MyForm` , der einen mit dem <xref:System.Windows.Forms.Label> Namen enthält `label1` .  
  
 [!code-cpp[GetMainMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetMainMenu/CPP/form1.cpp#1)]
 [!code-csharp[GetMainMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetMainMenu/CS/form1.cs#1)]
 [!code-vb[GetMainMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetMainMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.GetContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.Menu.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der das Fensterhandle für das Menü darstellt.</summary>
        <value>Der HMENU-Wert des Menüs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Eigenschaft können Sie das Handle für das Menü abrufen, um spezielle Vorgänge für das Menü außerhalb der von dieser Klasse oder der abgeleiteten Klassen bereitgestellten Funktionen auszuführen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsParent">
      <MemberSignature Language="C#" Value="public virtual bool IsParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.IsParent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsParent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsParent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsParent : bool" Usage="System.Windows.Forms.Menu.IsParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob dieses Menü Menüelemente enthält. Diese Eigenschaft ist schreibgeschützt.</summary>
        <value><see langword="true" />, wenn dieses Menü <see cref="T:System.Windows.Forms.MenuItem" />-Objekte enthält, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie bestimmen, ob <xref:System.Windows.Forms.MenuItem> diesem Menü Objekte zugewiesen werden. Dies entspricht der Überprüfung von `null` in der- <xref:System.Windows.Forms.Menu.MenuItems%2A> Eigenschaft.
  
## Examples  
 Im folgenden Codebeispiel wird ein <xref:System.Windows.Forms.MainMenu> mit zwei- <xref:System.Windows.Forms.MenuItem> Objekten erstellt. Anschließend wird die- <xref:System.Windows.Forms.Menu.IsParent%2A> Eigenschaft verwendet, um zu bestimmen, ob `mainMenu1` Menü Elemente enthält. Wenn die Bedingung ausgewertet `true` wird, wird die <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> -Eigenschaft auf festgelegt `true` und das Hauptmenü an das-Objekt gebunden <xref:System.Windows.Forms.Form> . Für dieses Beispiel muss ein erstellt werden <xref:System.Windows.Forms.Form> , das den Namen hat `Form1` .  
  
 [!code-cpp[IsParent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IsParent/CPP/form1.cpp#1)]
 [!code-csharp[IsParent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IsParent/CS/form1.cs#1)]
 [!code-vb[IsParent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IsParent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName="MdiListItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem MdiListItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem MdiListItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MdiListItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MdiListItem As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MenuItem ^ MdiListItem { System::Windows::Forms::MenuItem ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MdiListItem : System.Windows.Forms.MenuItem" Usage="System.Windows.Forms.Menu.MdiListItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der das <see cref="T:System.Windows.Forms.MenuItem" /> angibt, mit dem eine Liste von untergeordneten MDI-Formularen (Multiple Document Interface) angezeigt wird.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.MenuItem" />, das das Menüelement darstellt, das eine Liste der in der Anwendung geöffneten, untergeordneten MDI-Formulare anzeigt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Eigenschaft verwenden, um zu bestimmen, ob eine <xref:System.Windows.Forms.MenuItem> angegeben wurde, um die Liste der geöffneten untergeordneten Fenster in einer MDI-Anwendung anzuzeigen. Um eine bestimmte <xref:System.Windows.Forms.MenuItem> als MDI-Liste zu verwenden, legen <xref:System.Windows.Forms.MenuItem.MdiList%2A> Sie die-Eigenschaft in der <xref:System.Windows.Forms.MenuItem> zu verwendenden fest.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MdiList" />
      </Docs>
    </Member>
    <Member MemberName="MenuItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Menu.MenuItemCollection MenuItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Menu/MenuItemCollection MenuItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MenuItems As Menu.MenuItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Menu::MenuItemCollection ^ MenuItems { System::Windows::Forms::Menu::MenuItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MenuItems : System.Windows.Forms.Menu.MenuItemCollection" Usage="System.Windows.Forms.Menu.MenuItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Menu+MenuItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die Auflistung der dem Menü zugeordneten <see cref="T:System.Windows.Forms.MenuItem" />-Objekte angibt.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" />, die die Auflistung der im Menü gespeicherten <see cref="T:System.Windows.Forms.MenuItem" />-Objekte darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Eigenschaft können Sie einen Verweis auf die Liste der Menü Elemente abrufen, die derzeit im Menü gespeichert sind. Für <xref:System.Windows.Forms.MainMenu> -und- <xref:System.Windows.Forms.ContextMenu> Objekte <xref:System.Windows.Forms.Menu.MenuItems%2A> enthält die-Eigenschaft die gesamte Menüstruktur im-Steuerelement. Für die- <xref:System.Windows.Forms.MenuItem> Klasse enthält die- <xref:System.Windows.Forms.Menu.MenuItems%2A> Eigenschaft die Liste der unter Menü Elemente, die zugeordnet sind <xref:System.Windows.Forms.MenuItem> . Mit dem Verweis auf die Auflistung der Menü Elemente für das Menü (bereitgestellt von dieser Eigenschaft) können Sie Menü Elemente hinzufügen und entfernen, die Gesamtanzahl der Menü Elemente ermitteln und die Liste der Menü Elemente aus der Auflistung löschen. Weitere Informationen zum Verwalten der Menü Element Auflistung für ein Menü finden Sie in der <xref:System.Windows.Forms.Menu.MenuItemCollection?displayProperty=nameWithType> Dokumentation.
  
## Examples  
 Im folgenden Codebeispiel wird eine Instanz der abgeleiteten-Klasse erstellt, und der Auflistung <xref:System.Windows.Forms.MainMenu> von-Objekten wird ein-Objekt hinzugefügt <xref:System.Windows.Forms.MenuItem> <xref:System.Windows.Forms.MenuItem> . Dieses Beispiel setzt voraus, dass sich die in diesem Beispiel definierte-Methode in der-Klasse für ein Formular befindet und von einer Methode in dieser Formular Klasse aufgerufen wird.  
  
 [!code-cpp[Classic Menu.MenuItems Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItems Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItems Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItems Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MainMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.Menu.MenuItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public virtual void MergeMenu (System.Windows.Forms.Menu menuSrc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MergeMenu(class System.Windows.Forms.Menu menuSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MergeMenu(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub MergeMenu (menuSrc As Menu)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void MergeMenu(System::Windows::Forms::Menu ^ menuSrc);" />
      <MemberSignature Language="F#" Value="abstract member MergeMenu : System.Windows.Forms.Menu -&gt; unit&#xA;override this.MergeMenu : System.Windows.Forms.Menu -&gt; unit" Usage="menu.MergeMenu menuSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSrc" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="menuSrc">Das <see cref="T:System.Windows.Forms.Menu" />, dessen Menüelemente mit den Menüelementen des aktuellen Menüs zusammengeführt werden.</param>
        <summary>Führt die <see cref="T:System.Windows.Forms.MenuItem" />-Objekte eines Menüs mit dem aktuellen Menü zusammen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode werden <xref:System.Windows.Forms.MenuItem> Objekte aus einem Menü mit dem aktuellen Menü zusammengeführt. <xref:System.Windows.Forms.MenuItem> -Objekte werden entsprechend den Werten der-Eigenschaft und der-Eigenschaft zusammengeführt <xref:System.Windows.Forms.MenuItem.MergeType%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.MenuItem.MergeOrder%2A?displayProperty=nameWithType> .  
  
 Die Zusammenführung des Menüs erfolgt in der Regel, um die Menüs eines übergeordneten MDI-Formulars (Multiple Document Interface) mit denen des aktiven untergeordneten MDI-Formulars zusammenzuführen. Dies erfolgt automatisch durch die .NET Framework Common Language Runtime. Wenn z. b. ein übergeordnetes MDI-Formular eine Reihe von Menüs für die Behandlung von Dateien enthält und das untergeordnete MDI-Formular auch Datei bezogene Menü Elemente enthält, werden die Menü Sätze automatisch in einer einzelnen Datei Menü Gruppe zusammengeführt, wenn das untergeordnete Formular im übergeordneten MDI-Formular angezeigt wird.  
  
 Sie können die- <xref:System.Windows.Forms.Menu.MergeMenu%2A> Methode verwenden, wenn Sie zwei Menüstrukturen zusammenführen, die nicht Teil einer MDI-Anwendung sind. Diese Implementierung kann von der-Klasse oder der-Klasse aufgerufen werden <xref:System.Windows.Forms.MainMenu> <xref:System.Windows.Forms.ContextMenu> , um zwei oder mehr Objekte zusammenzuführen, die von abgeleitet werden <xref:System.Windows.Forms.Menu> .  
  
 Verwenden Sie zum Zusammenführen von zwei <xref:System.Windows.Forms.MenuItem> Objekten die- <xref:System.Windows.Forms.MenuItem.MergeMenu%2A?displayProperty=nameWithType> Methode.
  
## Examples  
 In diesem Beispiel werden zwei Menüs erstellt: `mainMenu1` und `mainMenu2` . Das erste Menü enthält eins <xref:System.Windows.Forms.MenuItem> , `File` , und das zweite enthält eine <xref:System.Windows.Forms.MenuItem> , `Edit` . Mit der- <xref:System.Windows.Forms.Menu.MergeMenu%2A> Methode `mainMenu2` wird mit zusammengeführt `mainMenu1` . Wenn diese Option angezeigt wird, `mainMenu1` enthält die beiden Menü Elemente `File` und `Edit` . Dieses Beispiel erfordert, dass Sie einen mit dem Namen erstellt haben <xref:System.Windows.Forms.Form> `Form1` .  
  
 [!code-cpp[MergeMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MergeMenu/CPP/form1.cpp#1)]
 [!code-csharp[MergeMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MergeMenu/CS/form1.cs#1)]
 [!code-vb[MergeMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MergeMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Es wurde versucht, das Menü mit sich selbst zusammenzuführen.</exception>
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.Menu.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der <see cref="T:System.Windows.Forms.Menu" /> ab oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die den Namen darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zur Entwurfszeit wird diese Eigenschaft auf den programmatischen Bezeichner des Steuer Elements festgelegt. Diese Eigenschaft hat jedoch keine Auswirkungen auf das Steuerelement zur Laufzeit.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member ProcessCmdKey : Message * System.Windows.Forms.Keys -&gt; bool&#xA;override this.ProcessCmdKey : Message * System.Windows.Forms.Keys -&gt; bool" Usage="menu.ProcessCmdKey (msg, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">Eine als Verweis übergebene <see cref="T:System.Windows.Forms.Message" />, die die zu verarbeitende Fenstermeldung darstellt.</param>
        <param name="keyData">Einer der <see cref="T:System.Windows.Forms.Keys" />-Werte, die die zu verarbeitende Taste darstellen.</param>
        <summary>Verarbeitet eine Befehlstaste.</summary>
        <returns><see langword="true" />, wenn das Zeichen vom Steuerelement verarbeitet wurde, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Menu.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Localizable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft benutzerdefinierte, dem Steuerelement zugeordnete Daten ab oder legt diese fest.</summary>
        <value>Ein Objekt, das die Parameter darstellt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="menu.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen <see cref="T:System.String" /> zurück, der das <see cref="T:System.Windows.Forms.Menu" />-Steuerelement darstellt.</summary>
        <returns>Ein <see cref="T:System.String" />, der den aktuellen <see cref="T:System.Windows.Forms.Menu" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.Menu.ToString%2A> -Methode gibt einen zurück <xref:System.String> , der den-Typ und die Anzahl der Elemente in der- <xref:System.Windows.Forms.Menu.MenuItems%2A> Eigenschaft des-Steuer Elements enthält.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

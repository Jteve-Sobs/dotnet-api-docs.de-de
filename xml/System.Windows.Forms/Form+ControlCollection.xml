<Type Name="Form+ControlCollection" FullName="System.Windows.Forms.Form+ControlCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a461171593d4ea5305fd7637e0a6baabfb15fd3f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37569006" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Form.ControlCollection : System.Windows.Forms.Control.ControlCollection" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit Form/ControlCollection extends System.Windows.Forms.Control/ControlCollection" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Form.ControlCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class Form.ControlCollection&#xA;Inherits Control.ControlCollection" />
  <TypeSignature Language="C++ CLI" Value="public: ref class Form::ControlCollection : System::Windows::Forms::Control::ControlCollection" />
  <TypeSignature Language="F#" Value="type Form.ControlCollection = class&#xA;    inherit Control.ControlCollection" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control+ControlCollection</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine Auflistung von Steuerelemente auf dem Formular dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Klasse stellt die Auflistung der Steuerelemente in einem Formular enthalten sind. Können Sie die <xref:System.Windows.Forms.Form.ControlCollection.Add%2A> Methode, um dem Formular ein Steuerelement hinzufügen und die <xref:System.Windows.Forms.Form.ControlCollection.Remove%2A> Methode, um das Steuerelement aus dem Formular zu entfernen. Die steuerelementauflistung, die von dieser Klasse dargestellt kann nicht erstellt werden, ohne ihn an eine bestimmte Form binden. Daher nicht mehrere Instanzen dieser Auflistung von Steuerelement erstellen und Austausch sie mit der ein aktives Formular anderes Steuerelementlayouts zu bereitstellen.  
  
   
  
## Examples  
 Das folgende Codebeispiel fügt ein <xref:System.Windows.Forms.TextBox> und <xref:System.Windows.Forms.Label> Steuerelement, das der steuerelementauflistung eines Formulars. Das Beispiel erfordert, dass ein Formular erstellt und mit dem Namen wurden `Form1`.  
  
 [!code-cpp[Classic Form.ControlCollection Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Form.ControlCollection Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Form.ControlCollection Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Form.ControlCollection Example/CS/source.cs#1)]
 [!code-vb[Classic Form.ControlCollection Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Form.ControlCollection Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlCollection (System.Windows.Forms.Form owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Form owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Form.ControlCollection.#ctor(System.Windows.Forms.Form)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As Form)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlCollection(System::Windows::Forms::Form ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Form.ControlCollection : System.Windows.Forms.Form -&gt; System.Windows.Forms.Form.ControlCollection" Usage="new System.Windows.Forms.Form.ControlCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.Form" />
      </Parameters>
      <Docs>
        <param name="owner">Das <see cref="T:System.Windows.Forms.Form" />, das die Steuerelemente enthält, die der Steuerelementauflistung hinzugefügt werden sollen.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Form.ControlCollection" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor ermöglicht die steuerelementauflistung ordnungsgemäß in das Formular von Steuerelementen zum Formular hinzugefügt werden ermöglichen zu binden.  
  
> [!NOTE]
>  Da die Auflistung der Steuerelemente mit einer angegebenen Form erstellt werden muss, nicht mehrere Auflistungen von Steuerelementen zu erstellen und sie mit dem Formular Austausch.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public override void Add (System.Windows.Forms.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Add(class System.Windows.Forms.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Form.ControlCollection.Add(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Add (value As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Add(System::Windows::Forms::Control ^ value);" />
      <MemberSignature Language="F#" Value="override this.Add : System.Windows.Forms.Control -&gt; unit" Usage="controlCollection.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="value">Das <see cref="T:System.Windows.Forms.Control" />, das dem Formular hinzugefügt werden soll.</param>
        <summary>Fügt dem Formular ein Steuerelement hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Methode verwenden, auf dem Formular Steuerelemente hinzufügen. Wenn Sie eine Gruppe von bereits erstellten Steuerelementen zum Formular hinzufügen möchten, verwenden Sie die <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A?displayProperty=nameWithType> Methode der <xref:System.Windows.Forms.Control.ControlCollection> Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel fügt ein <xref:System.Windows.Forms.TextBox> und <xref:System.Windows.Forms.Label> Steuerelement, das der steuerelementauflistung eines Formulars. Das Beispiel erfordert, dass ein Formular erstellt und mit dem Namen wurden `Form1`.  
  
 [!code-cpp[Classic Form.ControlCollection Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Form.ControlCollection Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Form.ControlCollection Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Form.ControlCollection Example/CS/source.cs#1)]
 [!code-vb[Classic Form.ControlCollection Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Form.ControlCollection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Einem übergeordneten MDI-Formular (Multiple Document Interface) dürfen keine Steuerelemente hinzugefügt werden.</exception>
        <altmember cref="M:System.Windows.Forms.Form.ControlCollection.Remove(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public override void Remove (System.Windows.Forms.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Remove(class System.Windows.Forms.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Form.ControlCollection.Remove(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Remove (value As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Remove(System::Windows::Forms::Control ^ value);" />
      <MemberSignature Language="F#" Value="override this.Remove : System.Windows.Forms.Control -&gt; unit" Usage="controlCollection.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="value">Ein <see cref="T:System.Windows.Forms.Control" />, das aus dem Formular entfernt werden soll.</param>
        <summary>Entfernt ein Steuerelement aus dem Formular.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Methode verwenden, um Steuerelemente zu entfernen, die Sie nicht mehr in Ihrem Formular benötigen. Sollten Sie ein Steuerelement angezeigt wird, nachdem es entfernt wurde, müssen Sie das Steuerelement hinzugefügt, an dem Formular mithilfe der <xref:System.Windows.Forms.Form.ControlCollection.Add%2A> Methode. Wenn ein Steuerelement auf dem Formular bleiben jedoch nicht angezeigt wird, verwenden Sie die <xref:System.Windows.Forms.Control.Visible%2A> -Eigenschaft des Steuerelements.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Form.ControlCollection.Add(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="KeyPressEventArgs" FullName="System.Windows.Forms.KeyPressEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a9a608d40d05807744b762b50eb85c4cb38ac606" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30647454" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyPressEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyPressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyPressEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyPressEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Daten für das <see cref="E:System.Windows.Forms.Control.KeyPress" />-Ereignis bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.KeyPressEventArgs> gibt das Zeichen an, die zusammengesetzt ist, wenn der Benutzer eine Taste drückt. Beispielsweise, wenn der Benutzer UMSCHALT + K drückt, die <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> Eigenschaft gibt eine in Großbuchstaben k zurück.  
  
 Ein <xref:System.Windows.Forms.Control.KeyPress> Ereignis tritt auf, wenn der Benutzer eine Taste drückt. Zwei Ereignisse, die auf eng miteinander verknüpft sind die <xref:System.Windows.Forms.Control.KeyPress> Ereignis sind <xref:System.Windows.Forms.Control.KeyUp> und <xref:System.Windows.Forms.Control.KeyDown>. Die <xref:System.Windows.Forms.Control.KeyDown> Ereignis vorangeht jedes <xref:System.Windows.Forms.Control.KeyPress> Ereignis aus, wenn der Benutzer eine Taste drückt und ein <xref:System.Windows.Forms.Control.KeyUp> Ereignis tritt auf, wenn der Benutzer eine Taste loslässt. Wenn der Benutzer eine Taste gedrückt hält, doppelte <xref:System.Windows.Forms.Control.KeyDown> und <xref:System.Windows.Forms.Control.KeyPress> Ereignisse tritt jedes Mal, die das Zeichen wird wiederholt. Ein <xref:System.Windows.Forms.Control.KeyUp> Ereignis wird generiert, bei der Freigabe.  
  
 Mit jedem <xref:System.Windows.Forms.Control.KeyPress> Ereignis, eine <xref:System.Windows.Forms.KeyPressEventArgs> übergeben wird. Ein <xref:System.Windows.Forms.KeyEventArgs> wird mit jedem übergeben <xref:System.Windows.Forms.Control.KeyDown> und <xref:System.Windows.Forms.Control.KeyUp> Ereignis. Ein <xref:System.Windows.Forms.KeyEventArgs> gibt an, ob zusammen mit einer anderen Taste Modifizierertasten (STRG, UMSCHALTTASTE und ALT) gedrückt wurden. (Diese Modifiziererinformationen erhalten Sie auch über die <xref:System.Windows.Forms.Control.ModifierKeys%2A> Eigenschaft von der <xref:System.Windows.Forms.Control> Klasse.)  
  
 Legen Sie <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> auf `true` zum Abbrechen der `KeyPress` Ereignis. Dadurch wird verhindert, dass das Steuerelement Drücken der Taste verarbeitet.  
  
> [!NOTE]
>  Einige Steuerelemente verarbeiten bestimmte Tastenanschläge auf <xref:System.Windows.Forms.Control.KeyDown>. Beispielsweise <xref:System.Windows.Forms.RichTextBox> verarbeitet die EINGABETASTE vor <xref:System.Windows.Forms.Control.KeyPress> aufgerufen wird. In solchen Fällen kann nicht abgebrochen werden die <xref:System.Windows.Forms.Control.KeyPress> -Ereignis und müssen den Tastenanschlag aus Abbrechen <xref:System.Windows.Forms.Control.KeyDown> stattdessen.  
  
 Informationen über das Ereignismodell finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgende Beispiel wird die Verwendung der <xref:System.Windows.Forms.KeyPressEventArgs> Schlüssel gezählt, wie sie gedrückt werden und zum Anzeigen der Ergebnisse nach jedem Tastendruck. <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> Festlegen auf "true" das Betriebssystem zu verhindern von weiteren wird den Schlüssel anschließend verarbeitet werden. Im Beispiel wird vorausgesetzt, ein Formular mit einem <xref:System.Windows.Forms.TextBox> platziert sind.  
  
 [!code-cpp[Classic KeyPressEventArgs Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source.cpp#1)]
 [!code-csharp[Classic KeyPressEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic KeyPressEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source.vb#1)]  
  
 Sie müssen eine neue Instanz dieser Klasse erstellen. Sie müssen auch den Ereignishandler festlegen. Im Konstruktor dazu für die Klasse.  
  
 [!code-cpp[Classic KeyPressEventArgs Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic KeyPressEventArgs Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source2.cs#2)]
 [!code-vb[Classic KeyPressEventArgs Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source2.vb#2)]  
  
 Wenn das angegebene Ereignis im Steuerelement ausgelöst wird, die angefügten Methode aufgerufen wird und die Anwendung ausgeführt werden kann Code als Reaktion auf das Ereignis.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
    <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyPressEventArgs (char keyChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char keyChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyPressEventArgs(char keyChar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keyChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="keyChar">Das ASCII-Zeichen, das der vom Benutzer gedrückten Taste entspricht.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.KeyPressEventArgs" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=nameWithType> Eigenschaft, um den aktuellen Status der Zusatztasten abzurufen.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt ein Meldungsfeld mit dem aktuellen Pufferzustand die UMSCHALTTASTE gedrückt angezeigt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="E:System.Windows.Forms.Control.KeyPress" />-Ereignis behandelt wurde, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn das Ereignis behandelt wurde, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das Ereignis nicht behandelt wird, wird sie für das Betriebssystem für die standardverarbeitung gesendet. Legen Sie <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> auf `true` zum Abbrechen der `KeyPress` Ereignis.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Windows.Forms.TextBox> Steuerelement. Die `keypressed` -Methode verwendet die <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> Eigenschaft zu überprüfen, ob die EINGABETASTE gedrückt wird. Wenn Sie die EINGABETASTE gedrückt wird, die <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> -Eigenschaftensatz auf `true`, wodurch das Ereignis behandelt wird.  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyChar">
      <MemberSignature Language="C#" Value="public char KeyChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char KeyChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char KeyChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Zeichen ab, das der gedrückten Taste entspricht, oder legt dieses fest.</summary>
        <value>Das resultierende ASCII-Zeichen. Wenn der Benutzer beispielsweise UMSCHALT+K drückt, gibt diese Eigenschaft ein großes K zurück.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> Eigenschaft, um Tastatureingaben zur Laufzeit und Tastatureingaben unter bestimmten Umständen von zur Laufzeit zu ändern. Beispielsweise können Sie <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> um nicht-numerische Tastenanschläge deaktivieren, wenn der Benutzer eine Postleitzahl eingibt, alle alphabetischen Tastenanschläge in einem Dateneingabefelder Großbuchstaben oder überwachen Sie die Tastatur oder andere wichtige Eingabegerät, das für bestimmte Tastenkombinationen.  
  
 Sie können abrufen oder Festlegen der folgenden Schlüssel:  
  
-   a-z, A-Z.  
  
-   STRG.  
  
-   Satzzeichen besteht.  
  
-   Nummerieren Sie die Schlüssel, die im oberen Bereich der Tastatur und auf der Zehnertastatur.  
  
-   GEBEN SIE EIN.  
  
 Sie können keine abrufen oder Festlegen der folgenden Schlüssel:  
  
-   TAB-TASTE  
  
-   Einfügen und löschen.  
  
-   HOME.  
  
-   ENDE.  
  
-   Bild-auf und Bild-ab.  
  
-   F1-F2.  
  
-   ALT.  
  
-   Pfeiltasten.  
  
> [!NOTE]
>  Informationen zu einer der oben erwähnten nicht-Zeichen-Schlüssel zu ermitteln, finden Sie unter der <xref:System.Windows.Forms.KeyEventArgs> Klasse.  
  
-  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Windows.Forms.TextBox> Steuerelement. Die `keypressed` -Methode verwendet die <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> Eigenschaft zu überprüfen, ob die EINGABETASTE gedrückt. Wenn Sie die EINGABETASTE gedrückt wird, die <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> -Eigenschaftensatz auf `true`, wodurch das Ereignis behandelt wird.  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>
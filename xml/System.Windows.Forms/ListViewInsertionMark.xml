<Type Name="ListViewInsertionMark" FullName="System.Windows.Forms.ListViewInsertionMark">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d9d7a78ab3406bfe09096c39fcb1f6e49f002e27" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39905436" /></Metadata><TypeSignature Language="C#" Value="public sealed class ListViewInsertionMark" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ListViewInsertionMark extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListViewInsertionMark" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ListViewInsertionMark" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListViewInsertionMark sealed" />
  <TypeSignature Language="F#" Value="type ListViewInsertionMark = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Wird verwendet, um die erwartete Position für das Ablegen eines Elements anzugeben, wenn dieses zu einer neuen Position in einem <see cref="T:System.Windows.Forms.ListView" />-Steuerelement gezogen wird. Diese Funktionalität steht nur unter Windows XP oder und höher zur Verfügung.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können Sie Abrufen einer <xref:System.Windows.Forms.ListViewInsertionMark> aus der <xref:System.Windows.Forms.ListView.InsertionMark%2A> Eigenschaft eine <xref:System.Windows.Forms.ListView> steuern und zu verwenden, um visuell die erwarteten Dateiablage-Speicherort in einem Drag & Drop-Vorgang, wenn ein Element an eine neue Position gezogen wird.  
  
 Dieses Feature funktioniert nur, wenn die <xref:System.Windows.Forms.ListView.AutoArrange%2A?displayProperty=nameWithType> -Eigenschaftensatz auf `true` und wann die <xref:System.Windows.Forms.ListView> Steuerelement werden keine sortiert die Elemente automatisch. Um zu verhindern, dass automatische Sortierung, die <xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType> Eigenschaft muss festgelegt werden, um <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> und <xref:System.Windows.Forms.ListView.View%2A?displayProperty=nameWithType> Eigenschaft muss festgelegt werden, um <xref:System.Windows.Forms.View.LargeIcon?displayProperty=nameWithType>, <xref:System.Windows.Forms.View.SmallIcon?displayProperty=nameWithType>, oder <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>. Darüber hinaus kann nicht die einfügemarkenfunktion verwendet werden, mit der <xref:System.Windows.Forms.ListView> Feature gruppieren, da die Grouping-Funktion die Elemente durch eine Gruppenmitgliedschaft sortiert.  
  
 Die <xref:System.Windows.Forms.ListViewInsertionMark> Klasse dient in der Regel in einem Handler für die <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> oder <xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType> Ereignis, um die Position der Einfügemarke zu aktualisieren, wie ein Element gezogen wird. Darüber hinaus wird in einem Handler für die <xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType> oder <xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType> Ereignis, um ein gezogenes Element am richtigen Speicherort einzufügen.  
  
 Um die Position der Einfügemarke zu aktualisieren, gehen Sie folgendermaßen vor:  
  
1.  In einem Handler für die <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> oder <xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType> -Ereignis verwenden die <xref:System.Windows.Forms.ListView.InsertionMark%2A?displayProperty=nameWithType> Eigenschaft, die Zugriff auf die <xref:System.Windows.Forms.ListViewInsertionMark> -Objekt zugeordnet der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
2.  Verwenden der <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A> Methode zum Abrufen des Indexes des Elements, das der Mauszeiger am nächsten liegt.  
  
3.  Übergeben Sie den Indexwert, der <xref:System.Windows.Forms.ListView.GetItemRect%2A?displayProperty=nameWithType> Methode, um das umschließende Rechteck des Elements abgerufen.  
  
4.  Wenn der Mauszeiger sich links neben dem Mittelpunkt des umschließenden Rechtecks ist, legen Sie die <xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A> Eigenschaft `false`ist, andernfalls legen Sie ihn auf `true`.  
  
5.  Festlegen der <xref:System.Windows.Forms.ListViewInsertionMark.Index%2A> Eigenschaft auf den Indexwert, der abgerufen werden, aus der <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A> Methode. Die Einfügemarke wird neben dem Element mit dem angegebenen Index, entweder links oder rechts, je nach den <xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A> -Eigenschaftswert. Wenn auf sich selbst ein Element gezogen wird, wird der Index ist 1, und die Einfügemarke ausgeblendet ist.  
  
 Um das gezogene Element am richtigen Speicherort einzufügen, gehen Sie folgendermaßen vor:  
  
1.  In einem Handler für die <xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType> oder <xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType> -Ereignis verwenden die <xref:System.Windows.Forms.ListViewInsertionMark.Index%2A> Eigenschaft, um zu bestimmen, die aktuelle Position der Einfügemarke. Store dieser Wert höher als die Einfügeindex verwendet werden soll.  
  
2.  Wenn die <xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A> -Eigenschaftensatz auf `true`, erhöhen Sie den Indexwert des gespeicherten einfügen.  
  
3.  Verwenden der <xref:System.Windows.Forms.ListView.ListViewItemCollection.Insert%2A?displayProperty=nameWithType> Methode fügen Sie einen Klon des gezogenen Elements in der <xref:System.Windows.Forms.ListView.Items%2A?displayProperty=nameWithType> Auflistung, an dem Einfügeindex gespeicherte.  
  
4.  Verwenden der <xref:System.Windows.Forms.ListView.ListViewItemCollection.Remove%2A?displayProperty=nameWithType> Methode, um die ursprüngliche Version der das gezogene Element zu entfernen.  
  
 Sie müssen einen Klon des gezogenen Elements einfügen, bevor die ursprüngliche Version entfernt wird, damit die Indexwerte in der <xref:System.Windows.Forms.ListView.Items%2A?displayProperty=nameWithType> Auflistung nicht geändert werden vor dem Einfügen.  
  
 Um sicherzustellen, dass die Elemente in der gleichen Reihenfolge wie ihren Indexwerten angezeigt werden, müssen Sie festlegen der <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A?displayProperty=nameWithType> Eigenschaft, um eine Implementierung von der <xref:System.Collections.IComparer> -Schnittstelle, die Elemente nach dem Wert sortiert. Weitere Informationen finden Sie im Beispielabschnitt.  
  
 Sie können die Farbe der Einfügemarke ändern, indem Sie mit der <xref:System.Windows.Forms.ListViewInsertionMark.Color%2A> Eigenschaft. Wenn Sie die Größe oder Position der Einfügemarke benötigen, erhalten Sie deren umschließende Rechteck über die <xref:System.Windows.Forms.ListViewInsertionMark.Bounds%2A> Eigenschaft.  
  
> [!NOTE]
>  Die einfügemarkenfunktion steht nur unter Windows XP und Windows Server 2003-Familie verfügbar, wenn die Anwendung aufruft der <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> Methode. Unter früheren Betriebssystemen Code in Zusammenhang mit der Einfügemarke wird ignoriert, und die Einfügemarke wird nicht angezeigt. Jeglicher Code, der die einfügemarkenfunktion abhängt, funktioniert daher möglicherweise nicht ordnungsgemäß. Sie können einen Test, der bestimmt, ob die einfügemarkenfunktion steht, einschließen möchten und eine andere Funktionalität bereitstellen, wenn sie nicht verfügbar ist. Beispielsweise empfiehlt es sich der gesamte Code umgehen, der implementiert Drag & Drop-Element neu positionieren, wenn unter Betriebssystemen ausgeführt werden, die keine Einfügemarken unterstützen.  
>   
>  Die einfügemarkenfunktion wird von der gleichen Bibliothek bereitgestellt, die das Designfeature des Betriebssystems enthält. Um die Verfügbarkeit dieser Bibliothek finden, rufen Sie die <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> -methodenüberladung, und übergeben Sie die <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> Wert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.ListView> einfügemarkenfunktion und implementiert für Drag & Drop-Element neuanordnung von Spalten mit dem Standard Ereignisse der Ziehquelle. Die Position der Einfügemarke wird aktualisiert, in einem Handler für die <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> Ereignis. In diesem Handler wird die Position des Mauszeigers wird mit den Mittelpunkt des nächsten Elements verglichen, und das Ergebnis wird verwendet, um zu bestimmen, ob die Einfügemarke nach links oder rechts neben dem Element angezeigt wird.  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListView" />
  </Docs>
  <Members>
    <Member MemberName="AppearsAfterItem">
      <MemberSignature Language="C#" Value="public bool AppearsAfterItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AppearsAfterItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem" />
      <MemberSignature Language="VB.NET" Value="Public Property AppearsAfterItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AppearsAfterItem { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AppearsAfterItem : bool with get, set" Usage="System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Einfügemarke rechts neben dem Element mit dem in der <see cref="P:System.Windows.Forms.ListViewInsertionMark.Index" />-Eigenschaft angegebenen Index angezeigt wird, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Einfügemarke rechts neben dem Elemente mit dem in der <see cref="P:System.Windows.Forms.ListViewInsertionMark.Index" />-Eigenschaft angegebenen Index angezeigt wird, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A> Methode können Sie das Element, die der Mauszeiger am nächsten zu suchen, jedoch müssen Sie eigene Berechnungen durch, um zu bestimmen, ob die Einfügemarke vor oder nach diesem Element angezeigt werden soll.  
  
 Um den Wert für benötigt Berechnen der <xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A> -Eigenschaft, gehen Sie folgendermaßen vor:  
  
1.  Verwenden der <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A> Methode zum Abrufen des Indexes des Elements, das der Mauszeiger am nächsten liegt.  
  
2.  Übergeben Sie den Indexwert, der <xref:System.Windows.Forms.ListView.GetItemRect%2A?displayProperty=nameWithType> Methode, um das umschließende Rechteck des Elements abgerufen.  
  
3.  Wenn der Mauszeiger sich links neben dem Mittelpunkt des umschließenden Rechtecks ist, legen Sie die <xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A> Eigenschaft `false`ist, andernfalls legen Sie ihn auf `true`.  
  
 Weitere Informationen finden Sie unter den <xref:System.Windows.Forms.ListViewInsertionMark> Referenzthema zur Übersicht über.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.ListView> einfügemarkenfunktion und implementiert für Drag & Drop-Element neuanordnung von Spalten mit dem Standard Ereignisse der Ziehquelle. Die Position der Einfügemarke wird aktualisiert, in einem Handler für die <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> Ereignis. In diesem Handler wird die Position des Mauszeigers wird mit den Mittelpunkt des nächsten Elements verglichen, und das Ergebnis wird verwendet, um zu bestimmen, ob die Einfügemarke nach links oder rechts neben dem Element angezeigt wird.  
  
 Das vollständige Beispiel finden Sie unter den <xref:System.Windows.Forms.ListViewInsertionMark> Referenzthema zur Übersicht über.  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#3)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListViewInsertionMark.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle" Usage="System.Windows.Forms.ListViewInsertionMark.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das umschließende Rechteck der Einfügemarke ab.</summary>
        <value>Ein <see cref="T:System.Drawing.Rectangle" />, das die Position und die Größe der Einfügemarke darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Koordinaten im umschließenden Rechteck der Einfügemarke relativ zur oberen linken Ecke des sind die <xref:System.Windows.Forms.ListView> Steuerelement.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Drawing.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListViewInsertionMark.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color Color { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.Color : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListViewInsertionMark.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Farbe der Einfügemarke ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Drawing.Color" />-Wert, der die Farbe der Einfügemarke darstellt. Der Standardwert ist der Wert der <see cref="P:System.Windows.Forms.ListView.ForeColor" />-Eigenschaft.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mithilfe dieser Eigenschaft legen Sie die Farbe der Einfügemarke um einen anderen Wert als die Vordergrundfarbe des der <xref:System.Windows.Forms.ListView> Steuerelement.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.ListView> einfügemarkenfunktion und implementiert für Drag & Drop-Element neuanordnung von Spalten mit dem Standard Ereignisse der Ziehquelle. Die Position der Einfügemarke wird aktualisiert, in einem Handler für die <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> Ereignis. In diesem Handler wird die Position des Mauszeigers wird mit den Mittelpunkt des nächsten Elements verglichen, und das Ergebnis wird verwendet, um zu bestimmen, ob die Einfügemarke nach links oder rechts neben dem Element angezeigt wird.  
  
 Das vollständige Beispiel finden Sie unter den <xref:System.Windows.Forms.ListViewInsertionMark> Referenzthema zur Übersicht über.  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#2)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListViewInsertionMark.Index" />
      <MemberSignature Language="VB.NET" Value="Public Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Index : int with get, set" Usage="System.Windows.Forms.ListViewInsertionMark.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Index des Elements ab, neben dem die Einfügemarke angezeigt wird, oder legt diesen fest.</summary>
        <value>Der Index des nächstgelegenen Elements, neben dem die Einfügemarke angezeigt wird, oder -1, wenn die Einfügemarke ausgeblendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Einfügemarke auf der linken Seite des Elements mit dem angegebenen Index angezeigt wird, wenn die <xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A> -Eigenschaftensatz auf `false`ist, andernfalls wird angezeigt, auf der rechten Seite des Elements. Die Einfügemarke wird automatisch ausgeblendet, wenn ein gezogenes Element, in eingefügt wird der <xref:System.Windows.Forms.ListView.Items%2A?displayProperty=nameWithType> Auflistung. Um die Einfügemarke manuell, z. B. entfernen, wenn ein Element gezogen, in sich selbst haben oder außerhalb des Steuerelements gezogen wird, legen Sie die <xref:System.Windows.Forms.ListViewInsertionMark.Index%2A> Wert – 1.  
  
 Verwenden der <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A> Methode zum Abrufen des Indexes des nächstgelegenen Elements zu einer angegebenen Position, z. B. die Position des Mauszeigers, wenn ein Element in einem Drag & Drop-Vorgang zu positionieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.ListView> einfügemarkenfunktion und implementiert für Drag & Drop-Element neuanordnung von Spalten mit dem Standard Ereignisse der Ziehquelle. Die Position der Einfügemarke wird aktualisiert, in einem Handler für die <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> Ereignis. In diesem Handler wird die Position des Mauszeigers wird mit den Mittelpunkt des nächsten Elements verglichen, und das Ergebnis wird verwendet, um zu bestimmen, ob die Einfügemarke nach links oder rechts neben dem Element angezeigt wird.  
  
 Das vollständige Beispiel finden Sie unter den <xref:System.Windows.Forms.ListViewInsertionMark> Referenzthema zur Übersicht über.  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#3)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
    <Member MemberName="NearestIndex">
      <MemberSignature Language="C#" Value="public int NearestIndex (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NearestIndex(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListViewInsertionMark.NearestIndex(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function NearestIndex (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NearestIndex(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="member this.NearestIndex : System.Drawing.Point -&gt; int" Usage="listViewInsertionMark.NearestIndex pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Ein <see cref="T:System.Drawing.Point" />, der die Position darstellt, von der das nächstgelegene Element gesucht werden soll.</param>
        <summary>Ruft den Index des dem angegebenen Punkt am nächsten liegenden Elements ab.</summary>
        <returns>Der Index des dem angegebenen Punkt am nächsten liegenden Elements oder -1, wenn das nächstgelegene Element derzeit gezogen wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie das Element, das der Mauszeiger am nächsten zu suchen, wenn einen Drag & Drop-Vorgang durchführen. Verwenden, die der Indexwert zurückgegeben wird, Festlegen der <xref:System.Windows.Forms.ListViewInsertionMark.Index%2A> Eigenschaft. Wenn das der Mauszeiger am nächsten liegenden Elements das gezogene Element ist, ist der Rückgabewert dieser Methode 1 an. In diesem Fall Festlegen der <xref:System.Windows.Forms.ListViewInsertionMark.Index%2A> -Eigenschaft auf diesen Wert wird die Einfügemarke ausgeblendet.  
  
 Diese Methode sucht das nächste Element unabhängig davon, in dem der Mauszeiger befindet, während die <xref:System.Windows.Forms.ListView.GetItemAt%2A?displayProperty=nameWithType> Methode gibt das Element am angegebenen Speicherort nur oder `null` Wenn an dieser Position kein Element vorhanden ist. Die <xref:System.Windows.Forms.ListView.GetItemAt%2A?displayProperty=nameWithType> Methodenrückgabe `null`, z. B. wenn der Mauszeiger befindet sich zwischen den beiden Elementen. Aus diesem Grund sollten Sie immer verwenden die <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A> Methode, wenn einen Drag & Drop-Vorgang verwenden, um Elemente zu positionieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.ListView> einfügemarkenfunktion und implementiert für Drag & Drop-Element neuanordnung von Spalten mit dem Standard Ereignisse der Ziehquelle. Die Position der Einfügemarke wird aktualisiert, in einem Handler für die <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> Ereignis. In diesem Handler wird die Position des Mauszeigers wird mit den Mittelpunkt des nächsten Elements verglichen, und das Ergebnis wird verwendet, um zu bestimmen, ob die Einfügemarke nach links oder rechts neben dem Element angezeigt wird.  
  
 Das vollständige Beispiel finden Sie unter den <xref:System.Windows.Forms.ListViewInsertionMark> Referenzthema zur Übersicht über.  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#3)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="DragEventArgs" FullName="System.Windows.Forms.DragEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3ce15aa7c13deddddc09cbb5b657c00c8b96df8f" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86993524" /></Metadata><TypeSignature Language="C#" Value="public class DragEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DragEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DragEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DragEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DragEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type DragEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Daten für das <see cref="E:System.Windows.Forms.Control.DragDrop" />-Ereignis, das <see cref="E:System.Windows.Forms.Control.DragEnter" />-Ereignis oder das <see cref="E:System.Windows.Forms.Control.DragOver" />-Ereignis bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Windows.Forms.Control.DragDrop> Ereignis tritt auf, wenn der Benutzer einen Drag & Drop-Vorgang abschließt, indem ein Objekt über das Steuerelement gezogen und dann auf dem Steuerelement abgelegt wird, indem die Maustaste losgelassen wird. Das <xref:System.Windows.Forms.Control.DragEnter> Ereignis tritt auf, wenn der Benutzer den Mauszeiger auf das Steuerelement bewegt, während er ein Objekt mit der Maus zieht. Das <xref:System.Windows.Forms.Control.DragOver> Ereignis tritt auf, wenn der Benutzer den Mauszeiger über das Steuerelement bewegt, während er ein Objekt mit der Maus zieht.  
  
 Ein <xref:System.Windows.Forms.DragEventArgs> -Objekt gibt alle Daten an, die diesem Ereignis zugeordnet sind, den aktuellen Zustand der UMSCHALTTASTE, STRG-Taste und Alt-Taste, die Position des Mauszeigers und die Drag & amp; Drop-Effekte, die von der Quelle und dem Ziel des Zieh Ereignisses zugelassen werden.  
  
 Weitere Informationen zum Ereignis Modell finden Sie unter [behandeln und Auswerfen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Drag & Drop-Vorgang zwischen zwei-Steuer <xref:System.Windows.Forms.ListBox> Elementen veranschaulicht. Im Beispiel wird die-Methode aufgerufen, <xref:System.Windows.Forms.Control.DoDragDrop%2A> Wenn die Zieh Aktion gestartet wird. Die Zieh Aktion wird gestartet, wenn die Maus <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> während des Ereignisses mehr als die Mausposition bewegt hat <xref:System.Windows.Forms.Control.MouseDown> . Die- <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methode wird verwendet, um den Index des Elements zu bestimmen, das während des-Ereignisses gezogen werden soll `MouseDown` .  
  
 Das Beispiel zeigt auch die Verwendung von benutzerdefinierten Cursorn für den Drag & Drop-Vorgang. Im Beispiel wird davon ausgegangen, dass zwei Cursor Dateien, `3dwarro.cur` und, `3dwno.cur` im Anwendungsverzeichnis vorhanden sind, für die benutzerdefinierten Drag-und No-Drop-Cursor. Die benutzerdefinierten Cursor werden verwendet, wenn das `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> aktiviert ist. Die benutzerdefinierten Cursor werden im- <xref:System.Windows.Forms.Control.GiveFeedback> Ereignishandler festgelegt.  
  
 Der Tastatur Zustand wird im <xref:System.Windows.Forms.Control.DragOver> Ereignishandler für das Recht ausgewertet `ListBox` , um zu bestimmen, welcher Zieh Vorgang auf dem Zustand der UMSCHALTTASTE, STRG, alt oder STRG + ALT-Taste basiert. Der Speicherort in der, an dem der Ablage Vorgang `ListBox` stattfindet, wird auch während des Ereignisses festgelegt `DragOver` . Wenn es sich bei den zu Lösch Endes Daten nicht um handelt `String` , <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> wird der auf festgelegt <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> . Schließlich wird der Status der Ablage in der angezeigt `DropLocationLabel` <xref:System.Windows.Forms.Label> .  
  
 Die Daten, die auf der rechten Seite abgelegt werden, werden `ListBox` im <xref:System.Windows.Forms.Control.DragDrop> -Ereignishandler bestimmt, und der- `String` Wert wird an der entsprechenden Stelle in der hinzugefügt `ListBox` . Wenn der Zieh Vorgang außerhalb der Begrenzungen des Formulars verschoben wird, wird der Drag & Drop-Vorgang im- <xref:System.Windows.Forms.Control.QueryContinueDrag> Ereignishandler abgebrochen.  
  
 In diesem Code Ausschnitt wird die Verwendung der- <xref:System.Windows.Forms.DragEventArgs> Klasse veranschaulicht. Das gesamte Codebeispiel finden Sie unter der- <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 Im folgenden Beispiel wird veranschaulicht, wie <xref:System.Windows.Forms.DragEventArgs> zwischen Quelle und Ziel eines Drag & Drop-Vorgangs übermittelt werden. In diesem Beispiel ist ein <xref:System.Windows.Forms.ListBox> -Steuerelement die Quelle der Daten, und das- <xref:System.Windows.Forms.RichTextBox> Steuerelement ist das Ziel. Im Beispiel wird davon ausgegangen, dass das <xref:System.Windows.Forms.ListBox> Steuerelement mit einer Liste gültiger Dateinamen aufgefüllt wurde. Wenn der Benutzer einen der angezeigten Dateinamen aus dem-Steuerelement <xref:System.Windows.Forms.ListBox> auf das- <xref:System.Windows.Forms.RichTextBox> Steuerelement zieht, wird die Datei, auf die im Dateinamen verwiesen wird, geöffnet.  
  
 Der Vorgang wird im <xref:System.Windows.Forms.ListBox> mousdown-Ereignis des Steuer Elements initiiert. Im- <xref:System.Windows.Forms.RichTextBox.DragEnter> Ereignishandler verwendet das Beispiel die- <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> Methode, um zu überprüfen, ob die Daten in einem Format vorliegen, das das <xref:System.Windows.Forms.RichTextBox> Steuerelement anzeigen kann. Anschließend wird die-Eigenschaft festgelegt, <xref:System.Windows.Forms.DragDropEffects> um anzugeben, dass Daten aus der Quell Code Verwaltung in das Ziel Steuerelement kopiert werden sollen. Schließlich verwendet der <xref:System.Windows.Forms.RichTextBox> DragDrop-Ereignishandler des Steuer Elements die- <xref:System.Windows.Forms.IDataObject.GetData%2A> Methode, um den zu öffnenden Dateinamen abzurufen.  
  
 [!code-cpp[RichTextDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DragDropEffects" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragOver" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.IDataObject data, int32 keyState, int32 x, int32 y, valuetype System.Windows.Forms.DragDropEffects allowedEffect, valuetype System.Windows.Forms.DragDropEffects effect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As IDataObject, keyState As Integer, x As Integer, y As Integer, allowedEffect As DragDropEffects, effect As DragDropEffects)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DragEventArgs(System::Windows::Forms::IDataObject ^ data, int keyState, int x, int y, System::Windows::Forms::DragDropEffects allowedEffect, System::Windows::Forms::DragDropEffects effect);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DragEventArgs : System.Windows.Forms.IDataObject * int * int * int * System.Windows.Forms.DragDropEffects * System.Windows.Forms.DragDropEffects -&gt; System.Windows.Forms.DragEventArgs" Usage="new System.Windows.Forms.DragEventArgs (data, keyState, x, y, allowedEffect, effect)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="System.Windows.Forms.IDataObject" />
        <Parameter Name="keyState" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="allowedEffect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data">Die diesem Ereignis zugeordneten Daten.</param>
        <param name="keyState">Der aktuelle Zustand von UMSCHALTTASTE, STRG und ALT.</param>
        <param name="x">Die x-Koordinate des Mauszeigers in Pixel.</param>
        <param name="y">Die y-Koordinate des Mauszeigers in Pixel.</param>
        <param name="allowedEffect">Einer der <see cref="T:System.Windows.Forms.DragDropEffects" />-Werte.</param>
        <param name="effect">Einer der <see cref="T:System.Windows.Forms.DragDropEffects" />-Werte.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.DragEventArgs" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="AllowedEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects AllowedEffect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects AllowedEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedEffect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects AllowedEffect { System::Windows::Forms::DragDropEffects get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowedEffect : System.Windows.Forms.DragDropEffects" Usage="System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, welche Drag &amp;amp; Drop-Operationen für den Ursprung (oder die Quelle) des Ziehereignisses zulässig sind.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.DragDropEffects" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein-Steuerelement einen Drag & Drop-Vorgang initiiert, indem die- <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType> Methode aufgerufen wird, gibt es die zulässigen Auswirkungen des Vorgangs an. Wenn Sie z. b. eine Datei aus einer Quelle ziehen, wenn die Datei schreibgeschützt ist (oder von einem schreibgeschützten Speichermedium wie z. b. einer CD), gibt die Quelle an, dass die Datei in das Ziel kopiert, aber nicht übertragen werden kann.  
  
 Bevor Sie versuchen, einen Vorgang für die gezogenen Daten auszuführen, sollten Sie diese Eigenschaft überprüfen, um sicherzustellen, dass der Vorgang zulässig ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Drag & Drop-Vorgang zwischen zwei-Steuer <xref:System.Windows.Forms.ListBox> Elementen veranschaulicht. Im Beispiel wird die-Methode aufgerufen, <xref:System.Windows.Forms.Control.DoDragDrop%2A> Wenn die Zieh Aktion gestartet wird. Die Zieh Aktion wird gestartet, wenn die Maus <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> während des Ereignisses mehr als die Mausposition bewegt hat <xref:System.Windows.Forms.Control.MouseDown> . Die- <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methode wird verwendet, um den Index des Elements zu bestimmen, das während des-Ereignisses gezogen werden soll `MouseDown` .  
  
 Das Beispiel zeigt auch die Verwendung von benutzerdefinierten Cursorn für den Drag & Drop-Vorgang. Im Beispiel wird davon ausgegangen, dass zwei Cursor Dateien, `3dwarro.cur` und, `3dwno.cur` im Anwendungsverzeichnis vorhanden sind, für die benutzerdefinierten Drag-und No-Drop-Cursor. Die benutzerdefinierten Cursor werden verwendet, wenn das `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> aktiviert ist. Die benutzerdefinierten Cursor werden im- <xref:System.Windows.Forms.Control.GiveFeedback> Ereignishandler festgelegt.  
  
 Der Tastatur Zustand wird im <xref:System.Windows.Forms.Control.DragOver> Ereignishandler für das Recht ausgewertet `ListBox` , um zu bestimmen, welcher Zieh Vorgang auf dem Zustand der UMSCHALTTASTE, STRG, alt oder STRG + ALT-Taste basiert. Der Speicherort in der, an dem der Ablage Vorgang `ListBox` stattfindet, wird auch während des Ereignisses festgelegt `DragOver` . Wenn es sich bei den zu Lösch Endes Daten nicht um handelt `String` , <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> wird der auf festgelegt <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> . Schließlich wird der Status der Ablage in der angezeigt `DropLocationLabel` <xref:System.Windows.Forms.Label> .  
  
 Die Daten, die auf der rechten Seite abgelegt werden, werden `ListBox` im <xref:System.Windows.Forms.Control.DragDrop> -Ereignishandler bestimmt, und der- `String` Wert wird an der entsprechenden Stelle in der hinzugefügt `ListBox` . Wenn der Zieh Vorgang außerhalb der Begrenzungen des Formulars verschoben wird, wird der Drag & Drop-Vorgang im- <xref:System.Windows.Forms.Control.QueryContinueDrag> Ereignishandler abgebrochen.  
  
 In diesem Code Ausschnitt wird die Verwendung der- <xref:System.Windows.Forms.DragEventArgs> Klasse veranschaulicht. Das gesamte Codebeispiel finden Sie unter der- <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IDataObject Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IDataObject Data" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As IDataObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IDataObject ^ Data { System::Windows::Forms::IDataObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : System.Windows.Forms.IDataObject" Usage="System.Windows.Forms.DragEventArgs.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IDataObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Windows.Forms.IDataObject" /> ab, das die diesem Ereignis zugeordneten Daten enthält.</summary>
        <value>Die diesem Ereignis zugeordneten Daten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Text des Ereignis Handlers können Sie mithilfe der- <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> Methode ermitteln, ob die Daten mit den Formatanforderungen des Steuer Elements übereinstimmen, an das die Daten gezogen werden. Sie können auch angeben, ob Sie versuchen möchten, die Daten zu konvertieren, um Ihre Formatanforderungen zu erfüllen. Wenn die gezogenen Daten Ihren Formatanforderungen entsprechen, verwenden Sie die- <xref:System.Windows.Forms.IDataObject.GetData%2A> Methode, um die Daten abzurufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Drag & Drop-Vorgang zwischen zwei-Steuer <xref:System.Windows.Forms.ListBox> Elementen veranschaulicht. Im Beispiel wird die-Methode aufgerufen, <xref:System.Windows.Forms.Control.DoDragDrop%2A> Wenn die Zieh Aktion gestartet wird. Die Zieh Aktion wird gestartet, wenn die Maus <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> während des Ereignisses mehr als die Mausposition bewegt hat <xref:System.Windows.Forms.Control.MouseDown> . Die- <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methode wird verwendet, um den Index des Elements zu bestimmen, das während des-Ereignisses gezogen werden soll `MouseDown` .  
  
 Das Beispiel zeigt auch die Verwendung von benutzerdefinierten Cursorn für den Drag & Drop-Vorgang. Im Beispiel wird davon ausgegangen, dass zwei Cursor Dateien, `3dwarro.cur` und, `3dwno.cur` im Anwendungsverzeichnis vorhanden sind, für die benutzerdefinierten Drag-und No-Drop-Cursor. Die benutzerdefinierten Cursor werden verwendet, wenn das `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> aktiviert ist. Die benutzerdefinierten Cursor werden im- <xref:System.Windows.Forms.Control.GiveFeedback> Ereignishandler festgelegt.  
  
 Der Tastatur Zustand wird im <xref:System.Windows.Forms.Control.DragOver> Ereignishandler für das Recht ausgewertet `ListBox` , um zu bestimmen, welcher Zieh Vorgang auf dem Zustand der UMSCHALTTASTE, STRG, alt oder STRG + ALT-Taste basiert. Der Speicherort in der, an dem der Ablage Vorgang `ListBox` stattfindet, wird auch während des Ereignisses festgelegt `DragOver` . Wenn es sich bei den zu Lösch Endes Daten nicht um handelt `String` , <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> wird der auf festgelegt <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> . Schließlich wird der Status der Ablage in der angezeigt `DropLocationLabel` <xref:System.Windows.Forms.Label> .  
  
 Die Daten, die auf der rechten Seite abgelegt werden, werden `ListBox` im <xref:System.Windows.Forms.Control.DragDrop> -Ereignishandler bestimmt, und der- `String` Wert wird an der entsprechenden Stelle in der hinzugefügt `ListBox` . Wenn der Zieh Vorgang außerhalb der Begrenzungen des Formulars verschoben wird, wird der Drag & Drop-Vorgang im- <xref:System.Windows.Forms.Control.QueryContinueDrag> Ereignishandler abgebrochen.  
  
 In diesem Code Ausschnitt wird die Verwendung der- <xref:System.Windows.Forms.DragEventArgs> Klasse veranschaulicht. Das gesamte Codebeispiel finden Sie unter der- <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects Effect { System::Windows::Forms::DragDropEffects get(); void set(System::Windows::Forms::DragDropEffects value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Forms.DragDropEffects with get, set" Usage="System.Windows.Forms.DragEventArgs.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Ziel des Ablageeffekts in einer Drag &amp;amp; Drop-Operation ab oder legt dieses fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.DragDropEffects" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig bestimmt der angewendete Effekt den Mauszeiger für das Ziel eines Drag & Drop-Vorgangs. Dies ist hilfreich, um dem Benutzer Feedback zum Vorgang bereitzustellen, der ausgeführt wird. Wenn Sie z. b. die STRG-Taste gedrückt halten, wenn Sie eine Datei aus einer Quelle ziehen, geben Sie <xref:System.Windows.Forms.DragDropEffects.Copy?displayProperty=nameWithType> an, um anzugeben, dass das Ziel versucht, einen Kopiervorgang auszuführen.  
  
 Informationen zum Verwenden benutzerdefinierter Cursor für einen Zieh Vorgang finden Sie unter <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=nameWithType> .  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Drag & Drop-Vorgang zwischen zwei-Steuer <xref:System.Windows.Forms.ListBox> Elementen veranschaulicht. Im Beispiel wird die-Methode aufgerufen, <xref:System.Windows.Forms.Control.DoDragDrop%2A> Wenn die Zieh Aktion gestartet wird. Die Zieh Aktion wird gestartet, wenn die Maus <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> während des Ereignisses mehr als die Mausposition bewegt hat <xref:System.Windows.Forms.Control.MouseDown> . Die- <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methode wird verwendet, um den Index des Elements zu bestimmen, das während des-Ereignisses gezogen werden soll `MouseDown` .  
  
 Das Beispiel zeigt auch die Verwendung von benutzerdefinierten Cursorn für den Drag & Drop-Vorgang. Im Beispiel wird davon ausgegangen, dass zwei Cursor Dateien, `3dwarro.cur` und, `3dwno.cur` im Anwendungsverzeichnis vorhanden sind, für die benutzerdefinierten Drag-und No-Drop-Cursor. Die benutzerdefinierten Cursor werden verwendet, wenn das `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> aktiviert ist. Die benutzerdefinierten Cursor werden im- <xref:System.Windows.Forms.Control.GiveFeedback> Ereignishandler festgelegt.  
  
 Der Tastatur Zustand wird im <xref:System.Windows.Forms.Control.DragOver> Ereignishandler für das Recht ausgewertet `ListBox` , um zu bestimmen, welcher Zieh Vorgang auf dem Zustand der UMSCHALTTASTE, STRG, alt oder STRG + ALT-Taste basiert. Der Speicherort in der, an dem der Ablage Vorgang `ListBox` stattfindet, wird auch während des Ereignisses festgelegt `DragOver` . Wenn es sich bei den zu Lösch Endes Daten nicht um handelt `String` , <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> wird der auf festgelegt <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> . Schließlich wird der Status der Ablage in der angezeigt `DropLocationLabel` <xref:System.Windows.Forms.Label> .  
  
 Die Daten, die auf der rechten Seite abgelegt werden, werden `ListBox` im <xref:System.Windows.Forms.Control.DragDrop> -Ereignishandler bestimmt, und der- `String` Wert wird an der entsprechenden Stelle in der hinzugefügt `ListBox` . Wenn der Zieh Vorgang außerhalb der Begrenzungen des Formulars verschoben wird, wird der Drag & Drop-Vorgang im- <xref:System.Windows.Forms.Control.QueryContinueDrag> Ereignishandler abgebrochen.  
  
 In diesem Code Ausschnitt wird die Verwendung der- <xref:System.Windows.Forms.DragEventArgs> Klasse veranschaulicht. Das gesamte Codebeispiel finden Sie unter der- <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="KeyState">
      <MemberSignature Language="C#" Value="public int KeyState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyState As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyState { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyState : int" Usage="System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aktuellen Zustand von UMSCHALTTASTE, STRG, ALT sowie den Zustand der Maustasten ab.</summary>
        <value>Der aktuelle Zustand von UMSCHALTTASTE, STRG, ALT sowie der Maustasten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die Auswirkung eines Drag & Drop-Vorgangs auf den Zustand eines bestimmten Schlüssels setzen. Beispielsweise können Sie Daten abhängig davon kopieren oder verschieben, ob die STRG-Taste oder die UMSCHALTTASTE während des Drag & Drop-Vorgangs gedrückt werden.  
  
 Die Bits, die in der-Eigenschaft festgelegt sind, <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> identifizieren die Schlüssel oder Maustasten, die während des Vorgangs gedrückt wurden. Wenn z. b. die linke Maustaste gedrückt wird, wird das erste Bit in der- <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> Eigenschaft festgelegt. Sie können den bitweisen AND-Operator verwenden, um auf einen bestimmten Schlüssel Zustand zu testen.  
  
 In der folgenden Tabelle sind die Werte aufgeführt, die für ein angegebenes Ereignis verwendet werden.  
  
|Wert|Schlüssel|  
|-----------|---------|  
|1 (Bit 0)|Die linke Maustaste.|  
|2 (Bit 1)|Die rechte Maustaste.|  
|4 (Bit 2)|Die UMSCHALTTASTE.|  
|8 (Bit 3)|Die CTRL-TASTE.|  
|16 (Bit 4)|Die mittlere Maustaste.|  
|32 (Bit 5)|Die ALT-TASTE.|  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Drag & Drop-Vorgang zwischen zwei-Steuer <xref:System.Windows.Forms.ListBox> Elementen veranschaulicht. Im Beispiel wird die-Methode aufgerufen, <xref:System.Windows.Forms.Control.DoDragDrop%2A> Wenn die Zieh Aktion gestartet wird. Die Zieh Aktion wird gestartet, wenn die Maus <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> während des Ereignisses mehr als die Mausposition bewegt hat <xref:System.Windows.Forms.Control.MouseDown> . Die- <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methode wird verwendet, um den Index des Elements zu bestimmen, das während des-Ereignisses gezogen werden soll `MouseDown` .  
  
 Das Beispiel zeigt auch die Verwendung von benutzerdefinierten Cursorn für den Drag & Drop-Vorgang. Im Beispiel wird davon ausgegangen, dass zwei Cursor Dateien, `3dwarro.cur` und, `3dwno.cur` im Anwendungsverzeichnis vorhanden sind, für die benutzerdefinierten Drag-und No-Drop-Cursor. Die benutzerdefinierten Cursor werden verwendet, wenn das `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> aktiviert ist. Die benutzerdefinierten Cursor werden im- <xref:System.Windows.Forms.Control.GiveFeedback> Ereignishandler festgelegt.  
  
 Der Tastatur Zustand wird im <xref:System.Windows.Forms.Control.DragOver> Ereignishandler für das Recht ausgewertet `ListBox` , um zu bestimmen, welcher Zieh Vorgang auf dem Zustand der UMSCHALTTASTE, STRG, alt oder STRG + ALT-Taste basiert. Der Speicherort in der, an dem der Ablage Vorgang `ListBox` stattfindet, wird auch während des Ereignisses festgelegt `DragOver` . Wenn es sich bei den zu Lösch Endes Daten nicht um handelt `String` , <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> wird der auf festgelegt <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> . Schließlich wird der Status der Ablage in der angezeigt `DropLocationLabel` <xref:System.Windows.Forms.Label> .  
  
 Die Daten, die auf der rechten Seite abgelegt werden, werden `ListBox` im <xref:System.Windows.Forms.Control.DragDrop> -Ereignishandler bestimmt, und der- `String` Wert wird an der entsprechenden Stelle in der hinzugefügt `ListBox` . Wenn der Zieh Vorgang außerhalb der Begrenzungen des Formulars verschoben wird, wird der Drag & Drop-Vorgang im- <xref:System.Windows.Forms.Control.QueryContinueDrag> Ereignishandler abgebrochen.  
  
 In diesem Code Ausschnitt wird die Verwendung der- <xref:System.Windows.Forms.DragEventArgs> Klasse veranschaulicht. Das gesamte Codebeispiel finden Sie unter der- <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.X" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property X As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int X { int get(); };" />
      <MemberSignature Language="F#" Value="member this.X : int" Usage="System.Windows.Forms.DragEventArgs.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die x-Koordinate des Mauszeigers in Bildschirmkoordinaten ab.</summary>
        <value>Die x-Koordinate des Mauszeigers in Pixel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein Drag & Drop-Vorgang zwischen zwei-Steuer <xref:System.Windows.Forms.ListBox> Elementen veranschaulicht. Im Beispiel wird die-Methode aufgerufen, <xref:System.Windows.Forms.Control.DoDragDrop%2A> Wenn die Zieh Aktion gestartet wird. Die Zieh Aktion wird gestartet, wenn die Maus <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> während des Ereignisses mehr als die Mausposition bewegt hat <xref:System.Windows.Forms.Control.MouseDown> . Die- <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methode wird verwendet, um den Index des Elements zu bestimmen, das während des-Ereignisses gezogen werden soll `MouseDown` .  
  
 Das Beispiel zeigt auch die Verwendung von benutzerdefinierten Cursorn für den Drag & Drop-Vorgang. Im Beispiel wird davon ausgegangen, dass zwei Cursor Dateien, `3dwarro.cur` und, `3dwno.cur` im Anwendungsverzeichnis vorhanden sind, für die benutzerdefinierten Drag-und No-Drop-Cursor. Die benutzerdefinierten Cursor werden verwendet, wenn das `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> aktiviert ist. Die benutzerdefinierten Cursor werden im- <xref:System.Windows.Forms.Control.GiveFeedback> Ereignishandler festgelegt.  
  
 Der Tastatur Zustand wird im <xref:System.Windows.Forms.Control.DragOver> Ereignishandler für das Recht ausgewertet `ListBox` , um zu bestimmen, welcher Zieh Vorgang auf dem Zustand der UMSCHALTTASTE, STRG, alt oder STRG + ALT-Taste basiert. Der Speicherort in der, an dem der Ablage Vorgang `ListBox` stattfindet, wird auch während des Ereignisses festgelegt `DragOver` . Wenn es sich bei den zu Lösch Endes Daten nicht um handelt `String` , <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> wird der auf festgelegt <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> . Schließlich wird der Status der Ablage in der angezeigt `DropLocationLabel` <xref:System.Windows.Forms.Label> .  
  
 Die Daten, die auf der rechten Seite abgelegt werden, werden `ListBox` im <xref:System.Windows.Forms.Control.DragDrop> -Ereignishandler bestimmt, und der- `String` Wert wird an der entsprechenden Stelle in der hinzugefügt `ListBox` . Wenn der Zieh Vorgang außerhalb der Begrenzungen des Formulars verschoben wird, wird der Drag & Drop-Vorgang im- <xref:System.Windows.Forms.Control.QueryContinueDrag> Ereignishandler abgebrochen.  
  
 In diesem Code Ausschnitt wird die Verwendung der- <xref:System.Windows.Forms.DragEventArgs> Klasse veranschaulicht. Das gesamte Codebeispiel finden Sie unter der- <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Y" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Y As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Y { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Y : int" Usage="System.Windows.Forms.DragEventArgs.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die y-Koordinate des Mauszeigers in Bildschirmkoordinaten ab.</summary>
        <value>Die y-Koordinate des Mauszeigers in Pixel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein Drag & Drop-Vorgang zwischen zwei-Steuer <xref:System.Windows.Forms.ListBox> Elementen veranschaulicht. Im Beispiel wird die-Methode aufgerufen, <xref:System.Windows.Forms.Control.DoDragDrop%2A> Wenn die Zieh Aktion gestartet wird. Die Zieh Aktion wird gestartet, wenn die Maus <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> während des Ereignisses mehr als die Mausposition bewegt hat <xref:System.Windows.Forms.Control.MouseDown> . Die- <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methode wird verwendet, um den Index des Elements zu bestimmen, das während des-Ereignisses gezogen werden soll `MouseDown` .  
  
 Das Beispiel zeigt auch die Verwendung von benutzerdefinierten Cursorn für den Drag & Drop-Vorgang. Im Beispiel wird davon ausgegangen, dass zwei Cursor Dateien, `3dwarro.cur` und, `3dwno.cur` im Anwendungsverzeichnis vorhanden sind, für die benutzerdefinierten Drag-und No-Drop-Cursor. Die benutzerdefinierten Cursor werden verwendet, wenn das `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> aktiviert ist. Die benutzerdefinierten Cursor werden im- <xref:System.Windows.Forms.Control.GiveFeedback> Ereignishandler festgelegt.  
  
 Der Tastatur Zustand wird im <xref:System.Windows.Forms.Control.DragOver> Ereignishandler für das Recht ausgewertet `ListBox` , um zu bestimmen, welcher Zieh Vorgang auf dem Zustand der UMSCHALTTASTE, STRG, alt oder STRG + ALT-Taste basiert. Der Speicherort in der, an dem der Ablage Vorgang `ListBox` stattfindet, wird auch während des Ereignisses festgelegt `DragOver` . Wenn es sich bei den zu Lösch Endes Daten nicht um handelt `String` , <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> wird der auf festgelegt <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> . Schließlich wird der Status der Ablage in der angezeigt `DropLocationLabel` <xref:System.Windows.Forms.Label> .  
  
 Die Daten, die auf der rechten Seite abgelegt werden, werden `ListBox` im <xref:System.Windows.Forms.Control.DragDrop> -Ereignishandler bestimmt, und der- `String` Wert wird an der entsprechenden Stelle in der hinzugefügt `ListBox` . Wenn der Zieh Vorgang außerhalb der Begrenzungen des Formulars verschoben wird, wird der Drag & Drop-Vorgang im- <xref:System.Windows.Forms.Control.QueryContinueDrag> Ereignishandler abgebrochen.  
  
 In diesem Code Ausschnitt wird die Verwendung der- <xref:System.Windows.Forms.DragEventArgs> Klasse veranschaulicht. Das gesamte Codebeispiel finden Sie unter der- <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.X" />
      </Docs>
    </Member>
  </Members>
</Type>

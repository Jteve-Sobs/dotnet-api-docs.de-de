<Type Name="IDataGridViewEditingControl" FullName="System.Windows.Forms.IDataGridViewEditingControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8cf70025672eef1809a1d73788bb5fcdfe86a940" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70679832" /></Metadata><TypeSignature Language="C#" Value="public interface IDataGridViewEditingControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataGridViewEditingControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataGridViewEditingControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataGridViewEditingControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataGridViewEditingControl" />
  <TypeSignature Language="F#" Value="type IDataGridViewEditingControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiert gemeinsame Funktionen für Steuerelemente, die sich innerhalb von Zellen einer <see cref="T:System.Windows.Forms.DataGridView" /> befinden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Schnittstelle wird von Steuerelementen implementiert, <xref:System.Windows.Forms.DataGridViewComboBoxEditingControl> z <xref:System.Windows.Forms.DataGridViewTextBoxEditingControl>. b. und, die <xref:System.Windows.Forms.DataGridView> von <xref:System.Windows.Forms.DataGridViewComboBoxCell> entsprechenden Zellen gehostet werden <xref:System.Windows.Forms.DataGridViewTextBoxCell>, z. b. und, wenn Sie sich im Bearbeitungsmodus befinden.  
  
 Zelltypen, die Bearbeitungs Steuerelemente hosten <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> können <xref:System.Type> , legen ihre-Eigenschaft auf fest Wenn die Zelle in den Bearbeitungsmodus wechselt, werden die folgenden Schritte ausgeführt:  
  
1.  Das <xref:System.Windows.Forms.DataGridView> -Steuerelement erstellt eine Instanz des Steuerelement Typs "Bearbeitung".  
  
2.  Das <xref:System.Windows.Forms.DataGridView> -Steuerelement ruft <xref:System.Windows.Forms.DataGridViewCell.InitializeEditingControl%2A> die Cell-Methode auf. Sie können diese Methode überschreiben, um den Zellwert in das Bearbeitungs Steuerelement zu übertragen.  
  
3.  Das <xref:System.Windows.Forms.DataGridView> -Steuerelement ruft die <xref:System.Windows.Forms.IDataGridViewEditingControl.ApplyCellStyleToEditingControl%2A> Bearbeitungs Steuerelement Methode auf und übergibt den aktuellen Stil der Zelle. Sie können diese Methode implementieren, um die Darstellung des Bearbeitungs Steuer Elements zu initialisieren, sodass es mit der Darstellung der Zelle übereinstimmt.  
  
4.  Das <xref:System.Windows.Forms.DataGridView> -Steuerelement ruft die <xref:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit%2A> Bearbeitungs Steuerelement Methode auf. Sie können diese Methode implementieren, um abschließende Anpassungen an dem Bearbeitungs Steuerelement vorzunehmen, z. b. die Auswahl des Steuer Elements.  
  
 Weitere Informationen zum Implementieren <xref:System.Windows.Forms.IDataGridViewEditingControl>von finden Sie unter Gewusst [wie: Hosten von Steuerelementen in Windows Forms DataGridView-Zellen](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 Zelltypen wie z <xref:System.Windows.Forms.DataGridViewCheckBoxCell> . b., die eine Benutzeroberfläche zum Angeben von Werten bereitstellen, ohne ein Bearbeitungs <xref:System.Windows.Forms.IDataGridViewEditingCell> Steuerelement zu erstellen, implementieren die-Schnittstelle. Die Benutzeroberfläche wird in diesem Fall angezeigt, unabhängig davon, ob sich die Zelle im Bearbeitungsmodus befindet.  
  
 Andere Zelltypen, wie z <xref:System.Windows.Forms.DataGridViewButtonCell>. b., stellen eine Benutzeroberfläche bereit, speichern jedoch keine benutzerdefinierten Werte. In diesem Fall implementiert <xref:System.Windows.Forms.IDataGridViewEditingCell> oder hostet der Zellentyp kein Bearbeitungs Steuerelement.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung dieser Schnittstelle bereitstellt, <xref:System.Windows.Forms.DateTimePicker>die von abgeleitet wird. Dieses Beispiel ist Teil eines größeren Beispiels, das in Gewusst [wie: Hosten von Steuerelementen in Windows Forms DataGridView-Zellen](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md)verfügbar ist.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#300](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#300)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#300](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#300)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataGridView" />
    <altmember cref="T:System.Windows.Forms.DataGridViewCell" />
    <altmember cref="T:System.Windows.Forms.IDataGridViewEditingCell" />
    <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxCell" />
    <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxEditingControl" />
    <altmember cref="T:System.Windows.Forms.DataGridViewTextBoxCell" />
    <altmember cref="P:System.Windows.Forms.DataGridViewCell.EditType" />
    <altmember cref="T:System.Windows.Forms.DataGridViewTextBoxEditingControl" />
    <related type="Article" href="https://msdn.microsoft.com/library/e79a9d4e-64ec-41f5-93ec-f5492633cbb2">Gewusst wie: Hosten von Steuerelementen in DataGridView-Zellen in Windows Forms</related>
  </Docs>
  <Members>
    <Member MemberName="ApplyCellStyleToEditingControl">
      <MemberSignature Language="C#" Value="public void ApplyCellStyleToEditingControl (System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyCellStyleToEditingControl(class System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyCellStyleToEditingControl(System::Windows::Forms::DataGridViewCellStyle ^ dataGridViewCellStyle);" />
      <MemberSignature Language="F#" Value="abstract member ApplyCellStyleToEditingControl : System.Windows.Forms.DataGridViewCellStyle -&gt; unit" Usage="iDataGridViewEditingControl.ApplyCellStyleToEditingControl dataGridViewCellStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewCellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
      </Parameters>
      <Docs>
        <param name="dataGridViewCellStyle">Der als Vorlage für die Benutzeroberfläche zu verwendende <see cref="T:System.Windows.Forms.DataGridViewCellStyle" />.</param>
        <summary>Ändert die Benutzeroberfläche des Steuerelements so, dass dieses dem angegebenen Zellenstil entspricht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel legt eine Implementierung dieser Methode die Eigenschaften der Benutzeroberfläche für das Bearbeitungs Steuerelement, z. b. Schriftart, Hintergrundfarbe und Vordergrundfarbe, auf die Werte `dataGridViewCellStyle`der entsprechenden Eigenschaften in fest. Dies ist der Stil, der für die Zelle verwendet wird, die das Steuerelement.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung dieses Members bereitstellt. Dieses Beispiel ist Teil eines größeren Beispiels, das in Gewusst [wie: Hosten von Steuerelementen in Windows Forms DataGridView-Zellen](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md)verfügbar ist.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#303](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#303)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#303](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#303)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlDataGridView">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridView EditingControlDataGridView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridView EditingControlDataGridView" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlDataGridView As DataGridView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridView ^ EditingControlDataGridView { System::Windows::Forms::DataGridView ^ get(); void set(System::Windows::Forms::DataGridView ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EditingControlDataGridView : System.Windows.Forms.DataGridView with get, set" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Windows.Forms.DataGridView" /> ab, die die Zelle enthält, oder legt diese fest.</summary>
        <value>Die <see cref="T:System.Windows.Forms.DataGridView" /> mit der <see cref="T:System.Windows.Forms.DataGridViewCell" />, die bearbeitet wird. <see langword="null" />, wenn keine zugeordnete <see cref="T:System.Windows.Forms.DataGridView" /> vorhanden ist.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlFormattedValue">
      <MemberSignature Language="C#" Value="public object EditingControlFormattedValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object EditingControlFormattedValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlFormattedValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ EditingControlFormattedValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EditingControlFormattedValue : obj with get, set" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den formatierten Wert der Zelle ab, die im Editor geändert wird, oder legt diesen Wert fest.</summary>
        <value>Ein <see cref="T:System.Object" />, das den formatierten Wert der Zelle darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der formatierte Wert stellt den Wert dar, der in der Benutzeroberfläche des Steuer Elements angezeigt wird. Der formatierte Wert kann sich im absoluten Wert und sogar im Datentyp des tatsächlichen Werts, der im Steuerelement enthalten ist, unterscheiden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung dieses Members bereitstellt. Dieses Beispiel ist Teil eines größeren Beispiels, das in Gewusst [wie: Hosten von Steuerelementen in Windows Forms DataGridView-Zellen](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md)verfügbar ist.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#301](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#301)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#301](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#301)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlRowIndex">
      <MemberSignature Language="C#" Value="public int EditingControlRowIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EditingControlRowIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlRowIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlRowIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int EditingControlRowIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.EditingControlRowIndex : int with get, set" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingControlRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Index der übergeordneten Zeile der besitzenden Zelle ab oder legt den Index fest.</summary>
        <value>Der Index der Zeile, die die Zelle enthält, oder-1, wenn keine übergeordnete Zeile vorhanden ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.IDataGridViewEditingControl> -Schnittstelle definiert keine entsprechende `ColumnIndex` Eigenschaft. Mit der <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView%2A> -Eigenschaft können Sie das übergeordnete <xref:System.Windows.Forms.DataGridView> Steuerelement abrufen und <xref:System.Windows.Forms.DataGridView.CurrentCellAddress%2A?displayProperty=nameWithType> die-Eigenschaft verwenden, um die Zeilen-und Spalten Indizes der aktiven Zelle zu bestimmen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRow" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlValueChanged">
      <MemberSignature Language="C#" Value="public bool EditingControlValueChanged { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EditingControlValueChanged" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlValueChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EditingControlValueChanged { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EditingControlValueChanged : bool with get, set" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob sich der Wert des Bearbeitungssteuerelements vom Wert der übergeordneten Zelle unterscheidet.</summary>
        <value><see langword="true" />, wenn sich der Wert des Steuerelements vom Zellenwert unterscheidet, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged%2A> -Eigenschaft wird auf `true` festgelegt, um anzugeben, dass sich der Zustand der hostingzelle geändert hat und die Benutzeroberfläche (UI) aktualisiert werden muss, um diese Änderung des Werts widerzuspiegeln. Diese Eigenschaft wird von der besitzenden Zelle oder Tabelle `false` nach einem Update auf zurückgesetzt.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn <see langword="true" /> Sie in ihrer Implementierung dieser Eigenschaft zurückkehren, wird der angezeigte Wert nicht automatisch geändert. Wenn der Wert im Bearbeitungs Steuerelement geändert wird, müssen Sie die <see cref="T:System.Windows.Forms.DataGridView" /> der Änderung benachrichtigen, indem <see langword="true" /> Sie an <see cref="M:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty(System.Boolean)" /> die-Methode übergeben.</para></block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlWantsInputKey">
      <MemberSignature Language="C#" Value="public bool EditingControlWantsInputKey (System.Windows.Forms.Keys keyData, bool dataGridViewWantsInputKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EditingControlWantsInputKey(valuetype System.Windows.Forms.Keys keyData, bool dataGridViewWantsInputKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EditingControlWantsInputKey (keyData As Keys, dataGridViewWantsInputKey As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EditingControlWantsInputKey(System::Windows::Forms::Keys keyData, bool dataGridViewWantsInputKey);" />
      <MemberSignature Language="F#" Value="abstract member EditingControlWantsInputKey : System.Windows.Forms.Keys * bool -&gt; bool" Usage="iDataGridViewEditingControl.EditingControlWantsInputKey (keyData, dataGridViewWantsInputKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
        <Parameter Name="dataGridViewWantsInputKey" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keyData">Eine Instanz von <see cref="T:System.Windows.Forms.Keys" />, die die gedrückte Taste darstellt.</param>
        <param name="dataGridViewWantsInputKey"><see langword="true" />, wenn <see cref="T:System.Windows.Forms.DataGridView" /> die <see cref="T:System.Windows.Forms.Keys" /><paramref name="keyData" /> verarbeiten soll, andernfalls <see langword="false" />.</param>
        <summary>Bestimmt, ob es sich bei der angegebenen Taste um eine normale Eingabetaste handelt, die durch das Bearbeitungssteuerelement verarbeitet werden soll, oder ob es sich um eine besondere Taste handelt, die durch die <see cref="T:System.Windows.Forms.DataGridView" /> verarbeitet werden soll.</summary>
        <returns><see langword="true" />, wenn die angegebene Taste eine normale Eingabetaste ist, die durch das Bearbeitungssteuerelement behandelt werden soll, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Bearbeitungs Steuerelement implementiert diese Methode, um zu bestimmen, welche Eingabe Schlüssel vom Steuerelement verarbeitet werden sollen und welche Eingabe Schlüssel von der <xref:System.Windows.Forms.DataGridView>verarbeitet werden sollen.  
  
 Die <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> -Methode wird <xref:System.Windows.Forms.DataGridView>von aufgerufen. Die <xref:System.Windows.Forms.DataGridView> wird `true` von `keyData`übergeben , wenn die verarbeitet werden kann. `dataGridViewWantsInputKey` Wenn das Bearbeitungs Steuer <xref:System.Windows.Forms.DataGridView> Element das `keyData`Handle von zulassen kann <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> `false` `dataGridViewWantsInputKey` , sollte zurückgeben, wenn den Wert hat. `true` Andere Implementierungen von <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> ignorieren möglicherweise `dataGridViewWantsInputKey` einen Wert `true` von und behandeln `keyData` die im Bearbeitungs Steuerelement.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung dieses Members bereitstellt. Dieses Beispiel ist Teil eines größeren Beispiels, das in Gewusst [wie: Hosten von Steuerelementen in Windows Forms DataGridView-Zellen](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md)verfügbar ist.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#305](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#305)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#305](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#305)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="EditingPanelCursor">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Cursor EditingPanelCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor EditingPanelCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EditingPanelCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Cursor ^ EditingPanelCursor { System::Windows::Forms::Cursor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EditingPanelCursor : System.Windows.Forms.Cursor" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Cursor ab, der verwendet wird, wenn sich der Mauszeiger über dem <see cref="P:System.Windows.Forms.DataGridView.EditingPanel" />, jedoch nicht über dem Bearbeitungssteuerelement befindet.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.Cursor" />, der den für den Bearbeitungsbereich verwendeten Mauszeiger darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Bearbeitungsbereich ist <xref:System.Windows.Forms.Panel> das, das das Bearbeitungs Steuerelement hostet, wenn sich das <xref:System.Windows.Forms.DataGridView> Steuerelement im Bearbeitungsmodus befindet. Das eigentliche Bearbeitungs Steuerelement deckt möglicherweise nicht den gesamten Bereich des Bearbeitungsbereichs ab. In diesem Fall sollte die <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor%2A> -Implementierung den Cursor zurückgeben, der verwendet werden soll, wenn sich der Mauszeiger über dem Bereich, aber nicht über dem Steuerelement befindet. Normalerweise möchten Sie denselben Cursor zurückgeben, den das Steuerelement verwendet. Wenn Sie den Cursor ändern möchten, der angezeigt wird, wenn sich der Mauszeiger über dem Steuerelement befindet <xref:System.Windows.Forms.Control.Cursor%2A> , müssen Sie die-Eigenschaft festlegen. Sie können dies im Konstruktor der <xref:System.Windows.Forms.IDataGridViewEditingControl> -Implementierung festlegen, oder Sie können es in der <xref:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit%2A> -Implementierung festlegen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung dieses Members bereitstellt. Dieses Beispiel ist Teil eines größeren Beispiels, das in Gewusst [wie: Hosten von Steuerelementen in Windows Forms DataGridView-Zellen](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md)verfügbar ist.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#311](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#311)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#311](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#311)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.Panel" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetEditingControlFormattedValue">
      <MemberSignature Language="C#" Value="public object GetEditingControlFormattedValue (System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEditingControlFormattedValue(valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEditingControlFormattedValue (context As DataGridViewDataErrorContexts) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetEditingControlFormattedValue(System::Windows::Forms::DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="F#" Value="abstract member GetEditingControlFormattedValue : System.Windows.Forms.DataGridViewDataErrorContexts -&gt; obj" Usage="iDataGridViewEditingControl.GetEditingControlFormattedValue context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="context">Eine bitweise Kombination von <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" />-Werten, die den Kontext angibt, in dem die Daten benötigt werden.</param>
        <summary>Ruft den formatierten Wert der Zelle ab.</summary>
        <returns>Ein <see cref="T:System.Object" />, das die formatierte Version des Zelleninhalts darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der formatierte Wert stellt den Wert dar, der in der Benutzeroberfläche des Steuer Elements angezeigt wird. Der formatierte Wert kann sich im absoluten Wert und sogar im Datentyp des tatsächlichen Werts, der im Steuerelement enthalten ist, unterscheiden.  
  
 Um den formatierten Wert des-Steuer Elements festzulegen <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue%2A> , verwenden Sie die-Eigenschaft.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Durch Ändern des Rückgabewerts in der Implementierung dieser Methode wird der angezeigte Wert nicht automatisch geändert. Wenn der Wert im Bearbeitungs Steuerelement geändert wird, müssen Sie die <see cref="T:System.Windows.Forms.DataGridView" /> der Änderung benachrichtigen, indem <see langword="true" /> Sie an <see cref="M:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty(System.Boolean)" /> die-Methode übergeben.</para></block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      </Docs>
    </Member>
    <Member MemberName="PrepareEditingControlForEdit">
      <MemberSignature Language="C#" Value="public void PrepareEditingControlForEdit (bool selectAll);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareEditingControlForEdit(bool selectAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrepareEditingControlForEdit (selectAll As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PrepareEditingControlForEdit(bool selectAll);" />
      <MemberSignature Language="F#" Value="abstract member PrepareEditingControlForEdit : bool -&gt; unit" Usage="iDataGridViewEditingControl.PrepareEditingControlForEdit selectAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selectAll"><see langword="true" />, um den gesamten Inhalt der Zelle auszuwählen, andernfalls <see langword="false" />.</param>
        <summary>Bereitet die derzeit ausgewählte Zelle für die Bearbeitung vor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Zweck dieser Methode besteht darin, das Steuerelement und seinen Inhalt für die Bearbeitung vorzubereiten. Beispielsweise können Sie die Einfügemarke am Ende des Inhalts platzieren oder ändern, wie der Inhalt ausgerichtet wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="RepositionEditingControlOnValueChange">
      <MemberSignature Language="C#" Value="public bool RepositionEditingControlOnValueChange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RepositionEditingControlOnValueChange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.RepositionEditingControlOnValueChange" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RepositionEditingControlOnValueChange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RepositionEditingControlOnValueChange { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RepositionEditingControlOnValueChange : bool" Usage="System.Windows.Forms.IDataGridViewEditingControl.RepositionEditingControlOnValueChange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Zellinhalt bei jeder Änderung des Werts neu positioniert werden muss, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn der Inhalt neu positioniert werden muss, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einigen Situationen ist es erforderlich, dass sich der Zellen Inhalt bei einer Änderung des Werts neu positioniert Beispielsweise muss sich der Zellen Inhalt möglicherweise neu positionieren, wenn eine Zelle den Text umschließt und der Inhalt größer wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="IButtonControl" FullName="System.Windows.Forms.IButtonControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="09365c4fa31202c86db7c05fecc522d4fab8e3b8" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64271388" /></Metadata><TypeSignature Language="C#" Value="public interface IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IButtonControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IButtonControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IButtonControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IButtonControl" />
  <TypeSignature Language="F#" Value="type IButtonControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht es einem Steuerelement, als Schaltfläche in einem Formular zu fungieren.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Beispiel, in denen diese Schnittstelle implementiert werden kann ist Standard "und" Abbrechen-Schaltfläche verarbeiten. Standardschaltflächen werden benachrichtigt, wenn eine nicht verarbeitete EINGABETASTE eingegeben wird, für ein Formular, wie ein Dialogfeld, das geschlossen werden sollen. Auf ähnliche Weise abbrechen, die Schaltflächen werden benachrichtigt, wenn eine nicht verarbeitete ESC-Taste in einem Formular wesentlich erreicht wird, wie ein Dialogfeld, das geschlossen werden sollen.  
  
   
  
## Examples  
 Im folgende Beispiel erbt die <xref:System.Windows.Forms.ButtonBase> -Klasse und implementiert die <xref:System.Windows.Forms.IButtonControl> Schnittstelle. Implementierung wird hinzugefügt, um die <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> Eigenschaft und die <xref:System.Windows.Forms.IButtonControl.NotifyDefault%2A> und <xref:System.Windows.Forms.IButtonControl.PerformClick%2A> Methoden.  
  
 [!code-cpp[IButtonControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IButtonControl Implementation/CPP/mybutton.cpp#1)]
 [!code-csharp[IButtonControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IButtonControl Implementation/CS/mybutton.cs#1)]
 [!code-vb[IButtonControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IButtonControl Implementation/VB/mybutton.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Implementieren Sie diese Schnittstelle in Klassen, die als Schaltflächen-Steuerelemente fungieren. Die Member dieser Schnittstelle bieten die grundlegenden Funktionen für Schaltflächen, wie das Bereitstellen einer <see cref="T:System.Windows.Forms.DialogResult" /> auf das übergeordnete Formular oder die Fähigkeit zum Ausführen einer <see cref="E:System.Windows.Forms.Control.Click" /> ein einzelnes Ereignis oder fungiert als Standardschaltfläche eines Formulars.</para></block>
    <altmember cref="T:System.Windows.Forms.Button" />
    <altmember cref="T:System.Windows.Forms.Form" />
  </Docs>
  <Members>
    <Member MemberName="DialogResult">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DialogResult DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IButtonControl.DialogResult" />
      <MemberSignature Language="VB.NET" Value="Public Property DialogResult As DialogResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DialogResult DialogResult { System::Windows::Forms::DialogResult get(); void set(System::Windows::Forms::DialogResult value); };" />
      <MemberSignature Language="F#" Value="member this.DialogResult : System.Windows.Forms.DialogResult with get, set" Usage="System.Windows.Forms.IButtonControl.DialogResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert ab, der beim Klicken auf die Schaltfläche an das übergeordnete Formular zurückgegeben wird, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.DialogResult" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Formular angezeigt wird, wie ein Dialogfeld unter Verwendung der <xref:System.Windows.Forms.Form.ShowDialog%2A> -Methode und eine der Schaltflächen geklickt wird, der Schaltfläche <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> Wert wird zugewiesen, des Formulars <xref:System.Windows.Forms.Form.DialogResult%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgende Beispiel erbt die <xref:System.Windows.Forms.ButtonBase> -Klasse und implementiert die <xref:System.Windows.Forms.IButtonControl> Schnittstelle. Implementierung wird hinzugefügt, um die <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> Eigenschaft und die <xref:System.Windows.Forms.IButtonControl.NotifyDefault%2A> und <xref:System.Windows.Forms.IButtonControl.PerformClick%2A> Methoden.  
  
 [!code-cpp[IButtonControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IButtonControl Implementation/CPP/mybutton.cpp#1)]
 [!code-csharp[IButtonControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IButtonControl Implementation/CS/mybutton.cs#1)]
 [!code-vb[IButtonControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IButtonControl Implementation/VB/mybutton.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Form.AcceptButton" />
        <altmember cref="P:System.Windows.Forms.Form.CancelButton" />
        <altmember cref="P:System.Windows.Forms.Form.DialogResult" />
      </Docs>
    </Member>
    <Member MemberName="NotifyDefault">
      <MemberSignature Language="C#" Value="public void NotifyDefault (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyDefault(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IButtonControl.NotifyDefault(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub NotifyDefault (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyDefault(bool value);" />
      <MemberSignature Language="F#" Value="abstract member NotifyDefault : bool -&gt; unit" Usage="iButtonControl.NotifyDefault value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><see langword="true" />, wenn das Steuerelement als Standardschaltfläche fungiert, andernfalls <see langword="false" />.</param>
        <summary>Benachrichtigt ein Steuerelement darüber, dass es als Standardschaltfläche fungiert, wodurch dessen Darstellung und Verhalten entsprechend angepasst werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von einem übergeordneten Formular ein Steuerelement als Standardschaltfläche vornehmen aufgerufen. Standardmäßige Schaltflächen sind auf einem breiteren Rand festgelegt.  
  
   
  
## Examples  
 Im folgende Beispiel erbt die <xref:System.Windows.Forms.ButtonBase> -Klasse und implementiert die <xref:System.Windows.Forms.IButtonControl> Schnittstelle. Implementierung wird hinzugefügt, um die <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> Eigenschaft und die <xref:System.Windows.Forms.IButtonControl.NotifyDefault%2A> und <xref:System.Windows.Forms.IButtonControl.PerformClick%2A> Methoden.  
  
 [!code-cpp[IButtonControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IButtonControl Implementation/CPP/mybutton.cpp#1)]
 [!code-csharp[IButtonControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IButtonControl Implementation/CS/mybutton.cs#1)]
 [!code-vb[IButtonControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IButtonControl Implementation/VB/mybutton.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformClick">
      <MemberSignature Language="C#" Value="public void PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IButtonControl.PerformClick" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformClick ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformClick();" />
      <MemberSignature Language="F#" Value="abstract member PerformClick : unit -&gt; unit" Usage="iButtonControl.PerformClick " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generiert ein <see cref="E:System.Windows.Forms.Control.Click" />-Ereignis für das Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird aufgerufen für die Schaltfläche, die Fokus besitzt, oder für die Schaltfläche "Standard" (sofern keine andere Schaltfläche den Fokus besitzt) Wenn der Benutzer die EINGABETASTE drückt. Diese Methode wird auch aufgerufen, wenn der Benutzer die ESC-Taste drückt, wenn die Schaltfläche "Abbrechen"-Schaltfläche festgelegt ist.  
  
   
  
## Examples  
 Im folgende Beispiel erbt die <xref:System.Windows.Forms.ButtonBase> -Klasse und implementiert die <xref:System.Windows.Forms.IButtonControl> Schnittstelle. Implementierung wird hinzugefügt, um die <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> Eigenschaft und die <xref:System.Windows.Forms.IButtonControl.NotifyDefault%2A> und <xref:System.Windows.Forms.IButtonControl.PerformClick%2A> Methoden.  
  
 [!code-cpp[IButtonControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IButtonControl Implementation/CPP/mybutton.cpp#1)]
 [!code-csharp[IButtonControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IButtonControl Implementation/CS/mybutton.cs#1)]
 [!code-vb[IButtonControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IButtonControl Implementation/VB/mybutton.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.Click" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ListBox" FullName="System.Windows.Forms.ListBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="830baf65270aaf40730a7bbcd485dd59dc58561b" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659564" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListBox : System.Windows.Forms.ListControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListBox extends System.Windows.Forms.ListControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListBox" />
  <TypeSignature Language="VB.NET" Value="Public Class ListBox&#xA;Inherits ListControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListBox : System::Windows::Forms::ListControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ListControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Windows-Steuerelement zum Anzeigen einer Liste von Elementen dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListBox> Steuerelement können Sie eine Liste von Elementen, die Benutzer angezeigt, die der Benutzer auswählen können, indem Sie auf. Ein <xref:System.Windows.Forms.ListBox> Steuerelement bieten einzelne oder mehrere Auswahlmöglichkeiten, die mit der <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft. Die <xref:System.Windows.Forms.ListBox> bietet außerdem die <xref:System.Windows.Forms.ListBox.MultiColumn%2A> Eigenschaft, um die Anzeige von Elementen in Spalten statt einer einfachen vertikalen Liste von Elementen zu aktivieren. Mit dieser Option können das Steuerelement Weitere sichtbare Elemente anzeigen kann, und der Benutzer nicht mehr zu einem Element einen Bildlauf durchführen muss.  
  
 Windows-handles in der Regel die Aufgabe, zeichnen die anzuzeigende Elemente der <xref:System.Windows.Forms.ListBox>. Können Sie die <xref:System.Windows.Forms.ListBox.DrawMode%2A> -Eigenschaft und das Handle der <xref:System.Windows.Forms.ListBox.MeasureItem> und <xref:System.Windows.Forms.ListBox.DrawItem> Ereignisse, damit Sie überschreiben können, die automatische Zeichnen von Windows bietet und die Elemente selbst zu zeichnen. Sie können Ownerdrawn- <xref:System.Windows.Forms.ListBox> Steuerelementen zum Anzeigen von Elementen variabler Höhe, Bilder, oder eine andere Farbe oder die Schriftart für den Text jedes Elements in der Liste. Die <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> Eigenschaft <xref:System.Windows.Forms.ListBox.GetItemHeight%2A>, und <xref:System.Windows.Forms.ListBox.GetItemRectangle%2A> hilft Ihnen beim Zeichnen der eigenen Elemente.  
  
 Zusätzlich zum Anzeigen und Auswählen von Funktionen die <xref:System.Windows.Forms.ListBox> bietet auch Funktionen, mit denen Sie effizient Elemente hinzufügen können die <xref:System.Windows.Forms.ListBox> und Text in die Elemente der Liste zu suchen. Die <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> und <xref:System.Windows.Forms.ListBox.EndUpdate%2A> Methoden ermöglichen es Ihnen, fügen eine große Anzahl von Elementen, die die <xref:System.Windows.Forms.ListBox> ohne das Steuerelement wird jedes Mal aktualisiert wird ein Element der Liste hinzugefügt. Die <xref:System.Windows.Forms.ListBox.FindString%2A> und <xref:System.Windows.Forms.ListBox.FindStringExact%2A> Methoden ermöglichen es Ihnen, die für ein Element in der Liste zu suchen, die eine bestimmte Suchzeichenfolge enthält.  
  
 Die <xref:System.Windows.Forms.ListBox.Items%2A>, <xref:System.Windows.Forms.ListBox.SelectedItems%2A>, und <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> Eigenschaften bieten Zugriff auf die drei Auflistungen, mit denen, die <xref:System.Windows.Forms.ListBox>. Die folgende Tabelle führt die drei Auflistungen von verwendet die <xref:System.Windows.Forms.ListBox> und deren Verwendung innerhalb des Steuerelements.  
  
|Auflistungsklasse|Verwenden Sie in der <xref:System.Windows.Forms.ListBox>|  
|----------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Windows.Forms.ListBox.ObjectCollection>|Enthält alle Elemente in der <xref:System.Windows.Forms.ListBox> Steuerelement.|  
|<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>|Enthält eine Auflistung der ausgewählten Elemente also eine Teilmenge der Elemente in der <xref:System.Windows.Forms.ListBox> Steuerelement.|  
|<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>|Enthält eine Auflistung von ausgewählten Indizes, die eine Teilmenge der Indizes wird von der <xref:System.Windows.Forms.ListBox.ObjectCollection>. Geben Sie die ausgewählten Elemente werden diese Indizes.|  
  
 Die folgenden drei Beispiele zeigen die drei indizierte Auflistungen, die die <xref:System.Windows.Forms.ListBox> -Klasse unterstützt.  
  
 Die folgende Tabelle zeigt ein Beispiel, wie das <xref:System.Windows.Forms.ListBox.ObjectCollection> speichert die Elemente der <xref:System.Windows.Forms.ListBox> sowie deren Auswahlzustand in ein Beispiel für <xref:System.Windows.Forms.ListBox>.  
  
|Index|Element|Auswahlstatus im Listenfeld|  
|-----------|----------|----------------------------------------|  
|0|Objekt1|Nicht markiert|  
|1|object2|Ausgewählt|  
|2|object3|Nicht markiert|  
|3|object4|Ausgewählt|  
|4|object5|Ausgewählt|  
  
 Basierend auf den <xref:System.Windows.Forms.ListBox.ObjectCollection> in der obigen Tabelle aufgeführten, diese Tabelle zeigt, wie die <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> angezeigt würde.  
  
|Index|Element|  
|-----------|----------|  
|0|object2|  
|1|object4|  
|2|object5|  
  
 Basierend auf den <xref:System.Windows.Forms.ListBox.ObjectCollection> in der obigen Tabelle aufgeführten, diese Tabelle zeigt, wie die <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> angezeigt würde.  
  
|Index|Index des Elements|  
|-----------|-------------------|  
|0|1|  
|1|3|  
|2|4|  
  
 Die <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasse können Sie Elemente hinzufügen das <xref:System.Windows.Forms.ListBox>. Die <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> -Methode kann jedes Objekt akzeptieren, beim Hinzufügen eines Mitglieds zu den <xref:System.Windows.Forms.ListBox>. Wenn ein Objekt hinzugefügt wird die <xref:System.Windows.Forms.ListBox>, vom Steuerelement verwendet, den Text, der definiert, der <xref:System.Object.ToString%2A> -Methode des Objekts, wenn ein Membername innerhalb des Objekts wird in angegeben die <xref:System.Windows.Forms.ListControl.DisplayMember%2A> Eigenschaft. Zusätzlich zum Hinzufügen von Elementen mithilfe der <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasse, Sie auch hinzufügen können, Elemente mithilfe der <xref:System.Windows.Forms.ListControl.DataSource%2A> Eigenschaft von der <xref:System.Windows.Forms.ListControl> Klasse.  
  
> [!NOTE]
>  Wenn Sie haben eine <xref:System.Windows.Forms.ListBox>, <xref:System.Windows.Forms.ComboBox>, oder <xref:System.Windows.Forms.CheckedListBox> auf eine Basisklasse Windows Form- und möchten, ändern Sie die Zeichenfolge Sammlungen dieser Steuerelemente in einem abgeleiteten WindowsFormular-die zeichenfolgenauflistungen dieser Steuerelemente in der Windows-Basisformular müssen leer sein. Wenn die zeichenfolgenauflistungen nicht leer sind, werden sie schreibgeschützt sind und beim Ableiten von einem anderen WindowsFormular.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Windows.Forms.ListBox> Steuerelement, das mehrere Elemente in Spalten angezeigt und kann mehr als ein Element in der Liste das Steuerelement ausgewählt haben. Der Code für das Beispiel fügt 50 Elemente der <xref:System.Windows.Forms.ListBox> mithilfe der <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasse und wählt dann drei Elemente aus der Liste mithilfe der <xref:System.Windows.Forms.ListBox.SetSelected%2A> Methode. Zeigt der Code dann Werte aus den <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> Auflistung, bis die <xref:System.Windows.Forms.ListBox.SelectedItems%2A> -Eigenschaft, und die <xref:System.Windows.Forms.ListBox.SelectedIndexCollection>, bis die <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> Eigenschaft. Dieses Beispiel benötigen Sie, dass der Code befindet sich im und aufgerufen wird eine <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.ListBox" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Windows.Forms.ListBox> Steuerelement, das mehrere Elemente in Spalten angezeigt und kann mehr als ein Element in der Liste das Steuerelement ausgewählt haben. Der Code für das Beispiel fügt 50 Elemente der <xref:System.Windows.Forms.ListBox> mithilfe der <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasse und wählt dann drei Elemente aus der Liste mithilfe der <xref:System.Windows.Forms.ListBox.SetSelected%2A> Methode. Zeigt der Code dann Werte aus den <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> Auflistung, bis die <xref:System.Windows.Forms.ListBox.SelectedItems%2A> -Eigenschaft, und die <xref:System.Windows.Forms.ListBox.SelectedIndexCollection>, bis die <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> Eigenschaft. Dieses Beispiel benötigen Sie, dass der Code befindet sich im und aufgerufen wird eine <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddItemsCore">
      <MemberSignature Language="C#" Value="protected virtual void AddItemsCore (object[] value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddItemsCore(object[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.AddItemsCore(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddItemsCore (value As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddItemsCore(cli::array &lt;System::Object ^&gt; ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated.  There is no replacement.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="value">Ein Array von Objekten.</param>
        <summary>Dieser Member ist veraltet und kann nicht ersetzt werden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowSelection">
      <MemberSignature Language="C#" Value="protected override bool AllowSelection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.AllowSelection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property AllowSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool AllowSelection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Windows.Forms.ListBox" /> derzeit das Auswählen von Listenelementen ermöglicht.</summary>
        <value>
          <see langword="true" />, wenn <see cref="T:System.Windows.Forms.SelectionMode" /> nicht auf <see cref="F:System.Windows.Forms.SelectionMode.None" /> festgelegt ist, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Hintergrundfarbe für das Steuerelement ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Color" />, die die Hintergrundfarbe des Steuerelements darstellt. Der Standardwert ist der Wert der <see cref="P:System.Windows.Forms.Control.DefaultBackColor" />-Eigenschaft.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ist für diese Klasse nicht relevant.</summary>
        <value>Das Hintergrundbild des Formulars.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich die <see cref="P:System.Windows.Forms.ListBox.BackgroundImage" />-Eigenschaft der Bezeichnung ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Layout des Hintergrundbilds für eine <see cref="T:System.Windows.Forms.ListBox" /> ab, wie in der <see cref="T:System.Windows.Forms.ImageLayout" />-Enumeration definiert, oder legt dieses fest.</summary>
        <value>Einer der Werte von <see cref="T:System.Windows.Forms.ImageLayout" />. Die Werte lauten <see langword="Center" />, <see langword="None" />, <see langword="Stretch" />, <see langword="Tile" /> oder <see langword="Zoom" />. Der Standardwert lautet <see langword="Center" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der angegebene Enumerationswert ist nicht vorhanden.</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich die <see cref="P:System.Windows.Forms.ListBox.BackgroundImageLayout" />-Eigenschaft ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erhält die Leistung aufrecht, während der <see cref="T:System.Windows.Forms.ListBox" /> Elemente einzeln hinzugefügt werden, indem das Zeichnen des Steuerelements bis zum Aufruf der <see cref="M:System.Windows.Forms.ListBox.EndUpdate" />-Methode verhindert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die bevorzugte Methode zum Hinzufügen mehrerer Elemente zu der <xref:System.Windows.Forms.ListBox> ist die Verwendung der <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasse (über die <xref:System.Windows.Forms.ListBox.Items%2A> Eigenschaft von der <xref:System.Windows.Forms.ListBox>). Dadurch können Sie ein Array von Elementen der Liste in einem einzigen Vorgang hinzuzufügen. Allerdings, wenn Sie den hinzuzufügenden Elemente einzeln mithilfe der <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection> -Klasse, die Sie verwenden die <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> Methode, um zu verhindern, dass das Steuerelement neu gezeichnet der <xref:System.Windows.Forms.ListBox> jedes Mal ein Element der Liste hinzugefügt. Nach dem Sie die Aufgabe beim Hinzufügen von Elementen der Liste abgeschlossen haben, rufen Sie die <xref:System.Windows.Forms.ListBox.EndUpdate%2A> Methode zum Aktivieren der <xref:System.Windows.Forms.ListBox> zum erneuten Zeichnen verwendet. Diese Vorgehensweise beim Hinzufügen von Elementen kann Flackern zeichnen die <xref:System.Windows.Forms.ListBox> Wenn eine große Anzahl von Elementen der Liste hinzugefügt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird mit der <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> und <xref:System.Windows.Forms.ListBox.EndUpdate%2A> Methoden beim Hinzufügen von 5.000 Elemente, die eine <xref:System.Windows.Forms.ListBox>. Dieses Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox> Steuerelement, mit dem Namen `listBox1`, wurde hinzugefügt, um eine <xref:System.Windows.Forms.Form> und, die diese Methode ist innerhalb des Formulars gespeichert und daraus aufgerufen.  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.EndUpdate" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ des Rahmens ab, der um <see cref="T:System.Windows.Forms.ListBox" /> gezeichnet wird, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.BorderStyle" />-Werte. Der Standardwert ist <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der Wert ist keiner der <see cref="T:System.Windows.Forms.BorderStyle" />-Werte.</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="ClearSelected">
      <MemberSignature Language="C#" Value="public void ClearSelected ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearSelected() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ClearSelected" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearSelected ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearSelected();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Hebt die Auswahl sämtlicher Elemente in der <see cref="T:System.Windows.Forms.ListBox" /> auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Aufrufen dieser Methode entspricht dem Festlegen der <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft, um die negative Eins (1). Sie können diese Methode verwenden, schnell auf alle Elemente in der Liste aufheben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft mit der <xref:System.Windows.Forms.ListBox.TopIndex%2A> Eigenschaft, um das aktuell ausgewählte Element an den Anfang der Liste der Elemente in den Anzeigebereich des Verschieben der <xref:System.Windows.Forms.ListBox>. Das Beispiel veranschaulicht, wie Entfernen von Elementen, die mit der <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType> Klasse sowie zum Deaktivieren Sie alle Artikel Formatauswahl mithilfe der <xref:System.Windows.Forms.ListBox.ClearSelected%2A> Methode. Der Code wird zuerst das aktuell ausgewählte Element verschoben, der <xref:System.Windows.Forms.ListBox> an den Anfang der Liste. Der Code entfernt alle Elemente, bevor Sie das aktuell ausgewählte Element, und löscht die Auswahl aller Optionen in der <xref:System.Windows.Forms.ListBox>. Dieses Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox> mit Elementen zu einem Formular hinzugefügt und ausgewählt, dass ein Element aktuell die <xref:System.Windows.Forms.ListBox>.  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn auf das Steuerelement <see cref="T:System.Windows.Forms.ListBox" /> geklickt wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidth">
      <MemberSignature Language="C#" Value="public int ColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ColumnWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ColumnWidth { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Spaltenbreite in einer mehrspaltigen <see cref="T:System.Windows.Forms.ListBox" /> ab oder legt diese fest.</summary>
        <value>Die Breite der einzelnen Spalten des Steuerelements in Pixel. Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie den Wert auf 0 (null) festlegen, wird eine Standardbreite für jede Spalte zugewiesen. Wenn die <xref:System.Windows.Forms.ListBox> eine mehrspaltige <xref:System.Windows.Forms.ListBox>, diese Eigenschaft gibt die aktuelle Breite der einzelnen Spalten in der Liste zurück. Sie können diese Eigenschaft verwenden, um sicherzustellen, dass jede Spalte in einem mehrspaltigen <xref:System.Windows.Forms.ListBox> dessen Elemente richtig angezeigt werden können.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht eine einfache zweispaltige <xref:System.Windows.Forms.ListBox>.  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Eigenschaft ist ein Wert zugewiesen, der kleiner als 0 ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateItemCollection">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ListBox.ObjectCollection CreateItemCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.ListBox/ObjectCollection CreateItemCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.CreateItemCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateItemCollection () As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::ListBox::ObjectCollection ^ CreateItemCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine neue Instanz der Elementauflistung.</summary>
        <returns>Eine <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />, die die neue Elementauflistung darstellt.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Sie können dies in den abgeleiteten Klassen Geben Sie eine andere Auflistung zum Speichern Ihrer Elemente überschreiben.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die benötigten Erstellungsparameter ab, wenn das Steuerelementhandle erstellt wird.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.CreateParams" />-Eigenschaft, die die erforderlichen Erstellungsparameter enthält, wenn das Handle für das Steuerelement erstellt wird.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für den Betrieb mit nicht verwaltetem Code. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CustomTabOffsets">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.IntegerCollection CustomTabOffsets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/IntegerCollection CustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomTabOffsets As ListBox.IntegerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::IntegerCollection ^ CustomTabOffsets { System::Windows::Forms::ListBox::IntegerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+IntegerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Breite der Registerkarten zwischen den Elementen in der <see cref="T:System.Windows.Forms.ListBox" /> ab.</summary>
        <value>Eine Auflistung von ganzen Zahlen, die die Breiten der Registerkarten darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Array von Ganzzahlen enthält die Tabstopps in aufsteigender Reihenfolge.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItemHeight">
      <MemberSignature Language="C#" Value="public const int DefaultItemHeight = 13;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 DefaultItemHeight = (13)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.DefaultItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultItemHeight As Integer  = 13" />
      <MemberSignature Language="C++ CLI" Value="public: int DefaultItemHeight = 13;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>13</MemberValue>
      <Docs>
        <summary>Gibt die Standardelementhöhe für eine Ownerdrawn-<see cref="T:System.Windows.Forms.ListBox" /> an.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standardgröße des Steuerelements ab.</summary>
        <value>Die Standard-<see cref="T:System.Drawing.Size" /> des Steuerelements.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich ein Darstellungsaspekt eines Ownerdrawn-<see cref="T:System.Windows.Forms.ListBox" /> ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird durch ein vom Besitzer gezeichnetes verwendet <xref:System.Windows.Forms.ListBox>. Das Ereignis wird nur ausgelöst, wenn die <xref:System.Windows.Forms.ListBox.DrawMode%2A> -Eigenschaftensatz auf `DrawMode.OwnerDrawFixed` oder `DrawMode.OwnerDrawVariable`. Verwenden Sie dieses Ereignis zum Ausführen der Aufgaben zum Zeichnen der Elemente in der <xref:System.Windows.Forms.ListBox>. Wenn Sie ein Element mit variabler Größe haben (bei der <xref:System.Windows.Forms.ListBox.DrawMode%2A> -Eigenschaftensatz auf `DrawMode.OwnerDrawVariable`), vor dem Zeichnen eines Elements der <xref:System.Windows.Forms.ListBox.MeasureItem> Ereignis wird ausgelöst. Können, erstellen Sie einen Ereignishandler für das <xref:System.Windows.Forms.ListBox.MeasureItem> Ereignis, um die Größe für das Element angeben, die Sie im Ereignishandler für das Zeichnen soll die <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen von Ownerdrawn- <xref:System.Windows.Forms.ListBox> Elemente. Der Code verwendet die <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft, um anzugeben, dass die gezeichneten Elemente eine feste Größe und die <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis zeichnet jedes Elements in der <xref:System.Windows.Forms.ListBox>. Der Beispielcode verwendet, die Eigenschaften und Methoden von der <xref:System.Windows.Forms.DrawItemEventArgs> Klasse als Parameter übergeben werden, an den Ereignishandler, um die Elemente zu zeichnen. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox> -Steuerelement namens `listBox1` hinzugefügt wurde, ein Formular und die <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis erfolgt durch die im Beispielcode definierten Ereignishandler. Im Beispiel erfordert auch, dass Elemente hinzugefügt wurden die <xref:System.Windows.Forms.ListBox> mit dem Text "Apple", "Orange" und "Plum" in dieser Reihenfolge.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DrawMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DrawMode DrawMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DrawMode DrawMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DrawMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DrawMode As DrawMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DrawMode DrawMode { System::Windows::Forms::DrawMode get(); void set(System::Windows::Forms::DrawMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Zeichnungsmodus für das Steuerelement ab oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.DrawMode" />-Werte, der den Modus zum Zeichnen der Elemente für das Steuerelement darstellt. Der Standardwert ist <see langword="DrawMode.Normal" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen von Ownerdrawn- <xref:System.Windows.Forms.ListBox> Elemente. Der Code verwendet die <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft, um anzugeben, dass die gezeichneten Elemente eine feste Größe und die <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis zeichnet jedes Elements in der <xref:System.Windows.Forms.ListBox>. Der Beispielcode verwendet, die Eigenschaften und Methoden von der <xref:System.Windows.Forms.DrawItemEventArgs> Klasse als Parameter übergeben werden, an den Ereignishandler, um die Elemente zu zeichnen. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox> -Steuerelement namens `listBox1` hinzugefügt wurde, ein Formular und die <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis erfolgt durch die im Beispielcode definierten Ereignishandler. Im Beispiel erfordert auch, dass Elemente hinzugefügt wurden die <xref:System.Windows.Forms.ListBox> mit dem Text "Apple", "Orange" und "Plum" in dieser Reihenfolge.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der Wert, der der Eigenschaft zugewiesen wurde, ist kein Member der <see cref="T:System.Windows.Forms.DrawMode" />-Enumeration.</exception>
        <exception cref="T:System.ArgumentException">Eine mehrspaltige <see cref="T:System.Windows.Forms.ListBox" /> darf keine Höhe mit variabler Größe aufweisen.</exception>
        <altmember cref="T:System.Windows.Forms.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Nimmt das Zeichnen des <see cref="T:System.Windows.Forms.ListBox" />-Steuerelements wieder auf, nachdem es durch die <see cref="M:System.Windows.Forms.ListBox.BeginUpdate" />-Methode ausgesetzt wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die bevorzugte Methode zum Hinzufügen von Elementen zu der <xref:System.Windows.Forms.ListBox> ist die Verwendung der <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasse (über die <xref:System.Windows.Forms.ListBox.Items%2A> Eigenschaft von der <xref:System.Windows.Forms.ListBox>). Dadurch können Sie der Liste ein Array von Elementen auf einmal hinzuzufügen. Allerdings, wenn Sie den hinzuzufügenden Elemente einzeln mithilfe der <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection> -Klasse, die Sie verwenden die <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> Methode, um zu verhindern, dass das Steuerelement neu gezeichnet der <xref:System.Windows.Forms.ListBox> jedes Mal ein Element der Liste hinzugefügt. Nach dem Sie die Aufgabe beim Hinzufügen von Elementen der Liste abgeschlossen haben, rufen Sie die <xref:System.Windows.Forms.ListBox.EndUpdate%2A> Methode zum Aktivieren der <xref:System.Windows.Forms.ListBox> zum erneuten Zeichnen verwendet. Diese Vorgehensweise beim Hinzufügen von Elementen kann Flackern zeichnen die <xref:System.Windows.Forms.ListBox> Wenn eine große Anzahl von Elementen der Liste hinzugefügt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird mit der <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> und <xref:System.Windows.Forms.ListBox.EndUpdate%2A> Methoden beim Hinzufügen von 5.000 Elemente, die eine <xref:System.Windows.Forms.ListBox>. Dieses Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox> Steuerelement, mit dem Namen `listBox1`, wurde hinzugefügt, um eine <xref:System.Windows.Forms.Form> und, die diese Methode ist innerhalb des Formulars gespeichert und daraus aufgerufen.  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.BeginUpdate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindString">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sucht das erste Element in der <see cref="T:System.Windows.Forms.ListBox" />, das mit der angegebenen Zeichenfolge beginnt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindString (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindString(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Der zu suchende Text.</param>
        <summary>Sucht das erste Element in der <see cref="T:System.Windows.Forms.ListBox" />, das mit der angegebenen Zeichenfolge beginnt.</summary>
        <returns>Der nullbasierte Index des ersten gefundenen Elements. Wenn keine Übereinstimmung gefunden wurde, wird <see langword="ListBox.NoMatches" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von dieser Methode durchgeführte Suche ist nicht in der Groß-/Kleinschreibung beachtet. Die Wörter gesucht, die den angegebenen Suchkriterien Zeichenfolgenparameter teilweise entsprechen `s`. Sie können diese Methode verwenden, um das erste Element zu suchen, die der angegebenen Zeichenfolge übereinstimmt. Sie können dann Aufgaben wie entfernen das Element, das Suchen von Text mit enthält, die <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> -Methode oder den Text des Elements ändern. Wenn Sie den angegebenen Text gefunden haben, wenn Sie für andere Instanzen des Texts im suchen möchten die <xref:System.Windows.Forms.ListBox>, können Sie die Version des der <xref:System.Windows.Forms.ListBox.FindString%2A> Methode, die einen Parameter zum Angeben eines Startindex in bereitstellt der <xref:System.Windows.Forms.ListBox>. Wenn Sie eine Suche nach einer Übereinstimmung exakt anstelle einer teilweisen Übereinstimmung durchführen möchten, verwenden Sie die <xref:System.Windows.Forms.ListBox.FindStringExact%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.FindString%2A> Methode zum Suchen nach der ersten Instanz einer Zeichenfolge in eine <xref:System.Windows.Forms.ListBox>. Wenn keine Elemente gefunden werden, die die Suchzeichenfolge entsprechen <xref:System.Windows.Forms.ListBox.FindString%2A> gibt-1 zurück, Wert und das Beispiel zeigt eine <xref:System.Windows.Forms.MessageBox>. Wenn kein Element gefunden wird, entspricht den Suchtext ein, um das Beispiel verwendet die <xref:System.Windows.Forms.ListBox.SetSelected%2A> aufzurufende Methode wählen Sie das Element in der <xref:System.Windows.Forms.ListBox>.  
  
 [!code-cpp[ListBox.FindString2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert des <paramref name="s" />-Parameters ist kleiner als -1 oder größer oder gleich der Elementanzahl.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindString (s As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindString(System::String ^ s, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Der zu suchende Text.</param>
        <param name="startIndex">Der nullbasierte Index des Elements vor dem ersten zu durchsuchenden Element. Legen Sie -1 fest, um die Suche am Anfang des Steuerelements zu beginnen.</param>
        <summary>Sucht das erste Element in der <see cref="T:System.Windows.Forms.ListBox" />, das mit der angegebenen Zeichenfolge beginnt. Die Suche beginnt an einem bestimmten Startindex.</summary>
        <returns>Der nullbasierte Index des ersten gefundenen Elements. Wenn keine Übereinstimmung gefunden wurde, wird <see langword="ListBox.NoMatches" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von dieser Methode durchgeführte Suche ist nicht in der Groß-/Kleinschreibung beachtet. Die Wörter gesucht, die den angegebenen Suchkriterien Zeichenfolgenparameter teilweise entsprechen `s`. Sie können diese Methode verwenden, um für das erste Element zu suchen, die die angegebene Zeichenfolge an der angegebenen Startindex in die Liste der Elemente entspricht der <xref:System.Windows.Forms.ListBox>. Sie können dann Aufgaben wie entfernen das Element, das Suchen von Text mit enthält, die <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> -Methode oder den Text des Elements ändern. Diese Methode wird normalerweise verwendet, nach ein Aufruf der Version dieser Methode, die nicht mit einen Startindex angibt. Wenn ein erstes Element in der Liste gefunden wurde, diese Methode dient normalerweise zum weitere Instanzen des Suchtexts zu suchen, durch Angabe die Indexposition in der `startIndex` Parameter des Elements nach dem die erste gefundene Instanz des Suchtexts. Wenn Sie eine Suche nach einer Übereinstimmung exakt anstelle einer teilweisen Übereinstimmung durchführen möchten, verwenden Sie die <xref:System.Windows.Forms.ListBox.FindStringExact%2A> Methode.  
  
> [!NOTE]
>  Wenn erreicht die Suche am Ende der <xref:System.Windows.Forms.ListBox>, weiterhin Suche vom Anfang der <xref:System.Windows.Forms.ListBox> wieder auf das Element, das gemäß der `startIndex` Parameter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.FindString%2A> Methode, um alle Instanzen des Suchtexts in den Elementen der Suchen der <xref:System.Windows.Forms.ListBox>. Im Beispiel wird die Version der <xref:System.Windows.Forms.ListBox.FindString%2A> -Methode, die Ihnen ermöglicht, eine Suche aus dem kontinuierlicher Suchen aller Elemente im Angeben der <xref:System.Windows.Forms.ListBox>. Außerdem wird veranschaulicht, wie Sie ermitteln, wann die <xref:System.Windows.Forms.ListBox.FindString%2A> Methode beginnt die Suche vom Anfang der Liste nach Erreichen des unteren Rand der Liste der Elemente, um eine rekursive Suche zu verhindern. Sobald Elemente, in gefunden werden der <xref:System.Windows.Forms.ListBox>, sie ausgewählt werden, mithilfe der <xref:System.Windows.Forms.ListBox.SetSelected%2A> Methode.  
  
 [!code-cpp[ListBox.FindString#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="startIndex" />-Parameter ist kleiner als 0 (null) bzw. größer oder gleich dem Wert der <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" />-Eigenschaft der <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />-Klasse.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindStringExact">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sucht das erste Element in <see cref="T:System.Windows.Forms.ListBox" />, das mit der angegebenen Zeichenfolge genau übereinstimmt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStringExact (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindStringExact(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Der zu suchende Text.</param>
        <summary>Sucht das erste Element in <see cref="T:System.Windows.Forms.ListBox" />, das mit der angegebenen Zeichenfolge genau übereinstimmt.</summary>
        <returns>Der nullbasierte Index des ersten gefundenen Elements. Wenn keine Übereinstimmung gefunden wurde, wird <see langword="ListBox.NoMatches" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von dieser Methode durchgeführte Suche ist nicht in der Groß-/Kleinschreibung beachtet. Die Suche nach einer genauen Übereinstimmung zu den Wörtern in der Zeichenfolgenparameter Suche angegebenen sucht `s`. Sie können diese Methode verwenden, um das erste Element zu suchen, die der angegebenen Zeichenfolge übereinstimmt. Sie können dann Aufgaben wie entfernen das Element, das Suchen von Text mit enthält, die <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> -Methode oder den Text des Elements ändern. Wenn Sie den angegebenen Text gefunden haben, wenn Sie für andere Instanzen des Texts im suchen möchten die <xref:System.Windows.Forms.ListBox>, können Sie die Version des der <xref:System.Windows.Forms.ListBox.FindStringExact%2A> Methode, die einen Parameter zum Angeben eines Startindex in bereitstellt der <xref:System.Windows.Forms.ListBox>. Wenn Sie die Suche nach anstelle einer Übereinstimmung exakt durchführen möchten, verwenden Sie die <xref:System.Windows.Forms.ListBox.FindString%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.FindStringExact%2A?displayProperty=nameWithType> Methode zum Suchen einer <xref:System.Windows.Forms.ListBox> -Steuerelement für ein Element, das genau mit eine angegebene Zeichenfolge übereinstimmt. Wenn keine Elemente gefunden werden, die die Suchzeichenfolge entsprechen <xref:System.Windows.Forms.ListBox.FindStringExact%2A> gibt-1 zurück, Wert und das Beispiel zeigt eine <xref:System.Windows.Forms.MessageBox>. Wenn kein Element gefunden wird, entspricht den Suchtext ein, um das Beispiel verwendet die <xref:System.Windows.Forms.ListBox.SetSelected%2A> aufzurufende Methode wählen Sie das Element in der <xref:System.Windows.Forms.ListBox>.  
  
 [!code-cpp[ListBox.FindStringExact#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStringExact (s As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindStringExact(System::String ^ s, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Der zu suchende Text.</param>
        <param name="startIndex">Der nullbasierte Index des Elements vor dem ersten zu durchsuchenden Element. Legen Sie -1 fest, um die Suche am Anfang des Steuerelements zu beginnen.</param>
        <summary>Sucht das erste Element in <see cref="T:System.Windows.Forms.ListBox" />, das mit der angegebenen Zeichenfolge genau übereinstimmt. Die Suche beginnt an einem bestimmten Startindex.</summary>
        <returns>Der nullbasierte Index des ersten gefundenen Elements. Wenn keine Übereinstimmung gefunden wurde, wird <see langword="ListBox.NoMatches" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von dieser Methode durchgeführte Suche ist nicht in der Groß-/Kleinschreibung beachtet. Die Wörter gesucht, die genau der Zeichenfolge-Parameter angegebenen Suchkriterien entsprechen `s`. Sie können diese Methode verwenden, um für das erste Element zu suchen, die die angegebene Zeichenfolge an der angegebenen Startindex in die Liste der Elemente entspricht der <xref:System.Windows.Forms.ListBox>. Sie können dann Aufgaben wie entfernen das Element, das den Suchtext, mithilfe enthält der <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> Methode oder den Text des Elements ändern. Diese Methode wird normalerweise verwendet, nach ein Aufruf der Version dieser Methode, die nicht mit einen Startindex angibt. Wenn ein erstes Element in der Liste gefunden wurde, diese Methode dient normalerweise zum weitere Instanzen des Suchtexts zu suchen, durch Angabe die Indexposition in der `startIndex` Parameter des Elements nach dem die erste gefundene Instanz des Suchtexts. Wenn Sie eine Suche nach anstelle einer Übereinstimmung exakt durchführen möchten, verwenden Sie die <xref:System.Windows.Forms.ListBox.FindString%2A> Methode.  
  
> [!NOTE]
>  Wenn erreicht die Suche am Ende der <xref:System.Windows.Forms.ListBox>, weiterhin Suche vom Anfang der <xref:System.Windows.Forms.ListBox> wieder auf das Element, das gemäß der `startIndex` Parameter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.FindStringExact%2A> Methode zum Suchen nach allen Elementen in einem <xref:System.Windows.Forms.ListBox> exakt mit den angegebenen Suchtext übereinstimmen. Im Beispiel wird die Version der <xref:System.Windows.Forms.ListBox.FindStringExact%2A> -Methode, die Ihnen ermöglicht, eine Suche aus dem kontinuierlicher Suchen aller Elemente im Angeben der <xref:System.Windows.Forms.ListBox>. Außerdem wird veranschaulicht, wie Sie ermitteln, wann die <xref:System.Windows.Forms.ListBox.FindStringExact%2A> Methode beginnt die Suche vom Anfang der Liste nach Erreichen des unteren Rand der Liste der Elemente, um eine rekursive Suche zu verhindern. Sobald Elemente, in gefunden werden der <xref:System.Windows.Forms.ListBox>, sie ausgewählt werden, mithilfe der <xref:System.Windows.Forms.ListBox.SetSelected%2A> Methode.  
  
 [!code-cpp[ListBox.FindStringExact2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="startIndex" />-Parameter ist kleiner als 0 (null) bzw. größer oder gleich dem Wert der <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" />-Eigenschaft der <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />-Klasse.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Schriftart für die Anzeige von Text im Steuerelement ab oder legt diese fest.</summary>
        <value>Der <see cref="T:System.Drawing.Font" />, der auf den Text angewendet werden soll, der im Steuerelement angezeigt wird. Der Standardwert ist der Wert der <see cref="P:System.Windows.Forms.Control.DefaultFont" />-Eigenschaft.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Vordergrundfarbe des Steuerelements ab oder legt diese fest.</summary>
        <value>Die Vordergrund-<see cref="T:System.Drawing.Color" /> des Steuerelements. Der Standardwert ist der Wert der <see cref="P:System.Windows.Forms.Control.DefaultForeColor" />-Eigenschaft.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemHeight">
      <MemberSignature Language="C#" Value="public int GetItemHeight (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetItemHeight(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemHeight (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetItemHeight(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements, dessen Höhe zurückgegeben werden soll.</param>
        <summary>Gibt die Höhe eines Elements in der <see cref="T:System.Windows.Forms.ListBox" /> zurück.</summary>
        <returns>Die Höhe des angegebenen Elements in Pixel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft nicht festgelegt ist, um `DrawMode.OwnerDrawVariable`, der Wert des Indexparameters wird ignoriert, da alle Elemente in einer standardmäßigen <xref:System.Windows.Forms.ListBox> haben die gleiche Größe. Sie können diese Eigenschaft verwenden, wenn Sie ein vom Besitzer gezeichnetes verwenden <xref:System.Windows.Forms.ListBox> zur Bestimmung der Größe eines Elements innerhalb der <xref:System.Windows.Forms.ListBox>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der angegebene Wert des <paramref name="index" />-Parameters ist kleiner als 0 (null) oder größer als die Elementanzahl.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetItemRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRectangle (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRectangle(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemRectangle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRectangle (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRectangle(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements, dessen umschließendes Rechteck zurückgegeben werden soll.</param>
        <summary>Gibt das umschließende Rechteck für ein Element in <see cref="T:System.Windows.Forms.ListBox" /> zurück.</summary>
        <returns>Ein <see cref="T:System.Drawing.Rectangle" />, das das umschließende Rechteck für das angegebene Element darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das Element im angegebenen der `index` Parameter ist nicht sichtbar, die von dieser Methode zurückgegebene Rechteck außerhalb des sichtbaren Bereichs des Steuerelements. Sie können diese Methode verwenden, um zu bestimmen, die Größe und Position eines Elements in der Liste. Um die Höhe eines Elements zu erhalten, insbesondere eine ownerdrawn-Listenelements mit variabler Höhe, können Sie die <xref:System.Windows.Forms.ListBox.GetItemHeight%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als 0 (null) bzw. größer oder gleich dem Wert der <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" />-Eigenschaft der <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />-Klasse.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetScaledBounds (bounds As Rectangle, factor As SizeF, specified As BoundsSpecified) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Drawing::Rectangle GetScaledBounds(System::Drawing::Rectangle bounds, System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="bounds">Ein <see cref="T:System.Drawing.Rectangle" />, das den Bereich angibt, für den die Anzeigebegrenzungen abgerufen werden sollen.</param>
        <param name="factor">Die Höhe und Breite der Begrenzungen des Steuerelements.</param>
        <param name="specified">Einer der Werte von <see cref="T:System.Windows.Forms.BoundsSpecified" />, die die Grenzen des Steuerelements angeben, die beim Definieren seiner Größe und Position anzugeben sind.</param>
        <summary>Ruft die Begrenzungen ab, innerhalb derer die <see cref="T:System.Windows.Forms.ListBox" /> skaliert wird.</summary>
        <returns>Ein <see cref="T:System.Drawing.Rectangle" />, das die Begrenzungen darstellt, innerhalb derer das Steuerelement skaliert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListBox> -Klasse überschreibt die <xref:System.Windows.Forms.Control.GetScaledBounds%2A?displayProperty=nameWithType> Methode, um sicherzustellen, dass die angeforderte Höhe anstelle der aktuellen Höhe skaliert wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelected">
      <MemberSignature Language="C#" Value="public bool GetSelected (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetSelected(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetSelected(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSelected (index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetSelected(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements, der bestimmt, ob dieses ausgewählt ist.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob das angegebene Element ausgewählt ist.</summary>
        <returns>
          <see langword="true" />, wenn das angegebene Element derzeit in der <see cref="T:System.Windows.Forms.ListBox" /> ausgewählt ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Methode verwenden, können Sie schnell feststellen, ob ein angegebenes Element ausgewählt ist. Diese Methode ist nützlich, wenn ein bestimmter Vorgang ausgeführt werden, wenn ein bestimmtes Element in einer Mehrfachauswahl muss <xref:System.Windows.Forms.ListBox> ausgewählt ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.GetSelected%2A> Methode, um zu bestimmen, die Elemente in einem <xref:System.Windows.Forms.ListBox> wählen Sie die Elemente, die nicht ausgewählt werden, und deaktivieren die ausgewählten Elemente ausgewählt sind. Auch das Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft zum Aktivieren einer <xref:System.Windows.Forms.ListBox> jeweils mehr als eine ausgewählte Element und verwendet die <xref:System.Windows.Forms.ListBox.Sorted%2A> veranschaulicht, wie Sie Elemente in der Eigenschaft eine <xref:System.Windows.Forms.ListBox> automatisch. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox>mit dem Namen `listBox1`, auf einem Formular hinzugefügt wurde die `InitializeMyListBox` im Beispiel definierte Methode wird aufgerufen, aus der <xref:System.Windows.Forms.Form.Load> -Ereignis des Formulars.  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als 0 (null) bzw. größer oder gleich dem Wert der <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" />-Eigenschaft der <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />-Klasse.</exception>
      </Docs>
    </Member>
    <Member MemberName="HorizontalExtent">
      <MemberSignature Language="C#" Value="public int HorizontalExtent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HorizontalExtent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalExtent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HorizontalExtent { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Breite ab, innerhalb der mit einer horizontalen Schiebeleiste einer <see cref="T:System.Windows.Forms.ListBox" /> Bildläufe durchgeführt werden können, oder legt diese fest.</summary>
        <value>Die Breite in Pixel, innerhalb der mit der horizontalen Schiebeleiste im Steuerelement Bildläufe durchgeführt werden können. Der Standardwert ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt einen nützlich Wert nur, wenn die <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> -Eigenschaftensatz auf `true`. Wenn die Breite der <xref:System.Windows.Forms.ListBox> ist kleiner als der Wert dieser Eigenschaft, die horizontale Bildlaufleiste horizontal Verschiebt Elemente in der <xref:System.Windows.Forms.ListBox>. Wenn die Breite des der <xref:System.Windows.Forms.ListBox> ist dieser Wert größer oder gleich die horizontalen Bildlaufleiste wird ausgeblendet. Der Wert dieser Eigenschaft ist nicht dynamisch vom aktualisiert die <xref:System.Windows.Forms.ListBox>. Diese Eigenschaft ist nützlich, wenn die Elemente der <xref:System.Windows.Forms.ListBox> ownerdrawn sind. Z. B. wenn ownerdrawn-Elemente von der <xref:System.Windows.Forms.ListBox> 200 Pixel breit, aber die <xref:System.Windows.Forms.ListBox> beträgt 60 Pixel breit, die <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> Eigenschaft müsste auf 200 festgelegt werden, um den sichtbaren Bereich des Steuerelements über dem rechten Rand der Elemente einen Bildlauf.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> und <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> Eigenschaften eine horizontale Bildlaufleiste angezeigt, die alle Elementtext im zeigt die <xref:System.Windows.Forms.ListBox> Steuerelement. Das Beispiel verwendet außerdem die <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> Eigenschaft, um sicherzustellen, dass Elemente nicht teilweise aufgrund der Größe des angezeigt werden die <xref:System.Windows.Forms.ListBox> Steuerelement. Dieses Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox> Steuerelement, mit dem Namen `listBox1`, zu einem Formular hinzugefügt wurde.  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollbar">
      <MemberSignature Language="C#" Value="public bool HorizontalScrollbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HorizontalScrollbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalScrollbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HorizontalScrollbar { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob im Steuerelement eine horizontale Schiebeleiste angezeigt wird, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, um eine horizontale Schiebeleiste im Steuerelement anzuzeigen, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> Eigenschaft bestimmt, ob die <xref:System.Windows.Forms.ListBox> sollte eine horizontale Schiebeleiste angezeigt Leiste, wenn die Breite der Elemente innerhalb der <xref:System.Windows.Forms.ListBox> dem rechten Rand des Steuerelements hinausgehen. Wenn diese Eigenschaft festgelegt wird, um `true`, die Bildlaufleiste wird automatisch angezeigt, basierend auf der Breite der Elemente in der <xref:System.Windows.Forms.ListBox>. Wenn die <xref:System.Windows.Forms.ListBox> ist ein vom Besitzer gezeichnetes <xref:System.Windows.Forms.ListBox>, um eine horizontale Bildlaufleiste ordnungsgemäß anzuzeigen müssen Sie festlegen der <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> und <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> Eigenschaften eine horizontale Bildlaufleiste angezeigt, die alle Elementtext im zeigt die <xref:System.Windows.Forms.ListBox> Steuerelement. Das Beispiel verwendet außerdem die <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> Eigenschaft, um sicherzustellen, dass Elemente nicht teilweise aufgrund der Größe des angezeigt werden die <xref:System.Windows.Forms.ListBox> Steuerelement. Dieses Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox> Steuerelement, mit dem Namen `listBox1`, zu einem Formular hinzugefügt wurde.  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexFromPoint">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt den nullbasierten Index des Elements an den angegebenen Koordinaten zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexFromPoint (p As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexFromPoint(System::Drawing::Point p);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">Ein <see cref="T:System.Drawing.Point" />-Objekt, das die Koordinaten zum Abrufen des Elementindexes enthält.</param>
        <summary>Gibt den nullbasierten Index des Elements an den angegebenen Koordinaten zurück.</summary>
        <returns>Der nullbasierte Index des an den angegebenen Koordinaten gefundenen Elements. Wenn keine Übereinstimmung gefunden wurde, wird <see langword="ListBox.NoMatches" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode können Sie bestimmen, welches Element an einer bestimmten Stelle innerhalb des Steuerelements befindet. Sie können diese Methode verwenden, um zu bestimmen, welches Element in der Liste ausgewählt wird, wenn ein Benutzer klickt der <xref:System.Windows.Forms.ListBox>. Die Position des Cursors kann bestimmt und übergeben der `p` Parameter von der <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methode, um zu ermitteln, welchem Element der Benutzer die Maus über geklickt. Anschließend können Sie ein Kontextmenü für den Benutzer für Aufgaben und Funktionen basierend auf dem bestimmten Element anzeigen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Drag & Drop-Vorgänge mithilfe einer <xref:System.Windows.Forms.ListBox> Steuerelements die Elemente in ablegen enthält eine <xref:System.Windows.Forms.RichTextBox> Steuerelement. Der Konstruktor des Formulars legt die <xref:System.Windows.Forms.RichTextBox.AllowDrop%2A> Eigenschaft `true` zum Aktivieren von Drag & Drop-Vorgänge in auftreten der <xref:System.Windows.Forms.RichTextBox>. Im Beispiel wird die <xref:System.Windows.Forms.Control.MouseDown> -Ereignis für die <xref:System.Windows.Forms.ListBox> Starten des Ziehvorgangs wird durch Aufrufen der <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode. Im Beispiel wird die <xref:System.Windows.Forms.Control.DragEnter> Ereignis, um zu bestimmen, ob ein Element gezogen wird, in der <xref:System.Windows.Forms.RichTextBox> ist ein gültiger Datentyp. Die <xref:System.Windows.Forms.Control.DragDrop> Ereignis führt das eigentliche Ablegen eines gezogenen Elements in der <xref:System.Windows.Forms.RichTextBox> Steuerelement an der aktuellen Cursorposition innerhalb der <xref:System.Windows.Forms.RichTextBox>. Dieses Beispiel erfordert, dass die <xref:System.Windows.Forms.Control.DragDrop> und <xref:System.Windows.Forms.Control.DragEnter> Ereignisse an die Ereignishandler, die im Beispiel definierte angeschlossen wurden.  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexFromPoint (x As Integer, y As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexFromPoint(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Die x-Koordinate der zu suchenden Position.</param>
        <param name="y">Die y-Koordinate der zu suchenden Position.</param>
        <summary>Gibt den nullbasierten Index des Elements an den angegebenen Koordinaten zurück.</summary>
        <returns>Der nullbasierte Index des an den angegebenen Koordinaten gefundenen Elements. Wenn keine Übereinstimmung gefunden wurde, wird <see langword="ListBox.NoMatches" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht Ihnen, welches Element zu bestimmen, die an einer bestimmten Stelle innerhalb des Steuerelements befindet. Sie können diese Methode verwenden, um zu bestimmen, welches Element in der Liste ausgewählt wird, wenn ein Benutzer klickt der <xref:System.Windows.Forms.ListBox>. Die Position des Cursors kann bestimmt und übergeben der `x` und `y` Parameter von der <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methode, um zu ermitteln, welchem Element der Benutzer die Maus über geklickt. Anschließend können Sie ein Kontextmenü für den Benutzer für Aufgaben und Funktionen basierend auf dem bestimmten Element anzeigen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Drag & Drop-Vorgänge mithilfe einer <xref:System.Windows.Forms.ListBox> Steuerelements die Elemente in ablegen enthält eine <xref:System.Windows.Forms.RichTextBox> Steuerelement. Der Konstruktor des Formulars legt die <xref:System.Windows.Forms.RichTextBox.AllowDrop%2A> Eigenschaft `true` zum Aktivieren von Drag & Drop-Vorgänge in auftreten der <xref:System.Windows.Forms.RichTextBox>. Im Beispiel wird die <xref:System.Windows.Forms.Control.MouseDown> -Ereignis für die <xref:System.Windows.Forms.ListBox> Starten des Ziehvorgangs wird durch Aufrufen der <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode. Im Beispiel wird die <xref:System.Windows.Forms.Control.DragEnter> Ereignis, um zu bestimmen, ob ein Element gezogen wird, in der <xref:System.Windows.Forms.RichTextBox> ist ein gültiger Datentyp. Die <xref:System.Windows.Forms.Control.DragDrop> Ereignis führt das eigentliche Ablegen eines gezogenen Elements in der <xref:System.Windows.Forms.RichTextBox> Steuerelement an der aktuellen Cursorposition innerhalb der <xref:System.Windows.Forms.RichTextBox>. Dieses Beispiel erfordert, dass die <xref:System.Windows.Forms.Control.DragDrop> und <xref:System.Windows.Forms.Control.DragEnter> Ereignisse an die Ereignishandler, die im Beispiel definierte angeschlossen wurden.  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegralHeight">
      <MemberSignature Language="C#" Value="public bool IntegralHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IntegralHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.IntegralHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property IntegralHeight As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IntegralHeight { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Größe des Steuerelements automatisch so angepasst wird, dass keine Elemente abgeschnitten werden, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Größe des Steuerelements so angepasst wird, dass keine Elemente abgeschnitten werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft festgelegt wird, um `true`, das Steuerelement automatisch ändert, um sicherzustellen, dass ein Element teilweise nicht angezeigt wird. Wenn Sie die ursprüngliche Dateigröße beibehalten möchten die <xref:System.Windows.Forms.ListBox> basierend auf den speicherplatzanforderungen von dem Formular, legen Sie diese Eigenschaft auf `false`.  
  
 Wird standardmäßig die <xref:System.Windows.Forms.ListBox> und <xref:System.Windows.Forms.CheckedListBox> Größen sind, dass sie nur vollständige Elemente angezeigt werden. Wenn Sie möchten die <xref:System.Windows.Forms.ListBox> oder <xref:System.Windows.Forms.CheckedListBox> um einen angedockten Bereich vollständig auszufüllen, legen Sie <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> auf `false`. Dies bewirkt, dass das Steuerelement vollständig die Fläche auszufüllen, aber das letzte Element ist nicht vollständig angezeigt.  
  
 Wenn die <xref:System.Windows.Forms.ListBox> enthält keine Elemente dieser Eigenschaft hat keine Auswirkungen.  
  
> [!NOTE]
>  Die ganzzahlige Höhe basiert auf der Höhe des der <xref:System.Windows.Forms.ListBox>, anstatt die Höhe des Clientbereichs. Daher, dass bei der <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> festgelegt `true`, Elemente können immer noch teilweise angezeigt werden, wenn Bildlaufleisten angezeigt werden.  
  
> [!NOTE]
>  Wenn die <xref:System.Windows.Forms.ListBox.DrawMode%2A> -Eigenschaftensatz auf `DrawMode.OwnerDrawVariable`, diese Eigenschaft hat keine Auswirkung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> und <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> Eigenschaften eine horizontale Bildlaufleiste angezeigt, die alle Elementtext im zeigt die <xref:System.Windows.Forms.ListBox> Steuerelement. Das Beispiel verwendet außerdem die <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> Eigenschaft, um sicherzustellen, dass Elemente nicht teilweise aufgrund der Größe des angezeigt werden die <xref:System.Windows.Forms.ListBox> Steuerelement. Dieses Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox> Steuerelement, mit dem Namen `listBox1`, zu einem Formular hinzugefügt wurde.  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ItemHeight">
      <MemberSignature Language="C#" Value="public virtual int ItemHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ItemHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ItemHeight { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(13)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Höhe eines Elements in der <see cref="T:System.Windows.Forms.ListBox" /> ab oder legt diese fest.</summary>
        <value>Die Höhe eines Elements im Steuerelement in Pixel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.ListBox.DrawMode%2A> -Eigenschaftensatz auf `DrawMode.OwnerDrawFixed`, alle Elemente die gleiche Höhe haben. Wenn die <xref:System.Windows.Forms.ListBox.DrawMode%2A> -Eigenschaftensatz auf `DrawMode.OwnerDrawVariable`, die <xref:System.Windows.Forms.ListBox.ItemHeight%2A> Eigenschaft gibt die Höhe jedes Elements hinzugefügt der <xref:System.Windows.Forms.ListBox>. Da jedes Element in einer Ownerdrawn-Liste eine unterschiedliche Höhe aufweisen kann, können Sie die <xref:System.Windows.Forms.ListBox.GetItemHeight%2A> Methode zum Abrufen der Höhe eines bestimmten Elements in der <xref:System.Windows.Forms.ListBox>. Bei Verwendung der <xref:System.Windows.Forms.ListBox.ItemHeight%2A> Eigenschaft auf einen <xref:System.Windows.Forms.ListBox> mit Elementen mit variabler Höhe, gibt diese Eigenschaft die Höhe des ersten Elements im Steuerelement zurück.  
  
 Die maximale Höhe des ein <xref:System.Windows.Forms.ListBox> Element beträgt 255 Pixel.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die <see cref="P:System.Windows.Forms.ListBox.ItemHeight" />-Eigenschaft wurde auf weniger als 0 (null) oder mehr als 255 Pixel festgelegt.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.ObjectCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/ObjectCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::ObjectCollection ^ Items { System::Windows::Forms::ListBox::ObjectCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Elemente der <see cref="T:System.Windows.Forms.ListBox" /> ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />, die die Elemente in der <see cref="T:System.Windows.Forms.ListBox" /> darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ermöglicht einen Verweis auf die Liste der Elemente, die aktuell in gespeichert sind, erhalten Sie die <xref:System.Windows.Forms.ListBox>. Mit diesem Verweis können Sie Elemente hinzufügen, Entfernen von Elementen und Anzahl der Elemente in der Auflistung abrufen. Weitere Informationen zu den Aufgaben, die mit der Auflistung ausgeführt werden können, finden Sie unter der <xref:System.Windows.Forms.ListBox.ObjectCollection> -Klasse Referenzthemen.  
  
 Können Sie auch die Elemente der Bearbeiten einer <xref:System.Windows.Forms.ListBox> mithilfe der <xref:System.Windows.Forms.ListControl.DataSource%2A> Eigenschaft. Bei Verwendung der <xref:System.Windows.Forms.ListControl.DataSource%2A> Eigenschaft Elemente hinzufügen eine <xref:System.Windows.Forms.ListBox>, sehen Sie die Elemente in der <xref:System.Windows.Forms.ListBox> mithilfe der <xref:System.Windows.Forms.ListBox.Items%2A> Eigenschaft jedoch nicht hinzufügen oder Entfernen von Elementen aus der Liste mit den Methoden der der <xref:System.Windows.Forms.ListBox.ObjectCollection>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Windows.Forms.ListBox> Steuerelement, das mehrere Elemente in Spalten angezeigt und kann mehr als ein Element in der Liste das Steuerelement ausgewählt haben. Der Code für das Beispiel fügt 50 Elemente der <xref:System.Windows.Forms.ListBox> mithilfe der <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasse und wählt dann drei Elemente aus der Liste mithilfe der <xref:System.Windows.Forms.ListBox.SetSelected%2A> Methode. Zeigt der Code dann Werte aus den <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> Auflistung (über die <xref:System.Windows.Forms.ListBox.SelectedItems%2A> Eigenschaft) und die <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> (über die <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> Eigenschaft). Dieses Beispiel benötigen Sie, dass der Code befindet sich im und aufgerufen wird eine <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn eine Ownerdrawn-<see cref="T:System.Windows.Forms.ListBox" /> erstellt und die Größe der einzelnen Listenelemente bestimmt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können, erstellen Sie einen Ereignishandler für dieses Ereignis zum Angeben der Größe ein Elements vorgenommen werden, wird bevor es, in gezeichnet wird der <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis. Das Ereignis wird nur ausgelöst, wenn die <xref:System.Windows.Forms.ListBox.DrawMode%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.DrawMode.OwnerDrawVariable>.  
  
 Die maximale Höhe des ein <xref:System.Windows.Forms.ListBox> Element beträgt 255 Pixel. Festlegen der <xref:System.Windows.Forms.MeasureItemEventArgs.ItemHeight%2A> Eigenschaft von der <xref:System.Windows.Forms.MeasureItemEventArgs> auf einen Wert größer als 255, die bei der Behandlung dieses Ereignisses zu unerwarteten Ergebnissen führen kann.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht ein vom Besitzer gezeichnetes <xref:System.Windows.Forms.ListBox> durch Festlegen der <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft <xref:System.Windows.Forms.DrawMode.OwnerDrawVariable> und Behandeln von der <xref:System.Windows.Forms.ListBox.DrawItem> und <xref:System.Windows.Forms.ListBox.MeasureItem> Ereignisse. Außerdem zeigt es die Einstellung der <xref:System.Windows.Forms.ListBox.BorderStyle%2A> und <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> Eigenschaften als auch mithilfe der <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> Methode.  
  
 Um dieses Beispiel auszuführen, fügen Sie ihn in ein leeres Formular, das importiert die <xref:System.Drawing> Namespace und die <xref:System.Windows.Forms> Namespace. Rufen Sie `InitializeOwnerDrawnListBox` aus den Konstruktor des Formulars oder <xref:System.Windows.Forms.Form.Load> Ereignisbehandlungsmethode.  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.ItemHeight" />
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn mit dem Mauszeiger auf das <see cref="T:System.Windows.Forms.ListBox" />-Steuerelement geklickt wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiColumn">
      <MemberSignature Language="C#" Value="public bool MultiColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiColumn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.MultiColumn" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiColumn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiColumn { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob <see cref="T:System.Windows.Forms.ListBox" /> mehrere Spalten unterstützt, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die <see cref="T:System.Windows.Forms.ListBox" /> mehrere Spalten unterstützt; andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einem mehrspaltigen <xref:System.Windows.Forms.ListBox> werden die Elemente in beliebig viele Spalten zur vertikalen Bildlauf nicht erforderlich sind. Der Benutzer kann die Tastatur verwenden, um Spalten zu navigieren, die zurzeit nicht sichtbar sind. Festlegen der <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> Eigenschaft `true` eine horizontale Bildlaufleiste angezeigt, die mit der Benutzer einen Bildlauf zu Spalten, die derzeit nicht in den sichtbaren Bereich des angezeigten der <xref:System.Windows.Forms.ListBox>. Der Wert, der die <xref:System.Windows.Forms.ListBox.ColumnWidth%2A> Eigenschaft bestimmt die Breite jeder Spalte.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht eine einfache zweispaltige <xref:System.Windows.Forms.ListBox>.  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Eine mehrspaltige <see cref="T:System.Windows.Forms.ListBox" /> darf keine Höhe mit variabler Größe aufweisen.</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
        <altmember cref="P:System.Windows.Forms.ListBox.ColumnWidth" />
      </Docs>
    </Member>
    <Member MemberName="NoMatches">
      <MemberSignature Language="C#" Value="public const int NoMatches = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NoMatches = (-1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.NoMatches" />
      <MemberSignature Language="VB.NET" Value="Public Const NoMatches As Integer  = -1" />
      <MemberSignature Language="C++ CLI" Value="public: int NoMatches = -1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Gibt an, dass bei einer Suche keine Übereinstimmungen gefunden werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Konstante wird zurückgegeben, durch die <xref:System.Windows.Forms.ListBox.FindString%2A>, <xref:System.Windows.Forms.ListBox.FindStringExact%2A>, und <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methoden, wenn keine übereinstimmenden Werte, die bei einer Suche gefunden werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected override void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnChangeUICues (e As UICuesEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnChangeUICues(System::Windows::Forms::UICuesEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.UICuesEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.ChangeUICues" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected override void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDataSourceChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDataSourceChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDataSourceChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListControl.DataSourceChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayMemberChanged">
      <MemberSignature Language="C#" Value="protected override void OnDisplayMemberChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDisplayMemberChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDisplayMemberChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDisplayMemberChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDisplayMemberChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListControl.DisplayMemberChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DrawItemEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListBox.DrawItem" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Die <xref:System.Windows.Forms.ListBox.OnDrawItem%2A> -Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen von Ownerdrawn- <xref:System.Windows.Forms.ListBox> Elemente. Der Code verwendet die <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft, um anzugeben, dass die gezeichneten Elemente eine feste Größe und die <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis zeichnet jedes Elements in der <xref:System.Windows.Forms.ListBox>. Der Beispielcode verwendet, die Eigenschaften und Methoden von der <xref:System.Windows.Forms.DrawItemEventArgs> Klasse als Parameter übergeben werden, an den Ereignishandler, um die Elemente zu zeichnen. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox> -Steuerelement namens `listBox1` hinzugefügt wurde, ein Formular und die <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis erfolgt durch die im Beispielcode definierten Ereignishandler. Im Beispiel erfordert auch, dass Elemente hinzugefügt wurden die <xref:System.Windows.Forms.ListBox> mit dem Text "Apple", "Orange" und "Plum" in dieser Reihenfolge.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.FontChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Gibt den Zeitpunkt der Erstellung des Fensterhandles an, sodass die Spaltenbreite und andere Eigenschaften festgelegt werden können. Erbende Klassen müssen <see langword="base.OnHandleCreated" /> aufrufen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wurde überschrieben, um sicherzustellen, dass Elemente ordnungsgemäß eingerichtet und gelöscht werden. Erbende Steuerelemente müssen <see langword="base.OnHandleDestroyed" /> aufrufen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.MeasureItemEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListBox.MeasureItem" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Die <xref:System.Windows.Forms.ListBox.OnMeasureItem%2A> -Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.ParentChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.Resize" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedValueChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedValueChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedValueChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedValueChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedValueChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedValueChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ist für diese Klasse nicht relevant.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.Padding" />-Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Wert der <see cref="P:System.Windows.Forms.ListBox.Padding" />-Eigenschaft ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn das <see cref="T:System.Windows.Forms.ListBox" />-Steuerelement gezeichnet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHeight">
      <MemberSignature Language="C#" Value="public int PreferredHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PreferredHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.PreferredHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PreferredHeight { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Gesamthöhe aller Elemente in der <see cref="T:System.Windows.Forms.ListBox" /> ab.</summary>
        <value>Die Gesamthöhe aller Elemente im Steuerelement in Pixel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ermöglicht Ihnen die Höhe bestimmt, die die <xref:System.Windows.Forms.ListBox> muss festgelegt werden, um alle verfügbaren Elemente in der Liste angezeigt, und um zu vermeiden, vertikale Bildlaufleisten angezeigt. Wenn die Menge der Elemente in der <xref:System.Windows.Forms.ListBox> ist groß, die Größe des Steuerelements mit dem Wert des der <xref:System.Windows.Forms.ListBox.PreferredHeight%2A> Eigenschaft möglicherweise dazu führen, dass die <xref:System.Windows.Forms.ListBox> zu außerhalb der Clientbereich des Formulars oder der <xref:System.Windows.Forms.ListBox> Container.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie festgelegt der <xref:System.Windows.Forms.Control.Size%2A> Eigenschaft eine <xref:System.Windows.Forms.ListBox> basierend auf dem Wert von der <xref:System.Windows.Forms.ListBox.PreferredHeight%2A> -Eigenschaft an, um die Anzeige aller Elemente in der <xref:System.Windows.Forms.ListBox> ohne Verwendung von Bildlaufleisten. Dieses Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox> Steuerelement, mit dem Namen `listBox1`, zu einem Formular hinzugefügt wurde.  
  
 [!code-cpp[ListBox.PreferredHeight#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.PreferredHeight/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.PreferredHeight#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.PreferredHeight/CS/form1.cs#1)]
 [!code-vb[ListBox.PreferredHeight#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.PreferredHeight/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Height" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erzwingt, dass das Steuerelement seinen Clientbereich für ungültig erklärt und sich sowie alle untergeordneten Steuerelemente sofort selbst neu zeichnet.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItem">
      <MemberSignature Language="C#" Value="protected override void RefreshItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItem(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des zu aktualisierenden Elements.</param>
        <summary>Aktualisiert das Element am angegebenen Index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.ListControl.DisplayMember%2A> -Eigenschaft festgelegt ist und die Eigenschaft in der Datenquelle, die zugewiesen <xref:System.Windows.Forms.ListControl.DisplayMember%2A> ändert, verwenden die <xref:System.Windows.Forms.ListBox.RefreshItem%2A> Methode für das update in der <xref:System.Windows.Forms.ListBox> Steuerelement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItems">
      <MemberSignature Language="C#" Value="protected override void RefreshItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItems();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualisiert alle <see cref="T:System.Windows.Forms.ListBox" />-Elemente und ruft neue Zeichenfolgen für diese ab.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RescaleConstantsForDpi">
      <MemberSignature Language="C#" Value="protected override void RescaleConstantsForDpi (int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RescaleConstantsForDpi(int32 deviceDpiOld, int32 deviceDpiNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RescaleConstantsForDpi(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RescaleConstantsForDpi (deviceDpiOld As Integer, deviceDpiNew As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceDpiOld" Type="System.Int32" />
        <Parameter Name="deviceDpiNew" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="deviceDpiOld">Der DPI-Wert vor der Änderung.</param>
        <param name="deviceDpiNew">Der DPI-Wert nach der Änderung.</param>
        <summary>Stellt Konstanten für die Größenänderung des Steuerelements bereit, wenn ein DPI-Wert geändert wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public override void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetBackColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetBackColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetBackColor();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt die <see cref="P:System.Windows.Forms.Control.BackColor" />-Eigenschaft auf den Standardwert zurück.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public override void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetForeColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetForeColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetForeColor();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt die <see cref="P:System.Windows.Forms.Control.ForeColor" />-Eigenschaft auf den Standardwert zurück.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Text vom Steuerelement von rechts nach links angezeigt wird, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.RightToLeft" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ermöglicht die Menüs Sprachen unterstützen, die von rechts nach links geschrieben werden. Wenn diese Eigenschaft festgelegt wird, um `true`, Elementtext wird von rechts nach links anstelle des Standardwerts von links nach rechts angezeigt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected override void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ScaleControl (factor As SizeF, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ScaleControl(System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="factor">Der Faktor, um den die Höhe und die Breite des Steuerelements skaliert werden.</param>
        <param name="specified">Ein <see cref="T:System.Windows.Forms.BoundsSpecified" />-Wert, der die Begrenzungen des Steuerelements angibt und bei der Definition von Größe und Position verwendet wird.</param>
        <summary>Skaliert Speicherort, Größe, Textabstand und Rand eines Steuerelements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAlwaysVisible">
      <MemberSignature Language="C#" Value="public bool ScrollAlwaysVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollAlwaysVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ScrollAlwaysVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollAlwaysVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollAlwaysVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die vertikale Schiebeleiste immer angezeigt wird, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die vertikale Schiebeleiste immer angezeigt werden soll, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> Eigenschaft gibt an, ob eine vertikale Schiebeleiste immer angezeigt wird, auch wenn die Anzahl der Elemente in der <xref:System.Windows.Forms.ListBox> erfordert keine Anzeige der vertikalen Bildlaufleiste. Wird standardmäßig ein <xref:System.Windows.Forms.ListBox> zeigt nur eine vertikale Bildlaufleiste angezeigt, wenn genügend Elemente zum Anzeigen von rechtfertigen vorhanden sind. Für einen mehrspaltigen <xref:System.Windows.Forms.ListBox>die <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> Eigenschaft gibt an, dass eine horizontale Bildlaufleiste angezeigt wird. Eine vertikale Bildlaufleiste angezeigt wird nie unabhängig vom Wert dieser Eigenschaft für einen mehrspaltigen angezeigt <xref:System.Windows.Forms.ListBox>.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht ein vom Besitzer gezeichnetes <xref:System.Windows.Forms.ListBox> durch Festlegen der <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft, um die `OwnerDrawVariable` Wert und Behandlung der <xref:System.Windows.Forms.ListBox.DrawItem> und <xref:System.Windows.Forms.ListBox.MeasureItem> Ereignisse. Außerdem zeigt es die Einstellung der <xref:System.Windows.Forms.ListBox.BorderStyle%2A> und <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> Eigenschaften als auch mithilfe der <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> Methode.  
  
 Um dieses Beispiel auszuführen, fügen Sie ihn in ein leeres Formular, das importiert die <xref:System.Drawing> Namespace und die <xref:System.Windows.Forms> Namespace. Rufen Sie `InitializeOwnerDrawnListBox` aus den Konstruktor des Formulars oder <xref:System.Windows.Forms.Form.Load> Ereignisbehandlungsmethode.  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public override int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndex" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int SelectedIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den nullbasierten Index des derzeit ausgewählten Elements in einer <see cref="T:System.Windows.Forms.ListBox" /> ab oder legt diesen fest.</summary>
        <value>Ein nullbasierter Index des derzeit ausgewählten Elements. Wenn kein Element ausgewählt ist, wird ein Wert von -1 zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für einen Standard <xref:System.Windows.Forms.ListBox>, können Sie diese Eigenschaft auf um den Index des Elements zu ermitteln, die ausgewählt wurde die <xref:System.Windows.Forms.ListBox>. Wenn die <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft von der <xref:System.Windows.Forms.ListBox> wird `SelectionMode.MultiSimple` oder `SelectionMode.MultiExtended` (gibt eine Mehrfachauswahl an <xref:System.Windows.Forms.ListBox>) und in der Liste mehrere Elemente ausgewählt sind, kann diese Eigenschaft den Index für jedes ausgewählte Element zurückgeben.  
  
 Abrufen eine Auflistung mit den Indizes aller Elemente in einer Mehrfachauswahl ausgewählt <xref:System.Windows.Forms.ListBox>, verwenden Sie die <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> Eigenschaft. Wenn Sie das Element zu erhalten, die derzeit im ausgewählten möchten die <xref:System.Windows.Forms.ListBox>, verwenden Sie die <xref:System.Windows.Forms.ListBox.SelectedItem%2A> Eigenschaft. Darüber hinaus können Sie die <xref:System.Windows.Forms.ListBox.SelectedItems%2A> Eigenschaft, um die ausgewählten Elemente in einer Mehrfachauswahl erhalten <xref:System.Windows.Forms.ListBox>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft mit der <xref:System.Windows.Forms.ListBox.TopIndex%2A> Eigenschaft, um das aktuell ausgewählte Element an den Anfang der Liste der Elemente in den Anzeigebereich des Verschieben der <xref:System.Windows.Forms.ListBox>. Das Beispiel veranschaulicht, wie Entfernen von Elementen, die mit der <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType> Klasse sowie zum Deaktivieren Sie alle Artikel Formatauswahl mithilfe der <xref:System.Windows.Forms.ListBox.ClearSelected%2A> Methode. Der Code wird zuerst das aktuell ausgewählte Element verschoben, der <xref:System.Windows.Forms.ListBox> an den Anfang der Liste. Der Code entfernt alle Elemente, bevor Sie das aktuell ausgewählte Element, und löscht die Auswahl aller Optionen in der <xref:System.Windows.Forms.ListBox>. Dieses Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox> mit Elementen zu einem Formular hinzugefügt und ausgewählt, dass ein Element aktuell die <xref:System.Windows.Forms.ListBox>.  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der zugeordnete Wert ist kleiner als -1 oder größer oder gleich der Elementanzahl.</exception>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.Windows.Forms.ListBox.SelectionMode" />-Eigenschaft ist auf <see langword="None" /> festgelegt.</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die <see cref="P:System.Windows.Forms.ListBox.SelectedIndex" />-Eigenschaft oder die <see cref="P:System.Windows.Forms.ListBox.SelectedIndices" />-Auflistung geändert wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können Sie einen Ereignishandler für dieses Ereignis, um zu bestimmen, wann Erstellen des ausgewählten Indexes in der <xref:System.Windows.Forms.ListBox> geändert wurde. Dies kann nützlich sein, wenn Sie zum Anzeigen von Informationen in anderen Steuerelementen, die basierend auf der aktuellen Auswahl im müssen die <xref:System.Windows.Forms.ListBox>. Den Ereignishandler für dieses Ereignis können Sie um die Informationen in die anderen Steuerelemente zu laden.  
  
 Wenn die <xref:System.Windows.Forms.ListBox.SelectionMode%2A> -Eigenschaftensatz auf <xref:System.Windows.Forms.SelectionMode.MultiSimple?displayProperty=nameWithType> oder <xref:System.Windows.Forms.SelectionMode.MultiExtended?displayProperty=nameWithType>, Änderungen an der <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> -Auflistung, einschließlich ein Elements aus der Auswahl entfernen dieses Ereignis wird ausgelöst.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> gesucht, und wählen Sie ein Element in ein anderes Ereignis <xref:System.Windows.Forms.ListBox> Steuerelement. Im Beispiel wird die <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> Ereignis, um zu bestimmen, wann das ausgewählte Element in der <xref:System.Windows.Forms.ListBox> geändert wird. Der Beispielcode liest dann den Text des Elements mithilfe der <xref:System.Windows.Forms.ListBox.SelectedItem%2A> -Eigenschaft und ruft die <xref:System.Windows.Forms.ListBox.FindString%2A> Methode auf einem anderen <xref:System.Windows.Forms.ListBox> zurückgegebene Text mit <xref:System.Windows.Forms.ListBox.SelectedItem%2A> in der ersten <xref:System.Windows.Forms.ListBox>. Wenn kein Element, in der anderen gefunden wird <xref:System.Windows.Forms.ListBox>, das Element ausgewählt ist. Dieses Beispiel benötigen Sie, dass zwei <xref:System.Windows.Forms.ListBox> -Steuerelemente, mit dem Namen `listBox1` und `listBox2`, wurden hinzugefügt, ein Formular enthält und dass beide <xref:System.Windows.Forms.ListBox> Steuerelemente enthalten Elemente, die identisch sind. Im Beispiel erfordert außerdem, dass die im Beispiel definierte Ereignisbehandlungsmethode mit der <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> -Ereignis `listBox1`.  
  
 [!code-cpp[ListBox.SelectedIndexChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListBox.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListBox::SelectedIndexCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung ab, die die nullbasierten Indizes aller derzeit ausgewählten Elemente in der <see cref="T:System.Windows.Forms.ListBox" /> enthält.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" />, die die Indizes der derzeit im Steuerelement ausgewählten Elemente enthält. Wenn gegenwärtig keine Elemente ausgewählt sind, wird eine leere <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" /> zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für eine Mehrfachauswahl <xref:System.Windows.Forms.ListBox>, gibt diese Eigenschaft eine Auflistung, die die Indizes für alle Elemente, die im ausgewählten enthält die <xref:System.Windows.Forms.ListBox>. Für eine Einfachauswahl <xref:System.Windows.Forms.ListBox>, gibt diese Eigenschaft eine Auflistung mit einem einzelnen Element mit dem Index des ausgewählten Elements in nur die <xref:System.Windows.Forms.ListBox>. Weitere Informationen zum Bearbeiten der Elemente der Auflistung finden Sie unter <xref:System.Windows.Forms.ListBox.SelectedIndexCollection>.  
  
 Die <xref:System.Windows.Forms.ListBox> Klasse bietet eine Reihe von Möglichkeiten, um die ausgewählten Elemente verweisen. Anstatt die <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> -Eigenschaft zum Abrufen der Indexposition des derzeit ausgewählten Elements in einem Einfachauswahl <xref:System.Windows.Forms.ListBox>, können Sie die <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft. Wenn Sie das Element zu erhalten, die derzeit im ausgewählten möchten die <xref:System.Windows.Forms.ListBox>, verwenden, statt die Indexposition des Elements, das <xref:System.Windows.Forms.ListBox.SelectedItem%2A> Eigenschaft. Darüber hinaus können Sie die <xref:System.Windows.Forms.ListBox.SelectedItems%2A> Eigenschaft, wenn Sie die ausgewählten Elemente in einer Mehrfachauswahl abrufen möchten <xref:System.Windows.Forms.ListBox>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.FindString%2A> Methode, um alle Instanzen des Suchtexts in den Elementen der Suchen der <xref:System.Windows.Forms.ListBox>. Im Beispiel wird die Version der <xref:System.Windows.Forms.ListBox.FindString%2A> -Methode, die Ihnen ermöglicht, eine Suche aus dem kontinuierlicher Suchen aller Elemente im Angeben der <xref:System.Windows.Forms.ListBox>. Außerdem wird veranschaulicht, wie Sie ermitteln, wann die <xref:System.Windows.Forms.ListBox.FindString%2A> Methode beginnt die Suche vom Anfang der Liste nach Erreichen des unteren Rand der Liste der Elemente, um eine rekursive Suche zu verhindern. Sobald Elemente, in gefunden werden der <xref:System.Windows.Forms.ListBox>, sie ausgewählt werden, mithilfe der <xref:System.Windows.Forms.ListBox.SetSelected%2A> Methode.  
  
 [!code-cpp[ListBox.FindString#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public object SelectedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectedItem { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das derzeit ausgewählte Element in <see cref="T:System.Windows.Forms.ListBox" /> ab oder legt dieses fest.</summary>
        <value>Ein Objekt, das die aktuelle Auswahl im Steuerelement darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für einen Standard <xref:System.Windows.Forms.ListBox>, Sie können diese Eigenschaft verwenden, um zu bestimmen, welches Element ausgewählt wird, in der <xref:System.Windows.Forms.ListBox>. Wenn die <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft von der <xref:System.Windows.Forms.ListBox> wird `SelectionMode.MultiSimple` oder `SelectionMode.MultiExtended` (gibt eine Mehrfachauswahl an <xref:System.Windows.Forms.ListBox>) und in der Liste mehrere Elemente ausgewählt sind, kann diese Eigenschaft jedes ausgewählte Element zurückgeben.  
  
 Abrufen eine Auflistung, die alle ausgewählten Elemente in einer Mehrfachauswahl enthält <xref:System.Windows.Forms.ListBox>, verwenden Sie die <xref:System.Windows.Forms.ListBox.SelectedItems%2A> Eigenschaft. Wenn Sie die Indexposition des derzeit ausgewählten Elements im abrufen möchten die <xref:System.Windows.Forms.ListBox>, verwenden Sie die <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft. Darüber hinaus können Sie die <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> -Eigenschaft zum Abrufen der ausgewählten Indizes in einer Mehrfachauswahl <xref:System.Windows.Forms.ListBox>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> gesucht, und wählen Sie ein Element in ein anderes Ereignis <xref:System.Windows.Forms.ListBox> Steuerelement. Im Beispiel wird die <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> Ereignis, um zu bestimmen, wann das ausgewählte Element in der <xref:System.Windows.Forms.ListBox> geändert wird. Der Beispielcode liest dann den Text des Elements mithilfe der <xref:System.Windows.Forms.ListBox.SelectedItem%2A> -Eigenschaft und ruft die <xref:System.Windows.Forms.ListBox.FindString%2A> Methode auf einem anderen <xref:System.Windows.Forms.ListBox> zurückgegebene Text mit <xref:System.Windows.Forms.ListBox.SelectedItem%2A> in der ersten <xref:System.Windows.Forms.ListBox>. Wenn kein Element, in der anderen gefunden wird <xref:System.Windows.Forms.ListBox>, das Element ausgewählt ist. Dieses Beispiel benötigen Sie, dass zwei <xref:System.Windows.Forms.ListBox> -Steuerelemente, mit dem Namen `listBox1` und `listBox2`, wurden hinzugefügt, ein Formular enthält und dass beide <xref:System.Windows.Forms.ListBox> Steuerelemente enthalten Elemente, die identisch sind. Im Beispiel erfordert außerdem, dass die im Beispiel definierte Ereignisbehandlungsmethode mit der <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> -Ereignis `listBox1`.  
  
 [!code-cpp[ListBox.SelectedIndexChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedObjectCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedObjectCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListBox.SelectedObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::SelectedObjectCollection ^ SelectedItems { System::Windows::Forms::ListBox::SelectedObjectCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung mit den derzeit in der <see cref="T:System.Windows.Forms.ListBox" /> ausgewählten Elementen ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListBox.SelectedObjectCollection" />, die die derzeit im Steuerelement ausgewählten Elemente enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für eine Mehrfachauswahl <xref:System.Windows.Forms.ListBox>, gibt diese Eigenschaft eine Auflistung mit allen Elementen, die im ausgewählten der <xref:System.Windows.Forms.ListBox>. Für eine Einfachauswahl <xref:System.Windows.Forms.ListBox>, gibt diese Eigenschaft eine Auflistung mit einem einzelnen Element, enthält das einzige ausgewählte Element in der <xref:System.Windows.Forms.ListBox>. Weitere Informationen zum Bearbeiten der Elemente der Auflistung finden Sie unter <xref:System.Windows.Forms.ListBox.SelectedObjectCollection>.  
  
 Die <xref:System.Windows.Forms.ListBox> Klasse bietet eine Reihe von Möglichkeiten, um die ausgewählten Elemente verweisen. Anstatt die <xref:System.Windows.Forms.ListBox.SelectedItems%2A> Eigenschaft, um das aktuell ausgewählte Element in einem Einfachauswahl erhalten <xref:System.Windows.Forms.ListBox>, können Sie die <xref:System.Windows.Forms.ListBox.SelectedItem%2A> Eigenschaft. Wenn Sie die Indexposition eines Elements zu erhalten, die derzeit im ausgewählten möchten die <xref:System.Windows.Forms.ListBox>, verwenden Sie statt des Elements selbst, die <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft. Darüber hinaus können Sie die <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> Eigenschaft, wenn Sie die Indexpositionen aller ausgewählten Elemente in einer Mehrfachauswahl abrufen möchten <xref:System.Windows.Forms.ListBox>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.SelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SelectionMode SelectionMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectionMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SelectionMode As SelectionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::SelectionMode SelectionMode { System::Windows::Forms::SelectionMode get(); void set(System::Windows::Forms::SelectionMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Verfahren für die Auswahl von Elementen in <see cref="T:System.Windows.Forms.ListBox" /> ab oder legt dieses fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.SelectionMode" />-Werte. Der Standardwert ist <see langword="SelectionMode.One" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft können Sie bestimmen, wie viele Elemente in der <xref:System.Windows.Forms.ListBox> ein Benutzer kann gleichzeitig auswählen und wie der Benutzer mehrere Auswahl treffen kann. Wenn die <xref:System.Windows.Forms.ListBox.SelectionMode%2A> -Eigenschaftensatz auf `SelectionMode.MultiExtended`, durch Drücken der UMSCHALTTASTE und klicken mit der Maus oder die UMSCHALTTASTE und eine der Pfeiltasten (nach-oben, nach-unten-nach-links und rechts) wird die Auswahl aus dem zuvor ausgewählten Element mit dem aktuellen Element erweitert . Drücken STRG, und klicken mit der Maus auswählt, oder hebt die Auswahl eines Elements in der Liste. Wenn die Eigenschaft auf festgelegt ist `SelectionMode.MultiSimple`, klicken mit der Maus oder durch Drücken der LEERTASTE aktiviert bzw. deaktiviert das hebt die Auswahl eines Elements in der Liste.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.GetSelected%2A> Methode, um zu bestimmen, die Elemente in einem <xref:System.Windows.Forms.ListBox> wählen Sie die Elemente, die nicht ausgewählt werden, und deaktivieren die ausgewählten Elemente ausgewählt sind. Auch das Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft zum Aktivieren einer <xref:System.Windows.Forms.ListBox> jeweils mehr als eine ausgewählte Element und verwendet die <xref:System.Windows.Forms.ListBox.Sorted%2A> veranschaulicht, wie Sie Elemente in der Eigenschaft eine <xref:System.Windows.Forms.ListBox> automatisch. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox>mit dem Namen `listBox1`, auf einem Formular hinzugefügt wurde die `InitializeMyListBox` im Beispiel definierte Methode wird aufgerufen, aus der <xref:System.Windows.Forms.Form.Load> -Ereignis des Formulars.  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der zugewiesene Wert ist keiner der <see cref="T:System.Windows.Forms.SelectionMode" />-Werte.</exception>
        <altmember cref="T:System.Windows.Forms.SelectionMode" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">Der neue <see cref="P:System.Windows.Forms.Control.Left" />-Eigenschaftswert des Steuerelements.</param>
        <param name="y">Der neue <see cref="P:System.Windows.Forms.Control.Top" />-Eigenschaftswert des Steuerelements.</param>
        <param name="width">Der neue <see cref="P:System.Windows.Forms.Control.Width" />-Eigenschaftswert des Steuerelements.</param>
        <param name="height">Der neue <see cref="P:System.Windows.Forms.Control.Height" />-Eigenschaftswert des Steuerelements.</param>
        <param name="specified">Eine bitweise Kombination der <see cref="T:System.Windows.Forms.BoundsSpecified" />-Werte.</param>
        <summary>Legt die angegebenen Begrenzungen des <see cref="T:System.Windows.Forms.ListBox" />-Steuerelements fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Höhe der <xref:System.Windows.Forms.ListBox> Steuerelement erhöht und verringert, die ein Vielfaches von der <xref:System.Windows.Forms.ListBox.ItemHeight%2A> Eigenschaft. Wenn die Höhe einer Zahl ist, die kein Mehrfaches der ist <xref:System.Windows.Forms.ListBox.ItemHeight%2A>, die Höhe des der <xref:System.Windows.Forms.ListBox> ändert sich von der größten mehrere, die kleiner als.  
  
 In der Regel werden die Parameter, die die Grenzen, die nicht in den angegebenen Parameter enthalten entsprechen sich ihre aktuellen Werte übergeben werden. Z. B. die `height`, `width`, oder die `x` oder `y` Eigenschaften der <xref:System.Windows.Forms.Control.Location%2A> Eigenschaft mit einem Verweis auf die aktuelle Instanz des Steuerelements übergeben werden kann. Alle übergebenen Werte werden jedoch berücksichtigt, und klicken Sie auf das Steuerelement angewendet.  
  
 Die `specified` Parameter darstellt, die Elemente der Steuerelemente <xref:System.Windows.Forms.Control.Bounds%2A> von der Anwendung geändert. Angenommen, Sie ändern die <xref:System.Windows.Forms.Control.Size%2A> des Steuerelements, das `specified` Parameterwert ist <xref:System.Windows.Forms.BoundsSpecified.Size>. Jedoch wenn die <xref:System.Windows.Forms.Control.Size%2A> wird angepasst, als Antwort auf die <xref:System.Windows.Forms.Control.Dock%2A> -Eigenschaft festgelegt wird, die `specified` Parameterwert ist <xref:System.Windows.Forms.BoundsSpecified.None>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> Methode, um die Grenzen des Steuerelements ändern zu erzwingen. Abgeleitete Klassen können Größe Einschränkungen beim Hinzufügen der <see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> Methode.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetItemCore">
      <MemberSignature Language="C#" Value="protected override void SetItemCore (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemCore(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemCore(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItemCore (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItemCore(int index, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Der Arrayindex des Objekts.</param>
        <param name="value">Das Objekt.</param>
        <summary>Legt das Objekt mit dem angegebenen Index in der abgeleiteten Klasse fest.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItemsCore">
      <MemberSignature Language="C#" Value="protected override void SetItemsCore (System.Collections.IList value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemsCore(class System.Collections.IList value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemsCore(System.Collections.IList)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItemsCore (value As IList)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItemsCore(System::Collections::IList ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="value">Ein Objektarray, das in das Steuerelement eingefügt werden soll.</param>
        <summary>Löscht den Inhalt der <see cref="T:System.Windows.Forms.ListBox" /> und fügt dem Steuerelement die angegebenen Elemente hinzu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelected">
      <MemberSignature Language="C#" Value="public void SetSelected (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelected(int32 index, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetSelected(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelected (index As Integer, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSelected(int index, bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements in einer <see cref="T:System.Windows.Forms.ListBox" />, das ausgewählt oder dessen Auswahl aufgehoben werden soll.</param>
        <param name="value">
          <see langword="true" />, um das angegebene Element auszuwählen, andernfalls <see langword="false" />.</param>
        <summary>Wählt ein angegebenes Element in einer <see cref="T:System.Windows.Forms.ListBox" /> aus oder hebt dessen Auswahl auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Eigenschaft legen Sie die Auswahl von Elementen in einer Mehrfachauswahl <xref:System.Windows.Forms.ListBox>. Zum Auswählen eines Elements in einem Einfachauswahl <xref:System.Windows.Forms.ListBox>, verwenden Sie die <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Windows.Forms.ListBox> Steuerelement, das mehrere Elemente in Spalten angezeigt und kann mehr als ein Element in der Liste das Steuerelement ausgewählt haben. Der Code für das Beispiel fügt 50 Elemente der <xref:System.Windows.Forms.ListBox> mithilfe der <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasse und wählt dann drei Elemente aus der Liste mithilfe der <xref:System.Windows.Forms.ListBox.SetSelected%2A> Methode. Zeigt der Code dann Werte aus den <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> Auflistung (über die <xref:System.Windows.Forms.ListBox.SelectedItems%2A> Eigenschaft) und die <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> (über die <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> Eigenschaft). Dieses Beispiel benötigen Sie, dass der Code befindet sich im und aufgerufen wird eine <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der angegebene Index lag außerhalb des gültigen Wertebereichs.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Windows.Forms.ListBox.SelectionMode" />-Eigenschaft wurde auf <see langword="None" /> festgelegt.</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="protected virtual void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Sort" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Sort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sortiert die Elemente in der <see cref="T:System.Windows.Forms.ListBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.Sort%2A> Erzwingt für jedes Element auf sich selbst hinzufügen, wenn die Auflistung der <xref:System.Windows.Forms.ListBox.Sorted%2A> Eigenschaft ist `true`. Jedes Element wird dann in der richtigen Position eingefügt.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.ListBox.Sort%2A> Methode. Im Beispiel wird veranschaulicht, erben von der <xref:System.Windows.Forms.ListBox> -Klasse und überschreiben die <xref:System.Windows.Forms.ListBox.Sort%2A> Methode in der abgeleiteten Klasse zum Ausführen einer benutzerdefinierten Sortierung. Fügen zum Ausführen dieses Beispiel den folgenden Code in ein leeres Formular.  
  
 [!code-cpp[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Sie können diese Methode überschreiben, in die abgeleitete Klasse, um eine eigene Sortierroutine bereitzustellen. Zugriff auf die Ergebnisse der überschriebenen <see cref="M:System.Windows.Forms.ListBox.Sort" /> Methode durch Festlegen der <see cref="P:System.Windows.Forms.ListBox.Sorted" /> Eigenschaft <see langword="true" />. Beim Hinzufügen von Elementen zu einer <see cref="T:System.Windows.Forms.ListBox" />, es ist jedoch effizienter, zu den Elementen am Anfang sortieren und dann neue Elemente hinzuzufügen.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.ListBox.Sorted" />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Sorted" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Sorted { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Elemente in der <see cref="T:System.Windows.Forms.ListBox" /> alphabetisch sortiert sind, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Elemente im Steuerelement sortiert sind, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Forms.ListBox.Sorted%2A> Eigenschaft automatisch Sortieren von Zeichenfolgen in alphabetischer Reihenfolge in einem <xref:System.Windows.Forms.ListBox>. Hinzufügen von Elementen zu einer sortierten <xref:System.Windows.Forms.ListBox>, an die gewünschte Position in der sortierten Liste werden die Elemente verschoben. Beim Hinzufügen von Elementen zu einer <xref:System.Windows.Forms.ListBox>, es ist jedoch effizienter, zu den Elementen am Anfang sortieren und dann neue Elemente hinzuzufügen.  
  
 Ein <xref:System.Windows.Forms.ListBox> mit seiner <xref:System.Windows.Forms.ListBox.Sorted%2A> festgelegt `true` nicht gebunden werden soll, Daten mithilfe der <xref:System.Windows.Forms.ListControl.DataSource%2A> Eigenschaft. Zum Anzeigen sortierter Daten in einer gebundenen <xref:System.Windows.Forms.ListBox>, Sie sollten Binden an eine Datenquelle, die das Sortieren unterstützt und die Datenquelle, die die Sortierung bereitzustellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.GetSelected%2A> Methode, um zu bestimmen, die Elemente in einem <xref:System.Windows.Forms.ListBox> wählen Sie die Elemente, die nicht ausgewählt werden, und deaktivieren die ausgewählten Elemente ausgewählt sind. Auch das Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft zum Aktivieren einer <xref:System.Windows.Forms.ListBox> jeweils mehr als eine ausgewählte Element und verwendet die <xref:System.Windows.Forms.ListBox.Sorted%2A> veranschaulicht, wie Sie Elemente in der Eigenschaft eine <xref:System.Windows.Forms.ListBox> automatisch. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox>mit dem Namen `listBox1`, auf einem Formular hinzugefügt wurde die `InitializeMyListBox` im Beispiel definierte Methode wird aufgerufen, aus der <xref:System.Windows.Forms.Form.Load> -Ereignis des Formulars.  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Text des derzeit in <see cref="T:System.Windows.Forms.ListBox" /> ausgewählten Elements ab oder sucht diesen.</summary>
        <value>Der Text des derzeit im Steuerelement ausgewählten Elements.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert dieser Eigenschaft auf einen Zeichenfolgenwert festgelegt ist die <xref:System.Windows.Forms.ListBox> sucht das Element innerhalb der <xref:System.Windows.Forms.ListBox> , die mit dem angegebenen Text übereinstimmt, und das Element ausgewählt. Sie können diese Eigenschaft auch verwenden, um zu bestimmen, welche Elemente im aktuell ausgewählten der <xref:System.Windows.Forms.ListBox>. Wenn die <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft von der <xref:System.Windows.Forms.ListBox> festgelegt ist, um `SelectionMode.MultiExtended`, diese Eigenschaft gibt den Text des ersten ausgewählten Elements zurück. Wenn die <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft von der <xref:System.Windows.Forms.ListBox> nicht festgelegt ist, um `SelectionMode.None`, diese Eigenschaft gibt den Text des ersten ausgewählten Elements zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die <see cref="P:System.Windows.Forms.ListBox.Text" />-Eigenschaft geändert wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopIndex">
      <MemberSignature Language="C#" Value="public int TopIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TopIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.TopIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TopIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TopIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Index des ersten sichtbaren Elements in der <see cref="T:System.Windows.Forms.ListBox" /> ab oder legt diesen fest.</summary>
        <value>Der nullbasierte Index des ersten sichtbaren Elements im Steuerelement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zu Beginn das Element mit die Indexposition 0 (null) ist, am Anfang des sichtbaren Bereichs der der <xref:System.Windows.Forms.ListBox>. Wenn der Inhalt der <xref:System.Windows.Forms.ListBox> haben wurde kein Bildlauf durchgeführt, möglicherweise ein anderes Element am oberen Rand der Anzeigebereich des Steuerelements. Sie können diese Eigenschaft zum Abrufen der Index innerhalb der <xref:System.Windows.Forms.ListBox.ObjectCollection> für die <xref:System.Windows.Forms.ListBox> des Elements, das derzeit am oberen Rand des sichtbaren Bereichs des Steuerelements positioniert ist. Diese Eigenschaft können auch ein Element in der Liste am oberen Rand des sichtbaren Bereichs des Steuerelements positionieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft mit der <xref:System.Windows.Forms.ListBox.TopIndex%2A> Eigenschaft, um das aktuell ausgewählte Element an den Anfang der Liste der Elemente in den Anzeigebereich des Verschieben der <xref:System.Windows.Forms.ListBox>. Das Beispiel veranschaulicht, wie Entfernen von Elementen, die mit der <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType> Klasse sowie zum Deaktivieren Sie alle Artikel Formatauswahl mithilfe der <xref:System.Windows.Forms.ListBox.ClearSelected%2A> Methode. Der Code wird zuerst das aktuell ausgewählte Element verschoben, der <xref:System.Windows.Forms.ListBox> an den Anfang der Liste. Der Code entfernt alle Elemente, bevor Sie das aktuell ausgewählte Element, und löscht die Auswahl aller Optionen in der <xref:System.Windows.Forms.ListBox>. Dieses Beispiel erfordert, dass eine <xref:System.Windows.Forms.ListBox> mit Elementen zu einem Formular hinzugefügt und ausgewählt, dass ein Element aktuell die <xref:System.Windows.Forms.ListBox>.  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolgendarstellung von <see cref="T:System.Windows.Forms.ListBox" /> zurück.</summary>
        <returns>Eine Zeichenfolge, die den Steuerelementtyp, die Anzahl der Elemente im <see cref="T:System.Windows.Forms.ListBox" />-Steuerelement sowie die Text-Eigenschaft des ersten Elements in der <see cref="T:System.Windows.Forms.ListBox" /> angibt, wenn die Anzahl die 0 (null) ist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCustomTabOffsets">
      <MemberSignature Language="C#" Value="public bool UseCustomTabOffsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseCustomTabOffsets" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCustomTabOffsets As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCustomTabOffsets { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Windows.Forms.ListBox" /> Tabstoppzeichen erkennt und erweitert, wenn Zeichenfolgen mithilfe des <see cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" />-Arrays mit ganzen Zahlen gezeichnet werden, oder legt diesen Wert fest.</summary>
        <value>
          <see langword="true" />, wenn die <see cref="T:System.Windows.Forms.ListBox" /> Tabstoppzeichen erkennt und erweitert, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      </Docs>
    </Member>
    <Member MemberName="UseTabStops">
      <MemberSignature Language="C#" Value="public bool UseTabStops { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTabStops" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseTabStops" />
      <MemberSignature Language="VB.NET" Value="Public Property UseTabStops As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseTabStops { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Windows.Forms.ListBox" /> beim Zeichnen von Zeichenfolgen Tabstoppzeichen erkennen und erweitern kann, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn das Steuerelement Tabstoppzeichen erweitern kann, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Windows.Forms.ListBox> , die Elemente mit Tabstoppzeichen anzeigt.  
  
 [!code-cpp[ListBox.UseTabStops#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.UseTabStops/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.UseTabStops#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.UseTabStops/CS/form1.cs#1)]
 [!code-vb[ListBox.UseTabStops#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.UseTabStops/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für den Betrieb mit nicht verwaltetem Code. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WmReflectCommand">
      <MemberSignature Language="C#" Value="protected virtual void WmReflectCommand (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WmReflectCommand(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WmReflectCommand(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WmReflectCommand (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WmReflectCommand(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Die <see cref="T:System.Windows.Forms.Message" />, die vom Fenster der obersten Ebene an das <see cref="T:System.Windows.Forms.ListBox" />-Steuerelement gesendet wurde.</param>
        <summary>Verarbeitet die Befehlsmeldung, die das <see cref="T:System.Windows.Forms.ListView" />-Steuerelement vom Fenster der obersten Ebene empfängt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Ein Windows-Meldungsobjekt.</param>
        <summary>Die Fensterprozedur der Liste.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Erbende Klassen können überschreiben, um zusätzliche Funktionalität hinzuzufügen, müssen jedoch die <xref:System.Windows.Forms.ListBox.WndProc%2A> Methode in der Basisklasse, um sicherzustellen, dass die Liste weiterhin ordnungsgemäß funktionsfähig.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für den Betrieb mit nicht verwaltetem Code. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ListBox" FullName="System.Windows.Forms.ListBox">
  <Metadata><Meta Name="ms.openlocfilehash" Value="99594594619fafd314ce4512fae73f312cd92c8a" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86984424" /></Metadata><TypeSignature Language="C#" Value="public class ListBox : System.Windows.Forms.ListControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListBox extends System.Windows.Forms.ListControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListBox" />
  <TypeSignature Language="VB.NET" Value="Public Class ListBox&#xA;Inherits ListControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListBox : System::Windows::Forms::ListControl" />
  <TypeSignature Language="F#" Value="type ListBox = class&#xA;    inherit ListControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ListControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.DefaultBindingProperty("SelectedValue")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultBindingProperty("SelectedValue")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.DefaultEvent("SelectedIndexChanged")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultEvent("SelectedIndexChanged")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.DefaultProperty("Items")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultProperty("Items")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Windows-Steuerelement zum Anzeigen einer Liste von Elementen dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das- <xref:System.Windows.Forms.ListBox> Steuerelement ermöglicht es Ihnen, dem Benutzer eine Liste von Elementen anzuzeigen, die der Benutzer durch Klicken auf auswählen kann. Ein <xref:System.Windows.Forms.ListBox> Steuerelement kann mithilfe der-Eigenschaft eine einzelne oder mehrere Auswahlmöglichkeiten bereitstellen <xref:System.Windows.Forms.ListBox.SelectionMode%2A> . <xref:System.Windows.Forms.ListBox>Stellt auch die- <xref:System.Windows.Forms.ListBox.MultiColumn%2A> Eigenschaft bereit, um die Anzeige von Elementen in Spalten anstelle einer geraden vertikalen Liste von Elementen zu aktivieren. Dadurch kann das Steuerelement mehr sichtbare Elemente anzeigen, und der Benutzer muss nicht mehr zu einem Element scrollen.  
  
 In der Regel verarbeitet Windows das Zeichnen der Elemente, die in angezeigt werden sollen <xref:System.Windows.Forms.ListBox> . Sie können die <xref:System.Windows.Forms.ListBox.DrawMode%2A> -Eigenschaft verwenden und das <xref:System.Windows.Forms.ListBox.MeasureItem> -Ereignis und das-Ereignis behandeln, <xref:System.Windows.Forms.ListBox.DrawItem> sodass Sie die von Windows bereitgestellte automatische Zeichnung überschreiben und die Elemente selbst zeichnen können. Mithilfe <xref:System.Windows.Forms.ListBox> von Steuerelementen, die vom Besitzer gezeichnet werden, können Elemente, Bilder oder eine andere Farbe oder Schriftart für den Text der einzelnen Elemente in der Liste angezeigt werden. Die <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> -Eigenschaft, <xref:System.Windows.Forms.ListBox.GetItemHeight%2A> , und unter <xref:System.Windows.Forms.ListBox.GetItemRectangle%2A> stützt Sie auch beim Zeichnen ihrer eigenen Elemente.  
  
 Zusätzlich zu Anzeige-und Auswahl Funktionen <xref:System.Windows.Forms.ListBox> bietet auch Features, mit denen Sie Elemente effizient hinzufügen <xref:System.Windows.Forms.ListBox> und innerhalb der Listenelemente nach Text suchen können. Die <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> -Methode und die- <xref:System.Windows.Forms.ListBox.EndUpdate%2A> Methode ermöglichen es Ihnen, eine große Anzahl von Elementen hinzuzufügen, <xref:System.Windows.Forms.ListBox> ohne dass das Steuerelement jedes Mal neu gezeichnet wird, wenn ein Element zur Liste hinzugefügt wird. Mit der <xref:System.Windows.Forms.ListBox.FindString%2A> -Methode und der- <xref:System.Windows.Forms.ListBox.FindStringExact%2A> Methode können Sie in der Liste nach einem Element suchen, das eine bestimmte Such Zeichenfolge enthält.  
  
 Die <xref:System.Windows.Forms.ListBox.Items%2A> <xref:System.Windows.Forms.ListBox.SelectedItems%2A> Eigenschaften, und <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> ermöglichen den Zugriff auf die drei Auflistungen, die von verwendet werden <xref:System.Windows.Forms.ListBox> . In der folgenden Tabelle werden die drei Auflistungen, die von verwendet werden, <xref:System.Windows.Forms.ListBox> sowie deren Verwendung im-Steuerelement erläutert  
  
|Sammlungsklasse|Verwendung innerhalb des <xref:System.Windows.Forms.ListBox>|  
|----------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Windows.Forms.ListBox.ObjectCollection>|Enthält alle im-Steuerelement enthaltenen Elemente <xref:System.Windows.Forms.ListBox> .|  
|<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>|Enthält eine Auflistung der ausgewählten Elemente, bei der es sich um eine Teilmenge der im Steuerelement enthaltenen Elemente handelt <xref:System.Windows.Forms.ListBox> .|  
|<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>|Enthält eine Auflistung der ausgewählten Indizes, bei der es sich um eine Teilmenge der Indizes von handelt <xref:System.Windows.Forms.ListBox.ObjectCollection> . Diese Indizes geben Elemente an, die ausgewählt sind.|  
  
 Die folgenden drei Beispiele zeigen die drei indizierten Auflistungen, die die- <xref:System.Windows.Forms.ListBox> Klasse unterstützt.  
  
 In der folgenden Tabelle wird ein Beispiel für die Speicherung <xref:System.Windows.Forms.ListBox.ObjectCollection> der Elemente von <xref:System.Windows.Forms.ListBox> und ihres Auswahl Zustands in einem Beispiel gezeigt <xref:System.Windows.Forms.ListBox> .  
  
|Index|Element|Auswahl Status innerhalb des Listen Felds|  
|-----------|----------|----------------------------------------|  
|0|Objekt1|Nicht markiert|  
|1|objekt2|Aktiviert|  
|2|object3|Nicht markiert|  
|3|object4|Aktiviert|  
|4|object5|Aktiviert|  
  
 Basierend auf dem <xref:System.Windows.Forms.ListBox.ObjectCollection> in der obigen Tabelle gezeigten wird in dieser Tabelle gezeigt, wie das <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> angezeigt wird.  
  
|Index|Element|  
|-----------|----------|  
|0|objekt2|  
|1|object4|  
|2|object5|  
  
 Basierend auf dem <xref:System.Windows.Forms.ListBox.ObjectCollection> in der obigen Tabelle gezeigten wird in dieser Tabelle gezeigt, wie das <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> angezeigt wird.  
  
|Index|Index des Elements|  
|-----------|-------------------|  
|0|1|  
|1|3|  
|2|4|  
  
 Mit der- <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der- <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasse können Sie Elemente hinzufügen <xref:System.Windows.Forms.ListBox> . Die- <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode kann ein beliebiges-Objekt akzeptieren, wenn der ein Member hinzugefügt wird <xref:System.Windows.Forms.ListBox> . Wenn ein Objekt hinzugefügt wird <xref:System.Windows.Forms.ListBox> , verwendet das Steuerelement den Text, der in der-Methode des-Objekts definiert ist, <xref:System.Object.ToString%2A> es sei denn, ein Elementname innerhalb des-Objekts wird in der- <xref:System.Windows.Forms.ListControl.DisplayMember%2A> Eigenschaft angegeben. Zusätzlich zum Hinzufügen von Elementen mithilfe der- <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der- <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasse können Sie auch Elemente mithilfe der- <xref:System.Windows.Forms.ListControl.DataSource%2A> Eigenschaft der-Klasse hinzufügen <xref:System.Windows.Forms.ListControl> .  
  
> [!NOTE]
>  Wenn Sie über ein <xref:System.Windows.Forms.ListBox> -,- <xref:System.Windows.Forms.ComboBox> oder-Element in <xref:System.Windows.Forms.CheckedListBox> einem Windows Form-Basiselement verfügen und die Zeichen folgen Auflistungen dieser Steuerelemente in einem abgeleiteten Windows-Formular ändern möchten, müssen die Zeichen folgen Auflistungen dieser Steuerelemente im Windows-Basis Formular leer sein. Wenn die Zeichen folgen Auflistungen nicht leer sind, werden Sie schreibgeschützt, wenn Sie ein anderes Windows Form ableiten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Windows.Forms.ListBox> Steuerelement erstellt wird, das mehrere Elemente in Spalten anzeigt und in der Liste des Steuer Elements mehr als ein Element ausgewählt werden kann. Der Code für das Beispiel fügt der <xref:System.Windows.Forms.ListBox> mithilfe der- <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der-Klasse 50 Elemente hinzu <xref:System.Windows.Forms.ListBox.ObjectCollection> und wählt dann mithilfe der-Methode drei Elemente aus der Liste aus <xref:System.Windows.Forms.ListBox.SetSelected%2A> . Der Code zeigt dann Werte aus der Auflistung <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> , über die <xref:System.Windows.Forms.ListBox.SelectedItems%2A> -Eigenschaft und <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> über die-Eigenschaft an <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> . Dieses Beispiel erfordert, dass sich der Code in einem befindet und von einem aufgerufen wird <xref:System.Windows.Forms.Form> .  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.ListBox" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Windows.Forms.ListBox> Steuerelement erstellt wird, das mehrere Elemente in Spalten anzeigt und in der Liste des Steuer Elements mehr als ein Element ausgewählt werden kann. Der Code für das Beispiel fügt der <xref:System.Windows.Forms.ListBox> mithilfe der- <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der-Klasse 50 Elemente hinzu <xref:System.Windows.Forms.ListBox.ObjectCollection> und wählt dann mithilfe der-Methode drei Elemente aus der Liste aus <xref:System.Windows.Forms.ListBox.SetSelected%2A> . Der Code zeigt dann Werte aus der Auflistung <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> , über die <xref:System.Windows.Forms.ListBox.SelectedItems%2A> -Eigenschaft und <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> über die-Eigenschaft an <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> . Dieses Beispiel erfordert, dass sich der Code in einem befindet und von einem aufgerufen wird <xref:System.Windows.Forms.Form> .  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddItemsCore">
      <MemberSignature Language="C#" Value="protected virtual void AddItemsCore (object[] value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddItemsCore(object[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.AddItemsCore(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddItemsCore (value As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddItemsCore(cli::array &lt;System::Object ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddItemsCore : obj[] -&gt; unit&#xA;override this.AddItemsCore : obj[] -&gt; unit" Usage="listBox.AddItemsCore value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Obsolete("This method has been deprecated.  There is no replacement.  http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method has been deprecated.  There is no replacement.  http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="value">Ein Array von -Objekten.</param>
        <summary>Dieser Member ist veraltet und kann nicht ersetzt werden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowSelection">
      <MemberSignature Language="C#" Value="protected override bool AllowSelection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.AllowSelection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property AllowSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool AllowSelection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowSelection : bool" Usage="System.Windows.Forms.ListBox.AllowSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Windows.Forms.ListBox" /> derzeit das Auswählen von Listenelementen ermöglicht.</summary>
        <value><see langword="true" />, wenn <see cref="T:System.Windows.Forms.SelectionMode" /> nicht auf <see cref="F:System.Windows.Forms.SelectionMode.None" /> festgelegt ist, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListBox.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Hintergrundfarbe für das Steuerelement ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Color" />, die die Hintergrundfarbe des Steuerelements darstellt. Der Standardwert ist der Wert der <see cref="P:System.Windows.Forms.Control.DefaultBackColor" />-Eigenschaft.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : System.Drawing.Image with get, set" Usage="System.Windows.Forms.ListBox.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ist für diese Klasse nicht relevant.</summary>
        <value>Das Hintergrundbild des Formulars.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageChanged : EventHandler " Usage="member this.BackgroundImageChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich die <see cref="P:System.Windows.Forms.ListBox.BackgroundImage" />-Eigenschaft der Bezeichnung ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.ListBox.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Layout des Hintergrundbilds für eine <see cref="T:System.Windows.Forms.ListBox" /> ab, wie in der <see cref="T:System.Windows.Forms.ImageLayout" />-Enumeration definiert, oder legt dieses fest.</summary>
        <value>Einer der Werte von <see cref="T:System.Windows.Forms.ImageLayout" />. Die Werte lauten <see langword="Center" />, <see langword="None" />, <see langword="Stretch" />, <see langword="Tile" /> oder <see langword="Zoom" />. Der Standardwert lautet <see langword="Center" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der angegebene Enumerationswert ist nicht vorhanden.</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich die <see cref="P:System.Windows.Forms.ListBox.BackgroundImageLayout" />-Eigenschaft ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberSignature Language="F#" Value="member this.BeginUpdate : unit -&gt; unit" Usage="listBox.BeginUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erhält die Leistung aufrecht, während der <see cref="T:System.Windows.Forms.ListBox" /> Elemente einzeln hinzugefügt werden, indem das Zeichnen des Steuerelements bis zum Aufruf der <see cref="M:System.Windows.Forms.ListBox.EndUpdate" />-Methode verhindert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der bevorzugte Weg, mehrere Elemente hinzuzufügen, <xref:System.Windows.Forms.ListBox> ist die Verwendung der- <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> Methode der- <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasse (über die- <xref:System.Windows.Forms.ListBox.Items%2A> Eigenschaft des-Objekts <xref:System.Windows.Forms.ListBox> ). Dies ermöglicht es Ihnen, der Liste in einem einzelnen Vorgang ein Array von Elementen hinzuzufügen. Wenn Sie jedoch Elemente einzeln mithilfe der-Methode der-Klasse hinzufügen möchten <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> <xref:System.Windows.Forms.ListBox.ObjectCollection> , können Sie die-Methode verwenden, <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> um zu verhindern, dass das Steuer <xref:System.Windows.Forms.ListBox> Element jedes Mal neu gezeichnet wird, wenn ein Element zur Liste hinzugefügt wird. Nachdem Sie die Aufgabe zum Hinzufügen von Elementen zur Liste abgeschlossen haben, müssen Sie die-Methode aufzurufen, <xref:System.Windows.Forms.ListBox.EndUpdate%2A> damit das <xref:System.Windows.Forms.ListBox> neu gezeichnet werden kann. Diese Methode zum Hinzufügen von Elementen kann das geflistete Zeichnen von verhindern <xref:System.Windows.Forms.ListBox> , wenn eine große Anzahl von Elementen zur Liste hinzugefügt wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> -Methode und die- <xref:System.Windows.Forms.ListBox.EndUpdate%2A> Methode beim Hinzufügen von 5000 Elementen zu einem verwendet <xref:System.Windows.Forms.ListBox> . Dieses Beispiel setzt voraus, dass ein <xref:System.Windows.Forms.ListBox> Steuerelement mit dem Namen `listBox1` zu einem hinzugefügt wurde <xref:System.Windows.Forms.Form> und dass diese Methode im Formular abgelegt und von ihr aufgerufen wird.  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.EndUpdate" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BorderStyle : System.Windows.Forms.BorderStyle with get, set" Usage="System.Windows.Forms.ListBox.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(-504)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(-504)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ des Rahmens ab, der um <see cref="T:System.Windows.Forms.ListBox" /> gezeichnet wird, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.BorderStyle" />-Werte. Der Standardwert ist <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der Wert ist keiner der <see cref="T:System.Windows.Forms.BorderStyle" />-Werte.</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="ClearSelected">
      <MemberSignature Language="C#" Value="public void ClearSelected ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearSelected() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ClearSelected" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearSelected ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearSelected();" />
      <MemberSignature Language="F#" Value="member this.ClearSelected : unit -&gt; unit" Usage="listBox.ClearSelected " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Hebt die Auswahl sämtlicher Elemente in der <see cref="T:System.Windows.Forms.ListBox" /> auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Aufrufen dieser Methode entspricht dem Festlegen der <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> -Eigenschaft auf eine negative (-1). Mit dieser Methode können Sie die Auswahl aller Elemente in der Liste schnell deaktivieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die- <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft mit der-Eigenschaft verwendet wird <xref:System.Windows.Forms.ListBox.TopIndex%2A> , um das aktuell ausgewählte Element an den Anfang der Liste der Elemente im Anzeigebereich von zu verschieben <xref:System.Windows.Forms.ListBox> . Im Beispiel wird das Entfernen von Elementen mithilfe der- <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType> -Klasse und das Löschen der Elementauswahl mithilfe der- <xref:System.Windows.Forms.ListBox.ClearSelected%2A> Methode veranschaulicht. Der Code verschiebt zuerst das aktuell ausgewählte Element in der <xref:System.Windows.Forms.ListBox> an den Anfang der Liste. Der Code entfernt dann alle Elemente vor dem aktuell ausgewählten Element und löscht alle Auswahlmöglichkeiten in <xref:System.Windows.Forms.ListBox> . Für dieses Beispiel ist es erforderlich, dass einem <xref:System.Windows.Forms.ListBox> Formular ein enthaltende Element hinzugefügt wird und derzeit in der ein Element ausgewählt ist <xref:System.Windows.Forms.ListBox> .  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn auf das Steuerelement <see cref="T:System.Windows.Forms.ListBox" /> geklickt wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidth">
      <MemberSignature Language="C#" Value="public int ColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ColumnWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ColumnWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ColumnWidth : int with get, set" Usage="System.Windows.Forms.ListBox.ColumnWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Localizable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Spaltenbreite in einer mehrspaltigen <see cref="T:System.Windows.Forms.ListBox" /> ab oder legt diese fest.</summary>
        <value>Die Breite der einzelnen Spalten des Steuerelements in Pixel. Die Standardeinstellung ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie den Wert auf NULL (0) festlegen, wird jeder Spalte eine Standardbreite zugewiesen. Wenn <xref:System.Windows.Forms.ListBox> eine mehrspaltige ist <xref:System.Windows.Forms.ListBox> , gibt diese Eigenschaft die aktuelle Breite jeder Spalte in der Liste zurück. Mit dieser Eigenschaft können Sie sicherstellen, dass die Elemente in einer mehrspaltigen Spalte <xref:System.Windows.Forms.ListBox> ordnungsgemäß angezeigt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine einfache zwei Spalten veranschaulicht <xref:System.Windows.Forms.ListBox> .  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Eigenschaft ist ein Wert zugewiesen, der kleiner als 0 ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="listBox.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein neues Objekt für die Barrierefreiheit für dieses Steuerelement.</summary>
        <returns>Ein Objekt für die Barrierefreiheit für dieses Steuerelement.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItemCollection">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ListBox.ObjectCollection CreateItemCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.ListBox/ObjectCollection CreateItemCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.CreateItemCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateItemCollection () As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::ListBox::ObjectCollection ^ CreateItemCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateItemCollection : unit -&gt; System.Windows.Forms.ListBox.ObjectCollection&#xA;override this.CreateItemCollection : unit -&gt; System.Windows.Forms.ListBox.ObjectCollection" Usage="listBox.CreateItemCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine neue Instanz der Elementauflistung.</summary>
        <returns>Eine <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />, die die neue Elementauflistung darstellt.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Sie können dies in den abgeleiteten Klassen überschreiben, um eine andere Sammlung zum Speichern Ihrer Elemente bereitzustellen.</para></block>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.ListBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die benötigten Erstellungsparameter ab, wenn das Steuerelementhandle erstellt wird.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.CreateParams" />-Eigenschaft, die die erforderlichen Erstellungsparameter enthält, wenn das Handle für das Steuerelement erstellt wird.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomTabOffsets">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.IntegerCollection CustomTabOffsets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/IntegerCollection CustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomTabOffsets As ListBox.IntegerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::IntegerCollection ^ CustomTabOffsets { System::Windows::Forms::ListBox::IntegerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomTabOffsets : System.Windows.Forms.ListBox.IntegerCollection" Usage="System.Windows.Forms.ListBox.CustomTabOffsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+IntegerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Breite der Registerkarten zwischen den Elementen in der <see cref="T:System.Windows.Forms.ListBox" /> ab.</summary>
        <value>Eine Auflistung von ganzen Zahlen, die die Breiten der Registerkarten darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das ganzzahlige Array enthält die Tabstopps in aufsteigender Reihenfolge.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItemHeight">
      <MemberSignature Language="C#" Value="public const int DefaultItemHeight = 13;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 DefaultItemHeight = (13)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.DefaultItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultItemHeight As Integer  = 13" />
      <MemberSignature Language="C++ CLI" Value="public: int DefaultItemHeight = 13;" />
      <MemberSignature Language="F#" Value="val mutable DefaultItemHeight : int" Usage="System.Windows.Forms.ListBox.DefaultItemHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>13</MemberValue>
      <Docs>
        <summary>Gibt die Standardelementhöhe für eine Ownerdrawn-<see cref="T:System.Windows.Forms.ListBox" /> an.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.ListBox.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standardgröße des Steuerelements ab.</summary>
        <value>Die Standard-<see cref="T:System.Drawing.Size" /> des Steuerelements.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberSignature Language="F#" Value="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " Usage="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich ein Darstellungsaspekt eines Ownerdrawn-<see cref="T:System.Windows.Forms.ListBox" /> ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird von einem vom Besitzer gezeichneten verwendet <xref:System.Windows.Forms.ListBox> . Das-Ereignis wird nur ausgelöst, wenn die- <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft auf oder festgelegt ist `DrawMode.OwnerDrawFixed` `DrawMode.OwnerDrawVariable` . Sie können dieses Ereignis verwenden, um die Aufgaben auszuführen, die zum Zeichnen von Elementen in erforderlich sind <xref:System.Windows.Forms.ListBox> . Wenn Sie über ein Element mit variabler Größenordnung verfügen (wenn die- <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft auf festgelegt ist `DrawMode.OwnerDrawVariable` ), wird das-Ereignis vor dem Zeichnen eines Elements <xref:System.Windows.Forms.ListBox.MeasureItem> ausgelöst. Sie können einen Ereignishandler für das- <xref:System.Windows.Forms.ListBox.MeasureItem> Ereignis erstellen, um die Größe des Elements anzugeben, das Sie in Ihrem Ereignishandler für das-Ereignis zeichnen werden <xref:System.Windows.Forms.ListBox.DrawItem> .  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie vom Besitzer gezeichnete Elemente erstellt werden <xref:System.Windows.Forms.ListBox> . Der Code verwendet die <xref:System.Windows.Forms.ListBox.DrawMode%2A> -Eigenschaft, um anzugeben, dass die gezeichneten Elemente eine festgelegte Größe aufweisen, und das- <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis, das die Zeichnung der einzelnen Elemente in der ausführt <xref:System.Windows.Forms.ListBox> . Der Beispielcode verwendet die Eigenschaften und Methoden der- <xref:System.Windows.Forms.DrawItemEventArgs> Klasse, die als Parameter an den-Ereignishandler übergeben werden, um die Elemente zu zeichnen. Dieses Beispiel setzt voraus, dass ein-Steuerelement mit dem <xref:System.Windows.Forms.ListBox> Namen `listBox1` zu einem Formular hinzugefügt wurde und dass das <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis von dem im Beispielcode definierten Ereignishandler behandelt wird. Das Beispiel erfordert auch, dass Elemente <xref:System.Windows.Forms.ListBox> mit dem Text "Apple", "Orange" und "Plum" in dieser Reihenfolge hinzugefügt wurden.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DrawMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DrawMode DrawMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DrawMode DrawMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DrawMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DrawMode As DrawMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DrawMode DrawMode { System::Windows::Forms::DrawMode get(); void set(System::Windows::Forms::DrawMode value); };" />
      <MemberSignature Language="F#" Value="member this.DrawMode : System.Windows.Forms.DrawMode with get, set" Usage="System.Windows.Forms.ListBox.DrawMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Zeichnungsmodus für das Steuerelement ab oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.DrawMode" />-Werte, der den Modus zum Zeichnen der Elemente für das Steuerelement darstellt. Der Standardwert ist <see langword="DrawMode.Normal" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie vom Besitzer gezeichnete Elemente erstellt werden <xref:System.Windows.Forms.ListBox> . Der Code verwendet die <xref:System.Windows.Forms.ListBox.DrawMode%2A> -Eigenschaft, um anzugeben, dass die gezeichneten Elemente eine festgelegte Größe aufweisen, und das- <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis, das die Zeichnung der einzelnen Elemente in der ausführt <xref:System.Windows.Forms.ListBox> . Der Beispielcode verwendet die Eigenschaften und Methoden der- <xref:System.Windows.Forms.DrawItemEventArgs> Klasse, die als Parameter an den-Ereignishandler übergeben werden, um die Elemente zu zeichnen. Dieses Beispiel setzt voraus, dass ein-Steuerelement mit dem <xref:System.Windows.Forms.ListBox> Namen `listBox1` zu einem Formular hinzugefügt wurde und dass das <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis von dem im Beispielcode definierten Ereignishandler behandelt wird. Das Beispiel erfordert auch, dass Elemente <xref:System.Windows.Forms.ListBox> mit dem Text "Apple", "Orange" und "Plum" in dieser Reihenfolge hinzugefügt wurden.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der Wert, der der Eigenschaft zugewiesen wurde, ist kein Member der <see cref="T:System.Windows.Forms.DrawMode" />-Enumeration.</exception>
        <exception cref="T:System.ArgumentException">Eine mehrspaltige <see cref="T:System.Windows.Forms.ListBox" /> darf keine Höhe mit variabler Größe aufweisen.</exception>
        <altmember cref="T:System.Windows.Forms.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberSignature Language="F#" Value="member this.EndUpdate : unit -&gt; unit" Usage="listBox.EndUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Nimmt das Zeichnen des <see cref="T:System.Windows.Forms.ListBox" />-Steuerelements wieder auf, nachdem es durch die <see cref="M:System.Windows.Forms.ListBox.BeginUpdate" />-Methode ausgesetzt wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die bevorzugte Methode zum Hinzufügen von Elementen zur <xref:System.Windows.Forms.ListBox> ist die Verwendung der- <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> Methode der- <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasse (über die- <xref:System.Windows.Forms.ListBox.Items%2A> Eigenschaft des <xref:System.Windows.Forms.ListBox> ). Auf diese Weise können Sie der Liste ein Array von Elementen gleichzeitig hinzufügen. Wenn Sie jedoch Elemente einzeln mithilfe der-Methode der-Klasse hinzufügen möchten <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> <xref:System.Windows.Forms.ListBox.ObjectCollection> , können Sie die-Methode verwenden, <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> um zu verhindern, dass das Steuer <xref:System.Windows.Forms.ListBox> Element jedes Mal neu gezeichnet wird, wenn ein Element zur Liste hinzugefügt wird. Nachdem Sie die Aufgabe zum Hinzufügen von Elementen zur Liste abgeschlossen haben, müssen Sie die-Methode aufzurufen, <xref:System.Windows.Forms.ListBox.EndUpdate%2A> damit das <xref:System.Windows.Forms.ListBox> neu gezeichnet werden kann. Diese Methode zum Hinzufügen von Elementen kann das geflistete Zeichnen von verhindern <xref:System.Windows.Forms.ListBox> , wenn eine große Anzahl von Elementen zur Liste hinzugefügt wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> -Methode und die- <xref:System.Windows.Forms.ListBox.EndUpdate%2A> Methode beim Hinzufügen von 5000 Elementen zu einem verwendet <xref:System.Windows.Forms.ListBox> . Dieses Beispiel setzt voraus, dass ein <xref:System.Windows.Forms.ListBox> Steuerelement mit dem Namen `listBox1` zu einem hinzugefügt wurde <xref:System.Windows.Forms.Form> und dass diese Methode im Formular abgelegt und von ihr aufgerufen wird.  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.BeginUpdate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindString">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sucht das erste Element in der <see cref="T:System.Windows.Forms.ListBox" />, das mit der angegebenen Zeichenfolge beginnt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindString (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindString(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.FindString : string -&gt; int" Usage="listBox.FindString s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Der zu suchende Text.</param>
        <summary>Sucht das erste Element in der <see cref="T:System.Windows.Forms.ListBox" />, das mit der angegebenen Zeichenfolge beginnt.</summary>
        <returns>Der nullbasierte Index des ersten gefundenen Elements. Wenn keine Übereinstimmung gefunden wurde, wird <see langword="ListBox.NoMatches" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der durch diese Methode ausgeführten Suche wird die Groß-/Kleinschreibung nicht beachtet. Die Suche sucht nach Wörtern, die teilweise mit dem angegebenen Suchzeichen Folgen Parameter,, identisch sind `s` . Mit dieser Methode können Sie nach dem ersten Element suchen, das mit der angegebenen Zeichenfolge übereinstimmt. Sie können dann Aufgaben ausführen, wie z. b. das Entfernen des Elements, das den Suchtext enthält, indem Sie die <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> -Methode verwenden oder den Text des Elements ändern. Wenn Sie den angegebenen Text gefunden haben, <xref:System.Windows.Forms.ListBox> können Sie die-Version der-Methode verwenden, die <xref:System.Windows.Forms.ListBox.FindString%2A> einen Parameter zum Angeben eines Start Indexes in bereitstellt, wenn Sie in der nach anderen Instanzen des Texts suchen möchten <xref:System.Windows.Forms.ListBox> . Wenn Sie eine Suche nach einer genauen Wort Übereinstimmung anstelle einer partiellen Entsprechung durchführen möchten, verwenden Sie die- <xref:System.Windows.Forms.ListBox.FindStringExact%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die-Methode verwendet wird <xref:System.Windows.Forms.ListBox.FindString%2A> , um nach der ersten Instanz einer Zeichenfolge in einer zu suchen <xref:System.Windows.Forms.ListBox> . Wenn keine Elemente gefunden werden, die der Such Zeichenfolge entsprechen, wird <xref:System.Windows.Forms.ListBox.FindString%2A> der Wert-1 zurückgegeben, und im Beispiel wird ein angezeigt <xref:System.Windows.Forms.MessageBox> . Wenn ein Element gefunden wird, das mit dem Suchtext übereinstimmt, wird im Beispiel die-Methode verwendet, <xref:System.Windows.Forms.ListBox.SetSelected%2A> um das Element in der auszuwählen <xref:System.Windows.Forms.ListBox> .  
  
 [!code-cpp[ListBox.FindString2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert des <paramref name="s" />-Parameters ist kleiner als -1 oder größer oder gleich der Elementanzahl.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindString (s As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindString(System::String ^ s, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.FindString : string * int -&gt; int" Usage="listBox.FindString (s, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Der zu suchende Text.</param>
        <param name="startIndex">Der nullbasierte Index des Elements vor dem ersten zu durchsuchenden Element. Legen Sie -1 fest, um die Suche am Anfang des Steuerelements zu beginnen.</param>
        <summary>Sucht das erste Element in der <see cref="T:System.Windows.Forms.ListBox" />, das mit der angegebenen Zeichenfolge beginnt. Die Suche beginnt an einem bestimmten Startindex.</summary>
        <returns>Der nullbasierte Index des ersten gefundenen Elements. Wenn keine Übereinstimmung gefunden wurde, wird <see langword="ListBox.NoMatches" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der durch diese Methode ausgeführten Suche wird die Groß-/Kleinschreibung nicht beachtet. Die Suche sucht nach Wörtern, die teilweise mit dem angegebenen Suchzeichen Folgen Parameter,, identisch sind `s` . Mit dieser Methode können Sie nach dem ersten Element suchen, das mit der angegebenen Zeichenfolge am angegebenen Start Index in der Liste der Elemente für übereinstimmt <xref:System.Windows.Forms.ListBox> . Sie können dann Aufgaben ausführen, wie z. b. das Entfernen des Elements, das den Suchtext enthält, indem Sie die <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> -Methode verwenden oder den Text des Elements ändern. Diese Methode wird in der Regel verwendet, nachdem ein-Rückruf mit der-Version dieser Methode durchgeführt wurde, die keinen Start Index angibt. Nachdem ein erstes Element in der Liste gefunden wurde, wird diese Methode in der Regel verwendet, um weitere Instanzen des Suchtexts zu suchen, indem die Indexposition im- `startIndex` Parameter des Elements nach der ersten gefundenen Instanz des Suchtexts angegeben wird. Wenn Sie eine Suche nach einer genauen Wort Übereinstimmung anstelle einer partiellen Entsprechung durchführen möchten, verwenden Sie die- <xref:System.Windows.Forms.ListBox.FindStringExact%2A> Methode.  
  
> [!NOTE]
>  Wenn die Suche den unteren Rand von erreicht <xref:System.Windows.Forms.ListBox> , wird die Suche von der obersten <xref:System.Windows.Forms.ListBox> Position zurück zu dem durch den-Parameter angegebenen Element fortgesetzt `startIndex` .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die-Methode verwendet wird <xref:System.Windows.Forms.ListBox.FindString%2A> , um nach allen Instanzen des Suchtexts in den Elementen von zu suchen <xref:System.Windows.Forms.ListBox> . Im Beispiel wird die-Version der- <xref:System.Windows.Forms.ListBox.FindString%2A> Methode verwendet, die es Ihnen ermöglicht, einen Start Suchindex anzugeben, von dem aus eine kontinuierliche Suche nach allen Elementen in durchzuführen ist <xref:System.Windows.Forms.ListBox> . Das Beispiel zeigt auch, wie Sie ermitteln können, wann die Methode mit der <xref:System.Windows.Forms.ListBox.FindString%2A> Suche von oben nach unten in der Liste beginnt, um eine rekursive Suche zu verhindern. Sobald Elemente in der gefunden werden <xref:System.Windows.Forms.ListBox> , werden Sie mithilfe der- <xref:System.Windows.Forms.ListBox.SetSelected%2A> Methode ausgewählt.  
  
 [!code-cpp[ListBox.FindString#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="startIndex" />-Parameter ist kleiner als 0 (null) bzw. größer oder gleich dem Wert der <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" />-Eigenschaft der <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />-Klasse.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindStringExact">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sucht das erste Element in <see cref="T:System.Windows.Forms.ListBox" />, das mit der angegebenen Zeichenfolge genau übereinstimmt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStringExact (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindStringExact(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.FindStringExact : string -&gt; int" Usage="listBox.FindStringExact s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Der zu suchende Text.</param>
        <summary>Sucht das erste Element in <see cref="T:System.Windows.Forms.ListBox" />, das mit der angegebenen Zeichenfolge genau übereinstimmt.</summary>
        <returns>Der nullbasierte Index des ersten gefundenen Elements. Wenn keine Übereinstimmung gefunden wurde, wird <see langword="ListBox.NoMatches" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der durch diese Methode ausgeführten Suche wird die Groß-/Kleinschreibung nicht beachtet. Bei der Suche wird nach einer genauen Entsprechung zu den Wörtern gesucht, die im Such Zeichenfolgen-Parameter angegeben sind `s` . Mit dieser Methode können Sie nach dem ersten Element suchen, das mit der angegebenen Zeichenfolge übereinstimmt. Sie können dann Aufgaben ausführen, wie z. b. das Entfernen des Elements, das den Suchtext enthält, indem Sie die <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> -Methode verwenden oder den Text des Elements ändern. Wenn Sie den angegebenen Text gefunden haben, <xref:System.Windows.Forms.ListBox> können Sie die-Version der-Methode verwenden, die <xref:System.Windows.Forms.ListBox.FindStringExact%2A> einen Parameter zum Angeben eines Start Indexes in bereitstellt, wenn Sie in der nach anderen Instanzen des Texts suchen möchten <xref:System.Windows.Forms.ListBox> . Wenn Sie anstelle einer exakten Wort Übereinstimmung eine partielle Wort Suche durchführen möchten, verwenden Sie die- <xref:System.Windows.Forms.ListBox.FindString%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die-Methode verwendet wird <xref:System.Windows.Forms.ListBox.FindStringExact%2A?displayProperty=nameWithType> , um ein-Steuerelement nach einem Element zu durchsuchen <xref:System.Windows.Forms.ListBox> , das exakt einer angegebenen Zeichenfolge entspricht Wenn keine Elemente gefunden werden, die der Such Zeichenfolge entsprechen, <xref:System.Windows.Forms.ListBox.FindStringExact%2A> gibt den Wert-1 zurück, und im Beispiel wird ein-Wert angezeigt <xref:System.Windows.Forms.MessageBox> . Wenn ein Element gefunden wird, das mit dem Suchtext übereinstimmt, wird im Beispiel die-Methode verwendet, <xref:System.Windows.Forms.ListBox.SetSelected%2A> um das Element in der auszuwählen <xref:System.Windows.Forms.ListBox> .  
  
 [!code-cpp[ListBox.FindStringExact#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStringExact (s As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindStringExact(System::String ^ s, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.FindStringExact : string * int -&gt; int" Usage="listBox.FindStringExact (s, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Der zu suchende Text.</param>
        <param name="startIndex">Der nullbasierte Index des Elements vor dem ersten zu durchsuchenden Element. Legen Sie -1 fest, um die Suche am Anfang des Steuerelements zu beginnen.</param>
        <summary>Sucht das erste Element in <see cref="T:System.Windows.Forms.ListBox" />, das mit der angegebenen Zeichenfolge genau übereinstimmt. Die Suche beginnt an einem bestimmten Startindex.</summary>
        <returns>Der nullbasierte Index des ersten gefundenen Elements. Wenn keine Übereinstimmung gefunden wurde, wird <see langword="ListBox.NoMatches" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der durch diese Methode ausgeführten Suche wird die Groß-/Kleinschreibung nicht beachtet. Die Suche sucht nach Wörtern, die exakt mit dem angegebenen Suchzeichen Folgen Parameter übereinstimmen `s` . Mit dieser Methode können Sie nach dem ersten Element suchen, das mit der angegebenen Zeichenfolge am angegebenen Start Index in der Liste der Elemente für übereinstimmt <xref:System.Windows.Forms.ListBox> . Sie können dann Aufgaben ausführen, z. b. das Element, das den Suchtext enthält, mithilfe der <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> -Methode entfernen oder den Text des Elements ändern. Diese Methode wird in der Regel verwendet, nachdem ein-Rückruf mit der-Version dieser Methode durchgeführt wurde, die keinen Start Index angibt. Nachdem ein erstes Element in der Liste gefunden wurde, wird diese Methode in der Regel verwendet, um weitere Instanzen des Suchtexts zu suchen, indem die Indexposition im- `startIndex` Parameter des Elements nach der ersten gefundenen Instanz des Suchtexts angegeben wird. Wenn Sie anstelle einer exakten Wort Übereinstimmung eine partielle Wort Suche durchführen möchten, verwenden Sie die- <xref:System.Windows.Forms.ListBox.FindString%2A> Methode.  
  
> [!NOTE]
>  Wenn die Suche den unteren Rand von erreicht <xref:System.Windows.Forms.ListBox> , wird die Suche von der obersten <xref:System.Windows.Forms.ListBox> Position zurück zu dem durch den-Parameter angegebenen Element fortgesetzt `startIndex` .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die-Methode verwendet wird <xref:System.Windows.Forms.ListBox.FindStringExact%2A> , um nach allen Elementen in einem zu suchen <xref:System.Windows.Forms.ListBox> , die exakt mit dem angegebenen Suchtext übereinstimmen. Im Beispiel wird die-Version der- <xref:System.Windows.Forms.ListBox.FindStringExact%2A> Methode verwendet, die es Ihnen ermöglicht, einen Start Suchindex anzugeben, von dem aus eine kontinuierliche Suche nach allen Elementen in durchzuführen ist <xref:System.Windows.Forms.ListBox> . Das Beispiel zeigt auch, wie Sie ermitteln können, wann die- <xref:System.Windows.Forms.ListBox.FindStringExact%2A> Methode die Suche am Anfang der Liste beginnt, nachdem Sie das Ende der Liste der Elemente erreicht hat, um eine rekursive Suche zu verhindern. Sobald Elemente in der gefunden werden <xref:System.Windows.Forms.ListBox> , werden Sie mithilfe der- <xref:System.Windows.Forms.ListBox.SetSelected%2A> Methode ausgewählt.  
  
 [!code-cpp[ListBox.FindStringExact2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="startIndex" />-Parameter ist kleiner als 0 (null) bzw. größer oder gleich dem Wert der <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" />-Eigenschaft der <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />-Klasse.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Windows.Forms.ListBox.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Schriftart für die Anzeige von Text im Steuerelement ab oder legt diese fest.</summary>
        <value>Der <see cref="T:System.Drawing.Font" />, der auf den Text angewendet werden soll, der im Steuerelement angezeigt wird. Der Standardwert ist der Wert der <see cref="P:System.Windows.Forms.Control.DefaultFont" />-Eigenschaft.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListBox.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Vordergrundfarbe des Steuerelements ab oder legt diese fest.</summary>
        <value>Die Vordergrund-<see cref="T:System.Drawing.Color" /> des Steuerelements. Der Standardwert ist der Wert der <see cref="P:System.Windows.Forms.Control.DefaultForeColor" />-Eigenschaft.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemHeight">
      <MemberSignature Language="C#" Value="public int GetItemHeight (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetItemHeight(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemHeight (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetItemHeight(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemHeight : int -&gt; int" Usage="listBox.GetItemHeight index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements, dessen Höhe zurückgegeben werden soll.</param>
        <summary>Gibt die Höhe eines Elements in der <see cref="T:System.Windows.Forms.ListBox" /> zurück.</summary>
        <returns>Die Höhe des angegebenen Elements in Pixel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die- <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft nicht auf festgelegt ist `DrawMode.OwnerDrawVariable` , wird der Wert des Index-Parameters ignoriert, da alle Elemente in einem Standard <xref:System.Windows.Forms.ListBox> dieselbe Größe haben. Sie können diese Eigenschaft verwenden, wenn Sie eine von einem Besitzer gezeichnete verwenden <xref:System.Windows.Forms.ListBox> , um die Größe eines beliebigen Elements innerhalb von zu bestimmen <xref:System.Windows.Forms.ListBox> .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der angegebene Wert des <paramref name="index" />-Parameters ist kleiner als 0 (null) oder größer als die Elementanzahl.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetItemRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRectangle (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRectangle(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemRectangle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRectangle (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRectangle(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemRectangle : int -&gt; System.Drawing.Rectangle" Usage="listBox.GetItemRectangle index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements, dessen umschließendes Rechteck zurückgegeben werden soll.</param>
        <summary>Gibt das umschließende Rechteck für ein Element in <see cref="T:System.Windows.Forms.ListBox" /> zurück.</summary>
        <returns>Ein <see cref="T:System.Drawing.Rectangle" />, das das umschließende Rechteck für das angegebene Element darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das im-Parameter angegebene Element `index` nicht sichtbar ist, befindet sich das von dieser Methode zurückgegebene Rechteck außerhalb des sichtbaren Bereichs des Steuer Elements. Mit dieser Methode können Sie die Größe und Position eines Elements in der Liste bestimmen. Sie können die-Methode verwenden, um die Höhe eines Elements, insbesondere eines von einem Besitzer gezeichneten Listen Elements mit variabler Höhe, zu erhalten <xref:System.Windows.Forms.ListBox.GetItemHeight%2A> .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als 0 (null) bzw. größer oder gleich dem Wert der <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" />-Eigenschaft der <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />-Klasse.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetScaledBounds (bounds As Rectangle, factor As SizeF, specified As BoundsSpecified) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Drawing::Rectangle GetScaledBounds(System::Drawing::Rectangle bounds, System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.GetScaledBounds : System.Drawing.Rectangle * System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; System.Drawing.Rectangle" Usage="listBox.GetScaledBounds (bounds, factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="bounds">Ein <see cref="T:System.Drawing.Rectangle" />, das den Bereich angibt, für den die Anzeigebegrenzungen abgerufen werden sollen.</param>
        <param name="factor">Die Höhe und Breite der Begrenzungen des Steuerelements.</param>
        <param name="specified">Einer der Werte von <see cref="T:System.Windows.Forms.BoundsSpecified" />, die die Grenzen des Steuerelements angeben, die beim Definieren seiner Größe und Position anzugeben sind.</param>
        <summary>Ruft die Begrenzungen ab, innerhalb derer die <see cref="T:System.Windows.Forms.ListBox" /> skaliert wird.</summary>
        <returns>Ein <see cref="T:System.Drawing.Rectangle" />, das die Begrenzungen darstellt, innerhalb derer das Steuerelement skaliert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Windows.Forms.ListBox> Klasse überschreibt die- <xref:System.Windows.Forms.Control.GetScaledBounds%2A?displayProperty=nameWithType> Methode, um sicherzustellen, dass die angeforderte Höhe anstatt der aktuellen Höhe skaliert wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelected">
      <MemberSignature Language="C#" Value="public bool GetSelected (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetSelected(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetSelected(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSelected (index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetSelected(int index);" />
      <MemberSignature Language="F#" Value="member this.GetSelected : int -&gt; bool" Usage="listBox.GetSelected index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements, der bestimmt, ob dieses ausgewählt ist.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob das angegebene Element ausgewählt ist.</summary>
        <returns><see langword="true" />, wenn das angegebene Element derzeit in der <see cref="T:System.Windows.Forms.ListBox" /> ausgewählt ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie schnell feststellen, ob ein bestimmtes Element ausgewählt ist. Diese Methode ist nützlich, wenn ein bestimmter Vorgang durchgeführt werden muss, wenn ein bestimmtes Element in einer Mehrfachauswahl <xref:System.Windows.Forms.ListBox> ausgewählt wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die- <xref:System.Windows.Forms.ListBox.GetSelected%2A> Methode verwendet wird, um zu bestimmen, welche Elemente in einem <xref:System.Windows.Forms.ListBox> ausgewählt sind, um die Elemente auszuwählen, die nicht ausgewählt sind, und die ausgewählten Elemente zu deaktivieren. Im Beispiel wird auch die Verwendung der- <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft veranschaulicht, damit ein-Objekt über <xref:System.Windows.Forms.ListBox> mehr als ein ausgewähltes Element verfügen kann. mithilfe der-Eigenschaft wird veranschaulicht, <xref:System.Windows.Forms.ListBox.Sorted%2A> wie Elemente in einem automatisch sortiert werden <xref:System.Windows.Forms.ListBox> . Für dieses Beispiel ist es erforderlich, dass ein <xref:System.Windows.Forms.ListBox> mit dem Namen `listBox1` zu einem Formular hinzugefügt wurde und dass die `InitializeMyListBox` im Beispiel definierte Methode aus dem- <xref:System.Windows.Forms.Form.Load> Ereignis des Formulars aufgerufen wird.  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als 0 (null) bzw. größer oder gleich dem Wert der <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" />-Eigenschaft der <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />-Klasse.</exception>
      </Docs>
    </Member>
    <Member MemberName="HorizontalExtent">
      <MemberSignature Language="C#" Value="public int HorizontalExtent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HorizontalExtent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalExtent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HorizontalExtent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalExtent : int with get, set" Usage="System.Windows.Forms.ListBox.HorizontalExtent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Localizable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Breite ab, innerhalb der mit einer horizontalen Schiebeleiste einer <see cref="T:System.Windows.Forms.ListBox" /> Bildläufe durchgeführt werden können, oder legt diese fest.</summary>
        <value>Die Breite in Pixel, innerhalb der mit der horizontalen Schiebeleiste im Steuerelement Bildläufe durchgeführt werden können. Der Standardwert ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft meldet nur einen nützlichen Wert, wenn die- <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> Eigenschaft auf festgelegt ist `true` . Wenn die Breite des <xref:System.Windows.Forms.ListBox> kleiner als der Wert dieser Eigenschaft ist, führt die horizontale Schiebe Leiste horizontal einen Bildlauf durch die Elemente in aus <xref:System.Windows.Forms.ListBox> . Wenn die Breite von <xref:System.Windows.Forms.ListBox> größer oder gleich diesem Wert ist, wird die horizontale Schiebe Leiste ausgeblendet. Der Wert dieser Eigenschaft wird von nicht dynamisch aktualisiert <xref:System.Windows.Forms.ListBox> . Diese Eigenschaft ist nützlich, wenn die Elemente von vom <xref:System.Windows.Forms.ListBox> Besitzer gezeichnet werden. Wenn z. b. der Besitzer, der die Elemente von gezeichnet hat <xref:System.Windows.Forms.ListBox> , 200 Pixel breit ist, aber <xref:System.Windows.Forms.ListBox> 60 Pixel breit ist, muss die- <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> Eigenschaft auf 200 festgelegt werden, um einen Bildlauf für den rechten Rand der Elemente in den sichtbaren Bereich des Steuer Elements durchführen zu können.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie mithilfe der <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> -Eigenschaft und der-Eigenschaft <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> eine horizontale Schiebe Leiste angezeigt wird, die den gesamten Element Text im-Steuerelement anzeigt <xref:System.Windows.Forms.ListBox> . Im Beispiel wird auch die- <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> Eigenschaft verwendet, um sicherzustellen, dass Elemente aufgrund der Größe des-Steuer Elements nicht partiell angezeigt werden <xref:System.Windows.Forms.ListBox> . Dieses Beispiel erfordert, dass ein- <xref:System.Windows.Forms.ListBox> Steuerelement mit dem Namen `listBox1` zu einem Formular hinzugefügt wurde.  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollbar">
      <MemberSignature Language="C#" Value="public bool HorizontalScrollbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HorizontalScrollbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalScrollbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HorizontalScrollbar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalScrollbar : bool with get, set" Usage="System.Windows.Forms.ListBox.HorizontalScrollbar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Localizable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob im Steuerelement eine horizontale Schiebeleiste angezeigt wird, oder legt diesen fest.</summary>
        <value><see langword="true" />, um eine horizontale Schiebeleiste im Steuerelement anzuzeigen, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> Eigenschaft bestimmt, ob <xref:System.Windows.Forms.ListBox> eine horizontale Schiebe Leiste anzeigen soll, wenn die Breite der Elemente innerhalb der <xref:System.Windows.Forms.ListBox> über den rechten Rand des Steuer Elements hinausgeht. Wenn diese Eigenschaft auf festgelegt ist `true` , wird die Bild Lauf Leiste automatisch basierend auf der Breite der Elemente in der angezeigt <xref:System.Windows.Forms.ListBox> . Wenn ein vom <xref:System.Windows.Forms.ListBox> Besitzer gezeichneter ist <xref:System.Windows.Forms.ListBox> , müssen Sie die-Eigenschaft festlegen, um eine horizontale Schiebe Leiste ordnungsgemäß anzuzeigen <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie mithilfe der <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> -Eigenschaft und der-Eigenschaft <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> eine horizontale Schiebe Leiste angezeigt wird, die den gesamten Element Text im-Steuerelement anzeigt <xref:System.Windows.Forms.ListBox> . Im Beispiel wird auch die- <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> Eigenschaft verwendet, um sicherzustellen, dass Elemente aufgrund der Größe des-Steuer Elements nicht partiell angezeigt werden <xref:System.Windows.Forms.ListBox> . Dieses Beispiel erfordert, dass ein- <xref:System.Windows.Forms.ListBox> Steuerelement mit dem Namen `listBox1` zu einem Formular hinzugefügt wurde.  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexFromPoint">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt den nullbasierten Index des Elements an den angegebenen Koordinaten zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexFromPoint (p As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexFromPoint(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="member this.IndexFromPoint : System.Drawing.Point -&gt; int" Usage="listBox.IndexFromPoint p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">Ein <see cref="T:System.Drawing.Point" />-Objekt, das die Koordinaten zum Abrufen des Elementindexes enthält.</param>
        <summary>Gibt den nullbasierten Index des Elements an den angegebenen Koordinaten zurück.</summary>
        <returns>Der nullbasierte Index des an den angegebenen Koordinaten gefundenen Elements. Wenn keine Übereinstimmung gefunden wurde, wird <see langword="ListBox.NoMatches" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie bestimmen, welches Element sich an einer bestimmten Position im-Steuerelement befindet. Sie können diese Methode verwenden, um zu bestimmen, welches Element in der Liste ausgewählt wird, wenn ein Benutzer mit der rechten Maustaste klickt <xref:System.Windows.Forms.ListBox> . Die Position des Cursors kann bestimmt und an den- `p` Parameter der-Methode übergeben werden <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> , um zu bestimmen, welches Element der Benutzer mit der rechten Maustaste auf die Maus geklickt hat. Sie können dann ein Kontextmenü für den Benutzer anzeigen, um Aufgaben und Features basierend auf dem jeweiligen Element bereitzustellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Drag & Drop-Vorgänge mithilfe eines-Steuer Elements durchgeführt werden <xref:System.Windows.Forms.ListBox> , das Elemente enthält, die in ein-Steuerelement abgelegt werden sollen <xref:System.Windows.Forms.RichTextBox> Der Konstruktor des Formulars legt die- <xref:System.Windows.Forms.RichTextBox.AllowDrop%2A> Eigenschaft auf fest, damit Drag & amp; `true` Drop-Vorgänge im auftreten können <xref:System.Windows.Forms.RichTextBox> . Im Beispiel wird das- <xref:System.Windows.Forms.Control.MouseDown> Ereignis des verwendet <xref:System.Windows.Forms.ListBox> , um den Zieh Vorgang zu starten, indem die-Methode aufgerufen wird <xref:System.Windows.Forms.Control.DoDragDrop%2A> . Im Beispiel wird das- <xref:System.Windows.Forms.Control.DragEnter> Ereignis verwendet, um zu bestimmen, ob ein Element, das in den gezogen wird, <xref:System.Windows.Forms.RichTextBox> ein gültiger Datentyp ist. Das- <xref:System.Windows.Forms.Control.DragDrop> Ereignis führt das tatsächliche Ablegen eines gezogenen Elements in das- <xref:System.Windows.Forms.RichTextBox> Steuerelement an der aktuellen Cursorposition in aus <xref:System.Windows.Forms.RichTextBox> . Dieses Beispiel erfordert, dass das <xref:System.Windows.Forms.Control.DragDrop> - <xref:System.Windows.Forms.Control.DragEnter> Ereignis und das-Ereignis mit den Ereignis Handlern verbunden sind, die im Beispiel definiert sind.  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexFromPoint (x As Integer, y As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexFromPoint(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.IndexFromPoint : int * int -&gt; int" Usage="listBox.IndexFromPoint (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Die x-Koordinate der zu suchenden Position.</param>
        <param name="y">Die y-Koordinate der zu suchenden Position.</param>
        <summary>Gibt den nullbasierten Index des Elements an den angegebenen Koordinaten zurück.</summary>
        <returns>Der nullbasierte Index des an den angegebenen Koordinaten gefundenen Elements. Wenn keine Übereinstimmung gefunden wurde, wird <see langword="ListBox.NoMatches" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie bestimmen, welches Element sich an einer bestimmten Position im-Steuerelement befindet. Sie können diese Methode verwenden, um zu bestimmen, welches Element in der Liste ausgewählt wird, wenn ein Benutzer mit der rechten Maustaste klickt <xref:System.Windows.Forms.ListBox> . Die Position des Cursors kann bestimmt und an den `x` -Parameter und den `y` -Parameter der-Methode übergeben werden <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> , um zu bestimmen, welches Element der Benutzer mit der rechten Maustaste auf die Maus geklickt hat. Sie können dann ein Kontextmenü für den Benutzer anzeigen, um Aufgaben und Features basierend auf dem jeweiligen Element bereitzustellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Drag & Drop-Vorgänge mithilfe eines-Steuer Elements durchgeführt werden <xref:System.Windows.Forms.ListBox> , das Elemente enthält, die in ein-Steuerelement abgelegt werden sollen <xref:System.Windows.Forms.RichTextBox> Der Konstruktor des Formulars legt die- <xref:System.Windows.Forms.RichTextBox.AllowDrop%2A> Eigenschaft auf fest, damit Drag & amp; `true` Drop-Vorgänge im auftreten können <xref:System.Windows.Forms.RichTextBox> . Im Beispiel wird das- <xref:System.Windows.Forms.Control.MouseDown> Ereignis des verwendet <xref:System.Windows.Forms.ListBox> , um den Zieh Vorgang zu starten, indem die-Methode aufgerufen wird <xref:System.Windows.Forms.Control.DoDragDrop%2A> . Im Beispiel wird das- <xref:System.Windows.Forms.Control.DragEnter> Ereignis verwendet, um zu bestimmen, ob ein Element, das in den gezogen wird, <xref:System.Windows.Forms.RichTextBox> ein gültiger Datentyp ist. Das- <xref:System.Windows.Forms.Control.DragDrop> Ereignis führt das tatsächliche Ablegen eines gezogenen Elements in das- <xref:System.Windows.Forms.RichTextBox> Steuerelement an der aktuellen Cursorposition in aus <xref:System.Windows.Forms.RichTextBox> . Dieses Beispiel erfordert, dass das <xref:System.Windows.Forms.Control.DragDrop> - <xref:System.Windows.Forms.Control.DragEnter> Ereignis und das-Ereignis mit den Ereignis Handlern verbunden sind, die im Beispiel definiert sind.  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegralHeight">
      <MemberSignature Language="C#" Value="public bool IntegralHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IntegralHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.IntegralHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property IntegralHeight As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IntegralHeight { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IntegralHeight : bool with get, set" Usage="System.Windows.Forms.ListBox.IntegralHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Localizable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Größe des Steuerelements automatisch so angepasst wird, dass keine Elemente abgeschnitten werden, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Größe des Steuerelements so angepasst wird, dass keine Elemente abgeschnitten werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft auf festgelegt ist `true` , wird die Größe des Steuer Elements automatisch geändert, um sicherzustellen, dass ein Element nicht teilweise angezeigt wird. Wenn Sie die ursprüngliche Größe von <xref:System.Windows.Forms.ListBox> basierend auf den Speicherplatzanforderungen Ihres Formulars beibehalten möchten, legen Sie diese Eigenschaft auf fest `false` .  
  
 Standardmäßig sind die <xref:System.Windows.Forms.ListBox> -und die- <xref:System.Windows.Forms.CheckedListBox> Größe so, dass Sie nur ganze Elemente anzeigen. Wenn <xref:System.Windows.Forms.ListBox> oder <xref:System.Windows.Forms.CheckedListBox> einen angedockten Bereich vollständig ausfüllen soll, legen Sie <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> auf fest `false` . Dies bewirkt, dass das Steuerelement den Bereich vollständig ausreicht, das letzte Element wird jedoch nicht vollständig angezeigt.  
  
 Wenn keine <xref:System.Windows.Forms.ListBox> Elemente enthält, hat diese Eigenschaft keine Auswirkung.  
  
> [!NOTE]
>  Die ganzzahlige Höhe basiert auf der Höhe von <xref:System.Windows.Forms.ListBox> , nicht auf der Höhe des Client Bereichs. Wenn also die- <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> Eigenschaft festgelegt ist `true` , können Elemente weiterhin teilweise angezeigt werden, wenn Scrollleisten angezeigt werden.  
  
> [!NOTE]
>  Wenn die- <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft auf festgelegt ist `DrawMode.OwnerDrawVariable` , hat diese Eigenschaft keine Auswirkung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie mithilfe der <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> -Eigenschaft und der-Eigenschaft <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> eine horizontale Schiebe Leiste angezeigt wird, die den gesamten Element Text im-Steuerelement anzeigt <xref:System.Windows.Forms.ListBox> . Im Beispiel wird auch die- <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> Eigenschaft verwendet, um sicherzustellen, dass Elemente aufgrund der Größe des-Steuer Elements nicht partiell angezeigt werden <xref:System.Windows.Forms.ListBox> . Dieses Beispiel erfordert, dass ein- <xref:System.Windows.Forms.ListBox> Steuerelement mit dem Namen `listBox1` zu einem Formular hinzugefügt wurde.  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ItemHeight">
      <MemberSignature Language="C#" Value="public virtual int ItemHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ItemHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ItemHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ItemHeight : int with get, set" Usage="System.Windows.Forms.ListBox.ItemHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(13)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(13)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Localizable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Höhe eines Elements in der <see cref="T:System.Windows.Forms.ListBox" /> ab oder legt diese fest.</summary>
        <value>Die Höhe eines Elements im Steuerelement in Pixel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die- <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft auf festgelegt ist `DrawMode.OwnerDrawFixed` , haben alle Elemente dieselbe Höhe. Wenn die- <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft auf festgelegt ist `DrawMode.OwnerDrawVariable` , gibt die- <xref:System.Windows.Forms.ListBox.ItemHeight%2A> Eigenschaft die Höhe der einzelnen Elemente an, die der hinzugefügt werden <xref:System.Windows.Forms.ListBox> . Da jedes Element in einer vom Besitzer gezeichneten Liste eine andere Höhe haben kann, können Sie die-Methode verwenden, <xref:System.Windows.Forms.ListBox.GetItemHeight%2A> um die Höhe eines bestimmten Elements in der zu erhalten <xref:System.Windows.Forms.ListBox> . Wenn Sie die- <xref:System.Windows.Forms.ListBox.ItemHeight%2A> Eigenschaft für einen <xref:System.Windows.Forms.ListBox> mit Elementen der Variablen Höhe verwenden, gibt diese Eigenschaft die Höhe des ersten Elements im-Steuerelement zurück.  
  
 Die maximale Höhe eines <xref:System.Windows.Forms.ListBox> Elements beträgt 255 Pixel.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die <see cref="P:System.Windows.Forms.ListBox.ItemHeight" />-Eigenschaft wurde auf weniger als 0 (null) oder mehr als 255 Pixel festgelegt.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.ObjectCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/ObjectCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::ObjectCollection ^ Items { System::Windows::Forms::ListBox::ObjectCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Windows.Forms.ListBox.ObjectCollection" Usage="System.Windows.Forms.ListBox.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Localizable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Elemente der <see cref="T:System.Windows.Forms.ListBox" /> ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />, die die Elemente in der <see cref="T:System.Windows.Forms.ListBox" /> darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Eigenschaft können Sie einen Verweis auf die Liste der Elemente abrufen, die derzeit in der gespeichert sind <xref:System.Windows.Forms.ListBox> . Mit diesem Verweis können Sie Elemente hinzufügen, Elemente entfernen und die Anzahl der Elemente in der Auflistung abrufen. Weitere Informationen zu den Aufgaben, die mit der-Element Auflistung ausgeführt werden können, finden Sie in den Themen zur- <xref:System.Windows.Forms.ListBox.ObjectCollection> Klassenreferenz.  
  
 Mithilfe der-Eigenschaft können Sie auch die Elemente eines bearbeiten <xref:System.Windows.Forms.ListBox> <xref:System.Windows.Forms.ListControl.DataSource%2A> . Wenn Sie die- <xref:System.Windows.Forms.ListControl.DataSource%2A> Eigenschaft zum Hinzufügen von Elementen zu verwenden <xref:System.Windows.Forms.ListBox> , können Sie die Elemente in der <xref:System.Windows.Forms.ListBox> mithilfe der-Eigenschaft anzeigen, <xref:System.Windows.Forms.ListBox.Items%2A> aber Sie können der Liste keine Elemente hinzufügen oder aus der Liste entfernen, indem Sie die Methoden von verwenden <xref:System.Windows.Forms.ListBox.ObjectCollection> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Windows.Forms.ListBox> Steuerelement erstellt wird, das mehrere Elemente in Spalten anzeigt und in der Liste des Steuer Elements mehr als ein Element ausgewählt werden kann. Der Code für das Beispiel fügt der <xref:System.Windows.Forms.ListBox> mithilfe der- <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der-Klasse 50 Elemente hinzu <xref:System.Windows.Forms.ListBox.ObjectCollection> und wählt dann mithilfe der-Methode drei Elemente aus der Liste aus <xref:System.Windows.Forms.ListBox.SetSelected%2A> . Der Code zeigt dann Werte aus der <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> -Auflistung an (über die <xref:System.Windows.Forms.ListBox.SelectedItems%2A> -Eigenschaft) und <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> (über die- <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> Eigenschaft). Dieses Beispiel erfordert, dass sich der Code in einem befindet und von einem aufgerufen wird <xref:System.Windows.Forms.Form> .  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberSignature Language="F#" Value="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " Usage="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn eine Ownerdrawn-<see cref="T:System.Windows.Forms.ListBox" /> erstellt und die Größe der einzelnen Listenelemente bestimmt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können einen Ereignishandler für dieses Ereignis erstellen, um die Größe anzugeben, die ein Element vornimmt, bevor es im <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis gezeichnet wird. Das-Ereignis wird nur ausgelöst, wenn die- <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft auf festgelegt ist <xref:System.Windows.Forms.DrawMode.OwnerDrawVariable> .  
  
 Die maximale gültige Höhe eines <xref:System.Windows.Forms.ListBox> Elements beträgt 255 Pixel. Das Festlegen der- <xref:System.Windows.Forms.MeasureItemEventArgs.ItemHeight%2A> Eigenschaft von <xref:System.Windows.Forms.MeasureItemEventArgs> auf einen Wert größer als 255, wenn dieses Ereignis verarbeitet wird, kann zu unerwarteten Ergebnissen führen.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein vom Besitzer gezeichneter veranschaulicht <xref:System.Windows.Forms.ListBox> , indem die- <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft auf festgelegt <xref:System.Windows.Forms.DrawMode.OwnerDrawVariable> und die <xref:System.Windows.Forms.ListBox.DrawItem> Ereignisse und behandelt werden <xref:System.Windows.Forms.ListBox.MeasureItem> . Außerdem wird das Festlegen der <xref:System.Windows.Forms.ListBox.BorderStyle%2A> <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> Eigenschaften und und die Verwendung der- <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> Methode veranschaulicht.  
  
 Um dieses Beispiel auszuführen, fügen Sie es in eine leere Form ein, die den <xref:System.Drawing> -Namespace und den- <xref:System.Windows.Forms> Namespace importiert. Ruft `InitializeOwnerDrawnListBox` aus dem Konstruktor des Formulars oder der <xref:System.Windows.Forms.Form.Load> Ereignis Behandlungsmethode auf.  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.ItemHeight" />
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseClick;" />
      <MemberSignature Language="F#" Value="member this.MouseClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn mit dem Mauszeiger auf das <see cref="T:System.Windows.Forms.ListBox" />-Steuerelement geklickt wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiColumn">
      <MemberSignature Language="C#" Value="public bool MultiColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiColumn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.MultiColumn" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiColumn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiColumn { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MultiColumn : bool with get, set" Usage="System.Windows.Forms.ListBox.MultiColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob <see cref="T:System.Windows.Forms.ListBox" /> mehrere Spalten unterstützt, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die <see cref="T:System.Windows.Forms.ListBox" /> mehrere Spalten unterstützt; andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einer mehrspaltigen Spalte <xref:System.Windows.Forms.ListBox> werden Elemente in so viele Spalten eingefügt, wie Sie benötigt werden, um einen vertikalen Bildlauf unnötig Der Benutzer kann die Tastatur verwenden, um zu Spalten zu navigieren, die derzeit nicht sichtbar sind. Legen Sie die- <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> Eigenschaft auf fest, `true` um eine horizontale Schiebe Leiste anzuzeigen, mit der der Benutzer einen Bildlauf zu Spalten durchführen kann, die zurzeit nicht im sichtbaren Bereich des angezeigt werden <xref:System.Windows.Forms.ListBox> . Der Wert der- <xref:System.Windows.Forms.ListBox.ColumnWidth%2A> Eigenschaft bestimmt die Breite jeder Spalte.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine einfache zwei Spalten veranschaulicht <xref:System.Windows.Forms.ListBox> .  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Eine mehrspaltige <see cref="T:System.Windows.Forms.ListBox" /> darf keine Höhe mit variabler Größe aufweisen.</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
        <altmember cref="P:System.Windows.Forms.ListBox.ColumnWidth" />
      </Docs>
    </Member>
    <Member MemberName="NoMatches">
      <MemberSignature Language="C#" Value="public const int NoMatches = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NoMatches = (-1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.NoMatches" />
      <MemberSignature Language="VB.NET" Value="Public Const NoMatches As Integer  = -1" />
      <MemberSignature Language="C++ CLI" Value="public: int NoMatches = -1;" />
      <MemberSignature Language="F#" Value="val mutable NoMatches : int" Usage="System.Windows.Forms.ListBox.NoMatches" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Gibt an, dass bei einer Suche keine Übereinstimmungen gefunden werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Konstante wird von den <xref:System.Windows.Forms.ListBox.FindString%2A> Methoden, und zurückgegeben, <xref:System.Windows.Forms.ListBox.FindStringExact%2A> <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Wenn keine übereinstimmenden Werte in einer Suche gefunden werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected override void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnChangeUICues (e As UICuesEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnChangeUICues(System::Windows::Forms::UICuesEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnChangeUICues : System.Windows.Forms.UICuesEventArgs -&gt; unit" Usage="listBox.OnChangeUICues e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.UICuesEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.ChangeUICues" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected override void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDataSourceChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDataSourceChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDataSourceChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnDataSourceChanged : EventArgs -&gt; unit" Usage="listBox.OnDataSourceChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListControl.DataSourceChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayMemberChanged">
      <MemberSignature Language="C#" Value="protected override void OnDisplayMemberChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDisplayMemberChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDisplayMemberChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDisplayMemberChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDisplayMemberChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnDisplayMemberChanged : EventArgs -&gt; unit" Usage="listBox.OnDisplayMemberChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListControl.DisplayMemberChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit&#xA;override this.OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit" Usage="listBox.OnDrawItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DrawItemEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListBox.DrawItem" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auswerfen von Ereignissen](/dotnet/standard/events/).  
  
 Die- <xref:System.Windows.Forms.ListBox.OnDrawItem%2A> Methode ermöglicht es abgeleiteten Klassen auch, das Ereignis zu behandeln, ohne einen Delegaten anzufügen. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie vom Besitzer gezeichnete Elemente erstellt werden <xref:System.Windows.Forms.ListBox> . Der Code verwendet die <xref:System.Windows.Forms.ListBox.DrawMode%2A> -Eigenschaft, um anzugeben, dass die gezeichneten Elemente eine festgelegte Größe aufweisen, und das- <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis, das die Zeichnung der einzelnen Elemente in der ausführt <xref:System.Windows.Forms.ListBox> . Der Beispielcode verwendet die Eigenschaften und Methoden der- <xref:System.Windows.Forms.DrawItemEventArgs> Klasse, die als Parameter an den-Ereignishandler übergeben werden, um die Elemente zu zeichnen. Dieses Beispiel setzt voraus, dass ein-Steuerelement mit dem <xref:System.Windows.Forms.ListBox> Namen `listBox1` zu einem Formular hinzugefügt wurde und dass das <xref:System.Windows.Forms.ListBox.DrawItem> Ereignis von dem im Beispielcode definierten Ereignishandler behandelt wird. Das Beispiel erfordert auch, dass Elemente <xref:System.Windows.Forms.ListBox> mit dem Text "Apple", "Orange" und "Plum" in dieser Reihenfolge hinzugefügt wurden.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnFontChanged : EventArgs -&gt; unit" Usage="listBox.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.FontChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnGotFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : EventArgs -&gt; unit" Usage="listBox.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="e">Eine Ereignisdaten Instanz.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.GotFocus" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="listBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Gibt den Zeitpunkt der Erstellung des Fensterhandles an, sodass die Spaltenbreite und andere Eigenschaften festgelegt werden können. Erbende Klassen müssen <see langword="base.OnHandleCreated" /> aufrufen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="listBox.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wurde überschrieben, um sicherzustellen, dass Elemente ordnungsgemäß eingerichtet und gelöscht werden. Erbende Steuerelemente müssen <see langword="base.OnHandleDestroyed" /> aufrufen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit&#xA;override this.OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit" Usage="listBox.OnMeasureItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.MeasureItemEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListBox.MeasureItem" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auswerfen von Ereignissen](/dotnet/standard/events/).  
  
 Die- <xref:System.Windows.Forms.ListBox.OnMeasureItem%2A> Methode ermöglicht es abgeleiteten Klassen auch, das Ereignis zu behandeln, ohne einen Delegaten anzufügen. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnParentChanged : EventArgs -&gt; unit" Usage="listBox.OnParentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.ParentChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnResize : EventArgs -&gt; unit" Usage="listBox.OnResize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.Resize" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSelectedIndexChanged : EventArgs -&gt; unit" Usage="listBox.OnSelectedIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedValueChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedValueChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedValueChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedValueChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedValueChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedValueChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSelectedValueChanged : EventArgs -&gt; unit" Usage="listBox.OnSelectedValueChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.ListBox.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ist für diese Klasse nicht relevant.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.Padding" />-Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Wert der <see cref="P:System.Windows.Forms.ListBox.Padding" />-Eigenschaft ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberSignature Language="F#" Value="member this.Paint : System.Windows.Forms.PaintEventHandler " Usage="member this.Paint : System.Windows.Forms.PaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn das <see cref="T:System.Windows.Forms.ListBox" />-Steuerelement gezeichnet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHeight">
      <MemberSignature Language="C#" Value="public int PreferredHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PreferredHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.PreferredHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PreferredHeight { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredHeight : int" Usage="System.Windows.Forms.ListBox.PreferredHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Gesamthöhe aller Elemente in der <see cref="T:System.Windows.Forms.ListBox" /> ab.</summary>
        <value>Die Gesamthöhe aller Elemente im Steuerelement in Pixel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ermöglicht es Ihnen, die Höhe zu bestimmen, auf die die skaliert <xref:System.Windows.Forms.ListBox> werden muss, um alle verfügbaren Elemente in der Liste anzuzeigen und vertikale Bild Lauf leisten anzuzeigen. Wenn die Menge der Elemente in <xref:System.Windows.Forms.ListBox> groß ist, kann die Größe des Steuer Elements mit dem Wert der- <xref:System.Windows.Forms.ListBox.PreferredHeight%2A> Eigenschaft bewirken, <xref:System.Windows.Forms.ListBox> dass die Größe außerhalb des Client Bereichs des Formulars oder des Containers liegt <xref:System.Windows.Forms.ListBox> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die- <xref:System.Windows.Forms.Control.Size%2A> Eigenschaft eines <xref:System.Windows.Forms.ListBox> basierend auf dem Wert der-Eigenschaft festgelegt wird <xref:System.Windows.Forms.ListBox.PreferredHeight%2A> , um alle Elemente in der <xref:System.Windows.Forms.ListBox> ohne Verwendung von Bild Lauf leisten anzuzeigen. Dieses Beispiel erfordert, dass ein- <xref:System.Windows.Forms.ListBox> Steuerelement mit dem Namen `listBox1` zu einem Formular hinzugefügt wurde.  
  
 [!code-cpp[ListBox.PreferredHeight#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.PreferredHeight/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.PreferredHeight#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.PreferredHeight/CS/form1.cs#1)]
 [!code-vb[ListBox.PreferredHeight#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.PreferredHeight/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Height" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberSignature Language="F#" Value="override this.Refresh : unit -&gt; unit" Usage="listBox.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erzwingt, dass das Steuerelement seinen Clientbereich für ungültig erklärt und sich sowie alle untergeordneten Steuerelemente sofort selbst neu zeichnet.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItem">
      <MemberSignature Language="C#" Value="protected override void RefreshItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RefreshItem : int -&gt; unit" Usage="listBox.RefreshItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des zu aktualisierenden Elements.</param>
        <summary>Aktualisiert das Element am angegebenen Index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.ListControl.DisplayMember%2A> -Eigenschaft festgelegt ist und die-Eigenschaft in der Datenquelle, die Änderungen zugewiesen wird, die- <xref:System.Windows.Forms.ListControl.DisplayMember%2A> Methode verwendet, <xref:System.Windows.Forms.ListBox.RefreshItem%2A> um den Wert im-Steuerelement zu aktualisieren <xref:System.Windows.Forms.ListBox> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItems">
      <MemberSignature Language="C#" Value="protected override void RefreshItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItems();" />
      <MemberSignature Language="F#" Value="override this.RefreshItems : unit -&gt; unit" Usage="listBox.RefreshItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualisiert alle <see cref="T:System.Windows.Forms.ListBox" />-Elemente und ruft neue Zeichenfolgen für diese ab.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RescaleConstantsForDpi">
      <MemberSignature Language="C#" Value="protected override void RescaleConstantsForDpi (int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RescaleConstantsForDpi(int32 deviceDpiOld, int32 deviceDpiNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RescaleConstantsForDpi(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RescaleConstantsForDpi (deviceDpiOld As Integer, deviceDpiNew As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="F#" Value="override this.RescaleConstantsForDpi : int * int -&gt; unit" Usage="listBox.RescaleConstantsForDpi (deviceDpiOld, deviceDpiNew)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceDpiOld" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="deviceDpiNew" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="deviceDpiOld">Der DPI-Wert vor der Änderung.</param>
        <param name="deviceDpiNew">Der DPI-Wert nach der Änderung.</param>
        <summary>Stellt Konstanten für die Größenänderung des Steuerelements bereit, wenn ein DPI-Wert geändert wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public override void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetBackColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetBackColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetBackColor();" />
      <MemberSignature Language="F#" Value="override this.ResetBackColor : unit -&gt; unit" Usage="listBox.ResetBackColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt die <see cref="P:System.Windows.Forms.Control.BackColor" />-Eigenschaft auf den Standardwert zurück.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public override void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetForeColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetForeColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetForeColor();" />
      <MemberSignature Language="F#" Value="override this.ResetForeColor : unit -&gt; unit" Usage="listBox.ResetForeColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt die <see cref="P:System.Windows.Forms.Control.ForeColor" />-Eigenschaft auf den Standardwert zurück.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.ListBox.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Text im Steuerelement von rechts nach links angezeigt wird, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.RightToLeft" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ermöglicht es Ihren Menüs, Sprachen zu unterstützen, die von rechts nach links geschrieben werden. Wenn diese Eigenschaft auf festgelegt ist `true` , wird der Element Text von rechts nach links und nicht von der Standardmethode von links nach rechts angezeigt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected override void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ScaleControl (factor As SizeF, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ScaleControl(System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="listBox.ScaleControl (factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="factor">Der Faktor, um den die Höhe und die Breite des Steuerelements skaliert werden.</param>
        <param name="specified">Ein <see cref="T:System.Windows.Forms.BoundsSpecified" />-Wert, der die Begrenzungen des Steuerelements angibt und bei der Definition von Größe und Position verwendet wird.</param>
        <summary>Skaliert Speicherort, Größe, Textabstand und Rand eines Steuerelements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAlwaysVisible">
      <MemberSignature Language="C#" Value="public bool ScrollAlwaysVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollAlwaysVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ScrollAlwaysVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollAlwaysVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollAlwaysVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollAlwaysVisible : bool with get, set" Usage="System.Windows.Forms.ListBox.ScrollAlwaysVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Localizable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die vertikale Schiebeleiste immer angezeigt wird, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die vertikale Schiebeleiste immer angezeigt werden soll, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> Eigenschaft gibt an, ob eine vertikale Schiebe Leiste immer angezeigt wird, auch wenn die Anzahl der Elemente in der <xref:System.Windows.Forms.ListBox> keine Anzeige der vertikalen Schiebe Leiste erfordert. Standardmäßig wird <xref:System.Windows.Forms.ListBox> nur eine vertikale Schiebe Leiste angezeigt, wenn genügend Elemente vorhanden sind, um die Anzeige zu rechtfertigen. Bei einer mehrspaltigen <xref:System.Windows.Forms.ListBox> <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> Eigenschaft gibt die-Eigenschaft an, dass eine horizontale Schiebe Leiste angezeigt wird. Eine vertikale Schiebe Leiste wird niemals angezeigt, unabhängig vom Wert dieser Eigenschaft für eine mehrspaltige <xref:System.Windows.Forms.ListBox> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein vom Besitzer gezeichneter veranschaulicht <xref:System.Windows.Forms.ListBox> , indem die- <xref:System.Windows.Forms.ListBox.DrawMode%2A> Eigenschaft auf den `OwnerDrawVariable` -Wert festgelegt und die <xref:System.Windows.Forms.ListBox.DrawItem> Ereignisse und behandelt werden <xref:System.Windows.Forms.ListBox.MeasureItem> . Außerdem wird das Festlegen der <xref:System.Windows.Forms.ListBox.BorderStyle%2A> <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> Eigenschaften und und die Verwendung der- <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> Methode veranschaulicht.  
  
 Um dieses Beispiel auszuführen, fügen Sie es in eine leere Form ein, die den <xref:System.Drawing> -Namespace und den- <xref:System.Windows.Forms> Namespace importiert. Ruft `InitializeOwnerDrawnListBox` aus dem Konstruktor des Formulars oder der <xref:System.Windows.Forms.Form.Load> Ereignis Behandlungsmethode auf.  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public override int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndex" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int SelectedIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndex : int with get, set" Usage="System.Windows.Forms.ListBox.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den nullbasierten Index des derzeit ausgewählten Elements in einer <see cref="T:System.Windows.Forms.ListBox" /> ab oder legt diesen fest.</summary>
        <value>Ein nullbasierter Index des derzeit ausgewählten Elements. Wenn kein Element ausgewählt ist, wird ein Wert von -1 zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei einem Standard <xref:System.Windows.Forms.ListBox> können Sie diese Eigenschaft verwenden, um den Index des Elements zu bestimmen, das in der ausgewählt ist <xref:System.Windows.Forms.ListBox> . Wenn die <xref:System.Windows.Forms.ListBox.SelectionMode%2A> -Eigenschaft von <xref:System.Windows.Forms.ListBox> entweder auf oder festgelegt ist `SelectionMode.MultiSimple` `SelectionMode.MultiExtended` (was auf eine Mehrfachauswahl hinweist <xref:System.Windows.Forms.ListBox> ) und mehrere Elemente in der Liste ausgewählt sind, kann diese Eigenschaft den Index an ein beliebiges ausgewähltes Element zurückgeben.  
  
 Verwenden Sie die-Eigenschaft, um eine Sammlung mit den Indizes aller ausgewählten Elemente in einer Mehrfachauswahl abzurufen <xref:System.Windows.Forms.ListBox> <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> . Wenn Sie das Element abrufen möchten, das momentan in der ausgewählt ist <xref:System.Windows.Forms.ListBox> , verwenden Sie die- <xref:System.Windows.Forms.ListBox.SelectedItem%2A> Eigenschaft. Darüber hinaus können Sie die- <xref:System.Windows.Forms.ListBox.SelectedItems%2A> Eigenschaft verwenden, um alle ausgewählten Elemente in einer Mehrfachauswahl abzurufen <xref:System.Windows.Forms.ListBox> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die- <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft mit der-Eigenschaft verwendet wird <xref:System.Windows.Forms.ListBox.TopIndex%2A> , um das aktuell ausgewählte Element an den Anfang der Liste der Elemente im Anzeigebereich von zu verschieben <xref:System.Windows.Forms.ListBox> . Im Beispiel wird das Entfernen von Elementen mithilfe der- <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType> -Klasse und das Löschen der Elementauswahl mithilfe der- <xref:System.Windows.Forms.ListBox.ClearSelected%2A> Methode veranschaulicht. Der Code verschiebt zuerst das aktuell ausgewählte Element in der <xref:System.Windows.Forms.ListBox> an den Anfang der Liste. Der Code entfernt dann alle Elemente vor dem aktuell ausgewählten Element und löscht alle Auswahlmöglichkeiten in <xref:System.Windows.Forms.ListBox> . Für dieses Beispiel ist es erforderlich, dass einem <xref:System.Windows.Forms.ListBox> Formular ein enthaltende Element hinzugefügt wird und derzeit in der ein Element ausgewählt ist <xref:System.Windows.Forms.ListBox> .  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der zugeordnete Wert ist kleiner als -1 oder größer oder gleich der Elementanzahl.</exception>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.Windows.Forms.ListBox.SelectionMode" />-Eigenschaft ist auf <see langword="None" /> festgelegt.</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectedIndexChanged : EventHandler " Usage="member this.SelectedIndexChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die <see cref="P:System.Windows.Forms.ListBox.SelectedIndex" />-Eigenschaft oder die <see cref="P:System.Windows.Forms.ListBox.SelectedIndices" />-Auflistung geändert wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können einen Ereignishandler für dieses Ereignis erstellen, um zu bestimmen, wann der ausgewählte Index in <xref:System.Windows.Forms.ListBox> geändert wurde. Dies kann hilfreich sein, wenn Sie Informationen in anderen Steuerelementen auf der Grundlage der aktuellen Auswahl in der anzeigen müssen <xref:System.Windows.Forms.ListBox> . Sie können den Ereignishandler für dieses Ereignis verwenden, um die Informationen in den anderen Steuerelementen zu laden.  
  
 Wenn die- <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft auf oder festgelegt ist <xref:System.Windows.Forms.SelectionMode.MultiSimple?displayProperty=nameWithType> <xref:System.Windows.Forms.SelectionMode.MultiExtended?displayProperty=nameWithType> , wird bei jeder Änderung der Auflistung <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> , einschließlich des Entfernens eines Elements aus der Auswahl, dieses Ereignis erhöht.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie das-Ereignis verwendet wird <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> , um ein Element in einem anderen Steuerelement zu suchen und auszuwählen <xref:System.Windows.Forms.ListBox> . Im Beispiel wird das- <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> Ereignis verwendet, um zu bestimmen, wann das ausgewählte Element in <xref:System.Windows.Forms.ListBox> geändert wird. Der Beispielcode liest dann den Text des Elements mithilfe der <xref:System.Windows.Forms.ListBox.SelectedItem%2A> -Eigenschaft und ruft die- <xref:System.Windows.Forms.ListBox.FindString%2A> Methode für einen anderen <xref:System.Windows.Forms.ListBox> mit dem Text auf, der von <xref:System.Windows.Forms.ListBox.SelectedItem%2A> in der ersten zurückgegeben wurde <xref:System.Windows.Forms.ListBox> . Wenn ein Element im anderen Element gefunden wird <xref:System.Windows.Forms.ListBox> , wird das Element ausgewählt. Dieses Beispiel setzt voraus, dass zwei <xref:System.Windows.Forms.ListBox> -Steuerelemente mit dem Namen `listBox1` und `listBox2` einem Formular hinzugefügt wurden und dass beide Steuer <xref:System.Windows.Forms.ListBox> Elemente Elemente enthalten, die identisch sind. Das Beispiel erfordert auch, dass die im Beispiel definierte Ereignis Behandlungsmethode mit dem- <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> Ereignis von verbunden ist `listBox1` .  
  
 [!code-cpp[ListBox.SelectedIndexChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListBox.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListBox::SelectedIndexCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndices : System.Windows.Forms.ListBox.SelectedIndexCollection" Usage="System.Windows.Forms.ListBox.SelectedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung ab, die die nullbasierten Indizes aller derzeit ausgewählten Elemente in der <see cref="T:System.Windows.Forms.ListBox" /> enthält.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" />, die die Indizes der derzeit im Steuerelement ausgewählten Elemente enthält. Wenn gegenwärtig keine Elemente ausgewählt sind, wird eine leere <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" /> zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei einer Mehrfachauswahl <xref:System.Windows.Forms.ListBox> gibt diese Eigenschaft eine Auflistung zurück, die die Indizes für alle Elemente enthält, die in der ausgewählt werden <xref:System.Windows.Forms.ListBox> . Für eine einzelne Auswahl <xref:System.Windows.Forms.ListBox> gibt diese Eigenschaft eine Auflistung zurück, die ein einzelnes Element enthält, das den Index des einzigen ausgewählten Elements in der enthält <xref:System.Windows.Forms.ListBox> . Weitere Informationen zum Bearbeiten der Elemente der Auflistung finden Sie unter <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> .  
  
 Die- <xref:System.Windows.Forms.ListBox> Klasse bietet eine Reihe von Möglichkeiten, auf ausgewählte Elemente zu verweisen. Anstatt die- <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> Eigenschaft zu verwenden, um die Indexposition des derzeit ausgewählten Elements in einer einzelnen Auswahl zu erhalten <xref:System.Windows.Forms.ListBox> , können Sie die- <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft verwenden. Wenn Sie das Element, das derzeit in der ausgewählt ist <xref:System.Windows.Forms.ListBox> , anstelle der Indexposition des Elements abrufen möchten, verwenden Sie die- <xref:System.Windows.Forms.ListBox.SelectedItem%2A> Eigenschaft. Darüber hinaus können Sie die-Eigenschaft verwenden, <xref:System.Windows.Forms.ListBox.SelectedItems%2A> Wenn Sie alle ausgewählten Elemente in einer Mehrfachauswahl abrufen möchten <xref:System.Windows.Forms.ListBox> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die-Methode verwendet wird <xref:System.Windows.Forms.ListBox.FindString%2A> , um nach allen Instanzen des Suchtexts in den Elementen von zu suchen <xref:System.Windows.Forms.ListBox> . Im Beispiel wird die-Version der- <xref:System.Windows.Forms.ListBox.FindString%2A> Methode verwendet, die es Ihnen ermöglicht, einen Start Suchindex anzugeben, von dem aus eine kontinuierliche Suche nach allen Elementen in durchzuführen ist <xref:System.Windows.Forms.ListBox> . Das Beispiel zeigt auch, wie Sie ermitteln können, wann die Methode mit der <xref:System.Windows.Forms.ListBox.FindString%2A> Suche von oben nach unten in der Liste beginnt, um eine rekursive Suche zu verhindern. Sobald Elemente in der gefunden werden <xref:System.Windows.Forms.ListBox> , werden Sie mithilfe der- <xref:System.Windows.Forms.ListBox.SetSelected%2A> Methode ausgewählt.  
  
 [!code-cpp[ListBox.FindString#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public object SelectedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectedItem { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItem : obj with get, set" Usage="System.Windows.Forms.ListBox.SelectedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das derzeit ausgewählte Element in <see cref="T:System.Windows.Forms.ListBox" /> ab oder legt dieses fest.</summary>
        <value>Ein Objekt, das die aktuelle Auswahl im Steuerelement darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei einem Standard <xref:System.Windows.Forms.ListBox> können Sie diese Eigenschaft verwenden, um zu bestimmen, welches Element in der ausgewählt wird <xref:System.Windows.Forms.ListBox> . Wenn die <xref:System.Windows.Forms.ListBox.SelectionMode%2A> -Eigenschaft von <xref:System.Windows.Forms.ListBox> entweder auf oder festgelegt ist `SelectionMode.MultiSimple` `SelectionMode.MultiExtended` (was auf eine Mehrfachauswahl hinweist <xref:System.Windows.Forms.ListBox> ) und mehrere Elemente in der Liste ausgewählt sind, kann diese Eigenschaft ein beliebiges ausgewähltes Element zurückgeben.  
  
 Zum Abrufen einer Auflistung, die alle ausgewählten Elemente in einer Mehrfachauswahl enthält <xref:System.Windows.Forms.ListBox> , verwenden Sie die- <xref:System.Windows.Forms.ListBox.SelectedItems%2A> Eigenschaft. Wenn Sie die Indexposition des aktuell ausgewählten Elements in der abrufen möchten <xref:System.Windows.Forms.ListBox> , verwenden Sie die- <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft. Darüber hinaus können Sie die- <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> Eigenschaft verwenden, um alle ausgewählten Indizes in einer Mehrfachauswahl abzurufen <xref:System.Windows.Forms.ListBox> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie das-Ereignis verwendet wird <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> , um ein Element in einem anderen Steuerelement zu suchen und auszuwählen <xref:System.Windows.Forms.ListBox> . Im Beispiel wird das- <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> Ereignis verwendet, um zu bestimmen, wann das ausgewählte Element in <xref:System.Windows.Forms.ListBox> geändert wird. Der Beispielcode liest dann den Text des Elements mithilfe der <xref:System.Windows.Forms.ListBox.SelectedItem%2A> -Eigenschaft und ruft die- <xref:System.Windows.Forms.ListBox.FindString%2A> Methode für einen anderen <xref:System.Windows.Forms.ListBox> mit dem Text auf, der von <xref:System.Windows.Forms.ListBox.SelectedItem%2A> in der ersten zurückgegeben wurde <xref:System.Windows.Forms.ListBox> . Wenn ein Element im anderen Element gefunden wird <xref:System.Windows.Forms.ListBox> , wird das Element ausgewählt. Dieses Beispiel setzt voraus, dass zwei <xref:System.Windows.Forms.ListBox> -Steuerelemente mit dem Namen `listBox1` und `listBox2` einem Formular hinzugefügt wurden und dass beide Steuer <xref:System.Windows.Forms.ListBox> Elemente Elemente enthalten, die identisch sind. Das Beispiel erfordert auch, dass die im Beispiel definierte Ereignis Behandlungsmethode mit dem- <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> Ereignis von verbunden ist `listBox1` .  
  
 [!code-cpp[ListBox.SelectedIndexChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedObjectCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedObjectCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListBox.SelectedObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::SelectedObjectCollection ^ SelectedItems { System::Windows::Forms::ListBox::SelectedObjectCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItems : System.Windows.Forms.ListBox.SelectedObjectCollection" Usage="System.Windows.Forms.ListBox.SelectedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung mit den derzeit in der <see cref="T:System.Windows.Forms.ListBox" /> ausgewählten Elementen ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.ListBox.SelectedObjectCollection" />, die die derzeit im Steuerelement ausgewählten Elemente enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei einer Mehrfachauswahl <xref:System.Windows.Forms.ListBox> gibt diese Eigenschaft eine Auflistung zurück, die alle Elemente enthält, die in der ausgewählt werden <xref:System.Windows.Forms.ListBox> . Für eine einzelne Auswahl <xref:System.Windows.Forms.ListBox> gibt diese Eigenschaft eine Auflistung zurück, die ein einzelnes Element enthält, das das einzige ausgewählte Element in der enthält <xref:System.Windows.Forms.ListBox> . Weitere Informationen zum Bearbeiten der Elemente der Auflistung finden Sie unter <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> .  
  
 Die- <xref:System.Windows.Forms.ListBox> Klasse bietet eine Reihe von Möglichkeiten, auf ausgewählte Elemente zu verweisen. Anstatt die- <xref:System.Windows.Forms.ListBox.SelectedItems%2A> Eigenschaft zu verwenden, um das aktuell ausgewählte Element in einer einzelnen Auswahl abzurufen <xref:System.Windows.Forms.ListBox> , können Sie die- <xref:System.Windows.Forms.ListBox.SelectedItem%2A> Eigenschaft verwenden. Wenn Sie die Indexposition eines Elements abrufen möchten, das momentan in der ausgewählt ist <xref:System.Windows.Forms.ListBox> , und nicht das Element selbst, verwenden Sie die- <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft. Darüber hinaus können Sie die-Eigenschaft verwenden, <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> Wenn Sie die Index Positionen aller ausgewählten Elemente in einer Mehrfachauswahl abrufen möchten <xref:System.Windows.Forms.ListBox> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.SelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SelectionMode SelectionMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectionMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SelectionMode As SelectionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::SelectionMode SelectionMode { System::Windows::Forms::SelectionMode get(); void set(System::Windows::Forms::SelectionMode value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionMode : System.Windows.Forms.SelectionMode with get, set" Usage="System.Windows.Forms.ListBox.SelectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Verfahren für die Auswahl von Elementen in <see cref="T:System.Windows.Forms.ListBox" /> ab oder legt dieses fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.SelectionMode" />-Werte. Der Standardwert ist <see langword="SelectionMode.One" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mithilfe der- <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft können Sie bestimmen, wie viele Elemente in <xref:System.Windows.Forms.ListBox> einem Benutzer gleichzeitig ausgewählt werden können und wie der Benutzer Mehrfachauswahl treffen kann. Wenn die- <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft auf festgelegt ist `SelectionMode.MultiExtended` , wird durch Drücken der UMSCHALTTASTE, durch Klicken auf die Maus oder durch Drücken der Umschalttaste und einer der Pfeiltasten (Pfeil nach oben, nach-unten, Pfeil nach links und Pfeil nach rechts) die Auswahl des zuvor ausgewählten Elements auf das aktuelle Element erweitert. Durch Drücken der STRG-Taste und klicken auf die Maus wird ein Element in der Liste ausgewählt oder deaktiviert. Wenn die-Eigenschaft auf festgelegt ist `SelectionMode.MultiSimple` , wird ein Element in der Liste durch einen Mausklick oder durch Drücken der LEERTASTE ausgewählt oder deaktiviert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die- <xref:System.Windows.Forms.ListBox.GetSelected%2A> Methode verwendet wird, um zu bestimmen, welche Elemente in einem <xref:System.Windows.Forms.ListBox> ausgewählt sind, um die Elemente auszuwählen, die nicht ausgewählt sind, und die ausgewählten Elemente zu deaktivieren. Im Beispiel wird auch die Verwendung der- <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft veranschaulicht, damit ein-Objekt über <xref:System.Windows.Forms.ListBox> mehr als ein ausgewähltes Element verfügen kann. mithilfe der-Eigenschaft wird veranschaulicht, <xref:System.Windows.Forms.ListBox.Sorted%2A> wie Elemente in einem automatisch sortiert werden <xref:System.Windows.Forms.ListBox> . Für dieses Beispiel ist es erforderlich, dass ein <xref:System.Windows.Forms.ListBox> mit dem Namen `listBox1` zu einem Formular hinzugefügt wurde und dass die `InitializeMyListBox` im Beispiel definierte Methode aus dem- <xref:System.Windows.Forms.Form.Load> Ereignis des Formulars aufgerufen wird.  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der zugewiesene Wert ist keiner der <see cref="T:System.Windows.Forms.SelectionMode" />-Werte.</exception>
        <altmember cref="T:System.Windows.Forms.SelectionMode" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="listBox.SetBoundsCore (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">Der neue <see cref="P:System.Windows.Forms.Control.Left" />-Eigenschaftswert des Steuerelements.</param>
        <param name="y">Der neue <see cref="P:System.Windows.Forms.Control.Top" />-Eigenschaftswert des Steuerelements.</param>
        <param name="width">Der neue <see cref="P:System.Windows.Forms.Control.Width" />-Eigenschaftswert des Steuerelements.</param>
        <param name="height">Der neue <see cref="P:System.Windows.Forms.Control.Height" />-Eigenschaftswert des Steuerelements.</param>
        <param name="specified">Eine bitweise Kombination der <see cref="T:System.Windows.Forms.BoundsSpecified" />-Werte.</param>
        <summary>Legt die angegebenen Begrenzungen des <see cref="T:System.Windows.Forms.ListBox" />-Steuerelements fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Höhe des <xref:System.Windows.Forms.ListBox> Steuer Elements wird um ein Vielfaches der Eigenschaft erhöht und verringert <xref:System.Windows.Forms.ListBox.ItemHeight%2A> . Wenn Height eine Zahl ist, bei der es sich nicht um ein Vielfaches von handelt <xref:System.Windows.Forms.ListBox.ItemHeight%2A> , ändert sich die Höhe des <xref:System.Windows.Forms.ListBox> um das größte Vielfache, das kleiner als die Höhe ist.  
  
 In der Regel werden die Parameter, die den Begrenzungen entsprechen, die nicht im angegebenen Parameter enthalten sind, mit ihren aktuellen Werten übergeben. Beispielsweise können die- `height` ,- `width` oder die- `x` Eigenschaft oder die- `y` Eigenschaft der- <xref:System.Windows.Forms.Control.Location%2A> Eigenschaft mit einem Verweis auf die aktuelle Instanz des-Steuer Elements übermittelt werden. Allerdings werden alle übergebenen Werte berücksichtigt und auf das Steuerelement angewendet.  
  
 Der- `specified` Parameter stellt die Elemente der Steuerelemente dar, die <xref:System.Windows.Forms.Control.Bounds%2A> von der Anwendung geändert wurden. Wenn Sie z. b. den <xref:System.Windows.Forms.Control.Size%2A> des Steuer Elements ändern, `specified` ist der Parameterwert <xref:System.Windows.Forms.BoundsSpecified.Size> . Wenn jedoch <xref:System.Windows.Forms.Control.Size%2A> als Reaktion auf die <xref:System.Windows.Forms.Control.Dock%2A> festgelegte Eigenschaft angepasst wird, `specified` ist der Parameterwert <xref:System.Windows.Forms.BoundsSpecified.None> .  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Stellen Sie beim Überschreiben <see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> in einer abgeleiteten Klasse sicher, dass die-Methode der Basisklasse aufgerufen wird, um zu erzwingen, dass <see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> die Begrenzungen des Steuer Elements geändert werden. Abgeleitete Klassen können der Methode Größenbeschränkungen hinzufügen <see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> .</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetItemCore">
      <MemberSignature Language="C#" Value="protected override void SetItemCore (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemCore(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemCore(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItemCore (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItemCore(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.SetItemCore : int * obj -&gt; unit" Usage="listBox.SetItemCore (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Der Arrayindex des Objekts.</param>
        <param name="value">Das Objekt.</param>
        <summary>Legt das Objekt mit dem angegebenen Index in der abgeleiteten Klasse fest.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItemsCore">
      <MemberSignature Language="C#" Value="protected override void SetItemsCore (System.Collections.IList value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemsCore(class System.Collections.IList value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemsCore(System.Collections.IList)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItemsCore (value As IList)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItemsCore(System::Collections::IList ^ value);" />
      <MemberSignature Language="F#" Value="override this.SetItemsCore : System.Collections.IList -&gt; unit" Usage="listBox.SetItemsCore value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="value">Ein Objektarray, das in das Steuerelement eingefügt werden soll.</param>
        <summary>Löscht den Inhalt der <see cref="T:System.Windows.Forms.ListBox" /> und fügt dem Steuerelement die angegebenen Elemente hinzu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelected">
      <MemberSignature Language="C#" Value="public void SetSelected (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelected(int32 index, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetSelected(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelected (index As Integer, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSelected(int index, bool value);" />
      <MemberSignature Language="F#" Value="member this.SetSelected : int * bool -&gt; unit" Usage="listBox.SetSelected (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements in einer <see cref="T:System.Windows.Forms.ListBox" />, das ausgewählt oder dessen Auswahl aufgehoben werden soll.</param>
        <param name="value"><see langword="true" />, um das angegebene Element auszuwählen, andernfalls <see langword="false" />.</param>
        <summary>Wählt ein angegebenes Element in einer <see cref="T:System.Windows.Forms.ListBox" /> aus oder hebt dessen Auswahl auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Eigenschaft verwenden, um die Auswahl von Elementen in einer Mehrfachauswahl festzulegen <xref:System.Windows.Forms.ListBox> . Verwenden Sie die-Eigenschaft, um ein Element in einer einzelnen Auswahl auszuwählen <xref:System.Windows.Forms.ListBox> <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Windows.Forms.ListBox> Steuerelement erstellt wird, das mehrere Elemente in Spalten anzeigt und in der Liste des Steuer Elements mehr als ein Element ausgewählt werden kann. Der Code für das Beispiel fügt der <xref:System.Windows.Forms.ListBox> mithilfe der- <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Methode der-Klasse 50 Elemente hinzu <xref:System.Windows.Forms.ListBox.ObjectCollection> und wählt dann mithilfe der-Methode drei Elemente aus der Liste aus <xref:System.Windows.Forms.ListBox.SetSelected%2A> . Der Code zeigt dann Werte aus der <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> -Auflistung an (über die <xref:System.Windows.Forms.ListBox.SelectedItems%2A> -Eigenschaft) und <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> (über die- <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> Eigenschaft). Dieses Beispiel erfordert, dass sich der Code in einem befindet und von einem aufgerufen wird <xref:System.Windows.Forms.Form> .  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der angegebene Index lag außerhalb des gültigen Wertebereichs.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Windows.Forms.ListBox.SelectionMode" />-Eigenschaft wurde auf <see langword="None" /> festgelegt.</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="protected virtual void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Sort" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Sort();" />
      <MemberSignature Language="F#" Value="abstract member Sort : unit -&gt; unit&#xA;override this.Sort : unit -&gt; unit" Usage="listBox.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sortiert die Elemente in der <see cref="T:System.Windows.Forms.ListBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.Sort%2A> zwingt die Auflistung, jedes Element wieder zu sich selbst hinzuzufügen, wenn die- <xref:System.Windows.Forms.ListBox.Sorted%2A> Eigenschaft ist `true` . Jedes Element wird dann an die richtige Position eingefügt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der- <xref:System.Windows.Forms.ListBox.Sort%2A> Methode veranschaulicht. Das Beispiel veranschaulicht die Vererbung von der <xref:System.Windows.Forms.ListBox> -Klasse und überschreibt die- <xref:System.Windows.Forms.ListBox.Sort%2A> Methode in der abgeleiteten Klasse, um eine benutzerdefinierte Sortierung auszuführen. Fügen Sie den folgenden Code in eine leere Form ein, um dieses Beispiel auszuführen.  
  
 [!code-cpp[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie können diese Methode in der abgeleiteten Klasse überschreiben, um eine eigene Sortier Routine bereitzustellen. Greifen Sie auf die Ergebnisse der überschriebenen <see cref="M:System.Windows.Forms.ListBox.Sort" /> Methode <see cref="P:System.Windows.Forms.ListBox.Sorted" /> zu, indem Sie die-Eigenschaft auf festlegen <see langword="true" /> . Beim Hinzufügen von Elementen zu einer <see cref="T:System.Windows.Forms.ListBox" /> ist es effizienter, die Elemente zuerst zu sortieren und dann neue Elemente hinzuzufügen.</para></block>
        <altmember cref="P:System.Windows.Forms.ListBox.Sorted" />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Sorted" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Sorted { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Sorted : bool with get, set" Usage="System.Windows.Forms.ListBox.Sorted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Elemente in der <see cref="T:System.Windows.Forms.ListBox" /> alphabetisch sortiert sind, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Elemente im Steuerelement sortiert sind, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die- <xref:System.Windows.Forms.ListBox.Sorted%2A> Eigenschaft, um Zeichen folgen alphabetisch in einem automatisch zu sortieren <xref:System.Windows.Forms.ListBox> . Beim Hinzufügen von Elementen zu einer sortierten <xref:System.Windows.Forms.ListBox> werden die Elemente an die entsprechende Position in der sortierten Liste verschoben. Beim Hinzufügen von Elementen zu einer <xref:System.Windows.Forms.ListBox> ist es effizienter, die Elemente zuerst zu sortieren und dann neue Elemente hinzuzufügen.  
  
 Ein, <xref:System.Windows.Forms.ListBox> dessen <xref:System.Windows.Forms.ListBox.Sorted%2A> auf festgelegt ist, `true` sollte nicht mithilfe der-Eigenschaft an Daten gebunden werden <xref:System.Windows.Forms.ListControl.DataSource%2A> . Um sortierte Daten in einer gebundenen anzuzeigen <xref:System.Windows.Forms.ListBox> , sollten Sie eine Bindung an eine Datenquelle herstellen, die das Sortieren unterstützt, und die Datenquelle die Sortierung bereitstellen lassen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die- <xref:System.Windows.Forms.ListBox.GetSelected%2A> Methode verwendet wird, um zu bestimmen, welche Elemente in einem <xref:System.Windows.Forms.ListBox> ausgewählt sind, um die Elemente auszuwählen, die nicht ausgewählt sind, und die ausgewählten Elemente zu deaktivieren. Im Beispiel wird auch die Verwendung der- <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft veranschaulicht, damit ein-Objekt über <xref:System.Windows.Forms.ListBox> mehr als ein ausgewähltes Element verfügen kann. mithilfe der-Eigenschaft wird veranschaulicht, <xref:System.Windows.Forms.ListBox.Sorted%2A> wie Elemente in einem automatisch sortiert werden <xref:System.Windows.Forms.ListBox> . Für dieses Beispiel ist es erforderlich, dass ein <xref:System.Windows.Forms.ListBox> mit dem Namen `listBox1` zu einem Formular hinzugefügt wurde und dass die `InitializeMyListBox` im Beispiel definierte Methode aus dem- <xref:System.Windows.Forms.Form.Load> Ereignis des Formulars aufgerufen wird.  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.ListBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Text des derzeit in <see cref="T:System.Windows.Forms.ListBox" /> ausgewählten Elements ab oder sucht diesen.</summary>
        <value>Der Text des derzeit im Steuerelement ausgewählten Elements.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert dieser Eigenschaft auf einen Zeichen folgen Wert festgelegt ist, <xref:System.Windows.Forms.ListBox> sucht das nach dem Element innerhalb der <xref:System.Windows.Forms.ListBox> , das mit dem angegebenen Text übereinstimmt, und wählt das Element aus. Sie können diese Eigenschaft auch verwenden, um zu bestimmen, welche Elemente momentan in der ausgewählt sind <xref:System.Windows.Forms.ListBox> . Wenn die- <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft von <xref:System.Windows.Forms.ListBox> auf festgelegt ist `SelectionMode.MultiExtended` , gibt diese Eigenschaft den Text des ersten ausgewählten Elements zurück. Wenn die- <xref:System.Windows.Forms.ListBox.SelectionMode%2A> Eigenschaft von <xref:System.Windows.Forms.ListBox> nicht auf festgelegt ist `SelectionMode.None` , gibt diese Eigenschaft den Text des ersten ausgewählten Elements zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die <see cref="P:System.Windows.Forms.ListBox.Text" />-Eigenschaft geändert wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopIndex">
      <MemberSignature Language="C#" Value="public int TopIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TopIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.TopIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TopIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TopIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TopIndex : int with get, set" Usage="System.Windows.Forms.ListBox.TopIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Index des ersten sichtbaren Elements in der <see cref="T:System.Windows.Forms.ListBox" /> ab oder legt diesen fest.</summary>
        <value>Der nullbasierte Index des ersten sichtbaren Elements im Steuerelement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anfänglich befindet sich das Element mit der Indexposition 0 (null) oben im sichtbaren Bereich des <xref:System.Windows.Forms.ListBox> . Wenn der Inhalt der <xref:System.Windows.Forms.ListBox> gescrollt wurde, befindet sich möglicherweise ein anderes Element am oberen Rand des Anzeige Bereichs des Steuer Elements. Mit dieser Eigenschaft können Sie den Index in der <xref:System.Windows.Forms.ListBox.ObjectCollection> für die <xref:System.Windows.Forms.ListBox> des Elements abrufen, das gerade am oberen Rand des sichtbaren Bereichs des Steuer Elements positioniert ist. Sie können diese Eigenschaft auch verwenden, um ein Element in der Liste oben im sichtbaren Bereich des Steuer Elements zu positionieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die- <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> Eigenschaft mit der-Eigenschaft verwendet wird <xref:System.Windows.Forms.ListBox.TopIndex%2A> , um das aktuell ausgewählte Element an den Anfang der Liste der Elemente im Anzeigebereich von zu verschieben <xref:System.Windows.Forms.ListBox> . Im Beispiel wird das Entfernen von Elementen mithilfe der- <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> Methode der <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType> -Klasse und das Löschen der Elementauswahl mithilfe der- <xref:System.Windows.Forms.ListBox.ClearSelected%2A> Methode veranschaulicht. Der Code verschiebt zuerst das aktuell ausgewählte Element in der <xref:System.Windows.Forms.ListBox> an den Anfang der Liste. Der Code entfernt dann alle Elemente vor dem aktuell ausgewählten Element und löscht alle Auswahlmöglichkeiten in <xref:System.Windows.Forms.ListBox> . Für dieses Beispiel ist es erforderlich, dass einem <xref:System.Windows.Forms.ListBox> Formular ein enthaltende Element hinzugefügt wird und derzeit in der ein Element ausgewählt ist <xref:System.Windows.Forms.ListBox> .  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="listBox.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolgendarstellung von <see cref="T:System.Windows.Forms.ListBox" /> zurück.</summary>
        <returns>Eine Zeichenfolge, die den Steuerelementtyp, die Anzahl der Elemente im <see cref="T:System.Windows.Forms.ListBox" />-Steuerelement sowie die Text-Eigenschaft des ersten Elements in der <see cref="T:System.Windows.Forms.ListBox" /> angibt, wenn die Anzahl die 0 (null) ist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCustomTabOffsets">
      <MemberSignature Language="C#" Value="public bool UseCustomTabOffsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseCustomTabOffsets" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCustomTabOffsets As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCustomTabOffsets { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseCustomTabOffsets : bool with get, set" Usage="System.Windows.Forms.ListBox.UseCustomTabOffsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Windows.Forms.ListBox" /> Tabstoppzeichen erkennt und erweitert, wenn Zeichenfolgen mithilfe des <see cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" />-Arrays mit ganzen Zahlen gezeichnet werden, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn die <see cref="T:System.Windows.Forms.ListBox" /> Tabstoppzeichen erkennt und erweitert, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      </Docs>
    </Member>
    <Member MemberName="UseTabStops">
      <MemberSignature Language="C#" Value="public bool UseTabStops { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTabStops" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseTabStops" />
      <MemberSignature Language="VB.NET" Value="Public Property UseTabStops As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseTabStops { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseTabStops : bool with get, set" Usage="System.Windows.Forms.ListBox.UseTabStops" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Windows.Forms.ListBox" /> beim Zeichnen von Zeichenfolgen Tabstoppzeichen erkennen und erweitern kann, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn das Steuerelement Tabstoppzeichen erweitern kann, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein erstellt wird <xref:System.Windows.Forms.ListBox> , das Elemente mit Tabstopp Zeichen anzeigt.  
  
 [!code-cpp[ListBox.UseTabStops#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.UseTabStops/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.UseTabStops#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.UseTabStops/CS/form1.cs#1)]
 [!code-vb[ListBox.UseTabStops#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.UseTabStops/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WmReflectCommand">
      <MemberSignature Language="C#" Value="protected virtual void WmReflectCommand (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WmReflectCommand(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WmReflectCommand(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WmReflectCommand (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WmReflectCommand(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WmReflectCommand : Message -&gt; unit&#xA;override this.WmReflectCommand : Message -&gt; unit" Usage="listBox.WmReflectCommand m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Die <see cref="T:System.Windows.Forms.Message" />, die vom Fenster der obersten Ebene an das <see cref="T:System.Windows.Forms.ListBox" />-Steuerelement gesendet wurde.</param>
        <summary>Verarbeitet die Befehlsmeldung, die das <see cref="T:System.Windows.Forms.ListView" />-Steuerelement vom Fenster der obersten Ebene empfängt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc : Message -&gt; unit" Usage="listBox.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Ein Windows-Meldungsobjekt.</param>
        <summary>Die Fensterprozedur der Liste.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Erbende Klassen können dies überschreiben, um zusätzliche Funktionen hinzuzufügen, sollten jedoch die- <xref:System.Windows.Forms.ListBox.WndProc%2A> Methode für die Basisklasse aufzurufen, um sicherzustellen, dass die Liste weiterhin ordnungsgemäß funktioniert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

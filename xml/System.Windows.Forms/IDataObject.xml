<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd78769c002ec6164dd33b8ddba8cc01deb5a7b9" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48704555" /></Metadata><TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein formatunabhängiges Verfahren zur Übertragung von Daten bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `IDataObject` Schnittstelle wird verwendet, durch die <xref:System.Windows.Forms.Clipboard> Klasse und Drag & Drop-Operationen.  
  
 Bei Implementierung in einer Klasse, die <xref:System.Windows.Forms.IDataObject> Methoden ermöglichen es den Benutzer zum Speichern von Daten in mehreren Formaten in eine Instanz der Klasse. Speichern von Daten in mehr als einem Format erhöht die Wahrscheinlichkeit, dass eine Zielanwendung, deren formatanforderungen, die Sie nicht wissen vielleicht, gespeicherte Daten abrufen kann. Zum Speichern von Daten in einer Instanz von <xref:System.Windows.Forms.IDataObject>, rufen Sie die <xref:System.Windows.Forms.IDataObject.SetData%2A> Methode, und geben Sie das Datenformat in der `format` Parameter. Legen Sie die `autoConvert` Parameter `false` , wenn Sie nicht gespeicherte Daten, die in ein anderes Format konvertiert werden, wenn sie abgerufen werden sollen. Rufen Sie <xref:System.Windows.Forms.IDataObject.SetData%2A> mehrmals auf einer Instanz von <xref:System.Windows.Forms.IDataObject> , Daten in mehr als einem Format speichern.  
  
 Rufen Sie gespeicherte Daten aus einer <xref:System.Windows.Forms.IDataObject> durch Aufrufen der <xref:System.Windows.Forms.IDataObject.GetData%2A> -Methode und die Angabe der Daten-format in die `format` Parameter. Legen Sie die `autoConvert` Parameter `false` , nur Daten abzurufen, die im angegebenen Format gespeichert wurden. Um die gespeicherten Daten in das angegebene Format zu konvertieren, legen Sie `autoConvert` zu `true`, oder verwenden Sie keine `autoConvert`.  
  
 Um zu bestimmen, die Formate von den Daten in eine <xref:System.Windows.Forms.IDataObject>, verwenden Sie die folgenden <xref:System.Windows.Forms.IDataObject> Methoden.  
  
-   Rufen Sie die <xref:System.Windows.Forms.IDataObject.GetFormats%2A> Methode, um ein Array Abrufen aller Formate in der die Daten verfügbar sind. Legen Sie die `autoConvert` Parameter `false` abzurufenden nur die Formate, in dem die Daten werden gespeichert. Um alle Formate abzurufen, in denen die Daten verfügbar ist, legen Sie `autoConvert` zu `true`, oder verwenden Sie diesen Parameter nicht.  
  
-   Rufen Sie die <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> Methode, um zu bestimmen, ob die gespeicherte Daten in einem bestimmten Format verfügbar sind. Wenn Sie nicht gespeicherte Daten in das angegebene Format konvertiert werden soll, legen Sie die `autoConvert` Parameter `false`.  
  
 Finden Sie unter den <xref:System.Windows.Forms.DataObject> -Klasse für eine Implementierung dieser Schnittstelle. Finden Sie unter den <xref:System.Windows.Forms.DataFormats> -Klasse für den vordefinierten <xref:System.Windows.Forms.Clipboard> Datenformate.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft die Daten ab, die dem angegebenen Datenformat zugeordnet sind.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Das Format der abzurufenden Daten. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Ruft die Daten ab, die dem angegebenen Datenformat zugeordnet sind.</summary>
        <returns>Die dem angegebenen Format zugeordneten Daten oder <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Methode die Daten im angegebenen Format nicht finden kann, versucht es, die Daten in das Format zu konvertieren. Wenn die Daten in das angegebene Format konvertiert werden können, gibt diese Methode `null`.  
  
 Um zu bestimmen, ob Daten zugeordnet ist, oder in ein Format konvertiert werden können, rufen Sie <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> vor dem Aufruf <xref:System.Windows.Forms.IDataObject.GetData%2A>. Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> eine Liste der gültigen Formate für die in dieser Instanz gespeicherten Daten.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist, und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden, wenn Unicode in Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie im <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse implementiert `IDataObject,` veranschaulicht die Verwendung der `GetData` Methode. Die Methode dient zum Abrufen der Daten, die in gespeicherten `myDataObject`, die zugeordnet wird die `Text` Format. Im Beispiel wird davon ausgegangen, dass Sie bereits erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1` und <xref:System.Windows.Forms.TextBox> mit dem Namen `textBox1`.  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Ein <see cref="T:System.Type" />, das das Format der abzurufenden Daten darstellt. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Ruft die Daten ab, die dem angegebenen Format für den Klassentyp zugeordnet sind.</summary>
        <returns>Die dem angegebenen Format zugeordneten Daten oder <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Methode die Daten im angegebenen Format nicht finden kann, versucht es, die Daten in das Format zu konvertieren. Wenn die Daten in das angegebene Format konvertiert werden können, gibt diese Methode `null`.  
  
 Um zu bestimmen, ob Daten zugeordnet ist, oder in ein Format konvertiert werden können, rufen Sie <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> vor dem Aufruf <xref:System.Windows.Forms.IDataObject.GetData%2A>. Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> eine Liste der gültigen Formate für die in dieser Instanz gespeicherten Daten.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist, und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden, wenn Unicode in Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie im <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse implementiert `IDataObject`, um die Verwendung des der `GetData` Methode. Die Methode dient zum Abrufen der Daten, die in gespeicherten `myObject`, eines bestimmten Typs zugeordnet ist `myType`. Der Typ der abgerufenen Daten ist in einem Meldungsfeld angezeigt. Im Beispiel wird davon ausgegangen, dass Sie bereits erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Das Format der abzurufenden Daten. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="autoConvert"><see langword="true" />, wenn die Daten in das angegebene Format konvertiert werden sollen, andernfalls <see langword="false" />.</param>
        <summary>Ruft die dem angegebenen Format zugeordneten Daten ab. Mit einem booleschen Wert wird dabei festgelegt, ob die Daten in das Format konvertiert werden sollen.</summary>
        <returns>Die dem angegebenen Format zugeordneten Daten oder <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die `autoConvert` Parameter `true` und diese Methode keine Daten im angegebenen Format nicht finden, versucht, die Daten in das Format zu konvertieren. Wenn die Daten in das angegebene Format konvertiert werden können, oder wenn die Daten gespeichert wurden, mit der `autoConvert` Parametersatz zu `false`, gibt diese Methode `null`.  
  
 Wenn die `autoConvert` Parameter `false`, diese Methode gibt Daten zurück, in das angegebene Format oder `null` Wenn keine Daten in diesem Format nicht gefunden werden können.  
  
 Um zu bestimmen, ob Daten zugeordnet ist, oder in ein Format konvertiert werden können, rufen Sie <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> vor dem Aufruf <xref:System.Windows.Forms.IDataObject.GetData%2A>. Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> eine Liste der gültigen Formate für die in dieser Instanz gespeicherten Daten.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist, und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden, wenn Unicode in Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie im <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse implementiert `IDataObject`, um die Verwendung des der `GetData` Methode. Das Beispiel ruft die Daten in eine `DataObject`mithilfe der `autoConvert` Parameter, um anzugeben, ob das Format der Daten zu konvertieren. Zuerst `myDataObject` mit Textdaten erstellt wird. Anschließend wird versucht, zweimal, um die Daten abzurufen. Im ersten Versuch, gibt es das Datenformat, als eine Zeichenfolge und legt die `autoConvert` Parameter `false`. Dieser Versuch schlägt fehl, und das Ergebnis wird angezeigt, in einem Meldungsfeld mit der Bezeichnung "Meldung #1". Im zweiten Versuch, ruft das Beispiel mit denselben Daten ab, mit die `autoConvert` Parametersatz zu `true`. Dieser Versuch ist erfolgreich, und das Ergebnis wird angezeigt, in einem Meldungsfeld mit der Bezeichnung "Meldung #2". Im Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob den in dieser Instanz gespeicherten Daten das angegebene Format zugewiesen ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Das zu suchende Format. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Bestimmt, ob den in dieser Instanz gespeicherten Daten das angegebene Format zugewiesen ist bzw. sie in das Format konvertiert werden können.</summary>
        <returns><see langword="true" />, wenn den in dieser Instanz gespeicherten Daten das angegebene Format zugeordnet ist oder sie in dieses Format konvertiert werden können, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode, um zu bestimmen, ob ein Format vorhanden, in diesem ist <xref:System.Windows.Forms.DataObject> vor dem Aufruf <xref:System.Windows.Forms.IDataObject.GetData%2A>. Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> für die Formate, die in dieser Instanz verfügbar sind.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist, und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden, wenn Unicode in Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie im <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse implementiert `IDataObject`, um die Verwendung des der `GetDataPresent` Methode. Zunächst erstellt er ein Objekt mit einer Zeichenfolge und die `Text` Format. Er bestätigt, dass die Daten in vorhandenen der `Text` formatieren und die Ergebnisse in einem Meldungsfeld angezeigt. Im Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format"><see cref="T:System.Type" /> stellt das Format dar, das gesucht werden soll. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Bestimmt, ob den in dieser Instanz gespeicherten Daten das angegebene Format zugewiesen ist bzw. sie in das Format konvertiert werden können.</summary>
        <returns><see langword="true" />, wenn den in dieser Instanz gespeicherten Daten das angegebene Format zugewiesen ist bzw. sie in das Format konvertiert werden können, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode, um zu bestimmen, ob ein Format vorhanden, in diesem ist <xref:System.Windows.Forms.DataObject> vor dem Aufruf <xref:System.Windows.Forms.IDataObject.GetData%2A>. Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> für die Formate, die in dieser Instanz verfügbar sind.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist, und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden, wenn Unicode in Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie im <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse implementiert `IDataObject`, um die Verwendung des der `GetDataPresent` Methode. Zunächst erstellt sie eine Komponente (`myComponent`) und speichert es in ein Datenobjekt (`myDataObject`). Dann wird geprüft, ob die angegebenen Daten in gespeichert ist `myDataObject`. Wenn der Test ergibt `true`, es das Ergebnis in einem Meldungsfeld wird angezeigt, und zeigt den Datentyp in einem Textfeld. In diesem Beispiel wird davon ausgegangen, dass Sie bereits erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1` und <xref:System.Windows.Forms.TextBox> mit dem Namen `textBox1`.  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Das zu suchende Format. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="autoConvert"><see langword="true" />, um zu bestimmen, ob die in dieser Instanz gespeicherten Daten in das angegebene Format konvertiert werden können, <see langword="false" />, um zu prüfen, ob die Daten im angegebenen Format vorliegen.</param>
        <summary>Bestimmt, ob den in dieser Instanz gespeicherten Daten das angegebene Format zugewiesen ist. Ein boolescher Wert legt dabei fest, ob die Daten in das Format konvertiert werden sollen.</summary>
        <returns><see langword="true" />, wenn die Daten das angegebene Format aufweisen oder in dieses konvertiert werden können, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode, um zu bestimmen, ob ein Format vorhanden, in diesem ist <xref:System.Windows.Forms.DataObject> vor dem Aufruf <xref:System.Windows.Forms.IDataObject.GetData%2A>. Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> für die Formate, die in dieser Instanz verfügbar sind.  
  
 Diese Methode gibt `true` bei:  
  
-   Die `autoConvert` Parameter `true` und die Daten in ein Format, das in das entsprechende Format konvertiert werden kann.  
  
-   Die `autoConvert` Parameter `false` und die Daten im entsprechenden Format.  
  
 Diese Methode gibt `false` bei:  
  
-   Die `autoConvert` Parameter `true` und diese Methode keine Daten im angegebenen Format nicht finden und Daten in das angegebene Format konvertiert werden kann, oder die Daten wurde gespeichert, mit `autoConvert` festgelegt `false`.  
  
-   Die `autoConvert` Parameter `false`, und die Daten in dieser Instanz im angegebenen Format nicht vorhanden.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist, und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden, wenn Unicode in Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie im <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse implementiert `IDataObject`, um die Verwendung des der `GetDataPresent` Methode. Zunächst erstellt er ein Datenobjekt (`myDataObject`) mit einer Zeichenfolge und die `Text` Format. Anschließend es das Objekt für die Daten im Zusammenhang fragt mit der `Text` -Format, mit der `autoConvert` Parametersatz zu `false`. Dieser Versuch schlägt fehl, und das Ergebnis wird angezeigt, in einem Meldungsfeld mit der Bezeichnung "Meldung #1". Im zweiten Versuch, wird die `autoConvert` Parameter `true`. Dieser Versuch ist erfolgreich, und das Ergebnis wird angezeigt, in einem Meldungsfeld mit der Bezeichnung "Meldung #2". Im Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine Liste aller Formate zurück, die den in dieser Instanz gespeicherten Daten zugeordnet sind oder in die diese Daten konvertiert werden können.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Liste aller Formate zurück, die den in dieser Instanz gespeicherten Daten zugeordnet sind oder in die diese Daten konvertiert werden können.</summary>
        <returns>Ein Array mit Namen, das eine Liste aller Formate darstellt, die von den in diesem Objekt gespeicherten Daten unterstützt werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode zum Abrufen der unterstützten Datenformate vor dem Aufruf der <xref:System.Windows.Forms.IDataObject.GetData%2A> Methode. Finden Sie unter den <xref:System.Windows.Forms.DataFormats> -Klasse für die vordefinierten Formate.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist, und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden, wenn Unicode in Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie im <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse implementiert `IDataObject`, um die Verwendung des der `GetFormats` Methode. Zunächst erstellt er ein Datenobjekt (`myDataObject`) mit einer Zeichenfolge und die `Text` Format. Anschließend ruft die Datenformate und Konvertierung der Datenformate in dem Datenobjekt ab und zeigt die resultierende Liste in einem Meldungsfeld an. In diesem Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert"><see langword="true" />, wenn alle Formate abgerufen werden sollen, die den in dieser Instanz gespeicherten Daten zugeordnet sind bzw. in die diese konvertiert werden können, <see langword="false" />, wenn nur systemeigene Datenformate abgerufen werden sollen.</param>
        <summary>Ruft eine Liste aller Formate ab, denen die in dieser Instanz gespeicherten Daten zugeordnet sind oder in die diese Daten konvertiert werden können. Dabei wird über einen booleschen Wert angegeben, ob auch Formate, in die die Daten konvertiert werden können, oder nur systemeigene Datenformate abgerufen werden sollen.</summary>
        <returns>Ein Array mit Namen, das eine Liste aller Formate darstellt, die von den in diesem Objekt gespeicherten Daten unterstützt werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode zum Abrufen der unterstützten Datenformate vor dem Aufruf der <xref:System.Windows.Forms.IDataObject.GetData%2A> Methode. Finden Sie unter den <xref:System.Windows.Forms.DataFormats> -Klasse für die vordefinierten Formate.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist, und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden, wenn Unicode in Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie im <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse implementiert `IDataObject`, um die Verwendung des der `GetFormats` Methode. Zunächst erstellt er ein Datenobjekt (`myDataObject`) mit einer Zeichenfolge und die `UnicodeText` Format. Anschließend werden zwei Abfragen zum Abrufen der Formate, die den Daten zugeordnet. In der ersten Abfrage wird die `autoConvert` Parameter `false` : in diesem Fall wird nur das systemeigene Format der Daten zurückgegeben. In der zweiten Abfrage wird die `autoConvert` Parameter `true`, sodass er ruft die Liste der Formate, einschließlich der Formate, die in die Daten konvertiert werden können. In jedem Fall wird die resultierende Liste in einem Meldungsfeld angezeigt. In diesem Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Speichert die angegebenen Daten und das ihnen zugeordnete Format in dieser Instanz.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Die zu speichernden Daten.</param>
        <summary>Speichert die angegebenen Daten in dieser Instanz, wobei die Klasse der Daten für das Format verwendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Format wird von der Datenklasse abgeleitet.  
  
 Daten, die mit dieser Methode können in ein kompatibles Format konvertiert werden, wenn sie abgerufen werden.  
  
 Eine Implementierung dieser Methode finden Sie im <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse implementiert `IDataObject`, um die Verwendung des der `SetData` Methode. Zunächst erstellt sie eine Komponente (`myComponent`) und speichert es in ein Datenobjekt (`myDataObject`). Anschließend wird überprüft, ob die angegebenen Daten werden im Objekt gespeichert, und das Ergebnis in einem Meldungsfeld wird angezeigt. Im Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Das den Daten zugeordnete Format. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="data">Die zu speichernden Daten.</param>
        <summary>Speichert die angegebenen Daten und das ihnen zugeordnete Format in dieser Instanz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie nicht über das Format der Zielanwendung kennen, können Sie Daten in verschiedenen Formaten, die mit dieser Methode speichern.  
  
 Daten, die mit dieser Methode können in ein kompatibles Format konvertiert werden, wenn sie abgerufen werden.  
  
 Eine Implementierung dieser Methode finden Sie im <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse implementiert `IDataObject`, um die Verwendung des der `SetData` Methode. Zunächst erstellt er ein Datenobjekt (`myDataObject`) und speichert eine Zeichenfolge im Objekt zur Angabe der `UnicodeText` Format. Und dann, Daten im Objekt zur Angabe abgerufen der `Text` formatieren, damit die Daten konvertiert werden, um die `Text` Format. Das Ergebnis wird in einem Meldungsfeld angezeigt. In diesem Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ein <see cref="T:System.Type" />, der das den Daten zugeordnete Format darstellt. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="data">Die zu speichernden Daten.</param>
        <summary>Speichert die angegebenen Daten und den zugeordneten Klassentyp in dieser Instanz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie nicht über das Format der Zielanwendung kennen, können Sie Daten in verschiedenen Formaten, die mit dieser Methode speichern.  
  
 Daten, die mit dieser Methode können in ein kompatibles Format konvertiert werden, wenn sie abgerufen werden.  
  
 Eine Implementierung dieser Methode finden Sie im <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse implementiert `IDataObject`, um die Verwendung des der `SetData` Methode. Zunächst erstellt sie eine Komponente (`myComponent`) und speichert es in ein Datenobjekt (`myDataObject`), wobei `myType` an das Format der Daten. Anschließend wird überprüft, ob die Daten des angegebenen Typs im Objekt gespeichert ist, und das Ergebnis in einem Meldungsfeld wird angezeigt. Im Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Das den Daten zugeordnete Format. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="autoConvert"><see langword="true" />, um die Konvertierung der Daten in ein anderes Format zuzulassen, andernfalls <see langword="false" />.</param>
        <param name="data">Die zu speichernden Daten.</param>
        <summary>Speichert die angegebenen Daten in dieser Instanz, wobei die Klasse der Daten für das Format verwendet wird. Dabei gibt ein boolescher Wert an, ob die Daten in ein anderes Format konvertiert werden können.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie nicht über das Format der Zielanwendung kennen, können Sie Daten in verschiedenen Formaten, die mit dieser Methode speichern.  
  
 Eine Implementierung dieser Methode finden Sie im <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse implementiert `IDataObject`, um die Verwendung des der `SetData` Methode. Zunächst erstellt er ein Datenobjekt (`myDataObject`) und speichert eine `UnicodeText` Zeichenfolge, mit der `autoConvert` Parametersatz zu `false`. Klicken Sie dann die Formate abgerufen, die im Objekt gespeicherten Daten zugeordnet, und das Ergebnis wird in einem Meldungsfeld angezeigt wird. Das einzige Format, das den Daten zugeordnet ist die `UnicodeText` Format. In diesem Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5abc2b039389d79c9a7337771dae53202d6337a9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69187742" /></Metadata><TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein formatunabhängiges Verfahren zur Übertragung von Daten bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `IDataObject` -Schnittstelle wird von <xref:System.Windows.Forms.Clipboard> der-Klasse und in Drag & Drop-Vorgängen verwendet.  
  
 Wenn Sie in einer Klasse implementiert werden <xref:System.Windows.Forms.IDataObject> , ermöglichen die-Methoden dem Benutzer das Speichern von Daten in mehreren Formaten in einer Instanz der-Klasse. Das Speichern von Daten in mehr als einem Format erhöht die Wahrscheinlichkeit, dass eine Zielanwendung, deren Formatanforderungen Sie möglicherweise nicht kennen, die gespeicherten Daten abrufen kann. Um Daten in einer Instanz von <xref:System.Windows.Forms.IDataObject>zu speichern, müssen Sie die <xref:System.Windows.Forms.IDataObject.SetData%2A> -Methode aufrufen und `format` das Datenformat im-Parameter angeben. Legen Sie `autoConvert` den- `false` Parameter auf fest, wenn Sie nicht möchten, dass gespeicherte Daten beim Abrufen in ein anderes Format konvertiert werden. Rufen <xref:System.Windows.Forms.IDataObject.SetData%2A> Sie in einer Instanz von <xref:System.Windows.Forms.IDataObject> mehrmals auf, um Daten in mehr als einem Format zu speichern.  
  
 Sie rufen gespeicherte Daten von einem <xref:System.Windows.Forms.IDataObject> ab, indem <xref:System.Windows.Forms.IDataObject.GetData%2A> Sie die-Methode aufrufen und `format` das Datenformat im-Parameter angeben. Legen Sie `autoConvert` den- `false` Parameter auf fest, um nur Daten abzurufen, die im angegebenen Format gespeichert wurden. Um die gespeicherten Daten in das angegebene Format zu konvertieren, `autoConvert` legen `true`Sie auf fest, oder `autoConvert`verwenden Sie nicht.  
  
 Verwenden Sie die folgenden <xref:System.Windows.Forms.IDataObject> <xref:System.Windows.Forms.IDataObject> Methoden, um die Formate der in einem gespeicherten Daten zu ermitteln.  
  
-   Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> die-Methode auf, um ein Array aller Formate abzurufen, in denen die Daten verfügbar sind. Legen Sie `autoConvert` den- `false` Parameter auf fest, um nur die Formate zu erhalten, in denen die Daten gespeichert sind. Um alle Formate, in denen die Daten verfügbar sind, zu erhalten `autoConvert` , `true`legen Sie auf fest, oder verwenden Sie diesen Parameter nicht.  
  
-   Ruft die <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> -Methode auf, um zu bestimmen, ob gespeicherte Daten in einem bestimmten Format verfügbar sind. Wenn Sie nicht möchten, dass gespeicherte Daten in das angegebene Format konvertiert werden, legen Sie `autoConvert` den- `false`Parameter auf fest.  
  
 Eine Implementierung <xref:System.Windows.Forms.DataObject> dieser Schnittstelle finden Sie in der-Klasse. Informationen zu <xref:System.Windows.Forms.DataFormats> den vordefinierten <xref:System.Windows.Forms.Clipboard> Datenformaten finden Sie in der-Klasse.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft die Daten ab, die dem angegebenen Datenformat zugeordnet sind.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Das Format der abzurufenden Daten. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Ruft die Daten ab, die dem angegebenen Datenformat zugeordnet sind.</summary>
        <returns>Die dem angegebenen Format zugeordneten Daten oder <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Methode keine Daten im angegebenen Format finden kann, wird versucht, die Daten in das-Format zu konvertieren. Wenn die Daten nicht in das angegebene Format konvertiert werden können, gibt diese `null`Methode zurück.  
  
 Um zu ermitteln, ob Daten einem Format zugeordnet sind oder in dieses konvertiert werden können, rufen <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> Sie vor <xref:System.Windows.Forms.IDataObject.GetData%2A>dem Aufruf von auf. Ruft <xref:System.Windows.Forms.IDataObject.GetFormats%2A> eine Liste gültiger Formate für die in dieser Instanz gespeicherten Daten auf.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn Sie gespeichert wurden und angeben, dass die Konvertierung zulässig ist, und wenn das angeforderte Format mit dem gespeicherten Format kompatibel ist. Beispielsweise können Daten, die als Unicode gespeichert werden, in Text konvertiert werden.  
  
 Eine Implementierung dieser Methode finden <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>Sie unter.  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:System.Windows.Forms.DataObject> die-Klasse verwendet `IDataObject,` , die implementiert, um die `GetData` Verwendung der-Methode zu veranschaulichen. Die-Methode wird verwendet, um die in `myDataObject`gespeicherten Daten abzurufen, die dem `Text` -Format zugeordnet sind. Im Beispiel wird davon ausgegangen, dass Sie bereits <xref:System.Windows.Forms.Form> einen `Form1` mit dem <xref:System.Windows.Forms.TextBox> Namen `textBox1`und ein mit dem Namen erstellt haben  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Ein <see cref="T:System.Type" />, das das Format der abzurufenden Daten darstellt. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Ruft die Daten ab, die dem angegebenen Format für den Klassentyp zugeordnet sind.</summary>
        <returns>Die dem angegebenen Format zugeordneten Daten oder <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Methode keine Daten im angegebenen Format finden kann, wird versucht, die Daten in das-Format zu konvertieren. Wenn die Daten nicht in das angegebene Format konvertiert werden können, gibt diese `null`Methode zurück.  
  
 Um zu ermitteln, ob Daten einem Format zugeordnet sind oder in dieses konvertiert werden können, rufen <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> Sie vor <xref:System.Windows.Forms.IDataObject.GetData%2A>dem Aufruf von auf. Ruft <xref:System.Windows.Forms.IDataObject.GetFormats%2A> eine Liste gültiger Formate für die in dieser Instanz gespeicherten Daten auf.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn Sie gespeichert wurden und angeben, dass die Konvertierung zulässig ist, und wenn das angeforderte Format mit dem gespeicherten Format kompatibel ist. Beispielsweise können Daten, die als Unicode gespeichert werden, in Text konvertiert werden.  
  
 Eine Implementierung dieser Methode finden <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>Sie unter.  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:System.Windows.Forms.DataObject> die-Klasse, `IDataObject`die implementiert, verwendet, um die `GetData` Verwendung der-Methode zu veranschaulichen. Die-Methode wird verwendet, um die in `myObject`gespeicherten Daten abzurufen, die mit einem bestimmten `myType`Typ verknüpft sind. Der Typ der abgerufenen Daten wird in einem Meldungs Feld angezeigt. Im Beispiel wird davon ausgegangen, dass Sie bereits <xref:System.Windows.Forms.Form> einen `Form1`mit dem Namen erstellt haben.  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Das Format der abzurufenden Daten. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="autoConvert"><see langword="true" />, wenn die Daten in das angegebene Format konvertiert werden sollen, andernfalls <see langword="false" />.</param>
        <summary>Ruft die dem angegebenen Format zugeordneten Daten ab. Mit einem booleschen Wert wird dabei festgelegt, ob die Daten in das Format konvertiert werden sollen.</summary>
        <returns>Die dem angegebenen Format zugeordneten Daten oder <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der `autoConvert` -Parameter `true` ist und diese Methode keine Daten im angegebenen Format finden kann, wird versucht, die Daten in das-Format zu konvertieren. Wenn die Daten nicht in das angegebene Format konvertiert werden können oder wenn die Daten mit dem `autoConvert` auf `false`festgelegten-Parameter gespeichert wurden, gibt `null`diese Methode zurück.  
  
 Wenn der `autoConvert` -Parameter `false`ist, gibt diese Methode Daten im angegebenen Format zurück, `null` oder, wenn keine Daten in diesem Format gefunden werden können.  
  
 Um zu ermitteln, ob Daten einem Format zugeordnet sind oder in dieses konvertiert werden können, rufen <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> Sie vor <xref:System.Windows.Forms.IDataObject.GetData%2A>dem Aufruf von auf. Ruft <xref:System.Windows.Forms.IDataObject.GetFormats%2A> eine Liste gültiger Formate für die in dieser Instanz gespeicherten Daten auf.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn Sie gespeichert wurden und angeben, dass die Konvertierung zulässig ist, und wenn das angeforderte Format mit dem gespeicherten Format kompatibel ist. Beispielsweise können Daten, die als Unicode gespeichert werden, in Text konvertiert werden.  
  
 Eine Implementierung dieser Methode finden <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>Sie unter.  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:System.Windows.Forms.DataObject> die-Klasse, `IDataObject`die implementiert, verwendet, um die `GetData` Verwendung der-Methode zu veranschaulichen. Im Beispiel werden die in einem `DataObject`gespeicherten Daten abgerufen, wobei der `autoConvert` -Parameter verwendet wird, um anzugeben, ob das Datenformat konvertiert werden soll. `myDataObject` Zuerst wird mit Textdaten erstellt. Anschließend wird im Beispiel zweimal versucht, die Daten abzurufen. In der ersten Testversion wird das Format als Zeichenfolge angegeben, und der `autoConvert` -Parameter `false`wird auf festgelegt. Diese Testversion schlägt fehl, und das Ergebnis wird in einem Meldungs Feld mit der Bezeichnung "Message #1" angezeigt. In der zweiten Testversion Ruft das Beispiel dieselben Daten ab, wobei der `autoConvert` -Parameter auf `true`festgelegt ist. Diese Testversion ist erfolgreich, und das Ergebnis wird in einem Meldungs Feld mit der Bezeichnung "Message #2" angezeigt. Im Beispiel wird davon ausgegangen, dass Sie <xref:System.Windows.Forms.Form> einen `Form1`mit dem Namen erstellt haben.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob den in dieser Instanz gespeicherten Daten das angegebene Format zugewiesen ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Das zu suchende Format. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Bestimmt, ob den in dieser Instanz gespeicherten Daten das angegebene Format zugewiesen ist bzw. sie in das Format konvertiert werden können.</summary>
        <returns><see langword="true" />, wenn den in dieser Instanz gespeicherten Daten das angegebene Format zugeordnet ist oder sie in dieses Format konvertiert werden können, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode auf, um zu bestimmen, ob <xref:System.Windows.Forms.DataObject> ein Format <xref:System.Windows.Forms.IDataObject.GetData%2A>in vorhanden ist, bevor aufgerufen wird Ruft <xref:System.Windows.Forms.IDataObject.GetFormats%2A> für die in dieser Instanz verfügbaren Formate auf.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn Sie gespeichert wurden und angeben, dass die Konvertierung zulässig ist, und wenn das angeforderte Format mit dem gespeicherten Format kompatibel ist. Beispielsweise können Daten, die als Unicode gespeichert werden, in Text konvertiert werden.  
  
 Eine Implementierung dieser Methode finden <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>Sie unter.  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:System.Windows.Forms.DataObject> die-Klasse, `IDataObject`die implementiert, verwendet, um die `GetDataPresent` Verwendung der-Methode zu veranschaulichen. Zuerst wird ein Datenobjekt mit einer Zeichenfolge und dem `Text` -Format erstellt. Anschließend überprüft er, ob die Daten im `Text` Format vorhanden sind, und zeigt die Ergebnisse in einem Meldungs Feld an. Im Beispiel wird davon ausgegangen, dass Sie <xref:System.Windows.Forms.Form> einen `Form1`mit dem Namen erstellt haben.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format"><see cref="T:System.Type" /> stellt das Format dar, das gesucht werden soll. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Bestimmt, ob den in dieser Instanz gespeicherten Daten das angegebene Format zugewiesen ist bzw. sie in das Format konvertiert werden können.</summary>
        <returns><see langword="true" />, wenn den in dieser Instanz gespeicherten Daten das angegebene Format zugewiesen ist bzw. sie in das Format konvertiert werden können, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode auf, um zu bestimmen, ob <xref:System.Windows.Forms.DataObject> ein Format <xref:System.Windows.Forms.IDataObject.GetData%2A>in vorhanden ist, bevor aufgerufen wird Ruft <xref:System.Windows.Forms.IDataObject.GetFormats%2A> für die in dieser Instanz verfügbaren Formate auf.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn Sie gespeichert wurden und angeben, dass die Konvertierung zulässig ist, und wenn das angeforderte Format mit dem gespeicherten Format kompatibel ist. Beispielsweise können Daten, die als Unicode gespeichert werden, in Text konvertiert werden.  
  
 Eine Implementierung dieser Methode finden <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>Sie unter.  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:System.Windows.Forms.DataObject> die-Klasse, `IDataObject`die implementiert, verwendet, um die `GetDataPresent` Verwendung der-Methode zu veranschaulichen. Zuerst wird eine Komponente (`myComponent`) erstellt und in einem Datenobjekt (`myDataObject`) gespeichert. Anschließend wird überprüft, ob die angegebenen Daten in `myDataObject`gespeichert werden. Wenn der Test ausgewertet `true`wird, wird das Ergebnis in einem Meldungs Feld angezeigt, und der Datentyp wird in einem Textfeld angezeigt. In diesem Beispiel wird davon ausgegangen, dass Sie <xref:System.Windows.Forms.Form> bereits `Form1` einen mit <xref:System.Windows.Forms.TextBox> dem `textBox1`Namen und ein mit der Bezeichnung  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Das zu suchende Format. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="autoConvert"><see langword="true" />, um zu bestimmen, ob die in dieser Instanz gespeicherten Daten in das angegebene Format konvertiert werden können, <see langword="false" />, um zu prüfen, ob die Daten im angegebenen Format vorliegen.</param>
        <summary>Bestimmt, ob den in dieser Instanz gespeicherten Daten das angegebene Format zugewiesen ist. Ein boolescher Wert legt dabei fest, ob die Daten in das Format konvertiert werden sollen.</summary>
        <returns><see langword="true" />, wenn die Daten das angegebene Format aufweisen oder in dieses konvertiert werden können, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode auf, um zu bestimmen, ob <xref:System.Windows.Forms.DataObject> ein Format <xref:System.Windows.Forms.IDataObject.GetData%2A>in vorhanden ist, bevor aufgerufen wird Ruft <xref:System.Windows.Forms.IDataObject.GetFormats%2A> für die in dieser Instanz verfügbaren Formate auf.  
  
 Diese Methode gibt `true` zurück, wenn:  
  
-   Der `autoConvert` -Parameter `true` ist, und die Daten befinden sich in einem Format, das in das entsprechende Format konvertiert werden kann.  
  
-   Der `autoConvert` -Parameter `false` ist, und die Daten sind im entsprechenden Format.  
  
 Diese Methode gibt `false` zurück, wenn:  
  
-   Der `autoConvert` -Parameter `true` ist, und diese Methode kann keine Daten im angegebenen Format finden, und es können keine Daten in das angegebene Format konvertiert werden, oder die `autoConvert` Daten wurden `false`gespeichert, wobei auf festgelegt wurde.  
  
-   Der `autoConvert` -Parameter `false`ist, und in dieser Instanz sind keine Daten im angegebenen Format vorhanden.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn Sie gespeichert wurden und angeben, dass die Konvertierung zulässig ist, und wenn das angeforderte Format mit dem gespeicherten Format kompatibel ist. Beispielsweise können Daten, die als Unicode gespeichert werden, in Text konvertiert werden.  
  
 Eine Implementierung dieser Methode finden <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>Sie unter.  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:System.Windows.Forms.DataObject> die-Klasse, `IDataObject`die implementiert, verwendet, um die `GetDataPresent` Verwendung der-Methode zu veranschaulichen. Zuerst wird ein Datenobjekt (`myDataObject`) mit einer Zeichenfolge und dem `Text` -Format erstellt. Anschließend wird das-Objekt nach Daten abgefragt, `Text` die dem Format zugeordnet `autoConvert` sind, wobei `false`der-Parameter auf festgelegt ist. Diese Testversion schlägt fehl, und das Ergebnis wird in einem Meldungs Feld mit der Bezeichnung "Message #1" angezeigt. In der zweiten Testversion wird der `autoConvert` -Parameter auf `true`festgelegt. Diese Testversion ist erfolgreich, und das Ergebnis wird in einem Meldungs Feld mit der Bezeichnung "Message #2" angezeigt. Im Beispiel wird davon ausgegangen, dass Sie <xref:System.Windows.Forms.Form> einen `Form1`mit dem Namen erstellt haben.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine Liste aller Formate zurück, die den in dieser Instanz gespeicherten Daten zugeordnet sind oder in die diese Daten konvertiert werden können.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Liste aller Formate zurück, die den in dieser Instanz gespeicherten Daten zugeordnet sind oder in die diese Daten konvertiert werden können.</summary>
        <returns>Ein Array mit Namen, das eine Liste aller Formate darstellt, die von den in diesem Objekt gespeicherten Daten unterstützt werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode auf, um die unterstützten Datenformate <xref:System.Windows.Forms.IDataObject.GetData%2A> vor dem Aufrufen der-Methode abzurufen. Die vordefinierten <xref:System.Windows.Forms.DataFormats> Formate finden Sie in der-Klasse.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn Sie gespeichert wurden und angeben, dass die Konvertierung zulässig ist, und wenn das angeforderte Format mit dem gespeicherten Format kompatibel ist. Beispielsweise können Daten, die als Unicode gespeichert werden, in Text konvertiert werden.  
  
 Eine Implementierung dieser Methode finden <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>Sie unter.  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:System.Windows.Forms.DataObject> die-Klasse, `IDataObject`die implementiert, verwendet, um die `GetFormats` Verwendung der-Methode zu veranschaulichen. Zuerst wird ein Datenobjekt (`myDataObject`) mit einer Zeichenfolge und dem `Text` -Format erstellt. Anschließend werden alle Datenformate und Daten Konvertierungs Formate im Datenobjekt abgerufen, und die resultierende Liste wird in einem Meldungs Feld angezeigt. In diesem Beispiel wird davon ausgegangen, dass <xref:System.Windows.Forms.Form> Sie `Form1`einen mit dem Namen erstellt haben  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert"><see langword="true" />, wenn alle Formate abgerufen werden sollen, die den in dieser Instanz gespeicherten Daten zugeordnet sind bzw. in die diese konvertiert werden können, <see langword="false" />, wenn nur systemeigene Datenformate abgerufen werden sollen.</param>
        <summary>Ruft eine Liste aller Formate ab, denen die in dieser Instanz gespeicherten Daten zugeordnet sind oder in die diese Daten konvertiert werden können. Dabei wird über einen booleschen Wert angegeben, ob auch Formate, in die die Daten konvertiert werden können, oder nur systemeigene Datenformate abgerufen werden sollen.</summary>
        <returns>Ein Array mit Namen, das eine Liste aller Formate darstellt, die von den in diesem Objekt gespeicherten Daten unterstützt werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode auf, um die unterstützten Datenformate <xref:System.Windows.Forms.IDataObject.GetData%2A> vor dem Aufrufen der-Methode abzurufen. Die vordefinierten <xref:System.Windows.Forms.DataFormats> Formate finden Sie in der-Klasse.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn Sie gespeichert wurden und angeben, dass die Konvertierung zulässig ist, und wenn das angeforderte Format mit dem gespeicherten Format kompatibel ist. Beispielsweise können Daten, die als Unicode gespeichert werden, in Text konvertiert werden.  
  
 Eine Implementierung dieser Methode finden <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>Sie unter.  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:System.Windows.Forms.DataObject> die-Klasse, `IDataObject`die implementiert, verwendet, um die `GetFormats` Verwendung der-Methode zu veranschaulichen. Zuerst wird ein Datenobjekt (`myDataObject`) mit einer Zeichenfolge und dem `UnicodeText` -Format erstellt. Anschließend werden zwei Abfragen durchführt, um die mit den Daten verknüpften Formate zu erhalten. In der ersten Abfrage wird der `autoConvert` -Parameter auf `false` festgelegt: in diesem Fall wird nur das Native Format der Daten zurückgegeben. In der zweiten Abfrage wird der `autoConvert` -Parameter auf `true`festgelegt, sodass die Liste der Formate abgerufen wird, einschließlich der Formate, in die die Daten konvertiert werden können. In jedem Fall wird die resultierende Liste in einem Meldungs Feld angezeigt. In diesem Beispiel wird davon ausgegangen, dass <xref:System.Windows.Forms.Form> Sie `Form1`einen mit dem Namen erstellt haben  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Speichert die angegebenen Daten und das ihnen zugeordnete Format in dieser Instanz.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Die zu speichernden Daten.</param>
        <summary>Speichert die angegebenen Daten in dieser Instanz, wobei die Klasse der Daten für das Format verwendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Format wird von der Datenklasse abgeleitet.  
  
 Daten, die mit dieser Methode gespeichert werden, können beim Abrufen in ein kompatibles Format konvertiert werden.  
  
 Eine Implementierung dieser Methode finden <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>Sie unter.  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:System.Windows.Forms.DataObject> die-Klasse, `IDataObject`die implementiert, verwendet, um die `SetData` Verwendung der-Methode zu veranschaulichen. Zuerst wird eine Komponente (`myComponent`) erstellt und in einem Datenobjekt (`myDataObject`) gespeichert. Anschließend überprüft er, ob die angegebenen Daten im Datenobjekt gespeichert sind, und zeigt das Ergebnis in einem Meldungs Feld an. Im Beispiel wird davon ausgegangen, dass Sie <xref:System.Windows.Forms.Form> einen `Form1`mit dem Namen erstellt haben.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Das den Daten zugeordnete Format. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="data">Die zu speichernden Daten.</param>
        <summary>Speichert die angegebenen Daten und das ihnen zugeordnete Format in dieser Instanz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie das Format der Zielanwendung nicht kennen, können Sie mit dieser Methode Daten in mehreren Formaten speichern.  
  
 Daten, die mit dieser Methode gespeichert werden, können beim Abrufen in ein kompatibles Format konvertiert werden.  
  
 Eine Implementierung dieser Methode finden <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>Sie unter.  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:System.Windows.Forms.DataObject> die-Klasse, `IDataObject`die implementiert, verwendet, um die `SetData` Verwendung der-Methode zu veranschaulichen. Zuerst wird ein Datenobjekt (`myDataObject`) erstellt, und eine Zeichenfolge wird im-Objekt gespeichert, das das `UnicodeText` Format angibt. Anschließend werden die im-Objekt gespeicherten Daten abgerufen, die das `Text` -Format angeben, damit die Daten in das `Text` -Format konvertiert werden. Das Ergebnis wird in einem Meldungs Feld angezeigt. In diesem Beispiel wird davon ausgegangen, dass <xref:System.Windows.Forms.Form> Sie `Form1`einen mit dem Namen erstellt haben  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ein <see cref="T:System.Type" />, der das den Daten zugeordnete Format darstellt. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="data">Die zu speichernden Daten.</param>
        <summary>Speichert die angegebenen Daten und den zugeordneten Klassentyp in dieser Instanz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie das Format der Zielanwendung nicht kennen, können Sie mit dieser Methode Daten in mehreren Formaten speichern.  
  
 Daten, die mit dieser Methode gespeichert werden, können beim Abrufen in ein kompatibles Format konvertiert werden.  
  
 Eine Implementierung dieser Methode finden <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>Sie unter.  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:System.Windows.Forms.DataObject> die-Klasse, `IDataObject`die implementiert, verwendet, um die `SetData` Verwendung der-Methode zu veranschaulichen. Zuerst wird eine Komponente (`myComponent`) erstellt und in einem Datenobjekt (`myDataObject`) gespeichert. dabei wird zum `myType` angeben des Datenformats verwendet. Anschließend wird überprüft, ob die Daten des angegebenen Typs im-Objekt gespeichert sind, und das Ergebnis wird in einem Meldungs Feld angezeigt. Im Beispiel wird davon ausgegangen, dass Sie <xref:System.Windows.Forms.Form> einen `Form1`mit dem Namen erstellt haben.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Das den Daten zugeordnete Format. Vordefinierte Formate finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="autoConvert"><see langword="true" />, um die Konvertierung der Daten in ein anderes Format zuzulassen, andernfalls <see langword="false" />.</param>
        <param name="data">Die zu speichernden Daten.</param>
        <summary>Speichert die angegebenen Daten in dieser Instanz, wobei die Klasse der Daten für das Format verwendet wird. Dabei gibt ein boolescher Wert an, ob die Daten in ein anderes Format konvertiert werden können.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie das Format der Zielanwendung nicht kennen, können Sie mit dieser Methode Daten in mehreren Formaten speichern.  
  
 Eine Implementierung dieser Methode finden <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>Sie unter.  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:System.Windows.Forms.DataObject> die-Klasse, `IDataObject`die implementiert, verwendet, um die `SetData` Verwendung der-Methode zu veranschaulichen. Zuerst wird ein Datenobjekt`myDataObject`() erstellt und eine `UnicodeText` Zeichenfolge darin gespeichert, wobei der `autoConvert` -Parameter auf `false`festgelegt ist. Anschließend werden die Formate abgerufen, die den im-Objekt gespeicherten Daten zugeordnet sind, und das Ergebnis wird in einem Meldungs Feld angezeigt. Das einzige Format, das den Daten zugeordnet ist `UnicodeText` , ist das Format. In diesem Beispiel wird davon ausgegangen, dass <xref:System.Windows.Forms.Form> Sie `Form1`einen mit dem Namen erstellt haben  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>

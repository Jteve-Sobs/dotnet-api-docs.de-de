<Type Name="ColorDialog" FullName="System.Windows.Forms.ColorDialog">
  <Metadata><Meta Name="ms.openlocfilehash" Value="83dbd909500a97157edbbed886d6583163145b31" /><Meta Name="ms.sourcegitcommit" Value="c573d537afba2d4c1463538f1095f2f155025464" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/16/2019" /><Meta Name="ms.locfileid" Value="72398863" /></Metadata><TypeSignature Language="C#" Value="public class ColorDialog : System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ColorDialog extends System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ColorDialog" />
  <TypeSignature Language="VB.NET" Value="Public Class ColorDialog&#xA;Inherits CommonDialog" />
  <TypeSignature Language="C++ CLI" Value="public ref class ColorDialog : System::Windows::Forms::CommonDialog" />
  <TypeSignature Language="F#" Value="type ColorDialog = class&#xA;    inherit CommonDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.CommonDialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Color")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Standarddialogfeld dar, in dem die verfügbaren Farben angezeigt werden sowie Steuerelemente, mit denen Benutzer benutzerdefinierte Farben definieren können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der geerbte Member <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> muss aufgerufen werden, um dieses bestimmte allgemeine Dialogfeld zu erstellen. <xref:System.Windows.Forms.CommonDialog.HookProc%2A> kann überschrieben werden, um bestimmte Funktionen für den Dialogfeld-Hook zu implementieren. Verwenden Sie <xref:System.Windows.Forms.ColorDialog.Color%2A>, um die vom Benutzer ausgewählte Farbe abzurufen.  
  
 Wenn Sie eine Instanz von <xref:System.Windows.Forms.ColorDialog> erstellen, werden einige der Lese-/Schreibeigenschaften auf anfängliche Werte festgelegt. Eine Liste dieser Werte finden Sie im <xref:System.Windows.Forms.ColorDialog.%23ctor%2A>-Konstruktor.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Erstellung neuer <xref:System.Windows.Forms.ColorDialog> veranschaulicht. Für dieses Beispiel ist es erforderlich, dass die-Methode in einem vorhandenen Formular aufgerufen wird, das über eine <xref:System.Windows.Forms.TextBox> und <xref:System.Windows.Forms.Button> verfügt.  
  
 [!code-cpp[Classic ColorDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.CommonDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ColorDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ColorDialog.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ColorDialog();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.ColorDialog" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie eine Instanz von <xref:System.Windows.Forms.ColorDialog> erstellen, werden die folgenden Lese-/Schreibeigenschaften auf anfängliche Werte festgelegt.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A>|`true`|  
|<xref:System.Windows.Forms.ColorDialog.AnyColor%2A>|`false`|  
|<xref:System.Windows.Forms.ColorDialog.Color%2A>|`Color.Black`|  
|<xref:System.Windows.Forms.ColorDialog.CustomColors%2A>|`null`|  
|<xref:System.Windows.Forms.ColorDialog.FullOpen%2A>|`false`|  
|<xref:System.Windows.Forms.ColorDialog.ShowHelp%2A>|`false`|  
|<xref:System.Windows.Forms.ColorDialog.SolidColorOnly%2A>|`false`|  
  
 Sie können den Wert für jede dieser Eigenschaften durch einen separaten aufrufsbefehl ändern.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowFullOpen">
      <MemberSignature Language="C#" Value="public virtual bool AllowFullOpen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowFullOpen" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.AllowFullOpen" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowFullOpen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowFullOpen { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowFullOpen : bool with get, set" Usage="System.Windows.Forms.ColorDialog.AllowFullOpen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob im Dialogfeld benutzerdefinierte Farben definiert werden können, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn benutzerdefinierte Farben definiert werden können, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `false` festgelegt ist, wird die zugehörige Schaltfläche im Dialogfeld deaktiviert, und der Benutzer kann im Dialogfeld nicht auf das Steuerelement benutzerdefinierte Farben zugreifen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Erstellung neuer <xref:System.Windows.Forms.ColorDialog> veranschaulicht. Für dieses Beispiel ist es erforderlich, dass die-Methode in einem vorhandenen Formular aufgerufen wird, das über eine <xref:System.Windows.Forms.TextBox> und <xref:System.Windows.Forms.Button> verfügt.  
  
 [!code-cpp[Classic ColorDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ColorDialog.FullOpen" />
      </Docs>
    </Member>
    <Member MemberName="AnyColor">
      <MemberSignature Language="C#" Value="public virtual bool AnyColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AnyColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.AnyColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AnyColor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AnyColor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AnyColor : bool with get, set" Usage="System.Windows.Forms.ColorDialog.AnyColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob im Dialogfeld bei den Grundfarben alle verfügbaren Farben angezeigt werden, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn im Dialogfeld unter den Grundfarben alle verfügbaren Farben angezeigt werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird das Initialisieren einer <xref:System.Windows.Forms.ColorDialog>-Einstellung der <xref:System.Windows.Forms.ColorDialog.AnyColor%2A> <xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A>-Eigenschaften veranschaulicht. Der <xref:System.Windows.Forms.ColorDialog> ermöglicht dem Benutzer nicht, eine benutzerdefinierte Farbe festzulegen, aber es ermöglicht, dass der vollständige Satz von Standardfarben angezeigt wird. Wenn Sie die <xref:System.Windows.Forms.ColorDialog.SolidColorOnly%2A>-Eigenschaft auf `false` festlegen, wird die Anzeige von Farben aktiviert, die Kombinationen aus anderen Farben auf Systemen mit 256 oder weniger Farben sind. Das Beispiel zeigt auch das Festlegen der <xref:System.Windows.Forms.ColorDialog.ShowHelp%2A>-Eigenschaft und die Behandlung eines <xref:System.Windows.Forms.CommonDialog.HelpRequest>-Ereignisses für ein Dialogfeld. Fügen Sie den folgenden Code in ein Formular ein, und nennen Sie die `InitializeColorDialog`-Methode im Konstruktor des Formulars oder `Load`-Methode, um das Beispiel auszuführen. Für dieses Beispiel ist es erforderlich, dass das `Click`-Ereignis der Schaltfläche mit der im Beispiel definierten Ereignishandlermethode verbunden ist.  
  
 [!code-cpp[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ColorDialog.CustomColors" />
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Drawing.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color Color { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.Color : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ColorDialog.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die von den Benutzern ausgewählte Farbe ab oder legt diese fest.</summary>
        <value>Die von den Benutzern ausgewählte Farbe. Wenn keine Farbe ausgewählt ist, ist Schwarz der Standardwert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Farbe, die der Benutzer zur Laufzeit im Dialogfeld ausgewählt hat, wie in <xref:System.Drawing.Color>-Struktur definiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Erstellung neuer <xref:System.Windows.Forms.ColorDialog> veranschaulicht. Für dieses Beispiel ist es erforderlich, dass die-Methode in einem vorhandenen Formular aufgerufen wird, das über eine <xref:System.Windows.Forms.TextBox> und <xref:System.Windows.Forms.Button> verfügt.  
  
 [!code-cpp[Classic ColorDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="CustomColors">
      <MemberSignature Language="C#" Value="public int[] CustomColors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] CustomColors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.CustomColors" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomColors As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ CustomColors { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomColors : int[] with get, set" Usage="System.Windows.Forms.ColorDialog.CustomColors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den im Dialogfeld angezeigten Satz benutzerdefinierter Farben ab oder legt diesen fest.</summary>
        <value>Ein Satz benutzerdefinierter Farben, die im Dialogfeld angezeigt werden. Der Standardwert ist <see langword="null" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Benutzer können einen eigenen Satz benutzerdefinierter Farben erstellen. Diese Farben sind in einer <xref:System.Int32> enthalten, die aus den BGR-Werten (blau, grün, rot) besteht, die zum Erstellen der Farbe benötigt werden. Weitere Informationen zur Struktur dieser Daten finden Sie unter <xref:System.Drawing.Color>.  
  
 Benutzerdefinierte Farben können nur definiert werden, wenn <xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A> auf `true` festgelegt ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie ein Array vom Typ <xref:System.Int32> hinzugefügt wird, das benutzerdefinierte Farben darstellt <xref:System.Windows.Forms.ColorDialog.CustomColors%2A>. Für dieses Beispiel ist es erforderlich, dass der Code innerhalb einer <xref:System.Windows.Forms.Form> ausgeführt wird.  
  
 [!code-cpp[System.Windows.Forms.ColorDialog CustomColors Property Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialog CustomColors Property Example/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ColorDialog CustomColors Property Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialog CustomColors Property Example/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ColorDialog CustomColors Property Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ColorDialog CustomColors Property Example/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ColorDialog.AnyColor" />
      </Docs>
    </Member>
    <Member MemberName="FullOpen">
      <MemberSignature Language="C#" Value="public virtual bool FullOpen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullOpen" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.FullOpen" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property FullOpen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool FullOpen { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FullOpen : bool with get, set" Usage="System.Windows.Forms.ColorDialog.FullOpen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Steuerelemente für das Erstellen benutzerdefinierter Farben beim Öffnen des Dialogfelds angezeigt werden, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Steuerelemente für benutzerdefinierte Farben beim Öffnen des Dialogfelds verfügbar sind, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig sind die benutzerdefinierten Farb Steuerelemente nicht sichtbar, wenn das Dialogfeld zum ersten Mal geöffnet wird. Sie müssen auf die Schaltfläche `Custom Colors` klicken, um Sie anzuzeigen.  
  
> [!NOTE]
>  Wenn <xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A> `false` ist, hat <xref:System.Windows.Forms.ColorDialog.FullOpen%2A> keine Auswirkung.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ColorDialog.AllowFullOpen" />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="protected virtual IntPtr Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Instance" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.Instance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Instance As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr Instance { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Instance : nativeint" Usage="System.Windows.Forms.ColorDialog.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das zugrunde liegende Fensterinstanzhandle (HINSTANCE) ab.</summary>
        <value>Ein <see cref="T:System.IntPtr" /> mit dem HINSTANCE-Wert des Fensterhandles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode verwendet <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>, um zu verhindern, dass Sie von nicht vertrauenswürdigem Code aufgerufen wird. nur der unmittelbare Aufrufer muss über die Berechtigung "<xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=nameWithType>" verfügen. Wenn Ihr Code von teilweise vertrauenswürdigem Code aufgerufen werden kann, übergeben Sie keine Benutzereingaben an <xref:System.Runtime.InteropServices.Marshal>-Klassen Methoden ohne Validierung. Wichtige Einschränkungen bei der Verwendung des `LinkDemand`-Members finden Sie unter [demand im Vergleich zu LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5).  
  
 Diese Eigenschaft verwendet auch das <xref:System.Security.Permissions.SecurityAction.InheritanceDemand?displayProperty=nameWithType>-Sicherheits Attribut. um diesen Member zu überschreiben, muss die abgeleitete Klasse über die Berechtigung `CustomPermission` verfügen.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für den Betrieb mit nicht verwaltetem Code. Zugehörige Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="protected virtual int Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Options" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.Options" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Options As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int Options { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : int" Usage="System.Windows.Forms.ColorDialog.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft Werte für die Initialisierung von <see cref="T:System.Windows.Forms.ColorDialog" /> ab.</summary>
        <value>Eine bitweise Kombination von internen Werten, die das <see cref="T:System.Windows.Forms.ColorDialog" /> initialisiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ColorDialog.Options%2A>-Eigenschaft entspricht den Flags, die zum Initialisieren eines Farb Dialogfelds mit Win32 verwendet werden. Verwenden Sie die Eigenschaften der <xref:System.Windows.Forms.ColorDialog>-Klasse, um die Optionen zu erhalten und festzulegen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ColorDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="colorDialog.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt alle Optionen auf die Standardwerte zurück, die zuletzt ausgewählte Farbe auf Schwarz und die benutzerdefinierten Farben auf die Standardwerte.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.ColorDialog" />
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected override bool RunDialog (IntPtr hwndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool RunDialog(native int hwndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ColorDialog.RunDialog(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RunDialog (hwndOwner As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool RunDialog(IntPtr hwndOwner);" />
      <MemberSignature Language="F#" Value="override this.RunDialog : nativeint -&gt; bool" Usage="colorDialog.RunDialog hwndOwner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwndOwner">Ein Wert, der das Fensterhandle des Besitzerfensters für das Standarddialogfeld darstellt.</param>
        <summary>Wenn dies in einer abgeleiteten Klasse überschrieben wird, wird hierdurch ein Standarddialogfeld angegeben.</summary>
        <returns><see langword="true" />, wenn das Dialogfeld erfolgreich ausgeführt wurde, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.CommonDialog.RunDialog(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="ShowHelp">
      <MemberSignature Language="C#" Value="public virtual bool ShowHelp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHelp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.ShowHelp" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShowHelp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ShowHelp { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowHelp : bool with get, set" Usage="System.Windows.Forms.ColorDialog.ShowHelp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob im Farbendialogfeld eine Hilfeschaltfläche angezeigt wird, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn die Hilfeschaltfläche im Dialogfeld angezeigt wird, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Erstellung neuer <xref:System.Windows.Forms.ColorDialog> veranschaulicht. Für dieses Beispiel ist es erforderlich, dass die-Methode in einem vorhandenen Formular aufgerufen wird, das über eine <xref:System.Windows.Forms.TextBox> und <xref:System.Windows.Forms.Button> verfügt.  
  
 [!code-cpp[Classic ColorDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SolidColorOnly">
      <MemberSignature Language="C#" Value="public virtual bool SolidColorOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SolidColorOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.SolidColorOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SolidColorOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SolidColorOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SolidColorOnly : bool with get, set" Usage="System.Windows.Forms.ColorDialog.SolidColorOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Benutzer im Dialogfeld ausschließlich Volltonfarben auswählen können, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn Benutzer nur Volltonfarben auswählen können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist auf Systeme mit 256 oder weniger Farben anwendbar. Bei diesen Systemtypen sind einige Farben Verbund von anderen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Initialisieren einer <xref:System.Windows.Forms.ColorDialog>-Einstellung der <xref:System.Windows.Forms.ColorDialog.AnyColor%2A> <xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A>-Eigenschaften veranschaulicht. Der <xref:System.Windows.Forms.ColorDialog> ermöglicht dem Benutzer nicht, eine benutzerdefinierte Farbe festzulegen, aber es ermöglicht, dass der vollständige Satz von Standardfarben angezeigt wird. Wenn Sie die <xref:System.Windows.Forms.ColorDialog.SolidColorOnly%2A>-Eigenschaft auf `false` festlegen, wird die Anzeige von Farben aktiviert, die Kombinationen aus anderen Farben auf Systemen mit 256 oder weniger Farben sind. Das Beispiel zeigt auch das Festlegen der <xref:System.Windows.Forms.ColorDialog.ShowHelp%2A>-Eigenschaft und die Behandlung eines <xref:System.Windows.Forms.CommonDialog.HelpRequest>-Ereignisses für ein Dialogfeld. Fügen Sie den folgenden Code in ein Formular ein, und nennen Sie die `InitializeColorDialog`-Methode im Konstruktor des Formulars oder `Load`-Methode, um das Beispiel auszuführen. Dieses Beispiel erfordert, dass das `Click`-Ereignis der Schaltfläche mit der im Beispiel definierten Ereignishandlermethode verbunden ist.  
  
 [!code-cpp[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ColorDialog.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="colorDialog.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge zurück, die den <see cref="T:System.Windows.Forms.ColorDialog" /> darstellt.</summary>
        <returns>Ein <see cref="T:System.String" />, der den aktuellen <see cref="T:System.Windows.Forms.ColorDialog" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Rückgabe Zeichenfolge enthält den Typ und den Wert für die <xref:System.Windows.Forms.ColorDialog.Color%2A>-Eigenschaft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

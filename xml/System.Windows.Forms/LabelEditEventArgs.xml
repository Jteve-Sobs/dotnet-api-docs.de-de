<Type Name="LabelEditEventArgs" FullName="System.Windows.Forms.LabelEditEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb51fe8a20396c037f5233e15e328fd3d9d2d042" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70729375" /></Metadata><TypeSignature Language="C#" Value="public class LabelEditEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LabelEditEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.LabelEditEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LabelEditEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LabelEditEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type LabelEditEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Daten für das <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />-Ereignis und das <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />-Ereignis bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.LabelEditEventArgs> <xref:System.Windows.Forms.ListViewItem> -Wert gibt den Index und die Beschriftung eines und die Beschriftung an, nachdem er vom Benutzer bearbeitet wurde. Diese Klasse stellt auch eine <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> -Eigenschaft bereit. Sie können diese Eigenschaft in einem <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> -Ereignishandler verwenden, um zu verhindern, dass der Benutzer die Bezeichnung bearbeitet. Sie können Sie auch in einem <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> Ereignishandler verwenden, um die Änderung rückgängig zu machen, indem Sie die Bezeichnung an ihren ursprünglichen Wert zurückgeben. Dies ist hilfreich, wenn Sie die Benutzereingaben vor dem Commit der Änderung überprüfen möchten.  
  
> [!NOTE]
>  Da das <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> -Ereignis vor dem Commit der Bezeichnungs Bearbeitung ausgeführt wird, <xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=nameWithType> wird das Element durch Aufrufen der-Methode in einem Handler für dieses Ereignis mit dem ursprünglichen Wert sortiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Behandlung <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> des-Ereignisses und <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A> die <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> Verwendung der-und-Eigenschaften veranschaulicht. Um das Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular ein <xref:System.Windows.Forms.ListView> , das `ListView1` ein-Steuerelement mit dem Namen enthält und mindestens drei Elemente enthält. Stellen Sie sicher, dass alle Ereignisse mit ihren Ereignis Behandlungsmethoden verknüpft sind.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListView" />
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
    <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.LabelEditEventArgs" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LabelEditEventArgs (int item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LabelEditEventArgs.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LabelEditEventArgs(int item);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.LabelEditEventArgs : int -&gt; System.Windows.Forms.LabelEditEventArgs" Usage="new System.Windows.Forms.LabelEditEventArgs item" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">Der nullbasierte Index des <see cref="T:System.Windows.Forms.ListViewItem" />, das die zu bearbeitende Bezeichnung enthält.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.LabelEditEventArgs" />-Klasse mit dem angegebenen Index des zu bearbeitenden <see cref="T:System.Windows.Forms.ListViewItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diesen Konstruktor verwenden, wenn Sie <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> das <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> -Ereignis oder das-Ereignis zur Laufzeit erhöhen, um ein <xref:System.Windows.Forms.ListView> bestimmtes Listenelement in der zu bearbeitenden, anzugeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LabelEditEventArgs (int item, string label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 item, string label) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LabelEditEventArgs.#ctor(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item As Integer, label As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LabelEditEventArgs(int item, System::String ^ label);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.LabelEditEventArgs : int * string -&gt; System.Windows.Forms.LabelEditEventArgs" Usage="new System.Windows.Forms.LabelEditEventArgs (item, label)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="item" Type="System.Int32" />
        <Parameter Name="label" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="item">Der nullbasierte Index des <see cref="T:System.Windows.Forms.ListViewItem" />, das die zu bearbeitende Bezeichnung enthält.</param>
        <param name="label">Der neue Text, der der Bezeichnung von <see cref="T:System.Windows.Forms.ListViewItem" /> zugewiesen wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.LabelEditEventArgs" />-Klasse mit dem angegebenen Index des derzeit bearbeiteten <see cref="T:System.Windows.Forms.ListViewItem" /> und dem neuen Text für die Bezeichnung von <see cref="T:System.Windows.Forms.ListViewItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diesen Konstruktor verwenden, wenn Sie <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> das <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> -Ereignis oder das-Ereignis zur Laufzeit erhöhen, um <xref:System.Windows.Forms.ListView> ein Listenelement in der zu bearbeitenden, anzugeben. Mit dem-Konstruktor können Sie auch den neuen Text angeben, der der Bezeichnung von <xref:System.Windows.Forms.ListViewItem>zugeordnet ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public bool CancelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property CancelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancelEdit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CancelEdit : bool with get, set" Usage="System.Windows.Forms.LabelEditEventArgs.CancelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die an der Bezeichnung von <see cref="T:System.Windows.Forms.ListViewItem" /> vorgenommenen Änderungen verworfen werden sollen, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Bearbeitung der Bezeichnung für <see cref="T:System.Windows.Forms.ListViewItem" /> verworfen werden soll, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Eigenschaft verwenden, um die an der Bezeichnung eines <xref:System.Windows.Forms.ListViewItem> vorgenommenen Änderungen abzubrechen und den ursprünglichen Text wiederherzustellen. Verwenden Sie diese Eigenschaft, um zu verhindern, dass die Beschriftung eines Elements in einen Wert geändert wird, der nicht den Anforderungen Ihrer Anwendung entspricht.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Behandlung <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> des-Ereignisses und <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A> die <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> Verwendung der-und-Eigenschaften veranschaulicht. Um das Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular ein, das ein ListView-Steuerelement mit dem Namen ListView1 enthält und mindestens drei Elemente enthält. Stellen Sie sicher, dass alle Ereignisse mit ihren Ereignis Behandlungsmethoden verknüpft sind.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public int Item { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Item" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.Item" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Item { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Item : int" Usage="System.Windows.Forms.LabelEditEventArgs.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den nullbasierten Index des <see cref="T:System.Windows.Forms.ListViewItem" /> ab, das die zu bearbeitende Bezeichnung enthält.</summary>
        <value>Der nullbasierte Index von <see cref="T:System.Windows.Forms.ListViewItem" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Behandlung <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> des-Ereignisses und <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A> die <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> Verwendung der-und-Eigenschaften veranschaulicht. Um das Beispiel auszuführen, fügen Sie den folgenden Code in ein Formular ein, das ein ListView-Steuerelement mit dem Namen ListView1 enthält und mindestens drei Elemente enthält. Stellen Sie sicher, dass alle Ereignisse mit ihren Ereignis Behandlungsmethoden verknüpft sind.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.Label" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Label : string" Usage="System.Windows.Forms.LabelEditEventArgs.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den neuen Text ab, der der Bezeichnung von <see cref="T:System.Windows.Forms.ListViewItem" /> zugewiesen wird.</summary>
        <value>Der neue Text, der dem <see cref="T:System.Windows.Forms.ListViewItem" /> zugeordnet werden soll, oder <see langword="null" />, wenn der Text nicht geändert wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> empfiehlt <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> es sich, durch zu ersetzen oder die Nachricht <xref:System.Windows.Forms.TextBox>an eine mehrzeilige anfügen.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz <xref:System.Windows.Forms.ListView> des `ListView1`Typs mit dem Namen enthält. Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#463](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#463)]
 [!code-vb[System.Windows.Forms.EventExamples#463](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#463)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

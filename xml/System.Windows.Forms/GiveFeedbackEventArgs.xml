<Type Name="GiveFeedbackEventArgs" FullName="System.Windows.Forms.GiveFeedbackEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="759ecacde508e4b2b653da8d0ed73ee7c48da8e6" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48693503" /></Metadata><TypeSignature Language="C#" Value="public class GiveFeedbackEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GiveFeedbackEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.GiveFeedbackEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class GiveFeedbackEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class GiveFeedbackEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type GiveFeedbackEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Daten für das <see cref="E:System.Windows.Forms.Control.GiveFeedback" />-Ereignis bereit, das während eines Ziehvorgangs eintritt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.Control.GiveFeedback> Ereignis tritt auf, während eines Ziehvorgangs. Sie können die Quelle eines Ereignisses ziehen Sie die Darstellung des Mauszeigers zu ändern, um dem Benutzer während eines Drag & Drop-Vorgangs ein visuelles Feedback. Ein <xref:System.Windows.Forms.GiveFeedbackEventArgs> Objekt gibt an, die Art der Drag & Drop-Vorgang und gibt an, ob die Standardcursor verwendet werden.  
  
 Informationen über das Ereignismodell, finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Drag & Drop-Vorgang zwischen zwei <xref:System.Windows.Forms.ListBox> Steuerelemente. Im Beispiel wird die <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode, wenn die Ziehaktion gestartet wird. Die Ziehaktion gestartet wird, wenn die Maus bewegt wurde mehr als <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> aus die Position des Mauszeigers während der <xref:System.Windows.Forms.Control.MouseDown> Ereignis. Die <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methode wird verwendet, um zu bestimmen, den Index des Elements, das beim Ziehen die `MouseDown` Ereignis.  
  
 Das Beispiel veranschaulicht außerdem die Verwendung von benutzerdefiniertem Cursor für den Drag & Drop-Vorgang. Im Beispiel wird davon ausgegangen, dass zwei Cursordateien `3dwarro.cur` und `3dwno.cur`, im Verzeichnis der Anwendung für den benutzerdefinierten vorhanden und Drop bzw. den Cursor. Die benutzerdefinierten Cursor verwendet werden, wenn die `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> aktiviert ist. In benutzerdefinierten Cursor festgelegt sind das <xref:System.Windows.Forms.Control.GiveFeedback> -Ereignishandler.  
  
 Der Tastaturzustand wird ausgewertet, der <xref:System.Windows.Forms.Control.DragOver> -Ereignishandler für das Recht `ListBox`, um zu bestimmen, welche des Ziehvorgangs werden basierend auf den Zustand von UMSCHALTTASTE, STRG, ALT oder STRG + ALT +. Die Position in der `ListBox` der Ablegevorgang richtet auch während der `DragOver` Ereignis. Ist die abzulegenden Daten kein `String`, und klicken Sie dann die <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> nastaven NA hodnotu <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Abschließend wird der Status der Dropdownliste angezeigt, der `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Die Daten für den rechten löschen `ListBox` wird bestimmt, der <xref:System.Windows.Forms.Control.DragDrop> -Ereignishandler und die `String` Wert hinzugefügt wird, an der entsprechenden Stelle in der `ListBox`. Wenn Sie der Ziehvorgang entsteht, die außerhalb der Begrenzungen des Formulars verschoben wird, und klicken Sie dann der Drag & Drop-Vorgang wird abgebrochen, der <xref:System.Windows.Forms.Control.QueryContinueDrag> -Ereignishandler.  
  
 Dieser Code veranschaulicht die Verwendung der <xref:System.Windows.Forms.GiveFeedbackEventArgs> Klasse. Finden Sie unter den <xref:System.Windows.Forms.Control.DoDragDrop%2A> -Methode für das gesamte Codebeispiel dargestellt.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GiveFeedbackEventArgs (System.Windows.Forms.DragDropEffects effect, bool useDefaultCursors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.DragDropEffects effect, bool useDefaultCursors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.GiveFeedbackEventArgs.#ctor(System.Windows.Forms.DragDropEffects,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (effect As DragDropEffects, useDefaultCursors As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GiveFeedbackEventArgs(System::Windows::Forms::DragDropEffects effect, bool useDefaultCursors);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.GiveFeedbackEventArgs : System.Windows.Forms.DragDropEffects * bool -&gt; System.Windows.Forms.GiveFeedbackEventArgs" Usage="new System.Windows.Forms.GiveFeedbackEventArgs (effect, useDefaultCursors)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="useDefaultCursors" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="effect">Die Art der Drag &amp; Drop-Operation. Mögliche Werte werden abgerufen, indem der bitweise Operator OR (|) auf Konstanten angewendet wird, die in <see cref="T:System.Windows.Forms.DragDropEffects" /> definiert werden.</param>
        <param name="useDefaultCursors"><see langword="true" />, wenn Standardzeiger verwendet werden, andernfalls <see langword="false" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.GiveFeedbackEventArgs.Effect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Effect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects Effect { System::Windows::Forms::DragDropEffects get(); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Forms.DragDropEffects" Usage="System.Windows.Forms.GiveFeedbackEventArgs.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das angezeigte Feedback der Drag &amp; Drop-Operation ab.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.DragDropEffects" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt einen Drag & Drop-Vorgang zwischen zwei <xref:System.Windows.Forms.ListBox> Steuerelemente. Im Beispiel wird die <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode, wenn die Ziehaktion gestartet wird. Die Ziehaktion gestartet wird, wenn die Maus bewegt wurde mehr als <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> aus die Position des Mauszeigers während der <xref:System.Windows.Forms.Control.MouseDown> Ereignis. Die <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methode wird verwendet, um zu bestimmen, den Index des Elements, das beim Ziehen die `MouseDown` Ereignis.  
  
 Das Beispiel veranschaulicht außerdem die Verwendung von benutzerdefiniertem Cursor für den Drag & Drop-Vorgang. Im Beispiel wird davon ausgegangen, dass zwei Cursordateien `3dwarro.cur` und `3dwno.cur`, im Verzeichnis der Anwendung für den benutzerdefinierten vorhanden und Drop bzw. den Cursor. Die benutzerdefinierten Cursor verwendet werden, wenn die `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> aktiviert ist. In benutzerdefinierten Cursor festgelegt sind das <xref:System.Windows.Forms.Control.GiveFeedback> -Ereignishandler.  
  
 Der Tastaturzustand wird ausgewertet, der <xref:System.Windows.Forms.Control.DragOver> -Ereignishandler für das Recht `ListBox`, um zu bestimmen, welche des Ziehvorgangs werden basierend auf den Zustand von UMSCHALTTASTE, STRG, ALT oder STRG + ALT +. Die Position in der `ListBox` der Ablegevorgang richtet auch während der `DragOver` Ereignis. Ist die abzulegenden Daten kein `String`, und klicken Sie dann die <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> nastaven NA hodnotu <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Abschließend wird der Status der Dropdownliste angezeigt, der `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Die Daten für den rechten löschen `ListBox` wird bestimmt, der <xref:System.Windows.Forms.Control.DragDrop> -Ereignishandler und die `String` Wert hinzugefügt wird, an der entsprechenden Stelle in der `ListBox`. Wenn Sie der Ziehvorgang entsteht, die außerhalb der Begrenzungen des Formulars verschoben wird, und klicken Sie dann der Drag & Drop-Vorgang wird abgebrochen, der <xref:System.Windows.Forms.Control.QueryContinueDrag> -Ereignishandler.  
  
 Dieser Code veranschaulicht die Verwendung der <xref:System.Windows.Forms.GiveFeedbackEventArgs> Klasse. Finden Sie unter den <xref:System.Windows.Forms.Control.DoDragDrop%2A> -Methode für das gesamte Codebeispiel dargestellt.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCursors">
      <MemberSignature Language="C#" Value="public bool UseDefaultCursors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCursors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultCursors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultCursors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultCursors : bool with get, set" Usage="System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, ob für einen Ziehvorgang die Standardcursor verwendet werden sollen, die Drag &amp; Drop-Effekten zugeordnet sind.</summary>
        <value><see langword="true" />, wenn die Standardzeiger verwendet werden, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das System bietet standardmäßig Drag & Drop-Cursor, für andere Drag & Drop-Vorgänge wie das Verschieben oder kopieren. Wenn <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A> nastaven NA hodnotu `false`, es ist Aufgabe der Ereignisquelle zum entsprechenden Cursor festlegen.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Drag & Drop-Vorgang zwischen zwei <xref:System.Windows.Forms.ListBox> Steuerelemente. Im Beispiel wird die <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode, wenn die Ziehaktion gestartet wird. Die Ziehaktion gestartet wird, wenn die Maus bewegt wurde mehr als <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> aus die Position des Mauszeigers während der <xref:System.Windows.Forms.Control.MouseDown> Ereignis. Die <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Methode wird verwendet, um zu bestimmen, den Index des Elements, das beim Ziehen die `MouseDown` Ereignis.  
  
 Das Beispiel veranschaulicht außerdem die Verwendung von benutzerdefiniertem Cursor für den Drag & Drop-Vorgang. Im Beispiel wird davon ausgegangen, dass zwei Cursordateien `3dwarro.cur` und `3dwno.cur`, im Verzeichnis der Anwendung für den benutzerdefinierten vorhanden und Drop bzw. den Cursor. Die benutzerdefinierten Cursor verwendet werden, wenn die `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> aktiviert ist. In benutzerdefinierten Cursor festgelegt sind das <xref:System.Windows.Forms.Control.GiveFeedback> -Ereignishandler.  
  
 Der Tastaturzustand wird ausgewertet, der <xref:System.Windows.Forms.Control.DragOver> -Ereignishandler für das Recht `ListBox`, um zu bestimmen, welche des Ziehvorgangs werden basierend auf den Zustand von UMSCHALTTASTE, STRG, ALT oder STRG + ALT +. Die Position in der `ListBox` der Ablegevorgang richtet auch während der `DragOver` Ereignis. Ist die abzulegenden Daten kein `String`, und klicken Sie dann die <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> nastaven NA hodnotu <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Abschließend wird der Status der Dropdownliste angezeigt, der `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Die Daten für den rechten löschen `ListBox` wird bestimmt, der <xref:System.Windows.Forms.Control.DragDrop> -Ereignishandler und die `String` Wert hinzugefügt wird, an der entsprechenden Stelle in der `ListBox`. Wenn Sie der Ziehvorgang entsteht, die außerhalb der Begrenzungen des Formulars verschoben wird, und klicken Sie dann der Drag & Drop-Vorgang wird abgebrochen, der <xref:System.Windows.Forms.Control.QueryContinueDrag> -Ereignishandler.  
  
 Dieser Code veranschaulicht die Verwendung der <xref:System.Windows.Forms.GiveFeedbackEventArgs> Klasse. Finden Sie unter den <xref:System.Windows.Forms.Control.DoDragDrop%2A> -Methode für das gesamte Codebeispiel dargestellt.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
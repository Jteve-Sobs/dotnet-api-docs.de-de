<Type Name="Binding" FullName="System.Windows.Forms.Binding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c80e3411c7c174c5488427dc9c324b735d49473" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48660717" /></Metadata><TypeSignature Language="C#" Value="public class Binding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding" />
  <TypeSignature Language="F#" Value="type Binding = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ListBindingConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die einfache Bindung zwischen dem Eigenschaftswert eines Objekts und dem Eigenschaftswert eines Steuerelements dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Forms.Binding> Klasse zum Erstellen und verwalten eine einfache Bindung zwischen der Eigenschaft eines Steuerelements und entweder die Eigenschaft eines Objekts oder die Eigenschaft des aktuellen Objekts in einer Liste von Objekten.  
  
 Als Beispiel für den ersten Fall können Sie binden die <xref:System.Windows.Forms.Control.Text%2A> Eigenschaft eine <xref:System.Windows.Forms.TextBox> die Steuerung an die `FirstName` Eigenschaft eine `Customer` Objekt. Als Beispiel den zweiten Fall können Sie binden die <xref:System.Windows.Forms.Control.Text%2A> Eigenschaft eine <xref:System.Windows.Forms.TextBox> die Steuerung an die `FirstName` Eigenschaft eine <xref:System.Data.DataTable> , die Kunden enthält.  
  
 Die <xref:System.Windows.Forms.Binding> -Klasse auch können Sie Werte für die Anzeige durch Formatieren der <xref:System.Windows.Forms.Binding.Format> Ereignis und zum Abrufen von formatierter Werte über die <xref:System.Windows.Forms.Binding.Parse> Ereignis.  
  
 Beim Erstellen einer <xref:System.Windows.Forms.Binding> Instanz <xref:System.Windows.Forms.Binding.%23ctor%2A> -Konstruktor müssen Sie drei Elemente angeben:  
  
-   Der Name der Steuerelementeigenschaft zu binden.  
  
-   Die Datenquelle  
  
-   Der Pfad, der auf eine Liste oder eine Eigenschaft in der Datenquelle aufgelöst wird. Der Pfad wird auch zum Erstellen des Objekts <xref:System.Windows.Forms.Binding.BindingMemberInfo%2A> Eigenschaft.  
  
 Zunächst müssen Sie angeben, Name der Steuerelementeigenschaft, an die die Daten gebunden werden sollen. Beispielsweise zum Anzeigen von Daten in einem <xref:System.Windows.Forms.TextBox> geben die <xref:System.Windows.Forms.TextBoxBase.Text%2A> Eigenschaft.  
  
 Zweitens können Sie eine Instanz eines beliebigen der Klassen in der folgenden Tabelle als Datenquelle angeben.  
  
|Beschreibung |Beispiel für C#|  
|-----------------|-----------------|  
|Jede Klasse, die implementiert <xref:System.ComponentModel.IBindingList> oder <xref:System.ComponentModel.ITypedList>. Dazu zählen folgende: <xref:System.Data.DataSet>, <xref:System.Data.DataTable>, <xref:System.Data.DataView>, oder <xref:System.Data.DataViewManager>.|`DataSet ds = new DataSet("myDataSet");`|  
|Jede Klasse, die implementiert <xref:System.Collections.IList> eine indizierte Auflistung von Objekten zu erstellen. Die Auflistung muss erstellt und gefüllt, die vor dem Erstellen der <xref:System.Windows.Forms.Binding>. Die Objekte in der Liste müssen alle vom selben Typ sein; Andernfalls wird eine Ausnahme ausgelöst werden.|`ArrayList ar1 = new ArrayList;  Customer1 cust1 = new Customer("Louis");  ar1.Add(cust1);`|  
|Eine stark typisierte <xref:System.Collections.IList> von stark typisierten Objekten|`Customer [] custList = new Customer[3];`|  
  
 Drittens müssen Sie angeben, den Pfad, der eine leere Zeichenfolge sein kann (""), eine einzelner Eigenschaftenname oder eine Hierarchie Punkt getrennten Namen. Wenn Sie den Navigationspfad auf eine leere Zeichenfolge festlegen der <xref:System.Object.ToString%2A> aufgerufene Methode in der zugrunde liegenden Datenquellenobjekt.  
  
 Wenn die Datenquelle ist eine <xref:System.Data.DataTable>, mehrere enthalten kann <xref:System.Data.DataColumn> Objekte, muss der Pfad zum Auflösen in einer bestimmten Spalte verwendet werden.  
  
> [!NOTE]
>  Wenn die Datenquelle ist eine <xref:System.Data.DataSet>, <xref:System.Data.DataViewManager>, oder <xref:System.Data.DataTable>, erfolgt die tatsächliche Bindung zu einer <xref:System.Data.DataView>. Daher sind die gebundenen Zeilen tatsächlich <xref:System.Data.DataRowView> Objekte.  
  
 Ein durch Punkte getrennten Navigationspfad ist erforderlich, wenn die Datenquelle auf ein Objekt festgelegt ist, die mehrere enthält <xref:System.Data.DataTable> Objekte (z. B. eine <xref:System.Data.DataSet> oder <xref:System.Data.DataViewManager>). Sie können auch einen durch Punkte getrennten Navigationspfad verwenden, wenn Sie eine an ein Objekt Bindung, dessen Eigenschaften die Verweise auf andere Objekte (z. B. eine Klasse mit Eigenschaften, die andere Klassenobjekte zurückgeben) zurückgeben. Beispielsweise werden alle folgenden Navigationspfade gültige Datenfelder beschrieben:  
  
-   "Size.Height"  
  
-   "Suppliers.CompanyName"  
  
-   "Regions.regionsToCustomers.CustomerFirstName"  
  
-   "Regions.regionsToCustomers.customersToOrders.ordersToDetails.Quantity"  
  
 Jedes Element des Pfads kann entweder eine Eigenschaft, die in einen einzelnen Wert (z. B. eine ganze Zahl) aufgelöst wird, oder eine Liste von Werten (z. B. ein Array von Zeichenfolgen) zurück. Obwohl jedes Elements in den Pfad einer Liste oder eine Eigenschaft sein kann, muss das letzte Element in einer Eigenschaft aufgelöst werden. Jedes Element erstellt wird, auf das vorherige Element: "Size.Height" wird in wird die <xref:System.Drawing.Size.Height%2A> -Eigenschaft für die aktuelle <xref:System.Drawing.Size>; "Regions.regionsToCustomers.CustomerFirstName" löst in den ersten Namen für den aktuellen Kunden, in denen der Kunde ist einer der Kunden für den aktuellen Bereich.  
  
 Ein <xref:System.Data.DataRelation> gibt eine Liste mit Werten zurück, durch das Verknüpfen einer <xref:System.Data.DataTable> mit einem zweiten <xref:System.Data.DataTable> in einem <xref:System.Data.DataSet>. Wenn die <xref:System.Data.DataSet> enthält <xref:System.Data.DataRelation> Objekte, Sie können angeben, den den Datenmember als eine <xref:System.Data.DataTable.TableName%2A> gefolgt von einem <xref:System.Data.DataRelation.RelationName%2A>, und klicken Sie dann eine <xref:System.Data.DataColumn.ColumnName%2A>. Z. B. wenn die <xref:System.Data.DataTable> mit dem Namen "Suppliers" enthält einen <xref:System.Data.DataRelation> mit dem Namen "suppliers2products", konnte der Datenmember "Suppliers.suppliers2products.ProductName" sein.  
  
 Die Datenquelle bestehen aus einer Reihe von verwandten Klassen. Angenommen Sie, eine Reihe von Klassen, mit der solr-Systeme katalogisiert. Die Klasse, die mit dem Namen `System` enthält eine Eigenschaft mit dem Namen `Stars` , die eine Auflistung von zurückgibt `Star` Objekte. Jede `Star` Objekt verfügt über `Name` und `Mass` Eigenschaften als auch ein `Planets` -Eigenschaft, die eine Auflistung von zurückgibt `Planet` Objekte. In diesem System verwendet jeder Planet verfügt auch über `Mass` und `Name` Eigenschaften. Jede `Planet` -Objekt besitzt eine `Moons` -Eigenschaft, die eine Auflistung von zurückgibt `Moon` Objekte, von denen jeder verfügt auch über `Name` und `Mass` Eigenschaften. Bei Angabe einer `System` Objekt als Datenquelle, können Sie eine der folgenden als Datenmember angeben:  
  
-   "Stars.Name"  
  
-   "Stars.Mass"  
  
-   "Stars.Planets.Name"  
  
-   "Stars.Planets.Mass"  
  
-   "Stars.Planets.Moons.Name"  
  
-   "Stars.Planets.Moons.Mass"  
  
 Steuerelemente, die einfach gebunden werden können, enthalten eine Auflistung von <xref:System.Windows.Forms.Binding> Objekte in einem <xref:System.Windows.Forms.ControlBindingsCollection>, die Sie mithilfe des Steuerelements zugreifen können <xref:System.Windows.Forms.Control.DataBindings%2A> Eigenschaft. Fügen Sie eine <xref:System.Windows.Forms.Binding> der Auflistung durch Aufrufen der <xref:System.Windows.Forms.ControlBindingsCollection.Add%2A> Methode, die auf eine Eigenschaft eines Objekts (oder auf eine Eigenschaft des aktuellen Objekts in einer Liste) und eine Eigenschaft des Steuerelements zu binden.  
  
 Sie können einfache-Bindung an jedes Objekt, das von abgeleitet ist die <xref:System.Windows.Forms.Control?displayProperty=nameWithType> Klasse, z. B. die folgenden Windows-Steuerelemente:  
  
-   <xref:System.Windows.Forms.Button>  
  
-   <xref:System.Windows.Forms.CheckBox>  
  
-   <xref:System.Windows.Forms.CheckedListBox>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.DomainUpDown>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel>  
  
-   <xref:System.Windows.Forms.ListBox>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.NumericUpDown>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.RadioButton>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.ScrollBar>  
  
-   <xref:System.Windows.Forms.StatusBar>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
> [!NOTE]
>  Nur die <xref:System.Windows.Forms.ListControl.SelectedValue%2A> Eigenschaft der <xref:System.Windows.Forms.ComboBox>, <xref:System.Windows.Forms.CheckedListBox>, und <xref:System.Windows.Forms.ListBox> Steuerelement ist einfach gebunden.  
  
 Die <xref:System.Windows.Forms.BindingManagerBase> Klasse ist eine abstrakte Klasse, die alle verwaltet die <xref:System.Windows.Forms.Binding> Objekte für eine bestimmte Datenquelle und des Datenmembers. Abgeleitete Klassen <xref:System.Windows.Forms.BindingManagerBase> sind die <xref:System.Windows.Forms.CurrencyManager> und <xref:System.Windows.Forms.PropertyManager> Klassen. Wie eine <xref:System.Windows.Forms.Binding> verwaltet ist davon abhängig, ob die <xref:System.Windows.Forms.Binding> ist eine listenbindung oder eine eigenschaftenbindung. Z. B. wenn es sich um eine listenbindung ist, können die <xref:System.Windows.Forms.BindingManagerBase> an eine <xref:System.Windows.Forms.BindingManagerBase.Position%2A> in der Liste der <xref:System.Windows.Forms.BindingManagerBase.Position%2A>, daher bestimmt die (nicht alle Elemente in der Liste) tatsächlich auf ein Steuerelement gebunden wird. Zum Zurückgeben des entsprechenden <xref:System.Windows.Forms.BindingManagerBase>, verwenden Sie die <xref:System.Windows.Forms.BindingContext>.  
  
 Um eine neue Zeile hinzuzufügen, um einen Satz von Steuerelementen, die auf die gleiche gebunden <xref:System.Windows.Forms.Binding.DataSource%2A>, verwenden Sie die <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A> -Methode der der <xref:System.Windows.Forms.BindingManagerBase> Klasse. Verwenden der <xref:System.Windows.Forms.BindingContext.Item%2A> Eigenschaft der <xref:System.Windows.Forms.BindingContext> Klasse, um das Zurückgeben des entsprechenden <xref:System.Windows.Forms.CurrencyManager>. Verwenden Sie zum Hinzufügen der neuen Zeile mit Escapezeichen versehen, die <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> Methode.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt ein Windows-Formular mit mehrere Steuerelemente, die einfache Datenbindung veranschaulicht wird. Das Beispiel erstellt eine <xref:System.Data.DataSet> mit zwei Tabellen, die mit dem Namen `Customers` und `Orders`, und ein <xref:System.Data.DataRelation> mit dem Namen `custToOrders`. Vier Steuerelemente (eine <xref:System.Windows.Forms.DateTimePicker> und drei <xref:System.Windows.Forms.TextBox> Steuerelemente) sind Daten, die an Spalten in den Tabellen gebunden. Für jedes Steuerelement, das Beispiel erstellt, und fügt eine <xref:System.Windows.Forms.Binding> des Steuerelements durch die <xref:System.Windows.Forms.Control.DataBindings%2A> Eigenschaft. Im Beispiel gibt eine <xref:System.Windows.Forms.BindingManagerBase> für jede Tabelle über des Formulars <xref:System.Windows.Forms.BindingContext>. Vier <xref:System.Windows.Forms.Button> steuert, Inkrement oder Dekrement der <xref:System.Windows.Forms.BindingManagerBase.Position%2A> Eigenschaft für die <xref:System.Windows.Forms.BindingManagerBase> Objekte.  
  
 [!code-cpp[Classic Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding Example/VB/source.vb#1)]  
 
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
    <altmember cref="T:System.Windows.Forms.ComboBox" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Binding" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Der Name der Steuerelementeigenschaft für die Bindung.</param>
        <param name="dataSource">Ein <see cref="T:System.Object" />, das die Datenquelle darstellt.</param>
        <param name="dataMember">Die Eigenschaft oder Liste, an die die Bindung erfolgen soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Binding" />-Klasse, die eine einfache Bindung der angegebenen Steuerelementeigenschaft an den angegebenen Datenmember der Datenquelle herstellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können eine Instanz einer beliebigen der folgenden Klassen für die Datenquelle angeben:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Jede Klasse, implementiert die <xref:System.Collections.IList> Schnittstelle  
  
-   Jede Klasse  
  
 Finden Sie unter den <xref:System.Windows.Forms.Binding> -Klasse für Weitere Informationen zum Erstellen der `dataMember` Zeichenfolge.  
  
 Bei der Erstellung einer Bindung an die Eigenschaft eines Steuerelements, das neue <xref:System.Windows.Forms.Binding> überprüft durch das gebundene Steuerelement verfügbar gemachten Ereignisse beschrieben und fügt zwei bestimmten Ereignissen:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Ein Ereignis namens *PropertyName* `Changed` (z. B. <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 Wenn Sie versuchen, die an eine Eigenschaft zu binden, die nicht vorhanden ist, eine <xref:System.ArgumentException> ausgelöst, wenn die <xref:System.Windows.Forms.Binding> des Steuerelements hinzugefügt <xref:System.Windows.Forms.Control.DataBindings%2A?displayProperty=nameWithType> Auflistung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel Beispiel bindet ein <xref:System.Windows.Forms.TextBox> Steuerelement auf eine Tabelle in eine <xref:System.Data.DataSet> mit dem Namen `myDataSet`. Das Beispiel erfordert, dass Sie deklariert haben `myDataSet` im Deklarationsabschnitt des Moduls.  
  
 [!code-cpp[Classic Binding.Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Binding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><paramref name="propertyName" /> ist weder eine gültige Eigenschaft eines Steuerelements noch eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ArgumentException">Die von <paramref name="propertyName" /> angegebene Eigenschaft ist im Steuerelement nicht vorhanden.</exception>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
        <altmember cref="T:System.Windows.Forms.CurrencyManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">Der Name der Steuerelementeigenschaft für die Bindung.</param>
        <param name="dataSource">Ein <see cref="T:System.Object" />, das die Datenquelle darstellt.</param>
        <param name="dataMember">Die Eigenschaft oder Liste, an die die Bindung erfolgen soll.</param>
        <param name="formattingEnabled"><see langword="true" />, um die angezeigten Daten zu formatieren, andernfalls <see langword="false" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Binding" />-Klasse. die die angegebene Steuerelementeigenschaft an den angegebenen Datenmember der Datenquelle bindet und optional das Anwenden von Formatierung aktiviert.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Die von <paramref name="propertyName" /> angegebene Eigenschaft ist im Steuerelement nicht vorhanden.  
  
- oder -  
Die angegebene Eigenschaft ist schreibgeschützt.</exception>
        <exception cref="T:System.Exception">Das Formatieren ist deaktiviert, und <paramref name="propertyName" /> ist weder eine gültige Eigenschaft eines Steuerelements noch eine leere Zeichenfolge ("").</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
      </Parameters>
      <Docs>
        <param name="propertyName">Der Name der Steuerelementeigenschaft für die Bindung.</param>
        <param name="dataSource">Ein <see cref="T:System.Object" />, das die Datenquelle darstellt.</param>
        <param name="dataMember">Die Eigenschaft oder Liste, an die die Bindung erfolgen soll.</param>
        <param name="formattingEnabled"><see langword="true" />, um die angezeigten Daten zu formatieren, andernfalls <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Einer der <see cref="T:System.Windows.Forms.DataSourceUpdateMode" />-Werte.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Binding" />-Klasse. die die angegebene Steuerelementeigenschaft an den angegebenen Datenmember der angegebenen Datenquelle bindet. Aktiviert optional die Formatierung und gibt Werte entsprechend der angegebenen Aktualisierungseinstellung an die Datenquelle weiter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können eine Instanz einer beliebigen der folgenden Klassen für die Datenquelle angeben:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Jede Klasse, implementiert die <xref:System.Collections.IList> Schnittstelle  
  
-   Jede Klasse  
  
 Finden Sie unter den <xref:System.Windows.Forms.Binding> -Klasse für Weitere Informationen zum Erstellen der `dataMember` Zeichenfolge.  
  
 Bei der Erstellung einer Bindung an die Eigenschaft eines Steuerelements, das neue <xref:System.Windows.Forms.Binding> überprüft durch das gebundene Steuerelement verfügbar gemachten Ereignisse beschrieben und fügt zwei bestimmten Ereignissen:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Ein Ereignis namens *PropertyName* `Changed` (z. B. <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die von <paramref name="propertyName" /> angegebene Eigenschaft ist im Steuerelement nicht vorhanden.  
  
- oder -  
Die angegebene Datenquelle, der angegebene Datenmember oder die angegebene Steuerelementeigenschaft sind einer anderen Bindung in der Auflistung zugeordnet.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">Der Name der Steuerelementeigenschaft für die Bindung.</param>
        <param name="dataSource">Ein <see cref="T:System.Object" />, das die Datenquelle darstellt.</param>
        <param name="dataMember">Die Eigenschaft oder Liste, an die die Bindung erfolgen soll.</param>
        <param name="formattingEnabled"><see langword="true" />, um die angezeigten Daten zu formatieren, andernfalls <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Einer der <see cref="T:System.Windows.Forms.DataSourceUpdateMode" />-Werte.</param>
        <param name="nullValue">Das <see cref="T:System.Object" />, das auf die gebundene Steuerelementeigenschaft angewendet werden soll, wenn der Wert der Datenquelle <see cref="T:System.DBNull" /> ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Binding" />-Klasse. die die angegebene Steuerelementeigenschaft an den angegebenen Datenmember der angegebenen Datenquelle bindet. Aktiviert optional die Formatierung, gibt Werte entsprechend der angegebenen Aktualisierungseinstellung an die Datenquelle weiter und legt die Eigenschaft auf den angegebenen Wert fest, wenn von der Datenquelle ein <see cref="T:System.DBNull" /> zurückgegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können eine Instanz einer beliebigen der folgenden Klassen für die Datenquelle angeben:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Jede Klasse, implementiert die <xref:System.Collections.IList> Schnittstelle  
  
-   Jede Klasse  
  
 Finden Sie unter den <xref:System.Windows.Forms.Binding> -Klasse für Weitere Informationen zum Erstellen der `dataMember` Zeichenfolge.  
  
 Bei der Erstellung einer Bindung an die Eigenschaft eines Steuerelements, das neue <xref:System.Windows.Forms.Binding> überprüft durch das gebundene Steuerelement verfügbar gemachten Ereignisse beschrieben und fügt zwei bestimmten Ereignissen:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Ein Ereignis namens *PropertyName* `Changed` (z. B. <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die von <paramref name="propertyName" /> angegebene Eigenschaft ist im Steuerelement nicht vorhanden.  
  
- oder -  
Die angegebene Datenquelle, der angegebene Datenmember oder die angegebene Steuerelementeigenschaft sind einer anderen Bindung in der Auflistung zugeordnet.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Der Name der Steuerelementeigenschaft für die Bindung.</param>
        <param name="dataSource">Ein <see cref="T:System.Object" />, das die Datenquelle darstellt.</param>
        <param name="dataMember">Die Eigenschaft oder Liste, an die die Bindung erfolgen soll.</param>
        <param name="formattingEnabled"><see langword="true" />, um die angezeigten Daten zu formatieren, andernfalls <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Einer der <see cref="T:System.Windows.Forms.DataSourceUpdateMode" />-Werte.</param>
        <param name="nullValue">Das <see cref="T:System.Object" />, das auf die gebundene Steuerelementeigenschaft angewendet werden soll, wenn der Wert der Datenquelle <see cref="T:System.DBNull" /> ist.</param>
        <param name="formatString">Ein oder mehrere Formatbezeichnerzeichen, die angeben, wie ein Wert angezeigt werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Binding" />-Klasse. die die angegebene Steuerelementeigenschaft an den angegebenen Datenmember der angegebenen Datenquelle bindet. Aktiviert optional die Formatierung mit der angegebenen Formatzeichenfolge, gibt Werte entsprechend der angegebenen Aktualisierungseinstellung an die Datenquelle weiter und legt die Eigenschaft auf den angegebenen Wert fest, wenn von der Datenquelle ein <see cref="T:System.DBNull" /> zurückgegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können eine Instanz einer beliebigen der folgenden Klassen für die Datenquelle angeben:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Jede Klasse, implementiert die <xref:System.Collections.IList> Schnittstelle  
  
-   Jede Klasse  
  
 Finden Sie unter den <xref:System.Windows.Forms.Binding> -Klasse für Weitere Informationen zum Erstellen der `dataMember` Zeichenfolge.  
  
 Bei der Erstellung einer Bindung an die Eigenschaft eines Steuerelements, das neue <xref:System.Windows.Forms.Binding> überprüft durch das gebundene Steuerelement verfügbar gemachten Ereignisse beschrieben und fügt zwei bestimmten Ereignissen:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Ein Ereignis namens *PropertyName* `Changed` (z. B. <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die von <paramref name="propertyName" /> angegebene Eigenschaft ist im Steuerelement nicht vorhanden.  
  
- oder -  
Die angegebene Datenquelle, der angegebene Datenmember oder die angegebene Steuerelementeigenschaft sind einer anderen Bindung in der Auflistung zugeordnet.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, class System.IFormatProvider formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString, IFormatProvider ^ formatInfo);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string * IFormatProvider -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString, formatInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="propertyName">Der Name der Steuerelementeigenschaft für die Bindung.</param>
        <param name="dataSource">Ein <see cref="T:System.Object" />, das die Datenquelle darstellt.</param>
        <param name="dataMember">Die Eigenschaft oder Liste, an die die Bindung erfolgen soll.</param>
        <param name="formattingEnabled"><see langword="true" />, um die angezeigten Daten zu formatieren, andernfalls <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Einer der <see cref="T:System.Windows.Forms.DataSourceUpdateMode" />-Werte.</param>
        <param name="nullValue">Das <see cref="T:System.Object" />, das auf die gebundene Steuerelementeigenschaft angewendet werden soll, wenn der Wert der Datenquelle <see cref="T:System.DBNull" /> ist.</param>
        <param name="formatString">Ein oder mehrere Formatbezeichnerzeichen, die angeben, wie ein Wert angezeigt werden soll.</param>
        <param name="formatInfo">Eine Implementierung von <see cref="T:System.IFormatProvider" /> zum Überschreiben des Standardverhaltens.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Binding" />-Klassemit der angegebene Steuerelementeigenschaft für den angegebenen Datenmember der angegebenen Datenquelle. Aktiviert optional die Formatierung mit der angegebenen Formatzeichenfolge, gibt Werte entsprechend der angegebenen Aktualisierungseinstellung an die Datenquelle weiter, legt die Eigenschaft auf den angegebenen Wert fest, wenn von der Datenquelle ein <see cref="T:System.DBNull" /> zurückgegeben wird, und legt den angegebenen Formatanbieter fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können eine Instanz einer beliebigen der folgenden Klassen für die Datenquelle angeben:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Jede Klasse, implementiert die <xref:System.Collections.IList> Schnittstelle  
  
-   Jede Klasse  
  
 Finden Sie unter den <xref:System.Windows.Forms.Binding> -Klasse für Weitere Informationen zum Erstellen der `dataMember` Zeichenfolge.  
  
 Bei der Erstellung einer Bindung an die Eigenschaft eines Steuerelements, das neue <xref:System.Windows.Forms.Binding> überprüft durch das gebundene Steuerelement verfügbar gemachten Ereignisse beschrieben und fügt zwei bestimmten Ereignissen:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Ein Ereignis namens *PropertyName* `Changed` (z. B. <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die von <paramref name="propertyName" /> angegebene Eigenschaft ist im Steuerelement nicht vorhanden.  
  
- oder -  
Die angegebene Datenquelle, der angegebene Datenmember oder die angegebene Steuerelementeigenschaft sind einer anderen Bindung in der Auflistung zugeordnet.</exception>
      </Docs>
    </Member>
    <Member MemberName="BindableComponent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IBindableComponent BindableComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IBindableComponent BindableComponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindableComponent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindableComponent As IBindableComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IBindableComponent ^ BindableComponent { System::Windows::Forms::IBindableComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindableComponent : System.Windows.Forms.IBindableComponent" Usage="System.Windows.Forms.Binding.BindableComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IBindableComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Steuerelement ab, dem das <see cref="T:System.Windows.Forms.Binding" /> zugeordnet ist.</summary>
        <value>Die <see cref="T:System.Windows.Forms.IBindableComponent" />, die dem <see cref="T:System.Windows.Forms.Binding" /> zugeordnet ist.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingCompleteEventHandler BindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.BindingComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingComplete As BindingCompleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::BindingCompleteEventHandler ^ BindingComplete;" />
      <MemberSignature Language="F#" Value="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " Usage="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die <see cref="P:System.Windows.Forms.Binding.FormattingEnabled" />-Eigenschaft auf <see langword="true" /> festgelegt wird und ein Bindungsvorgang abgeschlossen ist, beispielsweise wenn Daten per Push vom Steuerelement zur Datenquelle übertragen werden oder umgekehrt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird ausgelöst, eine der folgenden Bedingungen, wenn <xref:System.Windows.Forms.Binding.FormattingEnabled%2A> ist `true`:  
  
-   Daten aus der Datenquelle werden auf der Eigenschaft des Steuerelements abgelegt.  
  
-   Daten aus der Eigenschaft des Steuerelements werden auf der Datenquelle abgelegt.  
  
 Dieses Ereignis wird ausgelöst, nach dem Abschluss dieser Vorgänge, die unabhängig von der Abschlussstatus angezeigt. Angenommen, ein Bindungsvorgang auf einen null-Wert gebunden wird eine <xref:System.Windows.Forms.DateTimePicker.Value%2A> -Eigenschaft eine Ausnahme wird ausgelöst, aber die <xref:System.Windows.Forms.Binding.BindingComplete> Ereignis weiterhin auftritt. Der Handler für dieses Ereignis kann die entsprechende Aktion, basierend auf den Erfolg, Fehler oder Ausnahmen, die im Bindungsprozess, untersuchen die <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> Eigenschaft der <xref:System.Windows.Forms.BindingCompleteEventArgs> Parameter.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie behandelt die <xref:System.Windows.Forms.Binding.BindingComplete> Ereignis.  
  
 [!code-cpp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.FormattingEnabled" />
        <altmember cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BindingManagerBase">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingManagerBase BindingManagerBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingManagerBase BindingManagerBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingManagerBase As BindingManagerBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingManagerBase ^ BindingManagerBase { System::Windows::Forms::BindingManagerBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingManagerBase : System.Windows.Forms.BindingManagerBase" Usage="System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.Windows.Forms.BindingManagerBase" /> für diesen <see cref="T:System.Windows.Forms.Binding" /> ab.</summary>
        <value>Die <see cref="T:System.Windows.Forms.BindingManagerBase" />, die dieses <see cref="T:System.Windows.Forms.Binding" /> verwaltet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Forms.BindingManagerBase> zum Durchlaufen der datengebundenen Liste durch erhöhen oder Verringern der <xref:System.Windows.Forms.BindingManagerBase.Position%2A> Eigenschaft. Die <xref:System.Windows.Forms.BindingManagerBase> Klasse ist abstrakt. Die <xref:System.Windows.Forms.CurrencyManager> -Klasse, die von datengebundenen Listen verwaltet werden, erbt die <xref:System.Windows.Forms.BindingManagerBase> Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.BindingManagerBase> von jedem <xref:System.Windows.Forms.Binding> auf das Formular, und gibt die <xref:System.Windows.Forms.BindingManagerBase.Position%2A> -Eigenschaft für jedes <xref:System.Windows.Forms.BindingManagerBase>.  
  
 [!code-cpp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingMemberInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingMemberInfo BindingMemberInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BindingMemberInfo BindingMemberInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingMemberInfo As BindingMemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingMemberInfo BindingMemberInfo { System::Windows::Forms::BindingMemberInfo get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingMemberInfo : System.Windows.Forms.BindingMemberInfo" Usage="System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingMemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt mit Informationen zu der Bindung ab, die auf dem <paramref name="dataMember" />-Parameter im <see cref="Overload:System.Windows.Forms.Binding.#ctor" />-Konstruktor basieren.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.BindingMemberInfo" /> mit Informationen zu diesem <see cref="T:System.Windows.Forms.Binding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.BindingMemberInfo> wird erstellt, aus der `dataMember` Zeichenfolge übergeben, um die <xref:System.Windows.Forms.Binding.%23ctor%2A> Konstruktor.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.BindingMemberInfo> aller <xref:System.Windows.Forms.Binding> auf ein Formular, und gibt die <xref:System.Windows.Forms.BindingMemberInfo.BindingPath%2A>, <xref:System.Windows.Forms.BindingMemberInfo.BindingField%2A>, und <xref:System.Windows.Forms.BindingMemberInfo.BindingMember%2A> Eigenschaftswerte für diese <xref:System.Windows.Forms.Binding>.  
  
 [!code-cpp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Control { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : System.Windows.Forms.Control" Usage="System.Windows.Forms.Binding.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Steuerelement ab, zu dem die Bindung gehört.</summary>
        <value>Das <see cref="T:System.Windows.Forms.Control" />, zu dem die Bindung gehört.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.BindingManagerBase> für eine bestimmte Datenquelle und gibt Informationen zu den einzelnen <xref:System.Windows.Forms.Binding.Control%2A> -Eigenschaft, die an die Datenquelle gebunden ist. Im Beispiel wird die <xref:System.Windows.Forms.BindingManagerBase.Bindings%2A> Eigenschaft der <xref:System.Windows.Forms.BindingManagerBase> sämtliche Steuerelemente abgerufen.  
  
 [!code-cpp[Classic Binding.Control Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Control Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Control Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Control Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Control Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Control Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlUpdateMode ControlUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ControlUpdateMode ControlUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlUpdateMode As ControlUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlUpdateMode ControlUpdateMode { System::Windows::Forms::ControlUpdateMode get(); void set(System::Windows::Forms::ControlUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.ControlUpdateMode : System.Windows.Forms.ControlUpdateMode with get, set" Usage="System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, unter welchen Bedingungen Änderungen an der Datenquelle zur gebundenen Steuerelementeigenschaft weitergegeben werden.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.ControlUpdateMode" />-Werte. Der Standardwert ist <see cref="F:System.Windows.Forms.ControlUpdateMode.OnPropertyChanged" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : obj" Usage="System.Windows.Forms.Binding.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Datenquelle für diese Bindung ab.</summary>
        <value>Ein <see cref="T:System.Object" />, das die Datenquelle darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Datenquellen sind möglich:  
  
-   Eine <xref:System.Data.DataSet>  
  
-   Eine <xref:System.Data.DataTable>  
  
-   Eine <xref:System.Data.DataView>  
  
-   Eine <xref:System.Data.DataViewManager>  
  
-   Jedes Objekt, das implementiert die <xref:System.Collections.IList> Schnittstelle  
  
-   Ein beliebiges Objekt  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.Binding.DataSource%2A> zurückzugebende Eigenschaft eine <xref:System.Data.DataSet>.  
  
 [!code-cpp[Classic Binding.DataSource Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceNullValue">
      <MemberSignature Language="C#" Value="public object DataSourceNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSourceNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSourceNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceNullValue : obj with get, set" Usage="System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den in der Datenquelle zu speichernden Wert ab, wenn der Steuerelementwert <see langword="null" /> oder leer ist, oder legt diesen fest.</summary>
        <value>Das <see cref="T:System.Object" />, das in der Datenquelle gespeichert werden soll, wenn die Steuerelementeigenschaft leer oder <see langword="null" /> ist. Der Standardwert ist <see cref="T:System.DBNull" /> für Werttypen und <see langword="null" /> für andere Typen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Windows.Forms.Binding.NullValue%2A> Eigenschaft geben Sie den Wert in ein gebundenes Steuerelement angezeigt wird, wenn die Datenquelle enthält <xref:System.DBNull>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.NullValue" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceUpdateMode As DataSourceUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataSourceUpdateMode DataSourceUpdateMode { System::Windows::Forms::DataSourceUpdateMode get(); void set(System::Windows::Forms::DataSourceUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceUpdateMode : System.Windows.Forms.DataSourceUpdateMode with get, set" Usage="System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, unter welchen Bedingungen Änderungen an der gebundenen Steuerelementeigenschaft an die Datenquelle weitergegeben werden, oder legt diesen Wert fest.</summary>
        <value>Ein Wert, der angibt, wenn Änderungen weitergegeben werden. Der Standardwert ist <see cref="F:System.Windows.Forms.DataSourceUpdateMode.OnValidation" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beachten Sie, dass, selbst wenn diese Eigenschaft, um festgelegt wird <xref:System.Windows.Forms.DataSourceUpdateMode.Never>, die Bindung aktualisiert mindestens ein Mal, wenn er wird zuerst eingerichtet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Format;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Format" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Format" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Format As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Format;" />
      <MemberSignature Language="F#" Value="member this.Format : System.Windows.Forms.ConvertEventHandler " Usage="member this.Format : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Eigenschaft eines Steuerelements an einen Datenwert gebunden ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.Binding.Format> Ereignis wird ausgelöst, wenn Daten aus der Datenquelle in das Steuerelement verschoben werden. Sie können behandeln die <xref:System.Windows.Forms.Binding.Format> Ereignis, um nicht formatierte Daten aus der Datenquelle in Konvertieren von formatierten Daten für die Anzeige. Wenn Daten aus dem Steuerelement in der Datenquelle abgerufen werden die <xref:System.Windows.Forms.Binding.Parse> Ereignis wird ausgelöst, um die Wiederherstellungsinformationen des angezeigten Wertes ist, und klicken Sie dann die <xref:System.Windows.Forms.Binding.Format> Ereignis tritt auf, um die Daten für die Anzeige neu zu formatieren. Dadurch wird sichergestellt, dass das gebundene Steuerelement ordnungsgemäß formatierte Daten unabhängig davon, ob formatierte oder unformatierte Daten im Steuerelement eingegeben werden angezeigt.  
  
 Die <xref:System.Windows.Forms.Binding.Format> und <xref:System.Windows.Forms.Binding.Parse> Ereignisse ermöglichen es Ihnen, benutzerdefinierte Formate für die Anzeige von Daten zu erstellen. Z. B., wenn die Daten in einer Tabelle vom Typ <xref:System.Decimal>, Sie können die Daten im lokalen Währungsformat anzeigen, durch Festlegen der <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> Eigenschaft der <xref:System.Windows.Forms.ConvertEventArgs> auf den formatierten Wert in der <xref:System.Windows.Forms.Binding.Format> Ereignis. Sie müssen daher die Formatierung den angezeigten Wert in Aufheben der <xref:System.Windows.Forms.Binding.Parse> Ereignis.  
  
 Die <xref:System.Windows.Forms.Binding.Format> Ereignis tritt auf, wenn die <xref:System.Windows.Forms.BindingManagerBase.Current%2A> Wert der <xref:System.Windows.Forms.BindingManagerBase> Änderungen, darunter:  
  
-   Das erste Mal die Eigenschaft gebunden ist.  
  
-   Jedes Mal die <xref:System.Windows.Forms.BindingManagerBase.Position%2A> Änderungen.  
  
-   Jedes Mal, wenn die datengebundenen Liste ist sortieren oder filtern, die erreicht, wenn eine <xref:System.Data.DataView> die Liste bereitstellt.  
  
 Die <xref:System.Windows.Forms.Binding.Format> -Ereignis tritt auch nach der <xref:System.Windows.Forms.Binding.Parse> Ereignis. Z. B. wenn ein Steuerelement den Fokus verliert, wird dessen Inhalt analysiert. Unmittelbar danach, wenn neue Daten in das Steuerelement verschoben werden die <xref:System.Windows.Forms.Binding.Format> Ereignis tritt auf, sodass den neuen Inhalt formatiert werden.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird erstellt eine <xref:System.Windows.Forms.Binding>, fügt eine <xref:System.Windows.Forms.ConvertEventHandler> Delegat, der sowohl die <xref:System.Windows.Forms.Binding.Parse> und <xref:System.Windows.Forms.Binding.Format> Ereignisse, und fügt die <xref:System.Windows.Forms.Binding> auf der <xref:System.Windows.Forms.BindingsCollection> von eine <xref:System.Windows.Forms.TextBox> steuern, über die <xref:System.Windows.Forms.Control.DataBindings%2A> Diese Eigenschaft. Die `DecimalToCurrencyString` Ereignisdelegaten, der hinzugefügt der <xref:System.Windows.Forms.Binding.Format> Ereignis formatiert den gebundenen Wert (eine <xref:System.Decimal> Typ) als Währung mit den <xref:System.Decimal.ToString%2A> Methode. Die `CurrencyStringToDecimal` Ereignisdelegaten, der hinzugefügt, die <xref:System.Windows.Forms.Binding.Parse> Ereignis konvertiert den Wert, der vom Steuerelement angezeigt wird an die <xref:System.Decimal> Typ.  
  
 In diesem Beispiel wird davon ausgegangen, das Vorhandensein einer <xref:System.Data.DataSet> mit dem Namen `ds`.  
  
 [!code-cpp[Classic Binding.Format Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Format Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Format Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Format Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Format Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Format Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FormatInfo">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatInfo As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatInfo { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatInfo : IFormatProvider with get, set" Usage="System.Windows.Forms.Binding.FormatInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.IFormatProvider" /> ab, der benutzerdefiniertes Formatierungsverhalten bereitstellt, oder legt ihn fest.</summary>
        <value>Die <see cref="T:System.IFormatProvider" />-Implementierung, die benutzerdefiniertes Formatierungsverhalten bereitstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch Festlegen dieser Eigenschaft überschreibt das Standardformatierungsverhalten, verwendet der <xref:System.Windows.Forms.Application.CurrentCulture%2A?displayProperty=nameWithType> Einstellung der Eigenschaft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatString">
      <MemberSignature Language="C#" Value="public string FormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormatString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatString : string with get, set" Usage="System.Windows.Forms.Binding.FormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Formatbezeichnerzeichen ab, die angeben, wie ein Wert angezeigt werden soll, oder legt sie fest.</summary>
        <value>Die Zeichenfolge von Formatbezeichnerzeichen, die angeben, wie ein Wert angezeigt werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Formatzeichenfolge zum sollte den standardmäßigen Formatspezifikationen für .NET Framework entsprechen. Weitere Informationen finden Sie unter [Formatierung von Typen in .NET Framework](~/docs/standard/base-types/formatting-types.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormattingEnabled">
      <MemberSignature Language="C#" Value="public bool FormattingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FormattingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property FormattingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FormattingEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FormattingEnabled : bool with get, set" Usage="System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, mit dem angegeben wird, ob die Typkonvertierung und Formatierung auf die Daten der Steuerelementeigenschaft angewendet wird.</summary>
        <value><see langword="true" />, wenn die Typkonvertierung und das Formatieren von Steuerelementeigenschaftendaten aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Festlegen dieser Eigenschaft auf `true` auch fehlerbehandlungsverhaltens ermöglicht und bewirkt, dass die <xref:System.Windows.Forms.Binding.BindingComplete> Ereignis ausgelöst wurde. Der Handler für dieses Ereignis kann die entsprechende Aktion, basierend auf den Erfolg, Fehler oder Ausnahmen, die im Bindungsprozess, untersuchen die <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> Eigenschaft der <xref:System.Windows.Forms.BindingCompleteEventArgs> Parameter.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.BindingComplete" />
        <altmember cref="T:System.Windows.Forms.BindingCompleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IsBinding">
      <MemberSignature Language="C#" Value="public bool IsBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.IsBinding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBinding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBinding { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBinding : bool" Usage="System.Windows.Forms.Binding.IsBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Bindung aktiv ist.</summary>
        <value><see langword="true" />, wenn die Bindung aktiv ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Bindung ist aktiv, wenn sie die folgenden Bedingungen erfüllt:  
  
-   Alle seine Eigenschaften werden festgelegt.  
  
-   Der Benutzer nicht aufgerufen haben, <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> oder <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> auf die <xref:System.Windows.Forms.BindingManagerBase> , die die <xref:System.Windows.Forms.Binding> gehört.  
  
-   Das Steuerelement, das <xref:System.Windows.Forms.Binding> gehört erstellt wurde.  
  
   
  
## Examples  
 Im folgenden Codebeispiel Beispiel druckt die <xref:System.Windows.Forms.Binding.PropertyName%2A> und <xref:System.Windows.Forms.Binding.IsBinding%2A> Wert für die einzelnen <xref:System.Windows.Forms.Binding> in einem Formular.  
  
 [!code-cpp[Classic Binding.IsBinding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.IsBinding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.IsBinding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.IsBinding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullValue">
      <MemberSignature Language="C#" Value="public object NullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.NullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property NullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NullValue : obj with get, set" Usage="System.Windows.Forms.Binding.NullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Object" /> ab, das als Steuerelementeigenschaft festgelegt werden soll, wenn die Datenquelle einen <see cref="T:System.DBNull" />-Wert enthält, oder legt dieses Objekt fest.</summary>
        <value>Das <see cref="T:System.Object" />, das als Steuerelementeigenschaft festgelegt werden soll, wenn die Datenquelle einen <see cref="T:System.DBNull" />-Wert enthält. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Datenquelle darf <xref:System.DBNull> für die <xref:System.Windows.Forms.Binding.NullValue%2A> Eigenschaft korrekt angewendet werden. Wenn der Datenquellentyp ist ein Typ wie z. B. einer Zeichenfolge oder ganzen Zahl den Wert des der <xref:System.Windows.Forms.Binding.NullValue%2A> Eigenschaft wird ignoriert. Darüber hinaus die <xref:System.Windows.Forms.Binding.NullValue%2A> Eigenschaft wird ignoriert, wenn sie, um festgelegt ist `null`.  
  
 Ein null-Wert wird an die Datenquelle hinzugefügt werden, wenn die Eigenschaft des Steuerelements auf das Objekt festgelegt ist <xref:System.Windows.Forms.Binding.NullValue%2A>. Wenn <xref:System.Windows.Forms.Binding.NullValue%2A> festgelegt ist, ein Zeichenfolgenwert, Groß-und Kleinschreibung beachtet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingComplete(class System.Windows.Forms.BindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingComplete (e As BindingCompleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingComplete(System::Windows::Forms::BindingCompleteEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit&#xA;override this.OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit" Usage="binding.OnBindingComplete e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.BindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Binding.BindingComplete" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.Binding.OnBindingComplete%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnFormat">
      <MemberSignature Language="C#" Value="protected virtual void OnFormat (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFormat(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFormat (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFormat(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnFormat cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">Ein <see cref="T:System.Windows.Forms.ConvertEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Binding.Format" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.Binding.OnFormat%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="OnParse">
      <MemberSignature Language="C#" Value="protected virtual void OnParse (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParse(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParse (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParse(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnParse cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">Ein <see cref="T:System.Windows.Forms.ConvertEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Binding.Parse" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.Binding.OnParse%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Parse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Parse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Parse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Parse As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Parse;" />
      <MemberSignature Language="F#" Value="member this.Parse : System.Windows.Forms.ConvertEventHandler " Usage="member this.Parse : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Wert eines datengebundenen Steuerelements geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.Binding.Format> und <xref:System.Windows.Forms.Binding.Parse> Ereignisse ermöglichen es Ihnen, benutzerdefinierte Formate für die Anzeige von Daten zu erstellen. Z. B., wenn die Daten in einer Tabelle vom Typ <xref:System.Decimal>, Sie können die Daten im lokalen Währungsformat anzeigen, durch Festlegen der <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> Eigenschaft der <xref:System.Windows.Forms.ConvertEventArgs> auf den formatierten Wert in der <xref:System.Windows.Forms.Binding.Format> Ereignis. Sie müssen daher die Formatierung den angezeigten Wert in Aufheben der <xref:System.Windows.Forms.Binding.Parse> Ereignis.  
  
 Die <xref:System.Windows.Forms.Binding.Parse> Ereignis tritt auf, unter den folgenden Bedingungen:  
  
-   Nach der <xref:System.Windows.Forms.Control.Validated> Ereignis die <xref:System.Windows.Forms.Control> auftritt.  
  
-   Wenn die <xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A> Methode der <xref:System.Windows.Forms.BindingManagerBase> aufgerufen wird.  
  
-   Bei der <xref:System.Windows.Forms.BindingManagerBase.Current%2A> von der <xref:System.Windows.Forms.BindingManagerBase> Änderungen (das heißt, wenn die <xref:System.Windows.Forms.BindingManagerBase.Position%2A> Änderungen).  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird erstellt eine <xref:System.Windows.Forms.Binding>, fügt eine <xref:System.Windows.Forms.ConvertEventHandler> Delegat, der sowohl die <xref:System.Windows.Forms.Binding.Parse> und <xref:System.Windows.Forms.Binding.Format> Ereignisse, und fügt die <xref:System.Windows.Forms.Binding> auf der <xref:System.Windows.Forms.BindingsCollection> von eine <xref:System.Windows.Forms.TextBox> steuern, über die <xref:System.Windows.Forms.Control.DataBindings%2A> Diese Eigenschaft. Die `DecimalToCurrencyString` Ereignisdelegaten, der hinzugefügt der <xref:System.Windows.Forms.Binding.Format> Ereignis formatiert den gebundenen Wert (eine <xref:System.Decimal> Typ) als Währung mit den <xref:System.Decimal.ToString%2A> Methode. Die `CurrencyStringToDecimal` Ereignisdelegaten, der hinzugefügt, die <xref:System.Windows.Forms.Binding.Parse> Ereignis konvertiert den Wert, der vom Steuerelement angezeigt wird an die <xref:System.Decimal> Typ.  
  
 [!code-cpp[Classic Binding.Parse Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Parse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Parse Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Parse Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Parse Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Parse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="PropertyName">
      <MemberSignature Language="C#" Value="public string PropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.PropertyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PropertyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyName : string" Usage="System.Windows.Forms.Binding.PropertyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der datengebundenen Eigenschaft des Steuerelements ab oder legt diesen fest.</summary>
        <value>Der Name einer Steuerelementeigenschaft für die Bindung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Forms.Binding.PropertyName%2A> der Eigenschaft des Steuerelements an, die Sie zu einer Liste in einer Datenquelle binden möchten. In den meisten Fällen Sie eine Anzeigeeigenschaft wie z. B. binden die <xref:System.Windows.Forms.Control.Text%2A> Eigenschaft eine <xref:System.Windows.Forms.TextBox> Steuerelement. Aber da Sie eine Eigenschaft eines Steuerelements gebunden werden können, können Sie programmgesteuert Steuerelemente zur Laufzeit mithilfe von Daten aus einer Datenbank erstellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel Beispiel druckt die <xref:System.Windows.Forms.Binding.PropertyName%2A> Wert für jeden <xref:System.Windows.Forms.Binding> für jedes Steuerelement in einem Formular.  
  
 [!code-cpp[Classic Binding.PropertyName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.PropertyName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.PropertyName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.PropertyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadValue">
      <MemberSignature Language="C#" Value="public void ReadValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.ReadValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadValue();" />
      <MemberSignature Language="F#" Value="member this.ReadValue : unit -&gt; unit" Usage="binding.ReadValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt die Steuerelementeigenschaft auf den von der Datenquelle gelesenen Wert fest.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public void WriteValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.WriteValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteValue();" />
      <MemberSignature Language="F#" Value="member this.WriteValue : unit -&gt; unit" Usage="binding.WriteValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den aktuellen Wert der Steuerelementeigenschaft und schreibt ihn in die Datenquelle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
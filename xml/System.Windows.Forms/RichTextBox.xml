<Type Name="RichTextBox" FullName="System.Windows.Forms.RichTextBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f7a2c43d7bc4896b396a47401549e7b781d43d41" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37566839" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RichTextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RichTextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.RichTextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class RichTextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RichTextBox : System::Windows::Forms::TextBoxBase" />
  <TypeSignature Language="F#" Value="type RichTextBox = class&#xA;    inherit TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.RichTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Windows-Textfeld-Steuerelement für RTF dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit der <xref:System.Windows.Forms.RichTextBox> -Steuerelement der Benutzer kann Text eingeben und bearbeiten. Das Steuerelement bietet auch Erweiterte Formatierung Features als die standardmäßige <xref:System.Windows.Forms.TextBox> Steuerelement. Text kann direkt an das Steuerelement zugewiesen werden, oder von einem rich-Text-Format (RTF) oder nur-Text-Datei geladen werden. Der Text innerhalb des Steuerelements kann Zeichen- und absatzformatierung zugewiesen werden.  
  
 Die <xref:System.Windows.Forms.RichTextBox> -Steuerelement bietet eine Reihe von Eigenschaften Sie die Formatierung von jeder Teil des Texts innerhalb des Steuerelements können. Um die Formatierung des Texts zu ändern, müssen sie zuerst ausgewählt werden. Nur ausgewählte Text kann Zeichen- und absatzformatierung zugewiesen werden. Nachdem eine Einstellung zu einem ausgewählten Abschnitt des Texts vorgenommen wurde, ist alle Text eingegeben werden, wenn die Auswahl auch mit den gleichen Einstellungen formatiert werden, bis eine einstellungsänderung vorgenommen wird oder einen anderen Abschnitt des Dokuments im Steuerelement ausgewählt. Die <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A> Eigenschaft können Sie Text fett oder kursiv formatieren. Sie können diese Eigenschaft auch verwenden, so ändern Sie die Größe und Schriftart des Texts. Die <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> Eigenschaft können Sie die Farbe des Texts zu ändern. Um Listen mit Aufzählungszeichen zu erstellen, Sie können, die <xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> Eigenschaft. Sie können auch durch Festlegen von Formatieren von Absätzen Anpassen der <xref:System.Windows.Forms.RichTextBox.SelectionIndent%2A>, <xref:System.Windows.Forms.RichTextBox.SelectionRightIndent%2A>, und <xref:System.Windows.Forms.RichTextBox.SelectionHangingIndent%2A> Eigenschaften.  
  
 Die <xref:System.Windows.Forms.RichTextBox> Steuerelement bietet Methoden, die Funktionalität für das Öffnen und Speichern von Dateien bereitstellen. Die <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode können Sie eine vorhandene RTF- oder ASCII-Textdatei in das Steuerelement zu laden. Sie können auch Daten aus einer bereits geöffneten Datenstream laden. Die <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> ermöglicht es Ihnen, eine Datei in das RTF oder ASCII-Text speichern. Ähnlich wie die <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> -Methode können Sie auch die <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> Methode, um in einem geöffneten Datenstream zu speichern. Die <xref:System.Windows.Forms.RichTextBox> -Steuerelement bietet auch Funktionen zum Suchen von Textzeichenfolgen. Die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode wird überladen, um beide Zeichenfolgen von Text als auch spezifische Zeichen im Text des Steuerelements finden.  
  
 Sie können auch Initialisieren der <xref:System.Windows.Forms.RichTextBox> -Steuerelement an Daten im Arbeitsspeicher gespeichert. Sie können z. B. Initialisieren der <xref:System.Windows.Forms.RichTextBox.Rtf%2A> Eigenschaft in eine Zeichenfolge mit dem Text angezeigt werden, einschließlich der RTF-Codes, die bestimmen, wie Text formatiert werden soll.  
  
 Wenn der Text innerhalb des Steuerelements Links, z. B. einen Link zu einer Website können Sie die <xref:System.Windows.Forms.RichTextBox.DetectUrls%2A> -Eigenschaft auf den Link im Text des Steuerelements entsprechend zu anzuzeigen. Sie können dann behandeln die <xref:System.Windows.Forms.RichTextBox.LinkClicked> Ereignis, um die Aufgaben im Zusammenhang mit dem Link auszuführen. Die <xref:System.Windows.Forms.RichTextBox.SelectionProtected%2A> -Eigenschaft ermöglicht es Ihnen, Text innerhalb des Steuerelements vor Manipulation durch den Benutzer zu schützen. Bei geschützten Text im Steuerelement, können Sie behandeln die <xref:System.Windows.Forms.RichTextBox.Protected> Ereignis, um festzustellen, wann der Benutzer hat versucht, geschützten Text zu ändern, des Benutzers, dass der Text wird geschützt oder bieten dem Benutzer eine standardisierte Möglichkeit den geschützten Text zu bearbeiten.  
  
 Anwendungen, die bereits <xref:System.Windows.Forms.TextBox> Steuerelemente können problemlos angepasst werden, zu verwenden <xref:System.Windows.Forms.RichTextBox> Steuerelemente. Allerdings die <xref:System.Windows.Forms.RichTextBox> -Steuerelement verfügt nicht über die gleichen 64K Kapazitätsgrenze von Zeichen der <xref:System.Windows.Forms.TextBox> Steuerelement. Die <xref:System.Windows.Forms.RichTextBox> dient normalerweise zum Bereitstellen und Anzeigen von Funktionen, wie Sie Textverarbeitungsprogrammen wie Microsoft Word.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.TextBoxBase.Undo%2A?displayProperty=nameWithType> Methode funktioniert nicht mit der <xref:System.Windows.Forms.Control.KeyPress> oder <xref:System.Windows.Forms.Control.TextChanged> Ereignisse.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.RichTextBox> -Steuerelement, das eine RTF-Datei in das Steuerelement und sucht nach der ersten Instanz des Worts "Text lädt" Der Code ändert den Schriftschnitt, Schriftgröße und Schriftfarbe des ausgewählten Texts dann und speichert die Änderungen an der ursprünglichen Datei. Der Beispielcode abgeschlossen ist, indem Sie das Steuerelement, das Hinzufügen der <xref:System.Windows.Forms.Form>. Dieses Beispiel erfordert, dass die Methode erstellt, die im Beispielcode hinzugefügt wird eine <xref:System.Windows.Forms.Form> Klasse und aus dem Konstruktor des Formulars aufgerufen. Das Beispiel erfordert auch, dass eine RTF-Datei erstellt wird, im Stammverzeichnis des Laufwerks C, die das Wort "Text"  
  
 [!code-cpp[Classic RichTextBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TextBoxBase" />
    <altmember cref="T:System.Windows.Forms.TextBox" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RichTextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RichTextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.RichTextBox" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Standardeinstellung die <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> -Eigenschaft des Steuerelements nastaven NA hodnotu `true`.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.RichTextBox> -Steuerelement, das eine RTF-Datei in das Steuerelement und sucht nach der ersten Instanz des Worts "Text lädt" Der Code ändert den Schriftschnitt, Schriftgröße und Schriftfarbe des ausgewählten Texts dann und speichert die Änderungen an der ursprünglichen Datei. Der Beispielcode abgeschlossen ist, indem Sie das Steuerelement, das Hinzufügen der <xref:System.Windows.Forms.Form>. Dieses Beispiel erfordert, dass die Methode erstellt, die im Beispielcode hinzugefügt wird eine <xref:System.Windows.Forms.Form> Klasse und aus dem Konstruktor des Formulars aufgerufen. Das Beispiel erfordert auch, dass eine RTF-Datei erstellt wird, im Stammverzeichnis des Laufwerks C, die das Wort "Text"  
  
 [!code-cpp[Classic RichTextBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public override bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.Forms.RichTextBox.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Steuerelement Drag &amp; Drop-Vorgänge ermöglicht.</summary>
        <value>
          <see langword="true" /> Wenn ein Drag &amp; Drop in das Steuerelement aktiviert ist; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Drag & Drop-Vorgänge mithilfe einer <xref:System.Windows.Forms.ListBox> -Steuerelement, zu bearbeiten, Elemente enthält, einen <xref:System.Windows.Forms.RichTextBox> Steuerelement. Der Konstruktor des Formulars legt die <xref:System.Windows.Forms.RichTextBox.AllowDrop%2A> Eigenschaft `true` so Drag & Drop-Operationen in auftreten, können die <xref:System.Windows.Forms.RichTextBox>. Im Beispiel wird die <xref:System.Windows.Forms.Control.MouseDown> Ereignis die <xref:System.Windows.Forms.ListBox> zum Starten des Ziehvorgangs durch Aufrufen der <xref:System.Windows.Forms.Control.DoDragDrop%2A> Methode. Im Beispiel wird die <xref:System.Windows.Forms.Control.DragEnter> Ereignis, um zu bestimmen, ob ein Element gezogen wird, in der <xref:System.Windows.Forms.RichTextBox> ist ein gültiger Datentyp. Die <xref:System.Windows.Forms.Control.DragDrop> Ereignis führt die eigentliche Ablegen eines gezogenen Elements in der <xref:System.Windows.Forms.RichTextBox> Steuerelement an der aktuellen Cursorposition in der <xref:System.Windows.Forms.RichTextBox>. In diesem Beispiel erfordert, dass die <xref:System.Windows.Forms.Control.DragDrop> und <xref:System.Windows.Forms.Control.DragEnter> Ereignisse an die Ereignishandler, die im Beispiel definierte angeschlossen wurden.  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public override bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.AutoSize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property AutoSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AutoSize { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSize : bool with get, set" Usage="System.Windows.Forms.RichTextBox.AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ist für diese Klasse nicht relevant.</summary>
        <value>Im aktivierten Zustand <see langword="true" />, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoWordSelection">
      <MemberSignature Language="C#" Value="public bool AutoWordSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoWordSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.AutoWordSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoWordSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoWordSelection { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoWordSelection : bool with get, set" Usage="System.Windows.Forms.RichTextBox.AutoWordSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die automatische Wortauswahl aktiviert ist, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die automatische Wortauswahl aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft, um festgelegt wird `true`, wählen einen beliebigen Teil des Texts im Steuerelement das gesamte Wort ausgewählt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Windows.Forms.RichTextBox> , die Text wird vergrößert, Wörter im Text des Steuerelements automatisch ausgewählt, wenn ein Wort doppelgeklickt wird, und verfügt über einen Rand auf der rechten Seite des Clientbereichs des Steuerelements. Wenn die <xref:System.Windows.Forms.RichTextBox> Steuerelement verfügt über eine kleine Breite mit dem folgenden Code erstellt eine <xref:System.Windows.Forms.RichTextBox> , in dem jedes Zeichen des Texts in einer eigenen Zeile angezeigt wird. In dieser Position vertikale Anzeige wird durch Klicken auf einen beliebigen Teil eines Worts alle Zeichen des Worts unabhängig von der Tatsache wählen, dass der Text vertikal angezeigt wird. Dieses Beispiel erfordert, dass Sie verfügen über ein Formular mit einem <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1`.  
  
 [!code-cpp[RichTextBox.ZoomFactor#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.ZoomFactor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CS/form1.cs#1)]
 [!code-vb[RichTextBox.ZoomFactor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.ZoomFactor/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : System.Drawing.Image with get, set" Usage="System.Windows.Forms.RichTextBox.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ist für diese Klasse nicht relevant.</summary>
        <value>Das im Steuerelement angezeigte Hintergrundbild.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageChanged : EventHandler " Usage="member this.BackgroundImageChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Wert der <see cref="P:System.Windows.Forms.RichTextBox.BackgroundImage" />-Eigenschaft ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Nutzen von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.RichTextBox.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ist für diese Klasse nicht relevant.</summary>
        <value>Das Layout des im -Steuerelement angezeigten Hintergrundbilds.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Wert der <see cref="P:System.Windows.Forms.RichTextBox.BackgroundImageLayout" />-Eigenschaft ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BulletIndent">
      <MemberSignature Language="C#" Value="public int BulletIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulletIndent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.BulletIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property BulletIndent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulletIndent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulletIndent : int with get, set" Usage="System.Windows.Forms.RichTextBox.BulletIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Einzug ab, der im <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement verwendet wird, wenn der Aufzählungssymbolstil auf den Text angewendet wird, oder legt diesen fest.</summary>
        <value>Die Anzahl der Pixel, die nach einem Aufzählungszeichen als Einzug eingefügt werden. Der Standardwert ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie zum Anwenden des Aufzählungssymbolstil auf einen Textabsatz der <xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> Eigenschaft `true` und legen Sie dann die <xref:System.Windows.Forms.RichTextBox.BulletIndent%2A> Eigenschaft, um die Anzahl der Pixel, um der Text eingezogen werden soll. Der Absatz müssen der Aufzählungssymbolstil, der mit der angegebenen Größe des Einzugs nach Aufzählungszeichen angewendet. Diese Eigenschaft wirkt sich nur im Text des Steuerelements und dem aktuell ausgewählten Aufzählungszeichen in einer Liste von Listen mit Aufzählungszeichen Elemente des aktuellen Absatzes. Um eine andere Einzugsebene für eine vollständige Liste mit Aufzählungszeichen Elemente übernehmen zu können, muss gesamten Text der Liste mit Aufzählungszeichen Elemente ausgewählt werden vor dem Festlegen der <xref:System.Windows.Forms.RichTextBox.BulletIndent%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> Eigenschaft mit dem die <xref:System.Windows.Forms.RichTextBox.BulletIndent%2A>, <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A>, <xref:System.Windows.Forms.RichTextBox.SelectedText%2A>, und <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> Eigenschaften zum Erstellen einer Aufzählung in einem <xref:System.Windows.Forms.RichTextBox> Steuerelement. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1` in einem Formular erstellt wird.  
  
 [!code-cpp[RichTextBox.BulletIndent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.BulletIndent/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.BulletIndent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.BulletIndent/CS/form1.cs#1)]
 [!code-vb[RichTextBox.BulletIndent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.BulletIndent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der angegebene Einzug ist kleiner als 0 (null).</exception>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionBullet" />
      </Docs>
    </Member>
    <Member MemberName="CanPaste">
      <MemberSignature Language="C#" Value="public bool CanPaste (System.Windows.Forms.DataFormats.Format clipFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanPaste(class System.Windows.Forms.DataFormats/Format clipFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.CanPaste(System.Windows.Forms.DataFormats.Format)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanPaste (clipFormat As DataFormats.Format) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanPaste(System::Windows::Forms::DataFormats::Format ^ clipFormat);" />
      <MemberSignature Language="F#" Value="member this.CanPaste : System.Windows.Forms.DataFormats.Format -&gt; bool" Usage="richTextBox.CanPaste clipFormat" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clipFormat" Type="System.Windows.Forms.DataFormats+Format" />
      </Parameters>
      <Docs>
        <param name="clipFormat">Einer der <see cref="T:System.Windows.Forms.DataFormats.Format" />-Werte.</param>
        <summary>Bestimmt, ob Sie Informationen aus der Zwischenablage im angegebenen Datenformat einfügen können.</summary>
        <returns>
          <see langword="true" />, wenn Sie Daten aus der Zwischenablage im angegebenen Datenformat einfügen können, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Methode verwenden, um festzustellen, ob es sich bei den aktuellen Inhalt der Zwischenablage in einem angegebenen Format der Zwischenablage Daten sind, bevor Sie So fügen Sie die Informationen in den <xref:System.Windows.Forms.RichTextBox> Steuerelement. Beispielsweise können Sie einen Ereignishandler für erstellen eine <xref:System.Windows.Forms.MenuItem.Popup> Ereignis von einem Befehl "Einfügen" <xref:System.Windows.Forms.MenuItem> und verwenden Sie diese Methode, um zu bestimmen, ob das Einfügen <xref:System.Windows.Forms.MenuItem> basierend auf den Typ der Daten in der Zwischenablage aktiviert werden soll.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.RichTextBox.Paste%2A> Methode zum Einfügen einer Bitmap in der <xref:System.Windows.Forms.RichTextBox> Steuerelement. Nach dem Öffnen einer Bitmaps aus der Datei, die im Beispiel wird die <xref:System.Windows.Forms.Clipboard.SetDataObject%2A> Methode, um die Bitmap in die Windows-Zwischenablage zu kopieren. Abschließend ruft der Beispiel ab, das Format für die <xref:System.Drawing.Bitmap> Objekt verwendet die <xref:System.Windows.Forms.RichTextBox.CanPaste%2A> Methode, um sicherzustellen, dass das Format in eingefügt werden kann die <xref:System.Windows.Forms.RichTextBox> -Steuerelement und verwendet dann die <xref:System.Windows.Forms.RichTextBox.Paste%2A> Methode, um die Daten einfügen.  
  
 [!code-cpp[RichText_Paste#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichText_Paste/CPP/form1.cpp#1)]
 [!code-csharp[RichText_Paste#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichText_Paste/CS/form1.cs#1)]
 [!code-vb[RichText_Paste#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichText_Paste/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.Paste(System.Windows.Forms.DataFormats.Format)" />
        <altmember cref="T:System.Windows.Forms.DataFormats.Format" />
      </Docs>
    </Member>
    <Member MemberName="CanRedo">
      <MemberSignature Language="C#" Value="public bool CanRedo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRedo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.CanRedo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRedo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRedo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRedo : bool" Usage="System.Windows.Forms.RichTextBox.CanRedo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob in <see cref="T:System.Windows.Forms.RichTextBox" /> ausgeführte Aktionen vorhanden sind, die erneut ausgeführt werden können.</summary>
        <value>
          <see langword="true" />, wenn rückgängig gemachte Vorgänge vorhanden sind, die auf den Inhalt des Steuerelements erneut angewendet werden können, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Eigenschaft verwenden, um zu bestimmen, ob den letzten Vorgang rückgängig gemacht werden, der <xref:System.Windows.Forms.RichTextBox> erneut ausgeführt werden können mithilfe der <xref:System.Windows.Forms.RichTextBox.Redo%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.RichTextBox.CanRedo%2A> und <xref:System.Windows.Forms.RichTextBox.RedoActionName%2A> Eigenschaften, und die <xref:System.Windows.Forms.RichTextBox.Redo%2A> Methode, um einen Wiederholen-Vorgang auf eine beliebige Aktion mit Ausnahme von Text zu beschränken. Dieses Beispiel erfordert, dass Sie verfügen über ein Formular mit einem <xref:System.Windows.Forms.RichTextBox> -Steuerelement und die einen Vorgang in der <xref:System.Windows.Forms.RichTextBox> ausgeführt wurde und rückgängig gemacht werden, bevor der Code in diesem Beispiel aufgerufen wird.  
  
 [!code-cpp[RichTextBox.RedoAction#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.RedoAction/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.RedoAction#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.RedoAction/CS/form1.cs#1)]
 [!code-vb[RichTextBox.RedoAction#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.RedoAction/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.Redo" />
      </Docs>
    </Member>
    <Member MemberName="ContentsResized">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ContentsResizedEventHandler ContentsResized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ContentsResizedEventHandler ContentsResized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.ContentsResized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContentsResized As ContentsResizedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ContentsResizedEventHandler ^ ContentsResized;" />
      <MemberSignature Language="F#" Value="member this.ContentsResized : System.Windows.Forms.ContentsResizedEventHandler " Usage="member this.ContentsResized : System.Windows.Forms.ContentsResizedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContentsResizedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Größe von Inhalten im Steuerelement geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Nutzen von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Da die  Klasse erbt von , Sie können diese Eigenschaft auch verwenden, wenn die  eines Formulars zugeordnet ist. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.RichTextBox.ContentsResized> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.RichTextBox> mit dem Namen `RichTextBox1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.RichTextBox.ContentsResized> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#537](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#537)]
 [!code-vb[System.Windows.Forms.EventExamples#537](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#537)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ContentsResizedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.RichTextBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die benötigten Erstellungsparameter ab, wenn das Steuerelementhandle erstellt wird.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.CreateParams" />-Eigenschaft, die die erforderlichen Erstellungsparameter enthält, wenn das Handle für das Steuerelement erstellt wird.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRichEditOleCallback">
      <MemberSignature Language="C#" Value="protected virtual object CreateRichEditOleCallback ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object CreateRichEditOleCallback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.CreateRichEditOleCallback" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateRichEditOleCallback () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ CreateRichEditOleCallback();" />
      <MemberSignature Language="F#" Value="abstract member CreateRichEditOleCallback : unit -&gt; obj&#xA;override this.CreateRichEditOleCallback : unit -&gt; obj" Usage="richTextBox.CreateRichEditOleCallback " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein <see langword="IRichEditOleCallback" />-kompatibles Objekt für die Behandlung von Rich-Edit-Rückrufvorgängen.</summary>
        <returns>Ein Objekt, das die <see langword="IRichEditOleCallback" />-Schnittstelle implementiert.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für den unmittelbaren Aufrufer nicht verwalteten Code aufrufen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>Sie können diese Methode überschreiben, in der abgeleiteten Klasse zum Aktivieren des Zugriffs auf die zugrunde liegenden Rich-Edit-Funktionen. Wenn Sie diese Methode überschreiben, werden alle Drag &amp; Drop-Ereignisse nicht ausgelöst werden. Daher müssen Sie Ihre eigenen Drag &amp; Drop-Vorgänge unterstützen. Weitere Informationen zu den <see langword="IRichEditOleCallback" /> Schnittstelle, finden Sie in der Platform SDK-Dokumentation unter http://msdn.microsoft.com.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.RichTextBox.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standardgröße des Steuerelements ab.</summary>
        <value>Ein <see cref="T:System.Drawing.Size" />-Wert.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.DefaultSize" />
      </Docs>
    </Member>
    <Member MemberName="DetectUrls">
      <MemberSignature Language="C#" Value="public bool DetectUrls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DetectUrls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.DetectUrls" />
      <MemberSignature Language="VB.NET" Value="Public Property DetectUrls As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DetectUrls { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DetectUrls : bool with get, set" Usage="System.Windows.Forms.RichTextBox.DetectUrls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Windows.Forms.RichTextBox" /> eine URL (Uniform Resource Locator) automatisch formatiert, wenn diese in das Steuerelement eingegeben wird, oder legt diesen Wert fest.</summary>
        <value>
          <see langword="true" />, wenn die <see cref="T:System.Windows.Forms.RichTextBox" /> in das Steuerelement eingegebene URLs automatisch als Links formatiert, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft, um festgelegt wird `true`, Text eingegeben haben, in das Steuerelement, die vom bestimmt die <xref:System.Windows.Forms.RichTextBox> sein, eine URL wird automatisch als Link formatiert. Sie können angeben, erstellen einen Ereignishandler für die <xref:System.Windows.Forms.RichTextBox.LinkClicked> zu alle Links zu behandelnden Ereignisses in das Steuerelement geklickt. Die <xref:System.Windows.Forms.LinkClickedEventArgs> , wird bereitgestellt, um den Ereignishandler für die <xref:System.Windows.Forms.RichTextBox.LinkClicked> Ereignis enthält Daten, die Ihnen ermöglicht zu bestimmen, welchen Link im Steuerelement geklickt wurde, um den Link zu verarbeiten.  
  
   
  
## Examples  
 Das folgende Codebeispiel enthält einen Ereignishandler für die <xref:System.Windows.Forms.RichTextBox.LinkClicked> Ereignis. Der Ereignishandler verarbeitet Link Klicks innerhalb des Dokuments eine <xref:System.Windows.Forms.RichTextBox> steuern und startet eine Instanz des Standard-Browser (mithilfe der <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> Methode), Anzeige der Seite für den Link, auf die geklickt wurde. Dieses Beispiel erfordert, dass der Ereignishandler mit verbunden wurde die <xref:System.Windows.Forms.RichTextBox.LinkClicked> -Ereignis für eine <xref:System.Windows.Forms.RichTextBox>.  
  
 [!code-cpp[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.RichTextBox.LinkClicked" />
        <altmember cref="T:System.Windows.Forms.LinkClickedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DoubleClick;" />
      <MemberSignature Language="F#" Value="member this.DoubleClick : EventHandler " Usage="member this.DoubleClick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DragDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragDrop;" />
      <MemberSignature Language="F#" Value="member this.DragDrop : System.Windows.Forms.DragEventHandler " Usage="member this.DragDrop : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer einen Drag &amp; Drop-Vorgang abschließt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.Forms.DragEventHandler " Usage="member this.DragEnter : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Objekt in die Begrenzungen des Steuerelements gezogen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Nutzen von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Da die  Klasse erbt von , Sie können diese Eigenschaft auch verwenden, wenn die  eines Formulars zugeordnet ist. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.RichTextBox.DragEnter> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.RichTextBox> mit dem Namen `RichTextBox1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.RichTextBox.DragEnter> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#539](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#539)]
 [!code-vb[System.Windows.Forms.EventExamples#539](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#539)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event EventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : EventHandler " Usage="member this.DragLeave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Objekt aus den Grenzen des Steuerelements gezogen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis ist für diese Klasse nicht relevant. Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Nutzen von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.Forms.DragEventHandler " Usage="member this.DragOver : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Objekt über die Begrenzungen des Steuerelements gezogen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis ist für diese Klasse nicht relevant. Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Nutzen von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawToBitmap">
      <MemberSignature Language="C#" Value="public void DrawToBitmap (System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawToBitmap(class System.Drawing.Bitmap bitmap, valuetype System.Drawing.Rectangle targetBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawToBitmap(System::Drawing::Bitmap ^ bitmap, System::Drawing::Rectangle targetBounds);" />
      <MemberSignature Language="F#" Value="override this.DrawToBitmap : System.Drawing.Bitmap * System.Drawing.Rectangle -&gt; unit" Usage="richTextBox.DrawToBitmap (bitmap, targetBounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Bitmap" />
        <Parameter Name="targetBounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="bitmap">Ein <see cref="T:System.Drawing.Bitmap" />.</param>
        <param name="targetBounds">Ein <see cref="T:System.Drawing.Rectangle" />.</param>
        <summary>Diese Methode ist für diese Klasse nicht relevant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAutoDragDrop">
      <MemberSignature Language="C#" Value="public bool EnableAutoDragDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableAutoDragDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.EnableAutoDragDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableAutoDragDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableAutoDragDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableAutoDragDrop : bool with get, set" Usage="System.Windows.Forms.RichTextBox.EnableAutoDragDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der Drag &amp; Drop-Vorgänge für Text, Bilder und andere Daten ermöglicht, oder legt ihn fest.</summary>
        <value>
          <see langword="true" /> um Drag &amp; Drop-Vorgänge zu ermöglichen; andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Find">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Durchsucht den Inhalt der <see cref="T:System.Windows.Forms.RichTextBox" /> nach Text.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (char[] characterSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(char[] characterSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (characterSet As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(cli::array &lt;char&gt; ^ characterSet);" />
      <MemberSignature Language="F#" Value="member this.Find : char[] -&gt; int" Usage="richTextBox.Find characterSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterSet" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="characterSet">Das zu suchende Array von Zeichen.</param>
        <summary>Durchsucht den Text eines <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelements nach der ersten Instanz eines Zeichens aus einer Liste von Zeichen.</summary>
        <returns>Die Position innerhalb des Steuerelements, an der die zu suchenden Zeichen gefunden wurden, oder -1, wenn die Gruppe zu suchender Zeichen nicht gefunden wurde oder im <paramref name="char" />-Parameter eine leere Gruppe zu suchender Zeichen angegeben wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode sucht die erste Instanz eines Zeichens aus einer Liste von Zeichen im angegebenen die `characterSet` Parameter und gibt den Speicherort des Zeichens zurück. Beispielsweise übergeben Sie ein Array von Zeichen, die mit dem Zeichen "Q". Wenn das Steuerelement den Text "The Quick Brown Fox", enthalten die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode Rückgabe des Werts von vier. Einen Großbuchstaben und einem Kleinbuchstaben gelten unterschiedliche Werte in der Suche.  
  
 Wenn die Eigenschaft auf einen negativen Wert zurückgibt, wurden die Zeichen gesucht wird in den Inhalten des Steuerelements nicht gefunden. Sie können diese Methode verwenden, um für eine Gruppe von Zeichen innerhalb des Steuerelements zu suchen. Diese Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode erfordert, dass das gesamte Dokument, das im Steuerelement enthaltenen Zeichen gesucht wird. Wenn ein Zeichen aus der Liste der Zeichen in der Methode bereitgestellten `characterSet` Parameter gefunden wird, der von dieser Methode zurückgegebene Wert ist ein nullbasierter Index der Position des Zeichens im Steuerelement. Ein Leerzeichen gilt ein Zeichen von der Methode, wenn die Position eines Zeichens zu bestimmen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der Inhalt einer durchsucht eine <xref:System.Windows.Forms.RichTextBox> für die Zeichen, die an die Methode in übergeben werden die `text` Parameter. Wenn der Inhalt des der `text` Array befinden sich unter der <xref:System.Windows.Forms.RichTextBox>, die Methode gibt den Index des Werts, der gefunden wird; andernfalls zurück, es gibt-1 zurück. Das Beispiel erfordert, dass diese Methode sich in der Klasse des befindet eine <xref:System.Windows.Forms.Form> , enthält eine <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1` und ein <xref:System.Windows.Forms.Button> Steuerelement, mit dem Namen `button1`, d. h. verbunden die `Click` Ereignishandler im Das Beispiel.  
  
 [!code-cpp[RichTextBox.FindChar1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.FindChar1/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.FindChar1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.FindChar1/CS/form1.cs#1)]
 [!code-vb[RichTextBox.FindChar1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.FindChar1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (str As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(System::String ^ str);" />
      <MemberSignature Language="F#" Value="member this.Find : string -&gt; int" Usage="richTextBox.Find str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Der im Steuerelement zu suchende Text.</param>
        <summary>Durchsucht den Text in einem <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement nach einer Zeichenfolge.</summary>
        <returns>Die Position innerhalb des Steuerelements, an der der Suchtext gefunden wurde, oder -1, wenn die Suchzeichenfolge nicht gefunden wurde oder im <paramref name="str" />-Parameter eine leere Suchzeichenfolge angegeben wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode sucht nach dem im angegebenen Text die `str` Parameter und gibt den Speicherort des ersten Zeichens innerhalb des Steuerelements zurück. Wenn die Eigenschaft auf einen negativen Wert zurückgibt, wurde die gesuchte Zeichenfolge in den Inhalten des Steuerelements nicht gefunden. Sie können diese Methode verwenden, um Suchfunktionen zu erstellen, die für dem Benutzer des Steuerelements bereitgestellt werden können. Sie können diese Methode auch verwenden, zum Suchen nach Text in einem bestimmten Format ersetzt werden. Z. B. wenn der Benutzer Daten in das Steuerelement eingegeben haben, können die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode, um alle Datumsangaben im Dokument suchen und Ersetzen Sie sie vor der Verwendung durch das entsprechende Format der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> Methode des Steuerelements.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methoden, die akzeptieren eine `string` ein Parameter kann nicht Text gefunden haben, die auf mehr als eine Textzeile im enthalten sind die <xref:System.Windows.Forms.RichTextBox>. Diese Suchmethoden ergibt einen Wert von eins (1).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der gesamte Inhalt des durchsucht eine <xref:System.Windows.Forms.RichTextBox> an die Textparameter der Methode für die erste Instanz einer Suchzeichenfolge zu übergeben. Wenn die Suchzeichenfolge, in gefunden wird der <xref:System.Windows.Forms.RichTextBox>, die Methode gibt einen Wert von `true` und hebt den Suchtext, andernfalls `false`. Das Beispiel erfordert, dass diese Methode sich in der Klasse von befindet einer <xref:System.Windows.Forms.Form> , enthält eine <xref:System.Windows.Forms.RichTextBox> mit dem Namen `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.Find Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.Find Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.Find Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.Find Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.Find Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.Find Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (char[] characterSet, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(char[] characterSet, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (characterSet As Char(), start As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(cli::array &lt;char&gt; ^ characterSet, int start);" />
      <MemberSignature Language="F#" Value="member this.Find : char[] * int -&gt; int" Usage="richTextBox.Find (characterSet, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterSet" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="characterSet">Das zu suchende Array von Zeichen.</param>
        <param name="start">Die Position im Text des Steuerelements, an der die Suche begonnen werden soll.</param>
        <summary>Durchsucht den Text eines <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelements ab einem bestimmten Anfangspunkt nach der ersten Instanz eines Zeichens aus einer Zeichenliste.</summary>
        <returns>Die Position im Steuerelement, an der die zu suchenden Zeichen gefunden wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode sucht die erste Instanz eines Zeichens aus einer Liste von Zeichen im angegebenen die `characterSet` Parameter und gibt die Position des Zeichens zurück. Beispielsweise übergeben Sie ein Array von Zeichen, die mit dem Zeichen "Q". Wenn das Steuerelement den Text "The Quick Brown Fox", enthalten die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode Rückgabe des Werts von vier. Einen Großbuchstaben und einem Kleinbuchstaben gelten unterschiedliche Werte in der Suche.  
  
 Wenn die Eigenschaft auf einen negativen Wert zurückgibt, wurden die Zeichen gesucht wird in den Inhalten des Steuerelements nicht gefunden. Sie können diese Methode verwenden, um für eine Gruppe von Zeichen innerhalb des Steuerelements zu suchen. Wenn ein Zeichen aus der Liste der Zeichen in der Methode bereitgestellten `characterSet` Parameter gefunden wird, der von dieser Methode zurückgegebene Wert ist ein nullbasierter Index der Position des Zeichens im Steuerelement. Ein Leerzeichen gilt ein Zeichen von der Methode, wenn die Position eines Zeichens zu bestimmen.  
  
 Diese Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode ermöglicht Ihnen die Suche für eine Gruppe von Zeichen ab einer angegebenen Startposition im Text des Steuerelements durch Angabe eines Werts für die `start` Parameter. Der Wert 0 (null) gibt an, dass die Suche am Anfang des Dokuments im Steuerelement begonnen werden soll. Sie können diese Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode zum Eingrenzen der Suche um Text zu vermeiden, die Sie bereits wissen, enthält nicht die angegebenen Zeichen, die Sie für Suchen oder sind nicht wichtig, bei der Suche.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der Inhalt einer durchsucht eine <xref:System.Windows.Forms.RichTextBox> für die Zeichen, die an die Methode in übergeben werden die `text` Parameter. Die Suche beginnt in die Position innerhalb der <xref:System.Windows.Forms.RichTextBox> gemäß der `start` Parameter der `FindMyText` Methode. Wenn der Inhalt des Textarrays im befinden die <xref:System.Windows.Forms.RichTextBox>, die-Methode gibt den Index des Werts, der gefunden wird; andernfalls wird-1 zurückgegeben. Das Beispiel erfordert, dass diese Methode sich in der Klasse des befindet eine <xref:System.Windows.Forms.Form> , enthält eine <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1` und ein <xref:System.Windows.Forms.Button> Steuerelement mit dem Namen `button1` , verbunden ist der <xref:System.Windows.Forms.Control.Click> -Ereignishandler definiert, der Beispiel:.  
  
 [!code-cpp[RichTextBox.FindChar2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.FindChar2/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.FindChar2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.FindChar2/CS/form1.cs#1)]
 [!code-vb[RichTextBox.FindChar2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.FindChar2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string str, System.Windows.Forms.RichTextBoxFinds options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string str, valuetype System.Windows.Forms.RichTextBoxFinds options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Windows.Forms.RichTextBoxFinds)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (str As String, options As RichTextBoxFinds) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(System::String ^ str, System::Windows::Forms::RichTextBoxFinds options);" />
      <MemberSignature Language="F#" Value="member this.Find : string * System.Windows.Forms.RichTextBoxFinds -&gt; int" Usage="richTextBox.Find (str, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="options" Type="System.Windows.Forms.RichTextBoxFinds" />
      </Parameters>
      <Docs>
        <param name="str">Der im Steuerelement zu suchende Text.</param>
        <param name="options">Eine bitweise Kombination der <see cref="T:System.Windows.Forms.RichTextBoxFinds" />-Werte.</param>
        <summary>Durchsucht den Text in einem <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement mit spezifischen Suchoptionen nach einer Zeichenfolge.</summary>
        <returns>Die Position im Steuerelement, an der der Suchtext gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode sucht nach dem im angegebenen Text die `str` Parameter und gibt den Speicherort des ersten Zeichens innerhalb des Steuerelements zurück. Wenn die Eigenschaft auf einen negativen Wert zurückgibt, wurde die gesuchte Zeichenfolge in den Inhalten des Steuerelements nicht gefunden. Sie können diese Methode verwenden, um Suchfunktionen zu erstellen, die für dem Benutzer des Steuerelements bereitgestellt werden können. Sie können diese Methode auch verwenden, zum Suchen nach Text in einem bestimmten Format ersetzt werden. Z. B. wenn der Benutzer Daten in das Steuerelement eingegeben haben, können Sie die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode, um alle Datumsangaben im Dokument suchen und Ersetzen Sie sie vor der Verwendung durch das entsprechende Format der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> Methode des Steuerelements.  
  
 Mit dieser Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> -Methode können Sie Optionen, mit denen Sie zum Erweitern oder Eingrenzen der Suche angeben. Sie können Optionen angeben, mit denen Sie entsprechend die Groß-/Kleinschreibung des Worts suchen oder nach ganzen Wörtern anstatt Teile von Wörtern zu suchen. Durch Angabe der `RichTextBoxFinds.Reverse` -Enumeration in die `options` -Parameter, die Sie für den Text zwischen dem unteren Rand des Dokuments auf der oberen anstatt der standardmäßig von oben nach unten Suchmethode suchen können.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methoden, die akzeptieren eine `string` ein Parameter kann nicht Text gefunden haben, die auf mehr als eine Textzeile im enthalten sind die <xref:System.Windows.Forms.RichTextBox>. Diese Suchmethoden ergibt einen Wert von eins (1).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der gesamte Inhalt des durchsucht eine <xref:System.Windows.Forms.RichTextBox> an die Textparameter der Methode für die erste Instanz einer Suchzeichenfolge zu übergeben. Wenn die Suchzeichenfolge, in gefunden wird der <xref:System.Windows.Forms.RichTextBox>, die Methode gibt einen Wert von `true` und den Text hervorgehoben wird, andernfalls `false`. Im Beispiel gibt auch Optionen bei der Suche die Groß-/Kleinschreibung der angegebenen Suchzeichenfolge übereinstimmen. Das Beispiel erfordert, dass diese Methode sich in der Klasse von befindet einer <xref:System.Windows.Forms.Form> , enthält eine <xref:System.Windows.Forms.RichTextBox> mit dem Namen `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.Find1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.Find1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.Find1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.Find1 Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.Find1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.Find1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (char[] characterSet, int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(char[] characterSet, int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (characterSet As Char(), start As Integer, end As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(cli::array &lt;char&gt; ^ characterSet, int start, int end);" />
      <MemberSignature Language="F#" Value="member this.Find : char[] * int * int -&gt; int" Usage="richTextBox.Find (characterSet, start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterSet" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="characterSet">Das zu suchende Array von Zeichen.</param>
        <param name="start">Die Position im Text des Steuerelements, an der die Suche begonnen werden soll.</param>
        <param name="end">Die Position im Text des Steuerelements, an der die Suche beendet werden soll.</param>
        <summary>Durchsucht einen Textbereich in einem <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement nach der ersten Instanz eines Zeichens aus einer Liste von Zeichen.</summary>
        <returns>Die Position im Steuerelement, an der die zu suchenden Zeichen gefunden wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode sucht die erste Instanz eines Zeichens aus einer Liste von Zeichen im angegebenen die `characterSet` Parameter und gibt den Speicherort des Zeichens zurück. Beispielsweise übergeben Sie ein Array von Zeichen, die mit dem Zeichen "Q". Wenn das Steuerelement den Text "The Quick Brown Fox", enthalten die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode Rückgabe des Werts von vier. Einen Großbuchstaben und einem Kleinbuchstaben gelten unterschiedliche Werte in der Suche.  
  
 Wenn die Eigenschaft auf einen negativen Wert zurückgibt, wurden die Zeichen gesucht wird in den Inhalten des Steuerelements nicht gefunden. Sie können diese Methode verwenden, um für eine Gruppe von Zeichen innerhalb des Steuerelements zu suchen. Wenn ein Zeichen aus der Liste der Zeichen in der Methode bereitgestellten `characterSet` Parameter gefunden wird, der von dieser Methode zurückgegebene Wert ist eine auf Null basierende Index der Position des Zeichens im Steuerelement. Ein Leerzeichen gilt ein Zeichen von der Methode, wenn die Position eines Zeichens zu bestimmen.  
  
 Diese Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode ermöglicht Ihnen die Suche nach einem Zeichen, die aus einem Bereich von Text im Steuerelement festgelegt werden, durch die Angabe eines Werts für die `start` und `end` Parameter. Der Wert 0 (null), für die `start` Parameter gibt an, dass die Suche am Anfang des Dokuments im Steuerelement begonnen werden soll. Ein Wert von-1 für die `end` Parameter gibt an, dass die Suche am Ende des Texts im Steuerelement beendet werden soll. Sie können diese Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode zum Eingrenzen der Suche auf einen bestimmten Bereich des Texts innerhalb des Steuerelements, um zu vermeiden, suchen die Bereiche des Dokuments, die nicht an die Anforderungen Ihrer Anwendung wichtig sind.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="characterSet" /> ist NULL.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="start" /> ist kleiner als 0 (null) oder größer als die Länge des Texts im Steuerelement.</exception>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string str, int start, System.Windows.Forms.RichTextBoxFinds options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string str, int32 start, valuetype System.Windows.Forms.RichTextBoxFinds options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Int32,System.Windows.Forms.RichTextBoxFinds)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (str As String, start As Integer, options As RichTextBoxFinds) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(System::String ^ str, int start, System::Windows::Forms::RichTextBoxFinds options);" />
      <MemberSignature Language="F#" Value="member this.Find : string * int * System.Windows.Forms.RichTextBoxFinds -&gt; int" Usage="richTextBox.Find (str, start, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="options" Type="System.Windows.Forms.RichTextBoxFinds" />
      </Parameters>
      <Docs>
        <param name="str">Der im Steuerelement zu suchende Text.</param>
        <param name="start">Die Position im Text des Steuerelements, an der die Suche begonnen werden soll.</param>
        <param name="options">Eine bitweise Kombination der <see cref="T:System.Windows.Forms.RichTextBoxFinds" />-Werte.</param>
        <summary>Durchsucht den Text in einem <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement nach einer Zeichenfolge an einer bestimmten Position im Steuerelement und mit spezifischen Suchoptionen.</summary>
        <returns>Die Position im Steuerelement, an der der Suchtext gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode sucht nach dem im angegebenen Text die `str` Parameter und gibt der Speicherort des ersten Zeichens der Suche Zeichenfolge innerhalb des Steuerelements. Wenn die Eigenschaft auf einen negativen Wert zurückgibt, wurde die gesuchte Zeichenfolge in den Inhalten des Steuerelements nicht gefunden. Sie können diese Methode verwenden, um Suchfunktionen zu erstellen, die für dem Benutzer des Steuerelements bereitgestellt werden können. Sie können diese Methode auch verwenden, zum Suchen nach Text in einem bestimmten Format ersetzt werden. Z. B. wenn der Benutzer Daten in das Steuerelement eingegeben haben, können die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode, um alle Datumsangaben im Dokument suchen und Ersetzen Sie sie vor der Verwendung durch das entsprechende Format der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> Methode des Steuerelements.  
  
 Mit dieser Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> -Methode können Sie Optionen, mit denen Sie zum Erweitern oder Eingrenzen der Suche angeben. Sie können Optionen angeben, mit denen Sie entsprechend die Groß-/Kleinschreibung des Worts suchen oder nach ganzen Wörtern anstatt Teile von Wörtern zu suchen. Durch Angabe der `RichTextBoxFinds.Reverse` -Enumeration in die `options` -Parameter, die Sie für den Text zwischen dem unteren Rand des Dokuments auf der oberen anstatt der standardmäßig von oben nach unten Suchmethode suchen können. Diese Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode auch können Sie die Suche nach Text, die durch die Auswahl einer bestimmten Anfangsposition im Text des Steuerelements einschränken. Dieses Feature können Sie vermeiden, dass Text, der möglicherweise bereits durchsucht wurden, oder der angegebenen Text, die nach der gesucht werden, bei nicht bekannt ist. Wenn die `RichTextBoxFinds.Reverse` Wert wird angegeben, der `options` -Parameter wird der Wert des der `start` Parameter gibt an, der die Position, in denen die umgekehrte Suche beendet wird, da am unteren Rand des Dokuments die Suche beginnen soll, wenn diese Version von, der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methoden, die akzeptieren eine `string` ein Parameter kann nicht Text gefunden haben, die auf mehr als eine Textzeile im enthalten sind die <xref:System.Windows.Forms.RichTextBox>. Diese Suchmethoden ergibt einen Wert von eins (1).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der gesamte Inhalt des durchsucht eine <xref:System.Windows.Forms.RichTextBox> an die Textparameter der Methode für die erste Instanz einer Suchzeichenfolge zu übergeben. Der Anfangspunkt der Suche wird von der Start-Parameter der Methode angegeben. Wenn die Suchzeichenfolge, in gefunden wird der <xref:System.Windows.Forms.RichTextBox>, die Methode gibt die Indexposition des ersten Zeichens des der gefundene Text zurück, und den gefundenen Text hervorgehoben; andernfalls wird der Wert-1 zurückgegeben. Im Beispiel gibt auch Optionen bei der Suche die Groß-/Kleinschreibung der angegebenen Suchzeichenfolge übereinstimmen. Das Beispiel erfordert, dass diese Methode sich in der Klasse von befindet einer <xref:System.Windows.Forms.Form> , enthält eine <xref:System.Windows.Forms.RichTextBox> mit dem Namen `richTextBox1`. In diesem Beispiel können Sie eine "Weitersuchen" Art der auszuführenden Operation. Wenn eine Instanz des Suchtexts gefunden wurde, finden Sie andere Instanzen des Texts durch Ändern des Werts, der die `start` -Parameters, an einem Ort hinter der die aktuelle Übereinstimmung gesucht.  
  
 [!code-cpp[Classic RichTextBox.Find2 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.Find2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.Find2 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.Find2 Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.Find2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.Find2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string str, int start, int end, System.Windows.Forms.RichTextBoxFinds options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string str, int32 start, int32 end, valuetype System.Windows.Forms.RichTextBoxFinds options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Int32,System.Int32,System.Windows.Forms.RichTextBoxFinds)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (str As String, start As Integer, end As Integer, options As RichTextBoxFinds) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(System::String ^ str, int start, int end, System::Windows::Forms::RichTextBoxFinds options);" />
      <MemberSignature Language="F#" Value="member this.Find : string * int * int * System.Windows.Forms.RichTextBoxFinds -&gt; int" Usage="richTextBox.Find (str, start, end, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="options" Type="System.Windows.Forms.RichTextBoxFinds" />
      </Parameters>
      <Docs>
        <param name="str">Der im Steuerelement zu suchende Text.</param>
        <param name="start">Die Position im Text des Steuerelements, an der die Suche begonnen werden soll.</param>
        <param name="end">Die Position im Text des Steuerelements, an der die Suche beendet werden soll. Dieser Wert muss -1 oder größer oder gleich dem <c>start</c>-Parameter sein.</param>
        <param name="options">Eine bitweise Kombination der <see cref="T:System.Windows.Forms.RichTextBoxFinds" />-Werte.</param>
        <summary>Durchsucht den Text in einem <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement nach einer Zeichenfolge innerhalb eines bestimmten Textbereichs im Steuerelement und mit spezifischen Suchoptionen.</summary>
        <returns>Die Position im Steuerelement, an der der Suchtext gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode sucht nach dem im angegebenen Text die `str` Parameter und gibt der Speicherort des ersten Zeichens der Suche Zeichenfolge innerhalb des Steuerelements. Wenn die Eigenschaft auf einen negativen Wert zurückgibt, wurde die gesuchte Zeichenfolge in den Inhalten des Steuerelements nicht gefunden. Sie können diese Methode verwenden, um Suchfunktionen zu erstellen, die für dem Benutzer des Steuerelements bereitgestellt werden können. Sie können diese Methode auch verwenden, zum Suchen nach Text in einem bestimmten Format ersetzt werden. Z. B. wenn der Benutzer Daten in das Steuerelement eingegeben haben, können Sie die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode, um alle Datumsangaben im Dokument suchen und Ersetzen Sie sie vor der Verwendung durch das entsprechende Format der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> Methode des Steuerelements.  
  
 Mit dieser Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> -Methode können Sie Optionen, mit denen Sie zum Erweitern oder Eingrenzen der Suche angeben. Sie können Optionen angeben, mit denen Sie entsprechend die Groß-/Kleinschreibung des Worts suchen oder nach ganzen Wörtern anstatt Teile von Wörtern zu suchen. Durch Angabe der `RichTextBoxFinds.Reverse` -Enumeration in die `options` -Parameter, die Sie für den Text zwischen dem unteren Rand des Dokuments auf der oberen anstatt der standardmäßig von oben nach unten Suchmethode suchen können. Diese Version von der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode auch können Sie die Suche nach Text, die durch die Auswahl einer bestimmten Start- und Endposition im Text des Steuerelements einschränken. Dieses Feature können Sie den Suchbereich auf einem bestimmten Abschnitt Text des Steuerelements zu beschränken. Wenn ein Wert von eins (1) zugewiesen ist die `end` Parameter sucht die Methode bis zum Ende des Texts in der <xref:System.Windows.Forms.RichTextBox> für normale suchen. Für die umgekehrte Suche, der Wert minus eins (1 zugewiesen) der `end` Parameter gibt an, dass der Text am Ende von Text (unten) an die Position von definierten gesucht werden soll `start` Parameter. Wenn die `start` und `end` Parameter werden bereitgestellt, die der gleiche Wert das gesamte Steuerelement wird bei normalen Suchvorgängen durchsucht. Für eine umgekehrte Suche das gesamte Steuerelement wird gesucht, aber die Suche beginnt am unteren Rand des Dokuments und an den Anfang des Dokuments sucht.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methoden, die akzeptieren eine `string` ein Parameter kann nicht Text gefunden haben, die auf mehr als eine Textzeile im enthalten sind die <xref:System.Windows.Forms.RichTextBox>. Diese Suchmethoden ergibt einen Wert von eins (1).  
  
   
  
## Examples  
 Das folgende Codebeispiel sucht einen Textabschnitt in einem <xref:System.Windows.Forms.RichTextBox> für die erste Instanz einer Suchzeichenfolge übergebene der `searchText` Parameters der Methode. Bereich zum Suchen nach Text im Steuerelement, durch angegeben wird die `searchStart` und `searchEnd` Parameter der Methode. Wenn die Suchzeichenfolge, in gefunden wird der <xref:System.Windows.Forms.RichTextBox>, die Methode gibt die Indexposition des ersten Zeichens des der gefundene Text zurück, und den gefundenen Text hervorgehoben; andernfalls wird der Wert-1 zurückgegeben. Im Beispiel verwendet auch die `options` Parameter, der die <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode, um anzugeben, dass der gefundene Text die Groß-/Kleinschreibung der Suchzeichenfolge übereinstimmt. Das Beispiel erfordert, dass diese Methode sich in der Klasse von befindet einer <xref:System.Windows.Forms.Form> , enthält eine <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1`. Nach der ersten wurde Instanz der Suchzeichenfolge gefunden, können Sie dieses Beispiel verwenden, um weitere Instanzen im Text zu suchen.  
  
 [!code-cpp[RichTextBox.FindStringStartEnd#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.FindStringStartEnd/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.FindStringStartEnd#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.FindStringStartEnd/CS/form1.cs#1)]
 [!code-vb[RichTextBox.FindStringStartEnd#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.FindStringStartEnd/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="str" />-Parameter war <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="end" />-Parameter war kleiner als der <paramref name="start" />-Parameter.</exception>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Windows.Forms.RichTextBox.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Schriftart für die Anzeige von Text im Steuerelement ab oder legt diese fest.</summary>
        <value>Der <see cref="T:System.Drawing.Font" />, der auf den Text angewendet werden soll, der im Steuerelement angezeigt wird. Der Standardwert ist der Wert der <see cref="P:System.Windows.Forms.Control.DefaultFont" />-Eigenschaft.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.Font" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.RichTextBox.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Vordergrundfarbe des Steuerelements ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Color" />, die die Vordergrundfarbe des Steuerelements darstellt.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.ForeColor" />
      </Docs>
    </Member>
    <Member MemberName="GetCharFromPosition">
      <MemberSignature Language="C#" Value="public char GetCharFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char GetCharFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.GetCharFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCharFromPosition (pt As Point) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; char GetCharFromPosition(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="member this.GetCharFromPosition : System.Drawing.Point -&gt; char" Usage="richTextBox.GetCharFromPosition pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharIndexFromPosition">
      <MemberSignature Language="C#" Value="public override int GetCharIndexFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharIndexFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharIndexFromPosition (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharIndexFromPosition(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="override this.GetCharIndexFromPosition : System.Drawing.Point -&gt; int" Usage="richTextBox.GetCharIndexFromPosition pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Die zu suchende Position.</param>
        <summary>Ruft den Index des Zeichens ab, das sich am nächsten zur angegebenen Position befindet.</summary>
        <returns>Der nullbasierte Zeichenindex an der angegebenen Position.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt den Zeichenindex, die im angegebenen Position am nächsten liegt die `pt` Parameter. Der Zeichenindex ist ein nullbasierter Index des Texts im Steuerelement, einschließlich Leerzeichen. Sie können diese Methode verwenden, um zu bestimmen, in dem im Text der Benutzer die Maus durch die Maus Koordinaten an diese Methode übergeben wurde. Dies kann nützlich sein, wenn Aufgaben auszuführen, wenn der Benutzer den Mauszeiger auf ein Wort im Text des Steuerelements gezeigt werden soll.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition%2A> -Methode mit der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode zum Suchen nach einer bestimmten Zeichenfolge innerhalb einer <xref:System.Windows.Forms.RichTextBox> und Anzeige den Zeichenindex, in denen die gefundene Zeichenfolge sich in befindet, der <xref:System.Windows.Forms.RichTextBox> -Steuerelement. Das Beispiel sucht nach dem Wort "brown" in den Inhalten des Steuerelements und gibt die Zeichenindexposition, in denen die Suchzeichenfolge gefunden wird. Dieses Beispiel erfordert, dass Sie verfügen über ein Formular mit einem <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1` , die Text enthält. Es sind auch erforderlich, dass der Code im Beispiel mit verbunden ist die <xref:System.Windows.Forms.Control.MouseDown> Ereignis die <xref:System.Windows.Forms.RichTextBox>.  
  
 [!code-cpp[RichTextBox.GetCharIndexFromPosition#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.GetCharIndexFromPosition/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.GetCharIndexFromPosition#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.GetCharIndexFromPosition/CS/form1.cs#1)]
 [!code-vb[RichTextBox.GetCharIndexFromPosition#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.GetCharIndexFromPosition/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetLineFromCharIndex(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineFromCharIndex">
      <MemberSignature Language="C#" Value="public override int GetLineFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLineFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.GetLineFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLineFromCharIndex (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLineFromCharIndex(int index);" />
      <MemberSignature Language="F#" Value="override this.GetLineFromCharIndex : int -&gt; int" Usage="richTextBox.GetLineFromCharIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Die zu suchende Zeichenindexposition.</param>
        <summary>Ruft die Zeilennummer von der angegebenen Zeichenposition im Text des <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelements ab.</summary>
        <returns>Die nullbasierte Nummer der Zeile, in der sich der Zeichenindex befindet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Methode können Sie die Nummer der Zeile, die basierend auf den in angegebenen Zeichenindex bestimmen die `index` Parameters der Methode. Die erste Zeile des Texts im Steuerelement gibt den Wert 0 (null) zurück. Die <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> Methode gibt die Anzahl der physischen Zeile zurück, in denen befindet sich des indizierten Zeichens innerhalb des Steuerelements. Z. B. wenn ein Teil des Texts in der ersten logischen Zeile umbrochen wird die nächste Zeile, die <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> -Methode gibt 1 zurück, wenn das Zeichen am angegebenen Zeichenindex auf die zweite physische Zeile umbrochen wurde. Wenn <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> nastaven NA hodnotu `false`, kein Teil der Zeile zur nächsten umschließt und die Methode gibt 0 für den angegebenen Zeichenindex zurück. Sie können diese Methode verwenden, um zu bestimmen, welche Zeile ein bestimmte Zeichenindex in enthalten ist. Z. B. nach dem Aufruf der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode zum Suchen nach Text, Sie erhalten den Zeichenindex an dem die Ergebnisse der Suche gefunden wurden. Sie können diese Methode aufrufen, mit der Zeichenindex zurückgegebenes der <xref:System.Windows.Forms.RichTextBox.Find%2A> Methode, um zu bestimmen, welcher Zeile das Wort gefunden wurde.  
  
 In bestimmten Fällen <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> löst keine Ausnahme bei der `index` Parameter ist ein ungültiger Wert. Zum Beispiel:  
  
-   Wenn die `index` Parameter <xref:System.Int32.MinValue> oder -1, <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> gibt 0 zurück.  
  
-   Wenn die `index` -Parameter ist die Länge oder <xref:System.Int32.MaxValue>, <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> gibt die Anzahl der letzten Zeile des Texts an, die nicht notwendigerweise das gleiche ist als `Lines.Length-1`, je nachdem, auf dem Wert der <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> Eigenschaft.  
  
 Überprüfen Sie in diesen Fällen ist die Eingabe vor dem Aufruf <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A>.  
  
> [!NOTE]
>  Wenn der Zeichenindex in angegeben die `index` Parameter über die verfügbare Anzahl der Zeilen im Steuerelement enthalten ist, Nummer der letzte Zeile zurückgegeben.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> Methode. Um das Beispiel auszuführen, fügen Sie in den folgenden Code in ein Formular mit einem <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `RichTextBox1`, eine Schaltfläche namens `Button1` und zwei Textfeldern, die mit dem Namen `TextBox1` und `TextBox2`. Wenn das Beispiel ausgeführt wird, geben Sie eine Suchzeichenfolge in `TextBox2` , und klicken Sie auf die Schaltfläche, um die Suchergebnisse zu erhalten.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxGetLine#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxGetLine/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxGetLine#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxGetLine/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxGetLine#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxGetLine/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromCharIndex">
      <MemberSignature Language="C#" Value="public override System.Drawing.Point GetPositionFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Point GetPositionFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.GetPositionFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPositionFromCharIndex (index As Integer) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Drawing::Point GetPositionFromCharIndex(int index);" />
      <MemberSignature Language="F#" Value="override this.GetPositionFromCharIndex : int -&gt; System.Drawing.Point" Usage="richTextBox.GetPositionFromCharIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der Index des Zeichens, für das die Position abgerufen werden soll.</param>
        <summary>Ruft die Position innerhalb des Steuerelements am angegebenen Zeichenindex ab.</summary>
        <returns>Die Position des angegebenen Zeichens.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode können Sie bestimmen, in dem sich ein bestimmter Zeichenindex in das Steuerelement befindet. Sie können diese Methode für Aufgaben wie das Anzeigen von Elementen oder Help Informationen zum Kontextmenü nach einem Wort im Steuerelement verwenden. Z. B. Falls gewünscht, können Sie ein Menü mit Optionen für den Benutzer angezeigt wird, wenn der Benutzer der rechten Maustaste auf ein Wort in das Steuerelement klickt, können diese Methode bestimmt die Position des Wortes, um die ordnungsgemäße Darstellung einer <xref:System.Windows.Forms.ContextMenu> Steuerelement.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.Forms.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.Forms.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt während eines Ziehvorgangs ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HScroll">
      <MemberSignature Language="C#" Value="public event EventHandler HScroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HScroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.HScroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HScroll As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HScroll;" />
      <MemberSignature Language="F#" Value="member this.HScroll : EventHandler " Usage="member this.HScroll : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer auf die horizontale Schiebeleiste des Steuerelements klickt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Nutzen von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Da die  Klasse erbt von , Sie können diese Eigenschaft auch verwenden, wenn die  eines Formulars zugeordnet ist. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.RichTextBox.HScroll> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.RichTextBox> mit dem Namen `RichTextBox1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.RichTextBox.HScroll> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#540](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#540)]
 [!code-vb[System.Windows.Forms.EventExamples#540](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#540)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeChange">
      <MemberSignature Language="C#" Value="public event EventHandler ImeChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ImeChange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.ImeChange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ImeChange As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ImeChange;" />
      <MemberSignature Language="F#" Value="member this.ImeChange : EventHandler " Usage="member this.ImeChange : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn Benutzer die Eingabemethoden in einer asiatischen Version des Windows-Betriebssystems wechseln.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Nutzen von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Da die  Klasse erbt von , Sie können diese Eigenschaft auch verwenden, wenn die  eines Formulars zugeordnet ist. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.RichTextBox.ImeChange> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.RichTextBox> mit dem Namen `RichTextBox1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.RichTextBox.ImeChange> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#542](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#542)]
 [!code-vb[System.Windows.Forms.EventExamples#542](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#542)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageOption">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.RichTextBoxLanguageOptions LanguageOption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RichTextBoxLanguageOptions LanguageOption" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.LanguageOption" />
      <MemberSignature Language="VB.NET" Value="Public Property LanguageOption As RichTextBoxLanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::RichTextBoxLanguageOptions LanguageOption { System::Windows::Forms::RichTextBoxLanguageOptions get(); void set(System::Windows::Forms::RichTextBoxLanguageOptions value); };" />
      <MemberSignature Language="F#" Value="member this.LanguageOption : System.Windows.Forms.RichTextBoxLanguageOptions with get, set" Usage="System.Windows.Forms.RichTextBox.LanguageOption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RichTextBoxLanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der <see cref="T:System.Windows.Forms.RichTextBox" />-Einstellungen für die Unterstützung des Eingabemethoden-Editors (IME, Input Methode Editor) und asiatischer Sprachen angibt, oder legt diesen Wert fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.RichTextBoxLanguageOptions" />-Werte. Der Standardwert ist <see cref="F:System.Windows.Forms.RichTextBoxLanguageOptions.AutoFontSizeAdjust" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkClicked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LinkClickedEventHandler LinkClicked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LinkClickedEventHandler LinkClicked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.LinkClicked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LinkClicked As LinkClickedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LinkClickedEventHandler ^ LinkClicked;" />
      <MemberSignature Language="F#" Value="member this.LinkClicked : System.Windows.Forms.LinkClickedEventHandler " Usage="member this.LinkClicked : System.Windows.Forms.LinkClickedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkClickedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn Benutzer auf einen Link im Text des Steuerelements klicken.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können einen Ereignishandler für dieses Ereignis, um einen Link zu verarbeiten, der innerhalb des Steuerelements auf den geklickt wurde, erstellen. Verwenden die Informationen an den Ereignishandler, können Sie feststellen, auf welchen Link im Dokument geklickt wurde.  
  
> [!IMPORTANT]
>  Standardmäßig Links werden als Text angezeigt und sind nicht geklickt werden kann. Um sie durch Klicken aktivierbaren Satz machen die <xref:System.Windows.Forms.RichTextBox.DetectUrls%2A> Eigenschaft `true`.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Nutzen von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Das folgende Codebeispiel enthält einen Ereignishandler für die <xref:System.Windows.Forms.RichTextBox.LinkClicked> Ereignis. Der Ereignishandler verarbeitet Link Klicks innerhalb des Dokuments eine <xref:System.Windows.Forms.RichTextBox> steuern und startet eine Instanz des Standard-Browser (mithilfe der <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> Methode), Anzeige der Seite für den Link, auf die geklickt wurde. Dieses Beispiel erfordert, dass der Ereignishandler mit verbunden wurde die <xref:System.Windows.Forms.RichTextBox.LinkClicked> -Ereignis für eine <xref:System.Windows.Forms.RichTextBox>.  
  
 [!code-cpp[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.DetectUrls" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadFile">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Lädt den Inhalt einer Datei in das <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public void LoadFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.LoadFile : string -&gt; unit" Usage="richTextBox.LoadFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der Name und Speicherort der in das Steuerelement zu ladenden Datei.</param>
        <summary>Lädt eine RTF-Datei (Rich Text Format) oder eine standardmäßige ASCII-Textdatei in das <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Laden einer Datei mit den <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> den Inhalt der geladenen Datei ersetzen Sie die Methode, den gesamten Inhalt der <xref:System.Windows.Forms.RichTextBox> Steuerelement. Dies bewirkt, dass die Werte der <xref:System.Windows.Forms.TextBoxBase.Text%2A> und <xref:System.Windows.Forms.RichTextBox.Rtf%2A> Eigenschaften geändert. Sie können diese Methode verwenden, um eine zuvor erstellte Text oder RTF-Dokument in das Steuerelement für die Bearbeitung zu laden. Wenn Sie die Datei speichern möchten, können Sie mithilfe der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> Methode.  
  
> [!NOTE]
>  Mit dieser Version von der <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> -Methode, wenn die zu ladende Datei nicht RTF-Dokument ist wird eine Ausnahme ausgelöst. Um eine andere Art von Datei, z. B. eine ASCII-Textdatei zu laden, verwenden Sie andere Versionen dieser Methode, die akzeptieren einen Wert aus der <xref:System.Windows.Forms.RichTextBoxStreamType> -Enumeration als Parameter.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode wird eine Datei nicht geöffnet, bis zur Erstellung eines Handles für die <xref:System.Windows.Forms.RichTextBox>. Stellen Sie sicher, dass das Handle des Steuerelements, vor dem Aufruf erstellt wird der <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine RTF-Datei geöffnet. die <xref:System.Windows.Forms.RichTextBox> Steuerelement. Im Beispiel wird die <xref:System.Windows.Forms.OpenFileDialog> Klasse zum Anzeigen eines Dialogfelds, um die Datei vom Benutzer anfordern. Der Code lädt die Datei unter der Annahme, dass es sich um ein RTF-Element ist dann dokumentieren die Datei. Wenn die Datei nicht ist, wird der Beispielcode eine Ausnahme ausgelöst. Dieses Beispiel erfordert, dass der Code sich in befindet einem <xref:System.Windows.Forms.Form> -Klasse, verfügt eine <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.LoadFile Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.LoadFile Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.LoadFile Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.LoadFile Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.LoadFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.LoadFile Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Fehler beim Laden der Datei in das Steuerelement.</exception>
        <exception cref="T:System.ArgumentException">Die zu ladende Datei ist kein RTF-Dokument.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">zum Öffnen einer Datei an. Zugeordnete Enumeration: die <see langword="Read" /> Wert <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</permission>
        <altmember cref="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public void LoadFile (System.IO.Stream data, System.Windows.Forms.RichTextBoxStreamType fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadFile(class System.IO.Stream data, valuetype System.Windows.Forms.RichTextBoxStreamType fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.LoadFile(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadFile (data As Stream, fileType As RichTextBoxStreamType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadFile(System::IO::Stream ^ data, System::Windows::Forms::RichTextBoxStreamType fileType);" />
      <MemberSignature Language="F#" Value="member this.LoadFile : System.IO.Stream * System.Windows.Forms.RichTextBoxStreamType -&gt; unit" Usage="richTextBox.LoadFile (data, fileType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" />
        <Parameter Name="fileType" Type="System.Windows.Forms.RichTextBoxStreamType" />
      </Parameters>
      <Docs>
        <param name="data">Ein in das <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement zu ladender Datenstream.</param>
        <param name="fileType">Einer der <see cref="T:System.Windows.Forms.RichTextBoxStreamType" />-Werte.</param>
        <summary>Lädt den Inhalt eines vorhandenen Datenstreams in das <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können Sie diese Version von der <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode zum Laden der <xref:System.Windows.Forms.RichTextBox> mit Daten aus einer vorhandenen Datenstrom. Die Daten, die in das Steuerelement geladen wird, ersetzt den gesamten Inhalt der <xref:System.Windows.Forms.RichTextBox> Steuerelement. Dies bewirkt, dass die Werte der <xref:System.Windows.Forms.TextBoxBase.Text%2A> und <xref:System.Windows.Forms.RichTextBox.Rtf%2A> Eigenschaften geändert. Sie können diese Methode verwenden, zum Laden einer Datei, die zuvor geöffnet wurde in einen Datenstrom, in das Steuerelement für die Bearbeitung. Wenn Sie den Inhalt des Steuerelements zurück in den Datenstrom zu speichern möchten, können Sie mithilfe der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> -Methode, akzeptiert eine <xref:System.IO.Stream> -Objekt als Parameter.  
  
 Diese Version von der <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> -Methode ermöglicht zusätzlich zur Angabe der Daten, die in das Steuerelement geladen wird. Dieses Feature können Sie Datenströme zu verwenden, die Daten als Dokumente für rich-Text-Format (RTF) in das Steuerelement enthalten.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode wird eine Datei nicht geöffnet, bis zur Erstellung eines Handles für die <xref:System.Windows.Forms.RichTextBox>. Stellen Sie sicher, dass das Handle des Steuerelements, vor dem Aufruf erstellt wird der <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> und <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methoden mit Datenströmen. Außerdem wird das Verwenden der <xref:System.Windows.Forms.FileDialog.FileName%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>, und <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> Member.  
  
 Dies ist ein vollständiges Beispiel, das ausgeführt werden, wenn Sie es in Ihr Projekt kopieren kann.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Fehler beim Laden der Datei in das Steuerelement.</exception>
        <exception cref="T:System.ArgumentException">Die zu ladende Datei ist kein RTF-Dokument.</exception>
        <altmember cref="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Windows.Forms.RichTextBoxStreamType" />
      </Docs>
    </Member>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public void LoadFile (string path, System.Windows.Forms.RichTextBoxStreamType fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadFile(string path, valuetype System.Windows.Forms.RichTextBoxStreamType fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.LoadFile(System.String,System.Windows.Forms.RichTextBoxStreamType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadFile (path As String, fileType As RichTextBoxStreamType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadFile(System::String ^ path, System::Windows::Forms::RichTextBoxStreamType fileType);" />
      <MemberSignature Language="F#" Value="member this.LoadFile : string * System.Windows.Forms.RichTextBoxStreamType -&gt; unit" Usage="richTextBox.LoadFile (path, fileType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="fileType" Type="System.Windows.Forms.RichTextBoxStreamType" />
      </Parameters>
      <Docs>
        <param name="path">Der Name und Speicherort der in das Steuerelement zu ladenden Datei.</param>
        <param name="fileType">Einer der <see cref="T:System.Windows.Forms.RichTextBoxStreamType" />-Werte.</param>
        <summary>Lädt einen spezifischen Dateityp in das <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Laden einer Datei mit den <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> den Inhalt der geladenen Datei ersetzen Sie die Methode, den gesamten Inhalt der <xref:System.Windows.Forms.RichTextBox> Steuerelement. Dies bewirkt, dass die Werte der <xref:System.Windows.Forms.TextBoxBase.Text%2A> und <xref:System.Windows.Forms.RichTextBox.Rtf%2A> Eigenschaften geändert. Sie können diese Methode verwenden, um eine zuvor erstellte Text- oder das Dokument rich Text Format (RTF) in das Steuerelement für die Bearbeitung zu laden. Wenn Sie die Datei speichern möchten, können Sie mithilfe der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> Methode.  
  
 Sie können diese Version von der <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode, um den Dateityp der geladenen Datei anzugeben. Dieses Feature ermöglicht Ihnen, andere Dateien als RTF-Dokumente in das Steuerelement zu laden.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode wird eine Datei nicht geöffnet, bis zur Erstellung eines Handles für die <xref:System.Windows.Forms.RichTextBox>. Stellen Sie sicher, dass das Handle des Steuerelements, vor dem Aufruf erstellt wird der <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird öffnet eine Textdatei, in der <xref:System.Windows.Forms.RichTextBox> Steuerelement. Im Beispiel wird die <xref:System.Windows.Forms.OpenFileDialog> Klasse zum Anzeigen eines Dialogfelds, um die Datei vom Benutzer anfordern. Der Code lädt dann die Datei in die <xref:System.Windows.Forms.RichTextBox> Steuerelement. Im Beispiel wird diese Version von der <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode, um anzugeben, dass die Datei als ASCII-Textdatei statt mit dem standard-rich-Text-Format geöffnet werden. Dieses Beispiel erfordert, dass der Code sich in befindet einem <xref:System.Windows.Forms.Form> -Klasse, verfügt eine <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.LoadFile1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.LoadFile1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.LoadFile1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.LoadFile1 Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.LoadFile1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.LoadFile1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Fehler beim Laden der Datei in das Steuerelement.</exception>
        <exception cref="T:System.ArgumentException">Die zu ladende Datei ist kein RTF-Dokument.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">zum Öffnen einer Datei an. Zugeordnete Enumeration: die <see langword="Read" /> Wert <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</permission>
        <altmember cref="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" />
        <altmember cref="T:System.Windows.Forms.RichTextBoxStreamType" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public override int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxLength : int with get, set" Usage="System.Windows.Forms.RichTextBox.MaxLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(2147483647)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die maximale Anzahl an Zeichen ab, die Benutzer in das RichTextBox-Steuerelement eingeben oder einfügen können, oder legt diese fest.</summary>
        <value>Die Anzahl der Zeichen, die in das Steuerelement eingegeben werden können. Der Standardwert ist <see cref="F:System.Int32.MaxValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft auf 0 festgelegt ist, ist die maximale Länge des Texts, der im Steuerelement eingegeben werden kann 64 KB Zeichen beschränkt. Diese Eigenschaft ist in der Regel verwendet, wenn die <xref:System.Windows.Forms.RichTextBox> wird verwendet, um eine einzelne Textzeile rich-Text-Format (RTF) anzeigen. Sie können diese Eigenschaft verwenden, um die Länge des Texts im Steuerelement eingegeben wird, für die Werte wie Postleitzahlen und Telefonnummern einzuschränken oder beschränken die Länge des Texts, die eingegeben werden, wenn die Daten in einer Datenbank eingegeben werden. Sie können den Text in das Steuerelement eingegeben wird, auf die maximale Länge des entsprechenden Felds in der Datenbank einschränken.  
  
> [!NOTE]
>  Im Code können Sie den Wert der Festlegen der <xref:System.Windows.Forms.TextBoxBase.Text%2A> Eigenschaft ein Wert, der eine Länge größer als der angegebene Wert ist die <xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> Eigenschaft. Diese Eigenschaft wirkt sich nur auf Text in das Steuerelement zur Laufzeit eingegeben werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.RichTextBox.MaxLength%2A> Eigenschaft, um zu bestimmen, ob Text zugewiesen wird eine <xref:System.Windows.Forms.RichTextBox> Steuerelement größer als der zugewiesene Wert ist die <xref:System.Windows.Forms.RichTextBox.MaxLength%2A> Eigenschaft. Wenn der Text nicht überschreitet, wird im Beispiel wird die <xref:System.Windows.Forms.RichTextBox.SelectedText%2A> Eigenschaft, um den Text des Steuerelements zuweisen. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.RichTextBox> Steuerelement, mit dem Namen `richTextBox1`, ein Formular hinzugefügt wurde und die die Methode im Beispiel wird aufgerufen, mit dem Text angegeben, die an den Parameter, die in das Steuerelement eingefügt werden. Im Beispiel erfordert außerdem, dass die <xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> -Eigenschaft auf einen Wert festgelegt wurde, beschränken Sie die Eingabe von Text in die <xref:System.Windows.Forms.RichTextBox>.  
  
 [!code-cpp[RichTextBox.MaxLength#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.MaxLength/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.MaxLength#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.MaxLength/CS/form1.cs#1)]
 [!code-vb[RichTextBox.MaxLength#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.MaxLength/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der zugewiesene Eigenschaftswert ist kleiner als 0 (null).</exception>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.MaxLength" />
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Multiline : bool with get, set" Usage="System.Windows.Forms.RichTextBox.Multiline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob es sich um ein mehrzeiliges <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement handelt, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn das Steuerelement ein mehrzeiliges <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBackColorChanged : EventArgs -&gt; unit" Usage="richTextBox.OnBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.BackColorChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentsResized">
      <MemberSignature Language="C#" Value="protected virtual void OnContentsResized (System.Windows.Forms.ContentsResizedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentsResized(class System.Windows.Forms.ContentsResizedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnContentsResized(System.Windows.Forms.ContentsResizedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentsResized (e As ContentsResizedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentsResized(System::Windows::Forms::ContentsResizedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContentsResized : System.Windows.Forms.ContentsResizedEventArgs -&gt; unit&#xA;override this.OnContentsResized : System.Windows.Forms.ContentsResizedEventArgs -&gt; unit" Usage="richTextBox.OnContentsResized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ContentsResizedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.ContentsResizedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.RichTextBox.ContentsResized" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.RichTextBox.OnContentsResized%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.RichTextBox.OnContentsResized(System.Windows.Forms.ContentsResizedEventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.RichTextBox.OnContentsResized(System.Windows.Forms.ContentsResizedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.ContentsResized" />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuChanged">
      <MemberSignature Language="C#" Value="protected override void OnContextMenuChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContextMenuChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnContextMenuChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnContextMenuChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnContextMenuChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnContextMenuChanged : EventArgs -&gt; unit" Usage="richTextBox.OnContextMenuChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.ContextMenuChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="richTextBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.HandleCreated" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="richTextBox.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.HandleDestroyed" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHScroll">
      <MemberSignature Language="C#" Value="protected virtual void OnHScroll (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHScroll(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnHScroll(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHScroll (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHScroll(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnHScroll : EventArgs -&gt; unit&#xA;override this.OnHScroll : EventArgs -&gt; unit" Usage="richTextBox.OnHScroll e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.RichTextBox.HScroll" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.RichTextBox.OnHScroll%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.RichTextBox.OnHScroll(System.EventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.RichTextBox.OnHScroll(System.EventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.HScroll" />
      </Docs>
    </Member>
    <Member MemberName="OnImeChange">
      <MemberSignature Language="C#" Value="protected virtual void OnImeChange (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnImeChange(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnImeChange(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnImeChange (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnImeChange(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnImeChange : EventArgs -&gt; unit&#xA;override this.OnImeChange : EventArgs -&gt; unit" Usage="richTextBox.OnImeChange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.RichTextBox.ImeChange" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.RichTextBox.OnImeChange%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.RichTextBox.OnImeChange(System.EventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.RichTextBox.OnImeChange(System.EventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.ImeChange" />
      </Docs>
    </Member>
    <Member MemberName="OnLinkClicked">
      <MemberSignature Language="C#" Value="protected virtual void OnLinkClicked (System.Windows.Forms.LinkClickedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLinkClicked(class System.Windows.Forms.LinkClickedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnLinkClicked(System.Windows.Forms.LinkClickedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLinkClicked (e As LinkClickedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLinkClicked(System::Windows::Forms::LinkClickedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLinkClicked : System.Windows.Forms.LinkClickedEventArgs -&gt; unit&#xA;override this.OnLinkClicked : System.Windows.Forms.LinkClickedEventArgs -&gt; unit" Usage="richTextBox.OnLinkClicked e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LinkClickedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.LinkClickedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.RichTextBox.LinkClicked" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.RichTextBox.OnLinkClicked%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.RichTextBox.OnLinkClicked(System.Windows.Forms.LinkClickedEventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.RichTextBox.OnLinkClicked(System.Windows.Forms.LinkClickedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.LinkClicked" />
      </Docs>
    </Member>
    <Member MemberName="OnProtected">
      <MemberSignature Language="C#" Value="protected virtual void OnProtected (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnProtected(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnProtected(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnProtected (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnProtected(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnProtected : EventArgs -&gt; unit&#xA;override this.OnProtected : EventArgs -&gt; unit" Usage="richTextBox.OnProtected e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.RichTextBox.Protected" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.RichTextBox.OnProtected%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.RichTextBox.OnProtected(System.EventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.RichTextBox.OnProtected(System.EventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.Protected" />
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected override void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnRightToLeftChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnRightToLeftChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnRightToLeftChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnRightToLeftChanged : EventArgs -&gt; unit" Usage="richTextBox.OnRightToLeftChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnSelectionChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectionChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectionChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelectionChanged : EventArgs -&gt; unit&#xA;override this.OnSelectionChanged : EventArgs -&gt; unit" Usage="richTextBox.OnSelectionChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.RichTextBox.SelectionChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.RichTextBox.OnSelectionChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.RichTextBox.OnSelectionChanged(System.EventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.RichTextBox.OnSelectionChanged(System.EventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.SelectionChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected override void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSystemColorsChanged : EventArgs -&gt; unit" Usage="richTextBox.OnSystemColorsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextChanged : EventArgs -&gt; unit" Usage="richTextBox.OnTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVScroll">
      <MemberSignature Language="C#" Value="protected virtual void OnVScroll (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVScroll(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnVScroll(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVScroll (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVScroll(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnVScroll : EventArgs -&gt; unit&#xA;override this.OnVScroll : EventArgs -&gt; unit" Usage="richTextBox.OnVScroll e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.RichTextBox.VScroll" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.RichTextBox.OnVScroll%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.RichTextBox.OnVScroll(System.EventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.RichTextBox.OnVScroll(System.EventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.VScroll" />
      </Docs>
    </Member>
    <Member MemberName="Paste">
      <MemberSignature Language="C#" Value="public void Paste (System.Windows.Forms.DataFormats.Format clipFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Paste(class System.Windows.Forms.DataFormats/Format clipFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Paste(System.Windows.Forms.DataFormats.Format)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Paste (clipFormat As DataFormats.Format)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Paste(System::Windows::Forms::DataFormats::Format ^ clipFormat);" />
      <MemberSignature Language="F#" Value="override this.Paste : System.Windows.Forms.DataFormats.Format -&gt; unit" Usage="richTextBox.Paste clipFormat" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clipFormat" Type="System.Windows.Forms.DataFormats+Format" />
      </Parameters>
      <Docs>
        <param name="clipFormat">Das Zwischenablageformat, in dem die Daten aus der Zwischenablage abgerufen werden sollen.</param>
        <summary>Fügt den Inhalt der Zwischenablage in das angegebene Zwischenablageformat ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Methode verwenden, zum Einfügen von Daten aus der Zwischenablage in das Steuerelement. Diese Version von der <xref:System.Windows.Forms.RichTextBox.Paste%2A> unterscheidet sich von der <xref:System.Windows.Forms.TextBoxBase.Paste%2A?displayProperty=nameWithType> -Methode können Sie nur-Text in einem angegebenen Zwischenablageformat einzufügen. Sie können die <xref:System.Windows.Forms.RichTextBox.CanPaste%2A> Methode, um zu bestimmen, ob die Daten in der Zwischenablage in das angegebene Zwischenablageformat. Sie können dann diese Version von Aufrufen der <xref:System.Windows.Forms.RichTextBox.Paste%2A> Methode, um sicherzustellen, dass die Einfügen-Vorgang mit das entsprechende Datenformat hergestellt wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.RichTextBox.Paste%2A> Methode zum Einfügen einer Bitmap in der <xref:System.Windows.Forms.RichTextBox> Steuerelement. Nach dem Öffnen einer Bitmaps aus der Datei, die im Beispiel wird die <xref:System.Windows.Forms.Clipboard.SetDataObject%2A> Methode, um die Bitmap in die Windows-Zwischenablage zu kopieren. Abschließend ruft der Beispiel ab, das Format für die <xref:System.Drawing.Bitmap> Objekt, stellt sicher, dass das Format in eingefügt werden kann die <xref:System.Windows.Forms.RichTextBox> -Steuerelement, und verwendet die <xref:System.Windows.Forms.RichTextBox.Paste%2A> Methode, um die Daten einzufügen.  
  
 [!code-cpp[RichText_Paste#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichText_Paste/CPP/form1.cpp#1)]
 [!code-csharp[RichText_Paste#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichText_Paste/CS/form1.cs#1)]
 [!code-vb[RichText_Paste#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichText_Paste/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Lesen aus der Zwischenablage. Zugeordnete Enumeration: die <see langword="AllClipboard" /> Wert <see cref="T:System.Security.Permissions.UIPermissionClipboard" />.</permission>
        <altmember cref="M:System.Windows.Forms.RichTextBox.CanPaste(System.Windows.Forms.DataFormats.Format)" />
        <altmember cref="M:System.Windows.Forms.TextBoxBase.Paste" />
        <altmember cref="T:System.Windows.Forms.DataFormats.Format" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message m, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; m, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef m As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % m, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool" Usage="richTextBox.ProcessCmdKey (m, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="m">Eine als Verweis übergebene <see cref="T:System.Windows.Forms.Message" />, die die zu verarbeitende Fenstermeldung darstellt.</param>
        <param name="keyData">Einer der <see cref="T:System.Windows.Forms.Keys" />-Werte, die die zu verarbeitende Taste darstellen.</param>
        <summary>Verarbeitet eine Befehlstaste.</summary>
        <returns>
          <see langword="true" />, wenn das Zeichen vom Steuerelement verarbeitet wurde, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="Protected">
      <MemberSignature Language="C#" Value="public event EventHandler Protected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Protected" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.Protected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Protected As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Protected;" />
      <MemberSignature Language="F#" Value="member this.Protected : EventHandler " Usage="member this.Protected : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn Benutzer versuchen, geschützten Text im Steuerelement zu ändern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können einen Ereignishandler für dieses Ereignis erstellen, in Ihren Anwendungen zu ermitteln, wann der Benutzer versucht hat, um Text zu ändern, die als das Steuerelement geschützt markiert wurde. Der Ereignishandler kann verwendet werden, zu benachrichtigen, dass der Benutzer, den der Text der Benutzer versucht, so ändern Sie geschützt ist oder ein Dialogfeld angezeigt, die dem Benutzer ermöglicht, die der Text entsprechend ändern. Wenn der geschützte Bereich ein Datum ist, können Sie z. B. ein Dialogfeld anzeigen, die es ermöglicht den Benutzer ein Datum auswählen, die Sie dann auf den Text des Steuerelements angewendet werden können.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Nutzen von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Da die  Klasse erbt von , Sie können diese Eigenschaft auch verwenden, wenn die  eines Formulars zugeordnet ist. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.RichTextBox.Protected> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.RichTextBox> mit dem Namen `RichTextBox1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.RichTextBox.Protected> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#543](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#543)]
 [!code-vb[System.Windows.Forms.EventExamples#543](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#543)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.Forms.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.Forms.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Dieses Ereignis ist für diese Klasse nicht relevant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Redo">
      <MemberSignature Language="C#" Value="public void Redo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Redo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Redo" />
      <MemberSignature Language="VB.NET" Value="Public Sub Redo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Redo();" />
      <MemberSignature Language="F#" Value="member this.Redo : unit -&gt; unit" Usage="richTextBox.Redo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wendet die Operation, die im Steuerelement zuletzt rückgängig gemacht wurde, erneut an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anschließend können Sie die <xref:System.Windows.Forms.RichTextBox.Redo%2A> Methode, um die letzte Rückgängig-Vorgang für das Steuerelement erneut anwenden. Die <xref:System.Windows.Forms.RichTextBox.CanRedo%2A> Methode können Sie bestimmen, ob es sich bei der letzte Vorgang rückgängig wurde für das Steuerelement wiederhergestellt werden kann.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.RichTextBox.CanRedo%2A> und <xref:System.Windows.Forms.RichTextBox.RedoActionName%2A> Eigenschaften, und die <xref:System.Windows.Forms.RichTextBox.Redo%2A> Methode, um einen Wiederholen-Vorgang auf eine beliebige Aktion mit Ausnahme von Text zu beschränken. Dieses Beispiel erfordert, dass Sie verfügen über ein Formular mit einem <xref:System.Windows.Forms.RichTextBox> -Steuerelement und die einen Vorgang in der <xref:System.Windows.Forms.RichTextBox> ausgeführt wurde und rückgängig gemacht werden, bevor der Code in diesem Beispiel aufgerufen wird.  
  
 [!code-cpp[RichTextBox.RedoAction#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.RedoAction/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.RedoAction#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.RedoAction/CS/form1.cs#1)]
 [!code-vb[RichTextBox.RedoAction#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.RedoAction/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.CanRedo" />
      </Docs>
    </Member>
    <Member MemberName="RedoActionName">
      <MemberSignature Language="C#" Value="public string RedoActionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RedoActionName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.RedoActionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RedoActionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RedoActionName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RedoActionName : string" Usage="System.Windows.Forms.RichTextBox.RedoActionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Aktion ab, die bei Aufruf der <see cref="M:System.Windows.Forms.RichTextBox.Redo" />-Methode erneut auf das Steuerelement angewendet werden kann.</summary>
        <value>Eine Zeichenfolge, die den Namen der Aktion darstellt, die bei Aufruf der <see cref="M:System.Windows.Forms.RichTextBox.Redo" />-Methode ausgeführt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft eine leere Zeichenfolge zurückgegeben (""), es wird kein Vorgang zur Verfügung, auf das Steuerelement erneut anzuwenden. Sie können diese Methode verwenden, um zu bestimmen, die letzte Aktion rückgängig gemacht werden, der <xref:System.Windows.Forms.RichTextBox> -Steuerelement, das an das Steuerelement, wenn ein Aufruf von klicken Sie dann erneut angewendet werden kann die <xref:System.Windows.Forms.RichTextBox.Redo%2A> Methode erfolgt. Sie können bestimmen Sie, ob alle Vorgänge, für das Steuerelement wiederhergestellt werden, mithilfe der <xref:System.Windows.Forms.RichTextBox.CanRedo%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.RichTextBox.CanRedo%2A> und <xref:System.Windows.Forms.RichTextBox.RedoActionName%2A> Eigenschaften, und die <xref:System.Windows.Forms.RichTextBox.Redo%2A> Methode, um einen Wiederholen-Vorgang auf eine beliebige Aktion mit Ausnahme von Text zu beschränken. Dieses Beispiel erfordert, dass Sie verfügen über ein Formular mit einem <xref:System.Windows.Forms.RichTextBox> -Steuerelement und die einen Vorgang in der <xref:System.Windows.Forms.RichTextBox> ausgeführt wurde und rückgängig gemacht werden, bevor der Code in diesem Beispiel aufgerufen wird.  
  
 [!code-cpp[RichTextBox.RedoAction#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.RedoAction/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.RedoAction#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.RedoAction/CS/form1.cs#1)]
 [!code-vb[RichTextBox.RedoAction#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.RedoAction/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.CanRedo" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.Redo" />
      </Docs>
    </Member>
    <Member MemberName="RichTextShortcutsEnabled">
      <MemberSignature Language="C#" Value="public bool RichTextShortcutsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RichTextShortcutsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.RichTextShortcutsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property RichTextShortcutsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RichTextShortcutsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RichTextShortcutsEnabled : bool with get, set" Usage="System.Windows.Forms.RichTextBox.RichTextShortcutsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ist für diese Klasse nicht relevant.</summary>
        <value>
          <see langword="true" />, wenn Tastenkombinationen aktiviert wurden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightMargin">
      <MemberSignature Language="C#" Value="public int RightMargin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RightMargin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.RightMargin" />
      <MemberSignature Language="VB.NET" Value="Public Property RightMargin As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RightMargin { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.RightMargin : int with get, set" Usage="System.Windows.Forms.RichTextBox.RightMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Größe einer einzelnen Textzeile im <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement ab oder legt diese fest.</summary>
        <value>Die Größe einer einzelnen Textzeile im Steuerelement in Pixel. Der Standardwert ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Wert größer als 0 (null) in das Steuerelement eingegeben wird, wird ein nicht sichtbares Rand in das Steuerelement an die angegebene Anzahl von Pixeln von der linken Seite des Steuerelements eingefügt. Jeder Text, der eingegeben wird, die über diesen Rand hinausgeht, wird in der nächsten Zeile des Texts im Steuerelement platziert. Diese Eigenschaft wirkt sich auf alle derzeit eingegebenem Text in das Steuerelement sowie zusätzlichen Text in das Steuerelement eingegeben werden, nachdem die Eigenschaft festgelegt ist. Sie können diese Eigenschaft verwenden, eine maximale Linienstärke für den gesamten in eingegebenen Text an einer <xref:System.Windows.Forms.RichTextBox> Steuerelement.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Windows.Forms.RichTextBox> , die Text wird vergrößert, Wörter im Text des Steuerelements automatisch ausgewählt, wenn ein Wort doppelgeklickt wird, und verfügt über einen Rand auf der rechten Seite des Clientbereichs des Steuerelements. Wenn die <xref:System.Windows.Forms.RichTextBox> Steuerelement verfügt über eine kleine Breite mit dem folgenden Code erstellt eine <xref:System.Windows.Forms.RichTextBox> , in dem jedes Zeichen des Texts in einer eigenen Zeile angezeigt wird. In dieser Position vertikale Anzeige wird durch Klicken auf einen beliebigen Teil eines Worts alle Zeichen des Worts unabhängig von der Tatsache wählen, dass der Text vertikal angezeigt wird. Dieses Beispiel erfordert, dass Sie verfügen über ein Formular mit einem <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1`.  
  
 [!code-cpp[RichTextBox.ZoomFactor#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.ZoomFactor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CS/form1.cs#1)]
 [!code-vb[RichTextBox.ZoomFactor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.ZoomFactor/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der angegebene Wert ist kleiner als 0 (null).</exception>
      </Docs>
    </Member>
    <Member MemberName="Rtf">
      <MemberSignature Language="C#" Value="public string Rtf { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Rtf" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.Rtf" />
      <MemberSignature Language="VB.NET" Value="Public Property Rtf As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Rtf { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Rtf : string with get, set" Usage="System.Windows.Forms.RichTextBox.Rtf" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Text des <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelements ab, einschließlich aller RTF-Codes (Rich Text Format), oder legt diesen fest.</summary>
        <value>Der Text des Steuerelements im RTF-Format.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Eigenschaft auf die RTF-formatierten Text direkt in das Steuerelement verwenden, für die Anzeige oder den Text des Steuerelements zu extrahieren, mit der angegebenen RTF-Formatierung in den Text des Steuerelements definiert. Diese Eigenschaft wird normalerweise verwendet, wenn RTF-Text aus einer anderen RTF-Quelle, z. B. Microsoft Word oder Windows-WordPad, auf das Steuerelement zugewiesen sind.  
  
 Wenn Sie ändern die <xref:System.Windows.Forms.Control.RightToLeft%2A> -Eigenschaft zur Laufzeit nur Text ohne Formatierung wird beibehalten.  
  
 RTF-Codes finden Sie unter "rich-Text-format (RTF)-Spezifikation, Version 1.6" in der MSDN Library unter http://msdn.microsoft.com/library.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Text" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SaveFile">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Speichert den Inhalt der <see cref="T:System.Windows.Forms.RichTextBox" /> in einer Datei.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SaveFile">
      <MemberSignature Language="C#" Value="public void SaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SaveFile : string -&gt; unit" Usage="richTextBox.SaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der Name und Speicherort der zu speichernden Datei.</param>
        <summary>Speichert den Inhalt der <see cref="T:System.Windows.Forms.RichTextBox" /> in einer RTF-Datei (Rich Text Format).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> Methode können Sie den gesamten Inhalt des Steuerelements in einer RTF-Datei zu speichern, die von anderen Programmen wie Microsoft Word und Windows-WordPad verwendet werden können. Der Dateiname wird übergeben die `path` Parameter an das angegebene Verzeichnis bereits vorhanden ist, wird die Datei ohne vorherige Ankündigung überschrieben. Sie können die <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode beim Laden des Inhalts einer Datei in die <xref:System.Windows.Forms.RichTextBox>.  
  
> [!NOTE]
>  Um den Inhalt des Steuerelements in einen anderen Typ von Dateiformat z. B. ASCII-Text speichern möchten, verwenden Sie andere Versionen dieser Methode, die akzeptieren einen Wert aus der <xref:System.Windows.Forms.RichTextBoxStreamType> -Enumeration als Parameter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird speichert den Inhalt von einem <xref:System.Windows.Forms.RichTextBox> Steuerelement in einer RTF-Datei. Im Beispiel wird die <xref:System.Windows.Forms.SaveFileDialog> Klasse zum Anzeigen eines Dialogfelds aus dem Benutzer, der Pfad und Dateiname der Datei anfordern, um zu speichern. Der Code speichert dann die Datei, vorausgesetzt, dass der Inhalt im rich-Text-Format ist. Wenn die Datei bereits vorhanden ist, wird sie automatisch überschrieben. Dieses Beispiel erfordert, dass der Code sich in befindet einem <xref:System.Windows.Forms.Form> -Klasse, verfügt eine <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.SaveFile Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.SaveFile Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.SaveFile Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.SaveFile Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.SaveFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.SaveFile Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Beim Speichern des Inhalts des Steuerelements in einer Datei ist ein Fehler aufgetreten.</exception>
        <altmember cref="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SaveFile">
      <MemberSignature Language="C#" Value="public void SaveFile (System.IO.Stream data, System.Windows.Forms.RichTextBoxStreamType fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveFile(class System.IO.Stream data, valuetype System.Windows.Forms.RichTextBoxStreamType fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.SaveFile(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveFile (data As Stream, fileType As RichTextBoxStreamType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveFile(System::IO::Stream ^ data, System::Windows::Forms::RichTextBoxStreamType fileType);" />
      <MemberSignature Language="F#" Value="member this.SaveFile : System.IO.Stream * System.Windows.Forms.RichTextBoxStreamType -&gt; unit" Usage="richTextBox.SaveFile (data, fileType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" />
        <Parameter Name="fileType" Type="System.Windows.Forms.RichTextBoxStreamType" />
      </Parameters>
      <Docs>
        <param name="data">Der Datenstream, der die Datei enthält, in der gespeichert werden soll.</param>
        <param name="fileType">Einer der <see cref="T:System.Windows.Forms.RichTextBoxStreamType" />-Werte.</param>
        <summary>Speichert den Inhalt eines <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelements in einem geöffneten Datenstream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Version von der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> Methode können Sie den gesamten Inhalt des Steuerelements auf den Datenstrom zu speichern, die bereits geöffnet ist. Der Datenstrom kann dann die Informationen in einer Datei speichern. Sie können die <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode beim Laden des Inhalts einer Datei in die <xref:System.Windows.Forms.RichTextBox>.  
  
 Diese Version von der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> -Methode können Sie ein Datenformat der Informationen an, die an gesendet wird, auch die <xref:System.IO.Stream> Objekt.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> und <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methoden mit Datenströmen. Außerdem wird das Verwenden der <xref:System.Windows.Forms.FileDialog.FileName%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>, und <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> Member.  
  
 Dies ist ein vollständiges Beispiel, das ausgeführt werden, wenn Sie es in Ihr Projekt kopieren kann.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Im <paramref name="fileType" />-Parameter wurde ein ungültiger Dateityp angegeben.</exception>
        <exception cref="T:System.IO.IOException">Beim Speichern des Inhalts des Steuerelements in einer Datei ist ein Fehler aufgetreten.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">zum Erstellen oder Ändern einer Datei. Zugeordnete Enumeration: die <see langword="Write" /> Wert <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</permission>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)" />
        <altmember cref="T:System.Windows.Forms.RichTextBoxStreamType" />
      </Docs>
    </Member>
    <Member MemberName="SaveFile">
      <MemberSignature Language="C#" Value="public void SaveFile (string path, System.Windows.Forms.RichTextBoxStreamType fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveFile(string path, valuetype System.Windows.Forms.RichTextBoxStreamType fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.SaveFile(System.String,System.Windows.Forms.RichTextBoxStreamType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveFile (path As String, fileType As RichTextBoxStreamType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveFile(System::String ^ path, System::Windows::Forms::RichTextBoxStreamType fileType);" />
      <MemberSignature Language="F#" Value="member this.SaveFile : string * System.Windows.Forms.RichTextBoxStreamType -&gt; unit" Usage="richTextBox.SaveFile (path, fileType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="fileType" Type="System.Windows.Forms.RichTextBoxStreamType" />
      </Parameters>
      <Docs>
        <param name="path">Der Name und Speicherort der zu speichernden Datei.</param>
        <param name="fileType">Einer der <see cref="T:System.Windows.Forms.RichTextBoxStreamType" />-Werte.</param>
        <summary>Speichert den Inhalt der <see cref="T:System.Windows.Forms.RichTextBox" /> in einem bestimmten Dateiformat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> Methode können Sie den gesamten Inhalt des Steuerelements in einer RTF-Datei zu speichern, die von anderen Programmen wie Microsoft Word und Windows-WordPad verwendet werden können. Der Dateiname wird übergeben die `path` Parameter an das angegebene Verzeichnis bereits vorhanden ist, wird die Datei ohne vorherige Ankündigung überschrieben. Sie können die <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> Methode beim Laden des Inhalts einer Datei in die <xref:System.Windows.Forms.RichTextBox>.  
  
 Diese Version von der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> Methode ermöglicht Ihnen die Angabe für einen Dateityp aus, um den Inhalt des Steuerelements zu speichern. Sie können diese Funktion verwenden, um sicherzustellen, dass die Datei in das richtige Format auf Basis der Inhalte des Steuerelements gespeichert wird. Beispielsweise verfügt das Dokument keine Unterschiede in die Schriftart oder Farbe, Sie können die Datei speichern als ASCII-Textdatei durch Festlegen der `fileType` Parameter `RichTextBoxStreamType.PlainText`.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird speichert den Inhalt der <xref:System.Windows.Forms.RichTextBox> in eine ASCII-Textdatei. Im Beispiel wird die <xref:System.Windows.Forms.SaveFileDialog> Klasse zum Anzeigen eines Dialogfelds, um den Pfad und Dateinamen ein vom Benutzer anfordern. Der Code speichert dann den Inhalt des Steuerelements auf die Datei an. Im Beispiel wird diese Version von der <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> Methode, um anzugeben, dass die Datei als ASCII-Textdatei statt mit dem standard-rich-Text-Format gespeichert werden. Dieses Beispiel erfordert, dass der Code sich in befindet einem <xref:System.Windows.Forms.Form> -Klasse, verfügt eine <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.SaveFile1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.SaveFile1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.SaveFile1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.SaveFile1 Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.SaveFile1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.SaveFile1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Im <paramref name="fileType" />-Parameter wurde ein ungültiger Dateityp angegeben.</exception>
        <exception cref="T:System.IO.IOException">Beim Speichern des Inhalts des Steuerelements in einer Datei ist ein Fehler aufgetreten.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">zum Erstellen oder Ändern einer Datei. Zugeordnete Enumeration: die <see langword="Write" /> Wert <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</permission>
        <altmember cref="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)" />
        <altmember cref="T:System.Windows.Forms.RichTextBoxStreamType" />
      </Docs>
    </Member>
    <Member MemberName="ScrollBars">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.RichTextBoxScrollBars ScrollBars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RichTextBoxScrollBars ScrollBars" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.ScrollBars" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollBars As RichTextBoxScrollBars" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::RichTextBoxScrollBars ScrollBars { System::Windows::Forms::RichTextBoxScrollBars get(); void set(System::Windows::Forms::RichTextBoxScrollBars value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollBars : System.Windows.Forms.RichTextBoxScrollBars with get, set" Usage="System.Windows.Forms.RichTextBox.ScrollBars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RichTextBoxScrollBars</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ der im <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement anzuzeigenden Schiebeleisten ab oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.RichTextBoxScrollBars" />-Werte. Der Standardwert ist <see langword="RichTextBoxScrollBars.Both" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Eigenschaft können Sie horizontale und vertikale Scrollleisten für den Benutzer des Bereitstellen der <xref:System.Windows.Forms.RichTextBox> Steuerelement, um Lauftext innerhalb des Steuerelements zu ermöglichen, die außerhalb der physischen Abmessungen des Steuerelements ist. Diese Eigenschaft können auch einschränken, scrollen den Inhalt des Steuerelements das Steuerelement Bildlaufleisten aufheben.  
  
> [!NOTE]
>  Horizontale Scrollleisten werden nicht angezeigt werden Wenn die <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> ist `true`, unabhängig vom Wert von der <xref:System.Windows.Forms.RichTextBox.ScrollBars%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der angegebene Wert ist nicht in der <see cref="T:System.Windows.Forms.RichTextBoxScrollBars" />-Enumeration definiert.</exception>
        <altmember cref="T:System.Windows.Forms.RichTextBoxScrollBars" />
      </Docs>
    </Member>
    <Member MemberName="SelectedRtf">
      <MemberSignature Language="C#" Value="public string SelectedRtf { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedRtf" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectedRtf" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedRtf As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectedRtf { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedRtf : string with get, set" Usage="System.Windows.Forms.RichTextBox.SelectedRtf" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den derzeit markierten Text des Steuerelements im RTF-Format (Rich Text Format) ab oder legt diesen fest.</summary>
        <value>Der markierte Text des Steuerelements im RTF-Format.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft können Sie den markierten Text im Steuerelement, einschließlich der RTF-Formatierungscodes zu erhalten. Sie können diese Eigenschaft verwenden, um Text über das Steuerelement zu kopieren, komplett mit Formatierung, und fügen Sie der Text in anderen Anwendungen, die vom RTF-ins akzeptieren formatierten Text, z. B. Microsoft Word und Windows-WordPad. Um den ausgewählten Text ohne RTF-Formatierungscodes abzurufen, verwenden die <xref:System.Windows.Forms.TextBoxBase.SelectedText%2A> Eigenschaft.  
  
 Wenn derzeit kein Text ausgewählt ist, wird der Text, der in dieser Eigenschaft angegebene an der Einfügemarke eingefügt. Wenn Text markiert ist, ersetzt dieser Eigenschaft zugewiesene Text den markierten Text.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.Rtf" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.SelectedText" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Text" />
      </Docs>
    </Member>
    <Member MemberName="SelectedText">
      <MemberSignature Language="C#" Value="public override string SelectedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectedText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SelectedText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedText : string with get, set" Usage="System.Windows.Forms.RichTextBox.SelectedText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den markierten Text in <see cref="T:System.Windows.Forms.RichTextBox" /> ab oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die den markierten Text im Steuerelement darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> Eigenschaft mit dem die <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A>, <xref:System.Windows.Forms.RichTextBox.SelectedText%2A>, und <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> Eigenschaften zum Erstellen einer Aufzählung in einem <xref:System.Windows.Forms.RichTextBox> Steuerelement. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1` in einem Formular erstellt wird.  
  
 [!code-cpp[RichTextBox.SelectionBullet#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionBullet/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionBullet#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionBullet/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionBullet#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionBullet/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment SelectionAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment SelectionAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment SelectionAlignment { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionAlignment : System.Windows.Forms.HorizontalAlignment with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die auf die aktuelle Auswahl oder Einfügemarke anzuwendende Ausrichtung ab oder legt diese fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.HorizontalAlignment" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn kein Absatz im Steuerelement ausgewählt ist, gilt das Festlegen dieser Eigenschaft Einstellung für die Ausrichtung für den Absatz, in dem die Einfügemarke ebenfalls angezeigt wird, Absätze, die nach den Absatz, der die Ausrichtung-eigenschafteneinstellung gibt es erstellt. Angenommen, es gibt zwei Absätze in einem <xref:System.Windows.Forms.RichTextBox> Steuerelement und die Einfügemarke befindet sich im zweiten Absatz. Setzen Sie die <xref:System.Windows.Forms.RichTextBox.SelectionAlignment%2A> Eigenschaft `HorizontalAlignment.Center`, der Absatz an der Einfügemarke wird innerhalb des Steuerelements zentriert. Wenn ein dritte Absatz nach dem zweiten Absatz erstellt wird, wird es auch in der Mitte des Steuerelements ausgerichtet.  
  
 Wenn Sie eine Auswahl innerhalb des Steuerelements erfolgt, wenn die Eigenschaft festgelegt ist, werden alle Absätze ausgewählt basierend auf der Einstellung dieser Eigenschaft ausgerichtet. Sie können diese Eigenschaft verwenden, der Anpassung an die Absätze in einem Dokument erstellt wird, der <xref:System.Windows.Forms.RichTextBox>. Beispielsweise sollten Sie alle Absätze in einem Dokument zentriert werden soll, Sie können alle Absätze im Steuerelement auswählen und Festlegen der <xref:System.Windows.Forms.RichTextBox.SelectionAlignment%2A> Eigenschaft `HorizontalAlignment.Center`.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.RichTextBox.SelectionAlignment%2A> Gibt `SelectionAlignment.Left` bei die Textauswahl enthält mehrere Absätze mit gemischten Ausrichtung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Text in Anpassung an die <xref:System.Windows.Forms.RichTextBox>. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.RichTextBox> Steuerelement, mit dem Namen `richTextBox1`, dem Formular hinzugefügt wurde.  
  
 [!code-cpp[RichTextBox.SelectionAlignment#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionAlignment/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionAlignment#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionAlignment/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionAlignment#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionAlignment/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der angegebene Wert ist keiner der in der <see cref="T:System.Windows.Forms.HorizontalAlignment" />-Klasse definierten Werte.</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
      </Docs>
    </Member>
    <Member MemberName="SelectionBackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color SelectionBackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color SelectionBackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionBackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color SelectionBackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionBackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Textfarbe ab oder legt die Textfarbe fest, die verwendet wird, wenn Text in einem <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement ausgewählt ist.</summary>
        <value>Eine <see cref="T:System.Drawing.Color" />, die die Textfarbe darstellt, wenn der Text ausgewählt wird. Der Standardwert ist der Wert der <see cref="P:System.Windows.Forms.Control.DefaultBackColor" />-Eigenschaft.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwendung <xref:System.Windows.Forms.RichTextBox.SelectionBackColor%2A> zum Abrufen oder Festlegen der Farbe des markierten Texts in der <xref:System.Windows.Forms.RichTextBox>. Wenn derzeit kein Text ausgewählt ist, die <xref:System.Windows.Forms.RichTextBox.SelectionBackColor%2A> Eigenschaft gilt für die aktuelle Position der Einfügemarke. Zeichen, die von dieser Position eingegeben werden, haben den angegebenen <xref:System.Windows.Forms.RichTextBox.SelectionBackColor%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionBullet">
      <MemberSignature Language="C#" Value="public bool SelectionBullet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SelectionBullet" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionBullet" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionBullet As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SelectionBullet { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionBullet : bool with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionBullet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Aufzählungssymbolstil auf die aktuelle Auswahl oder Einfügemarke angewendet wird, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn der Aufzählungssymbolstil auf die aktuelle Auswahl oder Einfügemarke angewendet wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn kein Text ausgewählt ist, gilt der Aufzählungssymbolstil auf der aktuellen Einfügemarke und auf alle Absätze, die der Benutzer nach der Einfügemarke eingegeben hat. Der Aufzählungssymbolstil ist auf den Text des Steuerelements angewendet, bis die Einfügemarke verschoben wird, oder wenn der Benutzer auf ein leeres Aufzählungselement die EINGABETASTE drückt.  
  
 Wenn Text im Steuerelement ausgewählt ist, wenn diese Eigenschaft festgelegt ist, werden alle Absätze innerhalb des ausgewählten Texts in gegliederten Elemente in der Aufzählung konvertiert. Sie können diese Eigenschaft verwenden, um Listen mit Aufzählungszeichen innerhalb der Dokumente zu erstellen, Sie in erstellen, der <xref:System.Windows.Forms.RichTextBox> Steuerelement.  
  
 Die <xref:System.Windows.Forms.RichTextBox.BulletIndent%2A> Eigenschaft können Sie die Größe des Einzugs zwischen Aufzählungszeichen und Listen mit Aufzählungszeichen der Text des Elements anzugeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> Eigenschaft mit dem die <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A>, <xref:System.Windows.Forms.RichTextBox.SelectedText%2A>, und <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> Eigenschaften zum Erstellen einer Aufzählung in einem <xref:System.Windows.Forms.RichTextBox> Steuerelement. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1` in einem Formular erstellt wird.  
  
 [!code-cpp[RichTextBox.SelectionBullet#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionBullet/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionBullet#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionBullet/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionBullet#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionBullet/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.BulletIndent" />
      </Docs>
    </Member>
    <Member MemberName="SelectionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.SelectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectionChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectionChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectionChanged : EventHandler " Usage="member this.SelectionChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich die Textauswahl im Steuerelement geändert hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können einen Ereignishandler für dieses Ereignis, um zu ermitteln, wann der Benutzer die Textauswahl im Steuerelement geändert wurde, erstellen. Ein Handler für dieses Ereignis kann Text, der erst nach einer Aufgabe in der Anwendung der Benutzer Abschluss ausgewählt lassen, verwendet werden.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Nutzen von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Da die  Klasse erbt von , Sie können diese Eigenschaft auch verwenden, wenn die  eines Formulars zugeordnet ist. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.RichTextBox.SelectionChanged> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.RichTextBox> mit dem Namen `RichTextBox1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.RichTextBox.SelectionChanged> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#544](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#544)]
 [!code-vb[System.Windows.Forms.EventExamples#544](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#544)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionCharOffset">
      <MemberSignature Language="C#" Value="public int SelectionCharOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionCharOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionCharOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionCharOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectionCharOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionCharOffset : int with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionCharOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, ob der Text im Steuerelement auf der Baseline, hochgestellt oder tiefergestellt unterhalb der Basislinie angezeigt wird, oder legt diesen fest.</summary>
        <value>Eine Zahl, die den Zeichenversatz angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Eigenschaft muss zwischen-2000 und 2000 liegen.  
  
 Wenn diese Eigenschaft auf NULL festgelegt ist, wird der Text auf der Basislinie angezeigt. Wenn sie eine positive Zahl ist, gibt die Anzahl die Anzahl der Pixel, um die Textauswahl über den Grundwerten soll. Wenn es sich um eine negative Zahl ist, gibt diese Zahl die Anzahl der Pixel mit dem zu indizieren der Textauswahl. Sie können diese Eigenschaft verwenden, als hochgestellte oder tiefgestellte Text an.  
  
 Wenn kein Text ausgewählt ist, wird der Offset angewendet, um der aktuellen Einfügemarke und für den gesamten Text, der Benutzer nach der Einfügemarke eingegeben. Der Zeichenoffset wird angewendet, bis die Eigenschaft auf einen anderen Wert oder die Einfügemarke verschoben wird, in einen anderen Abschnitt innerhalb des Steuerelements geändert wird.  
  
 Wenn Text im Steuerelement ausgewählt ist, den ausgewählten Text und Text nach eingegebenen Textauswahl für den den Wert dieser Eigenschaft angewendet hat. Sie können diese Eigenschaft verwenden, hoch- und tiefgestellte Zeichen Text für solche Anwendungen als mathematische Ausdrücke zu erstellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Angeben von hoch- und tiefgestellte Zeichen von Text in die <xref:System.Windows.Forms.RichTextBox> mithilfe der <xref:System.Windows.Forms.RichTextBox.SelectionCharOffset%2A> Eigenschaft. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.RichTextBox> Steuerelement, mit dem Namen `richTextBox1`, dem Formular hinzugefügt wurde.  
  
 [!code-cpp[RichTextBox.SelectionCharOffset#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionCharOffset/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionCharOffset#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionCharOffset/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionCharOffset#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionCharOffset/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der angegebene Wert ist kleiner als -2000 oder größer als 2000.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectionColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color SelectionColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color SelectionColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionColor" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color SelectionColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Textfarbe der aktuellen Textauswahl oder der aktuellen Einfügemarke ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Color" />, die die Farbe darstellt, die auf die aktuelle Textauswahl oder auf den nach der Einfügemarke eingegebenen Text angewendet werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die aktuelle Textauswahl mehr als eine angegebene Farbe aufweist, gibt diese Eigenschaft `Color.Empty`. Wenn derzeit kein Text ausgewählt ist, wird die Textfarbe, die in dieser Eigenschaft angegebene angewendet, um der aktuellen Einfügemarke und für den gesamten Text, der in das Steuerelement nach der Einfügemarke eingegeben wird. Die Text Color-Einstellung wird angewendet, bis die Eigenschaft auf eine andere Farbe oder die Einfügemarke verschoben wird, in einen anderen Abschnitt innerhalb des Steuerelements geändert wird.  
  
 Wenn Text im Steuerelement ausgewählt ist, den ausgewählten Text und Text nach eingegebenen Textauswahl für den den Wert dieser Eigenschaft angewendet hat. Sie können diese Eigenschaft verwenden, zum Ändern der Farbe des Texts in der <xref:System.Windows.Forms.RichTextBox>.  
  
 Um Text im Steuerelement fett zu formatieren, verwenden Sie die <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A> Eigenschaft, um eine neue Schriftart zuweisen, die die fett formatierten Schriftschnitt angegeben ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine <xref:System.Windows.Forms.ColorDialog> point-in für den Benutzer eine Farbe für die aktuelle Textauswahl oder nach der aktuellen Einfügemarke eingegebenen Text an einer <xref:System.Windows.Forms.RichTextBox> Steuerelement. Dieses Beispiel erfordert, dass die Methode, die im Beispiel definierte hinzugefügt wird eine <xref:System.Windows.Forms.Form> Klasse enthält eine <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.SelectionColor Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.SelectionColor Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.SelectionColor Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.SelectionColor Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.SelectionColor Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.SelectionColor Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionFont" />
        <altmember cref="M:System.Windows.Forms.TextBoxBase.Select(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SelectionFont">
      <MemberSignature Language="C#" Value="public System.Drawing.Font SelectionFont { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font SelectionFont" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionFont" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionFont As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Font ^ SelectionFont { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionFont : System.Drawing.Font with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Schriftart der aktuellen Textauswahl oder Einfügemarke ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Drawing.Font" />, der die Schriftart darstellt, die auf die aktuelle Textauswahl oder auf den nach der Einfügemarke eingegebenen Text angewendet werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die aktuelle Textauswahl mehr als eine angegebene Schriftart verfügt, wird diese Eigenschaft ist `null`. Wenn derzeit kein Text ausgewählt ist, wird die Schriftart, die in dieser Eigenschaft angegebene angewendet, auf der aktuellen Einfügemarke und für den gesamten Text, der in das Steuerelement nach der Einfügemarke eingegeben wird. Die schriftarteinstellung gilt, bis die Eigenschaft geändert wird, an eine andere oder in einen anderen Abschnitt innerhalb des Steuerelements die Einfügemarke verschoben wird.  
  
 Wenn Text im Steuerelement ausgewählt ist, den ausgewählten Text und Text nach eingegebenen Textauswahl für den den Wert dieser Eigenschaft angewendet hat. Sie können diese Eigenschaft verwenden, so ändern Sie den Schriftschnitt des Texts in der <xref:System.Windows.Forms.RichTextBox>. Sie können den Text im Steuerelement vornehmen, fett, kursiv und unterstrichen. Sie können auch die Größe des Texts und der auf den Text angewendete Schriftart ändern.  
  
 Um die Farbe des Texts im Steuerelement zu ändern, verwenden die <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Codebeispiel ändert die aktuelle Einstellung fett formatierte Schriftart für die Textauswahl oder nach der Einfügemarke in eingegebenen Text die <xref:System.Windows.Forms.RichTextBox> Steuerelement. Dieses Beispiel erfordert, dass der Code sich in einer Methode in befindet einer <xref:System.Windows.Forms.Form>. Im Beispiel erfordert außerdem, dass eine <xref:System.Windows.Forms.RichTextBox>mit dem Namen `richTextBox1`, hinzugefügt wurde die <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic RichTextBox.SelectionFont Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.SelectionFont Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.SelectionFont Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.SelectionFont Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.SelectionFont Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.SelectionFont Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionColor" />
        <altmember cref="M:System.Windows.Forms.TextBoxBase.Select(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SelectionHangingIndent">
      <MemberSignature Language="C#" Value="public int SelectionHangingIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionHangingIndent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionHangingIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionHangingIndent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectionHangingIndent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionHangingIndent : int with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionHangingIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Abstand zwischen dem linken Rand der ersten Textzeile des markierten Absatzes und dem linken Rand nachfolgender Zeilen in demselben Absatz ab oder legt diesen fest.</summary>
        <value>Der Abstand für den hängenden Einzug, der auf die aktuelle Textauswahl oder Einfügemarke angewendet wird (in Pixel).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn derzeit kein Text ausgewählt ist, wird der hängenden Einzug angewendet, auf den Absatz, in dem die Einfügemarke angezeigt wird, und für den gesamten Text, der in das Steuerelement nach der Einfügemarke eingegeben wird. Die hängenden einzugseinstellung gilt bis auf die Eigenschaft auf einen anderen Wert oder die Einfügemarke verschoben wird, in einen anderen Abschnitt innerhalb des Steuerelements geändert wird.  
  
 Wenn Text im Steuerelement ausgewählt ist, den ausgewählten Text und Text nach eingegebenen Textauswahl für den den Wert dieser Eigenschaft angewendet hat. Sie können diese Eigenschaft verwenden, einen hängender Einzug auf Ihre Absätze anwenden.  
  
 Verwenden Sie zum Festlegen des Einzug der ersten Zeile des markierten Absatzes der <xref:System.Windows.Forms.RichTextBox.SelectionIndent%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie an hängenden Einzügen in die <xref:System.Windows.Forms.RichTextBox> mithilfe der <xref:System.Windows.Forms.RichTextBox.SelectionHangingIndent%2A> Eigenschaft. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.RichTextBox> Steuerelement, mit dem Namen `richTextBox1`, dem Formular hinzugefügt wurde.  
  
 [!code-cpp[RichTextBox.SelectionHangingIndent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionHangingIndent/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionHangingIndent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionHangingIndent/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionHangingIndent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionHangingIndent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionIndent" />
      </Docs>
    </Member>
    <Member MemberName="SelectionIndent">
      <MemberSignature Language="C#" Value="public int SelectionIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionIndent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionIndent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectionIndent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionIndent : int with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Für Abruf oder Festlegung der Länge (in Pixeln) des Einzugs der ersten Zeile der Auswahl.</summary>
        <value>Der aktuelle Abstand des Einzugs, der auf den linken Rand der aktuellen Textauswahl oder Einfügemarke angewendet wird, in Pixel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn derzeit kein Text ausgewählt ist, wird die Einstellung für den Einzug angewendet, auf den Absatz, in dem die Einfügemarke angezeigt wird, und für den gesamten Text, der in das Steuerelement nach der Einfügemarke eingegeben wird. Einstellung für den Einzug gilt, bis die Eigenschaft auf einen anderen Wert oder die Einfügemarke verschoben wird, in einen anderen Abschnitt innerhalb des Steuerelements geändert wird.  
  
 Wenn Text im Steuerelement ausgewählt ist, den ausgewählten Text und Text nach eingegebenen Textauswahl für den den Wert dieser Eigenschaft angewendet hat. Sie können diese Eigenschaft verwenden, für den Einzug der Absätze im Dokument enthalten die <xref:System.Windows.Forms.RichTextBox>. Sie können diese Eigenschaft in Verbindung mit der <xref:System.Windows.Forms.RichTextBox.SelectionRightIndent%2A> zum Erstellen von Absätzen in Abschnitten angezeigt.  
  
 Um ein hängender Einzug für Absätze im Steuerelement zu erstellen, verwenden die <xref:System.Windows.Forms.RichTextBox.SelectionHangingIndent%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Texteinzügen an die <xref:System.Windows.Forms.RichTextBox> mithilfe der <xref:System.Windows.Forms.RichTextBox.SelectionIndent%2A> Eigenschaft. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.RichTextBox> Steuerelement, mit dem Namen `richTextBox1`, dem Formular hinzugefügt wurde.  
  
 [!code-cpp[RichTextBox.SelectionIndent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionIndent/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionIndent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionIndent/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionIndent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionIndent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionRightIndent" />
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionHangingIndent" />
      </Docs>
    </Member>
    <Member MemberName="SelectionLength">
      <MemberSignature Language="C#" Value="public override int SelectionLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectionLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int SelectionLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionLength : int with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der im Steuerelement markierten Zeichen ab oder legt diese fest.</summary>
        <value>Die Anzahl der markierten Zeichen im Textfeld.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Eigenschaft verwenden, um festzustellen, ob alle Zeichen in das Textfeld-Steuerelement derzeit ausgewählt sind, vor dem Ausführen von Vorgängen für den ausgewählten Text. Sie können diese Eigenschaft auch verwenden, um die Gesamtanzahl von Zeichen (einschließlich Leerzeichen) zu bestimmen, die ausgewählt sind, bei Ausführung der einzelnes Zeichen in Aufgaben eine `for` Schleife.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.RichTextBox.SelectionLength%2A> Eigenschaft, um zu bestimmen, ob Text, in ausgewählt ist der <xref:System.Windows.Forms.RichTextBox>. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.RichTextBox> Steuerelement, mit dem Namen `richTextBox1`, dem Formular hinzugefügt wurde. Im Beispiel erfordert außerdem, dass `richTextBox1` enthält Text, der im Steuerelement ausgewählt ist.  
  
 [!code-cpp[RichTextBox.SelectionLength#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionLength/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionLength#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionLength/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionLength#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionLength/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.SelectionStart" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.SelectedText" />
      </Docs>
    </Member>
    <Member MemberName="SelectionProtected">
      <MemberSignature Language="C#" Value="public bool SelectionProtected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SelectionProtected" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionProtected" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionProtected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SelectionProtected { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionProtected : bool with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionProtected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die aktuelle Textauswahl geschützt ist, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die aktuelle Auswahl Änderungen am Inhalt verhindert, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn derzeit kein Text ausgewählt ist, wird der schutzeinstellung angewendet, auf den Absatz, in dem die Einfügemarke angezeigt wird, und für den gesamten Text, der in das Steuerelement nach der Einfügemarke eingegeben wird. Die Einstellung für den Schutz wird angewendet, bis die Eigenschaft auf einen anderen Wert oder die Einfügemarke verschoben wird, in einen anderen Abschnitt innerhalb des Steuerelements geändert wird.  
  
 Wenn Text im Steuerelement ausgewählt ist, den ausgewählten Text und Text nach eingegebenen Textauswahl für den den Wert dieser Eigenschaft angewendet hat. Sie können diese Eigenschaft verwenden, um zu verhindern, dass den Benutzer Textabschnitte innerhalb des Steuerelements zu ändern.  
  
 Wenn diese Eigenschaft, um festgelegt wird `true`, <xref:System.Windows.Forms.RichTextBox.Protected> Ereignis wird ausgelöst, wenn der Benutzer versucht, so ändern Sie die aktuelle Textauswahl.  
  
> [!NOTE]
>  Diese Eigenschaft gibt `true` nur, wenn die gesamte Auswahl innerhalb des Steuerelements auf geschützten Inhalte enthält.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie an geschützten Text innerhalb der <xref:System.Windows.Forms.RichTextBox> mithilfe der <xref:System.Windows.Forms.RichTextBox.SelectionProtected%2A> Eigenschaft. In diesem Beispiel erfordert, dass eine <xref:System.Windows.Forms.RichTextBox> Steuerelement, mit dem Namen `richTextBox1`, wurde hinzugefügt und das Formular die <xref:System.Windows.Forms.RichTextBox> Steuerelement verfügt über Text hinzugefügt wird, die das Wort "RichTextBox" enthält  
  
 [!code-cpp[RichTextBox.SelectionProtected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionProtected/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionProtected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionProtected/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionProtected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionProtected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.RichTextBox.Protected" />
      </Docs>
    </Member>
    <Member MemberName="SelectionRightIndent">
      <MemberSignature Language="C#" Value="public int SelectionRightIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionRightIndent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionRightIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionRightIndent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectionRightIndent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionRightIndent : int with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionRightIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Der Abstand zwischen dem rechten Rand des <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelements und dem rechten Rand des markierten oder an der aktuellen Einfügemarke hinzugefügten Texts in Pixel.</summary>
        <value>Die Größe des Einzugs am rechten Rand der aktuellen Auswahl oder Einfügemarke in Pixel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn derzeit kein Text ausgewählt ist, wird die Einstellung für den Einzug angewendet, auf den Absatz, in dem die Einfügemarke angezeigt wird, und für den gesamten Text, der in das Steuerelement nach der Einfügemarke eingegeben wird. Einstellung für den Einzug gilt, bis die Eigenschaft auf einen anderen Wert oder die Einfügemarke verschoben wird, in einen anderen Abschnitt innerhalb des Steuerelements geändert wird.  
  
 Wenn Text im Steuerelement ausgewählt ist, den ausgewählten Text und Text nach eingegebenen Textauswahl für den den Wert dieser Eigenschaft angewendet hat. Sie können diese Eigenschaft verwenden, für den Einzug der Absätze im Dokument enthalten die <xref:System.Windows.Forms.RichTextBox>. Sie können diese Eigenschaft in Verbindung mit der <xref:System.Windows.Forms.RichTextBox.SelectionIndent%2A> zum Erstellen von Absätzen in Abschnitten angezeigt.  
  
 Um ein hängender Einzug für Absätze im Steuerelement zu erstellen, verwenden die <xref:System.Windows.Forms.RichTextBox.SelectionHangingIndent%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen von des rechten Rands in einem <xref:System.Windows.Forms.RichTextBox> mithilfe der <xref:System.Windows.Forms.RichTextBox.SelectionRightIndent%2A> Eigenschaft. Das Beispiel erfordert, dass Sie verfügen über ein Formular mit einem <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1`, und, die der Beispielcode aus einem Ereignis in der Klasse des Formulars aufgerufen wird.  
  
 [!code-cpp[RichTextBox.SelectionRightIndent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionRightIndent/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionRightIndent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionRightIndent/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionRightIndent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionRightIndent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionTabs">
      <MemberSignature Language="C#" Value="public int[] SelectionTabs { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] SelectionTabs" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionTabs" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionTabs As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ SelectionTabs { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionTabs : int[] with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionTabs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die absoluten Positionen der Tabstopps in einem <see cref="T:System.Windows.Forms.RichTextBox" />-Steuerelement ab oder legt diese fest.</summary>
        <value>Ein Array, in dem jeder Member einen Tabstoppoffset in Pixel angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft können Sie ein Array zu erhalten, die den Abstand für jede Registerkarte in der aktuellen textmarkierung im enthält die <xref:System.Windows.Forms.RichTextBox> Steuerelement. Klicken Sie dann können Sie diese Eigenschaft verwenden, um die Größe der einzelnen Registerkarten in der Textauswahl anzupassen. Z. B. Wenn Sie den Tabstopp innerhalb des Dokuments anpassen möchten, Sie können wählen Sie das gesamte Dokument und Abrufen der Liste von Tabstopps, die mit der <xref:System.Windows.Forms.RichTextBox.SelectionTabs%2A> Eigenschaft. Sie können passen Sie sie mit neuen Werten und weisen Sie ihnen diese Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Das Array weist mehr als die maximal zulässigen 32 Elemente auf.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectionType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.RichTextBoxSelectionTypes SelectionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RichTextBoxSelectionTypes SelectionType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectionType As RichTextBoxSelectionTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::RichTextBoxSelectionTypes SelectionType { System::Windows::Forms::RichTextBoxSelectionTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectionType : System.Windows.Forms.RichTextBoxSelectionTypes" Usage="System.Windows.Forms.RichTextBox.SelectionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RichTextBoxSelectionTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Auswahltyp im Steuerelement ab.</summary>
        <value>Eine bitweise Kombination der <see cref="T:System.Windows.Forms.RichTextBoxSelectionTypes" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Eigenschaft verwenden, um den Typ der Daten zu bestimmen, die derzeit im Steuerelement ausgewählt ist, um die Auswahl ordnungsgemäß zu behandeln, beim Durchführen der Aufgaben innerhalb des Steuerelements für die aktuelle Auswahl. Die Darstellung der Eigenschaft kann eine beliebige Kombination von Werten aus der <xref:System.Windows.Forms.RichTextBoxSelectionTypes> Enumeration, die die vielen Arten von Objekten in der aktuellen Auswahl darstellt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectedRtf" />
      </Docs>
    </Member>
    <Member MemberName="ShowSelectionMargin">
      <MemberSignature Language="C#" Value="public bool ShowSelectionMargin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowSelectionMargin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.ShowSelectionMargin" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowSelectionMargin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowSelectionMargin { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowSelectionMargin : bool with get, set" Usage="System.Windows.Forms.RichTextBox.ShowSelectionMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob in der <see cref="T:System.Windows.Forms.RichTextBox" /> ein Auswahlrand angezeigt wird, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn ein Auswahlrand im Steuerelement aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Eigenschaft verwenden, um dem Benutzer ermöglichen, leicht Textzeilen im Auswählen der <xref:System.Windows.Forms.RichTextBox>. Der Auswahlrand hinzugefügt wird, klicken Sie auf der linken Seite des der <xref:System.Windows.Forms.RichTextBox>. Diesen Rand erleichtert es dem Benutzer die Auswahl von Text auf der linken Seite des Steuerelements ab. Der Benutzer klicken Sie auf im Auswahlrand, wählen Sie eine einzelne Textzeile oder doppelklicken Sie auf, um den gesamten Absatz auszuwählen, die in die Zeile, die per Doppelklick enthalten ist.  
  
> [!NOTE]
>  Wenn die <xref:System.Windows.Forms.RichTextBox.ShowSelectionMargin%2A> -Eigenschaftensatz auf `true`wird durch das Festlegen der <xref:System.Windows.Forms.RichTextBox.ScrollBars%2A> Eigenschaft `RichTextBoxScrollBars.Horizontal`, `RichTextBoxScrollBars.Vertical`, oder `RichTextBoxScrollBars.Both` führt nicht dazu, dass Bildlaufleisten angezeigt werden. Zum Anzeigen von Bildlaufleisten, während die <xref:System.Windows.Forms.RichTextBox.ShowSelectionMargin%2A> -Eigenschaftensatz auf `true`legen die <xref:System.Windows.Forms.RichTextBox.ScrollBars%2A> Eigenschaft `RichTextBoxScrollBars.ForcedHorizontal`, `RichTextBoxScrollBars.ForcedVertical`, oder `RichTextBoxScrollBars.ForcedBoth`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.RichTextBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aktuellen Text in der RichTextBox ab oder legt diesen fest.</summary>
        <value>Der im Steuerelement angezeigte Text.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Anzeigen von mehreren Textzeilen in eine <xref:System.Windows.Forms.RichTextBox>, legen die <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> Eigenschaft `true`. Verwenden Sie zum Lesen oder Festlegen des Texts von einem mehrzeiligen Textfeld, das <xref:System.Windows.Forms.TextBoxBase.Lines%2A> Eigenschaft. Die <xref:System.Windows.Forms.RichTextBox.Text%2A> Eigenschaft gibt keine Informationen über die Formatierung angewendet wird, auf den Inhalt des zurück der <xref:System.Windows.Forms.RichTextBox>. Um die RTF-Formatierungscodes (RTF) abzurufen, verwenden die <xref:System.Windows.Forms.RichTextBox.Rtf%2A> Eigenschaft. Die Größe des Texts, die in eingegeben werden, können die <xref:System.Windows.Forms.RichTextBox> Steuerelement wird nur durch den verfügbaren Arbeitsspeicher des Systems beschränkt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Lines" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public override int TextLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TextLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int" Usage="System.Windows.Forms.RichTextBox.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Länge des Texts im Steuerelement ab.</summary>
        <value>Die Anzahl der Zeichen im Text des Steuerelements.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
      </Docs>
    </Member>
    <Member MemberName="UndoActionName">
      <MemberSignature Language="C#" Value="public string UndoActionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UndoActionName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.UndoActionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UndoActionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UndoActionName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UndoActionName : string" Usage="System.Windows.Forms.RichTextBox.UndoActionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Aktion ab, die bei Aufruf der <see cref="M:System.Windows.Forms.TextBoxBase.Undo" />-Methode im Steuerelement rückgängig gemacht werden kann.</summary>
        <value>Der Textname der Aktion, die rückgängig gemacht werden kann.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft können Sie die letzte Aktion zu bestimmen, die innerhalb des Steuerelements durchgeführt wurde, die rückgängig gemacht werden kann. Sie können diese Eigenschaft verwenden, beschränken Sie die Vorgänge, die vom Benutzer des Steuerelements rückgängig zu machende Protokollumfang verfügbar sind.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.Undo" />
      </Docs>
    </Member>
    <Member MemberName="VScroll">
      <MemberSignature Language="C#" Value="public event EventHandler VScroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler VScroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.VScroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VScroll As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ VScroll;" />
      <MemberSignature Language="F#" Value="member this.VScroll : EventHandler " Usage="member this.VScroll : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer auf die vertikalen Schiebeleisten des Steuerelements klickt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Nutzen von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Da die  Klasse erbt von , Sie können diese Eigenschaft auch verwenden, wenn die  eines Formulars zugeordnet ist. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.RichTextBox.VScroll> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.RichTextBox> mit dem Namen `RichTextBox1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.RichTextBox.VScroll> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#545](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#545)]
 [!code-vb[System.Windows.Forms.EventExamples#545](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#545)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="richTextBox.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Ein Windows-Meldungsobjekt.</param>
        <summary>Verarbeitet Windows-Meldungen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomFactor">
      <MemberSignature Language="C#" Value="public float ZoomFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ZoomFactor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.ZoomFactor" />
      <MemberSignature Language="VB.NET" Value="Public Property ZoomFactor As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float ZoomFactor { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.ZoomFactor : single with get, set" Usage="System.Windows.Forms.RichTextBox.ZoomFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aktuellen Zoomfaktor der <see cref="T:System.Windows.Forms.RichTextBox" /> ab oder legt diesen fest.</summary>
        <value>Der Faktor, um den für den Inhalt des Steuerelements ein Zoom durchgeführt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Eigenschaft kann zwischen 1/64 (0,015625) und "64.0", nicht sein. Ein Wert von 1,0 gibt an, dass kein Zoom auf das Steuerelement angewendet wird. Die Zoomfunktion wird optimal ausgeführt, wenn das Dokument TrueType-Schriftarten enthält. Wenn eine die keine TrueType-Schriftart, innerhalb des Dokuments, des Steuerelements verwendet wird, das <xref:System.Windows.Forms.RichTextBox.ZoomFactor%2A> Eigenschaft verwenden, wird die nächste ganze Zahl zurück. Sie können diese Eigenschaft verwenden, um den Benutzer zu aktivieren. die <xref:System.Windows.Forms.RichTextBox> Steuerelement in Abschnitten der Dokumentation zu vergrößern, die zu klein sind, anzuzeigen oder verkleinern die Ansicht, um das Aktivieren des Dokuments, das auf dem Bildschirm angezeigt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Windows.Forms.RichTextBox> , die Text wird vergrößert, Wörter im Text des Steuerelements automatisch ausgewählt, wenn ein Wort doppelgeklickt wird, und verfügt über einen Rand auf der rechten Seite des Clientbereichs des Steuerelements. Wenn die <xref:System.Windows.Forms.RichTextBox> Steuerelement verfügt über eine kleine Breite mit dem folgenden Code erstellt eine <xref:System.Windows.Forms.RichTextBox> , in dem jedes Zeichen des Texts in einer eigenen Zeile angezeigt wird. In dieser Position vertikale Anzeige wird durch Klicken auf einen beliebigen Teil eines Worts alle Zeichen des Worts unabhängig von der Tatsache wählen, dass der Text vertikal angezeigt wird. Dieses Beispiel erfordert, dass Sie verfügen über ein Formular mit einem <xref:System.Windows.Forms.RichTextBox> Steuerelement mit dem Namen `richTextBox1`.  
  
 [!code-cpp[RichTextBox.ZoomFactor#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.ZoomFactor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CS/form1.cs#1)]
 [!code-vb[RichTextBox.ZoomFactor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.ZoomFactor/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der angegebene Zoomfaktor liegt nicht im zulässigen Bereich.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
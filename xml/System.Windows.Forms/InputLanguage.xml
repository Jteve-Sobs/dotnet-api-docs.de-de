<Type Name="InputLanguage" FullName="System.Windows.Forms.InputLanguage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7aa3e5b9b06c0ed44b9a94f33dc858608165aa7d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30647764" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class InputLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InputLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.InputLanguage" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InputLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputLanguage sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Methoden und Felder zum Verwalten der Eingabesprache bereit. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Eingabesprache ist eine Kultur/Tastatur-Layout-Paar, das bestimmt, wie die physischen Tasten auf einer Tastatur zuordnen oder für Zeichen in einer anderen Sprache zu zeichnen. Die Eingabesprache basiert auf einem Windows-Eingabegebietsschema-Bezeichner, z. B. von der Platform SDK-Funktion zurückgegebenen `GetKeyboardLayout`. Der Gebietsschemabezeichner für die Eingabe wird auch ein Handle für einen Wert der Tastatur-Layout (HKL) bezeichnet.  
  
 Verwenden der `static` zu suchen, die alle installierten Zuordnungen des Systems und so ändern Sie die Eingabesprache für einen Prozess oder Thread bereitgestellten Methoden. Rufen Sie <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> Abrufen des aktuellen Eingabesprache. Rufen Sie <xref:System.Windows.Forms.InputLanguage.DefaultInputLanguage%2A> für die Eingabe Standardsprache. Rufen Sie <xref:System.Windows.Forms.InputLanguage.InstalledInputLanguages%2A> auf die installierten Sprachen im System abzurufen. Nachdem Sie eine Liste aller installierten Sprachen verfügen, verwenden <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> so ändern Sie die aktuelle Eingabesprache in eine andere Sprache.  
  
   
  
## Examples  
 Im folgenden Codebeispiel ruft eine Liste der installierten Sprachen. Im Beispiel erfordert, dass `textBox1` instanziiert wurde und dass `textBox1.MultiLine` vorsieht `true`.  
  
 [!code-cpp[Classic InputLanguage Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage Example/VB/source.vb#1)]  
  
 Die im folgenden Beispiel wird die Standardsprache für Eingabe-als die aktuelle Eingabesprache. Im Beispiel erfordert, dass `textBox1` instanziiert wurde und dass `textBox1.MultiLine` vorsieht `true`.  
  
 [!code-cpp[Classic InputLanguage Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage Example/CPP/source.cpp#2)]
 [!code-csharp[Classic InputLanguage Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage Example/CS/source.cs#2)]
 [!code-vb[Classic InputLanguage Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage Example/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.Culture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Kultur für die aktuelle Eingabesprache ab.</summary>
        <value>Eine <see cref="T:System.Globalization.CultureInfo" />, die die Kultur der aktuellen Eingabesprache darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.InputLanguage> für die aktuelle Eingabesprache. Ein Textfeld zeigt dies Eingabesprache und den Namen der die Eingabesprache.  
  
 Dieser Code setzt voraus, dass `textBox1` instanziiert wurde.  
  
 [!code-cpp[Classic InputLanguage.Culture Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.Culture Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.Culture Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.Culture Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.Culture Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.Culture Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Windows.Forms.InputLanguage.InstalledInputLanguages" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInputLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage CurrentInputLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguage CurrentInputLanguage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentInputLanguage As InputLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::InputLanguage ^ CurrentInputLanguage { System::Windows::Forms::InputLanguage ^ get(); void set(System::Windows::Forms::InputLanguage ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Eingabesprache für den aktuellen Thread ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.InputLanguage" />, die die Eingabesprache für den aktuellen Thread darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel ruft ab und zeigt den Namen des die aktuelle Eingabesprache. Dieser Code setzt voraus, dass `textBox1` instanziiert wurde.  
  
 [!code-cpp[Classic InputLanguage.CurrentInputLanguage Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.CurrentInputLanguage Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.CurrentInputLanguage Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.CurrentInputLanguage Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.CurrentInputLanguage Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.CurrentInputLanguage Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Eingabesprache wird vom System nicht erkannt.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für den Zugriff auf nicht verwalteten Code. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Windows.Forms.InputLanguage.DefaultInputLanguage" />
      </Docs>
    </Member>
    <Member MemberName="DefaultInputLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage DefaultInputLanguage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguage DefaultInputLanguage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.DefaultInputLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultInputLanguage As InputLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::InputLanguage ^ DefaultInputLanguage { System::Windows::Forms::InputLanguage ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standardeingabesprache für das System ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.InputLanguage" />, die die Standardeingabesprache für das System darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Standard-Eingabesprache abgerufen und ihr Name in einem Textfeld. Dieser Code setzt voraus, dass `textBox1` instanziiert wurde.  
  
 [!code-cpp[Classic InputLanguage.DefaultInputLanguage Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.DefaultInputLanguage Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.DefaultInputLanguage Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.DefaultInputLanguage Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.DefaultInputLanguage Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.DefaultInputLanguage Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
        <altmember cref="M:System.Windows.Forms.InputLanguage.Equals(System.Object)" />
        <altmember cref="P:System.Windows.Forms.InputLanguage.LayoutName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.InputLanguage.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Die auf Gleichheit zu prüfende Sprache.</param>
        <summary>Gibt an, ob zwei Eingabesprachen gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn die zwei Sprachen gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCulture">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage FromCulture (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.InputLanguage FromCulture(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.InputLanguage.FromCulture(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromCulture (culture As CultureInfo) As InputLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::InputLanguage ^ FromCulture(System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Die <see cref="T:System.Globalization.CultureInfo" />, die die Ausgangskultur der Konvertierung angibt.</param>
        <summary>Gibt die Eingabesprache zurück, die der angegebenen Kultur zugeordnet ist.</summary>
        <returns>Eine <see cref="T:System.Windows.Forms.InputLanguage" />, die die zuvor ausgewählte Eingabesprache darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.InputLanguage.FromCulture%2A> Methode wählt unter installierten Tastaturen. Diese Methode führt insbesondere die folgenden Vorgänge:  
  
1.  Ruft die LCID zugeordnet `culture`.  
  
2.  Ruft die vollständige Liste der verfügbaren Eingabespalten Sprachen-IDs (HKLs) aus der `GetKeyboardLayoutList` Funktion.  
  
3.  Sucht den HKL, die die LCID aus entspricht `culture`, sofern eins vorhanden ist.  
  
4.  Gibt die installierte Tastatur, die diesem HKL zugeordnet.  
  
5.  Wenn keine Tastatur gefunden wird, gibt `null`.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.InputLanguage.FromCulture%2A> Methode versucht nie zum Laden oder eine zusätzliche Tastatur zu installieren, wenn eine für die nicht bereits installiert wurde `culture`. Verwenden Sie das Platform SDK-Funktion `LoadKeyboardLayout`, um eine zusätzliche Tastatur zu installieren.  
  
   
  
## Examples  
 Das folgende Codebeispiel legt die Standard-Eingabesprache als die aktuelle Eingabesprache fest.  
  
 Erstens <xref:System.Windows.Forms.InputLanguage.DefaultInputLanguage%2A> wird aufgerufen, um die Standardsprache des Systems zu erhalten. Als Nächstes <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> aufgerufen, um die aktuelle Eingabesprache abzurufen. Die Ergebnisse werden in einem Textfeld ausgegeben. Klicken Sie dann aufrufen <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> hat den Standardwert Eingabesprache ändert sich die aktuelle Eingabesprache auf den Standardwert. Die neue aktuelle Eingabesprache wird in einem Textfeld angezeigt.  
  
 Dieser Code setzt voraus, dass `textBox1` instanziiert wurde.  
  
 [!code-cpp[Classic InputLanguage.FromCulture Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.FromCulture Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.FromCulture Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.FromCulture Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.FromCulture Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.FromCulture Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.DefaultInputLanguage" />
        <altmember cref="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
        <altmember cref="M:System.Windows.Forms.InputLanguage.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.InputLanguage.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Hashcode für diese Eingabesprache zurück.</summary>
        <returns>Der Hashcode für diese Eingabesprache.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Handle für die Eingabesprache ab.</summary>
        <value>Ein <see cref="T:System.IntPtr" />, der das Handle dieser Eingabesprache darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die aktuelle Eingabesprache abgerufen. Anschließend ruft <xref:System.Windows.Forms.InputLanguage.Handle%2A> um Handle und druckt die Ergebnisse in einem Textfeld zu sichern. Im Beispiel erfordert, dass `textBox1` instanziiert wurde.  
  
 [!code-cpp[Classic InputLanguage.Handle Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.Handle Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.Handle Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.Handle Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.Handle Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.Handle Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
      </Docs>
    </Member>
    <Member MemberName="InstalledInputLanguages">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguageCollection InstalledInputLanguages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguageCollection InstalledInputLanguages" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.InstalledInputLanguages" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledInputLanguages As InputLanguageCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::InputLanguageCollection ^ InstalledInputLanguages { System::Windows::Forms::InputLanguageCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguageCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Liste aller installierten Eingabesprachen ab.</summary>
        <value>Ein Array von <see cref="T:System.Windows.Forms.InputLanguage" />-Objekten, die die auf dem Computer installierten Eingabesprachen darstellen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird alle auf dem Computer installierten Eingabesprachen abgerufen und ihre Namen angezeigt. Der Code ruft <xref:System.Windows.Forms.InputLanguage.InstalledInputLanguages%2A> zum Abrufen der installierten Sprachen. Ein Textfeld zeigt die Liste der Sprachnamen an.  
  
 Dieser Code setzt voraus, dass `textBox1` instanziiert wurde und dass `textBox1.MultiLine` vorsieht `true`.  
  
 [!code-cpp[Classic InputLanguage.InstalledInputLanguages Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.InstalledInputLanguages Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.InstalledInputLanguages Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.InstalledInputLanguages Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.InstalledInputLanguages Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.InstalledInputLanguages Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.LayoutName" />
      </Docs>
    </Member>
    <Member MemberName="LayoutName">
      <MemberSignature Language="C#" Value="public string LayoutName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LayoutName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.LayoutName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LayoutName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LayoutName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des aktuellen Tastaturlayouts ab, der auf dem Computer in den Ländereinstellungen des Betriebssystems angezeigt wird.</summary>
        <value>Der Name des Layouts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die aktuelle Eingabesprache zugeordnete Kultur abgerufen und zeigt den Namen der Kultur.  
  
 Erstens <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> aufgerufen, um die aktuelle Eingabesprache abzurufen. Klicken Sie dann <xref:System.Windows.Forms.InputLanguage.Culture%2A> aufgerufen, um die Informationen zur Kultur abzurufen, für die diese Sprache Eingabeargumente sortiert. Schließlich <xref:System.Globalization.CultureInfo.EnglishName%2A> abgerufen und in einem Textfeld angezeigt wird.  
  
 [!code-cpp[Classic InputLanguage.LayoutName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.LayoutName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.LayoutName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.LayoutName Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.LayoutName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.LayoutName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1a9784b3d31ced8dfb9f87fcfd04cc2604f20a2" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77245516" /></Metadata><TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt eine Kapselung eines Fensterhandles und einer Fensterprozedur auf niedriger Ebene bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Klasse verwaltet die Fenster Klassen Erstellung und-Registrierung automatisch.  
  
 Ein Fenster ist nicht für Garbage Collection qualifiziert, wenn es einem Fenster Handle zugeordnet ist. Um ordnungsgemäße Garbage Collection zu gewährleisten, müssen Handles entweder manuell mithilfe <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> gelöscht oder mithilfe <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>freigegeben werden.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>-Methode wird aufgerufen, wenn die WM_NCDESTROY Nachricht verarbeitet wird. Dies bedeutet, dass es Fälle gibt, in denen Sie <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>nicht manuell anrufen müssen, aber dies ist eine bewährte Vorgehensweise.  
  
 Die <xref:System.Windows.Forms.NativeWindow>-Klasse stellt die folgenden Eigenschaften und Methoden zum Verwalten von Handles bereit: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>und <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Abfangen von Betriebssystem-Fenster Meldungen in einer Fenster Prozedur und das Erstellen eines Fensters mit einem bestimmten Betriebssystemfenster-Klassennamen. Im Beispiel werden zwei Klassen erstellt, die von <xref:System.Windows.Forms.NativeWindow> erben, die dies erreichen.  
  
 Die `MyNativeWindowListener`-Klasse verknüpft die Fenster Prozedur des Formulars, das an den Konstruktor übergeben wird, und überschreibt die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode, um die `WM_ACTIVATEAPP` Fenster Meldung abzufangen. Die-Klasse veranschaulicht die Verwendung der Methoden <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> und <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, um das Fenster zu identifizieren, das vom <xref:System.Windows.Forms.NativeWindow> verwendet werden soll. Das Handle wird basierend auf den <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>-und <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> Ereignissen zugewiesen. Wenn die `WM_ACTIVATEAPP` Fenster Meldung empfangen wird, ruft die-Klasse die `form1.ApplicationActivated`-Methode auf.  
  
 Die `MyNativeWindow`-Klasse erstellt ein neues Fenster, in dem die <xref:System.Windows.Forms.CreateParams.ClassName%2A> auf `BUTTON`festgelegt ist. Die-Klasse veranschaulicht die Verwendung der <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>-Methode und das Überschreiben der <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode, um die empfangenen Fenster Meldungen abzufangen.  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine Instanz der <see cref="T:System.Windows.Forms.NativeWindow" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist der Standard <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> Konstruktor, der vom Compiler bereitgestellt wird. Die <xref:System.Windows.Forms.NativeWindow>-Klasse verfügt auch über einen statischen Konstruktor, der Domänen weite Nachrichten Handler und Hash Tabellen für die Anwendung initialisiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Das Handle, das diesem Fenster zugewiesen werden soll.</param>
        <summary>Weist diesem Fenster ein Handle zu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> fängt Fenster Meldungen ab, die an den `handle`-Parameter gesendet werden. Verwenden Sie <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, um die Fenster Prozedur des Handles auf die Standardfenster Prozedur zurückzusetzen.  
  
 Die <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>-Methode ruft die <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>-Methode auf, um anzugeben, dass sich der Wert der <xref:System.Windows.Forms.NativeWindow.Handle%2A>-Eigenschaft geändert hat.  
  
> [!NOTE]
>  Das zuzuweisende Handle darf sich nicht in einem anderen Anwendungsprozess befinden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Meldungen des Betriebssystem Fensters in einer Fenster Prozedur abgefangen werden. Im Beispiel wird eine Klasse erstellt, die von <xref:System.Windows.Forms.NativeWindow> erbt, um dies zu erreichen.  
  
 Die `MyNativeWindowListener`-Klasse verknüpft die Fenster Prozedur des Formulars, das an den Konstruktor übergeben wird, und überschreibt die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode, um die `WM_ACTIVATEAPP` Fenster Meldung abzufangen. Die-Klasse veranschaulicht die Verwendung der Methoden <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> und <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, um zu ermitteln, welches Fenster Handle der <xref:System.Windows.Forms.NativeWindow> verwenden wird. Das Handle wird basierend auf den <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>-und <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> Ereignissen zugewiesen. Wenn die `WM_ACTIVATEAPP` Fenster Meldung empfangen wird, ruft die-Klasse die `form1.ApplicationActivated`-Methode auf.  
  
 Dieser Code ist ein Auszug aus dem Beispiel in der Übersicht über <xref:System.Windows.Forms.NativeWindow>-Klasse. Zum Zweck der über sichtlichkeit wird Code nicht angezeigt. Das gesamte Codelisting finden Sie unter <xref:System.Windows.Forms.NativeWindow>.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Diesem Fenster ist bereits ein Handle zugeordnet.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Die Fensterprozedur für das zugeordnete systemeigene Fenster konnte nicht abgerufen werden.</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">Ein <see cref="T:System.Windows.Forms.CreateParams" />, das die Erstellungsparameter für dieses Fenster angibt.</param>
        <summary>Erstellt mithilfe der angegebenen Erstellungsparameter ein Fenster mit dem zugehörigen Handle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `cp`-Parameter gibt die Werte an, die an die native Win32 `CreateWindowEx`-Methode übergeben werden, um ein Fenster und dessen Handle zu erstellen.  
  
 Wenn das <xref:System.Windows.Forms.CreateParams.ClassName%2A> Feld nicht `null`ist, erbt das neu erstellte Fenster Handle von der angegebenen Klasse. Wenn <xref:System.Windows.Forms.CreateParams.ClassName%2A> z. b. auf `BUTTON`festgelegt ist, basiert das neu erstellte Fenster auf der Win32-`BUTTON` Window-Klasse. Die <xref:System.Windows.Forms.CreateParams.Param%2A>-Eigenschaft des <xref:System.Windows.Forms.CreateParams.ClassName%2A> Objekts muss entweder `null` sein oder auf eine Instanz einer Klasse verweisen, die als Struktur deklariert wurde.  
  
 Dieser Code ist ein Auszug aus dem Beispiel in der Übersicht über <xref:System.Windows.Forms.NativeWindow>-Klasse. Zum Zweck der über sichtlichkeit wird Code nicht angezeigt. Das gesamte Codelisting finden Sie unter <xref:System.Windows.Forms.NativeWindow>.  
  
> [!NOTE]
>  Der angegebene Klassenname wird beim Betriebssystem registriert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Erstellen eines Fensters mit einem bestimmten Betriebssystem-Fenster Klassennamen veranschaulicht. Im Beispiel wird eine Klasse erstellt, die von <xref:System.Windows.Forms.NativeWindow> erbt, um dies zu erreichen.  
  
 Die `MyNativeWindow`-Klasse erstellt ein neues Fenster, in dem die <xref:System.Windows.Forms.CreateParams.ClassName%2A> auf `BUTTON`festgelegt ist. Dadurch wird ein Win32-Schaltflächen Fenster erstellt. Der Speicherort und die Größe der Schaltfläche werden zusammen mit der Angabe zusätzlicher Fenster Stile festgelegt. Die-Klasse veranschaulicht, wie die <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>-Methode verwendet und die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode überschrieben wird, um Fenster Meldungen abzufangen, die empfangen werden. Obwohl das Beispiel nach der WM_ACTIVATEAPP Nachricht sucht, kann dies in einem echten Programm durch Fenster Meldungen ersetzt werden, die für den erstellten Typ spezifisch sind.  
  
> [!NOTE]
>  Einige Steuerelement Typen senden Ihre Fenster Meldungen an das übergeordnete Fenster anstelle des Fensters. Weitere Informationen finden Sie im Windows Platform SDK.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Das Betriebssystem verfügte nicht über ausreichende Ressourcen zum Erstellen des systemeigenen Fensters.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Die systemeigene Windows-API konnte das angegebene Fenster nicht erstellen.</exception>
        <exception cref="T:System.InvalidOperationException">Das Handle des aktuellen systemeigenen Fensters wurde bereits zugeordnet, d. h., die Eigenschaft <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> ist ungleich <see cref="F:System.IntPtr.Zero" />.</exception>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc : Message -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Die derzeit verarbeitete Meldung.</param>
        <summary>Ruft die diesem Fenster zugeordnete Standardfensterprozedur auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel wird die <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>-Methode nur aufgerufen, wenn Sie Fenster Nachrichten abfangen, und die Standardfenster Prozedur die Meldung verarbeiten soll. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> sollte nicht aufgerufen werden, um eine Fenster Meldung an das Fenster zu senden. Verwenden Sie stattdessen die Win32-`SendMessage` Funktion.  
  
 Es ist ein Fehler, <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> aufzurufen, wenn die <xref:System.Windows.Forms.NativeWindow.Handle%2A>-Eigenschaft den Wert 0 hat.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Überschreiben Sie diese Methode in einer abgeleiteten Klasse, um eine verallgemeinerte benutzerdefinierte Nachrichten Behandlung für ein bestimmtes System eigenes Fenster oder .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />zu implementieren. Die benutzerdefinierte Verarbeitung kann vor, nach oder anstelle eines Aufrufes der Basisklassen Implementierung dieser Methode durchgeführt werden, die eine standardmäßige Nachrichtenverarbeitung durchführt.  
  
Im Gegensatz dazu kann das Hinzufügen einer angepassten Nachrichten Behandlung für eine Anwendung über die <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />-Methode der <see cref="T:System.Windows.Forms.Application" />-Klasse durchgeführt werden.</para></block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zerstört das Fenster und das Handle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode zerstört das Fenster, das dem <xref:System.Windows.Forms.NativeWindow.Handle%2A>zugeordnet ist, legt die <xref:System.Windows.Forms.NativeWindow.Handle%2A>-Eigenschaft auf 0 fest und ruft die <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>-Methode auf, um die Änderung widerzuspiegeln. In der Regel wird nur <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> aufgerufen, wenn Sie mit dem systemeigenen Fenster abgeschlossen sind.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.NativeWindow>-Klasse zerstört das zugeordnete Fenster automatisch und gibt die zugehörigen Ressourcen als Reaktion auf eine WM_DESTROY Meldung frei.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die diesem Fenster zugeordneten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.NativeWindow.Finalize%2A>-Methode entfernt die von der aktuellen <xref:System.Windows.Forms.NativeWindow>-Instanz zugeordnete Win32-Klasse, gibt das Handle frei und stellt dem zugeordneten Fenster eine WM_CLOSE Meldung zur Folge.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Das Fensterhandle</param>
        <summary>Ruft das dem angegebenen Handle zugeordnete Fenster ab.</summary>
        <returns>Das dem angegebenen Handle zugeordnete <see cref="T:System.Windows.Forms.NativeWindow" />. Diese Methode gibt <see langword="null" /> zurück, wenn dem Handle kein Fenster zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie ein Handle von einer anderen Methode erhalten, verwenden Sie diese Methode, um das Fenster abzurufen, das dem Handle zugeordnet ist. Das Handle muss bereits im Besitz eines anderen <xref:System.Windows.Forms.NativeWindow> im aktuellen Prozess sein. Andernfalls wird `null` zurückgegeben.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Handle für dieses Fenster ab.</summary>
        <value>Bei einem erfolgreichen Abruf ein <see cref="T:System.IntPtr" />, der das Handle für das zugeordnete systemeigene Win32-Fenster darstellt, andernfalls 0 (null), wenn dem Fenster kein Handle zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, wenn Sie Windows-API-Methoden aufrufen, die ein Handle für ein Fenster oder Steuerelement erfordern.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Erstellen eines Fensters mit einem bestimmten Betriebssystem-Fenster Klassennamen veranschaulicht. Im Beispiel wird eine Klasse erstellt, die von <xref:System.Windows.Forms.NativeWindow> erbt, um dies zu erreichen. Das Beispiel veranschaulicht auch das Überschreiben der <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>-Methode, um benachrichtigt zu werden, wenn sich die <xref:System.Windows.Forms.NativeWindow.Handle%2A> ändert.  
  
 Die `MyNativeWindow`-Klasse erstellt ein neues Fenster, in dem die <xref:System.Windows.Forms.CreateParams.ClassName%2A> auf Schaltfläche festgelegt ist. Dadurch wird ein Win32-Schaltflächen Fenster erstellt. Der Speicherort und die Größe der Schaltfläche werden zusammen mit der Angabe zusätzlicher Fenster Stile festgelegt. Die-Klasse veranschaulicht, wie die <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>-Methode verwendet und die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode überschrieben wird, um Fenster Meldungen abzufangen, die empfangen werden. Obwohl das Beispiel nach der WM_ACTIVATEAPP Nachricht sucht, könnte dies in einem echten Programm durch Fenster Meldungen ersetzt werden, die für den erstellten Typ spezifisch sind.  
  
> [!NOTE]
>  Einige Steuerelement Typen senden Ihre Fenster Meldungen an das übergeordnete Fenster anstelle des Fensters. Weitere Informationen finden Sie im Windows Platform SDK.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Benachrichtigungsmethode an, die aufgerufen wird, wenn das Handle für ein Fenster geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird aufgerufen, wenn sich der Wert der <xref:System.Windows.Forms.NativeWindow.Handle%2A>-Eigenschaft geändert hat.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Erstellen eines Fensters mit einem bestimmten Betriebssystem-Fenster Klassennamen veranschaulicht. Im Beispiel wird eine Klasse erstellt, die von <xref:System.Windows.Forms.NativeWindow> erbt, um dies zu erreichen. Das Beispiel veranschaulicht auch das Überschreiben der <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>-Methode, um benachrichtigt zu werden, wenn sich die <xref:System.Windows.Forms.NativeWindow.Handle%2A> ändert.  
  
 Die `MyNativeWindow`-Klasse erstellt ein neues Fenster, in dem die <xref:System.Windows.Forms.CreateParams.ClassName%2A> auf `BUTTON`festgelegt ist. Dadurch wird ein Win32-Schaltflächen Fenster erstellt. Der Speicherort und die Größe der Schaltfläche werden zusammen mit der Angabe zusätzlicher Fenster Stile festgelegt. Die-Klasse veranschaulicht, wie die <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>-Methode verwendet und die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode überschrieben wird, um Fenster Meldungen abzufangen, die empfangen werden. Obwohl das Beispiel nach der WM_ACTIVATEAPP Nachricht sucht, kann dies in einem echten Programm durch Fenster Meldungen ersetzt werden, die für den erstellten Typ spezifisch sind.  
  
 Dieser Code ist ein Auszug aus dem Beispiel in der Übersicht über <xref:System.Windows.Forms.NativeWindow>-Klasse. Zum Zweck der über sichtlichkeit wird Code nicht angezeigt. Das gesamte Codelisting finden Sie unter <xref:System.Windows.Forms.NativeWindow>.  
  
> [!NOTE]
>  Einige Steuerelement Typen senden Ihre Fenster Meldungen an das übergeordnete Fenster anstelle des Fensters. Weitere Informationen finden Sie im Windows Platform SDK.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Überschreiben Sie diese Methode, um am Fenster Handle vorgenommene Änderungen zu verfolgen.</para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">Eine <see cref="T:System.Exception" />, die die nicht behandelte Threadausnahme angibt.</param>
        <summary>Verwaltet beim Überschreiben in einer abgeleiteten Klasse eine nicht behandelte Threadausnahme.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel verarbeitet <xref:System.Windows.Forms.Application.OnThreadException%2A> Thread Ausnahmen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt das diesem Fenster zugeordnete Handle frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode wird das Fenster Handle nicht zerstört. Stattdessen wird die Fenster Prozedur des Handles auf die Standardfenster Prozedur festgelegt. Die <xref:System.Windows.Forms.NativeWindow.Handle%2A>-Eigenschaft wird auf 0 festgelegt, und <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> wird aufgerufen, um die Änderung widerzuspiegeln.  
  
 Diese Methode wird automatisch von einem Fenster aufgerufen, wenn eine systemeigene Win32-WM_NCDESTROY Meldung empfangen wird, die angibt, dass das Handle von Windows zerstört wurde.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Meldungen des Betriebssystem Fensters in einer Fenster Prozedur abgefangen werden. Im Beispiel wird eine Klasse erstellt, die von <xref:System.Windows.Forms.NativeWindow> erbt, um dies zu erreichen.  
  
 Die `MyNativeWindowListener`-Klasse verknüpft die Fenster Prozedur des Formulars, das an den Konstruktor übergeben wird, und überschreibt die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode, um die `WM_ACTIVATEAPP` Fenster Meldung abzufangen. Die-Klasse veranschaulicht die Verwendung der Methoden <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> und <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> zum Identifizieren des Fenster Handles, das vom <xref:System.Windows.Forms.NativeWindow> verwendet wird. Das Handle wird basierend auf den <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>-und <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> Ereignissen zugewiesen. Wenn die `WM_ACTIVATEAPP` Fenster Meldung empfangen wird, ruft die-Klasse die `form1.ApplicationActivated`-Methode auf.  
  
 Dieser Code ist ein Auszug aus dem Beispiel in der Übersicht über <xref:System.Windows.Forms.NativeWindow>-Klasse. Zum Zweck der über sichtlichkeit wird Code nicht angezeigt. Das gesamte Codelisting finden Sie unter <xref:System.Windows.Forms.NativeWindow>.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc : Message -&gt; unit&#xA;override this.WndProc : Message -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Eine <see cref="T:System.Windows.Forms.Message" />, die der aktuellen Windows-Meldung zugeordnet ist.</param>
        <summary>Ruft die diesem Fenster zugeordnete Standardfensterprozedur auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird aufgerufen, wenn eine Fenster Meldung an das Handle des Fensters gesendet wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Meldungen des Betriebssystem Fensters in einer Fenster Prozedur abgefangen werden. Im Beispiel wird eine Klasse erstellt, die von <xref:System.Windows.Forms.NativeWindow> erbt, um dies zu erreichen.  
  
 Die `MyNativeWindowListener`-Klasse verknüpft die Fenster Prozedur des Formulars, das an den Konstruktor übergeben wird, und überschreibt die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode, um die `WM_ACTIVATEAPP` Fenster Meldung abzufangen. Die-Klasse veranschaulicht die Verwendung der Methoden <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> und <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> zum Identifizieren des Fenster Handles, das vom <xref:System.Windows.Forms.NativeWindow> verwendet wird. Das Handle wird basierend auf den <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>-und <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> Ereignissen zugewiesen. Wenn die `WM_ACTIVATEAPP` Fenster Meldung empfangen wird, ruft die-Klasse die `form1.ApplicationActivated`-Methode auf.  
  
 Dieser Code ist ein Auszug aus dem Beispiel in der Übersicht über <xref:System.Windows.Forms.NativeWindow>-Klasse. Zum Zweck der über sichtlichkeit wird Code nicht angezeigt. Das gesamte Codelisting finden Sie unter <xref:System.Windows.Forms.NativeWindow>.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Überschreiben Sie diese Methode, um eine bestimmte Nachrichtenverarbeitung zu implementieren. Ruft die <c>Basis ab. WndProc</c> für nicht behandelte Nachrichten.</para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>

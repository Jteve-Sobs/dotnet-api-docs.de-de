<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="020b4dee59e9a40bcb5a37db92db4d94f0f42d01" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83503533" /></Metadata><TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="9d2fd-101">Stellt eine Kapselung eines Fensterhandles und einer Fensterprozedur auf niedriger Ebene bereit.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-101">Provides a low-level encapsulation of a window handle and a window procedure.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-102">Diese Klasse verwaltet die Fenster Klassen Erstellung und-Registrierung automatisch.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-102">This class automatically manages window class creation and registration.</span></span>  
  
 <span data-ttu-id="9d2fd-103">Ein Fenster ist nicht für Garbage Collection qualifiziert, wenn es einem Fenster Handle zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-103">A window is not eligible for garbage collection when it is associated with a window handle.</span></span> <span data-ttu-id="9d2fd-104">Um ordnungsgemäße Garbage Collection zu gewährleisten, müssen Handles entweder manuell mithilfe <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> gelöscht oder mithilfe <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-104">To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d2fd-105">Die <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>-Methode wird aufgerufen, wenn die WM_NCDESTROY Nachricht verarbeitet wird.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-105">The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed.</span></span> <span data-ttu-id="9d2fd-106">Dies bedeutet, dass es Fälle gibt, in denen Sie <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>nicht manuell anrufen müssen, aber dies ist eine bewährte Vorgehensweise.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-106">This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.</span></span>  
  
 <span data-ttu-id="9d2fd-107">Die <xref:System.Windows.Forms.NativeWindow>-Klasse stellt die folgenden Eigenschaften und Methoden zum Verwalten von Handles bereit: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>und <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-107">The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d2fd-108">Das folgende Codebeispiel veranschaulicht das Abfangen von Betriebssystem-Fenster Meldungen in einer Fenster Prozedur und das Erstellen eines Fensters mit einem bestimmten Betriebssystemfenster-Klassennamen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-108">The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="9d2fd-109">Im Beispiel werden zwei Klassen erstellt, die von <xref:System.Windows.Forms.NativeWindow> erben, die dies erreichen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-109">The example creates two classes that inherit from <xref:System.Windows.Forms.NativeWindow> that accomplish this.</span></span>  
  
 <span data-ttu-id="9d2fd-110">Die `MyNativeWindowListener`-Klasse verknüpft die Fenster Prozedur des Formulars, das an den Konstruktor übergeben wird, und überschreibt die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode, um die `WM_ACTIVATEAPP` Fenster Meldung abzufangen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-110">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="9d2fd-111">Die-Klasse veranschaulicht die Verwendung der Methoden <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> und <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, um das Fenster zu identifizieren, das vom <xref:System.Windows.Forms.NativeWindow> verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-111">The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="9d2fd-112">Das Handle wird basierend auf den <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>-und <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> Ereignissen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-112">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="9d2fd-113">Wenn die `WM_ACTIVATEAPP` Fenster Meldung empfangen wird, ruft die-Klasse die `form1.ApplicationActivated`-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-113">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="9d2fd-114">Die `MyNativeWindow`-Klasse erstellt ein neues Fenster, in dem die <xref:System.Windows.Forms.CreateParams.ClassName%2A> auf `BUTTON`festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-114">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="9d2fd-115">Die-Klasse veranschaulicht die Verwendung der <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>-Methode und das Überschreiben der <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode, um die empfangenen Fenster Meldungen abzufangen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-115">The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span>  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9d2fd-116">Initialisiert eine Instanz der <see cref="T:System.Windows.Forms.NativeWindow" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-116">Initializes an instance of the <see cref="T:System.Windows.Forms.NativeWindow" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-117">Dies ist der Standard <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> Konstruktor, der vom Compiler bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-117">This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler.</span></span> <span data-ttu-id="9d2fd-118">Die <xref:System.Windows.Forms.NativeWindow>-Klasse verfügt auch über einen statischen Konstruktor, der Domänen weite Nachrichten Handler und Hash Tabellen für die Anwendung initialisiert.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-118">The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="9d2fd-119">Das Handle, das diesem Fenster zugewiesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-119">The handle to assign to this window.</span></span></param>
        <summary><span data-ttu-id="9d2fd-120">Weist diesem Fenster ein Handle zu.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-120">Assigns a handle to this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-121"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> fängt Fenster Meldungen ab, die an den `handle`-Parameter gesendet werden.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-121"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter.</span></span> <span data-ttu-id="9d2fd-122">Verwenden Sie <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, um die Fenster Prozedur des Handles auf die Standardfenster Prozedur zurückzusetzen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-122">Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.</span></span>  
  
 <span data-ttu-id="9d2fd-123">Die <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>-Methode ruft die <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>-Methode auf, um anzugeben, dass sich der Wert der <xref:System.Windows.Forms.NativeWindow.Handle%2A>-Eigenschaft geändert hat.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-123">The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d2fd-124">Das zuzuweisende Handle darf sich nicht in einem anderen Anwendungsprozess befinden.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-124">The handle to assign cannot be in a different application process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d2fd-125">Im folgenden Codebeispiel wird veranschaulicht, wie Meldungen des Betriebssystem Fensters in einer Fenster Prozedur abgefangen werden.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-125">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="9d2fd-126">Im Beispiel wird eine Klasse erstellt, die von <xref:System.Windows.Forms.NativeWindow> erbt, um dies zu erreichen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-126">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="9d2fd-127">Die `MyNativeWindowListener`-Klasse verknüpft die Fenster Prozedur des Formulars, das an den Konstruktor übergeben wird, und überschreibt die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode, um die `WM_ACTIVATEAPP` Fenster Meldung abzufangen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-127">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="9d2fd-128">Die-Klasse veranschaulicht die Verwendung der Methoden <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> und <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, um zu ermitteln, welches Fenster Handle der <xref:System.Windows.Forms.NativeWindow> verwenden wird.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-128">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="9d2fd-129">Das Handle wird basierend auf den <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>-und <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> Ereignissen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-129">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="9d2fd-130">Wenn die `WM_ACTIVATEAPP` Fenster Meldung empfangen wird, ruft die-Klasse die `form1.ApplicationActivated`-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-130">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="9d2fd-131">Dieser Code ist ein Auszug aus dem Beispiel in der Übersicht über <xref:System.Windows.Forms.NativeWindow>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-131">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="9d2fd-132">Zum Zweck der über sichtlichkeit wird Code nicht angezeigt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-132">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="9d2fd-133">Das gesamte Codelisting finden Sie unter <xref:System.Windows.Forms.NativeWindow>.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-133">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="9d2fd-134">Diesem Fenster ist bereits ein Handle zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-134">This window already has a handle.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="9d2fd-135">Die Fensterprozedur für das zugeordnete systemeigene Fenster konnte nicht abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-135">The windows procedure for the associated native window could not be retrieved.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp"><span data-ttu-id="9d2fd-136">Ein <see cref="T:System.Windows.Forms.CreateParams" />, das die Erstellungsparameter für dieses Fenster angibt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-136">A <see cref="T:System.Windows.Forms.CreateParams" /> that specifies the creation parameters for this window.</span></span></param>
        <summary><span data-ttu-id="9d2fd-137">Erstellt mithilfe der angegebenen Erstellungsparameter ein Fenster mit dem zugehörigen Handle.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-137">Creates a window and its handle with the specified creation parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-138">Der `cp`-Parameter gibt die Werte an, die an die native Win32 `CreateWindowEx`-Methode übergeben werden, um ein Fenster und dessen Handle zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-138">The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.</span></span>  
  
 <span data-ttu-id="9d2fd-139">Wenn das <xref:System.Windows.Forms.CreateParams.ClassName%2A> Feld nicht `null`ist, erbt das neu erstellte Fenster Handle von der angegebenen Klasse.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-139">When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class.</span></span> <span data-ttu-id="9d2fd-140">Wenn <xref:System.Windows.Forms.CreateParams.ClassName%2A> z. b. auf `BUTTON`festgelegt ist, basiert das neu erstellte Fenster auf der Win32-`BUTTON` Window-Klasse.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-140">For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class.</span></span> <span data-ttu-id="9d2fd-141">Die <xref:System.Windows.Forms.CreateParams.Param%2A>-Eigenschaft des <xref:System.Windows.Forms.CreateParams.ClassName%2A> Objekts muss entweder `null` sein oder auf eine Instanz einer Klasse verweisen, die als Struktur deklariert wurde.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-141">The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.</span></span>  
  
 <span data-ttu-id="9d2fd-142">Dieser Code ist ein Auszug aus dem Beispiel in der Übersicht über <xref:System.Windows.Forms.NativeWindow>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-142">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="9d2fd-143">Zum Zweck der über sichtlichkeit wird Code nicht angezeigt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-143">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="9d2fd-144">Das gesamte Codelisting finden Sie unter <xref:System.Windows.Forms.NativeWindow>.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-144">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d2fd-145">Der angegebene Klassenname wird beim Betriebssystem registriert.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-145">The class name provided is registered with the operating system.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d2fd-146">Im folgenden Codebeispiel wird das Erstellen eines Fensters mit einem bestimmten Betriebssystem-Fenster Klassennamen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-146">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="9d2fd-147">Im Beispiel wird eine Klasse erstellt, die von <xref:System.Windows.Forms.NativeWindow> erbt, um dies zu erreichen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-147">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="9d2fd-148">Die `MyNativeWindow`-Klasse erstellt ein neues Fenster, in dem die <xref:System.Windows.Forms.CreateParams.ClassName%2A> auf `BUTTON`festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-148">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="9d2fd-149">Dadurch wird ein Win32-Schaltflächen Fenster erstellt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-149">This creates a Win32 button window.</span></span> <span data-ttu-id="9d2fd-150">Der Speicherort und die Größe der Schaltfläche werden zusammen mit der Angabe zusätzlicher Fenster Stile festgelegt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-150">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="9d2fd-151">Die-Klasse veranschaulicht, wie die <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>-Methode verwendet und die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode überschrieben wird, um Fenster Meldungen abzufangen, die empfangen werden.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-151">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="9d2fd-152">Obwohl das Beispiel nach der WM_ACTIVATEAPP Nachricht sucht, kann dies in einem echten Programm durch Fenster Meldungen ersetzt werden, die für den erstellten Typ spezifisch sind.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-152">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d2fd-153">Einige Steuerelement Typen senden Ihre Fenster Meldungen an das übergeordnete Fenster anstelle des Fensters.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-153">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="9d2fd-154">Weitere Informationen finden Sie im Windows Platform SDK.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-154">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="9d2fd-155">Das Betriebssystem verfügte nicht über ausreichende Ressourcen zum Erstellen des systemeigenen Fensters.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-155">The operating system ran out of resources when trying to create the native window.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="9d2fd-156">Die systemeigene Windows-API konnte das angegebene Fenster nicht erstellen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-156">The native Windows API could not create the specified window.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9d2fd-157">Das Handle des aktuellen systemeigenen Fensters wurde bereits zugeordnet, d. h., die Eigenschaft <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> ist ungleich <see cref="F:System.IntPtr.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-157">The handle of the current native window is already assigned; in explanation, the <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> property is not equal to <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc : Message -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="9d2fd-158">Die derzeit verarbeitete Meldung.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-158">The message that is currently being processed.</span></span></param>
        <summary><span data-ttu-id="9d2fd-159">Ruft die diesem Fenster zugeordnete Standardfensterprozedur auf.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-159">Invokes the default window procedure associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-160">In der Regel wird die <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>-Methode nur aufgerufen, wenn Sie Fenster Nachrichten abfangen, und die Standardfenster Prozedur die Meldung verarbeiten soll.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-160">Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message.</span></span> <span data-ttu-id="9d2fd-161"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> sollte nicht aufgerufen werden, um eine Fenster Meldung an das Fenster zu senden. Verwenden Sie stattdessen die Win32-`SendMessage` Funktion.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-161"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.</span></span>  
  
 <span data-ttu-id="9d2fd-162">Es ist ein Fehler, <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> aufzurufen, wenn die <xref:System.Windows.Forms.NativeWindow.Handle%2A>-Eigenschaft den Wert 0 hat.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-162">It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9d2fd-163">Überschreiben Sie diese Methode in einer abgeleiteten Klasse, um eine verallgemeinerte benutzerdefinierte Nachrichten Behandlung für ein bestimmtes System eigenes Fenster oder .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-163">Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />.</span></span> <span data-ttu-id="9d2fd-164">Die benutzerdefinierte Verarbeitung kann vor, nach oder anstelle eines Aufrufes der Basisklassen Implementierung dieser Methode durchgeführt werden, die eine standardmäßige Nachrichtenverarbeitung durchführt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-164">Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.</span></span>  
  
<span data-ttu-id="9d2fd-165">Im Gegensatz dazu kann das Hinzufügen einer angepassten Nachrichten Behandlung für eine Anwendung über die <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />-Methode der <see cref="T:System.Windows.Forms.Application" />-Klasse durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-165">In contrast, adding customized message handling for an application can be accomplished through the <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> method of the <see cref="T:System.Windows.Forms.Application" /> class.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9d2fd-166">Zerstört das Fenster und das Handle.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-166">Destroys the window and its handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-167">Diese Methode zerstört das Fenster, das dem <xref:System.Windows.Forms.NativeWindow.Handle%2A>zugeordnet ist, legt die <xref:System.Windows.Forms.NativeWindow.Handle%2A>-Eigenschaft auf 0 fest und ruft die <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>-Methode auf, um die Änderung widerzuspiegeln.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-167">This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change.</span></span> <span data-ttu-id="9d2fd-168">In der Regel wird nur <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> aufgerufen, wenn Sie mit dem systemeigenen Fenster abgeschlossen sind.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-168">Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d2fd-169">Die <xref:System.Windows.Forms.NativeWindow>-Klasse zerstört das zugeordnete Fenster automatisch und gibt die zugehörigen Ressourcen als Reaktion auf eine WM_DESTROY Meldung frei.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-169">The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9d2fd-170">Gibt die diesem Fenster zugeordneten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-170">Releases the resources associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-171">Die <xref:System.Windows.Forms.NativeWindow.Finalize%2A>-Methode entfernt die von der aktuellen <xref:System.Windows.Forms.NativeWindow>-Instanz zugeordnete Win32-Klasse, gibt das Handle frei und stellt dem zugeordneten Fenster eine WM_CLOSE Meldung zur Folge.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-171">The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="9d2fd-172">Das Fensterhandle</span><span class="sxs-lookup"><span data-stu-id="9d2fd-172">A handle to a window.</span></span></param>
        <summary><span data-ttu-id="9d2fd-173">Ruft das dem angegebenen Handle zugeordnete Fenster ab.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-173">Retrieves the window associated with the specified handle.</span></span></summary>
        <returns><span data-ttu-id="9d2fd-174">Das dem angegebenen Handle zugeordnete <see cref="T:System.Windows.Forms.NativeWindow" />.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-174">The <see cref="T:System.Windows.Forms.NativeWindow" /> associated with the specified handle.</span></span> <span data-ttu-id="9d2fd-175">Diese Methode gibt <see langword="null" /> zurück, wenn dem Handle kein Fenster zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-175">This method returns <see langword="null" /> when the handle does not have an associated window.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-176">Wenn Sie ein Handle von einer anderen Methode erhalten, verwenden Sie diese Methode, um das Fenster abzurufen, das dem Handle zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-176">If you receive a handle from another method, use this method to retrieve the window associated with the handle.</span></span> <span data-ttu-id="9d2fd-177">Das Handle muss bereits im Besitz eines anderen <xref:System.Windows.Forms.NativeWindow> im aktuellen Prozess sein. Andernfalls wird `null` zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-177">The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9d2fd-178">Ruft das Handle für dieses Fenster ab.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-178">Gets the handle for this window.</span></span></summary>
        <value><span data-ttu-id="9d2fd-179">Bei einem erfolgreichen Abruf ein <see cref="T:System.IntPtr" />, der das Handle für das zugeordnete systemeigene Win32-Fenster darstellt, andernfalls 0 (null), wenn dem Fenster kein Handle zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-179">If successful, an <see cref="T:System.IntPtr" /> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-180">Verwenden Sie diese Methode, wenn Sie Windows-API-Methoden aufrufen, die ein Handle für ein Fenster oder Steuerelement erfordern.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-180">Use this method when calling Windows API methods that require a handle for a window or control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d2fd-181">Im folgenden Codebeispiel wird das Erstellen eines Fensters mit einem bestimmten Betriebssystem-Fenster Klassennamen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-181">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="9d2fd-182">Im Beispiel wird eine Klasse erstellt, die von <xref:System.Windows.Forms.NativeWindow> erbt, um dies zu erreichen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-182">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="9d2fd-183">Das Beispiel veranschaulicht auch das Überschreiben der <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>-Methode, um benachrichtigt zu werden, wenn sich die <xref:System.Windows.Forms.NativeWindow.Handle%2A> ändert.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-183">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="9d2fd-184">Die `MyNativeWindow`-Klasse erstellt ein neues Fenster, in dem die <xref:System.Windows.Forms.CreateParams.ClassName%2A> auf Schaltfläche festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-184">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON.</span></span> <span data-ttu-id="9d2fd-185">Dadurch wird ein Win32-Schaltflächen Fenster erstellt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-185">This creates a Win32 button window.</span></span> <span data-ttu-id="9d2fd-186">Der Speicherort und die Größe der Schaltfläche werden zusammen mit der Angabe zusätzlicher Fenster Stile festgelegt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-186">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="9d2fd-187">Die-Klasse veranschaulicht, wie die <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>-Methode verwendet und die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode überschrieben wird, um Fenster Meldungen abzufangen, die empfangen werden.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-187">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="9d2fd-188">Obwohl das Beispiel nach der WM_ACTIVATEAPP Nachricht sucht, könnte dies in einem echten Programm durch Fenster Meldungen ersetzt werden, die für den erstellten Typ spezifisch sind.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-188">Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d2fd-189">Einige Steuerelement Typen senden Ihre Fenster Meldungen an das übergeordnete Fenster anstelle des Fensters.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-189">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="9d2fd-190">Weitere Informationen finden Sie im Windows Platform SDK.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-190">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9d2fd-191">Gibt eine Benachrichtigungsmethode an, die aufgerufen wird, wenn das Handle für ein Fenster geändert wird.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-191">Specifies a notification method that is called when the handle for a window is changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-192">Diese Methode wird aufgerufen, wenn sich der Wert der <xref:System.Windows.Forms.NativeWindow.Handle%2A>-Eigenschaft geändert hat.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-192">This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d2fd-193">Im folgenden Codebeispiel wird das Erstellen eines Fensters mit einem bestimmten Betriebssystem-Fenster Klassennamen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-193">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="9d2fd-194">Im Beispiel wird eine Klasse erstellt, die von <xref:System.Windows.Forms.NativeWindow> erbt, um dies zu erreichen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-194">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="9d2fd-195">Das Beispiel veranschaulicht auch das Überschreiben der <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>-Methode, um benachrichtigt zu werden, wenn sich die <xref:System.Windows.Forms.NativeWindow.Handle%2A> ändert.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-195">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="9d2fd-196">Die `MyNativeWindow`-Klasse erstellt ein neues Fenster, in dem die <xref:System.Windows.Forms.CreateParams.ClassName%2A> auf `BUTTON`festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-196">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="9d2fd-197">Dadurch wird ein Win32-Schaltflächen Fenster erstellt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-197">This creates a Win32 button window.</span></span> <span data-ttu-id="9d2fd-198">Der Speicherort und die Größe der Schaltfläche werden zusammen mit der Angabe zusätzlicher Fenster Stile festgelegt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-198">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="9d2fd-199">Die-Klasse veranschaulicht, wie die <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>-Methode verwendet und die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode überschrieben wird, um Fenster Meldungen abzufangen, die empfangen werden.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-199">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="9d2fd-200">Obwohl das Beispiel nach der WM_ACTIVATEAPP Nachricht sucht, kann dies in einem echten Programm durch Fenster Meldungen ersetzt werden, die für den erstellten Typ spezifisch sind.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-200">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
 <span data-ttu-id="9d2fd-201">Dieser Code ist ein Auszug aus dem Beispiel in der Übersicht über <xref:System.Windows.Forms.NativeWindow>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-201">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="9d2fd-202">Zum Zweck der über sichtlichkeit wird Code nicht angezeigt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-202">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="9d2fd-203">Das gesamte Codelisting finden Sie unter <xref:System.Windows.Forms.NativeWindow>.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-203">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d2fd-204">Einige Steuerelement Typen senden Ihre Fenster Meldungen an das übergeordnete Fenster anstelle des Fensters.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-204">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="9d2fd-205">Weitere Informationen finden Sie im Windows Platform SDK.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-205">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9d2fd-206">Überschreiben Sie diese Methode, um am Fenster Handle vorgenommene Änderungen zu verfolgen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-206">Override this method to track changes that are made to the window handle.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9d2fd-207">Eine <see cref="T:System.Exception" />, die die nicht behandelte Threadausnahme angibt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-207">An <see cref="T:System.Exception" /> that specifies the unhandled thread exception.</span></span></param>
        <summary><span data-ttu-id="9d2fd-208">Verwaltet beim Überschreiben in einer abgeleiteten Klasse eine nicht behandelte Threadausnahme.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-208">When overridden in a derived class, manages an unhandled thread exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-209">In der Regel verarbeitet <xref:System.Windows.Forms.Application.OnThreadException%2A> Thread Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-209">Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9d2fd-210">Gibt das diesem Fenster zugeordnete Handle frei.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-210">Releases the handle associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-211">Mit dieser Methode wird das Fenster Handle nicht zerstört.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-211">This method does not destroy the window handle.</span></span> <span data-ttu-id="9d2fd-212">Stattdessen wird die Fenster Prozedur des Handles auf die Standardfenster Prozedur festgelegt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-212">Instead, it sets the handle's window procedure to the default window procedure.</span></span> <span data-ttu-id="9d2fd-213">Die <xref:System.Windows.Forms.NativeWindow.Handle%2A>-Eigenschaft wird auf 0 festgelegt, und <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> wird aufgerufen, um die Änderung widerzuspiegeln.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-213">It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.</span></span>  
  
 <span data-ttu-id="9d2fd-214">Diese Methode wird automatisch von einem Fenster aufgerufen, wenn eine systemeigene Win32-WM_NCDESTROY Meldung empfangen wird, die angibt, dass das Handle von Windows zerstört wurde.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-214">A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d2fd-215">Im folgenden Codebeispiel wird veranschaulicht, wie Meldungen des Betriebssystem Fensters in einer Fenster Prozedur abgefangen werden.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-215">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="9d2fd-216">Im Beispiel wird eine Klasse erstellt, die von <xref:System.Windows.Forms.NativeWindow> erbt, um dies zu erreichen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-216">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="9d2fd-217">Die `MyNativeWindowListener`-Klasse verknüpft die Fenster Prozedur des Formulars, das an den Konstruktor übergeben wird, und überschreibt die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode, um die `WM_ACTIVATEAPP` Fenster Meldung abzufangen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-217">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="9d2fd-218">Die-Klasse veranschaulicht die Verwendung der Methoden <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> und <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> zum Identifizieren des Fenster Handles, das vom <xref:System.Windows.Forms.NativeWindow> verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-218">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="9d2fd-219">Das Handle wird basierend auf den <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>-und <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> Ereignissen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-219">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="9d2fd-220">Wenn die `WM_ACTIVATEAPP` Fenster Meldung empfangen wird, ruft die-Klasse die `form1.ApplicationActivated`-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-220">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="9d2fd-221">Dieser Code ist ein Auszug aus dem Beispiel in der Übersicht über <xref:System.Windows.Forms.NativeWindow>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-221">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="9d2fd-222">Zum Zweck der über sichtlichkeit wird Code nicht angezeigt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-222">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="9d2fd-223">Das gesamte Codelisting finden Sie unter <xref:System.Windows.Forms.NativeWindow>.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-223">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc : Message -&gt; unit&#xA;override this.WndProc : Message -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="9d2fd-224">Eine <see cref="T:System.Windows.Forms.Message" />, die der aktuellen Windows-Meldung zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-224">A <see cref="T:System.Windows.Forms.Message" /> that is associated with the current Windows message.</span></span></param>
        <summary><span data-ttu-id="9d2fd-225">Ruft die diesem Fenster zugeordnete Standardfensterprozedur auf.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-225">Invokes the default window procedure associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d2fd-226">Diese Methode wird aufgerufen, wenn eine Fenster Meldung an das Handle des Fensters gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-226">This method is called when a window message is sent to the handle of the window.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d2fd-227">Im folgenden Codebeispiel wird veranschaulicht, wie Meldungen des Betriebssystem Fensters in einer Fenster Prozedur abgefangen werden.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-227">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="9d2fd-228">Im Beispiel wird eine Klasse erstellt, die von <xref:System.Windows.Forms.NativeWindow> erbt, um dies zu erreichen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-228">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="9d2fd-229">Die `MyNativeWindowListener`-Klasse verknüpft die Fenster Prozedur des Formulars, das an den Konstruktor übergeben wird, und überschreibt die <xref:System.Windows.Forms.NativeWindow.WndProc%2A>-Methode, um die `WM_ACTIVATEAPP` Fenster Meldung abzufangen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-229">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="9d2fd-230">Die-Klasse veranschaulicht die Verwendung der Methoden <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> und <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> zum Identifizieren des Fenster Handles, das vom <xref:System.Windows.Forms.NativeWindow> verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-230">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="9d2fd-231">Das Handle wird basierend auf den <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>-und <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> Ereignissen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-231">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="9d2fd-232">Wenn die `WM_ACTIVATEAPP` Fenster Meldung empfangen wird, ruft die-Klasse die `form1.ApplicationActivated`-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-232">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="9d2fd-233">Dieser Code ist ein Auszug aus dem Beispiel in der Übersicht über <xref:System.Windows.Forms.NativeWindow>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-233">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="9d2fd-234">Zum Zweck der über sichtlichkeit wird Code nicht angezeigt.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-234">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="9d2fd-235">Das gesamte Codelisting finden Sie unter <xref:System.Windows.Forms.NativeWindow>.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-235">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9d2fd-236">Überschreiben Sie diese Methode, um eine bestimmte Nachrichtenverarbeitung zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-236">Override this method to implement specific message processing.</span></span> <span data-ttu-id="9d2fd-237">Ruft die <c>Basis ab. WndProc</c> für nicht behandelte Nachrichten.</span><span class="sxs-lookup"><span data-stu-id="9d2fd-237">Call <c>base.WndProc</c> for unhandled messages.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>

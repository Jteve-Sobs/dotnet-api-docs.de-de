<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d054fa806912625ae76ff351b1f306709db130f" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77245447" /></Metadata><TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <TypeSignature Language="F#" Value="type SendKeys = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Methoden für das Senden von Tastatureingaben an eine Anwendung bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Windows.Forms.SendKeys>, um Tastenkombinationen und Tastatureingaben an die aktive Anwendung zu senden. Diese Klasse kann nicht instanziiert werden. Verwenden Sie <xref:System.Windows.Forms.SendKeys.Send%2A>, um eine Tastenkombination an eine Klasse zu senden und sofort mit dem Fluss des Programms fortzufahren. Verwenden Sie <xref:System.Windows.Forms.SendKeys.SendWait%2A>, um auf Prozesse zu warten, die mit der Tastatureingabe gestartet wurden.  
  
 Jeder Schlüssel wird durch ein oder mehrere Zeichen dargestellt. Um ein einzelnes Tastatur Zeichen anzugeben, verwenden Sie das Zeichen selbst. Wenn Sie z. b. den Buchstaben a darstellen möchten, übergeben Sie die Zeichenfolge "a" an die-Methode. Fügen Sie jedes zusätzliche Zeichen an das vorangehende Zeichen an, um mehr als ein Zeichen darzustellen. Um die Buchstaben A, B und C darzustellen, geben Sie den Parameter als "ABC" an.  
  
 Das Pluszeichen (+), das Caretzeichen (^), das Prozentzeichen (%), Tilde (~) und die Klammern () haben eine besondere Bedeutung für <xref:System.Windows.Forms.SendKeys>. Um eines dieser Zeichen anzugeben, müssen Sie es in geschweifte Klammern ({}) einschließen. Um z. b. das Pluszeichen anzugeben, verwenden Sie "{+}". Um geschweifter Klammern anzugeben, verwenden Sie "{{}" und "{}}". Eckige Klammern ([]) haben keine besondere Bedeutung für <xref:System.Windows.Forms.SendKeys>, Sie müssen Sie jedoch in geschweifte Klammern einschließen. In anderen Anwendungen haben eckige Klammern eine besondere Bedeutung, die ggf. signifikant ist, wenn DDE (Dynamic Data Exchange) auftritt.  
  
> [!CAUTION]
>  Wenn Ihre Anwendung für internationale Verwendung mit unterschiedlichen Tastaturen vorgesehen ist, kann ein Verwenden von <xref:System.Windows.Forms.SendKeys.Send%2A> zu unvorhersehbaren Ergebnissen führen und sollte vermieden werden.  
  
 Verwenden Sie die Codes in der folgenden Tabelle, um Zeichen anzugeben, die nicht angezeigt werden, wenn Sie eine Taste drücken, z. b. Eingabe oder Tabulator Taste, und Schlüssel, die Aktionen anstelle von Zeichen darstellen.  
  
|Key|Code|  
|---------|----------|  
|RÜCKTASTE|{Backspace}, {b} oder {Bksp}|  
|BREAK|Umbruch|  
|Feststelltaste|{CapsLock}|  
|ENTF oder löschen|{DELETE} oder {del}|  
|NACH-UNTEN-TASTE|Auf|  
|END|Schließlich|  
|EINGABETASTE|{Enter} oder ~|  
|ESC|{ESC}|  
|HELP|Hilft|  
|POS1|{HOME}|  
|INS oder einfügen|{INSERT} oder {ins}|  
|NACH-LINKS-TASTE|Linken|  
|NUM-Sperre|NUM|  
|BILD-AB|{PGDN}|  
|BILD-AUF|{PGUP}|  
|Bildschirm drucken|{PrtSc} (für zukünftige Verwendung reserviert)|  
|NACH-RECHTS-TASTE|Rechten|  
|Scrollsperre|{ScrollLock}|  
|TAB|{TAB}|  
|NACH-OBEN-TASTE|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Keypad hinzufügen|Eren|  
|Keypad subtrahieren|Subtrahieren|  
|Tastenkombination|Lik|  
|Unterteilung von Keypad|Glie|  
  
 Um Schlüssel in Kombination mit einer Kombination der UMSCHALT-, STRG-und Alt-Taste anzugeben, stellen Sie dem Schlüsselcode einen oder mehrere der folgenden Codes voran.  
  
|Key|Code|  
|---------|----------|  
|Schuss|+|  
|Drücken|^|  
|ALT|%|  
  
 Um anzugeben, dass eine beliebige Kombination von Shift, STRG und Alt gedrückt bleiben soll, während mehrere andere Tasten gedrückt werden, schließen Sie den Code für diese Schlüssel in Klammern ein. Um beispielsweise anzugeben, dass die UMSCHALTTASTE gedrückt werden soll, während E und C gedrückt werden, verwenden Sie "+ (EC)". Um anzugeben, dass die UMSCHALTTASTE gedrückt werden soll, während E gedrückt wird, gefolgt von C ohne Shift, verwenden Sie "+ EC".  
  
 Verwenden Sie das Format {Key Number}, um sich wiederholende Schlüssel anzugeben. Sie müssen ein Leerzeichen zwischen Schlüssel und Zahl platzieren. {Left 42} bedeutet beispielsweise, dass die nach-links-Taste 42 Mal gedrückt wird. {h 10} bedeutet, h 10-Mal zu drücken.  
  
> [!NOTE]
>  Da keine verwaltete Methode zum Aktivieren einer anderen Anwendung vorhanden ist, können Sie diese Klasse in der aktuellen Anwendung verwenden oder systemeigene Windows-Methoden verwenden, wie z. b. `FindWindow` und `SetForegroundWindow`, um den Fokus auf andere Anwendungen zu erzwingen.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.SendKeys>-Klasse wurde für .NET Framework 3.0 aktualisiert, damit sie in Anwendungen verwendet werden kann, die unter Windows Vista ausgeführt werden. Die verbesserte Sicherheit von Windows Vista (Stichwort Benutzerkontensteuerung) verhindert, dass die vorherige Implementierung ordnungsgemäß funktioniert.  
>   
>  Die <xref:System.Windows.Forms.SendKeys> -Klasse ist anfällig für Probleme hinsichtlich der zeitlichen Steuerung, sodass einige Entwickler gezwungen waren, Umgehungslösungen zu finden. Die aktualisierte Implementierung ist immer noch anfällig für Probleme hinsichtlich der zeitlichen Steuerung, ist jedoch etwas schneller und erfordert möglicherweise Änderungen an den Umgehungslösungen. Die <xref:System.Windows.Forms.SendKeys> -Klasse versucht zunächst, die vorherige Implementierung zu verwenden. Schlägt dies fehl, wird die neue Implementierung verwendet. Infolgedessen verhält sich die <xref:System.Windows.Forms.SendKeys> -Klasse unter verschiedenen Betriebssystemen möglicherweise unterschiedlich. Verwendet die <xref:System.Windows.Forms.SendKeys> -Klasse die neue Implementierung, wartet die <xref:System.Windows.Forms.SendKeys.SendWait%2A> -Methode nicht auf zu verarbeitende Nachrichten, wenn diese an einen anderen Prozess gesendet werden.  
>   
>  Ist für Ihre Anwendung ein einheitliches, vom Betriebssystem unabhängiges Verhalten erforderlich, können Sie für die <xref:System.Windows.Forms.SendKeys> -Klasse das Verwenden der neuen Implementierung erzwingen, indem Sie die folgende Anwendungseinstellung in Ihre "app.config"-Datei einfügen.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Soll die <xref:System.Windows.Forms.SendKeys> -Klasse gezwungen werden, die vorherige Implementierung zu verwenden, geben Sie stattdessen den Wert `"JournalHook"` an.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt, wie Sie die <xref:System.Windows.Forms.SendKeys.Send%2A>-Methode verwenden. Fügen Sie den folgenden Code in ein Formular namens Form1 ein, das eine Schaltfläche mit dem Namen Button1 enthält, um das Beispiel auszuführen. Stellen Sie sicher, dass die Click-Ereignisse mit den Ereignis Behandlungsmethoden in diesem Beispiel verknüpft sind. Die <xref:System.Windows.Forms.Control.TabIndex%2A>-Eigenschaft des Schaltflächen-Steuer Elements muss auf 0 festgelegt werden. Wenn das Beispiel ausgeführt wird, doppelklicken Sie auf das Formular, um das Click-Ereignis der Schaltfläche aufzurufenden.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Windows.Forms.SendKeys.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verarbeitet alle Windows-Meldungen, die sich derzeit in der Meldungswarteschlange befinden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Windows.Forms.SendKeys.Flush%2A>, um zu warten, bis die Anwendung Tastatureingaben und andere Betriebssystem Meldungen in der Nachrichten Warteschlange verarbeitet. Dies entspricht dem Aufrufen von <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType>, bis keine weiteren zu verarbeitenden Schlüssel mehr vorhanden sind.  
  
> [!NOTE]
>  Da keine verwaltete Methode zum Aktivieren einer anderen Anwendung vorhanden ist, können Sie diese Klasse in der aktuellen Anwendung verwenden oder systemeigene Windows-Methoden verwenden, wie z. b. `FindWindow` und `SetForegroundWindow`, um den Fokus auf andere Anwendungen zu erzwingen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member Send : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.Send keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Die zu sendende Zeichenfolge der Tastatureingaben.</param>
        <summary>Sendet Tastatureingaben an die aktive Anwendung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeder Schlüssel wird durch ein oder mehrere Zeichen dargestellt. Um ein einzelnes Tastatur Zeichen anzugeben, verwenden Sie das Zeichen selbst. Wenn Sie z. b. den Buchstaben a darstellen möchten, übergeben Sie die Zeichenfolge "a" an die-Methode. Fügen Sie jedes zusätzliche Zeichen an das vorangehende Zeichen an, um mehr als ein Zeichen darzustellen. Um die Buchstaben A, B und C darzustellen, geben Sie den Parameter als "ABC" an.  
  
 Das Pluszeichen (+), das Caretzeichen (^), das Prozentzeichen (%), Tilde (~) und die Klammern () haben eine besondere Bedeutung für <xref:System.Windows.Forms.SendKeys>. Um eines dieser Zeichen anzugeben, müssen Sie es in geschweifte Klammern ({}) einschließen. Um z. b. das Pluszeichen anzugeben, verwenden Sie "{+}". Um geschweifter Klammern anzugeben, verwenden Sie "{{}" und "{}}". Eckige Klammern ([]) haben keine besondere Bedeutung für <xref:System.Windows.Forms.SendKeys>, Sie müssen Sie jedoch in geschweifte Klammern einschließen. In anderen Anwendungen haben eckige Klammern eine besondere Bedeutung, die ggf. signifikant ist, wenn DDE (Dynamic Data Exchange) auftritt.  
  
> [!CAUTION]
>  Wenn Ihre Anwendung für internationale Verwendung mit unterschiedlichen Tastaturen vorgesehen ist, kann ein Verwenden von <xref:System.Windows.Forms.SendKeys.Send%2A> zu unvorhersehbaren Ergebnissen führen und sollte vermieden werden.  
  
 Verwenden Sie die Codes in der folgenden Tabelle, um Zeichen anzugeben, die nicht angezeigt werden, wenn Sie eine Taste drücken, z. b. Eingabe oder Tabulator Taste, und Schlüssel, die Aktionen anstelle von Zeichen darstellen.  
  
|Key|Code|  
|---------|----------|  
|RÜCKTASTE|{Backspace}, {b} oder {Bksp}|  
|BREAK|Umbruch|  
|Feststelltaste|{CapsLock}|  
|ENTF oder löschen|{DELETE} oder {del}|  
|NACH-UNTEN-TASTE|Auf|  
|END|Schließlich|  
|EINGABETASTE|{Enter} oder ~|  
|ESC|{ESC}|  
|HELP|Hilft|  
|POS1|{HOME}|  
|INS oder einfügen|{INSERT} oder {ins}|  
|NACH-LINKS-TASTE|Linken|  
|NUM-Sperre|NUM|  
|BILD-AB|{PGDN}|  
|BILD-AUF|{PGUP}|  
|Bildschirm drucken|{PrtSc} (für zukünftige Verwendung reserviert)|  
|NACH-RECHTS-TASTE|Rechten|  
|Scrollsperre|{ScrollLock}|  
|TAB|{TAB}|  
|NACH-OBEN-TASTE|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Keypad hinzufügen|Eren|  
|Keypad subtrahieren|Subtrahieren|  
|Tastenkombination|Lik|  
|Unterteilung von Keypad|Glie|  
  
 Um Schlüssel in Kombination mit einer Kombination der UMSCHALT-, STRG-und Alt-Taste anzugeben, stellen Sie dem Schlüsselcode einen oder mehrere der folgenden Codes voran.  
  
|Key|Code|  
|---------|----------|  
|Schuss|+|  
|Drücken|^|  
|ALT|%|  
  
 Um anzugeben, dass eine beliebige Kombination von Shift, STRG und Alt gedrückt bleiben soll, während mehrere andere Tasten gedrückt werden, schließen Sie den Code für diese Schlüssel in Klammern ein. Um beispielsweise anzugeben, dass die UMSCHALTTASTE gedrückt werden soll, während E und C gedrückt werden, verwenden Sie "+ (EC)". Um anzugeben, dass die UMSCHALTTASTE gedrückt werden soll, während E gedrückt wird, gefolgt von C ohne Shift, verwenden Sie "+ EC".  
  
 Verwenden Sie das Format {Key Number}, um sich wiederholende Schlüssel anzugeben. Sie müssen ein Leerzeichen zwischen Schlüssel und Zahl platzieren. {Left 42} bedeutet beispielsweise, dass die nach-links-Taste 42 Mal gedrückt wird. {h 10} bedeutet, h 10-Mal zu drücken.  
  
> [!NOTE]
>  Da keine verwaltete Methode zum Aktivieren einer anderen Anwendung vorhanden ist, können Sie diese Klasse in der aktuellen Anwendung verwenden oder systemeigene Windows-Methoden verwenden, wie z. b. `FindWindow` und `SetForegroundWindow`, um den Fokus auf andere Anwendungen zu erzwingen.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.SendKeys>-Klasse wurde für .NET Framework 3.0 aktualisiert, damit sie in Anwendungen verwendet werden kann, die unter Windows Vista ausgeführt werden. Die verbesserte Sicherheit von Windows Vista (Stichwort Benutzerkontensteuerung) verhindert, dass die vorherige Implementierung ordnungsgemäß funktioniert.  
>   
>  Die <xref:System.Windows.Forms.SendKeys> -Klasse ist anfällig für Probleme hinsichtlich der zeitlichen Steuerung, sodass einige Entwickler gezwungen waren, Umgehungslösungen zu finden. Die aktualisierte Implementierung ist immer noch anfällig für Probleme hinsichtlich der zeitlichen Steuerung, ist jedoch etwas schneller und erfordert möglicherweise Änderungen an den Umgehungslösungen. Die <xref:System.Windows.Forms.SendKeys> -Klasse versucht zunächst, die vorherige Implementierung zu verwenden. Schlägt dies fehl, wird die neue Implementierung verwendet. Infolgedessen verhält sich die <xref:System.Windows.Forms.SendKeys> -Klasse unter verschiedenen Betriebssystemen möglicherweise unterschiedlich. Verwendet die <xref:System.Windows.Forms.SendKeys> -Klasse die neue Implementierung, wartet die <xref:System.Windows.Forms.SendKeys.SendWait%2A> -Methode nicht auf zu verarbeitende Nachrichten, wenn diese an einen anderen Prozess gesendet werden.  
>   
>  Ist für Ihre Anwendung ein einheitliches, vom Betriebssystem unabhängiges Verhalten erforderlich, können Sie für die <xref:System.Windows.Forms.SendKeys> -Klasse das Verwenden der neuen Implementierung erzwingen, indem Sie die folgende Anwendungseinstellung in Ihre "app.config"-Datei einfügen.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Soll die <xref:System.Windows.Forms.SendKeys> -Klasse gezwungen werden, die vorherige Implementierung zu verwenden, geben Sie stattdessen den Wert `"JournalHook"` an.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Windows.Forms.SendKeys.Send%2A>-Methode veranschaulicht. Fügen Sie den folgenden Code in ein Formular namens Form1 ein, das eine Schaltfläche mit dem Namen Button1 enthält, um das Beispiel auszuführen. Stellen Sie sicher, dass die Click-Ereignisse mit den Ereignis Behandlungsmethoden in diesem Beispiel verknüpft sind. Die <xref:System.Windows.Forms.Control.TabIndex%2A>-Eigenschaft des Schaltflächen-Steuer Elements muss auf 0 festgelegt werden. Wenn das Beispiel ausgeführt wird, doppelklicken Sie auf das Formular, um das Click-Ereignis der Schaltfläche aufzurufenden.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Es ist keine aktive Anwendung vorhanden, an die Tastaturanschläge gesendet werden können.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keys" /> stellt keine gültigen Tastaturanschläge dar</exception>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member SendWait : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.SendWait keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Die zu sendende Zeichenfolge der Tastatureingaben.</param>
        <summary>Sendet die angegebenen Tasten an die aktive Anwendung und wartet anschließend die Verarbeitung der Meldungen ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Windows.Forms.SendKeys.SendWait%2A>, um Tastatureingaben oder Kombinationen von Tastatureingaben an die aktive Anwendung zu senden, und warten Sie, bis die Tastatureingaben verarbeitet werden. Mit dieser Methode können Sie Tastatureingaben an eine Anwendung senden und warten, bis alle Prozesse abgeschlossen sind, die durch die Tastatureingaben gestartet werden. Dies kann wichtig sein, wenn die andere Anwendung abgeschlossen werden muss, bevor die Anwendung fortgesetzt werden kann.  
  
> [!NOTE]
>  Da keine verwaltete Methode zum Aktivieren einer anderen Anwendung vorhanden ist, können Sie diese Klasse in der aktuellen Anwendung verwenden oder systemeigene Windows-Methoden verwenden, wie z. b. `FindWindow` und `SetForegroundWindow`, um den Fokus auf andere Anwendungen zu erzwingen.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.SendKeys>-Klasse wurde für .NET Framework 3.0 aktualisiert, damit sie in Anwendungen verwendet werden kann, die unter Windows Vista ausgeführt werden. Die verbesserte Sicherheit von Windows Vista (Stichwort Benutzerkontensteuerung) verhindert, dass die vorherige Implementierung ordnungsgemäß funktioniert.  
>   
>  Die <xref:System.Windows.Forms.SendKeys> -Klasse ist anfällig für Probleme hinsichtlich der zeitlichen Steuerung, sodass einige Entwickler gezwungen waren, Umgehungslösungen zu finden. Die aktualisierte Implementierung ist immer noch anfällig für Probleme hinsichtlich der zeitlichen Steuerung, ist jedoch etwas schneller und erfordert möglicherweise Änderungen an den Umgehungslösungen. Die <xref:System.Windows.Forms.SendKeys> -Klasse versucht zunächst, die vorherige Implementierung zu verwenden. Schlägt dies fehl, wird die neue Implementierung verwendet. Infolgedessen verhält sich die <xref:System.Windows.Forms.SendKeys> -Klasse unter verschiedenen Betriebssystemen möglicherweise unterschiedlich. Verwendet die <xref:System.Windows.Forms.SendKeys> -Klasse die neue Implementierung, wartet die <xref:System.Windows.Forms.SendKeys.SendWait%2A> -Methode nicht auf zu verarbeitende Nachrichten, wenn diese an einen anderen Prozess gesendet werden.  
>   
>  Ist für Ihre Anwendung ein einheitliches, vom Betriebssystem unabhängiges Verhalten erforderlich, können Sie für die <xref:System.Windows.Forms.SendKeys> -Klasse das Verwenden der neuen Implementierung erzwingen, indem Sie die folgende Anwendungseinstellung in Ihre "app.config"-Datei einfügen.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Soll die <xref:System.Windows.Forms.SendKeys> -Klasse gezwungen werden, die vorherige Implementierung zu verwenden, geben Sie stattdessen den Wert `"JournalHook"` an.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

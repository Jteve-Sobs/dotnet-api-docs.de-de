<Type Name="LinkLabel" FullName="System.Windows.Forms.LinkLabel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6270888e9c2b47c79d8e40a2ebb252763b0e57e0" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39905729" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinkLabel : System.Windows.Forms.Label, System.Windows.Forms.IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinkLabel extends System.Windows.Forms.Label implements class System.Windows.Forms.IButtonControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.LinkLabel" />
  <TypeSignature Language="VB.NET" Value="Public Class LinkLabel&#xA;Inherits Label&#xA;Implements IButtonControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinkLabel : System::Windows::Forms::Label, System::Windows::Forms::IButtonControl" />
  <TypeSignature Language="F#" Value="type LinkLabel = class&#xA;    inherit Label&#xA;    interface IButtonControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Label</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IButtonControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.DefaultEvent("LinkClicked")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.ToolboxItem("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItem("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Label-Steuerelement in Windows dar, das Links anzeigen kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolStripLabel> -Steuerelement ersetzt und funktionell erweitert die <xref:System.Windows.Forms.Label> und <xref:System.Windows.Forms.LinkLabel> Steuerelemente. Allerdings die <xref:System.Windows.Forms.Label> und <xref:System.Windows.Forms.LinkLabel> Steuerelemente werden für Abwärtskompatibilität und zur künftigen Verwendung beibehalten, falls gewünscht.  
  
 Die <xref:System.Windows.Forms.LinkLabel> -Steuerelement ähnelt einem <xref:System.Windows.Forms.Label> -Steuerelement mit der Ausnahme, dass es einen Link angezeigt werden kann. Mehrere Links können im Text des Steuerelements angegeben werden. Jeder Link kann innerhalb einer Anwendung eine andere Aufgabe ausführen. Beispielsweise können Sie einen Link ein um eine Website in Microsoft Internet Explorer anzuzeigen oder eine Protokolldatei, die einer Anwendung zugeordnete zu laden.  
  
 Jeden Link angezeigt, der <xref:System.Windows.Forms.LinkLabel> Steuerelement ist eine Instanz der <xref:System.Windows.Forms.LinkLabel.Link> Klasse. Die <xref:System.Windows.Forms.LinkLabel.Link> -Klasse definiert wird, werden Informationen, Bundesland und Ort des Links. Darüber hinaus die <xref:System.Windows.Forms.LinkLabel.Link.LinkData%2A> Eigenschaft der <xref:System.Windows.Forms.LinkLabel.Link> -Klasse können Sie Informationen, z. B. eine URL angezeigt werden, mit dem Link zu verknüpfen. Klickt ein Benutzer einen Link innerhalb des Steuerelements die <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis wird ausgelöst, und die <xref:System.Windows.Forms.LinkLabel.Link> Objekt, die den Hyperlink, der auf die geklickt wurde darstellt, übergeben als Teil der <xref:System.Windows.Forms.LinkLabelLinkClickedEventArgs> -Objekt, das als Parameter an den Ereignishandler übergeben wird. Können Sie dieses Objekt zum Abrufen der <xref:System.Windows.Forms.LinkLabel.Link> Objekt verknüpft ist, mit den Hyperlink, der vom Benutzer geklickt wurde. Alle Links, die innerhalb der <xref:System.Windows.Forms.LinkLabel> Steuerelement befinden sich in der <xref:System.Windows.Forms.LinkLabel.LinkCollection> Klasseninstanz, für das Steuerelement.  
  
 Es gibt zwei Möglichkeiten zum Hinzufügen eines Links zu den <xref:System.Windows.Forms.LinkLabel> Steuerelement. Die schnellste Methode ist an eine <xref:System.Windows.Forms.LinkArea> und weisen sie Sie der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> Eigenschaft. Dadurch können Sie einen einzelnen Link im Text des Steuerelements anzugeben. Mehrere Links hinzufügen, können Sie die <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A> Methode der <xref:System.Windows.Forms.LinkLabel.LinkCollection> Klasse durch den Zugriff auf die Auflistung über den <xref:System.Windows.Forms.LinkLabel.Links%2A> Eigenschaft.  
  
 Wenn eine <xref:System.Windows.Forms.LinkLabel> Steuerelement erstellt wird, wird einen Standardhyperlink, der alle Text enthält die <xref:System.Windows.Forms.LinkLabel> Steuerelement hinzugefügt wird die <xref:System.Windows.Forms.LinkLabel.LinkCollection>. Sie können diese Standardlink überschreiben, indem Sie einen neuen Linkbereich mit Angabe der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> -Eigenschaft, oder geben Sie eine Verknüpfung mit der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A> -Methode der der <xref:System.Windows.Forms.LinkLabel.LinkCollection>. Sie können auch die Standard-Hyperlink entfernen, mit der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Remove%2A> Methode der <xref:System.Windows.Forms.LinkLabel.LinkCollection> Klasse.  
  
 Die <xref:System.Windows.Forms.Label.TabStop%2A> Eigenschaft `true` standardmäßig, solange es ist mindestens ein Link mit einer Länge größer als 0 (null) in der <xref:System.Windows.Forms.LinkLabel.Links%2A> Auflistung. Die <xref:System.Windows.Forms.LinkLabel> Steuerelement verfügt über eine einzelne <xref:System.Windows.Forms.Control.TabIndex%2A> Wert. Jeder Link mit einer Länge größer als 0 wird jedoch eine eigene Tabstopp, in der Reihenfolge von links nach rechts. Um zu verhindern, dass bei der Registerkartennavigation auf die <xref:System.Windows.Forms.LinkLabel> steuern, legen Sie die <xref:System.Windows.Forms.Label.TabStop%2A> Eigenschaft, um `false`. Bedenken Sie jedoch, Hinzufügen von neuen Links zu den <xref:System.Windows.Forms.LinkLabel.Links%2A> Sammlung wird automatisch festgelegt. die <xref:System.Windows.Forms.Label.TabStop%2A> Eigenschaft `true` erneut.  
  
 Die <xref:System.Windows.Forms.LinkLabel> bietet eine Reihe von Eigenschaften, die Ihnen ermöglichen, die Darstellung von links im Steuerelement zu definieren. Die <xref:System.Windows.Forms.LinkLabel.ActiveLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, und <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaften definieren die Farben verwendet, wenn Sie einen Link in verschiedenen Zuständen anzeigen. Die <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A> -Eigenschaft definiert die Anzeige der Unterstreichung, der mit einem Link zugeordnet ist.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.LinkLabel> Klasse. Das Beispiel behandelt die <xref:System.Windows.Forms.LinkLabel.LinkClicked> -Ereignis durch Öffnen einer Website.  
  
 [!code-csharp[System.Windows.Forms.LinkLabelSimple#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelSimple/CS/form.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabelSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelSimple/VB/form.vb#1)]  
  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.LinkLabel> Klasse, wobei mehrere <xref:System.Windows.Forms.LinkArea> Abschnitten definiert sind, um eine Bezeichnung auf einem Formular angezeigt. Das Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, und <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaften zum Anpassen des Aussehens von der <xref:System.Windows.Forms.LinkLabel>. Die erste <xref:System.Windows.Forms.LinkArea> angegeben ist, mit der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> Eigenschaft. Weitere Links werden hinzugefügt, um die <xref:System.Windows.Forms.LinkLabel> mithilfe der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> Methode. Die Beispiel-Handles der <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis durch Starten des Webbrowsers für Links und Anzeigen einer <xref:System.Windows.Forms.MessageBox> für andere Links.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Label" />
    <altmember cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs" />
    <altmember cref="T:System.Windows.Forms.LinkLabel.Link" />
    <altmember cref="T:System.Windows.Forms.LinkLabel.LinkCollection" />
    <altmember cref="T:System.Windows.Forms.ToolStripLabel" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinkLabel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinkLabel();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Standardinstanz der <see cref="T:System.Windows.Forms.LinkLabel" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.LinkLabel> Klasse, wobei mehrere <xref:System.Windows.Forms.LinkArea> Abschnitten definiert sind, um eine Bezeichnung auf einem Formular angezeigt. Das Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, und <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaften zum Anpassen des Aussehens von der <xref:System.Windows.Forms.LinkLabel>. Die erste <xref:System.Windows.Forms.LinkArea> angegeben ist, mit der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> Eigenschaft. Weitere Links werden hinzugefügt, um die <xref:System.Windows.Forms.LinkLabel> mithilfe der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> Methode. Die Beispiel-Handles der <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis durch Starten des Webbrowsers für Links und Anzeigen einer <xref:System.Windows.Forms.MessageBox> für andere Links.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ActiveLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ActiveLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.ActiveLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ActiveLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ActiveLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ActiveLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.LinkLabel.ActiveLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Farbe ab, in der ein aktiver Link angezeigt wird, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Color" />, die die Farbe für die Anzeige eines aktiven Links darstellt. Die Standardfarbe wird durch das System angegeben; üblicherweise ist dies die Farbe <see langword="Color.Red" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein aktiver Link ist ein Link, der gerade geklickt wird. Dies ist vergleichbar mit den "gedrückten" Zustand von einer <xref:System.Windows.Forms.Button> Steuerelement. Sie können diese Eigenschaft verwenden, um die Farbe anzugeben, der in der Link angezeigt wird, wenn der Link ist gerade geklickt wird.  
  
 Es gibt eine Anzahl von Farben, die einen Link zugeordnet. Die <xref:System.Windows.Forms.LinkLabel.LinkColor%2A> gibt die Farbe aller Links angezeigt, der <xref:System.Windows.Forms.LinkLabel> Steuerelement. Die <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaft können Sie die Farbe eines Links angeben, nachdem er vom Benutzer besucht wurde. Wenn ein Link deaktiviert ist, die <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A> wird verwendet, um den Link in einem deaktivierten Status anzuzeigen.  
  
> [!NOTE]
>  Wenn Sie diese Eigenschaft festlegen, stellen Sie sicher, dass die Farbe Sie die Eigenschaft legen, die nicht zu Konflikten mit der Hintergrundfarbe des Steuerelements oder der Text wird nicht korrekt angezeigt. Wenn die Hintergrundfarbe des Steuerelements ist z. B. `Color.Red` und diese Eigenschaft wird festgelegt, um `Color.Red`, der Text ist nicht richtig angezeigt bei der Link ist gerade geklickt wird.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A> Eigenschaft mit dem <xref:System.Windows.Forms.LinkBehavior> Enumeration. Außerdem zeigt es die Einstellung der <xref:System.Windows.Forms.LinkLabel.ActiveLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A> und <xref:System.Windows.Forms.LinkLabel.LinkVisited%2A> Eigenschaften. Zum Ausführen in diesem Beispiel fügen Sie ihn in ein leeres Formular, und rufen `InitializeLinkLabel` aus den Konstruktor des Formulars oder `Load` Methode.  
  
 [!code-cpp[System.Windows.Forms.LinkLabelExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabelExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabelExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.DisabledLinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.LinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.VisitedLinkColor" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="linkLabel.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein neues Objekt für die Barrierefreiheit für das <see cref="T:System.Windows.Forms.LinkLabel" />-Steuerelement.</summary>
        <returns>Ein neues <see cref="T:System.Windows.Forms.AccessibleObject" /> für das Steuerelement.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie die <xref:System.Windows.Forms.LinkLabel.CreateAccessibilityInstance%2A>-Methode nicht explizit aufrufen, wird sie beim Verweis auf die <xref:System.Windows.Forms.Control.AccessibilityObject%2A>-Eigenschaft aufgerufen.  
  
 Hinweis: zum Abrufen oder Festlegen der <xref:System.Windows.Forms.Control.AccessibilityObject%2A> -Eigenschaft, müssen Sie einen Verweis auf die mit .NET Framework installierte Eingabenhilfenassembly hinzufügen.  
  
 Hinweise für Vererber: beim Überschreiben von <xref:System.Windows.Forms.LinkLabel.CreateAccessibilityInstance%2A> in einer abgeleiteten Klasse, sollten Sie nicht der Basisklasse aufrufen <xref:System.Windows.Forms.LinkLabel.CreateAccessibilityInstance%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateHandle : unit -&gt; unit" Usage="linkLabel.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein Handle für dieses Steuerelement. Diese Methode sollte ausschließlich von .NET Framework aufgerufen werden. Erbende Klassen sollten immer <see langword="base.createHandle" /> aufrufen, wenn sie diese Methode überschreiben.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisabledLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color DisabledLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color DisabledLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.DisabledLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property DisabledLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color DisabledLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.DisabledLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.LinkLabel.DisabledLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Farbe ab, in der ein deaktivierter Link angezeigt wird, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Color" />, die die Farbe für die Anzeige eines deaktivierten Links darstellt. Der Standardwert ist <see langword="Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Eigenschaft können Sie die Farbe für Links angeben, die deaktiviert sind, in der <xref:System.Windows.Forms.LinkLabel>. Deaktivierter Links führen nicht dazu, dass die <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis ausgelöst wurde.  
  
 Es gibt eine Anzahl von Farben, die einen Link zugeordnet. Alle Links in der <xref:System.Windows.Forms.LinkLabel> werden zuerst angezeigt, mit der Farbe, die definiert, der <xref:System.Windows.Forms.LinkLabel.LinkColor%2A> Eigenschaft. Die <xref:System.Windows.Forms.LinkLabel.ActiveLinkColor%2A> Eigenschaft können Sie die Farbe des Links angeben, wenn es gerade geklickt wird. Die <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaft können Sie die Farbe eines Links angeben, nachdem er vom Benutzer besucht wurde.  
  
> [!NOTE]
>  Wenn Sie diese Eigenschaft festlegen, stellen Sie sicher, dass die Farbe Sie die Eigenschaft legen, die nicht zu Konflikten mit der Hintergrundfarbe des Steuerelements oder der Text wird nicht korrekt angezeigt. Wenn die Hintergrundfarbe des Steuerelements ist z. B. `Color.Red` und diese Eigenschaft wird festgelegt, um `Color.Red`, der Text ist nicht richtig angezeigt bei der Verknüpfung deaktiviert ist.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.LinkLabel> Klasse, wobei mehrere <xref:System.Windows.Forms.LinkArea> Abschnitten definiert sind, um eine Bezeichnung auf einem Formular angezeigt. Das Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, und <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaften zum Anpassen des Aussehens von der <xref:System.Windows.Forms.LinkLabel>. Die erste <xref:System.Windows.Forms.LinkArea> angegeben ist, mit der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> Eigenschaft. Weitere Links werden hinzugefügt, um die <xref:System.Windows.Forms.LinkLabel> mithilfe der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> Methode. Die Beispiel-Handles der <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis durch Starten des Webbrowsers für Links und Anzeigen einer <xref:System.Windows.Forms.MessageBox> für andere Links.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.LinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.ActiveLinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.VisitedLinkColor" />
      </Docs>
    </Member>
    <Member MemberName="FlatStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FlatStyle FlatStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.FlatStyle FlatStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.FlatStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FlatStyle As FlatStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FlatStyle FlatStyle { System::Windows::Forms::FlatStyle get(); void set(System::Windows::Forms::FlatStyle value); };" />
      <MemberSignature Language="F#" Value="member this.FlatStyle : System.Windows.Forms.FlatStyle with get, set" Usage="System.Windows.Forms.LinkLabel.FlatStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FlatStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Format für die flache Darstellung des <see cref="T:System.Windows.Forms.LinkLabel" />-Steuerelements ab oder legt dieses fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.FlatStyle" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für diese Klasse nicht relevant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkArea">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.LinkArea LinkArea { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.LinkArea LinkArea" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.LinkArea" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkArea As LinkArea" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::LinkArea LinkArea { System::Windows::Forms::LinkArea get(); void set(System::Windows::Forms::LinkArea value); };" />
      <MemberSignature Language="F#" Value="member this.LinkArea : System.Windows.Forms.LinkArea with get, set" Usage="System.Windows.Forms.LinkLabel.LinkArea" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.LinkAreaEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.LinkAreaEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.LinkAreaEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkArea</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Textbereich ab, der als Link behandelt werden soll, oder legt diesen fest.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.LinkArea" />, die den als Link behandelten Bereich darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> Eigenschaft bietet eine schnelle Möglichkeit, einen einzelnen Link im Text des anzuzeigenden anzugeben der <xref:System.Windows.Forms.LinkLabel> Steuerelement. Die <xref:System.Windows.Forms.LinkArea> -Objekt bietet Eigenschaften, die die Anfangsposition des Links im Text des Steuerelements sowie die Länge des Texts für den Link angeben. Wenn Sie ein Link mit angegeben wird die <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> -Eigenschaft, der Link hinzugefügt wird die <xref:System.Windows.Forms.LinkLabel.LinkCollection> des Steuerelements. Die <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> Eigenschaft konvertiert die <xref:System.Windows.Forms.LinkArea> Objekt zugewiesen wird, sodass eine <xref:System.Windows.Forms.LinkLabel.Link> -Objekt, das in der Auflistung gespeichert ist.  
  
 Mehrere Links auf den Text des Steuerelements hinzufügen, können Sie die <xref:System.Windows.Forms.LinkLabel.Links%2A> Eigenschaft. Die <xref:System.Windows.Forms.LinkLabel.Links%2A> Eigenschaft können Sie die Eigenschaften und Methoden der Zugriff auf die <xref:System.Windows.Forms.LinkLabel.LinkCollection>, speichern die Links für das Steuerelement angegeben. Diese Methode zum Hinzufügen von Links zu den <xref:System.Windows.Forms.LinkLabel> auch ermöglicht Ihnen die Angabe von Daten in die <xref:System.Windows.Forms.LinkLabel.Link.LinkData%2A> -Eigenschaft, die gerade erstellten Link zugeordnet ist. Der Wert des der <xref:System.Windows.Forms.LinkLabel.Link.LinkData%2A> Eigenschaft kann verwendet werden, um den Speicherort einer Datei, die Anzeige oder die Adresse einer Website zu speichern.  
  
 Wenn eine <xref:System.Windows.Forms.LinkLabel> Steuerelement erstellt wird, wird einen Standardhyperlink, der alle Text enthält die <xref:System.Windows.Forms.LinkLabel> Steuerelement hinzugefügt wird die <xref:System.Windows.Forms.LinkLabel.LinkCollection>. Sie können diese Standardlink überschreiben, indem Sie einen neuen Linkbereich mit Angabe der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> -Eigenschaft, oder geben Sie eine Verknüpfung mit der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A> -Methode der der <xref:System.Windows.Forms.LinkLabel.LinkCollection>. Sie können auch die Standard-Hyperlink entfernen, mit der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Remove%2A> Methode der <xref:System.Windows.Forms.LinkLabel.LinkCollection> Klasse.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> Eigenschaft gibt immer das erste Element in der <xref:System.Windows.Forms.LinkLabel.LinkCollection>, unabhängig davon, wie der Link der Auflistung hinzugefügt wurde.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.LinkArea.Length%2A> Eigenschaft <xref:System.Windows.Forms.LinkArea> variieren, wenn Sie aufrufen <xref:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering%2A>, und die <xref:System.Windows.Forms.LinkLabel.Text%2A> -Eigenschaft Doppelbyte-Zeichen enthält. Wenn Sie aufrufen <xref:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering%2A>, wird die Anzahl der Bytes in der Zeichenfolge zurückgegeben. Andernfalls wird die tatsächliche Anzahl der Zeichen zurückgegeben.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.LinkLabel> Klasse, wobei mehrere <xref:System.Windows.Forms.LinkArea> Abschnitten definiert sind, um eine Bezeichnung auf einem Formular angezeigt. Das Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, und <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaften zum Anpassen des Aussehens von der <xref:System.Windows.Forms.LinkLabel>. Die erste <xref:System.Windows.Forms.LinkArea> angegeben ist, mit der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> Eigenschaft. Weitere Links werden hinzugefügt, um die <xref:System.Windows.Forms.LinkLabel> mithilfe der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> Methode. Die Beispiel-Handles der <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis durch Starten des Webbrowsers für Links und Anzeigen einer <xref:System.Windows.Forms.MessageBox> für andere Links.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die <see cref="P:System.Windows.Forms.LinkArea.Start" />-Eigenschaft des <see cref="T:System.Windows.Forms.LinkArea" />-Objekts ist kleiner als 0.  
  
- oder -  
Die <see cref="P:System.Windows.Forms.LinkArea.Length" />-Eigenschaft des <see cref="T:System.Windows.Forms.LinkArea" />-Objekts ist kleiner als 0.</exception>
        <altmember cref="T:System.Drawing.Point" />
      </Docs>
    </Member>
    <Member MemberName="LinkBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.LinkBehavior LinkBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.LinkBehavior LinkBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.LinkBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkBehavior As LinkBehavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::LinkBehavior LinkBehavior { System::Windows::Forms::LinkBehavior get(); void set(System::Windows::Forms::LinkBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.LinkBehavior : System.Windows.Forms.LinkBehavior with get, set" Usage="System.Windows.Forms.LinkLabel.LinkBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der das Verhalten eines Links darstellt, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.LinkBehavior" />-Werte. Der Standardwert ist <see langword="LinkBehavior.SystemDefault" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft können Sie das Verhalten von Links angeben, wenn sie im Steuerelement angezeigt werden. Z. B. Wenn Sie möchten die Links mit einem Unterstrich dargestellt werden, nur, wenn der Mauszeiger über einen Link ist, Sie können diese Eigenschaft festlegen `LinkBehavior.HoverUnderline`. Weitere Informationen zu den Arten von Verhaltensweisen, die mit einem Link zugeordnet werden können, finden Sie unter <xref:System.Windows.Forms.LinkBehavior>.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.LinkLabel> Klasse, wobei mehrere <xref:System.Windows.Forms.LinkArea> Abschnitten definiert sind, um eine Bezeichnung auf einem Formular angezeigt. Das Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, und <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaften zum Anpassen des Aussehens von der <xref:System.Windows.Forms.LinkLabel>. Die erste <xref:System.Windows.Forms.LinkArea> angegeben ist, mit der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> Eigenschaft. Weitere Links werden hinzugefügt, um die <xref:System.Windows.Forms.LinkLabel> mithilfe der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> Methode. Die Beispiel-Handles der <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis durch Starten des Webbrowsers für Links und Anzeigen einer <xref:System.Windows.Forms.MessageBox> für andere Links.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Ein Wert wird zugewiesen, der keiner der <see cref="T:System.Windows.Forms.LinkBehavior" />-Werte ist.</exception>
        <altmember cref="T:System.Windows.Forms.LinkBehavior" />
      </Docs>
    </Member>
    <Member MemberName="LinkClicked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LinkLabelLinkClickedEventHandler LinkClicked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LinkLabelLinkClickedEventHandler LinkClicked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.LinkLabel.LinkClicked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LinkClicked As LinkLabelLinkClickedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LinkLabelLinkClickedEventHandler ^ LinkClicked;" />
      <MemberSignature Language="F#" Value="member this.LinkClicked : System.Windows.Forms.LinkLabelLinkClickedEventHandler " Usage="member this.LinkClicked : System.Windows.Forms.LinkLabelLinkClickedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkLabelLinkClickedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn im Steuerelement auf einen Link geklickt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel die <xref:System.Windows.Forms.LinkLabel.LinkClicked> -Ereignis behandelt, um Aufgaben auszuführen, wenn der Benutzer auf einen Link im Steuerelement klickt. Der Ereignishandler für die <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis ist eine Instanz von übergeben die <xref:System.Windows.Forms.LinkLabelLinkClickedEventArgs> Klasse enthält eine <xref:System.Windows.Forms.LinkLabel.Link> Objekt, mit dem Link zugeordnet ist, auf die geklickt wurde. Im angegebenen Informationen können die <xref:System.Windows.Forms.LinkLabel.Link.LinkData%2A> Eigenschaft <xref:System.Windows.Forms.LinkLabel.Link> Klasse, um zu bestimmen, welchen link geklickt wurde, oder welche Art von Aufgabe beim Ausführen den Link geklickt werden. Z. B. wenn ein <xref:System.Windows.Forms.LinkLabel> Steuerelement hat eine <xref:System.Windows.Forms.LinkLabel.Link> -Objekt definiert ist, dessen <xref:System.Windows.Forms.LinkLabel.Link.LinkData%2A> Eigenschaft auf die Zeichenfolge www.microsoft.com festgelegt wurde, können Sie diese Informationen in einem Ereignishandler für die <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis, um die Website anzuzeigen.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.LinkLabel> Klasse. Das Beispiel behandelt die <xref:System.Windows.Forms.LinkLabel.LinkClicked> -Ereignis durch Öffnen einer Website.  
  
 [!code-csharp[System.Windows.Forms.LinkLabelSimple#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelSimple/CS/form.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabelSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelSimple/VB/form.vb#1)]  
  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.LinkLabel> Klasse, wobei mehrere <xref:System.Windows.Forms.LinkArea> Abschnitten definiert sind, um eine Bezeichnung auf einem Formular angezeigt. Das Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, und <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaften zum Anpassen des Aussehens von der <xref:System.Windows.Forms.LinkLabel>. Die erste <xref:System.Windows.Forms.LinkArea> angegeben ist, mit der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> Eigenschaft. Weitere Links werden hinzugefügt, um die <xref:System.Windows.Forms.LinkLabel> mithilfe der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> Methode. Die Beispiel-Handles der <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis durch Starten des Webbrowsers für Links und Anzeigen einer <xref:System.Windows.Forms.MessageBox> für andere Links.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.LinkLabelLinkClickedEventHandler" />
        <altmember cref="M:System.Windows.Forms.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="LinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.LinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color LinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.LinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.LinkLabel.LinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Farbe ab, in der ein normaler Link angezeigt wird, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Color" />, die die Farbe für die Anzeige eines normalen Links darstellt. Die Standardfarbe wird durch das System angegeben; üblicherweise ist dies die Farbe <see langword="Color.Blue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Eigenschaft können Sie die Farbe an, die für alle Links im anfänglich angezeigt wird der <xref:System.Windows.Forms.LinkLabel>.  
  
 Es gibt eine Anzahl von Farben, die einen Link zugeordnet. Die <xref:System.Windows.Forms.LinkLabel.ActiveLinkColor%2A> Eigenschaft können Sie die Farbe des Links angeben, wenn es gerade geklickt wird. Die <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaft können Sie die Farbe eines Links angeben, nachdem er vom Benutzer besucht wurde. Wenn ein Link deaktiviert ist, die <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A> wird verwendet, um den Link in einem deaktivierten Status anzuzeigen.  
  
> [!NOTE]
>  Wenn Sie diese Eigenschaft festlegen, stellen Sie sicher, dass die Farbe Sie die Eigenschaft legen, die nicht zu Konflikten mit der Hintergrundfarbe des Steuerelements oder der Text wird nicht korrekt angezeigt. Wenn die Hintergrundfarbe des Steuerelements ist z. B. `Color.Red` und diese Eigenschaft wird festgelegt, um `Color.Red`, der Text des Links wird nicht ordnungsgemäß angezeigt.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.LinkLabel> Klasse, wobei mehrere <xref:System.Windows.Forms.LinkArea> Abschnitten definiert sind, um eine Bezeichnung auf einem Formular angezeigt. Das Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, und <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaften zum Anpassen des Aussehens von der <xref:System.Windows.Forms.LinkLabel>. Die erste <xref:System.Windows.Forms.LinkArea> angegeben ist, mit der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> Eigenschaft. Weitere Links werden hinzugefügt, um die <xref:System.Windows.Forms.LinkLabel> mithilfe der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> Methode. Die Beispiel-Handles der <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis durch Starten des Webbrowsers für Links und Anzeigen einer <xref:System.Windows.Forms.MessageBox> für andere Links.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.ActiveLinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.DisabledLinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.VisitedLinkColor" />
      </Docs>
    </Member>
    <Member MemberName="Links">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.LinkLabel.LinkCollection Links { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.LinkLabel/LinkCollection Links" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.Links" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Links As LinkLabel.LinkCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::LinkLabel::LinkCollection ^ Links { System::Windows::Forms::LinkLabel::LinkCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Links : System.Windows.Forms.LinkLabel.LinkCollection" Usage="System.Windows.Forms.LinkLabel.Links" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkLabel+LinkCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die im <see cref="T:System.Windows.Forms.LinkLabel" /> enthaltene Auflistung von Links ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.LinkLabel.LinkCollection" />, die die Links im <see cref="T:System.Windows.Forms.LinkLabel" />-Steuerelement darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.LinkLabel> Steuerelement kann eine beliebige Anzahl von Links in den Text des Steuerelements anzeigen. Diese Eigenschaft ermöglicht den Zugriff auf die <xref:System.Windows.Forms.LinkLabel.LinkCollection> zugeordnete Instanz der <xref:System.Windows.Forms.LinkLabel> , das die Auflistung von Links, die im Steuerelement angezeigte darstellt. Anschließend können Sie die Mitglieder der <xref:System.Windows.Forms.LinkLabel.LinkCollection> Klasse hinzufügen, entfernen, und nutzen Sie Links in der Auflistung. Weitere Informationen zu den Arten von Aufgaben, die mit der Link-Auflistung durchführen können, finden Sie unter <xref:System.Windows.Forms.LinkLabel.LinkCollection>.  
  
 Wenn eine <xref:System.Windows.Forms.LinkLabel> Steuerelement erstellt wird, wird einen Standardhyperlink, der alle Text enthält die <xref:System.Windows.Forms.LinkLabel> Steuerelement hinzugefügt wird die <xref:System.Windows.Forms.LinkLabel.LinkCollection>. Sie können diese Standardlink überschreiben, indem Sie einen neuen Linkbereich mit Angabe der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> -Eigenschaft, oder geben Sie eine Verknüpfung mit der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A> -Methode der der <xref:System.Windows.Forms.LinkLabel.LinkCollection>. Sie können auch die Standard-Hyperlink entfernen, mit der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Remove%2A> Methode der <xref:System.Windows.Forms.LinkLabel.LinkCollection> Klasse.  
  
 Wenn Sie nicht benötigen, an mehr als einen Link zur Anzeige in der <xref:System.Windows.Forms.LinkLabel>, können Sie die <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.LinkLabel> Klasse, wobei mehrere <xref:System.Windows.Forms.LinkArea> Abschnitten definiert sind, um eine Bezeichnung auf einem Formular angezeigt. Das Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, und <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaften zum Anpassen des Aussehens von der <xref:System.Windows.Forms.LinkLabel>. Die erste <xref:System.Windows.Forms.LinkArea> angegeben ist, mit der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> Eigenschaft. Weitere Links werden hinzugefügt, um die <xref:System.Windows.Forms.LinkLabel> mithilfe der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> Methode. Die Beispiel-Handles der <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis durch Starten des Webbrowsers für Links und Anzeigen einer <xref:System.Windows.Forms.MessageBox> für andere Links.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.LinkLabel.LinkCollection" />
      </Docs>
    </Member>
    <Member MemberName="LinkVisited">
      <MemberSignature Language="C#" Value="public bool LinkVisited { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LinkVisited" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.LinkVisited" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkVisited As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LinkVisited { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.LinkVisited : bool with get, set" Usage="System.Windows.Forms.LinkLabel.LinkVisited" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein Link als bereits besuchter Link angezeigt werden soll, oder legt diesen Wert fest.</summary>
        <value>
          <see langword="true" />, wenn Links als bereits besuchte Links angezeigt werden sollen, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.LinkLabel> Steuerelement wird nicht automatisch darauf hin, dass ein Link auf ein bereits besuchter Link ist. Um den Link als ein bereits besuchter Link angezeigt werden soll, können Sie den Wert dieser Eigenschaft auf festlegen `true` in einem Ereignishandler für die <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis eine <xref:System.Windows.Forms.LinkLabel>. Ein bereits besuchter Link wird angezeigt, über die angegebene Farbe der <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaft der <xref:System.Windows.Forms.LinkLabel> Steuerelement. Wenn das Formular mit den <xref:System.Windows.Forms.LinkLabel> Steuerelement geschlossen wird, wird der Zustand "Alle anzeigen", die dem Link zugeordnete gelöscht. Um den Anzeigezustand des Links beibehalten möchten, müssen Sie den Anzeigezustand des Links in einer registrierungseinstellung, die mit Ihrer Anwendung verknüpfte zu speichern.  
  
> [!NOTE]
>  Diese Eigenschaft wirkt sich nur auf den ersten Link definiert, der <xref:System.Windows.Forms.LinkLabel> Steuerelement. Wenn Sie mehr als einen Link im Steuerelement angegeben haben, verwenden Sie die <xref:System.Windows.Forms.LinkLabel.Link.Visited%2A> Eigenschaft der <xref:System.Windows.Forms.LinkLabel.Link> Klasse. Es stehen alle Links, die definiert, der <xref:System.Windows.Forms.LinkLabel> mithilfe der <xref:System.Windows.Forms.LinkLabel.Links%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A> Eigenschaft mit dem <xref:System.Windows.Forms.LinkBehavior> Enumeration. Außerdem zeigt es die Einstellung der <xref:System.Windows.Forms.LinkLabel.ActiveLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A> und <xref:System.Windows.Forms.LinkLabel.LinkVisited%2A> Eigenschaften. Zum Ausführen in diesem Beispiel fügen Sie ihn in ein leeres Formular, und rufen `InitializeLinkLabel` aus den Konstruktor des Formulars oder `Load` Methode.  
  
 [!code-cpp[System.Windows.Forms.LinkLabelExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabelExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabelExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeChanged">
      <MemberSignature Language="C#" Value="protected override void OnAutoSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnAutoSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnAutoSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnAutoSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnAutoSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnAutoSizeChanged : EventArgs -&gt; unit" Usage="linkLabel.OnAutoSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Label.AutoSizeChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.LinkLabel.OnAutoSizeChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Windows.Forms.LinkLabel.OnAutoSizeChanged(System.EventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Windows.Forms.LinkLabel.OnAutoSizeChanged(System.EventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected override void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnEnabledChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEnabledChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEnabledChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnEnabledChanged : EventArgs -&gt; unit" Usage="linkLabel.OnEnabledChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Stellt die Behandlung für das <see cref="E:System.Windows.Forms.Control.EnabledChanged" />-Ereignis bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.LinkLabel.OnEnabledChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Windows.Forms.LinkLabel.OnEnabledChanged(System.EventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Windows.Forms.LinkLabel.OnEnabledChanged(System.EventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnFontChanged : EventArgs -&gt; unit" Usage="linkLabel.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.FontChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnGotFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : EventArgs -&gt; unit" Usage="linkLabel.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.GotFocus" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.LinkLabel.OnGotFocus(System.EventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> Methode.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
        <altmember cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="linkLabel.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.KeyEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.LinkLabel.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> Methode.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnLinkClicked">
      <MemberSignature Language="C#" Value="protected virtual void OnLinkClicked (System.Windows.Forms.LinkLabelLinkClickedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLinkClicked(class System.Windows.Forms.LinkLabelLinkClickedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLinkClicked (e As LinkLabelLinkClickedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLinkClicked(System::Windows::Forms::LinkLabelLinkClickedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLinkClicked : System.Windows.Forms.LinkLabelLinkClickedEventArgs -&gt; unit&#xA;override this.OnLinkClicked : System.Windows.Forms.LinkLabelLinkClickedEventArgs -&gt; unit" Usage="linkLabel.OnLinkClicked e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LinkLabelLinkClickedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.LinkLabel.LinkClicked" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.LinkLabel.OnLinkClicked%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs" />
        <altmember cref="E:System.Windows.Forms.LinkLabel.LinkClicked" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected override void OnLostFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnLostFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLostFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLostFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnLostFocus : EventArgs -&gt; unit" Usage="linkLabel.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.LostFocus" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.LinkLabel.OnLostFocus(System.EventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> Methode.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
        <altmember cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected override void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseDown (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseDown(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="linkLabel.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.MouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.LinkLabel.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> Methode.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseLeave : EventArgs -&gt; unit" Usage="linkLabel.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.LinkLabel.OnMouseLeave(System.EventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> Methode.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected override void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseMove(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="linkLabel.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.MouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.LinkLabel.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> Methode.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
        <altmember cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseUp (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseUp(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="linkLabel.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.MouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.LinkLabel.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> Methode.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
        <altmember cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnPaddingChanged">
      <MemberSignature Language="C#" Value="protected override void OnPaddingChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaddingChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnPaddingChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPaddingChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPaddingChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPaddingChanged : EventArgs -&gt; unit" Usage="linkLabel.OnPaddingChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Control.PaddingChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.LinkLabel.OnPaddingChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Windows.Forms.LinkLabel.OnPaddingChanged(System.EventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Windows.Forms.LinkLabel.OnPaddingChanged(System.EventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected override void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPaint (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPaint(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPaint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="linkLabel.OnPaint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.PaintEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.LinkLabel.OnPaint(System.Windows.Forms.PaintEventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass der Basisklasse aufrufen <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> Methode.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
        <altmember cref="T:System.Windows.Forms.PaintEventArgs" />
        <altmember cref="T:System.Windows.Forms.Control" />
      </Docs>
    </Member>
    <Member MemberName="OnPaintBackground">
      <MemberSignature Language="C#" Value="protected override void OnPaintBackground (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaintBackground(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPaintBackground (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPaintBackground(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPaintBackground : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="linkLabel.OnPaintBackground e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.PaintEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Zeichnet den Hintergrund des Steuerelements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextAlignChanged : EventArgs -&gt; unit" Usage="linkLabel.OnTextAlignChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.Label.TextAlignChanged" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Label.OnTextAlignChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextChanged : EventArgs -&gt; unit" Usage="linkLabel.OnTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Stellt die Behandlung für das <see cref="E:System.Windows.Forms.Control.TextChanged" />-Ereignis bereit.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideCursor">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.Cursor OverrideCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor OverrideCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.OverrideCursor" />
      <MemberSignature Language="VB.NET" Value="Protected Property OverrideCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Forms::Cursor ^ OverrideCursor { System::Windows::Forms::Cursor ^ get(); void set(System::Windows::Forms::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OverrideCursor : System.Windows.Forms.Cursor with get, set" Usage="System.Windows.Forms.LinkLabel.OverrideCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Mauszeiger ab, der verwendet wird, wenn der Mauszeiger sich innerhalb der Begrenzungen des <see cref="T:System.Windows.Forms.LinkLabel" /> befindet, oder legt diesen fest.</summary>
        <value>Der zu verwendende <see cref="T:System.Windows.Forms.Cursor" />, wenn der Mauszeiger sich innerhalb der <see cref="T:System.Windows.Forms.LinkLabel" />-Begrenzungen befindet.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.LinkLabel.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die inneren Abstände in Pixel zwischen den Rändern eines <see cref="T:System.Windows.Forms.LinkLabel" /> und seinem Inhalt ab oder legt diese fest.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" />-Werte, die den inneren Abstand in Pixel darstellen.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PointInLink">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LinkLabel.Link PointInLink (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Windows.Forms.LinkLabel/Link PointInLink(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.PointInLink(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function PointInLink (x As Integer, y As Integer) As LinkLabel.Link" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::LinkLabel::Link ^ PointInLink(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.PointInLink : int * int -&gt; System.Windows.Forms.LinkLabel.Link" Usage="linkLabel.PointInLink (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkLabel+Link</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Die horizontale Koordinate der Position, an der nach einem Link gesucht werden soll.</param>
        <param name="y">Die vertikale Koordinate der Position, an der nach einem Link gesucht werden soll.</param>
        <summary>Ruft den an den angegebenen Clientkoordinaten positionierten Link ab.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.LinkLabel.Link" />, der den an den angegebenen Koordinaten positionierten Link darstellt. Wenn an der Position kein Link vorhanden ist, wird <see langword="null" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Methode können Sie bestimmen, ob ein Link zu einem bestimmten Zeitpunkt innerhalb befindet ein <xref:System.Windows.Forms.LinkLabel> Steuerelement. Sie können diese Methode verwenden, in einem Ereignishandler für die <xref:System.Windows.Forms.Control.MouseEnter> Ereignis des Steuerelements zu bestimmen, ob der Mauszeiger über einen Link im Steuerelement bewegt wird. Nachdem Sie ermittelt haben, dass sich der Mauszeiger über einen Link befindet, können Sie zusätzliche Informationen über den Link klicken Sie dann anzeigen, für den Benutzer über <xref:System.Windows.Forms.StatusBar> Text oder ein <xref:System.Windows.Forms.ToolTip>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.ProcessDialogKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessDialogKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessDialogKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.ProcessDialogKey : System.Windows.Forms.Keys -&gt; bool" Usage="linkLabel.ProcessDialogKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Tastencode und Modifiziererflags.</param>
        <summary>Verarbeitet eine Tastatureingabe im Dialogfeld.</summary>
        <returns>
          <see langword="true" />, um die Taste abschließend zu verarbeiten, <see langword="false" />, um eine Weiterverarbeitung zuzulassen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird während der vorverarbeitung der Nachricht zur Verarbeitung von Dialogfeldzeichen, z. B. Registerkarte, RETURN, ESCAPEZEICHEN und Pfeiltasten aufgerufen. Diese Methode wird aufgerufen, wenn nur die `isInputKey` -Methode gibt an, dass der Schlüssel für das Steuerelement nicht relevant ist. `processDialogKey` sendet einfach das Zeichen an der übergeordneten `processDialogKey` -Methode, oder gibt zurück, wenn das Steuerelement kein übergeordnetes Element besitzt. Die `Form` Klasse überschreibt diese Methode, um die tatsächliche Verarbeitung der Dialogfeld-Schlüsseln durchzuführen. Beim Überschreiben von `processDialogKey`, ein Steuerelement sollte zurückgeben `true` , um anzugeben, dass den Schlüssel verarbeitet wurde. Für Schlüssel, die nicht durch das Steuerelement das Ergebnis des verarbeiteten `base.processDialogChar` zurückgegeben werden sollen. Steuerelemente nur selten, müssen wenn überhaupt, diese Methode überschreiben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="protected override void Select (bool directed, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Select(bool directed, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.Select(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Select (directed As Boolean, forward As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Select(bool directed, bool forward);" />
      <MemberSignature Language="F#" Value="override this.Select : bool * bool -&gt; unit" Usage="linkLabel.Select (directed, forward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directed" Type="System.Boolean" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="directed">
          <see langword="true" />, um die Richtung für die Auswahl des Steuerelements anzugeben, andernfalls <see langword="false" />.</param>
        <param name="forward">
          <see langword="true" />, um sich in der Aktivierreihenfolge vorwärts zu bewegen, <see langword="false" />, um sich rückwärts zu bewegen.</param>
        <summary>Aktiviert ein untergeordnetes Steuerelement. Gibt optional die Richtung in der Aktivierreihenfolge für die Auswahl des Steuerelements an.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="linkLabel.SetBoundsCore (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">Die neue linke Begrenzung des Steuerelements.</param>
        <param name="y">Die neue rechte Begrenzung des Steuerelements.</param>
        <param name="width">Die neue Breite des Steuerelements.</param>
        <param name="height">Die neue Höhe des Steuerelements.</param>
        <param name="specified">Die Werte, für die Angaben gemacht wurden. Dieser Parameter gibt die Benutzerabsicht wieder, nicht die geänderten Werte.</param>
        <summary>Legt die Begrenzungen dieses Steuerelements fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Erbende Klassen können diese Funktion zum Hinzufügen von größeneinschränkungen überschreiben. Erbende Klassen müssen `base.setBoundsCore` tatsächlich die Grenzen des Steuerelements so ändern Sie verursachen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IButtonControl.DialogResult">
      <MemberSignature Language="C#" Value="System.Windows.Forms.DialogResult System.Windows.Forms.IButtonControl.DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DialogResult System.Windows.Forms.IButtonControl.DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.System#Windows#Forms#IButtonControl#DialogResult" />
      <MemberSignature Language="VB.NET" Value=" Property DialogResult As DialogResult Implements IButtonControl.DialogResult" />
      <MemberSignature Language="C++ CLI" Value="property System::Windows::Forms::DialogResult System::Windows::Forms::IButtonControl::DialogResult { System::Windows::Forms::DialogResult get(); void set(System::Windows::Forms::DialogResult value); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.IButtonControl.DialogResult" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IButtonControl.DialogResult</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Windows.Forms.IButtonControl.DialogResult" />.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.DialogResult" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Forms.LinkLabel>-Instanz in eine <xref:System.Windows.Forms.IButtonControl>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IButtonControl.NotifyDefault">
      <MemberSignature Language="C#" Value="void IButtonControl.NotifyDefault (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IButtonControl.NotifyDefault(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.System#Windows#Forms#IButtonControl#NotifyDefault(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub NotifyDefault (value As Boolean) Implements IButtonControl.NotifyDefault" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IButtonControl.NotifyDefault(bool value) = System::Windows::Forms::IButtonControl::NotifyDefault;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IButtonControl.NotifyDefault(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <see langword="true" />, wenn das Steuerelement als Standardschaltfläche fungiert, andernfalls <see langword="false" />.</param>
        <summary>Benachrichtigt das <see cref="T:System.Windows.Forms.LinkLabel" />-Steuerelement, dass es die Standardschaltfläche ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.LinkLabel> Steuerelement angezeigt wird, unabhängig davon, ob es die Standardschaltfläche ist identisch, daher ist das Aufrufen dieser Methode wird nicht geändert werden, die Darstellung oder das Verhalten der <xref:System.Windows.Forms.LinkLabel>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IButtonControl.PerformClick">
      <MemberSignature Language="C#" Value="void IButtonControl.PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IButtonControl.PerformClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.System#Windows#Forms#IButtonControl#PerformClick" />
      <MemberSignature Language="VB.NET" Value="Sub PerformClick () Implements IButtonControl.PerformClick" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IButtonControl.PerformClick() = System::Windows::Forms::IButtonControl::PerformClick;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IButtonControl.PerformClick</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generiert ein <see cref="E:System.Windows.Forms.Control.Click" />-Ereignis für das <see cref="T:System.Windows.Forms.LinkLabel" />-Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Aufrufen dieser Methode bewirkt, dass den ersten Link in der <xref:System.Windows.Forms.LinkLabel.LinkCollection> geklickt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabStop">
      <MemberSignature Language="C#" Value="public bool TabStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TabStop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.TabStop" />
      <MemberSignature Language="VB.NET" Value="Public Property TabStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TabStop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TabStop : bool with get, set" Usage="System.Windows.Forms.LinkLabel.TabStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, mit dem angegeben wird, ob der Benutzer per Tabulatortaste zur <see cref="T:System.Windows.Forms.LinkLabel" />-Klasse wechseln kann.</summary>
        <value>
          <see langword="true" />, wenn der Benutzer per Tabulatortaste zur <see cref="T:System.Windows.Forms.LinkLabel" />-Klasse wechseln kann, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.LinkLabel.TabStop%2A> Eigenschaft `true` standardmäßig, solange es ist mindestens ein Link mit einer Länge größer als 0 (null) in der <xref:System.Windows.Forms.LinkLabel.Links%2A> Auflistung. Die <xref:System.Windows.Forms.LinkLabel> Steuerelement verfügt über eine einzelne <xref:System.Windows.Forms.Control.TabIndex%2A> Wert. Jeder Link mit einer Länge größer als 0 wird jedoch eine eigene Tabstopp, in der Reihenfolge von links nach rechts. Um zu verhindern, dass bei der Registerkartennavigation auf die <xref:System.Windows.Forms.LinkLabel> steuern, legen Sie die <xref:System.Windows.Forms.LinkLabel.TabStop%2A> Eigenschaft, um `false`. Bedenken Sie jedoch, Hinzufügen von neuen Links zu den <xref:System.Windows.Forms.LinkLabel.Links%2A> Sammlung wird automatisch festgelegt. die <xref:System.Windows.Forms.LinkLabel.TabStop%2A> Eigenschaft `true` erneut.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabStopChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabStopChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabStopChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.LinkLabel.TabStopChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TabStopChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TabStopChanged;" />
      <MemberSignature Language="F#" Value="member this.TabStopChanged : EventHandler " Usage="member this.TabStopChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Wert der <see cref="P:System.Windows.Forms.Label.TabStop" />-Eigenschaft ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung des neuen Elements. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.LinkLabel.TabStopChanged> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.LinkLabel> mit dem Namen `LinkLabel1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.LinkLabel.TabStopChanged> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#460](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#460)]
 [!code-vb[System.Windows.Forms.EventExamples#460](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#460)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.LinkLabel.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den vom <see cref="T:System.Windows.Forms.LinkLabel" />-Steuerelement angezeigten Text ab oder legt diesen fest.</summary>
        <value>Der vom <see cref="T:System.Windows.Forms.LinkLabel" /> angezeigte Text.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="public bool UseCompatibleTextRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCompatibleTextRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCompatibleTextRendering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseCompatibleTextRendering : bool with get, set" Usage="System.Windows.Forms.LinkLabel.UseCompatibleTextRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, ob zum Rendern von Text die <see cref="T:System.Drawing.Graphics" />-Klasse ([!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]) oder die <see cref="T:System.Windows.Forms.TextRenderer" />-Klasse ([!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]) verwendet werden soll, oder legt diesen Wert fest.</summary>
        <value>
          <see langword="true" />, wenn mit der <see cref="T:System.Drawing.Graphics" />-Klasse eine Textdarstellung zur Herstellung von Kompatibilität mit den Versionen 1.0 und 1.1. ausgeführt werden soll. von .NET Framework, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering%2A> -Eigenschaftensatz auf `false`, <xref:System.Windows.Forms.LinkArea> deckt den gesamten Text. Beispielsweise wird Text wie z. B. "Abcd" mit der nachgestellte Leerzeichen unterstrichen gerendert.  
  
 Wenn die <xref:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering%2A> -Eigenschaftensatz auf `true`, <xref:System.Windows.Forms.LinkArea> deckt nicht den gesamten Text.  
  
 Die `UseCompatibleTextRendering` Eigenschaft soll visual Kompatibilität zwischen Windows Forms-Steuerelemente bieten, Rendern Text mit der <xref:System.Windows.Forms.TextRenderer> Klasse und [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] und [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)] Anwendungen, die benutzerdefinierte Textrendering mit der <xref:System.Drawing.Graphics>Klasse. In den meisten Fällen, wenn Ihre Anwendung nicht von aktualisiert wird [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] oder [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], es wird empfohlen, Sie lassen `UseCompatibleTextRendering` legen Sie auf den Standardwert `false`.  
  
 Die [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] basierend <xref:System.Windows.Forms.TextRenderer> Klasse wurde eingeführt, der [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] stellen Sie zur Verbesserung der Leistung Text besser aussehen, und die Unterstützung für internationale Schriftarten. In früheren Versionen von der [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] basierend <xref:System.Drawing.Graphics> Klasse wurde verwendet, um die gesamte Textrendering auszuführen. [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] berechnet Zeichenabstand und Wortumbruch anders als [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]. In einer Windows Forms-Anwendung, verwendet der <xref:System.Drawing.Graphics> Klasse, um Text gerendert wird, kann dies dazu führen, dass des Texts für Steuerelemente, mit denen <xref:System.Windows.Forms.TextRenderer> sich von den anderen Text in der Anwendung angezeigt werden. Um diese Inkompatibilität zu beheben, können Sie legen die `UseCompatibleTextRendering` Eigenschaft `true` für ein bestimmtes Steuerelement. Festzulegende `UseCompatibleTextRendering` zu `true` rufen Sie für alle unterstützten Steuerelemente in der Anwendung, die <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A?displayProperty=nameWithType> Methode mit einem Parameter des `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.LinkArea" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.LinkArea" />
        <altmember cref="M:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(System.Boolean)" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      </Docs>
    </Member>
    <Member MemberName="VisitedLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color VisitedLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color VisitedLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.VisitedLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property VisitedLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color VisitedLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.VisitedLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.LinkLabel.VisitedLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Farbe ab, in der ein bereits besuchter Link angezeigt wird, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Color" />, die die Farbe für die Anzeige bereits besuchter Links darstellt. Die Standardfarbe wird durch das System angegeben; üblicherweise ist dies die Farbe <see langword="Color.Purple" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Eigenschaft können Sie die Farbe an, die für alle Links in angezeigt wird, die `LinkLabel` <xref:System.Windows.Forms> , die bereits vom Benutzer aufgerufen wurden.  
  
 Es gibt eine Anzahl von Farben, die einen Link zugeordnet. Alle Links in der <xref:System.Windows.Forms.LinkLabel> werden zuerst angezeigt, mit der Farbe, die definiert, der <xref:System.Windows.Forms.LinkLabel.LinkColor%2A> Eigenschaft. Die <xref:System.Windows.Forms.LinkLabel.ActiveLinkColor%2A> Eigenschaft können Sie die Farbe des Links angeben, wenn es gerade geklickt wird. Wenn ein Link deaktiviert ist, die <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A> wird verwendet, um den Link in einem deaktivierten Status anzuzeigen.  
  
> [!NOTE]
>  Wenn Sie diese Eigenschaft festlegen, stellen Sie sicher, dass die Farbe Sie die Eigenschaft legen, die nicht zu Konflikten mit der Hintergrundfarbe des Steuerelements oder der Text wird nicht korrekt angezeigt. Wenn die Hintergrundfarbe des Steuerelements ist z. B. `Color.Red` und diese Eigenschaft wird festgelegt, um `Color.Red`, der Text ist nicht richtig angezeigt bei der Link als ein bereits besuchter Link angezeigt wird.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Windows.Forms.LinkLabel> Klasse, wobei mehrere <xref:System.Windows.Forms.LinkArea> Abschnitten definiert sind, um eine Bezeichnung auf einem Formular angezeigt. Das Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, und <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> Eigenschaften zum Anpassen des Aussehens von der <xref:System.Windows.Forms.LinkLabel>. Die erste <xref:System.Windows.Forms.LinkArea> angegeben ist, mit der <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> Eigenschaft. Weitere Links werden hinzugefügt, um die <xref:System.Windows.Forms.LinkLabel> mithilfe der <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> Methode. Die Beispiel-Handles der <xref:System.Windows.Forms.LinkLabel.LinkClicked> Ereignis durch Starten des Webbrowsers für Links und Anzeigen einer <xref:System.Windows.Forms.MessageBox> für andere Links.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.ActiveLinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.DisabledLinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.LinkColor" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef msg As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % msg);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="linkLabel.WndProc msg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="msg">Die zu verarbeitende Meldung.</param>
        <summary>Verarbeitet die angegebene Windows-Meldung.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für den Betrieb mit nicht verwaltetem Code. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>
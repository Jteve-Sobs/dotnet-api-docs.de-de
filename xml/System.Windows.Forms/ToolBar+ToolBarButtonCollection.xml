<Type Name="ToolBar+ToolBarButtonCollection" FullName="System.Windows.Forms.ToolBar+ToolBarButtonCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c78830e2b2e8706b1dd3f4ad0808adf3bfa09628" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70725135" /></Metadata><TypeSignature Language="C#" Value="public class ToolBar.ToolBarButtonCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ToolBar/ToolBarButtonCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ToolBar.ToolBarButtonCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public: ref class ToolBar::ToolBarButtonCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type ToolBar.ToolBarButtonCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Kapselt eine Auflistung von <see cref="T:System.Windows.Forms.ToolBarButton" />-Steuerelementen für die Verwendung durch die <see cref="T:System.Windows.Forms.ToolBar" />-Klasse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ist eine Null basierte indizierte Auflistung, die von der <xref:System.Windows.Forms.ToolBar> - <xref:System.Windows.Forms.ToolBarButton> Klasse verwendet wird, um alle Steuerelemente zu speichern, die der Symbolleiste zugewiesen sind. <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> Verwenden Sie <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> die-Methode, um einzelne Schalt <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A> Flächen und die-Methode zum Löschen hinzuzufügen. Ruft die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> -Methode auf, um alle Schaltflächen aus der Auflistung zu entfernen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden ein <xref:System.Windows.Forms.ToolBar> und drei <xref:System.Windows.Forms.ToolBarButton> -Steuerelemente erstellt und initialisiert. Die Symbolleisten Schaltflächen werden der Symbolleiste zugewiesen, und die Symbolleiste wird dem Formular hinzugefügt. Dieser Code erfordert, dass <xref:System.Windows.Forms.Form> bereits erstellt wurde.  
  
 [!code-cpp[Classic ToolBar.Buttons Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.Buttons Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.Buttons Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.Buttons Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.Buttons Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.Buttons Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ToolBar" />
    <altmember cref="T:System.Windows.Forms.ToolBarButton" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToolBarButtonCollection (System.Windows.Forms.ToolBar owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ToolBar owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.#ctor(System.Windows.Forms.ToolBar)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As ToolBar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ToolBarButtonCollection(System::Windows::Forms::ToolBar ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ToolBar.ToolBarButtonCollection : System.Windows.Forms.ToolBar -&gt; System.Windows.Forms.ToolBar.ToolBarButtonCollection" Usage="new System.Windows.Forms.ToolBar.ToolBarButtonCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ToolBar" />
      </Parameters>
      <Docs>
        <param name="owner">Die <see cref="T:System.Windows.Forms.ToolBar" />, die der Auflistung von <see cref="T:System.Windows.Forms.ToolBarButton" />-Steuerelementen übergeordnet ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection" />-Klasse und weist diese der angegebenen Symbolleiste zu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel erstellen <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> Sie keinen und rufen seinen Konstruktor explizit auf. Wenn Sie <xref:System.Windows.Forms.ToolBar.Buttons%2A> <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> auf die-Eigenschaft des- Steuer Elements verweisen, wird ein erstellt. <xref:System.Windows.Forms.ToolBar> Sie können dann Zugriff auf die Eigenschaften und Methoden erhalten und der Auflistung <xref:System.Windows.Forms.ToolBarButton> Steuerelemente zuweisen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ToolBarButton" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt eine neue Symbolleisten-Schaltfläche am Ende der Auflistung der Symbolleisten-Schaltflächen hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (text As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; int" Usage="toolBarButtonCollection.Add text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der auf dem neuen <see cref="T:System.Windows.Forms.ToolBarButton" /> anzuzeigende Text.</param>
        <summary>Fügt am Ende der Auflistung der Symbolleisten-Schaltflächen eine neue Symbolleisten-Schaltfläche mit dem angegebenen <see cref="P:System.Windows.Forms.ToolBarButton.Text" />-Eigenschaftswert hinzu.</summary>
        <returns>Der nullbasierte Indexwert des <see cref="T:System.Windows.Forms.ToolBarButton" />, das der Auflistung hinzugefügt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können der Auflistung auch <xref:System.Windows.Forms.ToolBarButton> neue Objekte hinzufügen, indem Sie <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> - <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> Methode oder die-Methode oder die andere Version der-Methode verwenden.  
  
 Um einen <xref:System.Windows.Forms.ToolBarButton> zu entfernen, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> den Sie zuvor hinzugefügt haben, verwenden <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> Sie die-Methode oder die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Code <xref:System.Windows.Forms.ToolBarButton> Beispiel wird ein vorhandenes aus einem <xref:System.Windows.Forms.ToolBar> -Steuerelement entfernt, sofern vorhanden, und es werden vier <xref:System.Windows.Forms.ToolBar>neue <xref:System.Windows.Forms.ToolBarButton> -Objekte hinzugefügt und dem hinzugefügt. Dieses Beispiel erfordert, dass Sie über <xref:System.Windows.Forms.Form> ein- <xref:System.Windows.Forms.ToolBar> Steuerelement mit einem-Steuerelement verfügen.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove(System.Windows.Forms.ToolBarButton)" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (button As ToolBarButton) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::Windows::Forms::ToolBarButton ^ button);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Forms.ToolBarButton -&gt; int" Usage="toolBarButtonCollection.Add button" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">Der <see cref="T:System.Windows.Forms.ToolBarButton" />, der nach sämtlichen vorhandenen Schaltflächen hinzugefügt werden soll.</param>
        <summary>Fügt die angegebene Symbolleisten-Schaltfläche am Ende der Auflistung der Symbolleisten-Schaltflächen hinzu.</summary>
        <returns>Der nullbasierte Indexwert des <see cref="T:System.Windows.Forms.ToolBarButton" />, das der Auflistung hinzugefügt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können der Auflistung auch <xref:System.Windows.Forms.ToolBarButton> neue Objekte hinzufügen, indem Sie <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> - <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> Methode oder die-Methode oder die andere Version der-Methode verwenden.  
  
 Um einen <xref:System.Windows.Forms.ToolBarButton> zu entfernen, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> den Sie zuvor hinzugefügt haben, verwenden <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> Sie die-Methode oder die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein neues <xref:System.Windows.Forms.ToolBarButton> -Steuerelement zu <xref:System.Windows.Forms.ToolBar> einer vorhandenen mit vorhandenen Schaltflächen hinzugefügt. Die Symbolleisten-Schaltfläche wird am Ende der <xref:System.Windows.Forms.ToolBar.Buttons%2A?displayProperty=nameWithType> Sammlung hinzugefügt.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Add Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove(System.Windows.Forms.ToolBarButton)" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Windows.Forms.ToolBarButton[] buttons);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Windows.Forms.ToolBarButton[] buttons) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange(System.Windows.Forms.ToolBarButton[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (buttons As ToolBarButton())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(cli::array &lt;System::Windows::Forms::ToolBarButton ^&gt; ^ buttons);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Windows.Forms.ToolBarButton[] -&gt; unit" Usage="toolBarButtonCollection.AddRange buttons" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buttons" Type="System.Windows.Forms.ToolBarButton[]" />
      </Parameters>
      <Docs>
        <param name="buttons">Die Auflistung der <see cref="T:System.Windows.Forms.ToolBarButton" />-Steuerelemente, die dieser in einem Array enthaltenen <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection" /> hinzugefügt werden sollen.</param>
        <summary>Fügt dieser Auflistung von Symbolleisten-Schaltflächen eine Auflistung von Symbolleisten-Schaltflächen hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ToolBarButton> Die `nodes`  im Array enthaltenen Objekte werden an das Ende der Auflistung angefügt.  
  
 Mithilfe der-Methode können Sie schnell eine Gruppe von zuvor erstellten <xref:System.Windows.Forms.ToolBarButton> -Objekten zur-Auflistung hinzufügen, anstatt <xref:System.Windows.Forms.ToolBarButton> Sie mithilfe der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> -Methode manuell der Auflistung hinzuzufügen.  
  
 Um einen <xref:System.Windows.Forms.ToolBarButton> zu entfernen, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> den Sie zuvor hinzugefügt haben, verwenden <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> Sie die-Methode oder die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Code <xref:System.Windows.Forms.ToolBarButton> Beispiel wird ein vorhandenes aus einem <xref:System.Windows.Forms.ToolBar> -Steuerelement entfernt, sofern vorhanden, und es werden vier <xref:System.Windows.Forms.ToolBar>neue <xref:System.Windows.Forms.ToolBarButton> -Objekte hinzugefügt und dem hinzugefügt. Dieses Beispiel erfordert, dass Sie über <xref:System.Windows.Forms.Form> ein- <xref:System.Windows.Forms.ToolBar> Steuerelement mit einem-Steuerelement verfügen.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="toolBarButtonCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle Schaltflächen aus der Auflistung der Symbolleisten-Schaltflächen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> -Methode durchläuft die-Auflistung und entfernt alle dem <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>zugewiesenen Symbolleisten-Schaltflächen.  
  
 Um eine einzelne Symbolleisten Schaltfläche aus der Auflistung zu <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A> entfernen <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> , verwenden Sie die Methoden oder.  
  
 Um der Auflistung <xref:System.Windows.Forms.ToolBarButton> neue Objekte hinzuzufügen, verwenden Sie <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> die- <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> Methode oder die-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> <xref:System.Windows.Forms.ToolBar.Buttons%2A> von vor und nach dem Aufrufen <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> der-Methode angezeigt. Dieser Code erfordert, dass <xref:System.Windows.Forms.ToolBar> eine mit mindestens einem <xref:System.Windows.Forms.ToolBarButton> erstellt wurde.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove(System.Windows.Forms.ToolBarButton)" />
        <altmember cref="T:System.Windows.Forms.ToolBarButton" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
        <altmember cref="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Contains(System.Windows.Forms.ToolBarButton)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (button As ToolBarButton) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::ToolBarButton ^ button);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.ToolBarButton -&gt; bool" Usage="toolBarButtonCollection.Contains button" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">Die <see cref="T:System.Windows.Forms.ToolBarButton" />, die in der Auflistung gesucht werden soll.</param>
        <summary>Bestimmt, ob die angegebene Symbolleisten-Schaltfläche ein Member der Auflistung ist.</summary>
        <returns><see langword="true" />, wenn das <see cref="T:System.Windows.Forms.ToolBarButton" /> ein Member der Auflistung ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht es Ihnen, zu bestimmen <xref:System.Windows.Forms.ToolBarButton> , ob ein Member der Auflistung ist, bevor versucht wird, <xref:System.Windows.Forms.ToolBarButton>Vorgänge für auszuführen. Mit dieser Methode können Sie überprüfen, ob <xref:System.Windows.Forms.ToolBarButton> eine hinzugefügt wurde oder noch ein Member der Auflistung ist.  
  
   
  
## Examples  
 Im folgenden Code <xref:System.Windows.Forms.ToolBarButton> Beispiel wird ein vorhandenes aus einem <xref:System.Windows.Forms.ToolBar> -Steuerelement entfernt, sofern vorhanden, und es werden vier <xref:System.Windows.Forms.ToolBar>neue <xref:System.Windows.Forms.ToolBarButton> -Objekte hinzugefügt und dem hinzugefügt. Dieses Beispiel erfordert, dass Sie über <xref:System.Windows.Forms.Form> ein- <xref:System.Windows.Forms.ToolBar> Steuerelement mit einem-Steuerelement verfügen.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="toolBarButtonCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des zu suchenden <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Bestimmt, ob ein <see cref="T:System.Windows.Forms.ToolBarButton" /> mit dem angegebenen Schlüssel in der Auflistung enthalten ist.</summary>
        <returns><see langword="true" />, um anzugeben, dass ein <see cref="T:System.Windows.Forms.ToolBarButton" /> mit dem angegebenen Schlüssel gefunden wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBarButton.Name%2A> -Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.ToolBarButton> in der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 Beim Schlüssel Vergleich wird die Groß-/Kleinschreibung nicht beachtet. Wenn der `key` -Parameter `null` oder eine leere Zeichenfolge <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item%2A> ist, wird zurückgegeben.`false.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Schaltflächen in der Auflistung der Symbolleisten-Schaltflächen ab.</summary>
        <value>Die Anzahl der <see cref="T:System.Windows.Forms.ToolBarButton" />-Steuerelemente, die der Symbolleiste zugewiesen sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> -Eigenschaft enthält die tatsächliche Anzahl <xref:System.Windows.Forms.ToolBarButton> der Steuerelemente, die der Auflistung zugewiesen sind. Es kommt häufig vor, dass <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> der-Eigenschafts Wert als obere Begrenzung einer Schleife verwendet wird, um eine Auflistung zu durchlaufen. Der Indexwert einer Auflistung ist ein NULL basierter Index, deshalb müssen Sie einen von der Schleifen Variablen subtrahieren, andernfalls überschreiten Sie die oberen Begrenzungen der Auflistung und lösen eine Ausnahme aus.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> <xref:System.Windows.Forms.ToolBar.Buttons%2A> von vor und nach dem Aufrufen <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> der-Methode angezeigt. Dieser Code erfordert, dass <xref:System.Windows.Forms.ToolBar> eine mit mindestens einem <xref:System.Windows.Forms.ToolBarButton> erstellt wurde.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ToolBarButton" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="toolBarButtonCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator zurück, mit dem die Auflistung der Symbolleisten-Schaltflächen durchlaufen werden kann.</summary>
        <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der die Strukturknotenauflistung darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Code <xref:System.Windows.Forms.ToolBarButton> Beispiel wird ein vorhandenes aus einem <xref:System.Windows.Forms.ToolBar> -Steuerelement entfernt, sofern vorhanden, und es werden vier <xref:System.Windows.Forms.ToolBar>neue <xref:System.Windows.Forms.ToolBarButton> -Objekte hinzugefügt und dem hinzugefügt. Dieses Beispiel erfordert, dass Sie über <xref:System.Windows.Forms.Form> ein- <xref:System.Windows.Forms.ToolBar> Steuerelement mit einem-Steuerelement verfügen.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOf(System.Windows.Forms.ToolBarButton)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (button As ToolBarButton) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::ToolBarButton ^ button);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Forms.ToolBarButton -&gt; int" Usage="toolBarButtonCollection.IndexOf button" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">Die <see cref="T:System.Windows.Forms.ToolBarButton" />, die in der Auflistung gesucht werden soll.</param>
        <summary>Ruft den Index der angegebenen Symbolleisten-Schaltfläche in der Auflistung ab.</summary>
        <returns>Der nullbasierte Index des in der Auflistung gefundenen Elements, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht den einfachen Zugriff auf den Indexwert von <xref:System.Windows.Forms.ToolBarButton> in der-Auflistung. Der Indexwert ermöglicht es Ihnen, <xref:System.Windows.Forms.ToolBarButton> <xref:System.Windows.Forms.ToolBar>auf einfache Weise festzustellen, auf welche geklickt wurde. Der <xref:System.Windows.Forms.ToolBarButton> angeklickte kann durch Auswerten des <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOf%2A> Werts der <xref:System.Windows.Forms.ToolBarButtonClickEventArgs.Button%2A?displayProperty=nameWithType> -Eigenschaft bestimmt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden ein <xref:System.Windows.Forms.ToolBar> und drei <xref:System.Windows.Forms.ToolBarButton> -Steuerelemente erstellt. Die Symbolleisten Schaltflächen werden der Schaltflächen Auflistung zugewiesen, die Sammlung wird der Symbolleiste zugewiesen, und die Symbolleiste wird dem Formular hinzugefügt. Auf dem- <xref:System.Windows.Forms.ToolBarButtonClickEventArgs> <xref:System.Windows.Forms.ToolBarButtonClickEventArgs.Button%2A> <xref:System.Windows.Forms.ToolBar.ButtonClick> Ereignis der Symbolleiste wird die-Eigenschaft von ausgewertet und das entsprechende Dialogfeld geöffnet. Dieser Code erfordert, dass <xref:System.Windows.Forms.Form> <xref:System.Windows.Forms.OpenFileDialog>,,, <xref:System.Windows.Forms.SaveFileDialog>und eine <xref:System.Windows.Forms.PrintDialog> alle erstellt wurden.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ToolBarButtonClickEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : string -&gt; int&#xA;override this.IndexOfKey : string -&gt; int" Usage="toolBarButtonCollection.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des zu suchenden <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Ruft den Index des ersten Vorkommens eines <see cref="T:System.Windows.Forms.ToolBarButton" /> mit dem angegebenen Schlüssel ab.</summary>
        <returns>Der Index des ersten Vorkommens eines <see cref="T:System.Windows.Forms.ToolBarButton" /> mit dem angegebenen Schlüssel, sofern gefunden, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOfKey%2A> nacheinander aufgerufen wird, wird der zuletzt zurückgegebene Index zuerst auf eine Schlüssel Übereinstimmung geprüft. wenn keine Entsprechung vorhanden ist, beginnt die Suche am Anfang der Auflistung.  
  
 Die <xref:System.Windows.Forms.ToolBarButton.Name%2A> -Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.ToolBarButton> in der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 Beim Schlüssel Vergleich wird die Groß-/Kleinschreibung nicht beachtet. Wenn der `key` -Parameter `null` oder eine leere Zeichenfolge <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item%2A> ist, wird-1 zurückgegeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert(System.Int32,System.Windows.Forms.ToolBarButton)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, button As ToolBarButton)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::Windows::Forms::ToolBarButton ^ button);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * System.Windows.Forms.ToolBarButton -&gt; unit" Usage="toolBarButtonCollection.Insert (index, button)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="index">Die indizierte Position in der Auflistung, an der die Symbolleisten-Schaltfläche eingefügt werden soll.</param>
        <param name="button">Der einzufügende <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Fügt eine vorhandene Symbolleisten-Schaltfläche an der angegebenen Position in die Auflistung der Symbolleisten-Schaltflächen ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können der Auflistung auch <xref:System.Windows.Forms.ToolBarButton> neue Objekte hinzufügen, indem Sie <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> -Methode oder die-Methode verwenden.  
  
 Um einen <xref:System.Windows.Forms.ToolBarButton> zu entfernen, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> den Sie zuvor hinzugefügt haben, verwenden <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> Sie die-Methode oder die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Code <xref:System.Windows.Forms.ToolBarButton> Beispiel wird ein vorhandenes aus einem <xref:System.Windows.Forms.ToolBar> -Steuerelement entfernt, sofern vorhanden, und es werden vier <xref:System.Windows.Forms.ToolBar>neue <xref:System.Windows.Forms.ToolBarButton> -Objekte hinzugefügt und dem hinzugefügt. Dieses Beispiel erfordert, dass Sie über <xref:System.Windows.Forms.Form> ein- <xref:System.Windows.Forms.ToolBar> Steuerelement mit einem-Steuerelement verfügen.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange(System.Windows.Forms.ToolBarButton[])" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.ToolBar.ToolBarButtonCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Auflistung schreibgeschützt ist.</summary>
        <value><see langword="true" />, wenn die Auflistung schreibgeschützt ist, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Code <xref:System.Windows.Forms.ToolBarButton> Beispiel wird ein vorhandenes aus einem <xref:System.Windows.Forms.ToolBar> -Steuerelement entfernt, sofern vorhanden, und es werden vier <xref:System.Windows.Forms.ToolBar>neue <xref:System.Windows.Forms.ToolBarButton> -Objekte hinzugefügt und dem hinzugefügt. Dieses Beispiel erfordert, dass Sie über <xref:System.Windows.Forms.Form> ein- <xref:System.Windows.Forms.ToolBar> Steuerelement mit einem-Steuerelement verfügen.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft einen <see cref="T:System.Windows.Forms.ToolBarButton" /> in der Auflistung ab oder legt diesen fest.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ToolBarButton this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolBarButton Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As ToolBarButton" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ToolBarButton ^ default[int] { System::Windows::Forms::ToolBarButton ^ get(int index); void set(int index, System::Windows::Forms::ToolBarButton ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Forms.ToolBarButton with get, set" Usage="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolBarButton</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Die indizierte Position des <see cref="T:System.Windows.Forms.ToolBarButton" /> in der Auflistung.</param>
        <summary>Ruft die Symbolleisten-Schaltfläche an der angegebenen indizierten Position in der Auflistung der Symbolleisten-Schaltflächen ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.ToolBarButton" />, der die Symbolleisten-Schaltfläche an der angegebenen indizierten Position darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Zuweisen <xref:System.Windows.Forms.ToolBarButton> von Steuerelementen zu einem bestimmten Speicherort oder zum Abrufen der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>Steuerelemente aus der können Sie auf das Auflistungs Objekt mit einem bestimmten Indexwert verweisen. Der Indexwert von <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> ist ein NULL basierter Index.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die letzte Symbolleisten Schaltfläche auf einer Symbolleiste ersetzt. Dieser Code erfordert, dass <xref:System.Windows.Forms.ToolBar> ein und <xref:System.Windows.Forms.ToolBarButton> mindestens ein erstellt wurde. Das Beispiel ruft die Anzahl der Schaltflächen auf der Symbolleiste ab und ersetzt die letzte Schaltfläche durch eine neu erstellte. Der `index` Wert der zu ersetzenden Symbolleisten Schaltfläche <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> wird auf die-Eigenschaft minus 1 <xref:System.Windows.Forms.ToolBarButton> festgelegt, da die Auflistung ein NULL basierter Index ist.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.this Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.this Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.this Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.this Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.this Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.this Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="index" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Wert ist kleiner als 0.  
  
- oder - 
Der <paramref name="index" />-Wert ist größer als die Anzahl der Schaltflächen in der Auflistung, und die Auflistung der Schaltflächen ist nicht <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count" />
        <altmember cref="T:System.Windows.Forms.ToolBarButton" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ToolBarButton this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolBarButton Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As ToolBarButton" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ToolBarButton ^ default[System::String ^] { System::Windows::Forms::ToolBarButton ^ get(System::String ^ key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Windows.Forms.ToolBarButton" Usage="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolBarButton</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der Name der abzurufenden <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Ruft einen <see cref="T:System.Windows.Forms.ToolBarButton" /> mit dem angegebenen Schlüssel aus der Auflistung ab.</summary>
        <value>Das <see cref="T:System.Windows.Forms.ToolBarButton" />, dessen <see cref="P:System.Windows.Forms.ToolBarButton.Name" />-Eigenschaft mit dem angegebenen Schlüssel übereinstimmt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBarButton.Name%2A> -Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.ToolBarButton> in der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 Beim Schlüssel Vergleich wird die Groß-/Kleinschreibung nicht beachtet. Wenn der `key` -Parameter `null` oder eine leere Zeichenfolge <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item%2A> ist `null`, wird zurückgegeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove(System.Windows.Forms.ToolBarButton)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (button As ToolBarButton)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Forms::ToolBarButton ^ button);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.Forms.ToolBarButton -&gt; unit" Usage="toolBarButtonCollection.Remove button" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">Die aus der Auflistung zu entfernende <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Entfernt eine angegebene Schaltfläche aus der Auflistung der Symbolleisten-Schaltflächen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A>Methoden, oder <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> , um Symbolleisten Schaltflächen aus der Auflistung zu entfernen.  
  
 Um der Auflistung <xref:System.Windows.Forms.ToolBarButton> neue Objekte hinzuzufügen, verwenden Sie <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> die- <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> Methode oder die-Methode.  
  
   
  
## Examples  
 Im folgenden Code <xref:System.Windows.Forms.ToolBarButton> Beispiel wird ein vorhandenes aus einem <xref:System.Windows.Forms.ToolBar> -Steuerelement entfernt, sofern vorhanden, und es werden vier <xref:System.Windows.Forms.ToolBar>neue <xref:System.Windows.Forms.ToolBarButton> -Objekte hinzugefügt und dem hinzugefügt. Dieses Beispiel erfordert, dass Sie über <xref:System.Windows.Forms.Form> ein- <xref:System.Windows.Forms.ToolBar> Steuerelement mit einem-Steuerelement verfügen.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
        <altmember cref="T:System.Windows.Forms.ToolBarButton" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="toolBarButtonCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Die indizierte Position des <see cref="T:System.Windows.Forms.ToolBarButton" /> in der Auflistung.</param>
        <summary>Entfernt eine angegebene Schaltfläche aus der Auflistung der Symbolleisten-Schaltflächen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A> -Methode entfernt <xref:System.Windows.Forms.ToolBarButton> das an <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>der angegebenen Position in. Wenn Sie alle <xref:System.Windows.Forms.ToolBarButton> Steuerelemente aus der Auflistung entfernen möchten, verwenden Sie <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> die-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die letzten <xref:System.Windows.Forms.ToolBarButton> in einem <xref:System.Windows.Forms.ToolBar>entfernt. Der Indexwert der zu entfernenden Symbolleisten-Schaltfläche <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> ist auf die-Eigenschaft minus 1 <xref:System.Windows.Forms.ToolBarButton> festgelegt, da die Auflistung ein NULL basierter Index ist.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Wert ist kleiner als 0 oder größer als die Anzahl der Schaltflächen in der Auflistung.</exception>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
        <altmember cref="T:System.Windows.Forms.ToolBarButton" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member RemoveByKey : string -&gt; unit&#xA;override this.RemoveByKey : string -&gt; unit" Usage="toolBarButtonCollection.RemoveByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Der aus der Auslistung zu entfernende Name von <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Entfernt das <see cref="T:System.Windows.Forms.ToolBarButton" /> mit dem angegebenen Schlüssel aus der Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBarButton.Name%2A> -Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.ToolBarButton> in der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (dest As Array, index As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ dest, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der <see cref="T:System.Collections.ICollection" /> kopierten Elemente ist. Für das <see cref="T:System.Array" /> muss eine nullbasierte Indizierung verwendet werden.</param>
        <param name="index">Der nullbasierte Index im <paramref name="dest" />, bei dem der Kopiervorgang beginnt.</param>
        <summary>Kopiert die Elemente der <see cref="T:System.Collections.ICollection" /> in ein <see cref="T:System.Array" />, beginnend bei einem bestimmten <see cref="T:System.Array" />-Index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.ICollection>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf die Auflistung synchronisiert ist (threadsicher).</summary>
        <value><see langword="false" /> in allen Fällen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.ICollection>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, mit dem der Zugriff auf die Schaltflächenauflistung synchronisiert werden kann.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.ICollection>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (button As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ button) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">Der <see cref="T:System.Windows.Forms.ToolBarButton" />, der nach sämtlichen vorhandenen Schaltflächen hinzugefügt werden soll.</param>
        <summary>Fügt die angegebene Symbolleisten-Schaltfläche am Ende der Auflistung der Symbolleisten-Schaltflächen hinzu.</summary>
        <returns>Der nullbasierte Indexwert des <see cref="T:System.Windows.Forms.ToolBarButton" />, das der Auflistung hinzugefügt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="button" /> ist keine <see cref="T:System.Windows.Forms.ToolBarButton" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (button As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ button) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">Das Element, das in der Auflistung gesucht werden soll.</param>
        <summary>Ermittelt, ob die Auflistung einen bestimmten Wert enthält.</summary>
        <returns><see langword="true" />, wenn das Element in der Auflistung gefunden wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (button As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ button) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">Das Element, das in der Auflistung gesucht werden soll.</param>
        <summary>Bestimmt den Index eines bestimmten Elements in der Auflistung.</summary>
        <returns>Der Index von <paramref name="button" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, button As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ button) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Die indizierte Position in der Auflistung, an der die Symbolleisten-Schaltfläche eingefügt werden soll.</param>
        <param name="button">Der einzufügende <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Fügt eine vorhandene Symbolleisten-Schaltfläche an der angegebenen Position in die Auflistung der Symbolleisten-Schaltflächen ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="button" /> ist keine <see cref="T:System.Windows.Forms.ToolBarButton" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Auflistung eine feste Größe aufweist.</summary>
        <value><see langword="false" /> in allen Fällen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements, das abgerufen oder festgelegt werden soll.</param>
        <summary>Ruft das Element an einem angegebenen Index ab oder legt dieses fest.</summary>
        <value>Das Element am angegebenen Index.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (button As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ button) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">Der <see cref="T:System.Object" />, der aus der <see cref="T:System.Collections.IList" /> entfernt werden soll.</param>
        <summary>Entfernt das erste Vorkommen eines Elements aus der Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="KeyEventArgs" FullName="System.Windows.Forms.KeyEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f7a09a08aee9ad6dc00487d6ac81be2c980803af" /><Meta Name="ms.sourcegitcommit" Value="5ef0d02cb57c7153fd9d5417cdcad45665af832e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/29/2019" /><Meta Name="ms.locfileid" Value="70158719" /></Metadata><TypeSignature Language="C#" Value="public class KeyEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type KeyEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Daten für das <see cref="E:System.Windows.Forms.Control.KeyDown" />-Ereignis oder das <see cref="E:System.Windows.Forms.Control.KeyUp" />-Ereignis bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.KeyEventArgs>, der die vom Benutzer gedrückte Taste angibt und angibt, ob alle Modifizierertasten (STRG, alt und UMSCHALT) gleichzeitig gedrückt wurden, und wird mit <xref:System.Windows.Forms.Control.KeyDown> jedem <xref:System.Windows.Forms.Control.KeyUp> -Ereignis oder einem-Ereignis übermittelt.  
  
 Das <xref:System.Windows.Forms.Control.KeyDown> Ereignis tritt auf, wenn der Benutzer eine Taste drückt. Das <xref:System.Windows.Forms.Control.KeyUp> Ereignis tritt auf, wenn der Benutzer den Schlüssel freigibt. Doppelte <xref:System.Windows.Forms.Control.KeyDown> Ereignisse treten immer dann auf, wenn der Schlüssel wiederholt wird, wenn der Schlüssel nicht mehr <xref:System.Windows.Forms.Control.KeyUp> vorhanden ist, aber nur ein Ereignis generiert wird, wenn der Benutzer den Schlüssel freigibt.  
  
 Das <xref:System.Windows.Forms.Control.KeyPress> Ereignis tritt auch auf, wenn eine Taste gedrückt wird. Eine <xref:System.Windows.Forms.KeyPressEventArgs> wird mit jedem <xref:System.Windows.Forms.Control.KeyPress> Ereignis weitergegeben und gibt das Zeichen an, das als Ergebnis der einzelnen Tastenkombination erstellt wurde.  
  
 Weitere Informationen zum Ereignis Modell finden Sie unter [behandeln und Auswerfen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Die folgenden Codebeispiele veranschaulichen, wie Sie den Zustand eines Tastendruck erkennen.  
  
 **Beispiel 1**  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie das <xref:System.Windows.Forms.Control.KeyDown> -Ereignis mit <xref:System.Windows.Forms.Help> der-Klasse verwendet wird, um dem Benutzer der Anwendung Popup-Stil-Hilfe anzuzeigen. Das Beispiel verwendet die <xref:System.Windows.Forms.KeyEventArgs> Eigenschaften, die an die Ereignishandlermethode übermittelt werden, um nach allen Variationen der Tastenkombination mit einer Modifizierertaste zu filtern. Wenn der Benutzer eine beliebige Variation von F1 drückt, die einen beliebigen Tastatur Modifizierer enthält, zeigt die <xref:System.Windows.Forms.Help> -Klasse ein Popup Fenster an, das ähnlich wie ein <xref:System.Windows.Forms.ToolTip>-Steuerelement in der Nähe des Steuer Elements ist. Wenn der Benutzer ALT + F2 drückt, wird ein anderes Popup Fenster mit zusätzlichen Informationen angezeigt.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Beispiel 2**  
  
 Im folgenden Beispiel wird ermittelt, ob der Benutzer ALT + E gedrückt hat, und wenn sich der Maus <xref:System.Windows.Forms.TreeNode>Zeiger über einem befindet, kann der <xref:System.Windows.Forms.TreeNode>Benutzer das Bearbeiten.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **Beispiel 3**  
  
 Im folgenden Beispiel wird ermittelt, ob der Benutzer einen nicht numerischen Schlüssel gedrückt hat, und wenn dies der Fall <xref:System.Windows.Forms.Control.KeyPress> ist, wird das <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> Ereignis mit der-Eigenschaft abgebrochen.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyData As Keys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyEventArgs(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.KeyEventArgs : System.Windows.Forms.Keys -&gt; System.Windows.Forms.KeyEventArgs" Usage="new System.Windows.Forms.KeyEventArgs keyData" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Eine <see cref="T:System.Windows.Forms.Keys" />-Enumeration, die die gedrückte Taste darstellt, zusammen mit allen Modifiziererflags, die angeben, welche der Tasten STRG, UMSCHALTTASTE und ALT gleichzeitig gedrückt wurden. Mögliche Werte werden abgerufen, indem der bitweise Operator OR (|) auf Konstanten aus der <see cref="T:System.Windows.Forms.Keys" />-Enumeration angewendet wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.KeyEventArgs" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Alt">
      <MemberSignature Language="C#" Value="public virtual bool Alt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Alt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Alt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Alt { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Alt : bool" Usage="System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ALT gedrückt wurde.</summary>
        <value><see langword="true" />, wenn ALT gedrückt wurde, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 **Beispiel 1**  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie das <xref:System.Windows.Forms.Control.KeyDown> -Ereignis mit <xref:System.Windows.Forms.Help> der-Klasse verwendet wird, um dem Benutzer der Anwendung Popup-Stil-Hilfe anzuzeigen. Das Beispiel verwendet die <xref:System.Windows.Forms.KeyEventArgs> Eigenschaften, die an die Ereignishandlermethode übermittelt werden, um nach allen Variationen der Tastenkombination mit einer Modifizierertaste zu filtern. Wenn der Benutzer eine beliebige Variation von F1 drückt, die einen beliebigen Tastatur Modifizierer enthält, zeigt die <xref:System.Windows.Forms.Help> -Klasse ein Popup Fenster an, das ähnlich wie ein <xref:System.Windows.Forms.ToolTip>-Steuerelement in der Nähe des Steuer Elements ist. Wenn der Benutzer ALT + F2 drückt, wird ein anderes Popup Fenster mit zusätzlichen Informationen angezeigt.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Beispiel 2**  
  
 Im folgenden Beispiel wird ermittelt, ob der Benutzer ALT + E gedrückt hat, und wenn sich der <xref:System.Windows.Forms.TreeNode>Mauszeiger über befindet, kann der <xref:System.Windows.Forms.TreeNode>Benutzer das Bearbeiten.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public bool Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Control { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : bool" Usage="System.Windows.Forms.KeyEventArgs.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob STRG gedrückt wurde.</summary>
        <value><see langword="true" />, wenn STRG gedrückt wurde, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie das <xref:System.Windows.Forms.Control.KeyDown> -Ereignis mit <xref:System.Windows.Forms.Help> der-Klasse verwendet wird, um dem Benutzer der Anwendung Popup-Stil-Hilfe anzuzeigen. Das Beispiel verwendet die <xref:System.Windows.Forms.KeyEventArgs> Eigenschaften, die an die Ereignishandlermethode übermittelt werden, um nach allen Variationen der Tastenkombination mit einer Modifizierertaste zu filtern. Wenn der Benutzer eine beliebige Variation von F1 drückt, die einen beliebigen Tastatur Modifizierer enthält, zeigt die <xref:System.Windows.Forms.Help> -Klasse ein Popup Fenster an, das ähnlich wie ein <xref:System.Windows.Forms.ToolTip>-Steuerelement in der Nähe des Steuer Elements ist. Wenn der Benutzer ALT + F2 drückt, wird ein anderes Popup Fenster mit zusätzlichen Informationen angezeigt.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Ereignis behandelt wurde, oder legt diesen fest.</summary>
        <value><see langword="true" />, um die Standardbehandlung des Steuerelements zu umgehen, andernfalls <see langword="false" />, um auch das Ereignis an den Standardsteuerelementhandler zu übergeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A>wird von verschiedenen Steuerelementen in Windows Forms unterschiedlich implementiert. Für Steuerelemente <xref:System.Windows.Forms.TextBox> , die eine Unterklasse systemeigene Win32-Steuerelemente aufweisen, wird Sie so interpretiert, dass die Schlüssel Nachricht nicht an das zugrunde liegende Native Steuerelement übermittelt werden soll. Wenn Sie für `Handled` einen <xref:System.Windows.Forms.TextBox>auf true festgelegt haben, übergibt dieses Steuerelement den Tasten `events` Druck nicht an das zugrunde liegende Win32-Textfeld-Steuerelement, sondern zeigt dennoch die Zeichen an, die der Benutzer eingegeben hat.  
  
 Wenn Sie verhindern möchten, dass das aktuelle Steuerelement einen Tastendruck empfängt, verwenden <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> Sie die-Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ermittelt, ob der Benutzer einen nicht numerischen Schlüssel gedrückt hat, und wenn dies der Fall <xref:System.Windows.Forms.Control.KeyPress> ist, wird das <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> Ereignis mit der-Eigenschaft abgebrochen.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyCode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyCode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyCode As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys KeyCode { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyCode : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Tastaturcode für ein <see cref="E:System.Windows.Forms.Control.KeyDown" />-Ereignis oder ein <see cref="E:System.Windows.Forms.Control.KeyUp" />-Ereignis ab.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.Keys" />-Wert, der den Tastencode für das Ereignis darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 In den folgenden Codebeispielen wird veranschaulicht, wie <xref:System.Windows.Forms.KeyEventArgs.KeyCode%2A> die-Eigenschaft verwendet wird, um zu bestimmen, welche Taste gedrückt wurde.  
  
 **Beispiel 1**  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie das <xref:System.Windows.Forms.Control.KeyDown> -Ereignis mit <xref:System.Windows.Forms.Help> der-Klasse verwendet wird, um dem Benutzer der Anwendung Popup-Stil-Hilfe anzuzeigen. Das Beispiel verwendet die <xref:System.Windows.Forms.KeyEventArgs> Eigenschaften, die an die Ereignishandlermethode übermittelt werden, um nach allen Variationen der Tastenkombination mit einer Modifizierertaste zu filtern. Wenn der Benutzer eine beliebige Variation von F1 drückt, die einen beliebigen Tastatur Modifizierer enthält, zeigt die <xref:System.Windows.Forms.Help> -Klasse ein Popup Fenster an, das ähnlich wie ein <xref:System.Windows.Forms.ToolTip>-Steuerelement in der Nähe des Steuer Elements ist. Wenn der Benutzer ALT + F2 drückt, wird ein anderes Popup Fenster mit zusätzlichen Informationen angezeigt.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Beispiel 2**  
  
 Im folgenden Beispiel wird ermittelt, ob der Benutzer ALT + E gedrückt hat, und wenn sich der Maus <xref:System.Windows.Forms.TreeNode>Zeiger über einem befindet, kann der <xref:System.Windows.Forms.TreeNode>Benutzer das Bearbeiten.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **Beispiel 3**  
  
 Im folgenden Beispiel wird ermittelt, ob der Benutzer einen nicht numerischen Schlüssel gedrückt hat, und wenn dies der Fall <xref:System.Windows.Forms.Control.KeyPress> ist, wird das <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> Ereignis mit der-Eigenschaft abgebrochen.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyData As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys KeyData { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Tastendaten für ein <see cref="E:System.Windows.Forms.Control.KeyDown" />-Ereignis oder ein <see cref="E:System.Windows.Forms.Control.KeyUp" />-Ereignis ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.Keys" />-Enumeration, die den Tastencode für die gedrückte Taste darstellt, zusammen mit Modifiziererflags, die angeben, welche der Tasten STRG, UMSCHALTTASTE und ALT gleichzeitig gedrückt wurden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können Konstanten aus <xref:System.Windows.Forms.Keys> verwenden, um Informationen aus der <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> -Eigenschaft zu extrahieren. Verwenden Sie den bitweisen AND-Operator zum Vergleichen von Daten <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> , die von <xref:System.Windows.Forms.Keys> mit Konstanten in zurückgegeben werden, um Informationen darüber abzurufen, welche Schlüssel der Benutzer gedrückt hat. Verwenden Sie die <xref:System.Windows.Forms.KeyEventArgs.Control%2A>Eigenschaften, <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>und <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> , um zu bestimmen, ob eine bestimmte Modifizierertaste gedrückt wurde.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> empfiehlt <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> es sich, durch zu ersetzen oder die Nachricht <xref:System.Windows.Forms.TextBox>an eine mehrzeilige anfügen.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz eines Typs enthält, der <xref:System.Windows.Forms.Control>von erbt, <xref:System.Windows.Forms.Button> z <xref:System.Windows.Forms.ComboBox>. b. oder. Benennen Sie dann die `Control1` Instanz, und stellen Sie sicher, dass der Ereignis <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> Handler dem Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyValue">
      <MemberSignature Language="C#" Value="public int KeyValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyValue As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyValue { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyValue : int" Usage="System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Tastaturwert für ein <see cref="E:System.Windows.Forms.Control.KeyDown" />-Ereignis oder ein <see cref="E:System.Windows.Forms.Control.KeyUp" />-Ereignis ab.</summary>
        <value>Die Darstellung der <see cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />-Eigenschaft als Ganzzahl.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> empfiehlt <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> es sich, durch zu ersetzen oder die Nachricht <xref:System.Windows.Forms.TextBox>an eine mehrzeilige anfügen.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz eines Typs enthält, der <xref:System.Windows.Forms.Control>von erbt, <xref:System.Windows.Forms.Button> z <xref:System.Windows.Forms.ComboBox>. b. oder. Benennen Sie dann die `Control1` Instanz, und stellen Sie sicher, dass der Ereignis <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> Handler dem Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys Modifiers { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Modifiziererflags für ein <see cref="E:System.Windows.Forms.Control.KeyDown" />-Ereignis oder ein <see cref="E:System.Windows.Forms.Control.KeyUp" />-Ereignis ab. Die Flags geben an, welche Kombination aus STRG, UMSCHALTTASTE und ALT gedrückt wurde.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.Keys" />-Wert, der mindestens ein Modifiziererflag darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Windows.Forms.KeyEventArgs.Control%2A>Eigenschaften, <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>und <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> , um zu bestimmen, ob eine bestimmte Modifizierertaste gedrückt wurde. Modifiziererflags können mit einem bitweisen OR kombiniert werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Windows.Forms.KeyEventArgs.Modifiers%2A> -Eigenschaft verwendet wird, um zu bestimmen, welche Modifizierertasten zusammen mit dem Primärschlüssel gedrückt wurden.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="Shift">
      <MemberSignature Language="C#" Value="public virtual bool Shift { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Shift" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Shift As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Shift { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Shift : bool" Usage="System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die UMSCHALTTASTE gedrückt wurde.</summary>
        <value><see langword="true" />, wenn die UMSCHALTTASTE gedrückt wurde, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird bestimmt, ob der Benutzer die UMSCHALTTASTE mit der F1-Taste gedrückt hat, und wenn dies der Fall ist, wird die Hilfe angezeigt.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="SuppressKeyPress">
      <MemberSignature Language="C#" Value="public bool SuppressKeyPress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SuppressKeyPress" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Property SuppressKeyPress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SuppressKeyPress { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SuppressKeyPress : bool with get, set" Usage="System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Key-Ereignis an das zugrunde liegende Steuerelement übergeben werden soll.</summary>
        <value><see langword="true" />, wenn das Key-Ereignis nicht an das Steuerelement gesendet werden soll, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können dieser `true` Eigenschaft in einem Ereignishandler zuweisen, <xref:System.Windows.Forms.Control.KeyDown> z. b., um Benutzereingaben zu verhindern.  
  
 Durch <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> festlegen `true` von auf <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> wird `true`auch auf festgelegt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird verhindert, dass numerische Tastatureingaben <xref:System.Windows.Forms.TextBox> das Steuer `textBox1`Element mit dem Namen erreichen.  
  
 [!code-csharp[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/csharp/VS_Snippets_Winforms/keyeventargs.suppresskeypress/cs/form1.cs#1)]
 [!code-vb[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/keyeventargs.suppresskeypress/vb/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Handled" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="HtmlWindow" FullName="System.Windows.Forms.HtmlWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b74e5eabfe7496168c954e2b0b823f7db62e53fb" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86728444" /></Metadata><TypeSignature Language="C#" Value="public sealed class HtmlWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlWindow extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlWindow" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlWindow" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlWindow sealed" />
  <TypeSignature Language="F#" Value="type HtmlWindow = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt das logische Fenster dar, das eine oder mehrere Instanzen von <see cref="T:System.Windows.Forms.HtmlDocument" /> enthält.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow> sollte nicht mit dem Konzept eines Fensters in Windows Forms oder der Windows-API verwechselt werden. Es ist keine `HWND` oder ähnliche Windows-Ressource vorhanden, die direkt einer Instanz von entspricht <xref:System.Windows.Forms.HtmlWindow> . Stattdessen bietet eine ausführliche <xref:System.Windows.Forms.HtmlWindow> Beschreibung des Speicher Orts eines Dokuments auf dem Bildschirm eines Benutzers sowie Methoden zum interagieren mit Benutzern mithilfe von Eingabe Aufforderungen und Dialogfeldern. <xref:System.Windows.Forms.HtmlWindow> fungiert als logischer Container für die Dokumente einer Webseite und deren Metadaten, z. b. den Speicherort des Dokuments und die Funktionen des Webbrowsers.  
  
 Eine Webseite besteht aus einem einzelnen Dokument oder einem `FRAMESET` , das ein oder mehrere- `FRAME` Elemente enthält, von denen jede ein eigenes Dokument hostet. Webentwickler verwenden Framesets, um logisch verwandte Seiten nebeneinander anzuzeigen (z. b. eine Inhaltsseite neben einer Navigationsseite). Wenn eine Seite aus einem einzelnen Dokument besteht, können Sie über die- <xref:System.Windows.Forms.HtmlWindow.Document%2A> Eigenschaft von darauf zugreifen <xref:System.Windows.Forms.HtmlWindow> . wenn die Seite Frames verwendet, können Sie über die-Auflistung <xref:System.Windows.Forms.HtmlWindow.Frames%2A> , die aus einem oder mehreren-Objekten besteht, auf Ihre Dokumente zugreifen <xref:System.Windows.Forms.HtmlWindow> .  
  
 Wenn <xref:System.Windows.Forms.WebBrowser> Sie das Steuerelement in einer Windows Forms Anwendung hosten, können Sie mithilfe von Standard Windows Forms Klassen wie oder mit dem Benutzer interagieren <xref:System.Windows.Forms.Form> , <xref:System.Windows.Forms.MessageBox> oder Sie können Methoden für <xref:System.Windows.Forms.HtmlWindow> diesen Zweck verwenden. Die <xref:System.Windows.Forms.HtmlWindow.Alert%2A> -Methode stellt ein einfaches Dialogfeld mit benutzerdefiniertem Text und einer Schaltfläche **OK** dar, <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> zeigt eine Zeile benutzerdefinierter Text und ein Texteingabefeld für den Benutzer an und <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> zeigt ein Dialogfeld mit einer Zeile mit benutzerdefiniertem Text und den Schaltflächen **OK** und **Abbrechen** an.  
  
 Sie können verwenden <xref:System.Windows.Forms.HtmlWindow> , um neue Fenster zu öffnen, die neue Dokumente enthalten. <xref:System.Windows.Forms.HtmlWindow.Open%2A> lädt die angegebene URL in das benannte Fenster, erstellt Sie, wenn Sie nicht bereits vorhanden ist, während die <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> URL in einem neu erstellten Fenster immer öffnet.  
  
   
  
## Examples  
 Das folgende Codebeispiel enthält zwei Methoden. Der erste öffnet eine URL in einem Fenster mit dem Namen `displayWindow` , das erstellt wird, wobei eine Statusleiste angezeigt wird. Die zweite öffnet eine andere URL im gleichen Fenster, gibt jedoch an, dass nur die Positions Leiste angezeigt werden soll. Beachten Sie, dass die Abmessungen des Fensters und die angezeigten Steuerelemente davon abhängen, welche URL zuerst geöffnet wird. Das Codebeispiel erfordert, dass das Formular ein Steuerelement mit dem <xref:System.Windows.Forms.WebBrowser> Namen enthält `WebBrowser1` .  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window">Window-Objekt</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa741505(v=vs.85)">IHTMLWindow2-Schnittstelle</related>
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Alert(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Alert(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Alert (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Alert(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Alert : string -&gt; unit" Usage="htmlWindow.Alert message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Der im Meldungsfeld anzuzeigende <see cref="T:System.String" />.</param>
        <summary>Zeigt ein Meldungsfenster an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Windows.Forms.MessageBox?displayProperty=nameWithType> Klasse bietet eine leistungsfähigere Version der- <xref:System.Windows.Forms.HtmlWindow.Alert%2A> Methode.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/alert">Benachrichtigungs Methode</related>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachEventHandler (eventName As String, eventHandler As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Der Name des zu behandelnden Ereignisses.</param>
        <param name="eventHandler">Ein Verweis auf den verwalteten Code, der das Ereignis behandelt.</param>
        <summary>Fügt einen Ereignishandler für das benannte HTML-DOM-Ereignis hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie sollten ein Ereignis erst an ein HTML-Dokument oder eines seiner Objekte anfügen, wenn das Laden des Dokuments abgeschlossen ist. Das früheste, dass Sie diese Methode im-Ereignis des-Steuer Elements aufzurufen <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> <xref:System.Windows.Forms.WebBrowser> .  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener">EVENTTARGET. addEventListener ()</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="htmlWindow.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt das Fenster.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die- <xref:System.Windows.Forms.HtmlWindow.IsClosed%2A> Eigenschaft, um zu bestimmen, ob das Fenster bereits geschlossen ist. Wenn das Fenster bereits geschlossen ist, hat diese Methode keine Auswirkungen.  
  
 Wenn Sie neue Fenster mithilfe <xref:System.Windows.Forms.HtmlWindow.Open%2A> von oder erstellen <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> , <xref:System.Windows.Forms.HtmlWindow.Close%2A> bewirkt das HTML-Dokumentobjektmodell, eine neue Instanz von Internet Explorer zu öffnen. Wenn Sie nicht <xref:System.Windows.Forms.HtmlWindow.Close%2A> für alle von Ihnen erstellten Fenster aufzurufen, wird diese Internet Explorer-Instanz auch nach dem Schließen der Anwendung weiterhin ausgeführt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein Fenster geöffnet und geschlossen, wenn der Benutzer es in den letzten fünf Minuten nicht verwendet hat. Das Codebeispiel wurde unter der Annahme geschrieben, dass das Formular über ein-Steuerelement mit dem Namen <xref:System.Windows.Forms.WebBrowser> `WebBrowser1` , ein <xref:System.Windows.Forms.Button> benanntes `Button1` und eine Klasse mit dem <xref:System.Windows.Forms.Timer> Namen verfügt `Timer1` . Um dieses Beispiel erfolgreich auszuführen, ändern Sie das erste Argument, das in angegeben ist, <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> in eine gültige URL.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/close">Close-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public bool Confirm (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Confirm(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Confirm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (message As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Confirm(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Confirm : string -&gt; bool" Usage="htmlWindow.Confirm message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Der Text, der für den Benutzer angezeigt wird.</param>
        <summary>Zeigt ein Dialogfeld mit einer Meldung und Schaltflächen für die Angabe einer Ja/Nein-Antwort an.</summary>
        <returns><see langword="true" />, wenn der Benutzer auf **Ja** geklickt hat, <see langword="false" />, wenn der Benutzer auf **Nein** geklickt oder das Dialogfeld geschlossen hat.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> zeigt ein modales Dialogfeld an. der Benutzer kann nicht auf die zugrunde liegende HTML-Seite zugreifen, ohne das Dialogfeld zuvor zu schließen.  
  
## Examples  

Kopieren Sie den folgenden HTML-Code, und speichern Sie ihn in einem Formular namens orderForm.htm:  

```html
<HTML>
<BODY>
<FORM name="NewOrderForm">
Select Part Type:
<SELECT name="PartType">
  <OPTION>AZ-3700
  <OPTION>AZ-3701
  <OPTION>AZ-3702  
</SELECT><br/>
Quantity: <INPUT type="text" name="PartQty" size="2" maxsize="2" /><br/>
Building/Desk:
<INPUT type="text" name="PartBuilding" size="2" maxsize="2"/> /  
<INPUT type="text" name="PartDesk" size="2" maxsize="2"/><p/>
<INPUT type="submit" value="Transmit Order"/>
</FORM>
</BODY>
</HTML>
```

Im folgenden Beispiel wird ein <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> Dialogfeld angezeigt, wenn der Benutzer übermittelt `NewOrderForm` .  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/confirm">Confirm-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetachEventHandler (eventName As String, eventHandler As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Der Name des zu behandelnden Ereignisses.</param>
        <param name="eventHandler">Ein Verweis auf den verwalteten Code, der das Ereignis behandelt.</param>
        <summary>Entfernt den benannten Ereignishandler.</summary>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/eventtarget/removeeventlistener">DetachEvent-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Windows.Forms.HtmlDocument" Usage="System.Windows.Forms.HtmlWindow.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das im Fenster enthaltene HTML-Dokument ab.</summary>
        <value>Eine gültige Instanz von <see cref="T:System.Windows.Forms.HtmlDocument" />, wenn ein Dokument geladen ist. Wenn dieses Fenster ein <c>Frameset</c>enthält oder derzeit kein Dokument geladen ist, wird zurückgegeben <see langword="null" /> .</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel greifen Sie <xref:System.Windows.Forms.HtmlWindow.Document%2A> auf die über die- <xref:System.Windows.Forms.WebBrowser.Document%2A> Eigenschaft des-Steuer Elements zu <xref:System.Windows.Forms.WebBrowser> . Verwenden Sie diese Eigenschaft, wenn Sie auf ein Dokument innerhalb einer mithilfe der-Auflistung zugreifen müssen `FRAME` <xref:System.Windows.Forms.HtmlWindow.Frames%2A> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird jedes Dokument innerhalb einer Seite überprüft, die Frames enthält, und es wird eine Tabelle mit allen ausgehenden Hyperlinks von jeder Seite für die spätere Überprüfung erstellt.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DomWindow">
      <MemberSignature Language="C#" Value="public object DomWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomWindow As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomWindow { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomWindow : obj" Usage="System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die nicht verwaltete Schnittstelle ab, die von dieser Klasse umschlossen wird.</summary>
        <value>Ein-Objekt, das in einen-,-oder-Zeiger umgewandelt werden kann <see langword="IHTMLWindow2" /> <see langword="IHTMLWindow3" /> <see langword="IHTMLWindow4" /> .</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die zugrunde liegenden nicht verwalteten Schnittstellen Zeiger zum Dokumentobjektmodell (DOM), um Methoden auszuführen, die nicht von verfügbar gemacht werden <xref:System.Windows.Forms.HtmlWindow> .  
  
 Sie müssen dem nicht verwalteten MSHTML.dll einen referenzierten hinzufügen, um zu verwenden <xref:System.Windows.Forms.HtmlWindow.DomWindow%2A> . Weitere Informationen finden Sie unter [Importieren einer Typbibliothek als Assembly](/dotnet/framework/interop/importing-a-type-library-as-an-assembly).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein `IHTMLWindow2` Zeiger aus dem Fenster eines Dokuments abgerufen und ein neues Dokument in einem modalen Fenster angezeigt.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">IHTMLWindow2-Schnittstelle</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741356.aspx">IHTMLWindow3-Schnittstelle</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741344.aspx">IHTMLWindow4-Schnittstelle</related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlWindow.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das zu überprüfende Objekt.</param>
        <summary>Überprüft das Objekt und das aktuelle Objekt auf Gleichheit.</summary>
        <returns><see langword="true" />, wenn die Objekte gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As HtmlElementErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " Usage="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn bei der Ausführung eines Skripts innerhalb des Fensters ein Laufzeitfehler auftritt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML-Seiten können Skriptcode enthalten, der in der Regel in JScript oder VBScript geschrieben wird und ausgeführt wird, wenn eine Seite geladen wird. <xref:System.Windows.Forms.HtmlWindow.Error> Tritt auf, wenn ein Skript auf einen Laufzeitfehler stößt. Da der Skriptcode spät gebunden ist, d. h., dass Aufrufe für das Objekt erst zur Laufzeit aufgelöst werden, können Fehler alle Elemente enthalten, die auf ein NULL-Objekt verweisen, um eine nicht definierte Eigenschaft oder Methode aufzurufen.  
  
 Sie können die- <xref:System.Windows.Forms.HtmlElementErrorEventArgs.Handled%2A> Eigenschaft von <xref:System.Windows.Forms.HtmlElementErrorEventArgs> auf true festlegen, um zu verhindern, dass das Dialogfeld für den nativen Fehler in Internet Explorer angezeigt wird.
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der Fehler abgefangen, der sich ergibt, wenn ein Skript auf einer HTML-Seite versucht, auf ein Objekt zuzugreifen, das im Dokument nicht definiert ist. Die Seite muss vollständig geladen werden, bevor der <xref:System.Windows.Forms.HtmlWindow.Error> Ereignishandler angefügt wird. andernfalls kann das Beispiel nicht verwendet werden.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#16)]
 [!code-vb[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/error_event">OnError-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlWindow.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Fokus auf das aktuelle Fenster fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein anderes Fenster den Fokus hatte <xref:System.Windows.Forms.HtmlWindow.Focus%2A> , bevor aufgerufen wurde, verliert dieses Fenster den Fokus.  
  
 Ruft den Fokus nicht auf ein Element in einem Fenster auf, solange das Ereignis des Fensters nicht <xref:System.Windows.Forms.HtmlWindow.Load> ausgelöst wurde.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/htmlorforeignelement/focus">Fokus Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Frames">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindowCollection Frames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindowCollection Frames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Frames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Frames As HtmlWindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindowCollection ^ Frames { System::Windows::Forms::HtmlWindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Frames : System.Windows.Forms.HtmlWindowCollection" Usage="System.Windows.Forms.HtmlWindow.Frames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf die einzelnen <c>FRAME</c>-Elemente ab, die in der Webseite definiert sind.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.HtmlWindowCollection" /> von <c>Frame</c> -und <c>iframe</c> -Objekten eines Dokuments.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein `FRAME` ist ein Satz von Fenstern, die in einer definiert sind `FRAMESET` . `FRAME`s ermöglicht das Hosting mehrerer Dokumente innerhalb eines einzelnen Dokuments. Jede `FRAME` ist so definiert, dass Sie eine bestimmte Zeilen-und Spaltenbreite besitzt, und befindet sich auf der Seite in Relation zu den anderen in `FRAME` definierten s `FRAMESET` . die Position eines `FRAME` ist korrigiert, aber ein Benutzer kann den Mauszeiger manchmal verwenden, um die zu vergrößern oder zu verkleinern `FRAME` . Ein `IFRAME` ähnelt einem Frame, muss aber nicht an einer bestimmten Position verankert werden.  
  
 Frames enthalten jeweils eine Instanz von <xref:System.Windows.Forms.HtmlWindow> für jede `FRAME` oder `IFRAME` eine, die innerhalb einer Webseite definiert ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird jedes Dokument innerhalb einer Seite überprüft, die Frames enthält, und es wird eine Tabelle mit allen ausgehenden Hyperlinks von jeder Seite für die spätere Überprüfung erstellt.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/frames">Frames-Auflistung</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlWindow.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dient als Hashfunktion für einen bestimmten Typ.</summary>
        <returns>Ein Hashcode für die aktuelle <see cref="T:System.Windows.Forms.HtmlWindow" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn das aktuelle Fenster den Benutzereingabefokus erhält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.GotFocus> Tritt auf:  
  
-   Das erste Fenster in einer, `FRAMESET` Wenn die `FRAMESET` erste geladen wird.  
  
-   Der `FRAME` , der zuletzt den Fokus hatte, wenn das Fenster mit dem <xref:System.Windows.Forms.WebBrowser> Steuerelement in den Vordergrund gestellt wird.  
  
-   Ein `FRAME` , auf den der Benutzer geklickt hat, aber nur, wenn der Fokus des Benutzers den Fokus nicht auf ein Element im Fenster legt.  
  
 Die Standardaktion für das Ereignis kann nicht abgebrochen <xref:System.Windows.Forms.HtmlWindow.GotFocus> werden, oder es kann nicht blindeln.
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlWindow.GotFocus> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlWindow> Namen enthält `HtmlWindow1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlWindow.GotFocus> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#452](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#452)]
 [!code-vb[System.Windows.Forms.EventExamples#452](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#452)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/focus_event">onfocus-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="History">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlHistory History { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlHistory History" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.History" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property History As HtmlHistory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlHistory ^ History { System::Windows::Forms::HtmlHistory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.History : System.Windows.Forms.HtmlHistory" Usage="System.Windows.Forms.HtmlWindow.History" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlHistory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das die zuletzt besuchten URLs des Benutzers enthält.</summary>
        <value>Der <see cref="T:System.Windows.Forms.HtmlHistory" /> für das aktuelle Fenster.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.History%2A> enthält alle URLs, die im aktuellen Fenster navigiert sind, das als *Navigations Stapel*bezeichnet wird, und stellt Methoden bereit, mit denen Sie zu diesen Dokumenten zurück navigieren können.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob dieses Fenster geöffnet oder geschlossen ist.</summary>
        <value><see langword="true" />, wenn das Fenster immer noch auf dem Bildschirm geöffnet ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der <xref:System.Windows.Forms.HtmlWindow> vom Benutzer geschlossen wurde oder die <xref:System.Windows.Forms.HtmlWindow.Close%2A> -Methode aufgerufen wurde, führt der Versuch, zu einer neuen URL zu navigieren oder auf das Dokument des Fensters zuzugreifen, zu einem Fehler. Verwenden Sie diese Eigenschaft, um zu bestimmen, ob es sicher ist, Eigenschaften und Methoden für das aktuelle Fenster Objekt aufzurufen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein Fenster geöffnet und geschlossen, wenn der Benutzer es in den letzten fünf Minuten nicht verwendet hat. Das Codebeispiel erfordert, dass das Formular über ein-Steuerelement mit dem Namen, eine mit dem Namen <xref:System.Windows.Forms.WebBrowser> `WebBrowser1` <xref:System.Windows.Forms.Button> `Button1` und eine <xref:System.Windows.Forms.Timer> Klasse namens verfügt `Timer1` .  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/frames">Closed-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Load;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Load" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Load" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Load As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Load;" />
      <MemberSignature Language="F#" Value="member this.Load : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Load : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Initialisierung für das Dokument des Fensters und alle seine Elemente abgeschlossen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Windows.Forms.HtmlWindow.Load> Ereignis funktioniert ähnlich wie das- <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> Ereignis für das- <xref:System.Windows.Forms.WebBrowser> Steuerelement: es signalisiert, dass es sicher ist, auf HTML-Elemente innerhalb des Dokuments zuzugreifen.  
  
 Die Standardaktion für das Ereignis kann nicht abgebrochen werden <xref:System.Windows.Forms.HtmlWindow.Load> .
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlWindow.Load> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, empfiehlt es sich, durch zu ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht an eine mehrzeilige anfügen <xref:System.Windows.Forms.TextBox> .  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlWindow> Namen enthält `HtmlWindow1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlWindow.Load> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#453](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#453)]
 [!code-vb[System.Windows.Forms.EventExamples#453](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#453)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/load_event">OnLoad-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzereingabefokus das Fenster verlassen hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlWindow.LostFocus> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlWindow> Namen enthält `HtmlWindow1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlWindow.LostFocus> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#454](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#454)]
 [!code-vb[System.Windows.Forms.EventExamples#454](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#454)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Verschiebt das Fenster an die angegebenen Koordinaten auf dem Bildschirm.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (point As Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.MoveTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Die x-Koordinate und die y-Koordinate der linken oberen Ecke des Fensters.</param>
        <summary>Verschiebt das Fenster an die angegebenen Koordinaten auf dem Bildschirm.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können nicht verwenden <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> , um ein Fenster vom sichtbaren Bildschirmrand zu verschieben. diese Methode ist auch über das Skript auf einer Webseite verfügbar, und das Rendering von nicht vertrauenswürdigem Skript zum Rendering von Fenstern wird nicht als sicher angesehen.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> gibt eine aus <xref:System.UnauthorizedAccessException> , wenn das Fenster, das Sie verschieben möchten, und das übergeordnete Fenster unterschiedliche Domänen der obersten Ebene aufweisen. Wenn Sie z. b. das- <xref:System.Windows.Forms.WebBrowser> Steuerelement als Host auf a.adatum.com verwenden, erstellen Sie mit ein neues Fenster, <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> um b.adatum.com anzuzeigen. In diesem Fall werden beide Fenster als Teil derselben Domäne der obersten Ebene betrachtet, und die Ausnahme wird nicht ausgelöst. Wenn Sie jedoch aufrufen, <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> um www, Microsoft. com anzuzeigen, verfügen beide Fenster nun über unterschiedliche Domänen der obersten Ebene, und der <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> Vorgang bewirkt, dass die Ausnahme ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Der Code, mit dem versucht wird, diese Operation auszuführen, verfügt nicht über die Berechtigung zum Bearbeiten dieses Fensters.</exception>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/moveto">muveto-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : int * int -&gt; unit" Usage="htmlWindow.MoveTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Die x-Koordinate der linken oberen Ecke des Fensters.</param>
        <param name="y">Die y-Koordinate der linken oberen Ecke des Fensters.</param>
        <summary>Verschiebt das Fenster an die angegebenen Koordinaten auf dem Bildschirm.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können nicht verwenden <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> , um ein Fenster vom sichtbaren Bildschirmrand zu verschieben. diese Methode ist auch über das Skript auf einer Webseite verfügbar, und das Rendering von nicht vertrauenswürdigem Skript zum Rendering von Fenstern wird nicht als sicher angesehen.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> gibt eine aus <xref:System.UnauthorizedAccessException> , wenn das Fenster, das Sie verschieben möchten, und das übergeordnete Fenster unterschiedliche Domänen der obersten Ebene aufweisen. Wenn Sie z. b. das <xref:System.Windows.Forms.WebBrowser> -Steuerelement als Host auf a.adatum.com verwenden, erstellen Sie ein neues Fenster, <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> in dem b.adatum.com angezeigt wird. In diesem Fall werden beide Fenster als Teil derselben Domäne der obersten Ebene betrachtet, und die Ausnahme wird nicht ausgelöst. Wenn Sie jedoch aufrufen, <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> um www, Microsoft. com anzuzeigen, verfügen beide Fenster nun über unterschiedliche Domänen der obersten Ebene, und der <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> Vorgang bewirkt, dass die Ausnahme ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Der Code, mit dem versucht wird, diese Operation auszuführen, verfügt nicht über die Berechtigung zum Bearbeiten dieses Fensters.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.HtmlWindow.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Fensters ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.String" />-Wert, der den Namen darstellt.</value>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/name">name-Eigenschaft</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Navigate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zeigt den neuen Inhalt unter der angegebenen URL an oder lädt diesen herunter.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string urlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string urlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (urlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::String ^ urlString);" />
      <MemberSignature Language="F#" Value="member this.Navigate : string -&gt; unit" Usage="htmlWindow.Navigate urlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Die anzuzeigende Ressource, beschrieben durch eine URL (Uniform Resource Locator).</param>
        <summary>Zeigt den neuen Inhalt unter der angegebenen URL an oder lädt diesen herunter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der `url` Parameter auf eine HTML-Seite zeigt, wird die aktuell im Fenster angezeigte Seite zerstört und durch die neue Seite ersetzt. alle Verweise, die Ihre Anwendung für verwaltete DOM-Objekte auf der alten Seite enthält, sind ungültig. Wenn `url` auf eine Ressource verweist, die nicht von Internet Explorer angezeigt werden kann, wird dem Benutzer ein Dialogfeld angezeigt, in dem Sie gefragt werden, ob die Ressource außerhalb der Anwendung geöffnet, auf dem Datenträger gespeichert oder der Downloadvorgang abgebrochen werden soll.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api">Navigate-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (url As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(Uri ^ url);" />
      <MemberSignature Language="F#" Value="member this.Navigate : Uri -&gt; unit" Usage="htmlWindow.Navigate url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="url">Der Speicherort des Dokuments oder Objekts, das im aktuellen Fenster angezeigt werden soll. Dieser wird als <see cref="T:System.Uri" /> angegeben.</param>
        <summary>Zeigt ein neues Dokument im aktuellen Fenster an.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Equality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Das erste <see cref="T:System.Windows.Forms.HtmlWindow" />-Objekt.</param>
        <param name="right">Das zweite <see cref="T:System.Windows.Forms.HtmlWindow" />-Objekt.</param>
        <summary>Überprüft die beiden <see cref="T:System.Windows.Forms.HtmlWindow" />-Objekte auf Gleichheit.</summary>
        <returns><see langword="true" />, wenn beide Parameter <see langword="null" /> sind oder wenn beide Elemente über die gleiche zugrunde liegende COM-Schnittstelle verfügen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Gleichheits Operator testet die `IUnknown` Zeiger der zugrunde liegenden COM-Objekte, die von den angegebenen Klassen umschließt werden <xref:System.Windows.Forms.HtmlWindow> .  
  
 Die äquivalente Methode für diesen Operator ist. <xref:System.Windows.Forms.HtmlWindow.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Inequality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="System.Windows.Forms.HtmlWindow.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Das erste <see cref="T:System.Windows.Forms.HtmlWindow" />-Objekt.</param>
        <param name="right">Das zweite <see cref="T:System.Windows.Forms.HtmlWindow" />-Objekt.</param>
        <summary>Überprüft zwei <see langword="HtmlWindow" />-Objekte auf Ungleichheit.</summary>
        <returns><see langword="true" />, wenn nur eines der Objekte <see langword="null" /> ist oder die zugrunde liegenden COM-Zeiger nicht übereinstimmen, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zeigt eine Datei im benannten Fenster an.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (string urlString, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (urlString As String, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(System::String ^ urlString, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : string * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (urlString, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="urlString">Die URL (Uniform Resource Locator), die den Speicherort der zu ladenden Datei beschreibt.</param>
        <param name="target">Der Name des Fensters, in dem die Ressource geöffnet werden soll. Hierbei kann es sich um einen vom Entwickler angegebenen Namen oder um einen der folgenden speziellen Werte handeln: 
 <c>_blank</c>: Öffnet die <paramref name="urlString" /> in einem neuen Fenster. Funktioniert wie ein Aufruf von <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: Öffnet die <paramref name="urlString" /> in der Medienleiste.  
  
 <c>_parent</c>: Öffnet die <paramref name="urlString" /> in dem Fenster, in dem das aktuelle Fenster erstellt wurde.  
  
 <c>_search</c>: Öffnet die <paramref name="urlString" /> in der Suchleiste.  
  
 <c>_self</c>: Öffnet die <paramref name="urlString" /> im aktuellen Fenster.  
  
 <c>_top</c>: Bei einem Aufruf für ein Fenster, das zu einem <c>FRAME</c>-Element gehört, wird die <paramref name="urlString" /> in dem Fenster geöffnet, das das zugehörige <c>FRAMESET</c> hostet. Andernfalls entspricht das Verhalten dem von <c>_self</c>.</param>
        <param name="windowOptions">Eine durch Kommas getrennte Zeichenfolge, die aus 0 (null) oder mehreren der folgenden Optionen im Formular <c>name=value</c> besteht. Mit Ausnahme der Optionen <c>left</c>, <c>top</c>, <c>height</c> und <c>width</c>, die beliebige ganze Zahlen akzeptieren, akzeptiert jede Option <c>yes</c> oder <see langword="1" />und <c>no</c> oder <see langword="0" /> als gültige Werte.  
  
 <c>channelmode</c>: Wird mit der veralteten Channeltechnologie von Internet Explorer 4.0 verwendet. Standard ist <c>no</c>.  
  
 <c>directories</c>: Gibt an, ob im Fenster Schaltflächen für die Verzeichnisnavigation angezeigt werden sollen. Der Standardwert ist <c>Ja</c>.  
  
 <c>height</c>: Die Höhe des Clientbereichs des Fensters in Pixel. Der Mindestwert ist 100. Beim Versuch, ein kleineres Fenster zu öffnen, wird das Fenster entsprechend der Standardeinstellungen von Internet Explorer geöffnet.  
  
 <c>left</c>: Die linke Position (x-Koordinate) des Fensters in Bezug auf die linke obere Ecke des Benutzerbildschirms (in Pixel). Der Wert muss eine positive ganze Zahl sein.  
  
 <c>location</c>: Gibt an, ob die Adressleiste angezeigt werden soll, mit deren Hilfe Benutzer im Fenster zu einer neuen URL navigieren können. Der Standardwert ist <c>Ja</c>.  
  
 <c>menubar</c>: Gibt an, ob im neuen Fenster Menüs angezeigt werden sollen. Der Standardwert ist <c>Ja</c>.  
  
 <c>resizable</c>: Gibt an, ob die Größe des Fensters durch den Benutzer geändert werden kann. Der Standardwert ist <c>Ja</c>.  
  
 <c>scrollbars</c>: Gibt an, ob das Fenster horizontale und vertikale Schiebeleisten besitzt. Der Standardwert ist <c>Ja</c>.  
  
 <c>status</c>: Gibt an, ob sich am unteren Rand des Fensters eine Statusleiste befindet. Der Standardwert ist <c>Ja</c>.  
  
 <c>titlebar</c>: Gibt an, ob der Titel der aktuellen Seite angezeigt wird. Wenn diese Option auf <c>no</c> festgelegt wird, hat dies in einer verwalteten Anwendung keine Auswirkungen. Die Titelleiste wird immer angezeigt.  
  
 <c>Symbolleiste</c>: ob Symbolleisten Schaltflächen wie **zurück**, **Vorwärts**und **anzuhalten** sichtbar sind. Der Standardwert ist <c>Ja</c>.  
  
 <c>top</c>: Die obere Position (y-Koordinate) des Fensters in Bezug auf die linke obere Ecke des Benutzerbildschirms (in Pixel). Der Wert muss eine positive ganze Zahl sein.  
  
 <c>width</c>: Die Breite des Clientbereichs des Fensters (in Pixel). Der Mindestwert ist 100. Beim Versuch, ein kleineres Fenster zu öffnen, wird das Fenster entsprechend der Standardeinstellungen von Internet Explorer geöffnet.</param>
        <param name="replaceEntry">Gibt an, ob <paramref name="urlString" /> die URL des aktuellen Fensters im Navigationsverlauf ersetzt. Dies wirkt sich auf die Ausführung von Methoden für die <see cref="T:System.Windows.Forms.HtmlHistory" />-Klasse aus.</param>
        <summary>Zeigt eine Datei im benannten Fenster an.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.HtmlWindow" />, das das neue Fenster darstellt, oder das zuvor erstellte Fenster, das durch den <paramref name="target" />-Parameter benannte wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der- `target` Parameter kann ein Fenster benennen, das als Ergebnis eines vorherigen Aufrufens von erstellt wurde <xref:System.Windows.Forms.HtmlWindow.Open%2A> . Der-Parameter kann auch auf ein Fenster zeigen, das durch Klicken auf einen Hyperlink (- `A` Element) oder ein-Element geöffnet wird, `FORM` das das- `TARGET` Attribut verwendet, um seine URL in einem neuen Fenster zu öffnen. Der folgende HTML-Code öffnet ein neues Fenster mit `orderWindow` dem Namen, wenn der Benutzer darauf klickt:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Wenn Sie Optionen für den Parameter angeben `windowOptions` , wird jede Option, die nicht eingeschlossen ist, automatisch deaktiviert. Anders ausgedrückt: Wenn Sie nur angeben, `windowOptions` dass Sie eine Statusleiste benötigen, werden die Menüleiste, Symbolleiste, Titel, Scrollleisten usw. nur angezeigt, wenn Sie Sie explizit mithilfe von aktivieren `windowOptions` .  
  
 Wenn es sich bei der Datei, auf die von verwiesen wird, um `url` eine HTML-Datei, eine Textdatei oder einen anderen Dateityp handelt, die in Internet Explorer gehostet werden kann, wird Sie im benannten Fenster angezeigt. Wenn die Datei nicht innerhalb von Internet Explorer angezeigt werden kann und das Fenster nach Ziel nicht bereits vorhanden ist, wird das Fenster nur so lange geöffnet, bis Internet Explorer die Ressource herunterlädt. der Vorgang wird unmittelbar danach beendet.  
  
 Wenn Sie neue Fenster mithilfe <xref:System.Windows.Forms.HtmlWindow.Open%2A> von oder erstellen <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> , bewirkt dies, dass der HTML-Dokumentobjektmodell eine neue Instanz von Internet Explorer öffnet. Wenn Sie nicht <xref:System.Windows.Forms.HtmlWindow.Close%2A> für alle von Ihnen erstellten Fenster aufzurufen, wird diese Internet Explorer-Instanz auch dann weiterhin ausgeführt, wenn die Anwendung beendet wurde.  
  
 Wenn Sie verwenden, <xref:System.Windows.Forms.HtmlWindow.Open%2A> um eine URL in ein vorhandenes Fenster zu laden, `windowOptions` wird ignoriert. das Fenster behält die Dimensionen, die Darstellung und die Bildschirmposition zuerst bei, wenn der erste aufgerufen wird <xref:System.Windows.Forms.HtmlWindow.Open%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (Uri url, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(class System.Uri url, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.Uri,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (url As Uri, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(Uri ^ url, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : Uri * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (url, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">Die URL (Uniform Resource Locator), die den Speicherort der zu ladenden Datei beschreibt.</param>
        <param name="target">Der Name des Fensters, in dem die Ressource geöffnet werden soll. Hierbei kann es sich um einen vom Entwickler angegebenen Namen oder um einen der folgenden speziellen Werte handeln: 
 <c>_blank</c>: Öffnet die <paramref name="url" /> in einem neuen Fenster. Funktioniert wie ein Aufruf von <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: Öffnet die <paramref name="url" /> in der Medienleiste.  
  
 <c>_parent</c>: Öffnet die <paramref name="url" /> in dem Fenster, in dem das aktuelle Fenster erstellt wurde.  
  
 <c>_search</c>: Öffnet die <paramref name="url" /> in der Suchleiste.  
  
 <c>_self</c>: Öffnet die <paramref name="url" /> im aktuellen Fenster.  
  
 <c>_top</c>: Bei einem Aufruf für ein Fenster, das zu einem <c>FRAME</c>-Element gehört, wird die <paramref name="url" /> in dem Fenster geöffnet, das das zugehörige <c>FRAMESET</c> hostet. Andernfalls entspricht das Verhalten dem von <c>_self</c>.</param>
        <param name="windowOptions">Eine durch Kommas getrennte Zeichenfolge, die aus 0 (null) oder mehreren der folgenden Optionen im Formular <c>name=value</c> besteht. Mit Ausnahme der Optionen <c>left</c>, <c>top</c>, <c>height</c> und <c>width</c>, die beliebige ganze Zahlen akzeptieren, akzeptiert jede Option <c>yes</c> oder <see langword="1" />und <c>no</c> oder <see langword="0" /> als gültige Werte.  
  
 <c>channelmode</c>: Wird mit der veralteten Channeltechnologie von Internet Explorer 4.0 verwendet. Standard ist <c>no</c>.  
  
 <c>directories</c>: Gibt an, ob im Fenster Schaltflächen für die Verzeichnisnavigation angezeigt werden sollen. Der Standardwert ist <c>Ja</c>.  
  
 <c>height</c>: Die Höhe des Clientbereichs des Fensters in Pixel. Der Mindestwert ist 100. Beim Versuch, ein kleineres Fenster zu öffnen, wird das Fenster entsprechend der Standardeinstellungen von Internet Explorer geöffnet.  
  
 <c>left</c>: Die linke Position (x-Koordinate) des Fensters in Bezug auf die linke obere Ecke des Benutzerbildschirms (in Pixel). Der Wert muss eine positive ganze Zahl sein.  
  
 <c>location</c>: Gibt an, ob die Adressleiste angezeigt werden soll, mit deren Hilfe Benutzer im Fenster zu einer neuen URL navigieren können. Der Standardwert ist <c>Ja</c>.  
  
 <c>menubar</c>: Gibt an, ob im neuen Fenster Menüs angezeigt werden sollen. Der Standardwert ist <c>Ja</c>.  
  
 <c>resizable</c>: Gibt an, ob die Größe des Fensters durch den Benutzer geändert werden kann. Der Standardwert ist <c>Ja</c>.  
  
 <c>scrollbars</c>: Gibt an, ob das Fenster horizontale und vertikale Schiebeleisten besitzt. Der Standardwert ist <c>Ja</c>.  
  
 <c>status</c>: Gibt an, ob sich am unteren Rand des Fensters eine Statusleiste befindet. Der Standardwert ist <c>Ja</c>.  
  
 <c>titlebar</c>: Gibt an, ob der Titel der aktuellen Seite angezeigt wird. Wenn diese Option auf <c>no</c> festgelegt wird, hat dies in einer verwalteten Anwendung keine Auswirkungen. Die Titelleiste wird immer angezeigt.  
  
 <c>Symbolleiste</c>: ob Symbolleisten Schaltflächen wie **zurück**, **Vorwärts**und **anzuhalten** sichtbar sind. Der Standardwert ist <c>Ja</c>.  
  
 <c>top</c>: Die obere Position (y-Koordinate) des Fensters in Bezug auf die linke obere Ecke des Benutzerbildschirms (in Pixel). Der Wert muss eine positive ganze Zahl sein.  
  
 <c>width</c>: Die Breite des Clientbereichs des Fensters (in Pixel). Der Mindestwert ist 100. Beim Versuch, ein kleineres Fenster zu öffnen, wird das Fenster entsprechend der Standardeinstellungen von Internet Explorer geöffnet.</param>
        <param name="replaceEntry">Gibt an, ob <paramref name="url" /> die URL des aktuellen Fensters im Navigationsverlauf ersetzt. Dies wirkt sich auf die Ausführung von Methoden für die <see cref="T:System.Windows.Forms.HtmlHistory" />-Klasse aus.</param>
        <summary>Zeigt eine Datei im benannten Fenster an.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.HtmlWindow" />, das das neue Fenster darstellt, oder das zuvor erstellte Fenster, das durch den <paramref name="target" />-Parameter benannte wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der- `target` Parameter kann ein Fenster benennen, das als Ergebnis eines vorherigen Aufrufens von erstellt wurde <xref:System.Windows.Forms.HtmlWindow.Open%2A> . Der-Parameter kann auch auf ein Fenster zeigen, das durch Klicken auf einen Hyperlink (- `A` Element) oder ein-Element geöffnet wird, `FORM` das das- `TARGET` Attribut verwendet, um seine URL in einem neuen Fenster zu öffnen. Der folgende HTML-Code öffnet ein neues Fenster mit `orderWindow` dem Namen, wenn der Benutzer darauf klickt:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Wenn Sie Optionen für den Parameter angeben `windowOptions` , wird jede Option, die nicht eingeschlossen ist, automatisch deaktiviert. Anders ausgedrückt: Wenn Sie nur angeben, `windowOptions` dass Sie eine Statusleiste benötigen, werden die Menüleiste, Symbolleiste, Titel, Scrollleisten usw. nur angezeigt, wenn Sie Sie explizit mithilfe von aktivieren `windowOptions` .  
  
 Wenn es sich bei der Datei, auf die von verwiesen wird, um `url` eine HTML-Datei, eine Textdatei oder einen anderen Dateityp handelt, die in Internet Explorer gehostet werden kann, wird Sie im benannten Fenster angezeigt. Wenn die Datei nicht innerhalb von Internet Explorer angezeigt werden kann und das Fenster nach Ziel nicht bereits vorhanden ist, wird das Fenster nur so lange geöffnet, bis Internet Explorer die Ressource herunterlädt. der Vorgang wird unmittelbar danach beendet.  
  
 Wenn Sie neue Fenster mithilfe <xref:System.Windows.Forms.HtmlWindow.Open%2A> von oder erstellen <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> , bewirkt dies, dass der HTML-Dokumentobjektmodell eine neue Instanz von Internet Explorer öffnet. Wenn Sie nicht <xref:System.Windows.Forms.HtmlWindow.Close%2A> für alle von Ihnen erstellten Fenster aufzurufen, wird diese Internet Explorer-Instanz auch dann weiterhin ausgeführt, wenn die Anwendung beendet wurde.  
  
 Wenn Sie verwenden, <xref:System.Windows.Forms.HtmlWindow.Open%2A> um eine URL in ein vorhandenes Fenster zu laden, `windowOptions` wird ignoriert. das Fenster behält die Dimensionen, die Darstellung und die Bildschirmposition zuerst bei, wenn der erste aufgerufen wird <xref:System.Windows.Forms.HtmlWindow.Open%2A> .  
  
   
  
## Examples  
 Das folgende Codebeispiel enthält zwei Methoden:  
  
-   Der erste öffnet eine URL in einem Fenster mit dem Namen `displayWindow` , das erstellt wird, wobei eine Statusleiste angezeigt wird.  
  
-   Die zweite öffnet eine andere URL im gleichen Fenster, gibt jedoch an, dass nur die Positions Leiste angezeigt werden soll.  
  
 Beachten Sie, dass die Abmessungen des Fensters und die angezeigten Steuerelemente davon abhängen, welche URL zuerst geöffnet wird. Das Codebeispiel erfordert, dass das Formular ein Steuerelement mit dem <xref:System.Windows.Forms.WebBrowser> Namen enthält `WebBrowser1` .  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/open">Open-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Opener">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Opener { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Opener" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Opener" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Opener As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Opener { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Opener : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Opener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf das Fenster ab, aus dem das aktuelle Fenster geöffnet wurde.</summary>
        <value>Das <see cref="T:System.Windows.Forms.HtmlWindow" />, das durch einen Aufruf der <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />-Methode oder der <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />-Methode erstellt wurde. Wenn das Fenster nicht mit einer dieser Methoden erstellt wurde, gibt diese Eigenschaft <see langword="null" /> zurück.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenNew">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zeigt eine Datei in einem neuen Fenster an.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (string urlString, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(string urlString, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (urlString As String, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(System::String ^ urlString, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : string * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (urlString, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Die URL (Uniform Resource Locator), die den Speicherort der zu ladenden Datei beschreibt.</param>
        <param name="windowOptions">Eine durch Kommas getrennte Zeichenfolge, die aus 0 (null) oder mehreren der folgenden Optionen im Formular <c>name=value</c> besteht. Eine vollständige Beschreibung der gültigen Optionen finden Sie unter <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />.</param>
        <summary>Zeigt eine Datei in einem neuen Fenster an.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.HtmlWindow" /> für die Darstellung des neuen Fensters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn es sich bei der Datei, auf die von verwiesen wird, um `url` eine HTML-Datei, eine Textdatei oder einen anderen Dateityp handelt, die in Internet Explorer gehostet werden kann, wird Sie in einem neuen Fenster angezeigt. Wenn die Datei nicht innerhalb von Internet Explorer angezeigt werden kann, wird das Fenster nur so lange geöffnet, bis Internet Explorer die Ressource herunterlädt. der Vorgang wird unmittelbar danach beendet.  
  
 Wenn Sie neue Fenster mithilfe <xref:System.Windows.Forms.HtmlWindow.Open%2A> von oder erstellen <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> , bewirkt dies, dass der HTML-Dokumentobjektmodell eine neue Instanz von Internet Explorer öffnet. Wenn Sie nicht <xref:System.Windows.Forms.HtmlWindow.Close%2A> für alle von Ihnen erstellten Fenster aufzurufen, wird diese Internet Explorer-Instanz auch dann weiterhin ausgeführt, wenn die Anwendung beendet wurde.  
  
 Wenn Sie ein Dokument in ein bereits geöffnetes fensterladen möchten, finden Sie weitere Informationen unter der- <xref:System.Windows.Forms.HtmlWindow.Open%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (Uri url, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(class System.Uri url, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (url As Uri, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(Uri ^ url, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : Uri * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (url, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Die URL (Uniform Resource Locator), die den Speicherort der zu ladenden Datei beschreibt.</param>
        <param name="windowOptions">Eine durch Kommas getrennte Zeichenfolge, die aus 0 (null) oder mehreren der folgenden Optionen im Formular <c>name=value</c> besteht. Eine vollständige Beschreibung der gültigen Optionen finden Sie unter <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />.</param>
        <summary>Zeigt eine Datei in einem neuen Fenster an.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.HtmlWindow" /> für die Darstellung des neuen Fensters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn es sich bei der Datei, auf die von verwiesen wird, um `url` eine HTML-Datei, eine Textdatei oder einen anderen Dateityp handelt, die in Internet Explorer gehostet werden kann, wird Sie in einem neuen Fenster angezeigt. Wenn die Datei nicht innerhalb von Internet Explorer angezeigt werden kann, wird das Fenster nur so lange geöffnet, bis Internet Explorer die Ressource herunterlädt. der Vorgang wird unmittelbar danach beendet.  
  
 Wenn Sie neue Fenster mithilfe <xref:System.Windows.Forms.HtmlWindow.Open%2A> von oder erstellen <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> , bewirkt dies, dass der HTML-Dokumentobjektmodell eine neue Instanz von Internet Explorer öffnet. Wenn Sie nicht <xref:System.Windows.Forms.HtmlWindow.Close%2A> für alle von Ihnen erstellten Fenster aufzurufen, wird diese Internet Explorer-Instanz auch dann weiterhin ausgeführt, wenn die Anwendung beendet wurde.  
  
 Wenn Sie ein Dokument in ein bereits geöffnetes fensterladen möchten, finden Sie weitere Informationen unter der- <xref:System.Windows.Forms.HtmlWindow.Open%2A> Methode.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/open">Open-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Parent { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Fenster ab, das sich über dem aktuellen Fenster auf einer Seite befindet, die Frames enthält.</summary>
        <value>Das dem aktuellen Fenster übergeordnete <see cref="T:System.Windows.Forms.HtmlWindow" />. Wenn das aktuelle Fenster kein <c>Frame</c>ist oder nicht in einen <c>Frame</c>eingebettet ist, wird zurückgegeben <see langword="null" /> .</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einem Dokument, das Frames enthält, `FRAME` fungiert jede innerhalb von `FRAMESET` als separates untergeordnetes Fenster auf der Seite. Das übergeordnete Element von each `FRAME` ist das-Element `FRAMESET` , das die enthält `FRAME` .  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/parent">Parent-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Position { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : System.Drawing.Point" Usage="System.Windows.Forms.HtmlWindow.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft für das Fenster die Position des Clientbereichs auf dem Bildschirm ab.</summary>
        <value>Ein <see cref="T:System.Drawing.Point" />, der die x- und y-Koordinaten der linken oberen Ecke des Bildschirms beschreibt (in Pixel).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Windows.Forms.Control.Location%2A> Eigenschaft des- <xref:System.Windows.Forms.WebBrowser> Steuer Elements gibt die Position des-Steuer Elements relativ zur linken oberen Ecke des Formulars zurück. Im Gegensatz dazu <xref:System.Windows.Forms.HtmlWindow.Position%2A> gibt den Speicherort des Anzeige Bereichs des Dokuments relativ zur oberen linken Ecke des Benutzer Monitors zurück.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein neues Fenster direkt über dem- <xref:System.Windows.Forms.WebBrowser> Steuerelement im Formular geöffnet. Das Codebeispiel erfordert, dass das Formular eine Instanz des-Steuer Elements mit dem <xref:System.Windows.Forms.WebBrowser> Namen enthält `WebBrowser1` .  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/windows-forms-coordinates">Windows Forms-Koordinaten</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/screen/left">screenLeft-Eigenschaft</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/screen/top">screenTop-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt (string message, string defaultInputValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Prompt(string message, string defaultInputValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Prompt(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prompt (message As String, defaultInputValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Prompt(System::String ^ message, System::String ^ defaultInputValue);" />
      <MemberSignature Language="F#" Value="member this.Prompt : string * string -&gt; string" Usage="htmlWindow.Prompt (message, defaultInputValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="defaultInputValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die Meldung, die dem Benutzer angezeigt wird.</param>
        <param name="defaultInputValue">Der im Textfeld angezeigte Standardwert.</param>
        <summary>Zeigt ein Dialogfeld an, in dem für den Benutzer eine Meldung und ein Textfeld angezeigt werden.</summary>
        <returns>Ein <see cref="T:System.String" />, der den vom Benutzer eingegebenen Text darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> bietet eine schnelle und einfache Möglichkeit, einfache Texteingaben vom Benutzer zu erhalten.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536673.aspx">Prompt-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberSignature Language="F#" Value="member this.RemoveFocus : unit -&gt; unit" Usage="htmlWindow.RemoveFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt den Fokus vom aktuellen Fenster.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `FRAME` Sie in einem Fenster in einem `FRAMESET` aufgerufen <xref:System.Windows.Forms.HtmlWindow.RemoveFocus%2A> wird, bewirkt, dass das Fenster den Fokus verliert, der Fokus jedoch nicht automatisch auf ein anderes Fenster festgelegt wird.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/htmlorforeignelement/blur">Blur-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer mithilfe der Maus die Dimensionen des Fensters ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlWindow.Resize> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, empfiehlt es sich, durch zu ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht an eine mehrzeilige anfügen <xref:System.Windows.Forms.TextBox> .  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlWindow> Namen enthält `HtmlWindow1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlWindow.Resize> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#455](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#455)]
 [!code-vb[System.Windows.Forms.EventExamples#455](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#455)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/resize_event">OnResize-Ereignis</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResizeTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ändert die Größe des Fensters auf die angegebenen Dimensionen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(valuetype System.Drawing.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResizeTo (size As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(System::Drawing::Size size);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : System.Drawing.Size -&gt; unit" Usage="htmlWindow.ResizeTo size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size">Eine <see cref="T:System.Drawing.Size" />, die die gewünschte Breite und Höhe des Fensters in Pixel beschreibt. Muss in beiden Dimensionen 100 Pixel oder mehr sein.</param>
        <summary>Ändert die Größe des Fensters auf die angegebenen Dimensionen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird ein neues Fenster geöffnet und seine Größe angepasst, um den verfügbaren Bildschirmbereich auszufüllen.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Das Fenster, dessen Größe geändert werden soll, befindet sich in einer anderen Domäne als sein übergeordnetes Fenster. Diese Einschränkung ist Teil der Frame übergreifenden Skript Sicherheit.</exception>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/resizeto">ResizeTo-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResizeTo (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(int width, int height);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : int * int -&gt; unit" Usage="htmlWindow.ResizeTo (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Beschreibt die gewünschte Breite des Fensters (in Pixel). Der Wert muss mindestens 100 Pixel betragen.</param>
        <param name="height">Beschreibt die gewünschte Höhe des Fensters (in Pixel). Der Wert muss mindestens 100 Pixel betragen.</param>
        <summary>Ändert die Größe des Fensters auf die angegebenen Dimensionen.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">Das Fenster, dessen Größe geändert werden soll, befindet sich in einer anderen Domäne als sein übergeordnetes Fenster. Diese Einschränkung ist Teil der Frame übergreifenden Skript Sicherheit. Weitere Informationen finden Sie unter Informationen [zur Frame übergreifenden Skripterstellung und-Sicherheit](https://msdn.microsoft.com/library/ms533028.aspx).</exception>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Scroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Scroll As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Scroll;" />
      <MemberSignature Language="F#" Value="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer einen Bildlauf durch das Fenster durchführt, um Text anzuzeigen, der sich außerhalb des Bildschirms befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlWindow.Scroll> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, empfiehlt es sich, durch zu ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht an eine mehrzeilige anfügen <xref:System.Windows.Forms.TextBox> .  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlWindow> Namen enthält `HtmlWindow1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlWindow.Scroll> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#456](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#456)]
 [!code-vb[System.Windows.Forms.EventExamples#456](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#456)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/document/scroll_event">OnScroll-Ereignis</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScrollTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ermöglicht das Scrollen des Fensters zur festgelegten Position.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (point As Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.ScrollTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Die x-Koordinate und die y-Koordinate, in Bezug auf die linke obere Ecke des aktuellen Fensters, bis zu der Bildlaufvorgänge für die Seite durchgeführt werden sollen.</param>
        <summary>Verschiebt das Fenster an die angegebenen Koordinaten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> bewirkt, dass das Dokument einen Bildlauf durchführt, sodass sich die angegebene Koordinate für das Dokument in der oberen linken Ecke des Dokument Fensters befindet. Wenn das Dokument nicht lang oder breit genug ist, führt einen Bildlauf <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> durch das Dokument in der angegebenen Richtung durch.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird durch das Dokument die Koordinaten Position, auf die der Benutzer geklickt hat, durchgeführt.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/scrollto">ScrollTo-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : int * int -&gt; unit" Usage="htmlWindow.ScrollTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Die x-Koordinate, in Bezug auf die linke obere Ecke des aktuellen Fensters, bis zu der Scrollvorgänge für die Seite durchgeführt werden sollen.</param>
        <param name="y">Die y-Koordinate, in Bezug auf die linke obere Ecke des aktuellen Fensters, bis zu der Scrollvorgänge für die Seite durchgeführt werden sollen.</param>
        <summary>Ermöglicht das Scrollen des Fensters zur festgelegten Position.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> bewirkt, dass das Dokument einen Bildlauf durchführt, sodass sich die angegebene Koordinate für das Dokument in der oberen linken Ecke des Dokument Fensters befindet. Wenn das Dokument nicht lang oder breit genug ist, führt einen Bildlauf <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> durch das Dokument in der angegebenen Richtung durch.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.HtmlWindow.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Größe des aktuellen Fensters ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Size" />, die die Breite des Fensters in Pixel beschreibt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBarText">
      <MemberSignature Language="C#" Value="public string StatusBarText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusBarText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusBarText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StatusBarText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StatusBarText : string with get, set" Usage="System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den auf der Statusleiste eines Fensters angezeigten Text ab oder legt diesen fest.</summary>
        <value>Eine <see cref="T:System.String" />, die den aktuellen Statustext enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das- <xref:System.Windows.Forms.WebBrowser> Steuerelement zeigt keine Statusleiste an. Jedes neue Fenster, das Sie mit der-Methode oder der-Methode öffnen, <xref:System.Windows.Forms.HtmlWindow.Open%2A> <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> zeigt jedoch standardmäßig eine Statusleiste an.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/status">Status (Eigenschaft)</related>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Unload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Unload" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unload As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Unload;" />
      <MemberSignature Language="F#" Value="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die aktuelle Seite entladen und eine neue Seite angezeigt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlWindow.Unload> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, empfiehlt es sich, durch zu ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht an eine mehrzeilige anfügen <xref:System.Windows.Forms.TextBox> .  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlWindow> Namen enthält `HtmlWindow1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlWindow.Unload> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#457](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#457)]
 [!code-vb[System.Windows.Forms.EventExamples#457](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#457)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/unload_event">onentlade-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlWindow.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die URL ab, die dem gegenwärtig im Fenster angezeigten Element entspricht.</summary>
        <value>Ein <see cref="T:System.Uri" />, der die URL beschreibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist schreibgeschützt. Verwenden Sie die-Methode, um das Fenster zu einem neuen Dokument zu navigieren <xref:System.Windows.Forms.HtmlWindow.Navigate%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFrameElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement WindowFrameElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement WindowFrameElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowFrameElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ WindowFrameElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowFrameElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Frameelement ab, das diesem Fenster entspricht.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.HtmlElement" /> , das dem <c>Frame</c> Element dieses Fensters entspricht. Wenn es sich bei diesem Fenster um keinen Frame handelt, wird <see langword="null" /> zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie ein- `FRAME` Element aus der Auflistung abrufen <xref:System.Windows.Forms.HtmlWindow.Frames%2A> , wird ein zurückgegeben <xref:System.Windows.Forms.HtmlWindow> . Aufrufen <xref:System.Windows.Forms.HtmlWindow.WindowFrameElement%2A> für dieses Objekt, wenn Sie auf Attribute des zugrunde liegenden Elements zugreifen müssen `FRAME` , z. b. auf das- `SRC` Attribut.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das- `SRC` Attribut von Frames in einer `FRAMESET` mit der aktuellen Position verglichen. Wenn Sie unterschiedlich sind, werden die Frames auf ihre ursprünglichen URLs zurückgesetzt.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/window/frameelement">FrameElement-Eigenschaft</related>
      </Docs>
    </Member>
  </Members>
</Type>

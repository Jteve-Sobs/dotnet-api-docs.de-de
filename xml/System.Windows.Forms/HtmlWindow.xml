<Type Name="HtmlWindow" FullName="System.Windows.Forms.HtmlWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fc42707342d636efd4f1d80f491634ecea277faf" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52205784" /></Metadata><TypeSignature Language="C#" Value="public sealed class HtmlWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlWindow extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlWindow" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlWindow" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlWindow sealed" />
  <TypeSignature Language="F#" Value="type HtmlWindow = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt das logische Fenster dar, das eine oder mehrere Instanzen von <see cref="T:System.Windows.Forms.HtmlDocument" /> enthält.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow> sollte nicht mit dem Konzept eines Fensters in Windows Forms oder in der Win32-API verwechselt werden. Es gibt keine `HWND` oder eine ähnliche Windows-Ressource, die direkt mit einer Instanz von entspricht <xref:System.Windows.Forms.HtmlWindow>. Stattdessen <xref:System.Windows.Forms.HtmlWindow> eines Benutzers Bildschirm als auch Methoden für die Interaktion mit Benutzern über Anweisungen und Dialogfelder auf hoher Ebene eine Beschreibung, der den Speicherort eines Dokuments enthält. <xref:System.Windows.Forms.HtmlWindow> fungiert als ein logischer Container für Dokumente einer Webseite und die zugehörigen Metadaten, wie z. B. der Speicherort des Dokuments und die Funktionen des Webbrowsers.  
  
 Eine Webseite besteht aus einem einzelnen Dokument oder für ein `FRAMESET` mit einem oder mehreren `FRAME` Elemente, von denen jeder ein eigene Dokument hostet. Webentwickler verwenden Framesets logisch verwandte Seiten parallel (z. B. eine Inhaltsseite neben einer Navigationsseite) angezeigt. Wenn eine Seite eines einzelnen Dokuments besteht, die sie zugreifen können über die <xref:System.Windows.Forms.HtmlWindow.Document%2A> Eigenschaft <xref:System.Windows.Forms.HtmlWindow>frames, wenn die Seite verwendet, können Sie über ihre Dokumente zugreifen der <xref:System.Windows.Forms.HtmlWindow.Frames%2A> -Auflistung, die besteht aus einem oder mehreren <xref:System.Windows.Forms.HtmlWindow> Objekte.  
  
 Wenn Ihr Host die <xref:System.Windows.Forms.WebBrowser> Steuerelement in einer Windows Forms-Anwendung können Sie für die Interaktion mit dem Benutzer, die mithilfe von standardmäßigen Windows Forms-Klassen, z. B. auswählen, <xref:System.Windows.Forms.Form> oder <xref:System.Windows.Forms.MessageBox>, oder Sie können Methoden für <xref:System.Windows.Forms.HtmlWindow> für diesen Zweck definiert. Die <xref:System.Windows.Forms.HtmlWindow.Alert%2A> Methode zeigt ein einfaches Dialogfeld mit benutzerdefiniertem Text und einem **OK** Schaltfläche <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> stellt dem Benutzer, eine Zeile der benutzerdefinierten Text und ein Texteingabefeld und <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> zeigt ein Dialogfeld mit einer benutzerdefinierten Text an und **OK** und **Abbrechen** Schaltflächen.  
  
 Sie können <xref:System.Windows.Forms.HtmlWindow> neue Fenster, enthalten neue Dokumente zu öffnen. <xref:System.Windows.Forms.HtmlWindow.Open%2A> Lädt die angegebene URL in das benannte Fenster und erstellen es aus, wenn es nicht bereits vorhanden ist, während er sich <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> immer die URL in einem neu erstellten Fenster geöffnet.  
  
   
  
## Examples  
 Das folgende Codebeispiel enthält zwei Methoden. Die erste wird eine URL in einem Fenster mit dem Namen `displayWindow`, das erstellt wird, mit einer Statusleiste angezeigt. Die zweite wird eine andere URL im selben Fenster geöffnet, aber es gibt an, dass nur die Speicherort-Leiste angezeigt werden soll. Beachten Sie, dass die Dimensionen des Fensters und die Steuerelemente, die angezeigt werden, abhängig ist, auf dem URL erstmalig geöffnet wird. Im Codebeispiel wird vorausgesetzt, dass das Formular enthält ein <xref:System.Windows.Forms.WebBrowser> Steuerelement mit dem Namen `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms535873.aspx">Window-Objekt</related>
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">IHTMLWindow2-Schnittstelle</related>
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Alert(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Alert(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Alert (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Alert(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Alert : string -&gt; unit" Usage="htmlWindow.Alert message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Der im Meldungsfeld anzuzeigende <see cref="T:System.String" />.</param>
        <summary>Zeigt ein Meldungsfenster an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MessageBox> -Klasse bietet eine leistungsfähigere Version von der <xref:System.Windows.Forms.HtmlWindow.Alert%2A> Methode.  
  
 Obwohl <xref:System.Windows.Forms.HtmlWindow.Alert%2A> Unicode-Text akzeptiert als Eingabe an, die Skript-Eingabeaufforderung von Internet Explorer zeigt keine nicht-lateinische gelesenem Sprachtext entsprechend auf Windows 95, Windows 98, Windows ME oder Windows NT aufgrund von Beschränkungen im Betriebssystem. Weitere Informationen finden Sie unter [INFO: Internet Explorer-Skript fordert und MBCS/Unicode](https://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms535933.aspx">Alert-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Der Name des zu behandelnden Ereignisses.</param>
        <param name="eventHandler">Ein Verweis auf den verwalteten Code, der das Ereignis behandelt.</param>
        <summary>Fügt einen Ereignishandler für das benannte HTML-DOM-Ereignis hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie sollten ein Ereignis eines HTML-Dokuments oder eines seiner Objekte nicht anfügen, bis das Dokument Laden abgeschlossen ist. Der früheste Zeitpunkt sollten Sie diese Methode aufrufen befindet sich in der <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> Ereignis die <xref:System.Windows.Forms.WebBrowser> Steuerelement.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListenerx">EventTarget.addEventListener()</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="htmlWindow.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt das Fenster.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Forms.HtmlWindow.IsClosed%2A> Eigenschaft, um zu bestimmen, ob das Fenster bereits geschlossen wird. Wenn das Fenster bereits geschlossen ist, müssen diese Methode keine Auswirkungen.  
  
 Beim Erstellen neuer Windows mithilfe von <xref:System.Windows.Forms.HtmlWindow.Open%2A> oder <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, <xref:System.Windows.Forms.HtmlWindow.Close%2A> bewirkt, dass das HTML Document Object Model, um eine neue Instanz von Internet Explorer zu öffnen. Wenn Sie nicht aufrufen <xref:System.Windows.Forms.HtmlWindow.Close%2A> auf allen Fenstern, die Sie erstellt haben, diese Instanz von Internet Explorer wird weiterhin ausgeführt wird auch nach dem Schließen der Anwendung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein Fenster geöffnet und geschlossen wird, wenn der Benutzer sie nicht in den letzten fünf Minuten verwendet hat. Das Codebeispiel wurde geschrieben, unter der Annahme, die das Formular enthält ein <xref:System.Windows.Forms.WebBrowser> Steuerelement mit dem Namen `WebBrowser1`, <xref:System.Windows.Forms.Button> mit dem Namen `Button1`, und ein <xref:System.Windows.Forms.Timer> Klasse mit dem Namen `Timer1`. In diesem Beispiel wird erfolgreich ausgeführt wird, ändern Sie das erste Argument für <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> auf eine gültige URL.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536367.aspx">Close-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public bool Confirm (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Confirm(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Confirm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (message As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Confirm(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Confirm : string -&gt; bool" Usage="htmlWindow.Confirm message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Der Text, der für den Benutzer angezeigt wird.</param>
        <summary>Zeigt ein Dialogfeld mit einer Meldung und Schaltflächen für die Angabe einer Ja/Nein-Antwort an.</summary>
        <returns><see langword="true" />, wenn der Benutzer auf **Ja** geklickt hat, <see langword="false" />, wenn der Benutzer auf **Nein** geklickt oder das Dialogfeld geschlossen hat.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> Zeigt ein modales Dialogfeld an. der Benutzer wird nicht auf die zugrunde liegenden HTML-Seite zugreifen, ohne zuerst schließen dieses Dialogfelds sein.  
  
 Obwohl <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> Unicode-Text akzeptiert als Eingabe an, die Skript-Eingabeaufforderung von Internet Explorer zeigt keine nicht-lateinische gelesenem Sprachtext entsprechend auf Windows 95, Windows 98, Windows ME oder Windows NT aufgrund von Beschränkungen im Betriebssystem. Weitere Informationen finden Sie unter [INFO: Internet Explorer-Skript fordert und MBCS/Unicode](https://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
   
  
## Examples  
 Kopieren Sie den folgenden HTML-Code, und speichern Sie sie in ein Formular mit dem Namen orderForm.htm:  
  
 `<HTML>`  
  
 `<BODY>`  
  
 `<FORM name="NewOrderForm">`  
  
 `Select Part Type:`  
  
 `<SELECT name="PartType">`  
  
 `<OPTION>AZ-3700`  
  
 `<OPTION>AZ-3701`  
  
 `<OPTION>AZ-3702`  
  
 `<SELECT><br>`  
  
 `Quantity: <INPUT type="text" name="PartQty" size="2" maxsize="2"><br>`  
  
 `Building/Desk:`  
  
 `<INPUT type="text" name="PartBuilding" size="2" maxsize="2"> /`  
  
 `<INPUT type="text" name="PartDesk" size="2" maxsize="2"><p>`  
  
 `<INPUT type="submit" value="Transmit Order">`  
  
 `</FORM>`  
  
 `</BODY>`  
  
 `</HTML>`  
  
 Im folgenden Codebeispiel wird eine <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> im Dialogfeld, wenn der Benutzer sendet `NewOrderForm`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536376.aspx">Bestätigen Sie die Methode</related>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Der Name des zu behandelnden Ereignisses.</param>
        <param name="eventHandler">Ein Verweis auf den verwalteten Code, der das Ereignis behandelt.</param>
        <summary>Entfernt den benannten Ereignishandler.</summary>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536411.aspx">DetachEvent-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Windows.Forms.HtmlDocument" Usage="System.Windows.Forms.HtmlWindow.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das im Fenster enthaltene HTML-Dokument ab.</summary>
        <value>Eine gültige Instanz von <see cref="T:System.Windows.Forms.HtmlDocument" />, wenn ein Dokument geladen ist. Wenn dieses Fenster enthält einen <c>FRAMESET</c>, oder derzeit kein Dokument geladen ist, wird zurückgegeben, die <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel greifen Sie auf die <xref:System.Windows.Forms.HtmlWindow.Document%2A> über die <xref:System.Windows.Forms.WebBrowser.Document%2A> Eigenschaft der <xref:System.Windows.Forms.WebBrowser> Steuerelement. Wenn Sie ein Dokument in zugreifen möchten, verwenden Sie diese Eigenschaft eine `FRAME` mithilfe der <xref:System.Windows.Forms.HtmlWindow.Frames%2A> Auflistung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird jedes Dokument innerhalb einer Seite, die Frames überprüft und erstellt eine Tabelle aller ausgehenden Links aus jeder Seite zur künftigen Untersuchung.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DomWindow">
      <MemberSignature Language="C#" Value="public object DomWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomWindow As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomWindow { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomWindow : obj" Usage="System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die nicht verwaltete Schnittstelle ab, die von dieser Klasse umschlossen wird.</summary>
        <value>Ein Objekt, das umgewandelt werden kann ein <see langword="IHTMLWindow2" />, <see langword="IHTMLWindow3" />, oder <see langword="IHTMLWindow4" /> Zeiger.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die zugrunde liegenden nicht verwalteten Schnittstellenzeiger, der (DOKUMENTOBJEKTMODELL) zum Ausführen von nicht verfügbar gemachte Methoden <xref:System.Windows.Forms.HtmlWindow>.  
  
 Sie müssen hinzufügen, auf das verwiesen wird, der nicht verwalteten MSHTML.dll um verwenden <xref:System.Windows.Forms.HtmlWindow.DomWindow%2A>. Weitere Informationen finden Sie unter [Importieren einer Typbibliothek als Assembly](~/docs/framework/interop/importing-a-type-library-as-an-assembly.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel ruft ein `IHTMLWindow2` Zeiger aus einem Dokument des Fensters, und ein neues Dokument in einem modalen Fenster angezeigt.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">IHTMLWindow2-Schnittstelle</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741356.aspx">IHTMLWindow3-Schnittstelle</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741344.aspx">IHTMLWindow4-Schnittstelle</related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlWindow.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das zu überprüfende Objekt.</param>
        <summary>Überprüft das Objekt und das aktuelle Objekt auf Gleichheit.</summary>
        <returns><see langword="true" />, wenn die Objekte gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As HtmlElementErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " Usage="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn bei der Ausführung eines Skripts innerhalb des Fensters ein Laufzeitfehler auftritt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML-Seiten können Skript-Code, in der Regel in JScript oder VBScript, der ausgeführt wird, wenn das Laden einer Seite enthalten. <xref:System.Windows.Forms.HtmlWindow.Error> Tritt auf, wenn ein Skript ein Laufzeitfehler auftritt. Da Skriptcode spät gebunden ist, d. h. Aufrufe für das Objekt nicht aufgelöst bis zur Laufzeit, Fehler, die alles von Verweisen auf ein Nullobjekt zum Aufruf einer nicht definierte Eigenschaft oder Methode enthalten können.  
  
 Sie können festlegen, die <xref:System.Windows.Forms.HtmlElementErrorEventArgs.Handled%2A> Eigenschaft <xref:System.Windows.Forms.HtmlElementErrorEventArgs> auf true festlegen, um zu verhindern, dass in Internet Explorer im Dialogfeld nativer Fehler anzeigen.
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der Fehler abgefangen, die Ergebnisse angezeigt, wenn ein Skript auf einer HTML-Seite versucht, Zugriff auf ein Objekt, das nicht im Dokument definiert ist. Die Seite muss vollständig geladen ist, bevor Sie die <xref:System.Windows.Forms.HtmlWindow.Error> Ereignishandler angefügt ist, andernfalls das Beispiel nicht funktioniert.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#16)]
 [!code-vb[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/cc197053.aspx">OnError-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlWindow.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Fokus auf das aktuelle Fenster fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein anderes Fenster den Fokus vor der besaß <xref:System.Windows.Forms.HtmlWindow.Focus%2A> war aufgerufen wird, wird das Fenster den Fokus verlieren.  
  
 Rufen Sie nicht den Fokus auf ein Element innerhalb eines Fensters bis des Fensters <xref:System.Windows.Forms.HtmlWindow.Load> -Ereignis ausgelöst wurde.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536425.aspx">Focus-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Frames">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindowCollection Frames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindowCollection Frames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Frames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Frames As HtmlWindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindowCollection ^ Frames { System::Windows::Forms::HtmlWindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Frames : System.Windows.Forms.HtmlWindowCollection" Usage="System.Windows.Forms.HtmlWindow.Frames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf die einzelnen <c>FRAME</c>-Elemente ab, die in der Webseite definiert sind.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.HtmlWindowCollection" /> eines Dokuments der <c>FRAME</c> und <c>IFRAME</c> Objekte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein `FRAME` ist ein Satz von Windows in definiert eine `FRAMESET`. `FRAME`s ermöglichen das Hosten von mehreren Dokumenten in einem einzelnen Dokument. Jede `FRAME` ist definiert als eine bestimmte Zeile und Spalte Breite besitzt, und befindet sich auf der Seite in Bezug auf die andere `FRAME`s definiert, in der `FRAMESET`; die Position des ein `FRAME` behoben wird, auch wenn ein Benutzer die Maus manchmal verwenden kann Cursor vergrößert oder verkleinert die `FRAME`. Ein `IFRAME` ist vergleichbar mit dem Frame, aber nicht in einer festen Position verankert sein müssen.  
  
 Eine Instanz des Frames enthalten <xref:System.Windows.Forms.HtmlWindow> für jede `FRAME` oder `IFRAME` innerhalb einer Webseite definiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird jedes Dokument innerhalb einer Seite, die Frames überprüft und erstellt eine Tabelle aller ausgehenden Links aus jeder Seite zur künftigen Untersuchung.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms537459.aspx">Frames-Auflistung</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlWindow.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
        <returns>Ein Hashcode für die aktuelle <see cref="T:System.Windows.Forms.HtmlWindow" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn das aktuelle Fenster den Benutzereingabefokus erhält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.GotFocus> Tritt auf:  
  
-   Das erste Fenster in einer `FRAMESET` bei der `FRAMESET` das erste Mal geladen.  
  
-   Die `FRAME` , die zuletzt hatte Fokus, wenn das Fenster, welches die <xref:System.Windows.Forms.WebBrowser> Steuerelement in den Vordergrund gesetzt wird.  
  
-   Ein `FRAME` vom Benutzer geklickt wurde, jedoch nur, wenn Mausklicks des Benutzers nicht Fokus auf ein Element innerhalb des Fensters ist.  
  
 Kann nicht abgebrochen werden die Standardaktion für die <xref:System.Windows.Forms.HtmlWindow.GotFocus> Ereignis oder verhindern, dass es übergeben.
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung des neuen Elements. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.HtmlWindow.GotFocus> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.HtmlWindow> mit dem Namen `HtmlWindow1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.HtmlWindow.GotFocus> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#452](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#452)]
 [!code-vb[System.Windows.Forms.EventExamples#452](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#452)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536934.aspx">onReadyStateChange-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="History">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlHistory History { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlHistory History" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.History" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property History As HtmlHistory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlHistory ^ History { System::Windows::Forms::HtmlHistory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.History : System.Windows.Forms.HtmlHistory" Usage="System.Windows.Forms.HtmlWindow.History" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlHistory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das die zuletzt besuchten URLs des Benutzers enthält.</summary>
        <value>Die <see cref="T:System.Windows.Forms.HtmlHistory" /> für das aktuelle Fenster.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.History%2A> enthält alle URLs, die innerhalb des aktuellen Fensters, die als bezeichnet wird navigiert die *Navigationsstapel*, und bietet Methoden für die Navigation in diesen Dokumenten zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob dieses Fenster geöffnet oder geschlossen ist.</summary>
        <value><see langword="true" />, wenn das Fenster immer noch auf dem Bildschirm geöffnet ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.HtmlWindow> geschlossen wurde vom Benutzer oder durch einen Aufruf der <xref:System.Windows.Forms.HtmlWindow.Close%2A> -Methode, es wird versucht, zu einer neuen URL navigieren oder den Zugriff auf das Dokument des Fensters wird ein Fehler ausgegeben. Verwenden Sie diese Eigenschaft, um festzustellen, ob Eigenschaften und Methoden für das aktuelle Fensterobjekt aufgerufen werden kann.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein Fenster geöffnet und geschlossen wird, wenn der Benutzer sie nicht in den letzten fünf Minuten verwendet hat. Im Codebeispiel wird vorausgesetzt, dass das Formular enthält ein <xref:System.Windows.Forms.WebBrowser> Steuerelement mit dem Namen `WebBrowser1`, <xref:System.Windows.Forms.Button> mit dem Namen `Button1`, und ein <xref:System.Windows.Forms.Timer> Klasse mit dem Namen `Timer1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms537459.aspx">Closed-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Load;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Load" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Load" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Load As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Load;" />
      <MemberSignature Language="F#" Value="member this.Load : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Load : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Initialisierung für das Dokument des Fensters und alle seine Elemente abgeschlossen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.HtmlWindow.Load> Ereignis funktioniert ähnlich wie die <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> Ereignis auf der <xref:System.Windows.Forms.WebBrowser> Control: es signalisiert, dass sie Zugriff auf HTML-Elemente im Dokument sicher ist.  
  
 Kann nicht abgebrochen werden die Standardaktion für die <xref:System.Windows.Forms.HtmlWindow.Load> Ereignis.
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung des neuen Elements. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.HtmlWindow.Load> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.HtmlWindow> mit dem Namen `HtmlWindow1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.HtmlWindow.Load> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#453](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#453)]
 [!code-vb[System.Windows.Forms.EventExamples#453](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#453)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/cc197055.aspx">OnLoad-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzereingabefokus das Fenster verlassen hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung des neuen Elements. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.HtmlWindow.LostFocus> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.HtmlWindow> mit dem Namen `HtmlWindow1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.HtmlWindow.LostFocus> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#454](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#454)]
 [!code-vb[System.Windows.Forms.EventExamples#454](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#454)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Verschiebt das Fenster an die angegebenen Koordinaten auf dem Bildschirm.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.MoveTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Die x-Koordinate und die y-Koordinate der linken oberen Ecke des Fensters.</param>
        <summary>Verschiebt das Fenster an die angegebenen Koordinaten auf dem Bildschirm.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können keine <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> zum Verschieben eines Fensters auf den Rand des Bildschirms angezeigt; diese Methode ist auch über ein Skript auf einer Webseite verfügbar und können von nicht vertrauenswürdigen Skript zum Rendern von Windows nicht sichtbar ist nicht als sicher angesehen.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> Löst ein <xref:System.UnauthorizedAccessException> Wenn das Fenster, die Sie verschieben möchten und das übergeordnete Fenster verschiedene Domänen der obersten Ebene verfügen. Angenommen, Sie hosten die <xref:System.Windows.Forms.WebBrowser> Steuern auf a.adatum.com verweisen, erstellen Sie ein neues Fenster mit <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> b.adatum.com angezeigt. In diesem Fall gelten sowohl für Windows-als Teil der gleichen Domäne der obersten Ebene sein, und die Ausnahme nicht ausgelöst. Allerdings Aufrufen <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> um www.Microsoft.com anzuzeigen, haben die beiden Fenster nun verschiedene Domänen der obersten Ebene, und die <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> Vorgang bewirkt, dass die auszulösende Ausnahme.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Der Code, mit dem versucht wird, diese Operation auszuführen, verfügt nicht über die Berechtigung zum Bearbeiten dieses Fensters.</exception>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536626.aspx">"MoveTo"-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : int * int -&gt; unit" Usage="htmlWindow.MoveTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Die x-Koordinate der linken oberen Ecke des Fensters.</param>
        <param name="y">Die y-Koordinate der linken oberen Ecke des Fensters.</param>
        <summary>Verschiebt das Fenster an die angegebenen Koordinaten auf dem Bildschirm.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können keine <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> zum Verschieben eines Fensters auf den Rand des Bildschirms angezeigt; diese Methode ist auch über ein Skript auf einer Webseite verfügbar und können von nicht vertrauenswürdigen Skript zum Rendern von Windows nicht sichtbar ist nicht als sicher angesehen.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> Löst ein <xref:System.UnauthorizedAccessException> Wenn das Fenster, die Sie verschieben möchten und das übergeordnete Fenster verschiedene Domänen der obersten Ebene verfügen. Angenommen, Sie hosten die <xref:System.Windows.Forms.WebBrowser> -Steuerelement, und es zeigt auf a.adatum.com, erstellen Sie ein neues Fenster mit <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> b.adatum.com angezeigt. In diesem Fall gelten sowohl für Windows-als Teil der gleichen Domäne der obersten Ebene sein, und die Ausnahme nicht ausgelöst. Allerdings Aufrufen <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> um www.Microsoft.com anzuzeigen, haben die beiden Fenster nun verschiedene Domänen der obersten Ebene, und die <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> Vorgang bewirkt, dass die auszulösende Ausnahme.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Der Code, mit dem versucht wird, diese Operation auszuführen, verfügt nicht über die Berechtigung zum Bearbeiten dieses Fensters.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.HtmlWindow.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Fensters ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.String" />, der den Namen darstellt.</value>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534187.aspx">name-Eigenschaft</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Navigate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zeigt den neuen Inhalt unter der angegebenen URL an oder lädt diesen herunter.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string urlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string urlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (urlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::String ^ urlString);" />
      <MemberSignature Language="F#" Value="member this.Navigate : string -&gt; unit" Usage="htmlWindow.Navigate urlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Die anzuzeigende Ressource, beschrieben durch eine URL (Uniform Resource Locator).</param>
        <summary>Zeigt den neuen Inhalt unter der angegebenen URL an oder lädt diesen herunter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die `url` Parameter verweist auf eine HTML-Seite, die derzeit im Fenster angezeigte Seite wird zerstört und die neue Seite ersetzt; alle Verweise, die Ihre Anwendung, um verwaltete DOM-Objekte in der alten Seite enthält nicht mehr gültig. Wenn `url` zeigt auf eine Ressource, die von Internet Explorer angezeigt werden kann, wird dem Benutzer mit einem Dialogfeld gefragt, ob die Ressource außerhalb der Anwendung, speichern Sie es auf den Datenträger, oder brechen den Downloadvorgang öffnen angezeigt.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536638.aspx">Navigate-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (url As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(Uri ^ url);" />
      <MemberSignature Language="F#" Value="member this.Navigate : Uri -&gt; unit" Usage="htmlWindow.Navigate url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="url">Der Speicherort des Dokuments oder Objekts, das im aktuellen Fenster angezeigt werden soll. Dieser wird als <see cref="T:System.Uri" /> angegeben.</param>
        <summary>Zeigt ein neues Dokument im aktuellen Fenster an.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Equality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Das erste <see cref="T:System.Windows.Forms.HtmlWindow" />-Objekt.</param>
        <param name="right">Das zweite <see cref="T:System.Windows.Forms.HtmlWindow" />-Objekt.</param>
        <summary>Überprüft die beiden <see cref="T:System.Windows.Forms.HtmlWindow" />-Objekte auf Gleichheit.</summary>
        <returns><see langword="true" />, wenn beide Parameter <see langword="null" /> sind oder wenn beide Elemente über die gleiche zugrunde liegende COM-Schnittstelle verfügen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Gleichheitsoperator überprüft die `IUnknown` Zeiger von der zugrunde liegenden COM-Objekten, die nach dem angegebenen umschlossen <xref:System.Windows.Forms.HtmlWindow> Klassen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.Windows.Forms.HtmlWindow.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Inequality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="System.Windows.Forms.HtmlWindow.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Das erste <see cref="T:System.Windows.Forms.HtmlWindow" />-Objekt.</param>
        <param name="right">Das zweite <see cref="T:System.Windows.Forms.HtmlWindow" />-Objekt.</param>
        <summary>Überprüft zwei <see langword="HtmlWindow" />-Objekte auf Ungleichheit.</summary>
        <returns><see langword="true" />, wenn nur eines der Objekte <see langword="null" /> ist oder die zugrunde liegenden COM-Zeiger nicht übereinstimmen, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zeigt eine Datei im benannten Fenster an.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (string urlString, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (urlString As String, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(System::String ^ urlString, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : string * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (urlString, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="urlString">Die URL (Uniform Resource Locator), die den Speicherort der zu ladenden Datei beschreibt.</param>
        <param name="target">Der Name des Fensters, in dem die Ressource geöffnet werden soll. Hierbei kann es sich um einen vom Entwickler angegebenen Namen oder um einen der folgenden speziellen Werte handeln: 
 <c>_blank</c>: Öffnet die <paramref name="url" /> in einem neuen Fenster. Funktioniert wie ein Aufruf von <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: Öffnet die <paramref name="url" /> in der Medienleiste.  
  
 <c>_parent</c>: Öffnet die <paramref name="url" /> in dem Fenster, in dem das aktuelle Fenster erstellt wurde.  
  
 <c>_search</c>: Öffnet die <paramref name="url" /> in der Suchleiste.  
  
 <c>_self</c>: Öffnet die <paramref name="url" /> im aktuellen Fenster.  
  
 <c>_top</c>: Bei einem Aufruf für ein Fenster, das zu einem <c>FRAME</c>-Element gehört, wird die <paramref name="url" /> in dem Fenster geöffnet, das das zugehörige <c>FRAMESET</c> hostet. Andernfalls entspricht das Verhalten dem von <c>_self</c>.</param>
        <param name="windowOptions">Eine durch Kommas getrennte Zeichenfolge, die aus 0 (null) oder mehreren der folgenden Optionen im Formular <c>name=value</c> besteht. Mit Ausnahme der Optionen <paramref name="left" />, <c>top</c>, <paramref name="height" /> und <paramref name="width" />, die beliebige ganze Zahlen akzeptieren, akzeptiert jede Option <c>yes</c> oder <see langword="1" /> und <c>no</c> oder <see langword="0" /> als gültige Werte.  
  
 <c>channelmode</c>: Wird mit der veralteten Channeltechnologie von Internet Explorer 4.0 verwendet. Standard ist <c>no</c>.  
  
 <c>directories</c>: Gibt an, ob im Fenster Schaltflächen für die Verzeichnisnavigation angezeigt werden sollen. Standard ist <c>yes</c>.  
  
 <paramref name="height" />: Die Höhe des Clientbereichs des Fensters in Pixel. Der Mindestwert ist 100. Beim Versuch, ein kleineres Fenster zu öffnen, wird das Fenster entsprechend der Standardeinstellungen von Internet Explorer geöffnet.  
  
 <paramref name="left" />: Die linke Position (x-Koordinate) des Fensters, in Bezug auf die linke obere Ecke des Benutzerbildschirms (in Pixel). Muss eine positive ganze Zahl sein.  
  
 <c>location</c>: Gibt an, ob die Adressleiste angezeigt werden soll, mit deren Hilfe Benutzer im Fenster zu einer neuen URL navigieren können. Standard ist <c>yes</c>.  
  
 <c>menubar</c>: Gibt an, ob im neuen Fenster Menüs angezeigt werden sollen. Standard ist <c>yes</c>.  
  
 <c>resizable</c>: Gibt an, ob die Größe des Fensters durch den Benutzer geändert werden kann. Standard ist <c>yes</c>.  
  
 <c>scrollbars</c>: Gibt an, ob das Fenster horizontale und vertikale Schiebeleisten besitzt. Standard ist <c>yes</c>.  
  
 <c>status</c>: Gibt an, ob sich am unteren Rand des Fensters eine Statusleiste befindet. Standard ist <c>yes</c>.  
  
 <c>titlebar</c>: Gibt an, ob der Titel der aktuellen Seite angezeigt wird. Wenn diese Option auf <c>no</c> festgelegt wird, hat dies in einer verwalteten Anwendung keine Auswirkungen. Die Titelleiste wird immer angezeigt.  
  
 <c>toolbar</c>: Gibt an, ob Symbolleisten-Schaltflächen (z. B. **Zurück**, **Weiter** und **Beenden**) sichtbar sind. Standard ist <c>yes</c>.  
  
 <c>top</c>: Die obere Position (y-Koordinate) des Fensters in Bezug auf die linke obere Ecke des Benutzerbildschirms (in Pixel). Muss eine positive ganze Zahl sein.  
  
 <paramref name="width" />: Die Breite des Clientbereichs des Fensters (in Pixel). Der Mindestwert ist 100. Beim Versuch, ein kleineres Fenster zu öffnen, wird das Fenster entsprechend der Standardeinstellungen von Internet Explorer geöffnet.</param>
        <param name="replaceEntry">Gibt an, ob <paramref name="url" /> die URL des aktuellen Fensters im Navigationsverlauf ersetzt. Dies wirkt sich auf die Ausführung von Methoden für die <see cref="T:System.Windows.Forms.HtmlHistory" />-Klasse aus.</param>
        <summary>Zeigt eine Datei im benannten Fenster an.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.HtmlWindow" />, das das neue Fenster darstellt, oder das zuvor erstellte Fenster, das durch den <paramref name="target" />-Parameter benannte wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `target` Parameternamen können ein Fenster, das als Ergebnis eines vorherigen Aufrufs von erstellten <xref:System.Windows.Forms.HtmlWindow.Open%2A>. Der Parameter kann auch für ein Fenster geöffnet, die durch Klicken auf einen Link zeigen (`A` Element) oder ein `FORM` -Element, das verwendet die `TARGET` Attribut, um die URL in einem neuen Fenster zu öffnen. Öffnen Sie der folgende HTML-Code wird ein neues Fenster mit dem Namen `orderWindow` klickt der Benutzer es:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Wenn Sie Optionen zum Angeben der `windowOptions` jede Option nicht enthalten-Parameter wird automatisch deaktiviert. Das heißt, wenn Sie nur über angeben `windowOptions` , dass eine Statusleiste angezeigt werden sollen, und die Menüleiste, Symbolleiste, Titel, Bildlaufleisten und So weiter nicht angezeigt werden, es sei denn, Sie explizit mit aktivieren `windowOptions`.  
  
 Wenn die Datei verweist `url` ist eine HTML-Datei, Text-Datei oder anderen Dateityp, der in Internet Explorer gehostet werden kann er im benannten Fenster angezeigt wird. Wenn die Datei kann nicht innerhalb von Internet Explorer angezeigt werden und das Fenster mit dem Namen Ziel noch nicht vorhanden, dann das Fenster geöffnet wird. nur so lange für Internet Explorer auf die Ressource herunterladen wird sofort geschlossen danach.  
  
 Beim Erstellen neuer Windows mithilfe von <xref:System.Windows.Forms.HtmlWindow.Open%2A> oder <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, wird das HTML Document Object Model, um eine neue Instanz von Internet Explorer zu öffnen. Wenn Sie nicht aufrufen <xref:System.Windows.Forms.HtmlWindow.Close%2A> auf allen Fenstern, die Sie erstellt haben, diese Instanz von Internet Explorer wird weiterhin ausgeführt wird auch nach dem Beenden der Anwendung.  
  
 Bei Verwendung von <xref:System.Windows.Forms.HtmlWindow.Open%2A> zum Laden einer URL in einem vorhandenen Fenster `windowOptions` ignoriert werden; das Fenster wird beibehalten, Dimensionen, Darstellung und ihm durch den ersten Aufruf der Bildschirmposition <xref:System.Windows.Forms.HtmlWindow.Open%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (Uri url, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(class System.Uri url, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.Uri,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (url As Uri, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(Uri ^ url, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : Uri * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (url, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">Die URL (Uniform Resource Locator), die den Speicherort der zu ladenden Datei beschreibt.</param>
        <param name="target">Der Name des Fensters, in dem die Ressource geöffnet werden soll. Hierbei kann es sich um einen vom Entwickler angegebenen Namen oder um einen der folgenden speziellen Werte handeln: 
 <c>_blank</c>: Öffnet die <paramref name="url" /> in einem neuen Fenster. Funktioniert wie ein Aufruf von <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: Öffnet die <paramref name="url" /> in der Medienleiste.  
  
 <c>_parent</c>: Öffnet die <paramref name="url" /> in dem Fenster, in dem das aktuelle Fenster erstellt wurde.  
  
 <c>_search</c>: Öffnet die <paramref name="url" /> in der Suchleiste.  
  
 <c>_self</c>: Öffnet die <paramref name="url" /> im aktuellen Fenster.  
  
 <c>_top</c>: Bei einem Aufruf für ein Fenster, das zu einem <c>FRAME</c>-Element gehört, wird die <paramref name="url" /> in dem Fenster geöffnet, das das zugehörige <c>FRAMESET</c> hostet. Andernfalls entspricht das Verhalten dem von <c>_self</c>.</param>
        <param name="windowOptions">Eine durch Kommas getrennte Zeichenfolge, die aus 0 (null) oder mehreren der folgenden Optionen im Formular <c>name=value</c> besteht. Mit Ausnahme der Optionen <paramref name="left" />, <c>top</c>, <paramref name="height" /> und <paramref name="width" />, die beliebige ganze Zahlen akzeptieren, akzeptiert jede Option <c>yes</c> oder <see langword="1" /> und <c>no</c> oder <see langword="0" /> als gültige Werte.  
  
 <c>channelmode</c>: Wird mit der veralteten Channeltechnologie von Internet Explorer 4.0 verwendet. Standard ist <c>no</c>.  
  
 <c>directories</c>: Gibt an, ob im Fenster Schaltflächen für die Verzeichnisnavigation angezeigt werden sollen. Standard ist <c>yes</c>.  
  
 <paramref name="height" />: Die Höhe des Clientbereichs des Fensters in Pixel. Der Mindestwert ist 100. Beim Versuch, ein kleineres Fenster zu öffnen, wird das Fenster entsprechend der Standardeinstellungen von Internet Explorer geöffnet.  
  
 <paramref name="left" />: Die linke Position (x-Koordinate) des Fensters, in Bezug auf die linke obere Ecke des Benutzerbildschirms (in Pixel). Muss eine positive ganze Zahl sein.  
  
 <c>location</c>: Gibt an, ob die Adressleiste angezeigt werden soll, mit deren Hilfe Benutzer im Fenster zu einer neuen URL navigieren können. Standard ist <c>yes</c>.  
  
 <c>menubar</c>: Gibt an, ob im neuen Fenster Menüs angezeigt werden sollen. Standard ist <c>yes</c>.  
  
 <c>resizable</c>: Gibt an, ob die Größe des Fensters durch den Benutzer geändert werden kann. Standard ist <c>yes</c>.  
  
 <c>scrollbars</c>: Gibt an, ob das Fenster horizontale und vertikale Schiebeleisten besitzt. Standard ist <c>yes</c>.  
  
 <c>status</c>: Gibt an, ob sich am unteren Rand des Fensters eine Statusleiste befindet. Standard ist <c>yes</c>.  
  
 <c>titlebar</c>: Gibt an, ob der Titel der aktuellen Seite angezeigt wird. Wenn diese Option auf <c>no</c> festgelegt wird, hat dies in einer verwalteten Anwendung keine Auswirkungen. Die Titelleiste wird immer angezeigt.  
  
 <c>toolbar</c>: Gibt an, ob Symbolleisten-Schaltflächen (z. B. **Zurück**, **Weiter** und **Beenden**) sichtbar sind. Standard ist <c>yes</c>.  
  
 <c>top</c>: Die obere Position (y-Koordinate) des Fensters in Bezug auf die linke obere Ecke des Benutzerbildschirms (in Pixel). Muss eine positive ganze Zahl sein.  
  
 <paramref name="width" />: Die Breite des Clientbereichs des Fensters (in Pixel). Der Mindestwert ist 100. Beim Versuch, ein kleineres Fenster zu öffnen, wird das Fenster entsprechend der Standardeinstellungen von Internet Explorer geöffnet.</param>
        <param name="replaceEntry">Gibt an, ob <paramref name="url" /> die URL des aktuellen Fensters im Navigationsverlauf ersetzt. Dies wirkt sich auf die Ausführung von Methoden für die <see cref="T:System.Windows.Forms.HtmlHistory" />-Klasse aus.</param>
        <summary>Zeigt eine Datei im benannten Fenster an.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.HtmlWindow" />, das das neue Fenster darstellt, oder das zuvor erstellte Fenster, das durch den <paramref name="target" />-Parameter benannte wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `target` Parameternamen können ein Fenster, das als Ergebnis eines vorherigen Aufrufs von erstellten <xref:System.Windows.Forms.HtmlWindow.Open%2A>. Der Parameter kann auch für ein Fenster geöffnet, die durch Klicken auf einen Link zeigen (`A` Element) oder ein `FORM` -Element, das verwendet die `TARGET` Attribut, um die URL in einem neuen Fenster zu öffnen. Öffnen Sie der folgende HTML-Code wird ein neues Fenster mit dem Namen `orderWindow` klickt der Benutzer es:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Wenn Sie Optionen zum Angeben der `windowOptions` jede Option nicht enthalten-Parameter wird automatisch deaktiviert. Das heißt, wenn Sie nur über angeben `windowOptions` , dass eine Statusleiste angezeigt werden sollen, und die Menüleiste, Symbolleiste, Titel, Bildlaufleisten und So weiter nicht angezeigt werden, es sei denn, Sie explizit mit aktivieren `windowOptions`.  
  
 Wenn die Datei verweist `url` ist eine HTML-Datei, Text-Datei oder anderen Dateityp, der in Internet Explorer gehostet werden kann er im benannten Fenster angezeigt wird. Wenn die Datei kann nicht innerhalb von Internet Explorer angezeigt werden und das Fenster mit dem Namen Ziel noch nicht vorhanden, dann das Fenster geöffnet wird. nur so lange für Internet Explorer auf die Ressource herunterladen wird sofort geschlossen danach.  
  
 Beim Erstellen neuer Windows mithilfe von <xref:System.Windows.Forms.HtmlWindow.Open%2A> oder <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, wird das HTML Document Object Model, um eine neue Instanz von Internet Explorer zu öffnen. Wenn Sie nicht aufrufen <xref:System.Windows.Forms.HtmlWindow.Close%2A> auf allen Fenstern, die Sie erstellt haben, diese Instanz von Internet Explorer wird weiterhin ausgeführt wird auch nach dem Beenden der Anwendung.  
  
 Bei Verwendung von <xref:System.Windows.Forms.HtmlWindow.Open%2A> zum Laden einer URL in einem vorhandenen Fenster `windowOptions` ignoriert werden; das Fenster wird beibehalten, Dimensionen, Darstellung und ihm durch den ersten Aufruf der Bildschirmposition <xref:System.Windows.Forms.HtmlWindow.Open%2A> .  
  
   
  
## Examples  
 Das folgende Codebeispiel enthält zwei Methoden:  
  
-   Die erste wird eine URL in einem Fenster mit dem Namen `displayWindow`, das erstellt wird, mit einer Statusleiste angezeigt.  
  
-   Die zweite wird eine andere URL im selben Fenster geöffnet, aber es gibt an, dass nur die Speicherort-Leiste angezeigt werden soll.  
  
 Beachten Sie, dass die Dimensionen des Fensters und die Steuerelemente, die angezeigt werden, abhängig ist, auf dem URL erstmalig geöffnet wird. Im Codebeispiel wird vorausgesetzt, dass das Formular enthält ein <xref:System.Windows.Forms.WebBrowser> Steuerelement mit dem Namen `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536651.aspx">Open-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Opener">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Opener { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Opener" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Opener" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Opener As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Opener { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Opener : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Opener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf das Fenster ab, aus dem das aktuelle Fenster geöffnet wurde.</summary>
        <value>Das <see cref="T:System.Windows.Forms.HtmlWindow" />, das durch einen Aufruf der <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />-Methode oder der <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />-Methode erstellt wurde. Wenn das Fenster nicht mit einer dieser Methoden erstellt wurde, gibt diese Eigenschaft <see langword="null" /> zurück.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenNew">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zeigt eine Datei in einem neuen Fenster an.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (string urlString, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(string urlString, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (urlString As String, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(System::String ^ urlString, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : string * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (urlString, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Die URL (Uniform Resource Locator), die den Speicherort der zu ladenden Datei beschreibt.</param>
        <param name="windowOptions">Eine durch Kommas getrennte Zeichenfolge, die aus 0 (null) oder mehreren der folgenden Optionen im Formular <c>name=value</c> besteht. Eine vollständige Beschreibung der gültigen Optionen finden Sie unter <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />.</param>
        <summary>Zeigt eine Datei in einem neuen Fenster an.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.HtmlWindow" /> für die Darstellung des neuen Fensters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Datei verweist `url` ist eine HTML-Datei, Text-Datei oder anderen Dateityp, der in Internet Explorer gehostet werden kann es in einem neuen Fenster angezeigt. Wenn die Datei kann nicht in Internet Explorer angezeigt werden, und klicken Sie dann das Fenster geöffnet wird. nur so lange für Internet Explorer auf die Ressource herunterladen wird sofort geschlossen danach.  
  
 Beim Erstellen neuer Windows mithilfe von <xref:System.Windows.Forms.HtmlWindow.Open%2A> oder <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, wird das HTML Document Object Model, um eine neue Instanz von Internet Explorer zu öffnen. Wenn Sie nicht aufrufen <xref:System.Windows.Forms.HtmlWindow.Close%2A> auf allen Fenstern, die Sie erstellt haben, diese Instanz von Internet Explorer wird weiterhin ausgeführt wird auch nach dem Beenden der Anwendung.  
  
 Wenn Sie ein Dokument in einem bereits geöffneten Fenster laden möchten, finden Sie unter den <xref:System.Windows.Forms.HtmlWindow.Open%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (Uri url, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(class System.Uri url, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (url As Uri, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(Uri ^ url, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : Uri * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (url, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Die URL (Uniform Resource Locator), die den Speicherort der zu ladenden Datei beschreibt.</param>
        <param name="windowOptions">Eine durch Kommas getrennte Zeichenfolge, die aus 0 (null) oder mehreren der folgenden Optionen im Formular <c>name=value</c> besteht. Eine vollständige Beschreibung der gültigen Optionen finden Sie unter <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />.</param>
        <summary>Zeigt eine Datei in einem neuen Fenster an.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.HtmlWindow" /> für die Darstellung des neuen Fensters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Datei verweist `url` ist eine HTML-Datei, Text-Datei oder anderen Dateityp, der in Internet Explorer gehostet werden kann es in einem neuen Fenster angezeigt. Wenn die Datei kann nicht in Internet Explorer angezeigt werden, und klicken Sie dann das Fenster geöffnet wird. nur so lange für Internet Explorer auf die Ressource herunterladen wird sofort geschlossen danach.  
  
 Beim Erstellen neuer Windows mithilfe von <xref:System.Windows.Forms.HtmlWindow.Open%2A> oder <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, wird das HTML Document Object Model, um eine neue Instanz von Internet Explorer zu öffnen. Wenn Sie nicht aufrufen <xref:System.Windows.Forms.HtmlWindow.Close%2A> auf allen Fenstern, die Sie erstellt haben, diese Instanz von Internet Explorer wird weiterhin ausgeführt wird auch nach dem Beenden der Anwendung.  
  
 Wenn Sie ein Dokument in einem bereits geöffneten Fenster laden möchten, finden Sie unter den <xref:System.Windows.Forms.HtmlWindow.Open%2A> Methode.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536651.aspx">Open-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Parent { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Fenster ab, das sich über dem aktuellen Fenster auf einer Seite befindet, die Frames enthält.</summary>
        <value>Das dem aktuellen Fenster übergeordnete <see cref="T:System.Windows.Forms.HtmlWindow" />. Das aktuelle Fenster ist keiner <c>FRAME</c>, oder ist nicht in der eingebettet eine <c>FRAME</c>, gibt <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einem Dokument, die Frames jede `FRAME` innerhalb einer `FRAMESET` fungiert als ein separates untergeordnetes Fenster auf der Seite. Das übergeordnete Element der einzelnen `FRAME` ist die `FRAMESET` enthält die `FRAME`.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534326.aspx">Parent-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Position { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : System.Drawing.Point" Usage="System.Windows.Forms.HtmlWindow.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft für das Fenster die Position des Clientbereichs auf dem Bildschirm ab.</summary>
        <value>Ein <see cref="T:System.Drawing.Point" />, der die x- und y-Koordinaten der linken oberen Ecke des Bildschirms beschreibt (in Pixel).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.Control.Location%2A> Eigenschaft der <xref:System.Windows.Forms.WebBrowser> Steuerelement gibt die Position des Steuerelements relativ zu der oberen linken Ecke des Formulars zurück. Im Gegensatz dazu <xref:System.Windows.Forms.HtmlWindow.Position%2A> den Ort des Anzeigebereichs des Dokuments, relativ zur linken oberen Ecke des Bildschirms des Benutzers zurück.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein neues Fenster geöffnet, direkt über die <xref:System.Windows.Forms.WebBrowser> Steuerelement im Formular. Im Codebeispiel wird vorausgesetzt, dass das Formular eine Instanz enthält die <xref:System.Windows.Forms.WebBrowser> Steuerelement mit dem Namen `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/cc06e61f-43b6-4408-a676-2542dcfcd96e">Windows Forms-Koordinaten</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534389.aspx">ScreenLeft-Eigenschaft</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534390.aspx">ScreenTop-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt (string message, string defaultInputValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Prompt(string message, string defaultInputValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Prompt(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prompt (message As String, defaultInputValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Prompt(System::String ^ message, System::String ^ defaultInputValue);" />
      <MemberSignature Language="F#" Value="member this.Prompt : string * string -&gt; string" Usage="htmlWindow.Prompt (message, defaultInputValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="defaultInputValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die Meldung, die dem Benutzer angezeigt wird.</param>
        <param name="defaultInputValue">Der im Textfeld angezeigte Standardwert.</param>
        <summary>Zeigt ein Dialogfeld an, in dem für den Benutzer eine Meldung und ein Textfeld angezeigt werden.</summary>
        <returns>Ein <see cref="T:System.String" />, der den vom Benutzer eingegebenen Text darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> bietet eine schnelle und einfache Möglichkeit, einfache Texteingabe des Benutzers zu erhalten.  
  
 Obwohl <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> Unicode-Text akzeptiert als Eingabe an, die Skript-Eingabeaufforderung von Internet Explorer zeigt keine nicht-lateinische gelesenem Sprachtext entsprechend auf Windows 95, Windows 98, Windows ME oder Windows NT aufgrund von Beschränkungen im Betriebssystem. Weitere Informationen finden Sie unter [INFO: Internet Explorer-Skript fordert und MBCS/Unicode](https://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536673.aspx">Prompt-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberSignature Language="F#" Value="member this.RemoveFocus : unit -&gt; unit" Usage="htmlWindow.RemoveFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt den Fokus vom aktuellen Fenster.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei Aufruf in eine `FRAME` Fenster in einer `FRAMESET`, <xref:System.Windows.Forms.HtmlWindow.RemoveFocus%2A> bewirkt, dass das Fenster den Fokus verliert, aber es wird nicht automatisch den Fokus auf ein anderes Fenster festgelegt.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536347.aspx">Blur-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer mithilfe der Maus die Dimensionen des Fensters ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung des neuen Elements. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.HtmlWindow.Resize> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.HtmlWindow> mit dem Namen `HtmlWindow1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.HtmlWindow.Resize> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#455](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#455)]
 [!code-vb[System.Windows.Forms.EventExamples#455](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#455)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536959.aspx">OnResize-Ereignis</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResizeTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ändert die Größe des Fensters auf die angegebenen Dimensionen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(valuetype System.Drawing.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Drawing.Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(System::Drawing::Size size);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : System.Drawing.Size -&gt; unit" Usage="htmlWindow.ResizeTo size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size">Eine <see cref="T:System.Drawing.Size" />, die die gewünschte Breite und Höhe des Fensters in Pixel beschreibt. Muss in beiden Dimensionen 100 Pixel oder mehr sein.</param>
        <summary>Ändert die Größe des Fensters auf die angegebenen Dimensionen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird ein neues Fenster geöffnet und Größe, damit es verfügbaren Bildschirmbereichs zu füllen.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Das Fenster, dessen Größe geändert werden soll, befindet sich in einer anderen Domäne als sein übergeordnetes Fenster. Diese Einschränkung ist Teil der frameübergreifenden Skriptsicherheit. Weitere Informationen finden Sie unter [About Cross-Frame Scripting and Security](https://msdn.microsoft.com/library/ms533028.aspx).</exception>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536723.aspx">ResizeTo-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResizeTo (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(int width, int height);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : int * int -&gt; unit" Usage="htmlWindow.ResizeTo (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Beschreibt die gewünschte Breite des Fensters (in Pixel). Der Wert muss mindestens 100 Pixel betragen.</param>
        <param name="height">Beschreibt die gewünschte Höhe des Fensters (in Pixel). Der Wert muss mindestens 100 Pixel betragen.</param>
        <summary>Ändert die Größe des Fensters auf die angegebenen Dimensionen.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">Das Fenster, dessen Größe geändert werden soll, befindet sich in einer anderen Domäne als sein übergeordnetes Fenster. Diese Einschränkung ist Teil der frameübergreifenden Skriptsicherheit. Weitere Informationen finden Sie unter [About Cross-Frame Scripting and Security](https://msdn.microsoft.com/library/ms533028.aspx).</exception>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Scroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Scroll As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Scroll;" />
      <MemberSignature Language="F#" Value="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer einen Bildlauf durch das Fenster durchführt, um Text anzuzeigen, der sich außerhalb des Bildschirms befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung des neuen Elements. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.HtmlWindow.Scroll> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.HtmlWindow> mit dem Namen `HtmlWindow1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.HtmlWindow.Scroll> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#456](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#456)]
 [!code-vb[System.Windows.Forms.EventExamples#456](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#456)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536966.aspx">Onscroll-Ereignis</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScrollTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ermöglicht das Scrollen des Fensters zur festgelegten Position.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.ScrollTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Die x-Koordinate und die y-Koordinate, in Bezug auf die linke obere Ecke des aktuellen Fensters, bis zu der Bildlaufvorgänge für die Seite durchgeführt werden sollen.</param>
        <summary>Verschiebt das Fenster an die angegebenen Koordinaten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> führt dazu, dass das Dokument einen Bildlauf durchführen, damit die angegebene Koordinate für das Dokument in der oberen linken Ecke der das Fenster des Dokuments befindet. Wenn das Dokument nicht lang oder breit genug ist, um dies zu ermöglichen, ist <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> führt einen Bildlauf durch das Dokument so weit wie möglich in der angegebenen Richtung.  
  
   
  
## Examples  
 Das folgende Codebeispiel führt einen Bildlauf durch das Dokument auf der Koordinatenposition der Benutzer geklickt hat.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536731.aspx">ScrollTo-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : int * int -&gt; unit" Usage="htmlWindow.ScrollTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Die x-Koordinate, in Bezug auf die linke obere Ecke des aktuellen Fensters, bis zu der Scrollvorgänge für die Seite durchgeführt werden sollen.</param>
        <param name="y">Die y-Koordinate, in Bezug auf die linke obere Ecke des aktuellen Fensters, bis zu der Scrollvorgänge für die Seite durchgeführt werden sollen.</param>
        <summary>Ermöglicht das Scrollen des Fensters zur festgelegten Position.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> führt dazu, dass das Dokument einen Bildlauf durchführen, damit die angegebene Koordinate für das Dokument in der oberen linken Ecke der das Fenster des Dokuments befindet. Wenn das Dokument nicht lang oder breit genug ist, um dies zu ermöglichen, ist <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> führt einen Bildlauf durch das Dokument so weit wie möglich in der angegebenen Richtung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.HtmlWindow.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Größe des aktuellen Fensters ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Size" />, die die Breite des Fensters in Pixel beschreibt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBarText">
      <MemberSignature Language="C#" Value="public string StatusBarText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusBarText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusBarText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StatusBarText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StatusBarText : string with get, set" Usage="System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den auf der Statusleiste eines Fensters angezeigten Text ab oder legt diesen fest.</summary>
        <value>Eine <see cref="T:System.String" />, die den aktuellen Statustext enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.WebBrowser> Steuerelement eine Statusleiste nicht angezeigt. Ein neues Fenster, die Sie öffnen, mit der <xref:System.Windows.Forms.HtmlWindow.Open%2A> oder <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> Methoden, allerdings werden eine Statusleiste standardmäßig anzeigen.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534648.aspx">Status-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Unload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Unload" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unload As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Unload;" />
      <MemberSignature Language="F#" Value="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die aktuelle Seite entladen und eine neue Seite angezeigt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung des neuen Elements. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.HtmlWindow.Unload> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.HtmlWindow> mit dem Namen `HtmlWindow1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.HtmlWindow.Unload> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#457](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#457)]
 [!code-vb[System.Windows.Forms.EventExamples#457](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#457)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536973.aspx">OnUnload-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlWindow.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die URL ab, die dem gegenwärtig im Fenster angezeigten Element entspricht.</summary>
        <value>Ein <see cref="T:System.Uri" />, der die URL beschreibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist schreibgeschützt. Um das Fenster, um ein neues Dokument zu navigieren, verwenden die <xref:System.Windows.Forms.HtmlWindow.Navigate%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFrameElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement WindowFrameElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement WindowFrameElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowFrameElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ WindowFrameElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowFrameElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Frameelement ab, das diesem Fenster entspricht.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.HtmlElement" /> des Fensters für <c>FRAME</c> Element. Wenn es sich bei diesem Fenster um keinen Frame handelt, wird <see langword="null" /> zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Abrufen einer `FRAME` Element aus der <xref:System.Windows.Forms.HtmlWindow.Frames%2A> -Auflistung, wird ein <xref:System.Windows.Forms.HtmlWindow>. Rufen Sie <xref:System.Windows.Forms.HtmlWindow.WindowFrameElement%2A> für dieses Objekt bei Bedarf auf die Attribute der zugrunde liegenden `FRAME` -Element, wie z. B. die `SRC` Attribut.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird verglichen die `SRC` -Attribut von Frames in einem `FRAMESET` auf den aktuellen Speicherort. Wenn sie unterschiedlich sind, werden die Frames auf ihre ursprünglichen URLs zurückgesetzt.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.UnauthorizedAccessException">Kann nicht zugegriffen werden eine <c>FRAME</c> Elemente oder die <c>FRAME</c>des dokumentieren, wenn die <c>FRAME</c> befindet sich in einer anderen Zone als der <c>FRAMESET</c> , enthält Es ist. Eine ausführliche Erläuterung finden Sie unter [About Cross-Frame Scripting and Security](https://msdn.microsoft.com/library/ms533028.aspx).</permission>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533771.aspx">FrameElement-Eigenschaft</related>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="MouseEventArgs" FullName="System.Windows.Forms.MouseEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3feaa7f754bd8aa1fb258d77a086432b711e3297" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39771068" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MouseEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MouseEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MouseEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class MouseEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class MouseEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type MouseEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Daten für die Ereignisse <see cref="E:System.Windows.Forms.Control.MouseUp" />, <see cref="E:System.Windows.Forms.Control.MouseDown" /> und <see cref="E:System.Windows.Forms.Control.MouseMove" /> bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.Control.MouseDown> Ereignis tritt auf, wenn der Benutzer die Maustaste drückt, während der Mauszeiger über ein Steuerelement ist. Die <xref:System.Windows.Forms.Control.MouseUp> Ereignis tritt auf, wenn der Benutzer die Maustaste loslässt, während der Mauszeiger über dem Steuerelement befindet. Die <xref:System.Windows.Forms.Control.MouseMove> Ereignis tritt auf, wenn der Benutzer den Mauszeiger über ein Steuerelement bewegt. Ein <xref:System.Windows.Forms.MouseEventArgs> gibt an, welche Maustaste gedrückt wird, wie oft die Maustaste gedrückt und veröffentlicht wird, wurde die Koordinaten der Maus und die Menge, die das Mausrad bewegt,.  
  
 Es ist möglich, dass eine <xref:System.Windows.Forms.Control.MouseDown> -Ereignis ohne das entsprechende <xref:System.Windows.Forms.Control.MouseUp>, wechselt der Benutzer den Fokus auf eine andere Anwendung, bevor Sie die Maustaste loslassen.  
  
 Diese drei Ereignisse vorhanden sind, für die <xref:System.Windows.Forms.Control>, <xref:System.Windows.Forms.AxHost>, und <xref:System.Windows.Forms.NotifyIcon> Klassen.  
  
 Informationen über das Ereignismodell, finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Der folgende code Beispiele behandelt die <xref:System.Windows.Forms.Control.MouseDown> Ereignis auf einer <xref:System.Windows.Forms.TextBox> Steuerelement, sodass der gesamte Text auf der rechten Maustaste im Steuerelement ausgewählt werden. Dieses Beispiel erfordert, dass Sie verfügen über ein Formular mit einem <xref:System.Windows.Forms.TextBox> Steuerelement mit dem Namen `textBox1`.  
  
 [!code-csharp[MouseEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#1)]
 [!code-vb[MouseEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#1)]  
  
 Im folgenden Codebeispiel wird die `Location` zu überwachenden Eigenschaft klickt auf die linke Maustaste gedrückt und eine Reihe von Liniensegmente in Reaktion auf eine Benutzereingabe zu zeichnen. Im Beispiel wird nicht die Zeilen neu zeichnen, wenn Sie das Formular ausgeblendet, und klicken Sie dann erneut wird angezeigt; Dieser Code wurde aus Gründen der Einfachheit ausgelassen.  
  
 [!code-csharp[MouseEventArgs#2](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#2)]
 [!code-vb[MouseEventArgs#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#2)]  
  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.MouseEventArgs.X%2A> und <xref:System.Windows.Forms.MouseEventArgs.Y%2A> Eigenschaften zum Anzeigen der aktuellen Position des Mauszeigers in einem <xref:System.Windows.Forms.ToolTip> Fenster.  
  
 [!code-csharp[MouseEventArgs#3](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#3)]
 [!code-vb[MouseEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
    <altmember cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
    <altmember cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.MouseMove" />
    <altmember cref="E:System.Windows.Forms.NotifyIcon.MouseDown" />
    <altmember cref="E:System.Windows.Forms.NotifyIcon.MouseUp" />
    <altmember cref="E:System.Windows.Forms.NotifyIcon.MouseMove" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseEventArgs (System.Windows.Forms.MouseButtons button, int clicks, int x, int y, int delta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.MouseButtons button, int32 clicks, int32 x, int32 y, int32 delta) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (button As MouseButtons, clicks As Integer, x As Integer, y As Integer, delta As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseEventArgs(System::Windows::Forms::MouseButtons button, int clicks, int x, int y, int delta);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MouseEventArgs : System.Windows.Forms.MouseButtons * int * int * int * int -&gt; System.Windows.Forms.MouseEventArgs" Usage="new System.Windows.Forms.MouseEventArgs (button, clicks, x, y, delta)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
        <Parameter Name="clicks" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="delta" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="button">Einer der <see cref="T:System.Windows.Forms.MouseButtons" />-Werte, der angibt, welche Maustaste gedrückt wurde.</param>
        <param name="clicks">Gibt an, wie oft die Maustaste gedrückt wurde.</param>
        <param name="x">Die x-Koordinate eines Mausklicks in Pixel.</param>
        <param name="y">Die y-Koordinate eines Mausklicks in Pixel.</param>
        <param name="delta">Ein Zähler mit Vorzeichen für die Anzahl der Arretierungen, um die das Rad gedreht wurde.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.MouseEventArgs" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.MouseButtons" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Delta" />
      </Docs>
    </Member>
    <Member MemberName="Button">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MouseButtons Button { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MouseButtons Button" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Button" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Button As MouseButtons" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MouseButtons Button { System::Windows::Forms::MouseButtons get(); };" />
      <MemberSignature Language="F#" Value="member this.Button : System.Windows.Forms.MouseButtons" Usage="System.Windows.Forms.MouseEventArgs.Button" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseButtons</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, welche Maustaste gedrückt wurde.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.MouseButtons" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel behandelt die <xref:System.Windows.Forms.Control.MouseDown> Ereignis auf einer <xref:System.Windows.Forms.TextBox> Steuerelement, sodass der gesamte Text auf der rechten Maustaste im Steuerelement ausgewählt werden. Dieses Beispiel erfordert, dass Sie verfügen über ein Formular mit einem <xref:System.Windows.Forms.TextBox> Steuerelement mit dem Namen `textBox1`.  
  
 [!code-csharp[MouseEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#1)]
 [!code-vb[MouseEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MouseButtons" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Clicks" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Delta" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Location" />
      </Docs>
    </Member>
    <Member MemberName="Clicks">
      <MemberSignature Language="C#" Value="public int Clicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Clicks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Clicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clicks As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Clicks { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Clicks : int" Usage="System.Windows.Forms.MouseEventArgs.Clicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, wie oft die Maustaste gedrückt und losgelassen wurde.</summary>
        <value>Ein <see cref="T:System.Int32" /> mit Angaben dazu, wie häufig die Maustaste gedrückt und losgelassen wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl die Windows-Schnittstelle definiert Mausklicks Ereignisse entweder als einzelne-Standard "oder" doppelklickt, einzelne Anwendungen können eine größere Anzahl von Klicks als einzelnes Ereignis zu interpretieren.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung des neuen Elements. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.Control.MouseClick?displayProperty=nameWithType> Ereignis. Dieser Bericht hilft, erfahren Sie, wenn das Ereignis tritt auf, und können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz eines Typs, die enthält von erbt <xref:System.Windows.Forms.Control>, z. B. eine <xref:System.Windows.Forms.Button> oder <xref:System.Windows.Forms.ComboBox>. Geben Sie den Namen der Instanz `Control1` und stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.Control.MouseClick?displayProperty=nameWithType> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#54)]
 [!code-vb[System.Windows.Forms.EventExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Delta" />
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public int Delta { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Delta" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Delta" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Delta As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Delta { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Delta : int" Usage="System.Windows.Forms.MouseEventArgs.Delta" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Zähler mit Vorzeichen für die Anzahl der Arretierungen ab, um die das Mausrad gedreht wurde, der mit der Konstanten WHEEL_DELTA multipliziert wird. Eine Arretierung (Rastpunkt) ist eine Kerbe des Mausrades.</summary>
        <value>Ein Zähler mit Vorzeichen für die Anzahl der Arretierungen, um die das Mausrad gedreht wurde, der mit der Konstanten WHEEL_DELTA multipliziert wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Mausrad kombiniert die Funktionen von Rad und eine Maustaste gedrückt. Das Rad weist diskrete, gleichmäßigen Abständen aufgenommene Stufen. Wenn Sie das Mausrad drehen, wird eine Rad-Nachricht gesendet, wie jede Kerbe gefunden wird. Einmal-Wheel, eine Arretierung (Rastpunkt), wird durch die Windows-Konstante WHEEL_DELTA, definiert die ist 120. Ein positiver Wert gibt an, dass die weiterleiten (Weg von den Benutzer); das Rad gedreht wurde ein negativer Wert gibt an, dass die rückwärts (Sicht des Benutzers) das Rad gedreht wurde.  
  
 Derzeit ist ein Wert von 120 Standard für eine Arretierung (Rastpunkt). Wenn Mäuse mit höherer Auflösung eingeführt werden, kann die Definition der Konstanten WHEEL_DELTA kleiner werden. Die meisten Anwendungen sollten für ein positiver oder negativer Wert statt auf eine aggregierte Summe überprüfen.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung des neuen Elements. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.Control.MouseClick?displayProperty=nameWithType> Ereignis. Dieser Bericht hilft, erfahren Sie, wenn das Ereignis tritt auf, und können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz eines Typs, die enthält von erbt <xref:System.Windows.Forms.Control>, z. B. eine <xref:System.Windows.Forms.Button> oder <xref:System.Windows.Forms.ComboBox>. Geben Sie den Namen der Instanz `Control1` und stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.Control.MouseClick?displayProperty=nameWithType> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#54)]
 [!code-vb[System.Windows.Forms.EventExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Clicks" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Location { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Location" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Location" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Location As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Location { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.Location : System.Drawing.Point" Usage="System.Windows.Forms.MouseEventArgs.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Position der Maus während des generierten Mausereignisses ab.</summary>
        <value>Ein <see cref="T:System.Drawing.Point" />, der die x- und y-Koordinaten der Maus in Pixel relativ zur oberen linken Ecke des Formulars enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.MouseEventArgs.Location%2A> Eigenschaft zum Nachverfolgen von Klicks mit der linken Maustaste, und zeichnen eine Reihe von Liniensegmente in Reaktion auf eine Benutzereingabe. Im Beispiel die gezeichneten Linien nicht beibehalten, wenn Sie das Formular ausgeblendet, und klicken Sie dann erneut wird angezeigt; Dieser Code wurde zur Vereinfachung weggelassen.  
  
 [!code-csharp[MouseEventArgs#2](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#2)]
 [!code-vb[MouseEventArgs#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Y" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.X" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.X" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property X As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int X { int get(); };" />
      <MemberSignature Language="F#" Value="member this.X : int" Usage="System.Windows.Forms.MouseEventArgs.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die x-Koordinate der Maus während des generierten Mausereignisses ab.</summary>
        <value>Die x-Koordinate der Maus in Pixel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Koordinaten der Maus variieren abhängig von das Ereignis ausgelöst wird. Z. B., wenn die <xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType> -Ereignis behandelt werden, werden Sie die Werte für die Koordinaten der Maus relativ zu den Koordinaten des Steuerelements, das das Ereignis ausgelöst hat. Einige Ereignisse im Zusammenhang mit Drag & Drop-Vorgängen sind Maus-Koordinatenwerte zugeordnet, die relativ zum Ursprung Form oder den Bildschirmursprung werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.MouseEventArgs.X%2A> und <xref:System.Windows.Forms.MouseEventArgs.Y%2A> Eigenschaften zum Anzeigen der aktuellen Position des Mauszeigers in einem <xref:System.Windows.Forms.ToolTip> Fenster.  
  
 [!code-csharp[MouseEventArgs#3](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#3)]
 [!code-vb[MouseEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Y" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Location" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Y" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Y As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Y { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Y : int" Usage="System.Windows.Forms.MouseEventArgs.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die y-Koordinate der Maus während des generierten Mausereignisses ab.</summary>
        <value>Die y-Koordinate der Maus in Pixel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Koordinaten der Maus variieren abhängig von das Ereignis ausgelöst wird. Z. B., wenn die <xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType> -Ereignis behandelt werden, werden Sie die Werte für die Koordinaten der Maus relativ zu den Koordinaten des Steuerelements, das das Ereignis ausgelöst hat. Einige Ereignisse im Zusammenhang mit Drag & Drop-Vorgängen sind Werte für die Koordinaten der Maus zugeordnet, die relativ zum Ursprung Form oder den Bildschirmursprung werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.MouseEventArgs.X%2A> und <xref:System.Windows.Forms.MouseEventArgs.Y%2A> Eigenschaften zum Anzeigen der aktuellen Position des Mauszeigers in einem <xref:System.Windows.Forms.ToolTip> Fenster. Um diesen Code zu verwenden, rufen `TrackCoordinates` vom Konstruktor Formulars.  
  
 [!code-csharp[MouseEventArgs#3](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#3)]
 [!code-vb[MouseEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.X" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Location" />
      </Docs>
    </Member>
  </Members>
</Type>
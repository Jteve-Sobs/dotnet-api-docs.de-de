<Type Name="MainMenu" FullName="System.Windows.Forms.MainMenu">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ab16dd76e703a2ecd19b5e3df02373f05a88b84" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52597666" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MainMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MainMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MainMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class MainMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MainMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type MainMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms.MainMenu")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Menüstruktur eines Formulars dar. Obwohl <see cref="T:System.Windows.Forms.MenuStrip" /> das <see cref="T:System.Windows.Forms.MainMenu" />-Steuerelement vorheriger Versionen ersetzt und funktionell erweitert, wird das <see cref="T:System.Windows.Forms.MainMenu" />-Steuerelement sowohl aus Gründen der Abwärtskompatibilität als auch, falls gewünscht, für die zukünftige Verwendung beibehalten.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.MainMenu> -Steuerelement darstellt, den Container für die Menüstruktur eines Formulars. Ein Menü besteht <xref:System.Windows.Forms.MenuItem> Objekte, die die einzelnen Menübefehle in der Menüstruktur darstellen. Jede <xref:System.Windows.Forms.MenuItem> kann einen Befehl für Ihre Anwendung oder einem übergeordneten Menü für andere Untermenüelemente sein. Binden der <xref:System.Windows.Forms.MainMenu> auf die <xref:System.Windows.Forms.Form> , die es angezeigt wird, weisen Sie die <xref:System.Windows.Forms.MainMenu> zu der <xref:System.Windows.Forms.Form.Menu%2A> Eigenschaft der <xref:System.Windows.Forms.Form>.  
  
 Für Anwendungen, die Unterstützung mehrerer Sprachen haben, können Sie die <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> Eigenschaft, um den Text des Menüs von rechts nach Links zur Unterstützung von Sprachen wie Arabisch anzuzeigen.  
  
 Sie können verschiedene erstellen <xref:System.Windows.Forms.MainMenu> -Objekten zur Darstellung von anderen Menüstrukturen für Ihr Formular. Wenn Sie die Menüstruktur enthalten, die in einer bestimmten wiederverwenden möchten <xref:System.Windows.Forms.MainMenu>, können Sie die <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> Methode, um eine Kopie zu erstellen. Nachdem Sie eine Kopie der Menüstruktur haben, können Sie die entsprechenden Änderungen für Ihre neue Menüstruktur vornehmen.  
  
> [!NOTE]
>  Ausschneiden und Einfügen-Menü, das Elemente aus einer Form in eine andere in den Designer möglicherweise nicht funktionieren wie erwartet, wenn das Formular, das beim Einfügen in keine Menüelemente definiert wurde.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.MainMenu>, weist zwei <xref:System.Windows.Forms.MenuItem> Objekte die <xref:System.Windows.Forms.MainMenu> und bindet es an ein Formular. In diesem Beispiel benötigen Sie eine <xref:System.Windows.Forms.Form> erstellt mit dem Namen `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
    <altmember cref="P:System.Windows.Forms.Form.Menu" />
    <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
    <altmember cref="T:System.Windows.Forms.MenuStrip" />
    <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
    <related type="Article" href="https://msdn.microsoft.com/library/e361bf98-eed8-4ed3-9dfb-5a2e865e3ce6">MenuStrip-Steuerelement (Windows Forms)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.MainMenu" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.MainMenu" />-Klasse ohne angegebene Menüelemente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Version des Konstruktors erstellt eine <xref:System.Windows.Forms.MainMenu> ohne angegebene <xref:System.Windows.Forms.MenuItem> Objekte. Hinzufügen von Menüelementen, die das Steuerelement verwenden, die andere Version dieses Konstruktors, der ein Array von akzeptiert <xref:System.Windows.Forms.MenuItem> Objekte, die die Parameter, oder Verwenden der <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> Methode der <xref:System.Windows.Forms.Menu.MenuItems%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.MainMenu>, weist zwei <xref:System.Windows.Forms.MenuItem> Objekte die <xref:System.Windows.Forms.MainMenu> und bindet es an ein Formular. In diesem Beispiel benötigen Sie eine <xref:System.Windows.Forms.Form> erstellt mit dem Namen `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
        <altmember cref="P:System.Windows.Forms.Form.Menu" />
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MainMenu : System.ComponentModel.IContainer -&gt; System.Windows.Forms.MainMenu" Usage="new System.Windows.Forms.MainMenu container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">Ein <see cref="T:System.ComponentModel.IContainer" />, der den Container des <see cref="T:System.Windows.Forms.MainMenu" /> darstellt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.MainMenu" />-Klasse mit dem angegebenen Container.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MainMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MainMenu" Usage="new System.Windows.Forms.MainMenu items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">Ein Array von <see cref="T:System.Windows.Forms.MenuItem" />-Objekten, die dem <see cref="T:System.Windows.Forms.MainMenu" /> hinzugefügt werden.</param>
        <summary>Initialisiert eine neue Instanz von <see cref="T:System.Windows.Forms.MainMenu" /> mit einer angegebenen Menge von <see cref="T:System.Windows.Forms.MenuItem" />-Objekten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diesen Konstruktor, um ein Array von zuweisen <xref:System.Windows.Forms.MenuItem> Objekte die <xref:System.Windows.Forms.MainMenu> zum Zeitpunkt seiner Erstellung. Nach der <xref:System.Windows.Forms.MainMenu> erstellt wurde können Sie zusätzliche hinzufügen <xref:System.Windows.Forms.MenuItem> Objekte die <xref:System.Windows.Forms.MainMenu> mithilfe der <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> -Methode der der <xref:System.Windows.Forms.Menu.MenuItems%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.MainMenu>, und weist zwei <xref:System.Windows.Forms.MenuItem> Objekte die <xref:System.Windows.Forms.MainMenu> mit dieser Version des Konstruktors. Im Beispiel bindet dann die <xref:System.Windows.Forms.MainMenu> zu einem <xref:System.Windows.Forms.Form>. In diesem Beispiel benötigen Sie eine <xref:System.Windows.Forms.Form> erstellt mit dem Namen `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MainMenu CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MainMenu CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MainMenu ^ CloneMenu();" />
      <MemberSignature Language="F#" Value="override this.CloneMenu : unit -&gt; System.Windows.Forms.MainMenu" Usage="mainMenu.CloneMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein neues <see cref="T:System.Windows.Forms.MainMenu" /> als Duplikat des aktuellen <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.MainMenu" />, das das duplizierte Menü darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Methode verwenden, um eine Kopie der in gespeicherten Menüstruktur erstellen eine <xref:System.Windows.Forms.MainMenu>. Sie können diese Methode verwenden, die Menüstruktur in gespeicherten Wiederverwenden einer <xref:System.Windows.Forms.MainMenu> als Grundlage für ein neues <xref:System.Windows.Forms.MainMenu>. Z. B. Wenn Sie mit eine Menüstruktur erstellen möchten, die verfügt über die gleichen Menüelemente wie ein vorhandenes <xref:System.Windows.Forms.MainMenu> jedoch auch zusätzliche <xref:System.Windows.Forms.MenuItem> Objekte hinzugefügt werden, können Sie die <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> Methode zum Erstellen einer Kopie des Originals <xref:System.Windows.Forms.MainMenu> und Fügen Sie dann auf die neue <xref:System.Windows.Forms.MenuItem> Objekte auf die geklonte <xref:System.Windows.Forms.MainMenu>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.MainMenu.GetForm%2A> Methode, um zu bestimmen, ob eine <xref:System.Windows.Forms.MainMenu> derzeit auf das Formular übergeordnet ist. Wenn der code des Aufrufs in das Beispiel zu <xref:System.Windows.Forms.MainMenu.GetForm%2A> keinen zurückgibt `null`, klont der Code die Menüstruktur des der <xref:System.Windows.Forms.MainMenu> mithilfe der <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> Methode. Der Code legt dann die <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> Eigenschaft auf "true", auf die neue Kopie des der <xref:System.Windows.Forms.MainMenu> zum Erstellen einer <xref:System.Windows.Forms.MainMenu> , die für Sprachen, die Unterstützung von rechts nach links verwendet werden kann. In diesem Beispiel benötigen Sie eine <xref:System.Windows.Forms.MainMenu> erstellt mit dem Namen `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MainMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn das Hauptmenü ausgeblendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung des neuen Elements. Im Beispiel meldet sich ein Ereignishandler für das Vorhandensein der <xref:System.Windows.Forms.MainMenu.Collapse> Ereignis. In diesem Bericht können Sie entnehmen, wann das Ereignis tritt auf, können Sie beim Debuggen unterstützen. Um den Bericht über mehrere Ereignisse oder Ereignisse, die häufig auftreten, beachten Sie, und Ersetzen Sie dabei <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> mit <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht anfügen, um ein mehrzeiliges <xref:System.Windows.Forms.TextBox>.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt, eine Instanz des Typs enthält <xref:System.Windows.Forms.MainMenu> mit dem Namen `MainMenu1`. Stellen Sie sicher, dass der Ereignishandler zugeordnet ist die <xref:System.Windows.Forms.MainMenu.Collapse> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#483](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#483)]
 [!code-vb[System.Windows.Forms.EventExamples#483](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#483)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected override IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr CreateMenuHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateMenuHandle : unit -&gt; nativeint" Usage="mainMenu.CreateMenuHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein neues Handle für das Menü.</summary>
        <returns>Ein Handle für das Menü, wenn die Methode erfolgreich ausgeführt wird, andernfalls <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="mainMenu.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Gibt mit Ausnahme des Speichers die von der <see cref="T:System.Windows.Forms.MainMenu" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Windows.Forms.MainMenu.Dispose%2A> auf, wenn Sie <xref:System.Windows.Forms.MainMenu> nicht mehr benötigen. Die <xref:System.Windows.Forms.MainMenu.Dispose%2A>-Methode bewirkt, dass <xref:System.Windows.Forms.MainMenu> nicht mehr verwendet werden kann. Nach dem Aufruf <xref:System.Windows.Forms.MainMenu.Dispose%2A>, Sie müssen alle Verweise auf Freigeben der <xref:System.Windows.Forms.MainMenu> , damit der belegte Speicher durch die Garbagecollection wieder zugänglich gemacht werden kann.  
  
> [!NOTE]
>  Rufen Sie immer <xref:System.Windows.Forms.MainMenu.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Windows.Forms.MainMenu> freigeben. Andernfalls die Ressourcen der <xref:System.Windows.Forms.MainMenu> ist mit reserviert, bis der Garbage Collection-Aufrufe der <xref:System.Windows.Forms.MainMenu> Destruktor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form GetForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form GetForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.GetForm" />
      <MemberSignature Language="VB.NET" Value="Public Function GetForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ GetForm();" />
      <MemberSignature Language="F#" Value="member this.GetForm : unit -&gt; System.Windows.Forms.Form" Usage="mainMenu.GetForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft das <see cref="T:System.Windows.Forms.Form" /> ab, das dieses Steuerelement enthält.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.Form" />, das der Container für dieses Steuerelement ist. Gibt <see langword="null" /> zurück, wenn <see cref="T:System.Windows.Forms.MainMenu" /> derzeit nicht in einem Formular enthalten ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Eigenschaft können Sie bestimmen, ob ein bestimmter <xref:System.Windows.Forms.MainMenu> zu einem Formular übergeordnet ist. Diese Eigenschaft wird normalerweise verwendet, wenn mehrere <xref:System.Windows.Forms.MainMenu> Objekte in einem Formular verwendet werden, und Sie müssen bestimmen, welche derzeit von einem Formular verwendet wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.MainMenu.GetForm%2A> Methode, um zu bestimmen, ob eine <xref:System.Windows.Forms.MainMenu> derzeit auf das Formular übergeordnet ist. Wenn der code des Aufrufs in das Beispiel zu <xref:System.Windows.Forms.MainMenu.GetForm%2A> keinen zurückgibt `null`, klont der Code die Menüstruktur des der <xref:System.Windows.Forms.MainMenu> mithilfe der <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> Methode. Der Code legt dann die <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> Eigenschaft auf "true", auf die neue Kopie des der <xref:System.Windows.Forms.MainMenu> zum Erstellen einer <xref:System.Windows.Forms.MainMenu> , die für Sprachen, die Unterstützung von rechts nach links verwendet werden kann. In diesem Beispiel benötigen Sie eine <xref:System.Windows.Forms.MainMenu> erstellt mit dem Namen `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="mainMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.MainMenu.Collapse" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Windows.Forms.MainMenu.OnCollapse%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> in einer abgeleiteten Klasse, werden Sie sicher, dass die Basisklasse aufrufen <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob der vom Steuerelement angezeigte Text von rechts nach links angezeigt wird.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.RightToLeft" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ermöglicht die Menüs Sprachen zu unterstützen, die von rechts nach links geschrieben werden. Wenn diese Eigenschaft auf festgelegt ist `RightToLeft.Yes`, Text des Menüelements wird von rechts nach links anstelle der standardmäßigen links nach rechts angezeigt werden.  
  
> [!NOTE]
>  Weitere Informationen darüber, wie der Windows Forms-Steuerelemente aktivieren die Ausrichtung von rechts-nach-links beeinflusst finden Sie unter den <xref:System.Windows.Forms.Control.RightToLeft%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.MainMenu.GetForm%2A> Methode, um zu bestimmen, ob eine <xref:System.Windows.Forms.MainMenu> derzeit auf das Formular übergeordnet ist. Wenn der code des Aufrufs in das Beispiel zu <xref:System.Windows.Forms.MainMenu.GetForm%2A> keinen zurückgibt `null`, klont der Code die Menüstruktur des der <xref:System.Windows.Forms.MainMenu> mithilfe der <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> Methode. Der Beispielcode legt dann die <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> Eigenschaft, um `RightToLeft.Yes` auf die neue Kopie des der <xref:System.Windows.Forms.MainMenu> zum Erstellen einer <xref:System.Windows.Forms.MainMenu> , die für Sprachen, die Unterstützung von rechts nach links verwendet werden kann. In diesem Beispiel benötigen Sie eine <xref:System.Windows.Forms.MainMenu> erstellt mit dem Namen `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der der Eigenschaft zugewiesene Wert ist kein gültiger Member der <see cref="T:System.Windows.Forms.RightToLeft" />-Enumeration.</exception>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="mainMenu.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge zurück, die den <see cref="T:System.Windows.Forms.MainMenu" /> darstellt.</summary>
        <returns>Eine Zeichenfolge, die das aktuelle <see cref="T:System.Windows.Forms.MainMenu" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zurückgegebene Zeichenfolge enthält den Typ und die zurückgegebene Zeichenfolge den <xref:System.Windows.Forms.Form.ToString%2A> Methode Wenn die <xref:System.Windows.Forms.MainMenu> ein Formular zugewiesen wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
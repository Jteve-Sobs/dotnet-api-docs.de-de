<Type Name="MainMenu" FullName="System.Windows.Forms.MainMenu">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7726ac6cb0f9481456de220b731594d57d989f53" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86727729" /></Metadata><TypeSignature Language="C#" Value="public class MainMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MainMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MainMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class MainMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MainMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type MainMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.ToolboxItemFilter("System.Windows.Forms.MainMenu")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ToolboxItemFilter("System.Windows.Forms.MainMenu")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Menüstruktur eines Formulars dar.
    
Diese Klasse ist in .net Core 3,1 und höheren Versionen nicht verfügbar. Verwenden Sie <see cref="T:System.Windows.Forms.MenuStrip" /> stattdessen, wodurch das Steuerelement ersetzt und erweitert wird <see cref="T:System.Windows.Forms.MainMenu" /> .</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

Diese Klasse ist in .net Core 3,1 und höheren Versionen nicht verfügbar. Verwenden Sie stattdessen <see cref="T:System.Windows.Forms.MenuStrip" />.

 Das- <xref:System.Windows.Forms.MainMenu> Steuerelement stellt den Container für die Menüstruktur eines Formulars dar. Ein Menü besteht aus <xref:System.Windows.Forms.MenuItem> Objekten, die die einzelnen Menübefehle in der Menüstruktur darstellen. Jede <xref:System.Windows.Forms.MenuItem> kann ein Befehl für die Anwendung oder ein übergeordnetes Menü für andere unter Menü Elemente sein. Um das <xref:System.Windows.Forms.MainMenu> an das zu binden, das <xref:System.Windows.Forms.Form> es anzeigt, weisen Sie das der- <xref:System.Windows.Forms.MainMenu> <xref:System.Windows.Forms.Form.Menu%2A> Eigenschaft von zu <xref:System.Windows.Forms.Form> .  
  
 Für Anwendungen, die Unterstützung für mehrere Sprachen haben, können Sie die-Eigenschaft verwenden, <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> um den Text des Menüs von rechts nach links anzuzeigen, um Sprachen wie Arabisch zu unterstützen.  
  
 Sie können verschiedene <xref:System.Windows.Forms.MainMenu> Objekte erstellen, um unterschiedliche Menüstrukturen für das Formular darzustellen. Wenn Sie die in einem bestimmten enthaltene Menüstruktur wieder verwenden möchten <xref:System.Windows.Forms.MainMenu> , können Sie die zugehörige-Methode verwenden, <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> um eine Kopie zu erstellen. Sobald Sie über eine Kopie der Menüstruktur verfügen, können Sie die entsprechenden Änderungen für die neue Menüstruktur vornehmen.  
  
> [!NOTE]
>  Das Ausschnitten und Einfügen von Menü Elementen von einer Form in eine andere in den Designer funktioniert möglicherweise nicht wie erwartet, wenn für das Formular, in das Sie einfügen, keine Menü Elemente definiert sind.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein erstellt <xref:System.Windows.Forms.MainMenu> , <xref:System.Windows.Forms.MenuItem> dem zwei-Objekte zugewiesen <xref:System.Windows.Forms.MainMenu> und an ein Formular gebunden. Für dieses Beispiel muss ein erstellt werden <xref:System.Windows.Forms.Form> , das den Namen hat `Form1` .  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
    <altmember cref="P:System.Windows.Forms.Form.Menu" />
    <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
    <altmember cref="T:System.Windows.Forms.MenuStrip" />
    <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
    <related type="Article" href="/dotnet/framework/winforms/controls/menustrip-control-windows-forms">MenuStrip-Steuerelement (Windows Forms)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.MainMenu" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.MainMenu" />-Klasse ohne angegebene Menüelemente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Version des Konstruktors erstellt eine <xref:System.Windows.Forms.MainMenu> ohne angegebene- <xref:System.Windows.Forms.MenuItem> Objekte. Verwenden Sie zum Hinzufügen von Menü Elementen zum-Steuerelement die andere Version dieses Konstruktors, die ein Array von- <xref:System.Windows.Forms.MenuItem> Objekten als Parameter akzeptiert, oder verwenden Sie die- <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> Methode der- <xref:System.Windows.Forms.Menu.MenuItems%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein erstellt <xref:System.Windows.Forms.MainMenu> , <xref:System.Windows.Forms.MenuItem> dem zwei-Objekte zugewiesen <xref:System.Windows.Forms.MainMenu> und an ein Formular gebunden. Für dieses Beispiel muss ein erstellt werden <xref:System.Windows.Forms.Form> , das den Namen hat `Form1` .  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
        <altmember cref="P:System.Windows.Forms.Form.Menu" />
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MainMenu : System.ComponentModel.IContainer -&gt; System.Windows.Forms.MainMenu" Usage="new System.Windows.Forms.MainMenu container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="container">Ein <see cref="T:System.ComponentModel.IContainer" />, der den Container des <see cref="T:System.Windows.Forms.MainMenu" /> darstellt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.MainMenu" />-Klasse mit dem angegebenen Container.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MainMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MainMenu" Usage="new System.Windows.Forms.MainMenu items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">Ein Array von <see cref="T:System.Windows.Forms.MenuItem" />-Objekten, die dem <see cref="T:System.Windows.Forms.MainMenu" /> hinzugefügt werden.</param>
        <summary>Initialisiert eine neue Instanz von <see cref="T:System.Windows.Forms.MainMenu" /> mit einer angegebenen Menge von <see cref="T:System.Windows.Forms.MenuItem" />-Objekten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit diesem Konstruktor können Sie zum <xref:System.Windows.Forms.MenuItem> Zeitpunkt der Erstellung ein Array von-Objekten zuweisen <xref:System.Windows.Forms.MainMenu> . Nachdem der <xref:System.Windows.Forms.MainMenu> erstellt wurde, können Sie <xref:System.Windows.Forms.MenuItem> <xref:System.Windows.Forms.MainMenu> mithilfe der-Methode der-Eigenschaft weitere Objekte hinzufügen <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> <xref:System.Windows.Forms.Menu.MenuItems%2A> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein erstellt <xref:System.Windows.Forms.MainMenu> , und <xref:System.Windows.Forms.MenuItem> <xref:System.Windows.Forms.MainMenu> mithilfe dieser Version des-Konstruktors werden zwei-Objekte zugewiesen. Im Beispiel wird dann der <xref:System.Windows.Forms.MainMenu> an einen gebunden <xref:System.Windows.Forms.Form> . Für dieses Beispiel muss ein erstellt werden <xref:System.Windows.Forms.Form> , das den Namen hat `Form1` .  
  
 [!code-cpp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MainMenu CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MainMenu CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MainMenu ^ CloneMenu();" />
      <MemberSignature Language="F#" Value="override this.CloneMenu : unit -&gt; System.Windows.Forms.MainMenu" Usage="mainMenu.CloneMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein neues <see cref="T:System.Windows.Forms.MainMenu" /> als Duplikat des aktuellen <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.MainMenu" />, das das duplizierte Menü darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie eine Kopie der in einem gespeicherten Menüstruktur erstellen <xref:System.Windows.Forms.MainMenu> . Sie können diese Methode verwenden, um die in einem gespeicherte Menüstruktur <xref:System.Windows.Forms.MainMenu> als Grundlage für einen neuen wiederzuverwenden <xref:System.Windows.Forms.MainMenu> . Wenn Sie z. b. eine Menüstruktur erstellen möchten, die die gleichen Menü Elemente wie eine vorhandene hat <xref:System.Windows.Forms.MainMenu> , aber auch zusätzliche <xref:System.Windows.Forms.MenuItem> Objekte hinzugefügt werden, können Sie die <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> -Methode verwenden, um eine Kopie des Originals zu erstellen <xref:System.Windows.Forms.MainMenu> und dann die neuen <xref:System.Windows.Forms.MenuItem> Objekte dem geklonten hinzuzufügen <xref:System.Windows.Forms.MainMenu> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die- <xref:System.Windows.Forms.MainMenu.GetForm%2A> Methode verwendet, um zu bestimmen, ob ein <xref:System.Windows.Forms.MainMenu> aktuell dem Formular übergeordnet ist. Wenn der-Befehl im Beispielcode <xref:System.Windows.Forms.MainMenu.GetForm%2A> nicht zurückgibt `null` , klont der Code dann die Menüstruktur der <xref:System.Windows.Forms.MainMenu> mithilfe der- <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> Methode. Anschließend legt der Code die- <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> Eigenschaft für die neue Kopie von auf true fest, <xref:System.Windows.Forms.MainMenu> um einen zu erstellen <xref:System.Windows.Forms.MainMenu> , der für Sprachen verwendet werden kann, die Text von rechts nach links unterstützen. Für dieses Beispiel muss ein erstellt werden <xref:System.Windows.Forms.MainMenu> , das den Namen hat `mainMenu1` .  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MainMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn das Hauptmenü ausgeblendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.MainMenu.Collapse> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, empfiehlt es sich, durch zu ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht an eine mehrzeilige anfügen <xref:System.Windows.Forms.TextBox> .  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.MainMenu> Namen enthält `MainMenu1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.MainMenu.Collapse> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#483](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#483)]
 [!code-vb[System.Windows.Forms.EventExamples#483](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#483)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected override IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr CreateMenuHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateMenuHandle : unit -&gt; nativeint" Usage="mainMenu.CreateMenuHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein neues Handle für das Menü.</summary>
        <returns>Ein Handle für das Menü, wenn die Methode erfolgreich ausgeführt wird, andernfalls <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="mainMenu.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Gibt mit Ausnahme des Speichers die von der <see cref="T:System.Windows.Forms.MainMenu" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Windows.Forms.MainMenu.Dispose%2A> auf, wenn Sie <xref:System.Windows.Forms.MainMenu> nicht mehr benötigen. Die <xref:System.Windows.Forms.MainMenu.Dispose%2A>-Methode bewirkt, dass <xref:System.Windows.Forms.MainMenu> nicht mehr verwendet werden kann. Nachdem <xref:System.Windows.Forms.MainMenu.Dispose%2A> Sie aufgerufen haben, müssen Sie alle Verweise auf freigeben, <xref:System.Windows.Forms.MainMenu> damit der Arbeitsspeicher, den Sie belegen, von Garbage Collection freigegeben werden kann.  
  
> [!NOTE]
>  Rufen Sie immer <xref:System.Windows.Forms.MainMenu.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Windows.Forms.MainMenu> freigeben. Andernfalls werden die Ressourcen, die <xref:System.Windows.Forms.MainMenu> von verwendet werden, erst freigegeben, wenn Garbage Collection den <xref:System.Windows.Forms.MainMenu> Dekonstruktor des Objekts aufruft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form GetForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form GetForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.GetForm" />
      <MemberSignature Language="VB.NET" Value="Public Function GetForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ GetForm();" />
      <MemberSignature Language="F#" Value="member this.GetForm : unit -&gt; System.Windows.Forms.Form" Usage="mainMenu.GetForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft das <see cref="T:System.Windows.Forms.Form" /> ab, das dieses Steuerelement enthält.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.Form" />, das der Container für dieses Steuerelement ist. Gibt <see langword="null" /> zurück, wenn <see cref="T:System.Windows.Forms.MainMenu" /> derzeit nicht in einem Formular enthalten ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Eigenschaft können Sie feststellen, ob ein bestimmtes <xref:System.Windows.Forms.MainMenu> einem Formular übergeordnet ist. Die-Eigenschaft wird in der Regel verwendet, wenn mehrere <xref:System.Windows.Forms.MainMenu> Objekte in einem Formular verwendet werden und Sie bestimmen müssen, welche derzeit von einem Formular verwendet wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die- <xref:System.Windows.Forms.MainMenu.GetForm%2A> Methode verwendet, um zu bestimmen, ob ein <xref:System.Windows.Forms.MainMenu> aktuell dem Formular übergeordnet ist. Wenn der-Befehl im Beispielcode <xref:System.Windows.Forms.MainMenu.GetForm%2A> nicht zurückgibt `null` , klont der Code dann die Menüstruktur der <xref:System.Windows.Forms.MainMenu> mithilfe der- <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> Methode. Anschließend legt der Code die- <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> Eigenschaft für die neue Kopie von auf true fest, <xref:System.Windows.Forms.MainMenu> um einen zu erstellen <xref:System.Windows.Forms.MainMenu> , der für Sprachen verwendet werden kann, die Text von rechts nach links unterstützen. Für dieses Beispiel muss ein erstellt werden <xref:System.Windows.Forms.MainMenu> , das den Namen hat `mainMenu1` .  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="mainMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Forms.MainMenu.Collapse" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [behandeln und Auswerfen von Ereignissen](/dotnet/standard/events/).  
  
 Mit der <xref:System.Windows.Forms.MainMenu.OnCollapse%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Stellen Sie beim Überschreiben <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> in einer abgeleiteten Klasse sicher, dass die-Methode der Basisklasse aufgerufen wird, <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> damit registrierte Delegaten das Ereignis empfangen.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Localizable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob der vom Steuerelement angezeigte Text von rechts nach links angezeigt wird.</summary>
        <value>Einer der <see cref="T:System.Windows.Forms.RightToLeft" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ermöglicht es Ihren Menüs, Sprachen zu unterstützen, die von rechts nach links geschrieben werden. Wenn diese Eigenschaft auf festgelegt ist `RightToLeft.Yes` , wird der Text des Menü Elements von rechts nach links und nicht von der standardmäßigen Left-to-Right-Methode angezeigt.  
  
> [!NOTE]
>  Weitere Informationen zum Aktivieren der Ausrichtung von rechts nach links auf Windows Forms Steuerelemente finden Sie unter der- <xref:System.Windows.Forms.Control.RightToLeft%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die- <xref:System.Windows.Forms.MainMenu.GetForm%2A> Methode verwendet, um zu bestimmen, ob ein <xref:System.Windows.Forms.MainMenu> aktuell dem Formular übergeordnet ist. Wenn der-Befehl im Beispielcode <xref:System.Windows.Forms.MainMenu.GetForm%2A> nicht zurückgibt `null` , klont der Code dann die Menüstruktur der <xref:System.Windows.Forms.MainMenu> mithilfe der- <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> Methode. Der Beispielcode legt dann die- <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> Eigenschaft `RightToLeft.Yes` auf der neuen Kopie von auf fest, <xref:System.Windows.Forms.MainMenu> um einen zu erstellen <xref:System.Windows.Forms.MainMenu> , der für Sprachen verwendet werden kann, die Text von rechts nach links unterstützen. Für dieses Beispiel muss ein erstellt werden <xref:System.Windows.Forms.MainMenu> , das den Namen hat `mainMenu1` .  
  
 [!code-cpp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der der Eigenschaft zugewiesene Wert ist kein gültiger Member der <see cref="T:System.Windows.Forms.RightToLeft" />-Enumeration.</exception>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="mainMenu.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge zurück, die den <see cref="T:System.Windows.Forms.MainMenu" /> darstellt.</summary>
        <returns>Eine Zeichenfolge, die das aktuelle <see cref="T:System.Windows.Forms.MainMenu" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Rückgabe Zeichenfolge enthält den Typ und die Zeichenfolge, die von der-Methode zurückgegeben <xref:System.Windows.Forms.Form.ToString%2A> <xref:System.Windows.Forms.MainMenu> wird, wenn einem Formular zugewiesen wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

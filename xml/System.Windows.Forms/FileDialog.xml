<Type Name="FileDialog" FullName="System.Windows.Forms.FileDialog">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dee169705d2b26efbf74c9e598e6880db71aba8e" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82484722" /></Metadata><TypeSignature Language="C#" Value="public abstract class FileDialog : System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileDialog extends System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.FileDialog" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FileDialog&#xA;Inherits CommonDialog" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileDialog abstract : System::Windows::Forms::CommonDialog" />
  <TypeSignature Language="F#" Value="type FileDialog = class&#xA;    inherit CommonDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.CommonDialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("FileOk")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("FileName")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zeigt ein Dialogfeld an, in dem der Benutzer eine Datei auswählen kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog> ist eine abstrakte Klasse, die allgemeine Verhaltensweisen für die Klassen <xref:System.Windows.Forms.OpenFileDialog> und <xref:System.Windows.Forms.SaveFileDialog> enthält. Sie ist nicht für die direkte Verwendung vorgesehen, sondern enthält ein häufiges Verhalten für diese beiden Klassen. Eine Instanz von <xref:System.Windows.Forms.FileDialog>kann nicht erstellt werden. Obwohl die-Klasse als öffentlich deklariert ist, können Sie nicht von ihr erben, da Sie interne abstrakte Methoden enthält. Um ein Dialogfeld zum auswählen oder Speichern einer Datei zu erstellen, verwenden Sie <xref:System.Windows.Forms.OpenFileDialog> oder <xref:System.Windows.Forms.SaveFileDialog>.  
  
 <xref:System.Windows.Forms.FileDialog> ist ein modales Dialogfeld. Daher wird der Rest der Anwendung, sofern er angezeigt wird, so lange blockiert, bis der Benutzer eine Datei ausgewählt hat. Wenn ein Dialogfeld modale angezeigt wird, können außer den Objekten im Dialogfeld keine Eingaben (Tastatur oder Mausklicks) auftreten. Das Programm muss das Dialogfeld (normalerweise als Reaktion auf eine Benutzeraktion) ausblenden oder schließen, bevor Eingaben für das aufrufende Programm auftreten können.  
  
> [!CAUTION]
>  Wenn Sie von <xref:System.Windows.Forms.FileDialog>abgeleitete Klassen verwenden, z. b. <xref:System.Windows.Forms.OpenFileDialog> und <xref:System.Windows.Forms.SaveFileDialog>, vermeiden Sie die Verwendung von Zeichenfolgenliteralen mit absoluten Pfaden. Stattdessen können Sie den Pfad mithilfe einer oder mehrerer der in der folgenden Tabelle beschriebenen Verfahren dynamisch abrufen.  
  
 Wenn Sie es Benutzern ermöglichen möchten, anstelle einer Datei einen Ordner auszuwählen, verwenden Sie die <xref:System.Windows.Forms.FolderBrowserDialog>.  
  
 Abhängig von der Art der Anwendung, der Speicherung von Daten, die der Anwendung zugeordnet sind, und dem Grund für den Zugriff auf das Dateisystem gibt es viele Möglichkeiten, einen Verzeichnispfad zu erstellen. In der folgenden Tabelle werden die Verfahren zum dynamischen Erstellen von Pfaden gezeigt.  
  
|Pfad oder Programmkategorie|Zu verwendende Klasse und Member|  
|------------------------------|------------------------------|  
|Standard mäßige Windows-Pfade, wie z. b. Programmdateien, MyDocuments, der Desktop usw.|Die <xref:System.Environment?displayProperty=nameWithType>-Klasse ist die umfassendste Quelle für diese, entweder durch die statischen Methoden, z. b. <xref:System.Environment.SystemDirectory%2A>, oder durch die <xref:System.Environment.GetFolderPath%2A>-Methode, wobei einer der <xref:System.Environment.SpecialFolder> Enumerationswerte verwendet wird.|  
|Pfade, die mit der aktuellen Anwendung verknüpft sind|Die <xref:System.Windows.Forms.Application>-Klasse verfügt über statische Member, um bestimmte Pfade zu erhalten, z. b. <xref:System.Windows.Forms.Application.StartupPath%2A>, <xref:System.Windows.Forms.Application.ExecutablePath%2A>, <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>und <xref:System.Windows.Forms.Application.CommonAppDataPath%2A>.<br /><br /> Die <xref:System.IO.Path.GetTempPath%2A>-Methode des <xref:System.IO.Path?displayProperty=nameWithType> gibt den Pfad des temporären Ordners zurück.<br /><br /> Die <xref:System.IO.Directory.GetCurrentDirectory%2A>-Methode der <xref:System.IO.Directory?displayProperty=nameWithType>-Klasse gibt das aktuelle ausführende Verzeichnis der Anwendung zurück.<br /><br /> Die <xref:System.IO.DriveInfo.RootDirectory%2A>-Eigenschaft der <xref:System.IO.DriveInfo>-Klasse stellt das Stammverzeichnis des angegebenen Laufwerks dar.|  
|Pfade, die als Anwendungseinstellungen gespeichert sind|Greifen Sie auf die entsprechende Anwendungs Einstellungs Eigenschaft der Wrapper Klasse zu, die von <xref:System.Configuration.ApplicationSettingsBase>abgeleitet ist. Weitere Informationen finden Sie unter [Anwendungseinstellungen für Windows Forms](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md).|  
|Registrierungs Speicher|In einigen Anwendungen werden Verzeichnisinformationen in der Registrierung gespeichert. Die <xref:System.Windows.Forms.Application>-Klasse verfügt über die Eigenschaften <xref:System.Windows.Forms.Application.CommonAppDataPath%2A> und <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>, die in einen <xref:Microsoft.Win32.RegistryKey> Wert aufgelöst werden.|  
|ClickOnce-Anwendungen|Verwenden Sie für ClickOnce-Anwendungen <xref:System.Windows.Forms.Application> Klassenmember, z. b. <xref:System.Windows.Forms.Application.UserAppDataPath%2A>, der einen Zeiger auf das ClickOnce-Datenverzeichnis zurückgibt. Weitere Informationen finden Sie unter [zugreifen auf lokale und Remote Daten in ClickOnce-Anwendungen](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications).|  
|Internationale Anwendungen|Rufen Sie für internationale Anwendungen den relativen Pfadteil aus einer Zeichen folgen Ressource in der Anwendung ab, indem Sie die <xref:System.Resources.ResourceReader?displayProperty=nameWithType>-Klasse verwenden. Weitere Informationen zur Globalisierung und Lokalisierung finden Sie im Thema [Globalisierung und Lokalisierung](~/docs/standard/globalization-localization/index.md).|  
  
 Beachten Sie, dass ein vollständiger Pfad mit einer oder mehreren der beschriebenen Verfahren erstellt werden kann. Beispielsweise kann die <xref:System.Environment.GetFolderPath%2A>-Methode verwendet werden, um den Pfad zum Ordner "MyDocuments" abzurufen. Anschließend kann eine Anwendungs Einstellung verwendet werden, um einen relativen Teil Verzeichnis Bereich hinzuzufügen.  
  
 Die <xref:System.IO.Path?displayProperty=nameWithType>-Klasse enthält statische Member zur Unterstützung bei der Bearbeitung absoluter und relativer Pfad Zeichenfolgen, während die Klassen <xref:System.IO.File?displayProperty=nameWithType> und <xref:System.IO.Directory?displayProperty=nameWithType> statische Member aufweisen, die tatsächlich Dateien bzw. Verzeichnisse bearbeiten.  
  
> [!IMPORTANT]
>  Wenn der Benutzer der Anwendung den Ordner im <xref:System.Windows.Forms.FileDialog>ändert, wird das aktuelle Arbeitsverzeichnis für die Anwendung auf den in der <xref:System.Windows.Forms.FileDialog>angegebenen Speicherort festgelegt. Um dies zu verhindern, legen Sie die <xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A>-Eigenschaft auf `true`fest.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.OpenFileDialog> Implementierung von <xref:System.Windows.Forms.FileDialog> verwendet und das Erstellen, Festlegen von Eigenschaften und das darstellen des Dialog Felds veranschaulicht. Im Beispiel wird die <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>-Methode verwendet, um das Dialogfeld anzuzeigen und die <xref:System.Windows.Forms.DialogResult>zurückzugeben. Für das Beispiel muss ein Formular mit einer <xref:System.Windows.Forms.Button> platziert werden, und der <xref:System.IO>-Namespace hinzugefügt.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.CommonDialog" />
    <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
    <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
    <altmember cref="T:System.Windows.Forms.FolderBrowserDialog" />
    <altmember cref="T:System.IO.Path" />
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.Directory" />
    <altmember cref="T:System.Environment" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:Microsoft.Win32.Registry" />
    <altmember cref="T:System.Resources.ResourceReader" />
  </Docs>
  <Members>
    <Member MemberName="AddExtension">
      <MemberSignature Language="C#" Value="public bool AddExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddExtension" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AddExtension" />
      <MemberSignature Language="VB.NET" Value="Public Property AddExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AddExtension { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AddExtension : bool with get, set" Usage="System.Windows.Forms.FileDialog.AddExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob einem Dateinamen im Dialogfeld automatisch eine Erweiterung hinzugefügt wird, wenn der Benutzer keine Erweiterung angibt, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn eine vom Benutzer nicht eingegebene Dateierweiterung automatisch im Dialogfeld hinzugefügt wird, andernfalls <see langword="false" />. Standardwert: <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Erweiterung, die einem Dateinamen hinzugefügt wird, hängt vom aktuell ausgewählten Dateifilter und dem Wert der <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>-Eigenschaft ab.  
  
 Wenn die <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>-Eigenschaft `true`ist, wird im Dialogfeld die erste Erweiterung aus dem aktuellen Dateifilter hinzugefügt, die mit einer vorhandenen Datei übereinstimmt. Wenn keine Dateien dem aktuellen Dateifilter entsprechen, wird im Dialogfeld die in der <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>-Eigenschaft angegebene Erweiterung hinzugefügt.  
  
 Wenn die <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>-Eigenschaft `false`ist, wird im Dialogfeld die erste gültige Dateinamenerweiterung aus dem aktuellen Dateifilter hinzugefügt. Wenn der aktuelle Dateifilter keine gültigen Dateinamen Erweiterungen enthält, wird im Dialogfeld die in der <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>-Eigenschaft angegebene Erweiterung hinzugefügt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="AutoUpgradeEnabled">
      <MemberSignature Language="C#" Value="public bool AutoUpgradeEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoUpgradeEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoUpgradeEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoUpgradeEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoUpgradeEnabled : bool with get, set" Usage="System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob diese <see cref="T:System.Windows.Forms.FileDialog" />-Instanz automatisch Darstellung und Verhalten aktualisieren soll, wenn Sie unter [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)] ausgeführt wird, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn diese <see cref="T:System.Windows.Forms.FileDialog" />-Instanz Darstellung und Verhalten bei der Ausführung unter [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)] automatisch aktualisieren soll, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft `false`ist, hat die <xref:System.Windows.Forms.FileDialog> Klasse eine Darstellung und das Verhalten des [!INCLUDE[winxp](~/includes/winxp-md.md)]Stils auf [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)].  
  
 Auf [!INCLUDE[winxp](~/includes/winxp-md.md)]hat diese Eigenschaft keine Auswirkung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckFileExists">
      <MemberSignature Language="C#" Value="public virtual bool CheckFileExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckFileExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CheckFileExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CheckFileExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckFileExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob im Dialogfeld eine Warnung angezeigt wird, wenn der Benutzer den Namen einer nicht vorhandenen Datei angibt, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn im Dialogfeld bei Angabe eines nicht vorhandenen Dateinamens durch den Benutzer eine Warnung angezeigt wird, andernfalls <see langword="false" />. Standardwert: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert ist `true` für eine erbende <xref:System.Windows.Forms.OpenFileDialog> und `false` für eine erbende <xref:System.Windows.Forms.SaveFileDialog>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      </Docs>
    </Member>
    <Member MemberName="CheckPathExists">
      <MemberSignature Language="C#" Value="public bool CheckPathExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckPathExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckPathExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckPathExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckPathExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob im Dialogfeld eine Warnung angezeigt wird, wenn der Benutzer einen nicht vorhandenen Pfad angibt, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn das Dialogfeld bei Angabe eines nicht vorhandenen Pfads durch den Benutzer eine Warnung anzeigt, andernfalls <see langword="false" />. Standardwert: <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      </Docs>
    </Member>
    <Member MemberName="CustomPlaces">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomPlaces As FileDialogCustomPlacesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FileDialogCustomPlacesCollection ^ CustomPlaces { System::Windows::Forms::FileDialogCustomPlacesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomPlaces : System.Windows.Forms.FileDialogCustomPlacesCollection" Usage="System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FileDialogCustomPlacesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung der benutzerdefinierten Speicherorte für diese <see cref="T:System.Windows.Forms.FileDialog" />-Instanz ab.</summary>
        <value>Die Auflistung der benutzerdefinierten Speicherorte für diese <see cref="T:System.Windows.Forms.FileDialog" />-Instanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Auf [!INCLUDE[winxp](~/includes/winxp-md.md)]hat diese Eigenschaft keine Auswirkung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Windows.Forms.FileDialog.CustomPlaces%2A>-Auflistung veranschaulicht. Fügen Sie zum Ausführen dieses Beispiels den folgenden Code in ein Windows Form ein, und nennen Sie `InitializeDialogAndButton` aus dem Konstruktor des Formulars oder <xref:System.Windows.Forms.Form.Load> Ereignis Behandlungsmethode.  
  
 [!code-csharp[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultExt">
      <MemberSignature Language="C#" Value="public string DefaultExt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultExt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultExt As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultExt { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultExt : string with get, set" Usage="System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standarddateinamenerweiterung ab oder legt diese fest.</summary>
        <value>Die Standarddateierweiterung. Die zurückgegebene Zeichenfolge enthält keinen Punkt. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Benutzer der Anwendung einen Dateinamen ohne Erweiterung angibt, fügt der <xref:System.Windows.Forms.FileDialog> eine Erweiterung an den Dateinamen an. Die verwendete Erweiterung wird durch die Eigenschaften <xref:System.Windows.Forms.FileDialog.Filter%2A> und <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> bestimmt. Wenn im <xref:System.Windows.Forms.FileDialog> ein Filter ausgewählt ist und der Filter eine Erweiterung angibt, wird diese Erweiterung verwendet. Wenn der ausgewählte Filter anstelle der Erweiterung einen Platzhalter verwendet, wird die in der <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>-Eigenschaft angegebene Erweiterung verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der Methoden <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType> und <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType> mit Streams veranschaulicht. Außerdem wird die Verwendung des <xref:System.Windows.Forms.FileDialog.FileName%2A>-, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>-, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>-und <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType>-Members veranschaulicht.  
  
 Dies ist ein umfassendes Beispiel, das ausgeführt werden kann, wenn Sie es in Ihr Projekt kopieren.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DereferenceLinks">
      <MemberSignature Language="C#" Value="public bool DereferenceLinks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DereferenceLinks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberSignature Language="VB.NET" Value="Public Property DereferenceLinks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DereferenceLinks { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DereferenceLinks : bool with get, set" Usage="System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Dialogfeld den Speicherort der Datei, auf die die Verknüpfung verweist, oder den Speicherort der Verknüpfung (.lnk) zurückgibt, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn das Dialogfeld den Speicherort der Datei zurückgibt, auf die die Verknüpfung verweist, andernfalls <see langword="false" />. Standardwert: <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventFileOk">
      <MemberSignature Language="C#" Value="protected static readonly object EventFileOk;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly object EventFileOk" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly EventFileOk As Object " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly System::Object ^ EventFileOk;" />
      <MemberSignature Language="F#" Value=" staticval mutable EventFileOk : obj" Usage="System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Besitzt das <see cref="E:System.Windows.Forms.FileDialog.FileOk" />-Ereignis.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileName" />
      <MemberSignature Language="VB.NET" Value="Public Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string with get, set" Usage="System.Windows.Forms.FileDialog.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Zeichenfolge ab, die den im Dateidialogfeld ausgewählten Dateinamen enthält, oder legt diese fest.</summary>
        <value>Der Dateiname, der im Dateidialogfeld ausgewählt wurde. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Dateiname enthält den Dateipfad und die Erweiterung. Wenn keine Dateien ausgewählt sind, gibt diese Methode eine leere Zeichenfolge ("") zurück.  
  
 Wenn diese Eigenschaft von der <xref:System.Windows.Forms.SaveFileDialog>-Klasse verwendet wird, stellt Sie die Datei dar, die gespeichert wird. Wenn Sie aus der <xref:System.Windows.Forms.OpenFileDialog>-Klasse verwendet wird, stellt Sie die Datei dar, die geöffnet wird.  
  
 Diese Eigenschaft kann nur der Name einer ausgewählten Datei sein. Wenn Sie ein Array mit den Namen aller ausgewählten Dateien im Dialogfeld Mehrfachauswahl zurückgeben möchten, verwenden Sie <xref:System.Windows.Forms.FileDialog.FileNames%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der Methoden <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType> und <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType> mit Streams veranschaulicht. Außerdem wird die Verwendung des <xref:System.Windows.Forms.FileDialog.FileName%2A>-, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>-, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>-und <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType>-Members veranschaulicht.  
  
 Dies ist ein umfassendes Beispiel, das ausgeführt werden kann, wenn Sie es in Ihr Projekt kopieren.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileNames" />
        <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
        <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
      </Docs>
    </Member>
    <Member MemberName="FileNames">
      <MemberSignature Language="C#" Value="public string[] FileNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] FileNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ FileNames { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileNames : string[]" Usage="System.Windows.Forms.FileDialog.FileNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Dateinamen aller im Dialogfeld ausgewählten Dateien ab.</summary>
        <value>Ein Array des Typs <see cref="T:System.String" />, das die Dateinamen aller im Dialogfeld ausgewählten Dateien enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeder Dateiname enthält den Dateipfad und die Erweiterung. Wenn keine Dateien ausgewählt sind, gibt diese Methode ein leeres Array zurück.  
  
   
  
## Examples  
 Im folgenden Codebeispiel kann der Benutzer eine Reihe von Bildern auswählen und diese in <xref:System.Windows.Forms.PictureBox> Steuerelementen auf einem Formular anzeigen. Es veranschaulicht die Initialisierung eines <xref:System.Windows.Forms.OpenFileDialog>, das Festlegen der <xref:System.Windows.Forms.FileDialog.Title%2A>-und <xref:System.Windows.Forms.FileDialog.Filter%2A> Eigenschaften und das Auswählen mehrerer Dateien durch Festlegen der <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A>-Eigenschaft auf true. In diesem Codebeispiel wird davon ausgegangen, dass Ihr Formular bereits ein <xref:System.Windows.Forms.OpenFileDialog>-Steuerelement mit dem Namen `openFileDialog1`, eine <xref:System.Windows.Forms.Button> namens `SelectFileButton`und eine <xref:System.Windows.Forms.FlowLayoutPanel> mit dem Namen `flowLayoutPanel1`aufweist.  
  
 [!code-csharp[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileName" />
      </Docs>
    </Member>
    <Member MemberName="FileOk">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler FileOk;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler FileOk" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.FileDialog.FileOk" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FileOk As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ FileOk;" />
      <MemberSignature Language="F#" Value="member this.FileOk : System.ComponentModel.CancelEventHandler " Usage="member this.FileOk : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer in einem Dateidialogfeld auf die Schaltfläche **Öffnen** oder **Speichern** klickt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auswerfen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Windows.Forms.FileDialog.FileNames%2A>-Eigenschaft, die Behandlung des <xref:System.Windows.Forms.FileDialog.FileOk> Ereignisses und die Verwendung der <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType>-Methode veranschaulicht. Wenn das Beispiel ausgeführt wird, kann ein Benutzer Grafikdateien aus einem <xref:System.Windows.Forms.OpenFileDialog> Objekt auswählen. Die ausgewählten Dateien werden im Formular angezeigt. Die <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType>-Methode erzwingt das Neuzeichnen des Formulars für jede geöffnete Grafikdatei. Zum Ausführen dieses Beispiels fügen Sie den folgenden Code in ein Formular ein, das eine <xref:System.Windows.Forms.PictureBox> mit dem Namen `PictureBox1`, eine <xref:System.Windows.Forms.OpenFileDialog> namens `OpenFileDialog1`und eine <xref:System.Windows.Forms.Button> mit dem Namen `fileButton`enthält. Ruft die Methoden `InitializePictureBox` und `InitializeOpenFileDialog` aus dem Konstruktor des Formulars oder `Load` Methode auf. Wenn das Beispiel ausgeführt wird, klicken Sie auf die Schaltfläche, um das Dialogfeld anzuzeigen.  
  
 [!code-cpp[System.Windows.Forms.FileDialog#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#1)]
 [!code-csharp[System.Windows.Forms.FileDialog#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialog#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="System.Windows.Forms.FileDialog.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aktuelle Filterzeichenfolge für Dateinamen ab, die die im Dialogfeld im Feld „Speichern unter“ oder „Dateityp“ angezeigte Auswahl bestimmt, oder legt diese fest.</summary>
        <value>Die im Dialogfeld verfügbaren Optionen zum Filtern von Dateien.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Filter Zeichenfolge enthält für jede Filteroption eine Beschreibung des Filters, gefolgt vom senkrechten Strich (&#124;) und dem Filter Muster. Die Zeichen folgen für verschiedene Filteroptionen werden durch den senkrechten Strich getrennt.  
  
 Im folgenden finden Sie ein Beispiel für eine Filter Zeichenfolge:  
  
 `Text files (*.txt)|*.txt|All files (*.*)|*.*`  
  
 Sie können einem Filter mehrere Filter Muster hinzufügen, indem Sie die Dateitypen durch Semikolons trennen, z. b.:  
  
 `Image Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.*`  
  
 Verwenden Sie die <xref:System.Windows.Forms.FileDialog.FilterIndex%2A>-Eigenschaft, um festzulegen, welche Filteroption zuerst dem Benutzer angezeigt wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.OpenFileDialog> Implementierung von <xref:System.Windows.Forms.FileDialog> verwendet und das Erstellen, Festlegen von Eigenschaften und das darstellen des Dialog Felds veranschaulicht. Im Beispiel werden die Eigenschaften <xref:System.Windows.Forms.FileDialog.Filter%2A> und <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> verwendet, um eine Liste der Filter für den Benutzer bereitzustellen. Für das Beispiel muss ein Formular mit einer <xref:System.Windows.Forms.Button> platziert werden, und der <xref:System.IO>-Namespace hinzugefügt.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Das <paramref name="Filter" />-Format ist ungültig.</exception>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="FilterIndex">
      <MemberSignature Language="C#" Value="public int FilterIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FilterIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FilterIndex : int with get, set" Usage="System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Index des derzeit im Dateidialogfeld ausgewählten Filters ab oder legt diesen Index fest.</summary>
        <value>Ein Wert, der den Index des derzeit im Dateidialogfeld ausgewählten Filters enthält. Der Standardwert lautet 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Windows.Forms.FileDialog.FilterIndex%2A>-Eigenschaft, um festzulegen, welche Filteroption zuerst dem Benutzer angezeigt wird. Sie können auch den Wert <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> verwenden, nachdem Sie das Datei Dialogfeld angezeigt haben, um je nach ausgewähltem Filter spezielle Datei Vorgänge auszuführen.  
  
> [!NOTE]
>  Der Indexwert des ersten Filter Eintrags ist 1.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.OpenFileDialog> Implementierung von <xref:System.Windows.Forms.FileDialog> verwendet und das Erstellen, Festlegen von Eigenschaften und das darstellen des Dialog Felds veranschaulicht. Im Beispiel werden die Eigenschaften <xref:System.Windows.Forms.FileDialog.Filter%2A> und <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> verwendet, um eine Liste der Filter für den Benutzer bereitzustellen. Für das Beispiel muss ein Formular mit einer <xref:System.Windows.Forms.Button> platziert werden, und der <xref:System.IO>-Namespace hinzugefügt.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="HookProc">
      <MemberSignature Language="C#" Value="protected override IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int HookProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HookProc (hWnd As IntPtr, msg As Integer, wparam As IntPtr, lparam As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="F#" Value="override this.HookProc : nativeint * int * nativeint * nativeint -&gt; nativeint" Usage="fileDialog.HookProc (hWnd, msg, wparam, lparam)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">Das Handle für das Dialogfeldfenster.</param>
        <param name="msg">Die vom Dialogfeld empfangene Meldung.</param>
        <param name="wparam">Zusätzliche Informationen zur Meldung.</param>
        <param name="lparam">Zusätzliche Informationen zur Meldung.</param>
        <summary>Definiert die Hookprozedur für Standarddialogfelder, die überschrieben wird, um dem Dateidialogfeld spezifische Funktionen hinzuzufügen.</summary>
        <returns>Gibt 0 (null) zurück, wenn die Meldung von der Prozedur für Standarddialogfelder verarbeitet wird. Gibt einen Wert ungleich 0 (null) zurück, wenn die Meldung von dieser Prozedur ignoriert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Hook-Prozedur ermöglicht dem Benutzer das Verbinden oder Einfügen anderer Routinen in eine Routine oder Anwendung, um die Funktionalität zu debuggen oder zu verbessern.  
  
 Standardmäßig wird das Dialogfeld auf dem Bildschirm durch die Hook-Prozedur als Reaktion auf eine WM_INITDIALOG Meldung zentriert.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> in einer abgeleiteten Klasse überschreiben, stellen Sie sicher, dass Sie die <see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />-Methode der Basisklasse aufzurufen.</para></block>
      </Docs>
    </Member>
    <Member MemberName="InitialDirectory">
      <MemberSignature Language="C#" Value="public string InitialDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InitialDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InitialDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InitialDirectory : string with get, set" Usage="System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Ausgangsverzeichnis ab, das im Dateidialogfeld angezeigt wird, oder legt dieses fest.</summary>
        <value>Das Ausgangsverzeichnis, das im Dateidialogfeld angezeigt wird. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A>-Eigenschaft wird in der Regel mit einer der folgenden Quellen festgelegt:  
  
-   Ein Pfad, der zuvor im Programm verwendet wurde, möglicherweise aus dem letzten Verzeichnis oder Datei Vorgang beibehalten.  
  
-   Ein aus einer permanenten Quelle gelesener Pfad, z. b. eine Anwendungs Einstellung, eine <xref:Microsoft.Win32.Registry> oder eine Zeichen folgen Ressource in der Anwendung.  
  
-   Standard mäßige Windows-System-und Benutzer Pfade, wie z. b. Programme, MyDocuments, MyMusic usw. (die Sie mit der <xref:System.Environment.GetFolderPath%2A>-Methode abrufen können)  
  
-   Ein Pfad, der mit der aktuellen Anwendung verknüpft ist, z. b. das Start Verzeichnis (das Sie mithilfe der Eigenschaften des <xref:System.Windows.Forms.Application> Objekts abrufen können).  
  
 Weitere Informationen zum Erstellen dynamischer Pfade finden Sie in der Übersicht über <xref:System.Windows.Forms.FileDialog>-Klasse.  
  
 Wenn <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> auf [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]auf einen vollständigen Dateinamen anstatt auf einen Verzeichnispfad festgelegt ist, wird als Ausgangs Verzeichnis entweder der Anwendungspfad oder das Verzeichnis verwendet, von dem aus der Benutzer zuletzt eine Datei ausgewählt hat.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.OpenFileDialog> Implementierung von <xref:System.Windows.Forms.FileDialog> verwendet und das Erstellen, Festlegen von Eigenschaften und das darstellen des Dialog Felds veranschaulicht. Im Beispiel wird die <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A>-Eigenschaft verwendet, um das Ausgangs Verzeichnis festzulegen, wenn dem Benutzer das Dialogfeld angezeigt wird. Für das Beispiel muss ein Formular mit einer <xref:System.Windows.Forms.Button> platziert werden, und der <xref:System.IO>-Namespace hinzugefügt.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
        <altmember cref="T:Microsoft.Win32.Registry" />
        <altmember cref="T:System.Windows.Forms.Application" />
        <altmember cref="T:System.Environment" />
        <altmember cref="T:System.IO.Path" />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="protected virtual IntPtr Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Instance" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Instance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Instance As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr Instance { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Instance : nativeint" Usage="System.Windows.Forms.FileDialog.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Win32-Instanzhandle für die Anwendung ab.</summary>
        <value>Ein Win32-Instanzhandle für die Anwendung.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFileOk">
      <MemberSignature Language="C#" Value="protected void OnFileOk (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnFileOk(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnFileOk (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnFileOk(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnFileOk : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="fileDialog.OnFileOk e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.ComponentModel.CancelEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das Ereignis <see cref="E:System.Windows.Forms.FileDialog.FileOk" /> aus.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.FileDialog.FileOk" />
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="protected int Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Options" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Options" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Options As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int Options { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : int" Usage="System.Windows.Forms.FileDialog.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft Werte für die Initialisierung von <see cref="T:System.Windows.Forms.FileDialog" /> ab.</summary>
        <value>Eine bitweise Kombination von internen Werten, die das <see cref="T:System.Windows.Forms.FileDialog" /> initialisiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.FileDialog.Options%2A>-Eigenschaft entspricht den Flags, die zum Initialisieren eines Datei Dialogfelds mit Win32 verwendet werden. Verwenden Sie die Eigenschaften der <xref:System.Windows.Forms.FileDialog>-Klasse, um die Optionen zu erhalten und festzulegen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="fileDialog.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt alle Eigenschaften auf die Standardwerte zurück.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Windows.Forms.FileDialog.Reset" /> in einer abgeleiteten Klasse überschreiben, stellen Sie sicher, dass Sie die <see cref="M:System.Windows.Forms.CommonDialog.Reset" />-Methode der Basisklasse aufzurufen.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RestoreDirectory">
      <MemberSignature Language="C#" Value="public bool RestoreDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RestoreDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property RestoreDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RestoreDirectory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RestoreDirectory : bool with get, set" Usage="System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt diesen fest, der angibt, ob das Dialogfeld das Verzeichnis im zuvor ausgewählten Verzeichnis vor dem Schließen wiederherstellt.</summary>
        <value><see langword="true" />, wenn das Dialogfeld das aktuelle Verzeichnis im zuvor ausgewählten Verzeichnis wiederherstellt, wenn der Benutzer bei der Suche nach Dateien das Verzeichnis gewechselt hat, andernfalls <see langword="false" />. Standardwert: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.OpenFileDialog> Implementierung von <xref:System.Windows.Forms.FileDialog> verwendet und das Erstellen, Festlegen von Eigenschaften und das darstellen des Dialog Felds veranschaulicht. Im Beispiel wird die <xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A>-Eigenschaft verwendet, um sicherzustellen, dass das zuvor ausgewählte Verzeichnis wieder hergestellt wird, wenn das Dialogfeld geschlossen wird. Für das Beispiel muss ein Formular mit einer <xref:System.Windows.Forms.Button> platziert werden, und der <xref:System.IO>-Namespace hinzugefügt.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected override bool RunDialog (IntPtr hWndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool RunDialog(native int hWndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RunDialog (hWndOwner As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool RunDialog(IntPtr hWndOwner);" />
      <MemberSignature Language="F#" Value="override this.RunDialog : nativeint -&gt; bool" Usage="fileDialog.RunDialog hWndOwner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWndOwner">Ein Wert, der das Fensterhandle des Besitzerfensters für das allgemeine Dialogfeld darstellt.</param>
        <summary>Gibt ein Standarddialogfeld an.</summary>
        <returns><see langword="true" />, wenn die Datei geöffnet werden konnte, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode stellt eine Implementierung von <xref:System.Windows.Forms.CommonDialog.RunDialog%2A>bereit und wird aufgerufen, wenn der Benutzer eines Datei Dialogfelds <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>aufruft.  
  
 In den abgeleiteten Klassen <xref:System.Windows.Forms.OpenFileDialog> und <xref:System.Windows.Forms.SaveFileDialog> ein ungültiger Dateiname <xref:System.Exception> der ausgelöst werden kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowHelp">
      <MemberSignature Language="C#" Value="public bool ShowHelp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHelp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowHelp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowHelp { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowHelp : bool with get, set" Usage="System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob im Dateidialogfeld die Schaltfläche **Hilfe** angezeigt wird, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn das Dialogfeld die Schaltfläche Hilfe enthält, andernfalls <see langword="false" />. Standardwert: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.Control.HelpRequested> Ereignis wird ausgelöst, wenn der Benutzer auf die Schaltfläche **Hilfe** klickt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportMultiDottedExtensions">
      <MemberSignature Language="C#" Value="public bool SupportMultiDottedExtensions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportMultiDottedExtensions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportMultiDottedExtensions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportMultiDottedExtensions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SupportMultiDottedExtensions : bool with get, set" Usage="System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob das Dialogfeld Anzeige und Speichern von Dateien mit mehreren Dateinamenerweiterungen unterstützt.</summary>
        <value><see langword="true" />, wenn das Dialogfeld mehrere Dateinamenerweiterungen unterstützt; andernfalls <see langword="false" />. Der Standardwert lautet <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Manchmal müssen Benutzer Dateien öffnen und speichern, in denen mehrere Dateinamen Erweiterungen verwendet werden. Beispielsweise enden die Anwendungs Manifest-Dateien, die von der [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Bereitstellungs Technologie verwendet werden, mit der komplexen Dateinamenerweiterung ". exe. Manifest". Wenn diese Eigenschaft auf `true` festgelegt wird, können Sie die <xref:System.Windows.Forms.FileDialog.Filter%2A>-Eigenschaft auf eine multipunktierte Erweiterung festlegen.  
  
 Wenn <xref:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions%2A> `false`ist und Sie <xref:System.Windows.Forms.FileDialog.Filter%2A>eine Erweiterung mit mehreren Punkten zuweisen, verwenden abgeleitete Steuerelemente wie <xref:System.Windows.Forms.SaveFileDialog> nur die letzte Erweiterung in der Zeichenfolge. Beispielsweise wird ". Manifest" anstelle von ". exe. Manifest" verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden Dateien mit der Erweiterung ". Data. txt" gespeichert. Dieses Codebeispiel setzt voraus, dass Ihre Anwendung eine <xref:System.Windows.Forms.SaveFileDialog> mit dem Namen `saveFileDialog1` und eine <xref:System.Windows.Forms.Button> namens `button1`hostet.  
  
 [!code-csharp[SupportMultiDottedExtensions#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SupportMultiDottedExtensions/CS/Form1.cs#1)]
 [!code-vb[SupportMultiDottedExtensions#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SupportMultiDottedExtensions/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Forms.FileDialog.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Titel des Dateidialogfelds ab oder legt diesen fest.</summary>
        <value>Der Titel des Dateidialogfelds. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Zeichenfolge wird in der Titelleiste des Dialog Felds platziert. Wenn der Titel eine leere Zeichenfolge ist, verwendet das System einen Standard Titel ("Speichern unter" oder "Öffnen").  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Initialisierung eines <xref:System.Windows.Forms.OpenFileDialog>, das Festlegen der Eigenschaften <xref:System.Windows.Forms.FileDialog.Title%2A> und <xref:System.Windows.Forms.FileDialog.Filter%2A> und das Auswählen mehrerer Dateien durch Festlegen der <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A?displayProperty=nameWithType>-Eigenschaft auf true. Fügen Sie zum Ausführen dieses Beispiels den folgenden Code in ein Formular ein, das eine <xref:System.Windows.Forms.OpenFileDialog> mit dem Namen `OpenFileDialog1` und eine <xref:System.Windows.Forms.Button> namens `fileButton`enthält. Ruft die `InitializeOpenFileDialog`-Methode im Konstruktor des Formulars oder `Load` Methode auf. Das Beispiel setzt auch voraus, dass das `Click`-Ereignis des `Button`-Steuer Elements mit dem im Beispiel definierten Ereignishandler verbunden ist.  
  
 [!code-cpp[System.Windows.Forms.FileDialog#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#6)]
 [!code-csharp[System.Windows.Forms.FileDialog#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#6)]
 [!code-vb[System.Windows.Forms.FileDialog#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="fileDialog.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stellt eine Zeichenfolgenversion dieses Objekts bereit.</summary>
        <returns>Eine Zeichenfolgendarstellung dieses Objekts.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateNames">
      <MemberSignature Language="C#" Value="public bool ValidateNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateNames As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateNames { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateNames : bool with get, set" Usage="System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Dialogfeld nur gültige Win32-Dateinamen akzeptiert, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn das Dialogfeld nur gültige Win32-Dateinamen akzeptiert, andernfalls <see langword="false" />. Standardwert: <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das Bearbeitungs Steuerelement nur Leerzeichen enthält, wenn der Benutzer auf **OK**klickt, wird der Dateiname im Dialogfeld zurückgegeben, unabhängig davon, ob er gültig ist. Dem Text wird keine Standard Erweiterung hinzugefügt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="HtmlDocument" FullName="System.Windows.Forms.HtmlDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b9d07d9e0d27c2aad3809b1fb968030670cb0d64" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86702379" /></Metadata><TypeSignature Language="C#" Value="public sealed class HtmlDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlDocument extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlDocument" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlDocument sealed" />
  <TypeSignature Language="F#" Value="type HtmlDocument = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht programmgesteuerten Zugriff auf ein vom <see cref="T:System.Windows.Forms.WebBrowser" />-Steuerelement gehostetes HTML-Dokument auf der obersten Ebene.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument> stellt einen verwalteten Wrapper für das Dokument Objekt von Internet Explorer bereit, das auch als HTML-Dokumentobjektmodell (DOM) bezeichnet wird. Sie erhalten eine Instanz von <xref:System.Windows.Forms.HtmlDocument> über die- <xref:System.Windows.Forms.WebBrowser.Document%2A> Eigenschaft des- <xref:System.Windows.Forms.WebBrowser> Steuer Elements.  
  
 HTML-Tags innerhalb eines HTML-Dokuments können in einander geschachtelt werden. <xref:System.Windows.Forms.HtmlDocument> stellt daher eine Dokumentstruktur dar, deren untergeordnete Elemente Instanzen der- <xref:System.Windows.Forms.HtmlElement> Klasse sind. Das folgende Codebeispiel zeigt eine einfache HTML-Datei.  
  
```  
<HTML>  
    <BODY>  
        <DIV name="Span1">Simple HTML Form</DIV>  
        <FORM>  
            <SPAN name="TextLabel">Enter Your Name:</SPAN>  
            <INPUT type="text" size="20" name="Text1">  
        </FORM>  
    </BODY>  
</HTML>  
```  
  
 In diesem Beispiel <xref:System.Windows.Forms.HtmlDocument> stellt das gesamte Dokument innerhalb der `HTML` Tags dar. Die `BODY` `DIV` Tags, `FORM` und `SPAN` werden von einzelnen- <xref:System.Windows.Forms.HtmlElement> Objekten dargestellt.  
  
 Es gibt mehrere Möglichkeiten, auf die Elemente in dieser Struktur zuzugreifen. Verwenden <xref:System.Windows.Forms.HtmlDocument.Body%2A> Sie die-Eigenschaft, um auf das `BODY` -Tag und alle untergeordneten Elemente zuzugreifen. Die- <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> Eigenschaft gibt Ihnen die <xref:System.Windows.Forms.HtmlElement> für das-Element auf einer HTML-Seite, die den Benutzereingabe Fokus besitzt. Alle Elemente in einer HTML-Seite können einen Namen haben. die-Auflistung <xref:System.Windows.Forms.HtmlDocument.All%2A> ermöglicht den Zugriff auf jede <xref:System.Windows.Forms.HtmlElement> mithilfe Ihres Namens als Index. <xref:System.Windows.Forms.HtmlDocument.GetElementsByTagName%2A> gibt eine <xref:System.Windows.Forms.HtmlElementCollection> von allen- <xref:System.Windows.Forms.HtmlElement> Objekten mit einem angegebenen HTML-Tagnamen zurück, `DIV` z `TABLE` . b. oder. <xref:System.Windows.Forms.HtmlDocument.GetElementById%2A> Gibt den einzelnen zurück <xref:System.Windows.Forms.HtmlElement> , der der eindeutigen ID entspricht, die Sie angeben. <xref:System.Windows.Forms.HtmlDocument.GetElementFromPoint%2A> Gibt die zurück <xref:System.Windows.Forms.HtmlElement> , die auf dem Bildschirm an den angegebenen Mauszeiger Koordinaten gefunden werden kann.  
  
 Sie können auch die-Auflistung und die-Auflistung verwenden, <xref:System.Windows.Forms.HtmlDocument.Forms%2A> <xref:System.Windows.Forms.HtmlDocument.Images%2A> um Elemente zu durchlaufen, die Benutzereingabe Formulare bzw. Grafiken darstellen.  
  
 <xref:System.Windows.Forms.HtmlDocument> basiert auf den nicht verwalteten Schnittstellen, die vom DHTML-DOM von Internet Explorer implementiert `IHTMLDocument` werden:, `IHTMLDocument2` , `IHTMLDocument3` und `IHTMLDocument4` . Nur die am häufigsten verwendeten Eigenschaften und Methoden für diese nicht verwalteten Schnittstellen werden von verfügbar gemacht <xref:System.Windows.Forms.HtmlDocument> . Sie können auf alle anderen Eigenschaften und Methoden direkt mithilfe der- <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> Eigenschaft zugreifen, die Sie in den gewünschten nicht verwalteten Schnittstellen Zeiger umwandeln können.  
  
 Ein HTML-Dokument kann Frames enthalten, bei denen es sich um unterschiedliche Fenster im-Steuerelement handelt <xref:System.Windows.Forms.WebBrowser> . Jeder Frame zeigt seine eigene HTML-Seite an. Die-Auflistung <xref:System.Windows.Forms.HtmlWindow.Frames%2A> ist über die- <xref:System.Windows.Forms.HtmlDocument.Window%2A> Eigenschaft verfügbar. Sie können auch die- <xref:System.Windows.Forms.HtmlDocument.Window%2A> Eigenschaft verwenden, um die Größe der angezeigten Seite zu ändern, einen Bildlauf im Dokument durchführen oder Warnungen und Aufforderungen für den Benutzer anzuzeigen.  
  
 <xref:System.Windows.Forms.HtmlDocument> macht die am häufigsten vorkommenden Ereignisse verfügbar, die beim Hosting von HTML-Seiten zu behandeln sind. Für Ereignisse, die nicht direkt von der-Schnittstelle verfügbar gemacht werden, können Sie mithilfe von einen Handler für das Ereignis hinzufügen <xref:System.Windows.Forms.HtmlDocument.AttachEventHandler%2A> .  
  
 HTML-Dateien können `SCRIPT` Tags enthalten, die in einer der aktiven Skriptsprachen (z. b. JScript oder VBScript) geschriebene Code kapseln. Die- <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> Methode stellt die Ausführung von Eigenschaften und Methoden bereit, die in einem Tag definiert sind `SCRIPT` .  
  
> [!NOTE]
>  Während die meisten Eigenschaften, Methoden und Ereignisse in <xref:System.Windows.Forms.HtmlDocument> die gleichen Namen wie im nicht verwalteten Dom behalten, wurden einige für die Konsistenz mit geändert [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] .  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden Daten aus der Northwind-Datenbank verwendet, um dynamisch mithilfe von zu erstellen `HTML TABLE` <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> . Die- <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> Methode wird auch verwendet, um zuerst Zellen (Elemente `TD` ) zu Zeilen ( `TR` Elementen) hinzuzufügen, dann Zeilen zur Tabelle hinzuzufügen und schließlich die Tabelle am Ende des aktuellen Dokuments anzufügen. Das Codebeispiel erfordert, dass Ihre Anwendung über ein-Steuerelement mit dem <xref:System.Windows.Forms.WebBrowser> Namen verfügt `WebBrowser1` . Der Code sollte aufgerufen werden, nachdem ein Dokument geladen wurde.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#10)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://developer.mozilla.org/docs/Web/API/Document">Dokument-Web-APIs</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752574(v=vs.85)">IHTMLDocument2-Schnittstelle</related>
  </Docs>
  <Members>
    <Member MemberName="ActiveElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement ActiveElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement ActiveElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ActiveElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActiveElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ ActiveElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ActiveElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlDocument.ActiveElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enthält das <see cref="T:System.Windows.Forms.HtmlElement" />, das momentan den Benutzereingabefokus besitzt.</summary>
        <value>Das <see cref="T:System.Windows.Forms.HtmlElement" />, das momentan den Benutzereingabefokus besitzt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das Dokument den Fokus besitzt, aber kein Element des Dokuments den Fokus erhält, <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> gibt das-Element zurück, das dem- `<BODY>` Tag entspricht.  
  
 Wenn das Dokument keinen Fokus hat, wird <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> zurückgegeben `null` .  
  
 Wenn das aktuelle Element mit dem Eingabefokus eine Zelle ( `TD` ) in einem HTML- `TABLE` Tag ist, <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> gibt das-Element zurück, das das `TABLE` Element enthält.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752581(v=vs.85)">activeElement (Eigenschaft)</related>
      </Docs>
    </Member>
    <Member MemberName="ActiveLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ActiveLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ActiveLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ActiveLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ActiveLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ActiveLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ActiveLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.ActiveLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Drawing.Color" /> eines Links ab, wenn ein Benutzer darauf klickt, oder legt diese fest.</summary>
        <value>Die <see cref="T:System.Drawing.Color" /> für aktive Links.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Link ist aktiv, wenn ein Benutzer darauf klickt. Ändern Sie diese Eigenschaft, um die Farbe des Links vor der Navigation zu ändern.  
  
 Der- <xref:System.Drawing.Color> Typ in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] unterstützt einen- `Alpha` Wert, das HTML-DOM jedoch nicht. Daher `Alpha` hat keine Auswirkung, wenn diese Eigenschaft zugewiesen wird.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752564.aspx">alinkColor (Eigenschaft)</related>
      </Docs>
    </Member>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection All { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection All" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.All" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property All As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ All { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.All : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.All" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Instanz von <see cref="T:System.Windows.Forms.HtmlElementCollection" /> ab, die alle <see cref="T:System.Windows.Forms.HtmlElement" />-Objekte für das Dokument speichert.</summary>
        <value>Die <see cref="T:System.Windows.Forms.HtmlElementCollection" /> aller Elemente im Dokument.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die-Auflistung <xref:System.Windows.Forms.HtmlDocument.All%2A> ermöglicht den zufälligen Zugriff auf jedes Element im HTML-Dokument, unabhängig von der Position in der Dokumentstruktur. Verwenden Sie ihn, um auf jedes Element in einem HTML-Dokument anhand des Namens, der ID oder des Indexes zuzugreifen. Sie können auch alle Elemente in einem Dokument durchlaufen.  
  
 Einigen Elementen, z. b. `HEAD` und `TITLE` , werden niemals Namen zugeordnet. Alle anderen Elemente haben nur dann Namen, wenn Sie dem Autor der HTML-Datei zugewiesen wurden. Sie können auf Elemente ohne Namen über die ID oder den Index zugreifen.  
  
 Sie können der Auflistung keine Elemente direkt hinzufügen <xref:System.Windows.Forms.HtmlDocument.All%2A> , da alle Elemente in einer HTML-Datei außerhalb des `HTML` Tags über ein übergeordnetes Element verfügen müssen. Verwenden Sie die- <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> Methode oder die- <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> Eigenschaft von <xref:System.Windows.Forms.HtmlElement> , um der Struktur neue Elemente hinzuzufügen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden alle Elemente in einem Dokument durchlaufen `Enabled=True` , und es werden alle Elemente aktiviert, die möglicherweise standardmäßig deaktiviert wurden, um Benutzereingaben beim Laden des Dokuments zu verhindern. Das Codebeispiel erfordert, dass die Anwendung ein-Steuerelement mit dem <xref:System.Windows.Forms.WebBrowser> Namen enthält `WebBrowser1` .  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752582.aspx">All (Eigenschaft)</related>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachEventHandler (eventName As String, eventHandler As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlDocument.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Der Name des zu behandelnden Ereignisses.</param>
        <param name="eventHandler">Der verwaltete Code, der das Ereignis behandelt.</param>
        <summary>Fügt einen Ereignishandler für das benannte HTML-DOM-Ereignis hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie sollten erst ein Ereignis an das Dokument oder eines seiner Objekte anfügen, wenn das Laden des Dokuments abgeschlossen ist. Das früheste, dass Sie diese Methode im-Ereignis des-Steuer Elements aufzurufen <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> <xref:System.Windows.Forms.WebBrowser> .  
  
 Diese Methode ermöglicht das Anfügen von Handlern an nicht verwaltete DOM-Ereignisse, die nicht von verfügbar gemacht werden <xref:System.Windows.Forms.HtmlDocument> . Weitere Informationen zu verfügbaren nicht verwalteten DOM-Ereignissen finden Sie unter [zugreifen auf nicht verfügbar gemachte Member in der verwalteten HTML-Dokumentobjektmodell](/dotnet/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model) und IHTMLDocument-Schnittstellen: [IHTMLDocument](https://go.microsoft.com/fwlink/?LinkId=104882), [IHTMLDocument2](https://go.microsoft.com/fwlink/?LinkId=104884), [IHTMLDocument3](https://go.microsoft.com/fwlink/?LinkId=104886), [IHTMLDocument4](https://go.microsoft.com/fwlink/?LinkId=104887), [IHTMLDocument5](https://go.microsoft.com/fwlink/?LinkId=104888).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752535.aspx">AttachEvent-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Hintergrundfarbe des HTML-Dokuments ab oder legt diese fest.</summary>
        <value>Die <see cref="T:System.Drawing.Color" /> des Hintergrunds des Dokuments.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.BackColor%2A> wird angezeigt, wenn kein anderes Element diesen Bereich des Bildschirms einnimmt.  
  
 Der- <xref:System.Drawing.Color> Typ in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] unterstützt einen- `Alpha` Wert, das HTML-DOM jedoch nicht. Daher `Alpha` hat keine Auswirkung, wenn diese Eigenschaft zugewiesen wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
        <related type="Article" href="https://msdn.microsoft.com/library/aa752565.aspx">BgColor-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement Body { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement Body" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Body" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Body As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ Body { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Body : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlDocument.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Windows.Forms.HtmlElement" /> für das <c>BODY</c>-Tag ab.</summary>
        <value>Das- <see cref="T:System.Windows.Forms.HtmlElement" /> Objekt für das <c>Body</c> -Tag.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein HTML-Dokument ist in zwei Hauptabschnitte unterteilt:  
  
-   `HEAD`, der den Titel des Dokuments, alle Dokument Metadaten und- `SCRIPT` Elemente enthält.  
  
-   `BODY`, der alle Elemente enthält, die an der Bildschirmdarstellung des Dokuments beteiligt sind.  
  
 Es ist keine äquivalente `Head` Eigenschaft für vorhanden <xref:System.Windows.Forms.HtmlDocument> . Verwenden Sie zum Abrufen des- `HEAD` Elements <xref:System.Windows.Forms.HtmlDocument.GetElementsByTagName%2A> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein neues `DIV` -Element erstellt und mithilfe der-Methode an den Ende des Dokuments angehängt <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> .  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlDocument#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752585.aspx">Body-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Click : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer auf eine beliebige Stelle im Dokument klickt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein Klick auf das Dokument erkannt, das-Element gefunden und verwendet, <xref:System.Windows.Forms.HtmlElement.ScrollIntoView%2A> um das Element am oberen Rand der Webseite auszurichten.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752611.aspx">OnClick-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuShowing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler ContextMenuShowing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler ContextMenuShowing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.ContextMenuShowing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuShowing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ ContextMenuShowing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuShowing : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.ContextMenuShowing : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer die Anzeige des Kontextmenüs des Dokuments anfordert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie mit der rechten Maustaste auf ein Dokument oder ein Element in einem Dokument klicken, wird standardmäßig ein Standardkontext Menü angezeigt, das speziell für das Element gilt. Verwenden Sie dieses Ereignis, um die Anzeige des Kontextmenüs abzubrechen und eine ihrer eigenen anzuzeigen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das <xref:System.Windows.Forms.HtmlDocument.ContextMenuShowing> -Ereignis erfasst und zum Anzeigen einer verwendet <xref:System.Windows.Forms.ContextMenuStrip> .  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://developer.mozilla.org/en-us/docs/web/api/element/contextmenu_event">oncontextmenu-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="Cookie">
      <MemberSignature Language="C#" Value="public string Cookie { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Cookie" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Cookie" />
      <MemberSignature Language="VB.NET" Value="Public Property Cookie As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Cookie { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cookie : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Cookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die diesem Dokument zugeordneten HTTP-Cookies ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.String" />, die eine durch Semikolons getrennte Liste mit einzelnen Cookies enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> Eigenschaft von macht alle Cookies verfügbar, die <xref:System.Windows.Forms.HtmlDocument> für eine Webseite festgelegt sind.  
  
 Ein *Cookie* ist ein beliebiges Name/Wert-Paar, das einer bestimmten Webseite zugeordnet ist. Webentwickler verwenden Cookies, um zu verfolgen, wann Benutzer eine Website besuchen oder zu einer Website zurückkehren. Ein Cookie besteht aus mehreren Teilen, die als Cookie-Krümel bezeichnet werden und Folgendes bestimmen:  
  
-   Der Dokumentsatz, für den das Cookie gilt. die Domäne und der Pfad.  
  
-   Der Name und der Wert des Cookies.  
  
-   Das Ablaufdatum des Cookies.  
  
-   Gibt an, ob das Cookie nur über eine sichere Verbindung gesendet werden kann.  
  
 Die- <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> Eigenschaft kann mehrere Cookies enthalten.  
  
 Sie können nur die- <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> Eigenschaft verwenden, um ein Cookie gleichzeitig festzulegen.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752569.aspx">Cookie-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement CreateElement (string elementTag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement CreateElement(string elementTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateElement (elementTag As String) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ CreateElement(System::String ^ elementTag);" />
      <MemberSignature Language="F#" Value="member this.CreateElement : string -&gt; System.Windows.Forms.HtmlElement" Usage="htmlDocument.CreateElement elementTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementTag">Der Name des zu erstellenden HTML-Elements.</param>
        <summary>Erstellt ein neues <see langword="HtmlElement" /> mit dem angegebenen HTML-Tagtyp.</summary>
        <returns>Ein neues Element vom angegebenen Tagtyp.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `elementTag` kann eines der unterstützten HTML-Tags in Internet Explorer sein, mit Ausnahme von `FRAME` oder `IFRAME` .  
  
 <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> Gibt ein Element zurück, das der aktuellen Dokumentstruktur nicht angefügt ist. Um dem Dokument das-Element hinzuzufügen, verwenden Sie entweder die- <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> Methode oder die- <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> Methode.  
  
 Diese Methode wirkt sich nicht auf den Status des Quellcodes eines vorhandenen Dokuments aus, wenn Sie den <xref:System.Windows.Forms.WebBrowser> Menübefehl **Quell** Kontextmenü des Steuer Elements oder die-Eigenschaft und die-Eigenschaft <xref:System.Windows.Forms.WebBrowser.DocumentText%2A> des-Steuer Elements verwenden <xref:System.Windows.Forms.WebBrowser.DocumentStream%2A> <xref:System.Windows.Forms.WebBrowser> .  
  
 Wenn Sie neue Elemente mit erstellen <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> , können Sie bestimmte Eigenschaften, z. b., nicht festlegen `Name` . In Fällen, in denen Sie das Name-Attribut festlegen müssen, weisen Sie Sie der- <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> Eigenschaft eines anderen Objekts im Dokument als HTML-Code zu.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden Daten aus der Northwind-Datenbank verwendet, um eine HTML-Tabelle mithilfe von zu erstellen <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> . Die- <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> Methode wird auch verwendet, um zuerst Zellen (Elemente `TD` ) zu Zeilen ( `TR` Elementen) hinzuzufügen, dann Zeilen zur Tabelle hinzuzufügen und schließlich die Tabelle am Ende des aktuellen Dokuments anzufügen. Das Codebeispiel erfordert, dass Ihre Anwendung über ein-Steuerelement mit dem <xref:System.Windows.Forms.WebBrowser> Namen verfügt `WebBrowser1` .  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752570.aspx">createElement-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultEncoding">
      <MemberSignature Language="C#" Value="public string DefaultEncoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.DefaultEncoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultEncoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultEncoding { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultEncoding : string" Usage="System.Windows.Forms.HtmlDocument.DefaultEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die für das aktuelle Dokument verwendete Standardcodierung ab.</summary>
        <value>Die <see cref="T:System.String" />, die die Codierung darstellt, die vom Browser beim ersten Anzeigen einer Seite verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Codierung ist die Codierung, die vom verwalteten HTML-Dokumentobjektmodell (DOM) beim ersten Laden der Seite verwendet werden soll. Diese Codierung wird entweder aus den **Codierungs** Einstellungen von Internet Explorer oder aus einem `META` in der Seite eingebetteten Tag abgeleitet.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://developer.mozilla.org/en-us/docs/web/api/document">defaultCharset (Eigenschaft)</related>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetachEventHandler (eventName As String, eventHandler As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlDocument.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Der Name des Ereignisses, dessen Behandlung beendet werden soll.</param>
        <param name="eventHandler">Der verwaltete Code, der das Ereignis behandelt.</param>
        <summary>Entfernt einen Ereignishandler aus einem benannten Ereignis im HTML-DOM.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752539.aspx">DetachEvent-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public string Domain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Domain { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die aus Sicherheitsgründen die Domäne dieses Dokuments beschreibt, oder legt diese fest.</summary>
        <value>Eine gültige Domäne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig werden zwei Webseiten in unterschiedlichen Frames daran gehindert, mithilfe eines Skripts auf die Inhalte der anderen zuzugreifen. auch `www.microsoft.com` und `docs.microsoft.com` sind in dieser Instanz als unterschiedliche Domänen. Um die Frame übergreifende Skripterstellung für Seiten aus derselben Domäne der obersten Ebene zu aktivieren, können Sie der Eigenschaft einen neuen Wert zuweisen <xref:System.Windows.Forms.HtmlDocument.Domain%2A> . Im vorherigen URL-Beispiel kann <xref:System.Windows.Forms.HtmlDocument.Domain%2A> durch Festlegen von auf Microsoft.com beide Seiten miteinander kommunizieren.  
  
 Zeichen folgen, die der-Eigenschaft zugewiesen sind, <xref:System.Windows.Forms.HtmlDocument.Domain%2A> müssen gültige Domänen der obersten Ebene sein. Im vorherigen URL-Beispiel können Sie <xref:System.Windows.Forms.HtmlDocument.Domain%2A> auf Microsoft.com, aber nicht auf. com festlegen, wodurch jede Seite im Internet das Skript für den Inhalt einer Seite erstellen würde.  
  
 Sie können die <xref:System.Windows.Forms.HtmlDocument.Domain%2A> -Eigenschaft nicht verwenden, um Frame übergreifende Skripts für Seiten zu aktivieren, auf die mit zwei verschiedenen Protokollen zugegriffen wird. Wenn ein Frame auf der Seite von einem Webserver (das http://-Protokoll) und ein weiterer Frame aus dem Dateisystem (das file://-Protokoll) stammt, können Sie unabhängig vom Wert der-Eigenschaft nicht miteinander kommunizieren <xref:System.Windows.Forms.HtmlDocument.Domain%2A> .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Das Argument für die <c>Domain</c>-Eigenschaft muss ein gültiger Domänenname entsprechend den DNS (Domain Name System)-Konventionen sein.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752575(v=vs.85)">Domänen Eigenschaft</related>
        <related type="Article" href="https://developer.mozilla.org/en-us/docs/web/html/element/frame">Frame-Objekt</related>
      </Docs>
    </Member>
    <Member MemberName="DomDocument">
      <MemberSignature Language="C#" Value="public object DomDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomDocument" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.DomDocument" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomDocument As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomDocument { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomDocument : obj" Usage="System.Windows.Forms.HtmlDocument.DomDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den nicht verwalteten Schnittstellenzeiger für dieses <see cref="T:System.Windows.Forms.HtmlDocument" /> ab.</summary>
        <value>Ein <see cref="T:System.Object" /> , der einen <c>IDispatch</c> -Zeiger auf das nicht verwaltete Dokument darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument> ist ein Wrapper für das Internet Explorer-Dokumentobjektmodell (DOM), das in com geschrieben ist. Wenn Sie auf nicht verfügbar gemachte Eigenschaften oder Methoden auf den zugrunde liegenden COM-Schnittstellen zugreifen müssen, z `IHTMLDocument2` . b., können Sie dieses Objekt verwenden, um Sie abzufragen.  
  
 Importieren Sie die MSHTML-Bibliothek (mshtml.dll) in Ihre Anwendung, um die nicht verwalteten Schnittstellen zu verwenden. Sie können jedoch auch nicht verfügbar gemachte Eigenschaften und Methoden mithilfe der- `IDispatch::Invoke` Methode ausführen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> in einen `IHTMLDocument2` -Zeiger umgewandelt und der Wert der- `lastModified` Eigenschaft angezeigt, der angibt, wann der Besitzer des Dokuments seinen Inhalt zuletzt aktualisiert hat. Das Codebeispiel erfordert, dass Sie <xref:System.Windows.Forms.Button> über eine auf Ihrem Formular mit dem Namen verfügen `Button6` .  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlDocument#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752574(v=vs.85)">IHTMLDocument2-Schnittstelle</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=128638">MSHTML-Referenz</related>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public string Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Encoding { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichencodierung für das Dokument ab oder legt diese fest.</summary>
        <value>Die <see cref="T:System.String" />, die die aktuelle Zeichencodierung darstellt.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ms537500.aspx">Zeichensatz Erkennung</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752566.aspx">CharSet-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlDocument.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das zu überprüfende Objekt.</param>
        <summary>Überprüft das Objekt und das aktuelle Objekt auf Gleichheit.</summary>
        <returns><see langword="true" />, wenn die Objekte gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecCommand">
      <MemberSignature Language="C#" Value="public void ExecCommand (string command, bool showUI, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecCommand(string command, bool showUI, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.ExecCommand(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecCommand (command As String, showUI As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecCommand(System::String ^ command, bool showUI, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.ExecCommand : string * bool * obj -&gt; unit" Usage="htmlDocument.ExecCommand (command, showUI, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="command">Der Name des auszuführenden Befehls.</param>
        <param name="showUI">Bestimmt, ob dem Benutzer befehlsspezifische Dialogfelder oder befehlsspezifische Meldungsfelder angezeigt werden.</param>
        <param name="value">Der Wert, der mit dem Befehl zugewiesen werden soll. Gilt nicht für alle Befehle.</param>
        <summary>Führt den angegebenen Befehl für das Dokument aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A> macht ein großes Array von Befehlen verfügbar, für die keine Methoden verfügbar gemacht werden <xref:System.Windows.Forms.HtmlDocument> . Mithilfe <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A> von können Sie neue HTML-Elemente einfügen, Text auswählen und formatieren und alle zwischengespeicherten Anmelde Informationen für die Authentifizierung löschen. Eine vollständige Liste der Befehle finden Sie unter [Befehls](https://go.microsoft.com/fwlink/?LinkId=198814)Bezeichner.  
  
> [!NOTE]
>  Bestimmte Befehle, z. b. Copy, haben Rückgabewerte. In der aktuellen Implementierung von <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A> können Sie keinen Rückgabewert aus dem-Befehl abrufen. Wenn Sie Rückgabewerte abrufen möchten, verwenden Sie stattdessen die entsprechende nicht verwaltete Methode für einen <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> Verweis.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ms536419.aspx">ExecCommand-Methode</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=198814">Befehls Bezeichner</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlDocument.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Benutzereingabefokus auf das aktuelle Dokument fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch <xref:System.Windows.Forms.HtmlDocument.Focus%2A> das Aufrufen von wird der Fokus auf das Steuerelement festgelegt <xref:System.Windows.Forms.WebBrowser> , wenn das Steuerelement derzeit keinen Fokus hat. Wenn das Dokument in einem gehostet wird `FRAME` , legt diese Methode den Fokus darauf `FRAME` in `FRAMESET` .  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752527.aspx">Fokus Methode</related>
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public bool Focused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Focused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Focused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Focused : bool" Usage="System.Windows.Forms.HtmlDocument.Focused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Dokument den Benutzereingabefokus besitzt.</summary>
        <value><see langword="true" />, wenn das Dokument den Fokus besitzt, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.Focus" />
        <altmember cref="E:System.Windows.Forms.HtmlDocument.Focusing" />
        <altmember cref="E:System.Windows.Forms.HtmlDocument.LosingFocus" />
      </Docs>
    </Member>
    <Member MemberName="Focusing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Focusing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Focusing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Focusing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Focusing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Focusing;" />
      <MemberSignature Language="F#" Value="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, bevor das Dokument den Fokus erhält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlDocument.Focusing> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlDocument> Namen enthält `HtmlDocument1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlDocument.Focusing> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#424](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#424)]
 [!code-vb[System.Windows.Forms.EventExamples#424](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#424)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752520.aspx">onfoconin-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Textfarbe für das Dokument ab oder legt diese fest.</summary>
        <value>Die Textfarbe im Dokument.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der- <xref:System.Drawing.Color> <xref:System.Drawing.Color> Typ in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] unterstützt einen- `Alpha` Wert, das HTML-DOM jedoch nicht. Daher `Alpha` hat keine Auswirkung, wenn diese Eigenschaft zugewiesen wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
        <related type="Article" href="https://msdn.microsoft.com/library/aa752580.aspx">Eigenschaft "Eigenschaft"</related>
      </Docs>
    </Member>
    <Member MemberName="Forms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Forms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Forms" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Forms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Forms As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Forms { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Forms : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.Forms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung aller <c> &lt; Formular &gt; </c> Elemente im Dokument ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.HtmlElementCollection" /> der <c> &lt; Formular &gt; </c> Elemente innerhalb des Dokuments.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein HTML-Dokument kann über ein oder mehrere- `FORM` Elemente mit Eingabefeldern verfügen, um Daten an einen Server zurückzusenden.  
  
 Sie können eine Programm gesteuert übermitteln, `FORM` indem Sie Ihren <xref:System.Windows.Forms.HtmlElement> Abrufen und seine- `Submit` Methode mithilfe der- <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> Methode aufrufen.  
  
 Um einem Dokument ein neues hinzuzufügen `FORM` , können Sie entweder ein neues `FORM` Tag als Zeichenfolge erstellen und es der- <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> Eigenschaft eines Elements zuweisen, das zuvor dem HTML-DOM hinzugefügt wurde, oder Sie können die- <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> Methode verwenden, deren Eigenschaften mithilfe von festlegen <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> und es als untergeordnetes Element eines vorhandenen Elements mithilfe von hinzufügen <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel `Form` werden alle Elemente auf einer Webseite durchlaufen und alle Benutzereingaben gelöscht, wobei die Formulare auf ihre Standardwerte zurückgesetzt werden.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.HtmlDocument#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752591.aspx">Forms-Eigenschaft</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752432.aspx">IHTMLFormElement-Schnittstelle</related>
      </Docs>
    </Member>
    <Member MemberName="GetElementById">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement GetElementById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement GetElementById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementById (id As String) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ GetElementById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.GetElementById : string -&gt; System.Windows.Forms.HtmlElement" Usage="htmlDocument.GetElementById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Das ID-Attribut des abzurufenden Elements.</param>
        <summary>Ruft ein einzelnes <see cref="T:System.Windows.Forms.HtmlElement" /> ab und verwendet dabei das <c>ID</c>-Attribut des Elements als Suchschlüssel.</summary>
        <returns>Gibt das erste Objekt zurück, dessen <c>ID</c>-Attribut dem angegebenen Wert entspricht, oder <see langword="null" />, wenn die <paramref name="id" /> nicht gefunden werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn im Dokument mehrere Elemente mit demselben ID-Wert vorhanden sind, gibt <xref:System.Windows.Forms.HtmlDocument.GetElementById%2A> das erste Element zurück, das es findet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein mit dem Namen `TABLE` aus einem Dokument abgerufen, die Anzahl der Zeilen gezählt und das Ergebnis auf der Webseite angezeigt. Das Codebeispiel erfordert, dass Sie über ein <xref:System.Windows.Forms.WebBrowser> -Steuerelement in Ihrem Projekt mit dem Namen verfügen `WebBrowser1` und eine Webseite mit einem-Attribut geladen haben, `TABLE` dessen- `ID` Attribut ist `Table1` .  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlDocument#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752543.aspx">getElementById-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="GetElementFromPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement GetElementFromPoint (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement GetElementFromPoint(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementFromPoint(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementFromPoint (point As Point) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ GetElementFromPoint(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.GetElementFromPoint : System.Drawing.Point -&gt; System.Windows.Forms.HtmlElement" Usage="htmlDocument.GetElementFromPoint point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Die x,y-Position des Elements auf dem Bildschirm bezogen auf die linke obere Ecke des Dokuments.</param>
        <summary>Ruft das an den angegebenen Clientkoordinaten befindliche HTML-Element ab.</summary>
        <returns>Das <see cref="T:System.Windows.Forms.HtmlElement" /> an der angegebenen Bildschirmposition im Dokument.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.GetElementFromPoint%2A> verwendet Client Koordinaten, in denen der oberen linken Ecke des Dokuments der Wert (0,0) zugewiesen wird. Client Koordinaten für die aktuelle Position des Cursors können mithilfe der-Eigenschaft abgerufen werden <xref:System.Windows.Forms.HtmlWindow.Position%2A> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein Klick auf das Dokument erkannt, das-Element gefunden und verwendet, <xref:System.Windows.Forms.HtmlElement.ScrollIntoView%2A> um das Element am oberen Rand der Webseite auszurichten.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752576.aspx">elementFromPoint-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElementCollection GetElementsByTagName(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementsByTagName (tagName As String) As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElementCollection ^ GetElementsByTagName(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="member this.GetElementsByTagName : string -&gt; System.Windows.Forms.HtmlElementCollection" Usage="htmlDocument.GetElementsByTagName tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Der Name des HTML-Tags für die <see cref="T:System.Windows.Forms.HtmlElement" />-Objekte, die Sie abrufen möchten.</param>
        <summary>Ruft eine Auflistung von Elementen mit dem angegebenen HTML-Tag ab.</summary>
        <returns>Die Auflistung von Elementen, deren Tagname gleich dem <paramref name="tagName" />-Argument ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 HTML-Seiten verwenden häufig das- `META` Tag, um beliebige Informationen über das Dokument einzubetten. Das folgende HTML-Codebeispiel ruft alle `META` -Tags in einem HTML-Dokument ab, sucht das `META` Tag mit dem Namen `Description` und zeigt es dem Benutzer an. Das Codebeispiel erfordert, dass Ihre Anwendung über ein-Steuerelement mit dem <xref:System.Windows.Forms.WebBrowser> Namen verfügt `WebBrowser1` .  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752545.aspx">GetElementsByTagName-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlDocument.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft den Hashcode für dieses Objekt ab.</summary>
        <returns>Ein <see cref="T:System.Int32" />, der einen Speicherhash dieses Objekts darstellt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Images">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Images { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Images" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Images" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Images As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Images { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Images : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.Images" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung aller Bildtags im Dokument ab.</summary>
        <value>Eine Auflistung von je einem <see cref="T:System.Windows.Forms.HtmlElement" />-Objekt für jedes IMG-Tag im Dokument. Elemente werden von der Auflistung in Quellreihenfolge zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.Images%2A> gibt eine Auflistung von- <xref:System.Windows.Forms.HtmlElement> Objekten zurück. Wenn Sie auf Attribute wie und zugreifen möchten, `ALT` `SRC` die nicht direkt von verfügbar gemacht werden <xref:System.Windows.Forms.HtmlElement> , verwenden Sie die- <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> Methode.  
  
 Um einem Dokument ein neues Bild hinzuzufügen, erstellen Sie ein neues `IMG` Tag als Zeichenfolge, und weisen Sie es der- <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> Eigenschaft eines Elements zu, das zuvor dem HTML-DOM hinzugefügt wurde, oder verwenden Sie die- <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> Methode, legen Sie die zugehörigen Eigenschaften mithilfe von fest, <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> und fügen Sie es mithilfe von als untergeordnetes Element eines vorhandenen Elements hinzu <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das `ALT` -Attribut aller Bilder im Dokument untersucht, und es wird ein Default- `ALT` Attribut festgelegt, wenn noch kein Wert festgelegt ist.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlDocument#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752593.aspx">Images (Eigenschaft)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeScript">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Führt eine in einer HTML-Seite definierte Active Scripting-Funktion aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird der Inhalt eines Skripts auf einer Webseite ausgeführt. Das Codebeispiel erfordert, dass Sie die folgende Webseite geladen haben.  
  
```  
<HTML>  
<SCRIPT>  
function test(name, address) {  
window.alert("Name is " + name + "; address is " + address);  
}  
</SCRIPT>  
  
<BODY>  
</BODY>  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeScript(string scriptName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeScript (scriptName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeScript(System::String ^ scriptName);" />
      <MemberSignature Language="F#" Value="member this.InvokeScript : string -&gt; obj" Usage="htmlDocument.InvokeScript scriptName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">Der Name der aufzurufenden Skriptmethode.</param>
        <summary>Führt eine in einer HTML-Seite definierte Active Scripting-Funktion aus.</summary>
        <returns>Das Objekt, das durch den Active Scripting-Aufruf zurückgegeben wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der zugrunde liegende Typ des Objekts, das von zurückgegeben <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> wird, variiert. Wenn die aufgerufene aktive Skriptfunktion skalare Daten zurückgibt (z. b. eine Zeichenfolge oder eine ganze Zahl), wird Sie als Zeichenfolge zurückgegeben. Wenn ein Skript basiertes Objekt zurückgegeben wird, z. b. ein Objekt, das mithilfe von JScript oder dem Operator von VBScript erstellt `new` wurde, ist es vom Typ `Object` . (Sie können Aufrufe für diese Objekte durch Aufrufen von <xref:System.Object.GetType%2A> und mithilfe von durchführen <xref:System.Type.InvokeMember%2A> .) Wenn ein HTML-DOM-Element zurückgegeben wird, wie z `DIV` `TABLE` . b. oder, ist es vom Typ `Object` . Wenn Sie MSHTML.DLL einen Projekt Verweis hinzugefügt haben, wird er jedoch in seinen spezifischen, nicht verwalteten Dom-Typ umgewandelt.  
  
 Sie können eine beliebige Funktion, die in einer beliebigen auf dem Computer des Benutzers installierten aktiven Skriptsprache geschrieben ist, einschließlich JScript und VBScript, abrufen.  
  
 <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A>Führt keine Aktion aus, wenn der Benutzer die Skriptausführung in Internet Explorer explizit ausgeschaltet hat, oder wenn die aktuelle Sicherheitskonfiguration für die Webseite dies nicht zulässt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der Inhalt eines Skripts auf einer Webseite ausgeführt. Für das Codebeispiel ist es erforderlich, dass <xref:System.Windows.Forms.WebBrowser> in Ihrer Anwendung einen mit dem Namen hat `WebBrowser1` und dass Sie die folgende Webseite geladen haben.  
  
```  
<HTML>  
  
    <HEAD>  
        <TITLE>Invoke Script Sample</TITLE>  
  
        <SCRIPT>  
            function MyObject() {  
                this.Data = "Data for my private object.";  
            }  
            // Return a string.  
            function test() {  
                return("This is a test.");  
            }  
            // Return a JScript object.  
            function testJScriptObject() {  
                return(new(MyObject));  
            }  
            // Return a DOM element.  
            function testElement() {  
                return(div1);  
            }  
        </SCRIPT>  
    </HEAD>  
  
    <BODY>  
  
        <DIV id="div1">  
        </DIV>  
  
    </BODY>  
  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#12)]
 [!code-vb[System.Windows.Forms.HtmlDocument#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeScript(string scriptName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeScript (scriptName As String, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeScript(System::String ^ scriptName, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.InvokeScript : string * obj[] -&gt; obj" Usage="htmlDocument.InvokeScript (scriptName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="scriptName">Der Name der aufzurufenden Skriptmethode.</param>
        <param name="args">Die der Skriptmethode zu übergebenden Argumente.</param>
        <summary>Führt eine in einer HTML-Seite definierte Active Scripting-Funktion aus.</summary>
        <returns>Das Objekt, das durch den Active Scripting-Aufruf zurückgegeben wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der zugrunde liegende Typ des Objekts, das von zurückgegeben <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> wird, variiert. Wenn die aufgerufene aktive Skriptfunktion skalare Daten zurückgibt (z. b. eine Zeichenfolge oder eine ganze Zahl), wird Sie als Zeichenfolge zurückgegeben. Wenn ein Skript basiertes Objekt zurückgegeben wird, z. b. ein Objekt, das mithilfe von JScript oder dem Operator von VBScript erstellt `new` wurde, ist es vom Typ `Object` . (Sie können Aufrufe für diese Objekte durch Aufrufen von <xref:System.Object.GetType%2A> und mithilfe von durchführen <xref:System.Type.InvokeMember%2A> .) Wenn ein HTML-DOM-Element zurückgegeben wird, wie z `DIV` `TABLE` . b. oder, ist es vom Typ `Object` . Wenn Sie MSHTML.DLL einen Projekt Verweis hinzugefügt haben, wird er jedoch in seinen spezifischen, nicht verwalteten Dom-Typ umgewandelt.  
  
 Sie können jede Funktion, die in einer beliebigen auf dem Computer des Benutzers installierten aktiven Skriptsprache geschrieben ist, einschließlich JScript und VBScript, abrufen.  
  
 Diese Methode führt keine Aktion aus, wenn der Benutzer die Skriptausführung in Internet Explorer explizit ausgeschaltet hat, oder wenn die aktuelle Sicherheitskonfiguration für die Webseite dies nicht zulässt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird der Inhalt eines Skripts auf einer Webseite ausgeführt. Für das Codebeispiel ist es erforderlich, dass <xref:System.Windows.Forms.WebBrowser> in Ihrer Anwendung einen mit dem Namen hat `WebBrowser1` und dass Sie die folgende Webseite geladen haben.  
  
```  
<HTML>  
    <SCRIPT>  
        function test(name, address) {  
            window.alert("Name is " + name + "; address is " + address);  
        }  
    </SCRIPT>  
  
    <BODY>  
    </BODY>  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.LinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color LinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.LinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.LinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Farbe für Links ab oder legt diese fest.</summary>
        <value>Die Farbe für Links im aktuellen Dokument.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der- <xref:System.Drawing.Color> Typ in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] unterstützt einen- `Alpha` Wert, das HTML-DOM jedoch nicht. Daher `Alpha` hat keine Auswirkung, wenn diese Eigenschaft zugewiesen wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
        <related type="Article" href="https://msdn.microsoft.com/library/aa752608.aspx">LinkColor-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Links">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Links { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Links" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Links" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Links As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Links { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Links : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.Links" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Liste aller Links im HTML-Dokument ab.</summary>
        <value>Eine <see cref="T:System.Windows.Forms.HtmlElementCollection" /> von <see cref="T:System.Windows.Forms.HtmlElement" />-Objekten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Sammlung enthält alle Links, die mithilfe der `A` `LINK` Tags, und `AREA` in HTML erstellt wurden.  
  
 Die-Objekte, die <xref:System.Windows.Forms.HtmlElement> in dieser Auflistung enthalten sind, Kapseln die nicht verwaltete- `IHTMLLinkElement` Schnittstelle. Um auf die Eigenschaften der zugrunde liegenden Schnittstelle sicher zuzugreifen, verwenden Sie die- <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> Methode.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752595.aspx">Links (Eigenschaft)</related>
      </Docs>
    </Member>
    <Member MemberName="LosingFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LosingFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.LosingFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LosingFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LosingFocus;" />
      <MemberSignature Language="F#" Value="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Steuerelement den Fokus verliert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlDocument.LosingFocus> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können.  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlDocument> Namen enthält `HtmlDocument1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlDocument.LosingFocus> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#425](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#425)]
 [!code-vb[System.Windows.Forms.EventExamples#425](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#425)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752521.aspx">onfocbrandout-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer mit der linken Maustaste klickt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das- <xref:System.Windows.Forms.HtmlDocument.MouseDown> Ereignis tritt vor dem- <xref:System.Windows.Forms.HtmlDocument.Click> Ereignis auf.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlDocument.MouseDown> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, empfiehlt es sich, durch zu ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht an eine mehrzeilige anfügen <xref:System.Windows.Forms.TextBox> .  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlDocument> Namen enthält `HtmlDocument1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlDocument.MouseDown> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#426](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#426)]
 [!code-vb[System.Windows.Forms.EventExamples#426](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#426)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752619.aspx">onmouondown-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Mauszeiger nicht mehr auf das Dokument zeigt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlDocument.MouseLeave> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, empfiehlt es sich, durch zu ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht an eine mehrzeilige anfügen <xref:System.Windows.Forms.TextBox> .  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlDocument> Namen enthält `HtmlDocument1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlDocument.MouseLeave> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#427](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#427)]
 [!code-vb[System.Windows.Forms.EventExamples#427](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#427)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://developer.mozilla.org/en-us/docs/web/api/element/mouseout_event">onmousegout-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Mauszeiger über das Dokument bewegt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlDocument.MouseMove> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, empfiehlt es sich, durch zu ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht an eine mehrzeilige anfügen <xref:System.Windows.Forms.TextBox> .  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlDocument> Namen enthält `HtmlDocument1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlDocument.MouseMove> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#428](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#428)]
 [!code-vb[System.Windows.Forms.EventExamples#428](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#428)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752620.aspx">onmousermove-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="MouseOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseOver;" />
      <MemberSignature Language="F#" Value="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Mauszeiger über das Dokument bewegt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen, [behandeln und Auswerfen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlDocument.MouseOver> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, empfiehlt es sich, durch zu ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht an eine mehrzeilige anfügen <xref:System.Windows.Forms.TextBox> .  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlDocument> Namen enthält `HtmlDocument1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlDocument.MouseOver> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#429](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#429)]
 [!code-vb[System.Windows.Forms.EventExamples#429](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#429)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752622.aspx">"onmouseover-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Benutzer die linke Maustaste loslässt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieses Members veranschaulicht. Im Beispiel meldet ein Ereignishandler das Vorkommen des <xref:System.Windows.Forms.HtmlDocument.MouseUp> Ereignisses. Mit diesem Bericht können Sie lernen, wann das Ereignis auftritt und Sie beim Debuggen unterstützen können. Wenn Sie mehrere Ereignisse oder Ereignisse, die häufig auftreten, melden möchten, empfiehlt es sich, durch zu ersetzen <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> oder die Nachricht an eine mehrzeilige anfügen <xref:System.Windows.Forms.TextBox> .  
  
 Um den Beispielcode auszuführen, fügen Sie ihn in ein Projekt ein, das eine Instanz des Typs mit dem <xref:System.Windows.Forms.HtmlDocument> Namen enthält `HtmlDocument1` . Stellen Sie dann sicher, dass der Ereignishandler dem <xref:System.Windows.Forms.HtmlDocument.MouseUp> Ereignis zugeordnet ist.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#430](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#430)]
 [!code-vb[System.Windows.Forms.EventExamples#430](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#430)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752623.aspx">onmouonup-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlDocument left, class System.Windows.Forms.HtmlDocument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.op_Equality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlDocument, right As HtmlDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlDocument ^ left, System::Windows::Forms::HtmlDocument ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlDocument * System.Windows.Forms.HtmlDocument -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlDocument" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlDocument" />
      </Parameters>
      <Docs>
        <param name="left">Die erste zu vergleichende Instanz.</param>
        <param name="right">Die zweite zu vergleichende Instanz.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob die angegebenen Instanzen von <see cref="T:System.Windows.Forms.HtmlDocument" /> denselben Wert darstellen.</summary>
        <returns><see langword="true" />, wenn die angegebenen Instanzen gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die äquivalente Methode für diesen Operator ist. <xref:System.Windows.Forms.HtmlDocument.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlDocument left, class System.Windows.Forms.HtmlDocument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.op_Inequality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlDocument, right As HtmlDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlDocument ^ left, System::Windows::Forms::HtmlDocument ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlDocument * System.Windows.Forms.HtmlDocument -&gt; bool" Usage="System.Windows.Forms.HtmlDocument.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlDocument" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlDocument" />
      </Parameters>
      <Docs>
        <param name="left">Die erste zu vergleichende Instanz.</param>
        <param name="right">Die zweite zu vergleichende Instanz.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob die angegebenen Instanzen von <see cref="T:System.Windows.Forms.HtmlDocument" /> nicht denselben Wert darstellen.</summary>
        <returns><see langword="true" />, wenn die angegebenen Instanzen ungleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument OpenNew (bool replaceInHistory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlDocument OpenNew(bool replaceInHistory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (replaceInHistory As Boolean) As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlDocument ^ OpenNew(bool replaceInHistory);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : bool -&gt; System.Windows.Forms.HtmlDocument" Usage="htmlDocument.OpenNew replaceInHistory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replaceInHistory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="replaceInHistory">Bestimmt, ob die Navigation im neuen Fenster das vorherige Element im Navigationsverlauf des DOM ersetzen soll.</param>
        <summary>Ruft ein neues, mit der <see cref="M:System.Windows.Forms.HtmlDocument.Write(System.String)" />-Methode zu verwendendes <see cref="T:System.Windows.Forms.HtmlDocument" /> ab.</summary>
        <returns>Ein neues Dokument zum Schreiben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A> Löscht das zuvor geladene Dokument, einschließlich aller zugeordneten Zustände, z. b. Variablen. Es wird nicht bewirkt, dass Navigations Ereignisse in <xref:System.Windows.Forms.WebBrowser> ausgelöst werden.  
  
 <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A> erstellt immer ein neues Dokument im aktuellen Fenster. Verwenden Sie die-Methode für die-Klasse, um ein Dokument in einem neuen Fenster zu öffnen <xref:System.Windows.Forms.HtmlWindow.Open%2A> <xref:System.Windows.Forms.HtmlWindow> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das DOM zum Schreiben und Schreiben eines neuen Dokuments mithilfe der- <xref:System.Windows.Forms.HtmlDocument.Write%2A> Methode vorbereitet.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752628.aspx">Open-Methode</related>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public bool RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property RightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RightToLeft { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : bool with get, set" Usage="System.Windows.Forms.HtmlDocument.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Textrichtung im aktuellen Dokument ab oder legt diese fest.</summary>
        <value><see langword="true" />, wenn der Text von rechts nach links gerendert wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> hat keinen Wert, es sei denn, er wurde explizit festgelegt, entweder im Code oder in HTML.  
  
 Anders als bei der- <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> Eigenschaft für Windows Forms-Steuerelemente wirkt sich das <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> verwaltete HTML-DOM nicht auf die Richtung des lateinischen Texts aus.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752540.aspx">dir-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Stop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Stop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Stop As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Stop;" />
      <MemberSignature Language="F#" Value="member this.Stop : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Stop : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Navigation zu einer anderen Webseite unterbrochen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Laden einer Webseite wird angehalten, wenn der Programmcode die- <xref:System.Windows.Forms.WebBrowser.Stop%2A> Methode des-Steuer Elements aufruft <xref:System.Windows.Forms.WebBrowser> . Navigationsfehler, die durch Netzwerkausfälle oder fehlerhafte Websites verursacht werden, führen nicht dazu, dass ein Fehler <xref:System.Windows.Forms.HtmlDocument.Stop> auftritt.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Statusleiste für eine Windows Forms Anwendung zurückgesetzt, wenn das `Stop` Ereignis aufgetreten ist. Das Codebeispiel erfordert, dass Sie über ein- <xref:System.Windows.Forms.StatusBar> Steuerelement `StatusBar1` mit dem Namen in Ihrer Anwendung verfügen.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752561.aspx">onstopps-Ereignis</related>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Textwert des <c> &lt; Titeltags &gt; </c> im aktuellen HTML-Dokument ab oder legt diesen fest.</summary>
        <value>Der Titel des aktuellen Dokuments.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die- <xref:System.Windows.Forms.HtmlDocument.Title%2A> Eigenschaft, um das Dokument über einen lesbaren Namen zu identifizieren.  
  
 Änderungen an dieser Eigenschaft werden auch in der- <xref:System.Windows.Forms.WebBrowser.DocumentTitle%2A> Eigenschaft des-Steuer Elements widerspiegeln <xref:System.Windows.Forms.WebBrowser> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein HTML-Hyperlink zum aktuellen Dokument erstellt. dabei wird die URL des Dokuments als Speicherort des Links und der Titel des Dokuments als Linktext verwendet. Das Codebeispiel erfordert, dass Ihre Anwendung über ein-Steuerelement mit dem <xref:System.Windows.Forms.WebBrowser> Namen verfügt `WebBrowser1` .  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#14)]
 [!code-vb[System.Windows.Forms.HtmlDocument#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.WebBrowser.DocumentTitle" />
        <altmember cref="T:System.Windows.Forms.WebBrowser" />
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlDocument.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die URL ab, die den Speicherort dieses Dokuments beschreibt.</summary>
        <value>Ein <see cref="T:System.Uri" />, der die URL dieses Dokuments darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist schreibgeschützt. Verwenden Sie die-Eigenschaft des-Steuer Elements, um zu einem neuen Dokument zu navigieren <xref:System.Windows.Forms.WebBrowser.Url%2A> <xref:System.Windows.Forms.WebBrowser> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitedLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color VisitedLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color VisitedLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property VisitedLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color VisitedLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.VisitedLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Farbe von Links zu HTML-Seiten ab, die der Benutzer bereits besucht hat, oder legt diese fest.</summary>
        <value>Die Farbe besuchter Links.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der- `Color` Typ in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] unterstützt einen- `Alpha` Wert, das HTML-DOM jedoch nicht. Daher `Alpha` hat keine Auswirkung, wenn diese Eigenschaft zugewiesen wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <related type="Article" href="https://msdn.microsoft.com/library/aa752638.aspx">vlinkColor (Eigenschaft)</related>
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Window { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Window" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Window" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Window As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Window { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Window : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlDocument.Window" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das mit diesem Dokument verbundene <see cref="T:System.Windows.Forms.HtmlWindow" /> ab.</summary>
        <value>Das Fenster für dieses Dokument.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle HTML-Dokumente verfügen über ein HTML-DOM-Objekt, das als Fenster bezeichnet wird, das verwendet werden kann, um die Bildschirmgröße des Dokuments zu ändern und neue Fenster zu öffnen sowie auf andere wichtige Objekte wie z <xref:System.Windows.Forms.HtmlHistory> . b. zuzugreifen.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752599.aspx">Eigenschaften Window-Eigenschaft</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.Write : string -&gt; unit" Usage="htmlDocument.Write text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der in das Dokument zu schreibende HTML-Text.</param>
        <summary>Schreibt eine neue HTML-Seite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Allen Aufrufen <xref:System.Windows.Forms.HtmlDocument.Write%2A> von sollte ein Aufruf von <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A> vorangestellt werden, wodurch das aktuelle Dokument und alle seine Variablen gelöscht werden. Ihre Aufrufe von <xref:System.Windows.Forms.HtmlDocument.Write%2A> Erstellen an seiner Stelle ein neues HTML-Dokument. Wenn Sie nur einen bestimmten Teil des Dokuments ändern möchten, rufen Sie den entsprechenden ab, <xref:System.Windows.Forms.HtmlElement> und legen Sie dessen- <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> Eigenschaft fest.  
  
 Es wird empfohlen, dass Sie mit der-Methode ein vollständiges, gültiges HTML-Dokument schreiben <xref:System.Windows.Forms.HtmlDocument.Write%2A> , einschließlich `HTML` -und- `BODY` Tags. Wenn Sie jedoch nur HTML-Elemente schreiben, werden diese Elemente vom Dokumentobjektmodell (DOM) für Sie bereitgestellt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein neuer geöffnet <xref:System.Windows.Forms.HtmlDocument> und in eine neue HTML-Datei geschrieben.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>

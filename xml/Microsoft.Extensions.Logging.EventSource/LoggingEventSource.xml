<Type Name="LoggingEventSource" FullName="Microsoft.Extensions.Logging.EventSource.LoggingEventSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="95e424a3682dda9f3aca1b994842fdf26f636c93" /><Meta Name="ms.sourcegitcommit" Value="3001e6bfbacb09c47be86e2ade5b0c2bd91bb0cb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/31/2020" /><Meta Name="ms.locfileid" Value="87469791" /></Metadata><TypeSignature Language="C#" Value="public sealed class LoggingEventSource : System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LoggingEventSource extends System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.EventSource.LoggingEventSource" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LoggingEventSource&#xA;Inherits EventSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggingEventSource sealed : System::Diagnostics::Tracing::EventSource" />
  <TypeSignature Language="F#" Value="type LoggingEventSource = class&#xA;    inherit EventSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Tracing.EventSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.Tracing.EventSource(Name="Microsoft-Extensions-Logging")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.Tracing.EventSource(Name="Microsoft-Extensions-Logging")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>LoggingEventSource stellt die Verbindung zwischen allen auf ILogger basierenden Protokollen und der Protokollierung von EventSource/EventListener dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Sie aktivieren diese Protokollierung, indem Sie eventSource mit dem Namen aktivieren `Microsoft-Extensions-Logging` .
            
Wenn Sie eventSource aktiviert haben, wird die von Ihnen festgelegte Eventlevel-Methode auf offensichtliche Weise in die Ebene übersetzt, die der ILogger zugeordnet ist (d. h. Debug = Verbose, Information = Information... Kritisch = = kritisch)
            
Dadurch kann direkt nach der Ereignisebene gefiltert werden.
            
Für eine präzisere Steuerung können Sie ein eventSource-Argument mit dem Namen angeben `FilterSpecs` .
            
Das- `FilterSpecs` Argument ist eine durch Semikolons getrennte Liste von Spezifikationen. Dabei gilt für jede Spezifikation Folgendes:

```
SPEC =                          // empty spec, same as *
     | NAME                     // Just a name the level is the default level
     | NAME : LEVEL            // specifies level for a particular logger (can have a * suffix).
```
            
Dabei ist Name der Name eines iloggger (falls es sich um einen Fall handelt), der Name kann einen enthalten, \* der als Platzhalter als Suffix fungiert. Folglich entspricht NET \* allen Protokollierungen, die mit "NET" beginnen.
            
„LEVEL“ ist eine Zahl oder eine LogLevel-Zeichenfolge. 0=Trace, 1=Debug, 2=Information, 3=Warning, 4=Error, Critical=5 Damit wird die Ebene für das entsprechende Muster angegeben.  Wenn die Zahl nicht angegeben wird (erste Form der Spezifikation), wird die Standardebene für EventSource verwendet.
            
Wenn ein Name mit mehreren Mustern übereinstimmt, wird die erste Übereinstimmung verwendet.
            
Zusätzlich zum Level-und FILTERSPEC-Argument können Sie auch eventSource-Schlüsselwörter festlegen. Informationen hierzu finden Sie in der Definition von Schlüsselwörtern weiter unten. Im Prinzip können Sie jedoch entscheiden, was Sie verwenden möchten:
            
* Keywords. Message: Sie erhalten das Ereignis mit den Daten in der analysierten Form.
* Keywords.JsonMessage: Sie erhalten ein Ereignis mit den Daten im Analyse Formular, aber als JSON-BLOB (nicht durch Argument aufgeschlüsselt).
* Keywords. formattedmessage: Sie erhalten ein Ereignis, bei dem die Daten als Zeichenfolge formatiert sind.
            
Es wird erwartet, dass Sie nur eines dieser Schlüsselwörter gleichzeitig aktivieren, aber Sie können Sie alle aktivieren und die gleichen Daten auf drei verschiedene Arten protokollieren.
            
## Examples
            
Im folgenden Beispiel wird gezeigt, wie Sie einen EventListener verwenden, um ilogging-Informationen zu erhalten:
            
```csharp
class MyEventListener : EventListener 
{
    protected override void OnEventSourceCreated(EventSource eventSource) 
    {
        if (eventSource.Name == "Microsoft-Extensions-Logging") 
        {
            // initialize a string, string dictionary of arguments to pass to the EventSource.
            // Turn on loggers matching App* to Information, everything else (*) is the default level (which is EventLevel.Error)
            var args = new Dictionary&lt;string, string&gt;() { { "FilterSpecs", "App*:Information;*" } };
            // Set the default level (verbosity) to Error, and only ask for the formatted messages in this case.
            EnableEvents(eventSource, EventLevel.Error, LoggingEventSource.Keywords.FormattedMessage, args);
        }
    }

    protected override void OnEventWritten(EventWrittenEventArgs eventData) 
    {
        // Look for the formatted message event, which has the following argument layout (as defined in the LoggingEventSource.
        // FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, string EventId, string FormattedMessage);
        if (eventData.EventName == "FormattedMessage")
            Console.WriteLine("Logger {0}: {1}", eventData.Payload[2], eventData.Payload[4]);
    }
}
```

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnEventCommand">
      <MemberSignature Language="C#" Value="protected override void OnEventCommand (System.Diagnostics.Tracing.EventCommandEventArgs command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEventCommand(class System.Diagnostics.Tracing.EventCommandEventArgs command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEventCommand (command As EventCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEventCommand(System::Diagnostics::Tracing::EventCommandEventArgs ^ command);" />
      <MemberSignature Language="F#" Value="override this.OnEventCommand : System.Diagnostics.Tracing.EventCommandEventArgs -&gt; unit" Usage="loggingEventSource.OnEventCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Diagnostics.Tracing.EventCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>

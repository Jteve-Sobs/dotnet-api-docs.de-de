<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="29c48bd5c0758b49c921f7e8950c38274ce3352d" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48597316" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Das <see langword="Financial" />-Modul enthält Prozeduren, mit denen finanzielle Operationen ausgeführt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Member der Visual Basic-Laufzeitbibliothek, die finanzielle Berechnungen wie Abschreibung, Gegenwart und Zukunft Werte, Zinssätze, Raten der Rückgabe und Zahlungen ausführen.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Rate` -Funktion zum Berechnen der Zinssatz eines Kredits, erhält die Gesamtzahl der Zahlungen (`TotPmts`), den Betrag für die Loan-Zahlung (`Payment`), den Barwert oder Prinzipal, der das Darlehen aufzunehmen (`PVal`), die Zukunft der Wert des Kredits (`FVal`), eine Zahl, die angibt, ob die Zahlung am Anfang oder Ende des Zahlungszeitraums fällig ist (`PayType`), und eine Approximation der erwarteten Zinssatz (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Schlüsselwörter (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Member der Visual Basic-Laufzeitbibliothek</related>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Anschaffungskosten des Vermögenswerts angibt.</param>
        <param name="Salvage">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Vermögenswert am Ende der Nutzungsdauer angibt.</param>
        <param name="Life">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Nutzungsdauer des Vermögenswerts angibt.</param>
        <param name="Period">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zeitraum angibt, für den die Abschreibung des Vermögenswerts berechnet wird.</param>
        <param name="Factor">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Faktor angibt, um den der Wert vermindert wird. Wird der Wert nicht angegeben, so wird 2 (geometrisch degressive Methode) angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum mithilfe der geometrisch degressiven Abschreibungsmethode oder einer von Ihnen ausgewählten Methode angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum mithilfe der geometrisch degressiven Abschreibungsmethode oder einer von Ihnen ausgewählten Methode angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der geometrisch degressiven Abschreibungsmethode berechnet eine beschleunigte Abschreibung. Abschreibung ist am höchsten, in der ersten Periode und nimmt in aufeinander folgenden Punkte.  
  
 Die `Life` und `Period` Argumente müssen in den gleichen Einheiten ausgedrückt werden. Z. B. wenn `Life` erhält in Monaten `Period` muss auch in Monaten angegeben werden. Alle Argumente müssen positive Zahlen sein.  
  
 Die `DDB` Funktion verwendet die folgende Formel zum Berechnen von Abschreibungen für einen bestimmten Zeitraum:  
  
 Abschreibung / Period = ((Cost – Salvage) * Faktor) / leben  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `DDB` Funktion, um die Abschreibung einer Anlage für einen bestimmten Zeitraum die anfängliche Kosten zurückzugeben (`InitCost`), der Restwert am Ende der Lebensdauer des Medienobjekts (`SalvageVal`), die gesamte Lebensdauer des Medienobjekts in Jahren (`LifeTime`), und für den Zeitraum in Jahren, die für den die Abschreibung berechnet wird (`Depr`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0, oder <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz pro Zeitraum angibt. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="NPer">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Gesamtanzahl der Zahlungszeiträume für die Annuität angibt. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
        <param name="Pmt">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Zahlung pro Zeitraum angibt. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
        <param name="PV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Barwert (oder Gesamtbetrag) einer Folge zukünftiger Zahlungen zum jetzigen Zeitpunkt angibt. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <see langword="DueDate.EndOfPeriod" /> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <see langword="DueDate.BegOfPeriod" />, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wird der Wert nicht angegeben, so wird <see langword="DueDate.EndOfPeriod" /> angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den zukünftigen Wert einer Annuität bei regelmäßigen, konstanten Zahlungsausgängen und einem konstanten Zinssatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den zukünftigen Wert einer Annuität bei regelmäßigen, konstanten Zahlungsausgängen und einem konstanten Zinssatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von konstanten Barzahlungen im Laufe der Zeit. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypothek) oder eine Investition (z. B. einen monatlichen einsparungen-Plan) sein.  
  
 Die `Rate` und `NPer` Argumente müssen mit der in den gleichen Einheiten ausgedrückt Zahlungszeiträume berechnet werden. Z. B. wenn `Rate` wird in Monaten berechnet, `NPer` müssen auch Monate mit berechnet werden.  
  
 Für alle Argumente ist Zahlungsausgang (z. B. einzahlungen zu einsparungen) von negativer Zahlen dargestellt werden. empfangen (z. B. Dividend überprüft) von positiven Zahlen dargestellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FV` Bewerten von Funktion, um den zukünftigen Wert einer Investition, die den Prozentsatz zurückzugeben, die pro Zeitraum fallen (`APR / 12`), die Gesamtanzahl der Zahlungen (`TotPmts`), die Zahlung (`Payment`), den aktuellen Wert des der Investition (`PVal`), und eine Zahl, die angibt, ob die Zahlung wird am Anfang oder Ende des Zahlungszeitraums (`PayType`). Beachten Sie, dass `Payment` Zahlungsausgang darstellt, es ist eine negative Zahl.  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz pro Zeitraum angibt. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="Per">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zahlungszeitraum im Bereich von 1 bis <c>NPer</c> angibt.</param>
        <param name="NPer">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Gesamtanzahl der Zahlungszeiträume für die Annuität angibt. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
        <param name="PV">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Barwert oder heutigen Wert einer Folge zukünftiger Einnahmen oder Ausgaben angibt. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Endwert oder Kontostand angibt, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Zinszahlung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Zinszahlung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von konstanten Barzahlungen im Laufe der Zeit. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypothek) oder eine Investition (z. B. einen monatlichen einsparungen-Plan) sein.  
  
 Die `Rate` und `NPer` Argumente müssen mit der in den gleichen Einheiten ausgedrückt Zahlungszeiträume berechnet werden. Z. B. wenn `Rate` wird in Monaten berechnet, `NPer` müssen auch Monate mit berechnet werden.  
  
 Für alle Argumente ist Zahlungsausgang (z. B. einzahlungen zu einsparungen) von negativer Zahlen dargestellt werden. empfangen (z. B. Dividend überprüft) von positiven Zahlen dargestellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `IPmt` -Funktion zum Berechnen, welcher Anteil einer Zahlung Interesse ist, wenn alle Zahlungen mit gleichem Wert sind. Der Zinssatz pro Zeitraum sind (`APR / 12`), des Zahlungszeitraums, die für die der interessante Teil gewünscht wird (`Period`), die Gesamtanzahl der Zahlungen (`TotPmts`), den Barwert oder Prinzipal, der das Darlehen aufzunehmen (`PVal`), wird die der Endwert des Kredits (`FVal`), und eine Zahl, die angibt, ob die Zahlung am Anfang oder Ende des Zahlungszeitraums fällig ist (`PayType`).  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;= 0 oder <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR :  * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Erforderlich. Ein Array von Werten des Typs <see langword="Double" />, die Cashflowwerte enthalten. Das Array muss mindestens einen negativen Wert (Zahlungsausgang) und einen positiven Wert (Zahlungseingang) enthalten.</param>
        <param name="Guess">Dies ist optional. Ein Objekt, das einen von Ihnen geschätzten Wert enthält, der von <see langword="IRR" /> zurückgegeben wird. Wird der Wert nicht angegeben, ist <c>Guess</c> 0,1 (10 Prozent).</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den internen Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen) angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den internen Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen) angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die interne Rendite ist den Zinssatz einer Investition Ausgänge und Eingänge, die in regelmäßigen Abständen auftreten, bestehend aus.  
  
 Die `IRR` Funktion, die die Reihenfolge der Werte im Array verwendet, um die Reihenfolge der aus- und einzahlungen zu interpretieren. Achten Sie darauf, dass Ihre Einnahmen und Ausgaben in der richtigen Reihenfolge eingegeben werden. Der Datenfluss für jeden Zeitraum muss nicht behoben werden muss, als auch für eine Annuität angibt.  
  
 `IRR` ist iterativ berechnet werden. Beginnend mit dem Wert des `Guess`, `IRR` durchläuft die Berechnung, bis das Ergebnis auf Wahrscheinlichkeit unter 0,00001 % ist. Wenn `IRR` wurde nicht gefunden, ein Ergebnis nach 20 versucht, ein Fehler auftritt.  
  
   
  
## Examples  
 In diesem Beispiel die `IRR` Funktionsergebnis ist die interne Rendite für eine Reihe von fünf Cashflows im Array enthaltenen `Values()`. Das erste Arrayelement ist ein negativer Cashflow, die der die Anlaufkosten darstellt. Die verbleibenden vier Cashflows stellen positive Cashflows für die folgenden vier Jahre dar. `Guess` ist die geschätzte interne Rendite.  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Arrayargumentwerte sind ungültig oder <paramref name="Guess" /> &lt;= –1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR :  * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Erforderlich. Ein Array von Werten des Typs <see langword="Double" />, die Cashflowwerte enthalten. Das Array muss mindestens einen negativen Wert (Zahlungsausgang) und einen positiven Wert (Zahlungseingang) enthalten.</param>
        <param name="FinanceRate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz angibt, der als Finanzierungskosten anfällt.</param>
        <param name="ReinvestRate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz angibt, der bei erneuter Anlage von Kapital erzielt werden kann.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den geänderten internen Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen) angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den geänderten internen Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen) angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die geänderte interne Rendite ist die interne Rendite aus, wenn aus- und einzahlungen mit unterschiedlichen Raten finanziert werden. Die `MIRR` -Funktion berücksichtigt den Kosten der Investition (`FinanceRate`) und der Zinssatz, Bargeldbetrag (`ReinvestRate`).  
  
 Die `FinanceRate` und `ReinvestRatearguments` Prozentsätze als Dezimalzahlen ausgedrückt werden. Beispielsweise wird 12 Prozent als 0.12 ausgedrückt.  
  
 Die `MIRR` Funktion, die die Reihenfolge der Werte im Array verwendet, um die Reihenfolge der aus- und einzahlungen zu interpretieren. Achten Sie darauf, dass Ihre Einnahmen und Ausgaben in der richtigen Reihenfolge eingegeben werden.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `MIRR` Funktion, um die geänderte interne Rendite für eine Reihe von Cashflows im Array zurückzugeben `Values()`. `LoanAPR` Stellt den, und `InvAPR` der Zinssatz Kapital darstellt.  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Rang von <paramref name="ValueArray" /> ist ungleich 1, <paramref name="FinanceRate" /> = -1 oder <paramref name="ReinvestRate" /> = -1</exception>
        <exception cref="T:System.DivideByZeroException">Division durch 0 (null) durchgeführt.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz pro Zeitraum angibt. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="Pmt">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Zahlung pro Zeitraum angibt. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
        <param name="PV">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Barwert oder heutigen Wert einer Folge zukünftiger Einnahmen oder Ausgaben angibt. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Endwert oder Kontostand angibt, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Anzahl der Zeiträume für eine Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Anzahl der Zeiträume für eine Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von festen Barzahlungen, die über einen Zeitraum an. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypothek) oder eine Investition (z. B. einen monatlichen einsparungen-Plan) sein.  
  
 Für alle Argumente ist Zahlungsausgang (z. B. einzahlungen zu einsparungen) von negativer Zahlen dargestellt werden. empfangen (z. B. Dividend überprüft) von positiven Zahlen dargestellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `NPer` Funktion, um die Anzahl von Zeiträumen zurückzugeben, während der Zahlungen erfolgen müssen an einen Kredit, dessen Wert, befindet sich im `PVal`. Darüber hinaus sind der Zinssatz pro Zeitraum (`APR / 12`), die Zahlung (`Payment`), der Endwert des Kredits (`FVal`), und eine Zahl, die angibt, ob die Zahlung am Anfang oder Ende des Zahlungszeitraums fällig ist (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rate" /> = 0 und <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double *  -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Diskontsatz bezogen auf die Dauer des Zeitraums (ausgedrückt als Dezimalzahl) enthält.</param>
        <param name="ValueArray">Erforderlich. Ein Array von Werten des Typs <see langword="Double" />, die Cashflowwerte enthalten. Das Array muss mindestens einen negativen Wert (Zahlungsausgang) und einen positiven Wert (Zahlungseingang) enthalten.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den Nettobarwert einer Investition bei regelmäßigen Cashflows (Aus- und Einzahlungen) und einem Diskontsatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den Nettobarwert einer Investition bei regelmäßigen Cashflows (Aus- und Einzahlungen) und einem Diskontsatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Nettobarwert einer Investition ist der aktuelle Wert in einer zukünftigen Reihe von aus- und einzahlungen.  
  
 Die `NPV` Funktion, die die Reihenfolge der Werte im Array verwendet, um die Reihenfolge der aus- und einzahlungen zu interpretieren. Achten Sie darauf, dass Ihre Einnahmen und Ausgaben in der richtigen Reihenfolge eingegeben werden.  
  
 Die `NPV` Investitionen einen Punkt vor dem Datum des ersten Werts Cashflow beginnt und endet mit dem letzten Cashflow-Wert im Array.  
  
 Die Berechnung des Werts basiert auf zukünftigen Cashflows. Wenn der erste Cashflow am Anfang der ersten Periode auftritt, muss der erste Wert hinzugefügt werden, auf den Rückgabewert von `NPV` und darf nicht enthalten sein, in den Cashflow-Werten der `ValueArray`.  
  
 Die `NPV` Funktion ist vergleichbar mit der `PV` Funktion (Wert), außer dass die `PV` Funktion ermöglicht Cashflows, die am Ende oder Anfang eines Zeitraums. Im Gegensatz zu den Variablen `NPV` zahlungswerte, `PV` Cashflows müssen behoben werden, während der Investition.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `NPV` Funktion, um den Nettobarwert für eine Reihe von Cashflows im Array zurückzugeben `values()`. Der zurückgegebene Wert, der in gespeicherten `FixedRetRate`, die feste interne Rendite darstellt.  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ValueArray" /> ist gleich <see langword="Nothing" />. Bereich von <paramref name="ValueArray" /> &lt;&gt; 1 oder <paramref name="Rate" /> = –1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz pro Zeitraum angibt. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="NPer">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Gesamtanzahl der Zahlungszeiträume für die Annuität angibt. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 × 12 (oder 48).</param>
        <param name="PV">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Barwert oder heutigen Wert einer Folge zukünftiger Aus- oder Einzahlungen angibt. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Endwert oder Kontostand angibt, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder über 18 Jahre 50.000 Euro ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Zahlung für eine Annuität bei regelmäßigen konstanten Zahlungsausgängen und konstantem Zinssatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Zahlung für eine Annuität bei regelmäßigen konstanten Zahlungsausgängen und konstantem Zinssatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von konstanten Barzahlungen während einer Zeitspanne. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypothek) oder eine Investition (z. B. einen monatlichen einsparungen-Plan) sein.  
  
 Die `Rate` und `NPer` Argumente müssen mit der in den gleichen Einheiten ausgedrückt Zahlungszeiträume berechnet werden. Z. B. wenn `Rate` wird in Monaten berechnet, `NPer` müssen auch Monate mit berechnet werden.  
  
 Für alle Argumente ist bar bezahlt (z. B. einzahlungen zu einsparungen) von negativer Zahlen dargestellt werden. empfangen (z. B. Dividend überprüft) von positiven Zahlen dargestellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Pmt` Funktion, die die monatliche Zahlung für einen Kredit während eines festen Zeitraums zurückgegeben. Der Zinssatz pro Zeitraum sind (`APR / 12`), die Gesamtanzahl der Zahlungen (`TotPmts`), den Barwert oder Prinzipal, der das Darlehen aufzunehmen (`PVal`), der Endwert des Kredits (`FVal`), und eine Zahl, der angibt, ob die die Zahlung ist am Anfang oder Ende des Zahlungszeitraums fällig. `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz pro Zeitraum angibt. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="Per">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zahlungszeitraum im Bereich von 1 bis <c>NPer</c> angibt.</param>
        <param name="NPer">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Gesamtanzahl der Zahlungszeiträume für die Annuität angibt. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
        <param name="PV">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den aktuellen Wert einer Folge zukünftiger Einnahmen oder Ausgaben angibt. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Endwert oder Kontostand angibt, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Tilgung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Tilgung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von festen Barzahlungen, die über einen Zeitraum an. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypothek) oder eine Investition (z. B. einen monatlichen einsparungen-Plan) sein.  
  
 Die `Rate` und `NPer` Argumente müssen mit der in den gleichen Einheiten ausgedrückt Zahlungszeiträume berechnet werden. Z. B. wenn `Rate` wird in Monaten berechnet, `NPer` müssen auch Monate mit berechnet werden.  
  
 Für alle Argumente ist bar bezahlt (z. B. einzahlungen zu einsparungen) von negativer Zahlen dargestellt werden. empfangen (z. B. Dividend überprüft) von positiven Zahlen dargestellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `PPmt` -Funktion zum Berechnen, wie viel einer Zahlung für einen bestimmten Zeitraum Prinzipal ist, wenn alle Zahlungen mit gleichem Wert sind. Der Zinssatz pro Zeitraum sind (`APR / 12`), des Zahlungszeitraums, die für die der Prinzipal Teil gewünscht wird (`Period`), die Gesamtanzahl der Zahlungen (`TotPmts`), den Barwert oder Prinzipal, der das Darlehen aufzunehmen (`PVal`), wird die der Endwert des Kredits (`FVal`), und eine Zahl, die angibt, ob die Zahlung am Anfang oder Ende des Zahlungszeitraums fällig ist (`PayType`).  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;=0 oder <paramref name="Per" /> &gt; <paramref name="NPer" />.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz pro Zeitraum angibt. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="NPer">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Gesamtanzahl der Zahlungszeiträume für die Annuität angibt. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
        <param name="Pmt">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die zu leistende Zahlung pro Zeitraum angibt. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
        <param name="FV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Endwert oder Kontostand angibt, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den Barwert einer Annuität bei zukünftig regelmäßig und konstant zu leistenden Zahlungsausgängen und einem konstanten Zinssatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den Barwert einer Annuität bei zukünftig regelmäßig und konstant zu leistenden Zahlungsausgängen und einem konstanten Zinssatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von festen Barzahlungen, die über einen Zeitraum an. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypothek) oder eine Investition (z. B. einen monatlichen einsparungen-Plan) sein.  
  
 Die `Rate` und `NPer` Argumente müssen mit der in den gleichen Einheiten ausgedrückt Zahlungszeiträume berechnet werden. Z. B. wenn `Rate` wird in Monaten berechnet, `NPer` müssen auch Monate mit berechnet werden.  
  
 Für alle Argumente ist Zahlungsausgang (z. B. einzahlungen zu einsparungen) von negativer Zahlen dargestellt werden. empfangen (z. B. Dividend überprüft) von positiven Zahlen dargestellt.  
  
   
  
## Examples  
 In diesem Beispiel die `PV` Funktion gibt den Barwert einer Annuität 1.000.000 $vorliegt, die 50.000 US-Dollar pro Jahr für die nächsten 20 Jahre bereitstellt. Bereitgestellte sind die erwarteten jährlichen Prozentsatzes (`APR`), die Gesamtzahl der Zahlungen (`TotPmts`), der Betrag einer Zahlung (`YrIncome`), die zukünftige Gesamtwert der Investition (`FVal`), und eine Zahl, der angibt, ob jede die Zahlung erfolgt am Anfang oder Ende des Zahlungszeitraums (`PayType`). Beachten Sie, dass `YrIncome` ist eine negative Zahl, da er Zahlungsausgang von der Laufzeit einer Annuität darstellt.  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Gesamtanzahl der Zahlungszeiträume für die Annuität angibt. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 * 12 (oder 48).</param>
        <param name="Pmt">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die zu leistende Zahlung pro Zeitraum angibt. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
        <param name="PV">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Barwert oder heutigen Wert einer Folge zukünftiger Einnahmen oder Ausgaben angibt. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Endwert oder Kontostand angibt, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <param name="Guess">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der einen von Ihnen geschätzten Wert enthält, der von <see langword="Rate" /> zurückgegeben wird. Wird der Wert nicht angegeben, ist <c>Guess</c> 0,1 (10 Prozent).</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den Zinssatz einer Annuität pro Zeitraum angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den Zinssatz einer Annuität pro Zeitraum angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von festen Barzahlungen, die über einen Zeitraum an. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypothek) oder eine Investition (z. B. einen monatlichen einsparungen-Plan) sein.  
  
 Für alle Argumente ist Zahlungsausgang (z. B. einzahlungen zu einsparungen) von negativer Zahlen dargestellt werden. empfangen (z. B. Dividend überprüft) von positiven Zahlen dargestellt.  
  
 `Rate` ist iterativ berechnet werden. Beginnend mit dem Wert des `Guess`, `Rate` durchläuft die Berechnung, bis das Ergebnis auf Wahrscheinlichkeit unter 0,00001 % ist. Wenn `Rate` wurde nicht gefunden, ein Ergebnis nach 20 versucht, ein Fehler auftritt. Wenn Ihre Schätzung 10 Prozent ist und `Rate` ein Fehler auftritt, versuchen Sie es für einen anderen Wert `Guess`.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Rate` -Funktion zum Berechnen der Zinssatz eines Kredits, der die Gesamtzahl der Zahlungen erhält (`TotPmts`), den Betrag für die Loan-Zahlung (`Payment`), den Barwert oder Prinzipal, der das Darlehen aufzunehmen (`PVal`), die Zukunft der Wert des Kredits (`FVal`), eine Zahl, die angibt, ob die Zahlung am Anfang oder Ende des Zahlungszeitraums fällig ist (`PayType`), und eine Approximation der erwarteten Zinssatz (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Anschaffungskosten des Vermögenswerts angibt.</param>
        <param name="Salvage">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Vermögenswert am Ende der Nutzungsdauer angibt.</param>
        <param name="Life">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Nutzungsdauer des Vermögenswerts angibt.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die arithmetische Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die arithmetische Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Zeitraum der Abschreibung muss in derselben Einheit als ausgedrückt werden die `Life` Argument. Alle Argumente müssen positive Zahlen sein.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `SLN` Funktion, um die lineare Abschreibung einer Anlage für einen einzelnen Punkt mit dem angegebenen anfänglichen Kosten für die Ressource zurückzugeben (`InitCost`), der Restwert am Ende der Lebensdauer des Medienobjekts (`SalvageVal`), und die gesamte Lebensdauer des das Objekt in den Jahren (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Anschaffungskosten des Vermögenswerts angibt.</param>
        <param name="Salvage">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Vermögenswert am Ende der Nutzungsdauer angibt.</param>
        <param name="Life">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Nutzungsdauer des Vermögenswerts angibt.</param>
        <param name="Period">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zeitraum angibt, für den die Abschreibung des Vermögenswerts berechnet wird.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Jahresabschreibung eines Vermögenswerts über einen bestimmten Zeitraum angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Jahresabschreibung eines Vermögenswerts über einen bestimmten Zeitraum angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Life` und `Period` Argumente müssen in den gleichen Einheiten ausgedrückt werden. Z. B. wenn `Life` erhält in Monaten `Period` muss auch in Monaten angegeben werden. Alle Argumente müssen positive Zahlen sein.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `SYD` -Funktion die Abschreibung einer Anlage für einen bestimmten Zeitraum die Anschaffungskosten des Medienobjekts zurückgibt (`InitCost`), der Restwert am Ende der Lebensdauer des Medienobjekts (`SalvageVal`), und die gesamte Lebensdauer des Medienobjekts in Jahre (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" />, oder <paramref name="Period" /> &lt;=0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
  </Members>
</Type>
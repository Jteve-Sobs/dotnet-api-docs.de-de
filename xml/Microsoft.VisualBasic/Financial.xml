<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49555a91dedb5c55012f6f404134bb69c666eed3" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82501804" /></Metadata><TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Financial extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Das <see langword="Financial" />-Modul enthält Prozeduren, mit denen finanzielle Operationen ausgeführt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Visual Basic Lauf Zeit Bibliothekselemente, die finanzielle Berechnungen durchführen, wie z. b. Abrechnungen, vorhandene und zukünftige Werte, Zins Sätze, Rückgabe Raten und Zahlungen.  
  
   
  
## Examples  
 In diesem Beispiel wird die `Rate`-Funktion verwendet, um den Zinssatz eines Darlehens zu berechnen. gibt die Gesamtanzahl der Zahlungen (`TotPmts`), den Betrag der Kreditzahlung (`Payment`), den derzeitigen Wert oder den Prinzipal des Darlehens (`PVal`), den zukünftigen Wert des Darlehens (`FVal`) an, eine Zahl, die angibt, ob die Zahlung am Anfang oder Ende des Zahlungszeitraums (`PayType`) fällig ist, und ein Näherungswert des erwarteten Zinssatz (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Schlüsselwörter (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic von Lauf Zeit Bibliotheks Membern</related>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Erforderlich Die Anschaffungskosten des Vermögenswerts.</param>
        <param name="Salvage">Erforderlich Der Wert des Vermögenswerts am Ende seiner Nutzungsdauer.</param>
        <param name="Life">Erforderlich Die Länge der Nutzungsdauer des Vermögenswerts.</param>
        <param name="Period">Erforderlich Der Zeitraum für den die Abschreibung des Vermögenswerts berechnet wird.</param>
        <param name="Factor">Optional. Der Faktor, um den der Wert vermindert wird. Wird der Wert nicht angegeben, so wird 2 (geometrisch degressive Methode) angenommen.</param>
        <summary>Gibt einen Wert zurück, der die Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum mithilfe der geometrisch degressiven Abschreibungsmethode oder einer von Ihnen gewählten Methode angibt.</summary>
        <returns>Die Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum mithilfe der geometrisch degressiven Abschreibungsmethode oder einer von Ihnen gewählten Methode.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Double-abnehmende Ausgleichs Methode berechnet die Abschreibung mit beschleunigter Geschwindigkeit. Die Abschreibung ist im ersten Zeitraum am höchsten und wird in aufeinander folgenden Zeiträumen verringert.  
  
 Die `Life`-und `Period` Argumente müssen in denselben Einheiten ausgedrückt werden. Wenn `Life` z. b. in Monaten angegeben wird, müssen `Period` auch in Monaten angegeben werden. Alle Argumente müssen positive Zahlen sein.  
  
 Die `DDB`-Funktion verwendet die folgende Formel, um die Abschreibung für einen bestimmten Zeitraum zu berechnen:  
  
 Abschreibung/Zeitraum = ((Kosten-Rettung) * Faktor)/Leben  
  
   
  
## Examples  
 In diesem Beispiel wird die `DDB`-Funktion verwendet, um die Abschreibung eines Assets für einen angegebenen Zeitraum mit den Anfangskosten (`InitCost`), dem Wert für die Wiederverwendung am Ende der nützlichen Lebensdauer des Assets (`SalvageVal`), der Gesamtlebensdauer des Assets in Jahren (`LifeTime`) und dem Zeitraum in Jahren zurückzugeben, für den die Abschreibung berechnet wird (`Depr`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0, oder <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich Der Zinssatz pro Zeitraum. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="NPer">Erforderlich Die Gesamtzahl der Zahlungszeiträume für die Annuität. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
        <param name="Pmt">Erforderlich Die in jedem Zeitraum zu leistende Zahlung. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
        <param name="PV">Optional. Der Barwert (oder Gesamtbetrag) einer Folge zukünftiger Zahlungen. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <see langword="DueDate.EndOfPeriod" /> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <see langword="DueDate.BegOfPeriod" />, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn die Werte nicht angegeben werden, wird <see langword="DueDate.EndOfPeriod" /> angenommen.</param>
        <summary>Gibt einen Wert zurück, der den zukünftigen Wert einer Annuität bei regelmäßigen, konstanten Zahlungsausgängen und einem konstanten Zinssatz angibt.</summary>
        <returns>Der zukünftige Wert einer Annuität bei regelmäßigen, konstanten Zahlungsausgängen und einem konstanten Zinssatz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von festgelegten Bargeldzahlungen im Laufe der Zeit. Eine Annuität kann ein Kredit (z. b. eine Heim Hypothek) oder eine Investition (z. b. ein monatlicher Einsparungs Plan) sein.  
  
 Die `Rate`-und `NPer` Argumente müssen mithilfe von Zahlungs Zeiträumen berechnet werden, die in den gleichen Einheiten ausgedrückt werden. Wenn `Rate` beispielsweise mithilfe von Monaten berechnet wird, müssen `NPer` auch mithilfe von Monaten berechnet werden.  
  
 Bei allen Argumenten wird die Zahlung per Bargeld (z. b. bei Einsparungen bei Einsparungen) durch negative Zahlen dargestellt. das Empfangen von Bargeld (z. b. Dividenden Überprüfungen) wird durch positive Zahlen dargestellt.  
  
   
  
## Examples  
 In diesem Beispiel wird die `FV`-Funktion verwendet, um den zukünftigen Wert einer Investition mit der prozentualen Rate pro Zeitraum (`APR / 12`), der Gesamtzahl der Zahlungen (`TotPmts`), der Zahlung (`Payment`), dem aktuellen Wert der Investition (`PVal`) und einer Zahl, die angibt, ob die Zahlung am Anfang oder Ende des Zahlungszeitraums (`PayType`) erfolgt, zurückzugeben. Beachten Sie, dass die `Payment` eine negative Zahl darstellt, da ein kostenpflichtiges Guthaben darstellt.  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich Der Zinssatz pro Zeitraum. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="Per">Erforderlich Der Zahlungszeitraum im Bereich von 1 bis <paramref name="NPer" />.</param>
        <param name="NPer">Erforderlich Die Gesamtzahl der Zahlungszeiträume für die Annuität. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
        <param name="PV">Erforderlich Der Barwert oder heutige Wert einer Folge zukünftiger Einnahmen oder Ausgaben. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Optional. Der zukünftige Wert oder Kassenbestand, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert zurück, der die Zinszahlung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</summary>
        <returns>Die Zinszahlung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von festgelegten Bargeldzahlungen im Laufe der Zeit. Eine Annuität kann ein Kredit (z. b. eine Heim Hypothek) oder eine Investition (z. b. ein monatlicher Einsparungs Plan) sein.  
  
 Die `Rate`-und `NPer` Argumente müssen mithilfe von Zahlungs Zeiträumen berechnet werden, die in den gleichen Einheiten ausgedrückt werden. Wenn `Rate` beispielsweise mithilfe von Monaten berechnet wird, müssen `NPer` auch mithilfe von Monaten berechnet werden.  
  
 Bei allen Argumenten wird die Zahlung per Bargeld (z. b. bei Einsparungen bei Einsparungen) durch negative Zahlen dargestellt. das Empfangen von Bargeld (z. b. Dividenden Überprüfungen) wird durch positive Zahlen dargestellt.  
  
   
  
## Examples  
 In diesem Beispiel wird die `IPmt`-Funktion verwendet, um zu berechnen, welcher Betrag einer Zahlung von Interesse ist, wenn alle Zahlungen den gleichen Wert haben. Dies sind die prozentualen Prozentsätze pro Zeitraum (`APR / 12`). der Zahlungszeitraum, für den der Interessen Anteil erwünscht ist (`Period`), die Gesamtanzahl der Zahlungen (`TotPmts`), der aktuelle Wert oder der Prinzipal des Darlehens (`PVal`), der zukünftige Wert des Darlehens (`FVal`) und eine Zahl, die angibt, ob die Zahlung am Anfang oder Ende des Zahlungszeitraums (`PayType`) fällig ist.  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;= 0 oder <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR : Double[] * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Erforderlich Ein Array von Werten des Typs <see cref="T:System.Double" />, die Cashflowwerte enthalten. Das Array muss mindestens einen negativen Wert (Zahlungsausgang) und einen positiven Wert (Zahlungseingang) enthalten.</param>
        <param name="Guess">Optional. Ein Objekt, das einen von Ihnen geschätzten Wert enthält, der von <see langword="IRR" /> zurückgegeben wird. Wird der Wert nicht angegeben, so ist <paramref name="Guess" /> gleich 0,1 (10 Prozent).</param>
        <summary>Gibt einen Wert zurück, der den internen Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen) angibt.</summary>
        <returns>Der interne Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die interne Rate der Rückgabe ist der Zinssatz, der für eine Investition empfangen wird, die aus Zahlungen und Bestätigungen besteht, die in regelmäßigen Abständen stattfinden.  
  
 Die `IRR`-Funktion verwendet die Reihenfolge der Werte im Array, um die Reihenfolge der Zahlungen und Bestätigungen zu interpretieren. Stellen Sie sicher, dass Sie die Zahlungs-und Empfangs Werte in der richtigen Reihenfolge eingeben. Der Cashflow für jeden Zeitraum muss nicht korrigiert werden, da er für eine Annuität gilt.  
  
 `IRR` wird durch Iterationen berechnet. Beginnend mit dem Wert `Guess``IRR` die Berechnung durchlaufen, bis das Ergebnis innerhalb von 0,00001 Prozent genau ist. Wenn `IRR` ein Ergebnis nach 20 versuchen nicht finden kann, tritt ein Fehler auf.  
  
   
  
## Examples  
 In diesem Beispiel gibt die `IRR`-Funktion den internen Satz der Rückgabe für eine Reihe von fünf Cashflows zurück, die im Array `Values()`enthalten sind. Das erste Array Element ist ein negativer Cashflow, der die geschäftlichen Startkosten darstellt. Die restlichen vier Cashflows stellen positive Cashflows für die folgenden vier Jahre dar. `Guess` ist die geschätzte interne Rate der Rückgabe.  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Arrayargumentwerte sind ungültig oder <paramref name="Guess" /> &lt;= –1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR : Double[] * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Erforderlich Ein Array von Werten des Typs <see cref="T:System.Double" />, die Cashflowwerte enthalten. Das Array muss mindestens einen negativen Wert (Zahlungsausgang) und einen positiven Wert (Zahlungseingang) enthalten.</param>
        <param name="FinanceRate">Erforderlich Der Zinssatz, der als Finanzierungskosten anfällt.</param>
        <param name="ReinvestRate">Erforderlich Der Zinssatz, der bei erneuter Anlage von Kapital erzielt werden kann.</param>
        <summary>Gibt einen Wert zurück, der den geänderten internen Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen) angibt.</summary>
        <returns>Der geänderte interne Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die geänderte interne Rate der Rückgabe ist die interne Rate der Rückgabe, wenn Zahlungen und Bestätigungen zu unterschiedlichen Preisen finanziert werden. Die `MIRR`-Funktion berücksichtigt sowohl die Kosten der Investition (`FinanceRate`) als auch das Zinssatz, das bei der erneuten Investition von Bargeld (`ReinvestRate`) eingegangen ist.  
  
 Die `FinanceRate`-und `ReinvestRate` Argumente sind Prozentsätze, die als Dezimalwerte ausgedrückt werden. Beispielsweise werden 12 Prozent als 0,12 ausgedrückt.  
  
 Die `MIRR`-Funktion verwendet die Reihenfolge der Werte im Array, um die Reihenfolge der Zahlungen und Bestätigungen zu interpretieren. Stellen Sie sicher, dass Sie die Zahlungs-und Empfangs Werte in der richtigen Reihenfolge eingeben.  
  
   
  
## Examples  
 In diesem Beispiel wird die `MIRR`-Funktion verwendet, um die geänderte interne Rate der Rückgabe für eine Reihe von Cashflows zurückzugeben, die im Array `Values()`enthalten sind. `LoanAPR` die die Finanzierungs Interessen darstellt, und `InvAPR` den Zinssatz, der bei der erneuten Investition eingegangen ist.  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Rang von <paramref name="ValueArray" /> ist ungleich 1, <paramref name="FinanceRate" /> = -1 oder <paramref name="ReinvestRate" /> = -1</exception>
        <exception cref="T:System.DivideByZeroException">Division durch 0 (null) durchgeführt.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich Der Zinssatz pro Zeitraum. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="Pmt">Erforderlich Die in jedem Zeitraum zu leistende Zahlung. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
        <param name="PV">Erforderlich Der Barwert oder heutige Wert einer Folge zukünftiger Einnahmen oder Ausgaben. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Optional. Der zukünftige Wert oder Kassenbestand, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert zurück, der die Anzahl der Zeiträume für eine Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</summary>
        <returns>Die Anzahl der Zeiträume für eine Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von Fixed-Bargeldzahlungen, die über einen bestimmten Zeitraum durchgeführt werden. Eine Annuität kann ein Kredit (z. b. eine Heim Hypothek) oder eine Investition (z. b. ein monatlicher Einsparungs Plan) sein.  
  
 Bei allen Argumenten wird die Zahlung per Bargeld (z. b. bei Einsparungen bei Einsparungen) durch negative Zahlen dargestellt. das Empfangen von Bargeld (z. b. Dividenden Überprüfungen) wird durch positive Zahlen dargestellt.  
  
   
  
## Examples  
 In diesem Beispiel wird die `NPer`-Funktion verwendet, um die Anzahl der Zeiträume zurückzugeben, in denen Zahlungen gezahlt werden müssen, um einen Kredit zu bezahlen, dessen Wert in `PVal`enthalten ist. Außerdem werden die Prozentsätze für den Zinssatz pro Zeitraum (`APR / 12`), die Zahlung (`Payment`), der zukünftige Wert des Darlehens (`FVal`) und eine Zahl angegeben, die angibt, ob die Zahlung am Anfang oder Ende des Zahlungszeitraums (`PayType`) fällig ist.  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Rate" /> = 0 und <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double * Double[] -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich Der Diskontsatz bezogen auf die Dauer des Zeitraums (ausgedrückt als Dezimalzahl).</param>
        <param name="ValueArray">Erforderlich Ein Array von Werten des Typs <see cref="T:System.Double" />, die Cashflowwerte enthalten. Das Array muss mindestens einen negativen Wert (Zahlungsausgang) und einen positiven Wert (Zahlungseingang) enthalten.</param>
        <summary>Gibt einen Wert zurück, der den Nettobarwert einer Investition bei regelmäßigen Cashflows (Aus- und Einzahlungen) und einem Diskontsatz angibt.</summary>
        <returns>Der Nettobarwert einer Investition bei regelmäßigen Cashflows (Aus- und Einzahlungen) und einem Diskontsatz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Netto Barwert einer Investition ist der aktuelle Wert einer zukünftigen Reihe von Zahlungen und Bestätigungen.  
  
 Die `NPV`-Funktion verwendet die Reihenfolge der Werte im Array, um die Reihenfolge der Zahlungen und Bestätigungen zu interpretieren. Stellen Sie sicher, dass Sie die Zahlungs-und Empfangs Werte in der richtigen Reihenfolge eingeben.  
  
 Die `NPV` Investition beginnt einen Zeitraum vor dem Datum des ersten Cashflows und endet mit dem letzten Cashflow-Wert im Array.  
  
 Die Berechnung des Netto aktuellen Werts basiert auf zukünftigen Cashflows. Wenn Ihr erster Cashflow zu Beginn des ersten Zeitraums auftritt, muss der erste Wert dem Wert hinzugefügt werden, der von `NPV` zurückgegeben wird, und er darf nicht in den Cashflowwerten `ValueArray`enthalten sein.  
  
 Die `NPV`-Funktion ähnelt der `PV`-Funktion (Present Value), mit der Ausnahme, dass die `PV`-Funktion das Starten von Cashflows entweder am Ende oder am Anfang eines Zeitraums zulässt. Im Gegensatz zur Variablen `NPV` Cashflow-Werte müssen `PV` Cashflows während der gesamten Investition korrigiert werden.  
  
   
  
## Examples  
 In diesem Beispiel wird die `NPV`-Funktion verwendet, um den Netto Barwert für eine Reihe von Cashflows zurückzugeben, die im Array `values()`enthalten sind. Der in `FixedRetRate`gespeicherte Rückgabewert stellt die Fixed Internal-Rate der Rückgabe dar.  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" /> ist gleich <see langword="Nothing" />. Bereich von <paramref name="ValueArray" /> &lt;&gt; 1 oder <paramref name="Rate" /> = –1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich Der Zinssatz pro Zeitraum. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="NPer">Erforderlich Die Gesamtzahl der Zahlungszeiträume für die Annuität. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 × 12 (oder 48).</param>
        <param name="PV">Erforderlich Der Barwert (oder Gesamtbetrag), den eine Folge zukünftiger Aus- oder Einzahlungen jetzt ausmacht. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Optional. Der zukünftige Wert oder Kassenbestand, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder über 18 Jahre 50.000 Euro ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert zurück, der die Zahlung für eine Annuität bei regelmäßigen konstanten Zahlungsausgängen und konstantem Zinssatz angibt.</summary>
        <returns>Die Zahlung für eine Annuität bei regelmäßigen konstanten Zahlungsausgängen und konstantem Zinssatz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von festgelegten Bargeldzahlungen innerhalb eines Zeitraums. Eine Annuität kann ein Kredit (z. b. eine Heim Hypothek) oder eine Investition (z. b. ein monatlicher Einsparungs Plan) sein.  
  
 Die `Rate`-und `NPer` Argumente müssen mithilfe von Zahlungs Zeiträumen berechnet werden, die in den gleichen Einheiten ausgedrückt werden. Wenn `Rate` beispielsweise mithilfe von Monaten berechnet wird, müssen `NPer` auch mithilfe von Monaten berechnet werden.  
  
 Bei allen Argumenten wird die Zahlung per Bargeld (z. b. der Einsparungen bei Einsparungen) durch negative Zahlen dargestellt. das Empfangen von Bargeld (z. b. Dividenden Überprüfungen) wird durch positive Zahlen dargestellt.  
  
   
  
## Examples  
 In diesem Beispiel wird die `Pmt`-Funktion verwendet, um die monatliche Zahlung für einen Kredit während eines bestimmten Zeitraums zurückzugeben. Dabei handelt es sich um den Prozentsatz der Prozentsätze pro Zeitraum (`APR / 12`), die Gesamtzahl der Zahlungen (`TotPmts`), den derzeitigen Wert oder den Prinzipal des Darlehens (`PVal`), den zukünftigen Wert des Darlehens (`FVal`) und eine Zahl, die angibt, ob die Zahlung am Anfang oder Ende des Zahlungszeitraums fällig ist `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich Der Zinssatz pro Zeitraum. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="Per">Erforderlich Der Zahlungszeitraum im Bereich von 1 bis <paramref name="NPer" />.</param>
        <param name="NPer">Erforderlich Die Gesamtzahl der Zahlungszeiträume für die Annuität. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
        <param name="PV">Erforderlich Der aktuelle Wert einer Folge zukünftiger Einnahmen oder Ausgaben. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Optional. Der zukünftige Wert oder Kassenbestand, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert zurück, der die Hauptzahlung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</summary>
        <returns>Die Hauptzahlung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von Fixed-Bargeldzahlungen, die über einen bestimmten Zeitraum durchgeführt werden. Eine Annuität kann ein Kredit (z. b. eine Heim Hypothek) oder eine Investition (z. b. ein monatlicher Einsparungs Plan) sein.  
  
 Die `Rate`-und `NPer` Argumente müssen mithilfe von Zahlungs Zeiträumen berechnet werden, die in den gleichen Einheiten ausgedrückt werden. Wenn `Rate` beispielsweise mithilfe von Monaten berechnet wird, müssen `NPer` auch mithilfe von Monaten berechnet werden.  
  
 Bei allen Argumenten wird die Zahlung per Bargeld (z. b. der Einsparungen bei Einsparungen) durch negative Zahlen dargestellt. das Empfangen von Bargeld (z. b. Dividenden Überprüfungen) wird durch positive Zahlen dargestellt.  
  
   
  
## Examples  
 In diesem Beispiel wird die `PPmt`-Funktion verwendet, um zu berechnen, welcher Betrag einer Zahlung für einen bestimmten Zeitraum Prinzipal ist, wenn alle Zahlungen den gleichen Wert haben. Dies sind die prozentualen Prozentsätze pro Zeitraum (`APR / 12`). der Zahlungszeitraum, für den der Prinzipal Anteil gewünscht wird (`Period`), die Gesamtanzahl der Zahlungen (`TotPmts`), der aktuelle Wert oder der Prinzipal des Darlehens (`PVal`), der zukünftige Wert des Darlehens (`FVal`) und eine Zahl, die angibt, ob die Zahlung am Anfang oder Ende des Zahlungszeitraums (`PayType`) fällig ist.  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;=0 oder <paramref name="Per" /> &gt; <paramref name="NPer" />.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich Der Zinssatz pro Zeitraum. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="NPer">Erforderlich Die Gesamtzahl der Zahlungszeiträume für die Annuität. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
        <param name="Pmt">Erforderlich Die in jedem Zeitraum zu leistende Zahlung. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
        <param name="FV">Optional. Der Endwert oder Kassenbestand, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert zurück, der den Barwert einer Annuität bei zukünftig regelmäßig und konstant zu leistenden Zahlungsausgängen und einem konstanten Zinssatz angibt.</summary>
        <returns>Der Barwert einer Annuität bei zukünftig regelmäßig und konstant zu leistenden Zahlungsausgängen und einem konstanten Zinssatz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von Fixed-Bargeldzahlungen, die über einen bestimmten Zeitraum durchgeführt werden. Eine Annuität kann ein Kredit (z. b. eine Heim Hypothek) oder eine Investition (z. b. ein monatlicher Einsparungs Plan) sein.  
  
 Die `Rate`-und `NPer` Argumente müssen mithilfe von Zahlungs Zeiträumen berechnet werden, die in den gleichen Einheiten ausgedrückt werden. Wenn `Rate` beispielsweise mithilfe von Monaten berechnet wird, müssen `NPer` auch mithilfe von Monaten berechnet werden.  
  
 Bei allen Argumenten wird die Zahlung per Bargeld (z. b. bei Einsparungen bei Einsparungen) durch negative Zahlen dargestellt. das Empfangen von Bargeld (z. b. Dividenden Überprüfungen) wird durch positive Zahlen dargestellt.  
  
   
  
## Examples  
 In diesem Beispiel gibt die `PV`-Funktion den aktuellen Wert einer $1 Million-Annuität zurück, die $50.000 ein Jahr für die nächsten 20 Jahre bereitstellt. Die Voraussetzung ist der erwartete Jahresprozentsatz (`APR`), die Gesamtanzahl der Zahlungen (`TotPmts`), der Betrag der einzelnen Zahlungen (`YrIncome`), der Gesamtwert der Investition (`FVal`) und eine Zahl, die angibt, ob jede Zahlung am Anfang oder Ende des Zahlungszeitraums (`PayType`) erfolgt. Beachten Sie, dass `YrIncome` eine negative Zahl ist, da Sie Bargeld aus der jährlichen Jahres Angabe darstellt.  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">Erforderlich Die Gesamtzahl der Zahlungszeiträume für die Annuität. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 * 12 (oder 48).</param>
        <param name="Pmt">Erforderlich Die in jedem Zeitraum zu leistende Zahlung. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
        <param name="PV">Erforderlich Der Barwert oder heutige Wert einer Folge zukünftiger Einnahmen oder Ausgaben. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Optional. Der Endwert oder Kassenbestand, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <param name="Guess">Optional. Der von Ihnen geschätzte Wert wird von <see langword="Rate" /> zurückgegeben. Wird der Wert nicht angegeben, so ist <paramref name="Guess" /> gleich 0,1 (10 Prozent).</param>
        <summary>Gibt einen Wert zurück, der den Zinssatz einer Annuität pro Zeitraum angibt.</summary>
        <returns>Der Zinssatz einer Annuität pro Zeitraum.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von Fixed-Bargeldzahlungen, die über einen bestimmten Zeitraum durchgeführt werden. Eine Annuität kann ein Kredit (z. b. eine Heim Hypothek) oder eine Investition (z. b. ein monatlicher Einsparungs Plan) sein.  
  
 Bei allen Argumenten wird die Zahlung per Bargeld (z. b. bei Einsparungen bei Einsparungen) durch negative Zahlen dargestellt. das Empfangen von Bargeld (z. b. Dividenden Überprüfungen) wird durch positive Zahlen dargestellt.  
  
 `Rate` wird durch Iterationen berechnet. Beginnend mit dem Wert `Guess``Rate` die Berechnung durchlaufen, bis das Ergebnis innerhalb von 0,00001 Prozent genau ist. Wenn `Rate` ein Ergebnis nach 20 versuchen nicht finden kann, tritt ein Fehler auf. Wenn der Schätzwert 10% beträgt und `Rate` fehlschlägt, versuchen Sie es mit einem anderen Wert für `Guess`.  
  
   
  
## Examples  
 In diesem Beispiel wird die `Rate`-Funktion verwendet, um den Zinssatz eines Darlehens anhand der Gesamtanzahl der Zahlungen (`TotPmts`) zu berechnen. der Betrag der Kreditzahlung (`Payment`), der aktuelle Wert oder der Prinzipal des Darlehens (`PVal`), der zukünftige Wert des Darlehens (`FVal`), eine Zahl, die angibt, ob die Zahlung am Anfang oder Ende des Zahlungszeitraums (`PayType`) oder eine Näherung des erwarteten Zinssatz (`Guess`) fällig ist.  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Erforderlich Die Anschaffungskosten des Vermögenswerts.</param>
        <param name="Salvage">Erforderlich Der Wert des Vermögenswerts am Ende seiner Nutzungsdauer.</param>
        <param name="Life">Erforderlich Die Länge der Nutzungsdauer des Vermögenswerts.</param>
        <summary>Gibt einen Wert zurück, der die arithmetische Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum angibt.</summary>
        <returns>Die arithmetische Abschreibung eines Vermögenswerts über einen einzelnen Zeitraum.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Abschreibungs Zeitraum muss in derselben Einheit wie das `Life` Argument ausgedrückt werden. Alle Argumente müssen positive Zahlen sein.  
  
   
  
## Examples  
 In diesem Beispiel wird die `SLN`-Funktion verwendet, um die geradlinige Abschreibung eines Assets für einen einzelnen Zeitraum mit den Anfangskosten des Assets (`InitCost`), den Wert für die Rettung am Ende der nützlichen Lebensdauer des Assets (`SalvageVal`) und die Gesamtlebensdauer des Assets in Jahren (`LifeTime`) zurückzugeben.  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Erforderlich Die Anschaffungskosten des Vermögenswerts.</param>
        <param name="Salvage">Erforderlich Der Wert des Vermögenswerts am Ende seiner Nutzungsdauer.</param>
        <param name="Life">Erforderlich Die Länge der Nutzungsdauer des Vermögenswerts.</param>
        <param name="Period">Erforderlich Der Zeitraum für den die Abschreibung des Vermögenswerts berechnet wird.</param>
        <summary>Gibt einen Wert zurück, der die Jahresabschreibung eines Vermögenswerts für einen bestimmten Zeitraum angibt.</summary>
        <returns>Die Jahresabschreibung eines Vermögenswerts über einen bestimmten Zeitraum.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Life`-und `Period` Argumente müssen in denselben Einheiten ausgedrückt werden. Wenn `Life` z. b. in Monaten angegeben wird, müssen `Period` auch in Monaten angegeben werden. Alle Argumente müssen positive Zahlen sein.  
  
   
  
## Examples  
 In diesem Beispiel wird die `SYD`-Funktion verwendet, um die Abschreibung eines Assets für einen angegebenen Zeitraum zurückzugeben, wenn die Anfangskosten des Assets (`InitCost`), der Wert für die Rettung am Ende der nützlichen Lebensdauer des Assets (`SalvageVal`) und die Gesamtlebensdauer des Assets in Jahren (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" />, oder <paramref name="Period" /> &lt;=0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Finanzdaten: Zusammenfassung</related>
      </Docs>
    </Member>
  </Members>
</Type>

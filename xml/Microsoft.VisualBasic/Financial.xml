<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="597d502122a98f40bf01b84397044f3c295f1b2b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30351114" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Das <see langword="Financial" />-Modul enthält Prozeduren, mit denen finanzielle Operationen ausgeführt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Member der Visual Basic-Laufzeitbibliothek, die finanzielle Berechnungen wie Abschreibung, aktuelle und zukünftige Werte, Zinssätzen, Raten der Rückgabe und Zahlungen ausführen.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Rate` Funktion den Zinssatz eines Darlehens berechnet die Gesamtzahl der Zahlungen erhält (`TotPmts`), die Menge der Kredit Zahlung (`Payment`), den Barwert oder Prinzipal, der das Darlehen (`PVal`), die Zukunft Wert, der das Darlehen (`FVal`), eine Zahl, die angibt, ob die Zahlung fällig am Anfang oder Ende der Zahlungsfrist ist (`PayType`), und einen Näherungswert der erwarteten Zinssatz (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Anschaffungskosten des Vermögenswerts angibt.</param>
        <param name="Salvage">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Vermögenswert am Ende der Nutzungsdauer angibt.</param>
        <param name="Life">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Nutzungsdauer des Vermögenswerts angibt.</param>
        <param name="Period">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zeitraum angibt, für den die Abschreibung des Vermögenswerts berechnet wird.</param>
        <param name="Factor">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Faktor angibt, um den der Wert vermindert wird. Wird der Wert nicht angegeben, so wird 2 (geometrisch degressive Methode) angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum mithilfe der geometrisch degressiven Abschreibungsmethode oder einer von Ihnen ausgewählten Methode angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum mithilfe der geometrisch degressiven Abschreibungsmethode oder einer von Ihnen ausgewählten Methode angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der degressiven Doppelraten berechnet eine beschleunigte Abschreibung. Abschreibung ist in der ersten Periode am höchsten und nimmt in aufeinander folgenden Punkte.  
  
 Die `Life` und `Period` Argumente müssen in den gleichen Einheiten ausgedrückt werden. Z. B. wenn `Life` erhält in Monaten `Period` muss ebenfalls in Monaten angegeben werden. Alle Argumente müssen positive Zahlen sein.  
  
 Die `DDB` Funktion verwendet die folgende Formel zum Berechnen von Abschreibungen für einen bestimmten Zeitraum:  
  
 Abschreibung / Zeitraum = ((Cost – Salvage) * Faktor) / leben  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `DDB` -Funktion die Abschreibung einer Anlage für einen bestimmten Zeitraum die anfängliche Kosten für zurückgibt (`InitCost`), der Restwert am Ende der Lebensdauer des Medienobjekts (`SalvageVal`), die insgesamt Nutzungsdauer in Jahren (`LifeTime`), und für den Zeitraum in Jahren für den das veralten von Ressourcen berechnet wird (`Depr`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0, oder <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz pro Zeitraum angibt. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="NPer">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Gesamtanzahl der Zahlungszeiträume für die Annuität angibt. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
        <param name="Pmt">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Zahlung pro Zeitraum angibt. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
        <param name="PV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Barwert (oder Gesamtbetrag) einer Folge zukünftiger Zahlungen zum jetzigen Zeitpunkt angibt. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <see langword="DueDate.EndOfPeriod" /> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <see langword="DueDate.BegOfPeriod" />, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wird der Wert nicht angegeben, so wird <see langword="DueDate.EndOfPeriod" /> angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den zukünftigen Wert einer Annuität bei regelmäßigen, konstanten Zahlungsausgängen und einem konstanten Zinssatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den zukünftigen Wert einer Annuität bei regelmäßigen, konstanten Zahlungsausgängen und einem konstanten Zinssatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von festen Bargeld Zahlungen, die mit der Zeit vorgenommen. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypotheken) oder einer Investition (z. B. einen monatlichen einsparungen Plan) sein.  
  
 Die `Rate` und `NPer` Argumente müssen mit der in den gleichen Einheiten ausgedrückt Perioden berechnet werden. Z. B. wenn `Rate` wird in Monaten berechnet, `NPer` auch Monaten berechnet werden muss.  
  
 Für alle Argumente wird (z. B. einzahlungen zu einsparungen) ausgezahlt Bargeld durch negative Zahlen dargestellt; Erhaltener (z. B. Dividend überprüft) wird durch positive Zahlen dargestellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FV` rate von Funktion, um den zukünftigen Wert einer Investition zurückzugeben, die pro Zeitraum anfallen (`APR / 12`), die Gesamtzahl der Zahlungen (`TotPmts`), die Zahlung (`Payment`), der aktuelle Wert der die Investition (`PVal`), und eine Zahl, die angibt, ob die Zahlung am Anfang oder Ende der Zahlungsfrist (`PayType`). Beachten Sie, dass, weil `Payment` Bargeld ausgezahlt, stellt es eine negative Zahl ist.  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz pro Zeitraum angibt. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="Per">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zahlungszeitraum im Bereich von 1 bis <c>NPer</c> angibt.</param>
        <param name="NPer">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Gesamtanzahl der Zahlungszeiträume für die Annuität angibt. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
        <param name="PV">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Barwert oder heutigen Wert einer Folge zukünftiger Einnahmen oder Ausgaben angibt. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Endwert oder Kontostand angibt, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Zinszahlung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Zinszahlung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von festen Bargeld Zahlungen, die mit der Zeit vorgenommen. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypotheken) oder einer Investition (z. B. einen monatlichen einsparungen Plan) sein.  
  
 Die `Rate` und `NPer` Argumente müssen mit der in den gleichen Einheiten ausgedrückt Perioden berechnet werden. Z. B. wenn `Rate` wird in Monaten berechnet, `NPer` auch Monaten berechnet werden muss.  
  
 Für alle Argumente wird (z. B. einzahlungen zu einsparungen) ausgezahlt Bargeld durch negative Zahlen dargestellt; Erhaltener (z. B. Dividend überprüft) wird durch positive Zahlen dargestellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `IPmt` Funktion berechnet, wie viel eine Zahlung ist der zu überwachende, wenn alle Zahlungen denselben Wert aufweisen. Bei den Zinssatz pro Zeitraum sind (`APR / 12`), der für die der relevante Teil gewünscht Zahlungsfrist (`Period`), die Gesamtzahl der Zahlungen (`TotPmts`), den Barwert oder Prinzipal, der das Darlehen (`PVal`), die zukünftige Wert, der das Darlehen (`FVal`), und eine Zahl, die angibt, ob die Zahlung fällig am Anfang oder Ende der Zahlungsfrist ist (`PayType`).  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;= 0 oder <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Erforderlich. Ein Array von Werten des Typs <see langword="Double" />, die Cashflowwerte enthalten. Das Array muss mindestens einen negativen Wert (Zahlungsausgang) und einen positiven Wert (Zahlungseingang) enthalten.</param>
        <param name="Guess">Dies ist optional. Ein Objekt, das einen von Ihnen geschätzten Wert enthält, der von <see langword="IRR" /> zurückgegeben wird. Wird der Wert nicht angegeben, ist <c>Guess</c> 0,1 (10 Prozent).</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den internen Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen) angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den internen Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen) angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die interne Rendite ist den Zinssatz für eine Investition bestehend aus Ausgänge und Eingänge, die in regelmäßigen Abständen auftreten.  
  
 Die `IRR` Funktion verwendet die Reihenfolge der Werte innerhalb des Arrays, um die Reihenfolge der Ausgänge und Eingänge zu interpretieren. Achten Sie darauf, dass die Einnahmen und Ausgaben in der richtigen Reihenfolge eingeben. Die Cashflow für jede periodische Struktur muss nicht behoben werden muss, wie für eine Annuität angibt.  
  
 `IRR` wird pro Iteration berechnet. Beginnend mit dem Wert des `Guess`, `IRR` Navigieren durch die Berechnung, bis das Ergebnis auf 0,00001 Prozent genau ist. Wenn `IRR` wurde nicht gefunden, ein Ergebnis nach 20 versucht, ein Fehler auftritt.  
  
   
  
## Examples  
 In diesem Beispiel wird die `IRR` Funktion gibt die interne Rendite für eine Reihe von fünf Cashflows im Array `Values()`. Das erste Arrayelement ist ein negativer Cashflow, die Start-Geschäftskosten darstellt. Die übrigen vier Cashflows stellen positive Cashflows für die folgenden vier Jahre dar. `Guess` ist die geschätzte interne Rendite.  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Arrayargumentwerte sind ungültig oder <paramref name="Guess" /> &lt;= –1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Erforderlich. Ein Array von Werten des Typs <see langword="Double" />, die Cashflowwerte enthalten. Das Array muss mindestens einen negativen Wert (Zahlungsausgang) und einen positiven Wert (Zahlungseingang) enthalten.</param>
        <param name="FinanceRate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz angibt, der als Finanzierungskosten anfällt.</param>
        <param name="ReinvestRate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz angibt, der bei erneuter Anlage von Kapital erzielt werden kann.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den geänderten internen Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen) angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den geänderten internen Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen) angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die geänderte interne Rendite ist die interne Rendite aus, wenn Ausgänge und Eingänge mit unterschiedlichen Raten finanziert werden. Die `MIRR` Funktion berücksichtigt sowohl die Kosten der Investition (`FinanceRate`) und den Zinssatz, Bargeld (`ReinvestRate`).  
  
 Die `FinanceRate` und `ReinvestRatearguments` Prozentsätze als Dezimalwerte ausgedrückt werden. 12 Prozent wird z. B. als 0,12 ausgedrückt.  
  
 Die `MIRR` Funktion verwendet die Reihenfolge der Werte innerhalb des Arrays, um die Reihenfolge der Ausgänge und Eingänge zu interpretieren. Achten Sie darauf, dass die Einnahmen und Ausgaben in der richtigen Reihenfolge eingeben.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `MIRR` Funktion, um die geänderte interner Ertragssätze für eine Reihe von Cashflows im Array zurückzugeben `Values()`. `LoanAPR` Stellt die Finanzierung Zinsen und `InvAPR` den Zinssatz Wiederanlage darstellt.  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Rang von <paramref name="ValueArray" /> ist ungleich 1, <paramref name="FinanceRate" /> = -1 oder <paramref name="ReinvestRate" /> = -1</exception>
        <exception cref="T:System.DivideByZeroException">Division durch 0 (null) durchgeführt.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz pro Zeitraum angibt. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="Pmt">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Zahlung pro Zeitraum angibt. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
        <param name="PV">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Barwert oder heutigen Wert einer Folge zukünftiger Einnahmen oder Ausgaben angibt. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Endwert oder Kontostand angibt, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Anzahl der Zeiträume für eine Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Anzahl der Zeiträume für eine Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von konstanten Barzahlungen über einen Zeitraum an. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypotheken) oder einer Investition (z. B. einen monatlichen einsparungen Plan) sein.  
  
 Für alle Argumente wird (z. B. einzahlungen zu einsparungen) ausgezahlt Bargeld durch negative Zahlen dargestellt; Erhaltener (z. B. Dividend überprüft) wird durch positive Zahlen dargestellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `NPer` Funktion, um die Anzahl von Zeiträumen zurückzugeben, währenddessen Zahlungen erfolgen müssen, damit ein Kredit bezahlen, dessen Wert, befindet sich im `PVal`. Darüber hinaus sind die Zinssatz pro Zeitraum (`APR / 12`), die Zahlung (`Payment`), der zukünftige Wert, der das Darlehen (`FVal`), und eine Zahl, die angibt, ob die Zahlung fällig am Anfang oder Ende der Zahlungsfrist ist (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rate" /> = 0 und <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Diskontsatz bezogen auf die Dauer des Zeitraums (ausgedrückt als Dezimalzahl) enthält.</param>
        <param name="ValueArray">Erforderlich. Ein Array von Werten des Typs <see langword="Double" />, die Cashflowwerte enthalten. Das Array muss mindestens einen negativen Wert (Zahlungsausgang) und einen positiven Wert (Zahlungseingang) enthalten.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den Nettobarwert einer Investition bei regelmäßigen Cashflows (Aus- und Einzahlungen) und einem Diskontsatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den Nettobarwert einer Investition bei regelmäßigen Cashflows (Aus- und Einzahlungen) und einem Diskontsatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Nettobarwert einer Investition ist der aktuelle Wert einer zukünftigen Reihe von Ausgänge und Eingänge.  
  
 Die `NPV` Funktion verwendet die Reihenfolge der Werte innerhalb des Arrays, um die Reihenfolge der Ausgänge und Eingänge zu interpretieren. Achten Sie darauf, dass die Einnahmen und Ausgaben in der richtigen Reihenfolge eingeben.  
  
 Die `NPV` Investitionen einen Zeitraum vor dem Datum der ersten Zahlungswert beginnt und endet mit dem letzten Cashflow-Wert im Array.  
  
 Die Berechnung des Werts basiert auf zukünftigen Cashflows zu berücksichtigen. Wenn der erste Cashflow am Anfang der ersten Periode auftritt, muss der erste Wert hinzugefügt werden, um den Rückgabewert von `NPV` und darf nicht in den Werten Cashflow einbezogen werden `ValueArray`.  
  
 Die `NPV` Funktion ist vergleichbar mit der `PV` Funktion (Barwert), außer dass die `PV` Funktion ermöglicht Cashflows am Ende oder am Anfang eines Zeitraums beginnen. Im Gegensatz zu den Variablen `NPV` zahlungswerte, `PV` Cashflows während der Investition korrigiert werden muss.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `NPV` Funktion, um den Nettobarwert für eine Reihe von Cashflows im Array zurückzugeben `values()`. Der Rückgabewert, gespeichert `FixedRetRate`, die feste interne Rendite darstellt.  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ValueArray" /> ist gleich <see langword="Nothing" />. Bereich von <paramref name="ValueArray" /> &lt;&gt; 1 oder <paramref name="Rate" /> = –1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz pro Zeitraum angibt. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="NPer">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Gesamtanzahl der Zahlungszeiträume für die Annuität angibt. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 × 12 (oder 48).</param>
        <param name="PV">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Barwert oder heutigen Wert einer Folge zukünftiger Aus- oder Einzahlungen angibt. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Endwert oder Kontostand angibt, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder über 18 Jahre 50.000 Euro ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Zahlung für eine Annuität bei regelmäßigen konstanten Zahlungsausgängen und konstantem Zinssatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Zahlung für eine Annuität bei regelmäßigen konstanten Zahlungsausgängen und konstantem Zinssatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von festen Bargeld Zahlungen, die eine bestimmte Zeitspanne vorgenommen. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypotheken) oder einer Investition (z. B. einen monatlichen einsparungen Plan) sein.  
  
 Die `Rate` und `NPer` Argumente müssen mit der in den gleichen Einheiten ausgedrückt Perioden berechnet werden. Z. B. wenn `Rate` wird in Monaten berechnet, `NPer` auch Monaten berechnet werden muss.  
  
 Für alle Argumente wird (z. B. einzahlungen zu einsparungen) bezahlt Bargeld durch negative Zahlen dargestellt; Erhaltener (z. B. Dividend überprüft) wird durch positive Zahlen dargestellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Pmt` Funktion, um die monatliche Zahlung für einen Kredit während eines festen Zeitraums zurückgeben. Bei den Zinssatz pro Zeitraum sind (`APR / 12`), die Gesamtzahl der Zahlungen (`TotPmts`), den Barwert oder Prinzipal, der das Darlehen (`PVal`), der zukünftige Wert, der das Darlehen (`FVal`), und eine Zahl, der angibt, ob die die Zahlung ist fällig am Anfang oder Ende der Zahlungsfrist `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz pro Zeitraum angibt. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="Per">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zahlungszeitraum im Bereich von 1 bis <c>NPer</c> angibt.</param>
        <param name="NPer">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Gesamtanzahl der Zahlungszeiträume für die Annuität angibt. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
        <param name="PV">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den aktuellen Wert einer Folge zukünftiger Einnahmen oder Ausgaben angibt. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Endwert oder Kontostand angibt, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Tilgung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Tilgung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von konstanten Barzahlungen über einen Zeitraum an. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypotheken) oder einer Investition (z. B. einen monatlichen einsparungen Plan) sein.  
  
 Die `Rate` und `NPer` Argumente müssen mit der in den gleichen Einheiten ausgedrückt Perioden berechnet werden. Z. B. wenn `Rate` wird in Monaten berechnet, `NPer` auch Monaten berechnet werden muss.  
  
 Für alle Argumente wird (z. B. einzahlungen zu einsparungen) bezahlt Bargeld durch negative Zahlen dargestellt; Erhaltener (z. B. Dividend überprüft) wird durch positive Zahlen dargestellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `PPmt` Funktion berechnet, wie viel eine Zahlung für einen bestimmten Zeitraum Prinzipal ist, wenn alle Zahlungen denselben Wert aufweisen. Bei den Zinssatz pro Zeitraum sind (`APR / 12`), die Zahlungsfrist für die Hauptteils gewünscht (`Period`), die Gesamtzahl der Zahlungen (`TotPmts`), den Barwert oder Prinzipal, der das Darlehen (`PVal`), die zukünftige Wert, der das Darlehen (`FVal`), und eine Zahl, die angibt, ob die Zahlung fällig am Anfang oder Ende der Zahlungsfrist ist (`PayType`).  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;=0 oder <paramref name="Per" /> &gt; <paramref name="NPer" />.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zinssatz pro Zeitraum angibt. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
        <param name="NPer">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Gesamtanzahl der Zahlungszeiträume für die Annuität angibt. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
        <param name="Pmt">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die zu leistende Zahlung pro Zeitraum angibt. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
        <param name="FV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Endwert oder Kontostand angibt, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den Barwert einer Annuität bei zukünftig regelmäßig und konstant zu leistenden Zahlungsausgängen und einem konstanten Zinssatz angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den Barwert einer Annuität bei zukünftig regelmäßig und konstant zu leistenden Zahlungsausgängen und einem konstanten Zinssatz angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von konstanten Barzahlungen über einen Zeitraum an. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypotheken) oder einer Investition (z. B. einen monatlichen einsparungen Plan) sein.  
  
 Die `Rate` und `NPer` Argumente müssen mit der in den gleichen Einheiten ausgedrückt Perioden berechnet werden. Z. B. wenn `Rate` wird in Monaten berechnet, `NPer` auch Monaten berechnet werden muss.  
  
 Für alle Argumente wird (z. B. einzahlungen zu einsparungen) ausgezahlt Bargeld durch negative Zahlen dargestellt; Erhaltener (z. B. Dividend überprüft) wird durch positive Zahlen dargestellt.  
  
   
  
## Examples  
 In diesem Beispiel wird die `PV` Funktion gibt den Barwert einer Annuität 1.000.000 $vorliegt, die 50.000 Dollar pro Jahr für den nächsten 20 Jahren bereitstellt. Bereitgestellten sind die erwarteten jährlichen Prozentsatz (`APR`), die Gesamtzahl der Zahlungen (`TotPmts`), jede Zahlungsbetrag (`YrIncome`), die zukünftige Gesamtwert der Investition (`FVal`), und eine Zahl, der angibt, ob jede die Zahlung erfolgt am Anfang oder Ende der Zahlungsfrist (`PayType`). Beachten Sie, dass `YrIncome` eine negative Zahl ist, da er Zahlungsausgang von der Annuität darstellt.  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Gesamtanzahl der Zahlungszeiträume für die Annuität angibt. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 * 12 (oder 48).</param>
        <param name="Pmt">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die zu leistende Zahlung pro Zeitraum angibt. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
        <param name="PV">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Barwert oder heutigen Wert einer Folge zukünftiger Einnahmen oder Ausgaben angibt. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
        <param name="FV">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der den Endwert oder Kontostand angibt, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
        <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
        <param name="Guess">Dies ist optional. Ein Wert vom Typ <see langword="Double" />, der einen von Ihnen geschätzten Wert enthält, der von <see langword="Rate" /> zurückgegeben wird. Wird der Wert nicht angegeben, ist <c>Guess</c> 0,1 (10 Prozent).</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den Zinssatz einer Annuität pro Zeitraum angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der den Zinssatz einer Annuität pro Zeitraum angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Annuität ist eine Reihe von konstanten Barzahlungen über einen Zeitraum an. Eine Annuität kann es sich um einen Kredit (z. B. eine Hypotheken) oder einer Investition (z. B. einen monatlichen einsparungen Plan) sein.  
  
 Für alle Argumente wird (z. B. einzahlungen zu einsparungen) ausgezahlt Bargeld durch negative Zahlen dargestellt; Erhaltener (z. B. Dividend überprüft) wird durch positive Zahlen dargestellt.  
  
 `Rate` wird pro Iteration berechnet. Beginnend mit dem Wert des `Guess`, `Rate` Navigieren durch die Berechnung, bis das Ergebnis auf 0,00001 Prozent genau ist. Wenn `Rate` wurde nicht gefunden, ein Ergebnis nach 20 versucht, ein Fehler auftritt. Wenn die Zahl 10 Prozent ist und `Rate` ein Fehler auftritt, versuchen Sie einen anderen Wert für `Guess`.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Rate` Funktion berechnet den Zinssatz eines Darlehens erhält die Gesamtzahl der Zahlungen (`TotPmts`), die Menge der Kredit Zahlung (`Payment`), den Barwert oder Prinzipal, der das Darlehen (`PVal`), die Zukunft Wert, der das Darlehen (`FVal`), eine Zahl, die angibt, ob die Zahlung fällig am Anfang oder Ende der Zahlungsfrist ist (`PayType`), und einen Näherungswert der erwarteten Zinssatz (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Anschaffungskosten des Vermögenswerts angibt.</param>
        <param name="Salvage">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Vermögenswert am Ende der Nutzungsdauer angibt.</param>
        <param name="Life">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Nutzungsdauer des Vermögenswerts angibt.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die arithmetische Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die arithmetische Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Zeitraum der Abschreibung muss in derselben Einheit als ausgedrückt werden die `Life` Argument. Alle Argumente müssen positive Zahlen sein.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `SLN` -Funktion die lineare Abschreibung einer Anlage für einen bestimmten Zeitraum anfänglichen Kosten für das Medienobjekt zurückgibt (`InitCost`), der Restwert am Ende der Lebensdauer des Medienobjekts (`SalvageVal`), und die gesamte Lebensdauer des das Medienobjekt in Jahren (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Anschaffungskosten des Vermögenswerts angibt.</param>
        <param name="Salvage">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Vermögenswert am Ende der Nutzungsdauer angibt.</param>
        <param name="Life">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der die Nutzungsdauer des Vermögenswerts angibt.</param>
        <param name="Period">Erforderlich. Ein Wert vom Typ <see langword="Double" />, der den Zeitraum angibt, für den die Abschreibung des Vermögenswerts berechnet wird.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Jahresabschreibung eines Vermögenswerts über einen bestimmten Zeitraum angibt.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Jahresabschreibung eines Vermögenswerts über einen bestimmten Zeitraum angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Life` und `Period` Argumente müssen in den gleichen Einheiten ausgedrückt werden. Z. B. wenn `Life` erhält in Monaten `Period` muss ebenfalls in Monaten angegeben werden. Alle Argumente müssen positive Zahlen sein.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `SYD` -Funktion die Abschreibung einer Anlage für einen bestimmten Zeitraum anfänglichen Kosten für das Medienobjekt zurückgibt (`InitCost`), der Restwert am Ende der Lebensdauer des Medienobjekts (`SalvageVal`), sowie die gesamte Lebensdauer des Medienobjekts in Jahre (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" />, oder <paramref name="Period" /> &lt;=0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>
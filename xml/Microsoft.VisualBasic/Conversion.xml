<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="12fa71b45c693b86bd1c9472ef1b5dd5a14cf0eb" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82470968" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Conversion extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="42bd1-101">Das <see langword="Conversion" />-Modul enthält Prozeduren, mit denen verschiedene Konvertierungsoperationen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-102">Dieses Modul unterstützt die Visual Basic-sprach Schlüsselwörter und-Lauf Zeit Bibliothekselemente, die Dezimalzahlen in andere Basen, Zahlen in Zeichen folgen, Zeichen folgen in Zahlen und einen Datentyp in einen anderen konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-103">In diesem Beispiel wird die `Hex`-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-104">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="42bd1-105">Schlüsselwörter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="42bd1-106">Visual Basic von Lauf Zeit Bibliotheks Membern</span><span class="sxs-lookup"><span data-stu-id="42bd1-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="42bd1-107">Das zu konvertierende Objekt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="42bd1-108">Der Typ, in den das Objekt konvertiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="42bd1-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="42bd1-109">Konvertiert ein Objekt in den angegebenen Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="42bd1-110">Ein Objekt, dessen Typ zur Laufzeit der angeforderte Zieltyp ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-111">Die `CTypeDynamic`-Methode konvertiert das als `Expression`-Parameter übergebenen-Objekt in den vom `TargetType`-Parameter angegebenen Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="42bd1-112">Wenn das Objekt ein dynamisches Objekt ist, wendet die `CTypeDynamic`-Methode verfügbare dynamische Konvertierungen an.</span><span class="sxs-lookup"><span data-stu-id="42bd1-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="42bd1-113">Die `CTypeDynamic`-Methode wendet dynamische Konvertierungen in Übereinstimmung mit der Konvertierungs Semantik an, die vom-Objekt selbst definiert wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="42bd1-114">Wenn ein dynamisches Objekt von <xref:System.Dynamic.DynamicObject>erbt, versucht die `CTypeDynamic`-Methode zuerst, die Konvertierung mithilfe einer benutzerdefinierten, statischen Konvertierung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="42bd1-115">Wenn die benutzerdefinierte, statische Konvertierung fehlschlägt, versucht die `CTypeDynamic`-Methode, die Konvertierung mithilfe dynamischer Konvertierungen durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="42bd1-116">Wenn ein dynamisches Objekt <xref:System.Dynamic.IDynamicMetaObjectProvider>implementiert, gibt die `CTypeDynamic`-Methode den dynamischen Konvertierungen Vorrang vor benutzerdefinierten, statischen Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-117">Im folgenden Beispiel wird die `CTypeDynamic`-Methode verwendet, um ein dynamisches Objekt mithilfe der durch das dynamische Objekt definierten Konvertierung in eine Zeichenfolge zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="42bd1-118">Arbeiten mit dynamischen Objekten (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="42bd1-119">Exemplarische Vorgehensweise: Erstellen und Verwenden von dynamischen Objekten (C# und Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="42bd1-120">Der Typ, in den das Objekt konvertiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="42bd1-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="42bd1-121">Das zu konvertierende Objekt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="42bd1-122">Konvertiert ein Objekt in den angegebenen generischen Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="42bd1-123">Ein Objekt, das statisch als der angeforderte generische Typ typisiert ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-124">Die `CTypeDynamic`-Methode konvertiert das als `Expression`-Parameter übergebenen-Objekt in den Typ, der vom Typ des generischen Parameters angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="42bd1-125">Wenn das Objekt ein dynamisches Objekt ist, wendet die `CTypeDynamic`-Methode verfügbare dynamische Konvertierungen an.</span><span class="sxs-lookup"><span data-stu-id="42bd1-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="42bd1-126">Die `CTypeDynamic`-Methode wendet dynamische Konvertierungen in Übereinstimmung mit der Konvertierungs Semantik an, die vom-Objekt selbst definiert wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="42bd1-127">Wenn ein dynamisches Objekt von <xref:System.Dynamic.DynamicObject>erbt, versucht die `CTypeDynamic`-Methode zuerst, die Konvertierung mithilfe einer benutzerdefinierten, statischen Konvertierung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="42bd1-128">Wenn die benutzerdefinierte, statische Konvertierung fehlschlägt, versucht die `CTypeDynamic`-Methode, die Konvertierung mithilfe dynamischer Konvertierungen durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="42bd1-129">Wenn ein dynamisches Objekt <xref:System.Dynamic.IDynamicMetaObjectProvider>implementiert, gibt die `CTypeDynamic`-Methode den dynamischen Konvertierungen Vorrang vor benutzerdefinierten, statischen Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-130">Im folgenden Beispiel wird die `CTypeDynamic`-Methode verwendet, um ein dynamisches Objekt mithilfe der durch das dynamische Objekt definierten Konvertierung in eine Zeichenfolge zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="42bd1-131">Arbeiten mit dynamischen Objekten (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="42bd1-132">Exemplarische Vorgehensweise: Erstellen und Verwenden von dynamischen Objekten (C# und Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="42bd1-133">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="42bd1-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ErrorToString() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="42bd1-134">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="42bd1-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-135">Die Fehlermeldung, die dem letzten Laufzeitfehler entspricht.</span><span class="sxs-lookup"><span data-stu-id="42bd1-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-136">Die `ErrorToString`-Funktion überprüft die Eigenschaften Einstellungen des `Err`-Objekts, um den aktuellen Laufzeitfehler zu identifizieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="42bd1-137">Der Rückgabewert der `ErrorToString`-Funktion entspricht der `Description`-Eigenschaft des `Err`-Objekts.</span><span class="sxs-lookup"><span data-stu-id="42bd1-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="42bd1-138">Wenn kein Laufzeitfehler aufgetreten ist, gibt `ErrorToString` eine Zeichenfolge der Länge 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="42bd1-139">In Visual Basic Version 6,0 und früher wurde diese Funktion von der `Error`-Funktion bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-140">Im folgenden Code wird die `ErrorToString`-Funktion verwendet, um Fehlermeldungen anzuzeigen, die den angegebenen Fehlernummern entsprechen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-141"><paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="42bd1-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ErrorToString(int32 ErrorNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="42bd1-142">Optional.</span><span class="sxs-lookup"><span data-stu-id="42bd1-142">Optional.</span></span> <span data-ttu-id="42bd1-143">Eine beliebige gültige Fehlernummer.</span><span class="sxs-lookup"><span data-stu-id="42bd1-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="42bd1-144">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="42bd1-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-145">Die Fehlermeldung, die einer bestimmten Fehlernummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="42bd1-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-146">Die `ErrorToString`-Funktion überprüft die Eigenschaften Einstellungen des `Err`-Objekts, um den aktuellen Laufzeitfehler zu identifizieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="42bd1-147">Der Rückgabewert der `ErrorToString`-Funktion entspricht der `Description`-Eigenschaft des `Err`-Objekts.</span><span class="sxs-lookup"><span data-stu-id="42bd1-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="42bd1-148">Wenn `ErrorNumber` eine gültige Fehlernummer ist, aber nicht definiert ist, gibt `ErrorToString` die Zeichenfolge zurück `"Application-defined or object-defined error."` wenn `ErrorNumber` nicht gültig ist, tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="42bd1-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="42bd1-149">Wenn `ErrorNumber` weggelassen wird, wird die Meldung zurückgegeben, die dem letzten Laufzeitfehler entspricht.</span><span class="sxs-lookup"><span data-stu-id="42bd1-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="42bd1-150">Wenn kein Laufzeitfehler aufgetreten ist oder `ErrorNumber` 0 ist, gibt `ErrorToString` eine Zeichenfolge der Länge 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="42bd1-151">In Visual Basic Version 6,0 und früher wurde diese Funktion von der `Error`-Funktion bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-152">Im folgenden Code wird die `ErrorToString`-Funktion verwendet, um Fehlermeldungen anzuzeigen, die den angegebenen Fehlernummern entsprechen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-153"><paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="42bd1-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="42bd1-154">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-155">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-155">Required.</span></span> <span data-ttu-id="42bd1-156">Eine Zahl vom Typ <see langword="Decimal" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-157">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-158">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-159">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-160">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-161">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-162">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="42bd1-163">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-164">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-165">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-166">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-167">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-168">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-169">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-170">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-171">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-172">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-173">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-174">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-175">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-176">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-177">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-178">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Fix(float64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-179">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-179">Required.</span></span> <span data-ttu-id="42bd1-180">Eine Zahl vom Typ <see cref="T:System.Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-180">A number of type <see cref="T:System.Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-181">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-182">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-183">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-184">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-185">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-186">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="42bd1-187">Ab Visual Basic 15,8 wird die Leistung der Konvertierung von `Double`zu ganzzahligen Daten optimiert, wenn Sie den von der `Fix`-Methode zurückgegebenen Wert an die ganzzahligen [Konvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md)übergeben oder wenn der von `Fix` zurückgegebene `Double` Wert implizit in eine ganze Zahl konvertiert wird, bei der die [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf `Off`festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="42bd1-188">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="42bd1-189">Das folgende Beispiel veranschaulicht eine solche optimierte Konvertierung:</span><span class="sxs-lookup"><span data-stu-id="42bd1-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="42bd1-190">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-191">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-192">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-193">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-194">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-195">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-196">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-197">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-198">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-199">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-200">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-201">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-202">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-203">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-204">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-205">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Fix(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-206">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-206">Required.</span></span> <span data-ttu-id="42bd1-207">Eine Zahl vom Typ <see langword="Short" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-208">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-209">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-210">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-211">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-212">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-213">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-214">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-215">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-216">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-217">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-218">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-219">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-220">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-221">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-222">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-223">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-224">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-225">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-226">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-227">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-228">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-229">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Fix(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-230">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-230">Required.</span></span> <span data-ttu-id="42bd1-231">Eine Zahl vom Typ <see langword="Integer" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-232">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-233">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-234">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-235">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-236">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-237">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-238">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-239">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-240">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-241">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-242">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-243">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-244">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-245">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-246">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-247">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-248">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-249">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-250">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-251">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-252">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-253">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Fix(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-254">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-254">Required.</span></span> <span data-ttu-id="42bd1-255">Eine Zahl vom Typ <see langword="Long" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-256">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-257">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-258">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-259">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-260">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-261">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-262">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-263">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-264">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-265">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-266">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-267">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-268">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-269">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-270">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-271">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-272">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-273">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-274">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-275">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-276">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-277">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Fix(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-278">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-278">Required.</span></span> <span data-ttu-id="42bd1-279">Eine Zahl vom Typ <see langword="Object" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="42bd1-280">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="42bd1-281">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-282">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-283">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-284">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-285">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-286">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="42bd1-287">Beginnend mit Visual Basic 15,8, wenn das `Number`-Argument ein Objekt ist, dessen Lauf Zeittyp `Double` oder `Single`ist, wird die Leistung der Konvertierung von Gleit Komma-zu-ganzzahligen Daten optimiert, wenn Sie den von der `Fix`-Methode zurückgegebenen Wert an die ganzzahligen [Konvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md)übergeben, oder wenn der von [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) `Fix` zurückgegebene Wert automatisch in eine ganze Zahl konvertiert wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="42bd1-288">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="42bd1-289">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="42bd1-290">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-291">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-292">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-293">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-294">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-295">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-296">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-297">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-298">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-299">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-300">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-301">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-302">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-303">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-304">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-305">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Fix(float32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-306">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-306">Required.</span></span> <span data-ttu-id="42bd1-307">Eine Zahl vom Typ <see cref="T:System.Single" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-307">A number of type <see cref="T:System.Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-308">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-309">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-310">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-311">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-312">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-313">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="42bd1-314">Ab Visual Basic 15,8 wird die Leistung der Konvertierung von `Single`zu ganzzahligen Daten optimiert, wenn Sie den von der `Fix`-Methode zurückgegebenen Wert an die ganzzahligen [Konvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md)übergeben oder wenn der von `Fix` zurückgegebene `Single` Wert automatisch in eine ganze Zahl konvertiert wird, bei der die [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf OFF festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="42bd1-315">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="42bd1-316">Das folgende Beispiel veranschaulicht eine solche optimierte Konvertierung:</span><span class="sxs-lookup"><span data-stu-id="42bd1-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="42bd1-317">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-318">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-319">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-320">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-321">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-322">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-323">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-324">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-325">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-326">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-327">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-328">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-329">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-330">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-331">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-332">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="42bd1-333">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-334">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-334">Required.</span></span> <span data-ttu-id="42bd1-335">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-336">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-337">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-338">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-339">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="42bd1-339">If `Number` is</span></span>|<span data-ttu-id="42bd1-340">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-341">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-341">Empty</span></span>|<span data-ttu-id="42bd1-342">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-342">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-343">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="42bd1-343">Any numeric value</span></span>|<span data-ttu-id="42bd1-344">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="42bd1-345">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="42bd1-346">`&H10` stellt z. b. in Hexadezimal Schreibweise Decimal 16 dar.</span><span class="sxs-lookup"><span data-stu-id="42bd1-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-347">In diesem Beispiel wird die `Hex`-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-348"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-349"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-350">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="42bd1-351">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="42bd1-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-352">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-352">Required.</span></span> <span data-ttu-id="42bd1-353">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-354">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-355">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-356">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-357">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="42bd1-357">If `Number` is</span></span>|<span data-ttu-id="42bd1-358">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-359">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-359">Empty</span></span>|<span data-ttu-id="42bd1-360">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-360">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-361">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="42bd1-361">Any numeric value</span></span>|<span data-ttu-id="42bd1-362">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="42bd1-363">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="42bd1-364">`&H10` stellt z. b. in Hexadezimal Schreibweise Decimal 16 dar.</span><span class="sxs-lookup"><span data-stu-id="42bd1-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-365">In diesem Beispiel wird die `Hex`-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-366"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-367"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-368">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="42bd1-369">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="42bd1-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-370">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-370">Required.</span></span> <span data-ttu-id="42bd1-371">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-372">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-373">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-374">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-375">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="42bd1-375">If `Number` is</span></span>|<span data-ttu-id="42bd1-376">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-377">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-377">Empty</span></span>|<span data-ttu-id="42bd1-378">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-378">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-379">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="42bd1-379">Any numeric value</span></span>|<span data-ttu-id="42bd1-380">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="42bd1-381">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="42bd1-382">`&H10` stellt z. b. in Hexadezimal Schreibweise Decimal 16 dar.</span><span class="sxs-lookup"><span data-stu-id="42bd1-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-383">In diesem Beispiel wird die `Hex`-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-384"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-385"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-386">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="42bd1-387">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="42bd1-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-388">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-388">Required.</span></span> <span data-ttu-id="42bd1-389">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-390">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-391">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-392">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-393">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="42bd1-393">If `Number` is</span></span>|<span data-ttu-id="42bd1-394">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-395">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-395">Empty</span></span>|<span data-ttu-id="42bd1-396">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-396">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-397">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="42bd1-397">Any numeric value</span></span>|<span data-ttu-id="42bd1-398">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="42bd1-399">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="42bd1-400">`&H10` stellt z. b. in Hexadezimal Schreibweise Decimal 16 dar.</span><span class="sxs-lookup"><span data-stu-id="42bd1-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-401">In diesem Beispiel wird die `Hex`-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-402"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-403"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-404">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="42bd1-405">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="42bd1-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-406">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-406">Required.</span></span> <span data-ttu-id="42bd1-407">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-408">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-409">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-410">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-411">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="42bd1-411">If `Number` is</span></span>|<span data-ttu-id="42bd1-412">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-413">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-413">Empty</span></span>|<span data-ttu-id="42bd1-414">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-414">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-415">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="42bd1-415">Any numeric value</span></span>|<span data-ttu-id="42bd1-416">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="42bd1-417">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="42bd1-418">`&H10` stellt z. b. in Hexadezimal Schreibweise Decimal 16 dar.</span><span class="sxs-lookup"><span data-stu-id="42bd1-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-419">In diesem Beispiel wird die `Hex`-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-420"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-421"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-422">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="42bd1-423">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="42bd1-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-424">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-424">Required.</span></span> <span data-ttu-id="42bd1-425">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-426">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-427">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-428">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-429">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="42bd1-429">If `Number` is</span></span>|<span data-ttu-id="42bd1-430">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-431">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-431">Empty</span></span>|<span data-ttu-id="42bd1-432">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-432">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-433">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="42bd1-433">Any numeric value</span></span>|<span data-ttu-id="42bd1-434">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="42bd1-435">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="42bd1-436">`&H10` stellt z. b. in Hexadezimal Schreibweise Decimal 16 dar.</span><span class="sxs-lookup"><span data-stu-id="42bd1-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-437">In diesem Beispiel wird die `Hex`-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-438"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-439"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-440">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="42bd1-441">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="42bd1-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-442">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-442">Required.</span></span> <span data-ttu-id="42bd1-443">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-444">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-445">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-446">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-447">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="42bd1-447">If `Number` is</span></span>|<span data-ttu-id="42bd1-448">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-449">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-449">Empty</span></span>|<span data-ttu-id="42bd1-450">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-450">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-451">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="42bd1-451">Any numeric value</span></span>|<span data-ttu-id="42bd1-452">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="42bd1-453">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="42bd1-454">`&H10` stellt z. b. in Hexadezimal Schreibweise Decimal 16 dar.</span><span class="sxs-lookup"><span data-stu-id="42bd1-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-455">In diesem Beispiel wird die `Hex`-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-456"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-457"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-458">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="42bd1-459">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="42bd1-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-460">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-460">Required.</span></span> <span data-ttu-id="42bd1-461">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-462">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-463">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-464">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-465">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="42bd1-465">If `Number` is</span></span>|<span data-ttu-id="42bd1-466">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-467">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-467">Empty</span></span>|<span data-ttu-id="42bd1-468">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-468">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-469">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="42bd1-469">Any numeric value</span></span>|<span data-ttu-id="42bd1-470">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="42bd1-471">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="42bd1-472">`&H10` stellt z. b. in Hexadezimal Schreibweise Decimal 16 dar.</span><span class="sxs-lookup"><span data-stu-id="42bd1-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-473">In diesem Beispiel wird die `Hex`-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-474"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-475"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-476">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="42bd1-477">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="42bd1-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-478">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-478">Required.</span></span> <span data-ttu-id="42bd1-479">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-480">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-481">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-482">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-483">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="42bd1-483">If `Number` is</span></span>|<span data-ttu-id="42bd1-484">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-485">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-485">Empty</span></span>|<span data-ttu-id="42bd1-486">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-486">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-487">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="42bd1-487">Any numeric value</span></span>|<span data-ttu-id="42bd1-488">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="42bd1-489">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="42bd1-490">`&H10` stellt z. b. in Hexadezimal Schreibweise Decimal 16 dar.</span><span class="sxs-lookup"><span data-stu-id="42bd1-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-491">In diesem Beispiel wird die `Hex`-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-492"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-493"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-494">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="42bd1-495">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="42bd1-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="42bd1-496">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-497">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-497">Required.</span></span> <span data-ttu-id="42bd1-498">Eine Zahl vom Typ <see langword="Decimal" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-499">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-500">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-501">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-502">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-503">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-504">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="42bd1-505">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-506">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-507">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-508">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-509">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-510">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-511">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-512">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-513">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-514">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-515">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-516">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-517">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-518">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-519">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-520">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Int(float64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-521">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-521">Required.</span></span> <span data-ttu-id="42bd1-522">Eine Zahl vom Typ <see cref="T:System.Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-522">A number of type <see cref="T:System.Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-523">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-524">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-525">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-526">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-527">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-528">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="42bd1-529">Ab Visual Basic 15,8 wird die Leistung der Konvertierung von Double in Integer optimiert, wenn Sie den von der `Int`-Methode zurückgegebenen Wert an die ganzzahligen [Konvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md)übergeben oder wenn der von `Int` zurückgegebene Double-Wert automatisch in eine ganze Zahl konvertiert wird, bei der die [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf OFF festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="42bd1-530">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="42bd1-531">Das folgende Beispiel veranschaulicht eine solche optimierte Konvertierung:</span><span class="sxs-lookup"><span data-stu-id="42bd1-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="42bd1-532">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-533">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-534">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-535">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-536">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-537">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-538">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-539">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-540">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-541">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-542">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-543">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-544">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-545">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-546">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-547">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Int(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-548">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-548">Required.</span></span> <span data-ttu-id="42bd1-549">Eine Zahl vom Typ <see langword="Short" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-550">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-551">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-552">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-553">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-554">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-555">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-556">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-557">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-558">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-559">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-560">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-561">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-562">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-563">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-564">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-565">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-566">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-567">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-568">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-569">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-570">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-571">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Int(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-572">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-572">Required.</span></span> <span data-ttu-id="42bd1-573">Eine Zahl vom Typ <see langword="Integer" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-574">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-575">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-576">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-577">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-578">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-579">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-580">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-581">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-582">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-583">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-584">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-585">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-586">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-587">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-588">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-589">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-590">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-591">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-592">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-593">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-594">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-595">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Int(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-596">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-596">Required.</span></span> <span data-ttu-id="42bd1-597">Eine Zahl vom Typ <see langword="Long" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-598">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-599">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-600">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-601">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-602">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-603">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-604">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-605">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-606">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-607">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-608">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-609">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-610">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-611">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-612">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-613">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-614">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-615">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-616">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-617">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-618">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-619">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Int(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-620">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-620">Required.</span></span> <span data-ttu-id="42bd1-621">Eine Zahl vom Typ <see langword="Object" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="42bd1-622">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="42bd1-623">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-624">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-625">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-626">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-627">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-628">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="42bd1-629">Beginnend mit Visual Basic 15,8, wenn das `Number`-Argument ein Objekt ist, dessen Lauf Zeittyp `Double` oder `Single`ist, wird die Leistung der Konvertierung von Gleit Komma-zu-ganzzahligen Daten optimiert, wenn Sie den von der `Int`-Methode zurückgegebenen Wert an die ganzzahligen [Konvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md)übergeben, oder wenn der von [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) `Int` zurückgegebene Wert automatisch in eine ganze Zahl konvertiert wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="42bd1-630">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="42bd1-631">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="42bd1-632">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-633">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-634">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-635">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-636">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-637">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-638">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-639">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-640">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-641">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-642">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-643">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-644">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-645">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-646">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-647">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Int(float32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-648">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-648">Required.</span></span> <span data-ttu-id="42bd1-649">Eine Zahl vom Typ <see cref="T:System.Single" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-649">A number of type <see cref="T:System.Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-650">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-651">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-652">Die Funktionen `Int` und `Fix` entfernen den Bruch Teil der `Number` und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="42bd1-653">Der Unterschied zwischen `Int`-und `Fix` Funktionen besteht darin, dass `Int` bei negativer `Number` die erste negative Ganzzahl zurückgibt, die kleiner oder gleich `Number`ist, während `Fix` die erste negative Ganzzahl zurückgibt, die größer oder gleich `Number`ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="42bd1-654">`Int` konvertiert z. b.-8,4 in-9, und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="42bd1-655">`Fix(number)` entspricht `Sign(number) * Int(Abs(number)).`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="42bd1-656">Ab Visual Basic 15,8 wird die Leistung der Konvertierung von `Single`zu ganzzahligen Daten optimiert, wenn Sie den von der `Int`-Methode zurückgegebenen Wert an die ganzzahligen [Konvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md)übergeben oder wenn der von `Int` zurückgegebene `Single` Wert automatisch in eine ganze Zahl konvertiert wird, bei der die [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf OFF festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="42bd1-657">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="42bd1-658">Das folgende Beispiel veranschaulicht eine solche optimierte Konvertierung:</span><span class="sxs-lookup"><span data-stu-id="42bd1-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="42bd1-659">In diesem Beispiel wird veranschaulicht, wie die Funktionen `Int` und `Fix` ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="42bd1-660">Im Fall eines negativen Zahlen Arguments gibt die `Int`-Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist. die `Fix`-Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="42bd1-661">Im folgenden Beispiel müssen Sie `Option Strict Off` angeben, da implizite Konvertierungen von Typ `Double` in Typ `Integer` in `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="42bd1-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="42bd1-662">Sie können die `CInt`-Funktion verwenden, um andere Datentypen explizit in den Typ `Integer` mit `Option Strict Off`zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="42bd1-663">`CInt` jedoch auf die nächste ganze Zahl gerundet, anstatt den Bruchteil der Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="42bd1-664">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="42bd1-665">Sie können die `CInt`-Funktion für das Ergebnis eines Aufrufes `Fix` oder `Int` verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="42bd1-666">Beispiel: </span><span class="sxs-lookup"><span data-stu-id="42bd1-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="42bd1-667">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="42bd1-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-668">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-669">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-670">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="42bd1-671">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="42bd1-672">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="42bd1-673">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="42bd1-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-674">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="42bd1-675">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-676">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-676">Required.</span></span> <span data-ttu-id="42bd1-677">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-678">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-679">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-680">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-681">Wenn number</span><span class="sxs-lookup"><span data-stu-id="42bd1-681">If Number is</span></span>|<span data-ttu-id="42bd1-682">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-683">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-683">Empty</span></span>|<span data-ttu-id="42bd1-684">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-684">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-685">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="42bd1-685">Any other number</span></span>|<span data-ttu-id="42bd1-686">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="42bd1-687">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="42bd1-688">Beispielsweise ist `&O10` die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-689">In diesem Beispiel wird die `Oct`-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-690"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-691"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-692">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-693">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-694">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-694">Required.</span></span> <span data-ttu-id="42bd1-695">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-696">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-697">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-698">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-699">Wenn number</span><span class="sxs-lookup"><span data-stu-id="42bd1-699">If Number is</span></span>|<span data-ttu-id="42bd1-700">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-701">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-701">Empty</span></span>|<span data-ttu-id="42bd1-702">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-702">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-703">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="42bd1-703">Any other number</span></span>|<span data-ttu-id="42bd1-704">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="42bd1-705">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="42bd1-706">Beispielsweise ist `&O10` die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-707">In diesem Beispiel wird die `Oct`-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-708"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-709"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-710">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-711">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-712">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-712">Required.</span></span> <span data-ttu-id="42bd1-713">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-714">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-715">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-716">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-717">Wenn number</span><span class="sxs-lookup"><span data-stu-id="42bd1-717">If Number is</span></span>|<span data-ttu-id="42bd1-718">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-719">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-719">Empty</span></span>|<span data-ttu-id="42bd1-720">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-720">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-721">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="42bd1-721">Any other number</span></span>|<span data-ttu-id="42bd1-722">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="42bd1-723">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="42bd1-724">Beispielsweise ist `&O10` die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-725">In diesem Beispiel wird die `Oct`-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-726"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-727"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-728">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-729">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-730">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-730">Required.</span></span> <span data-ttu-id="42bd1-731">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-732">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-733">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-734">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-735">Wenn number</span><span class="sxs-lookup"><span data-stu-id="42bd1-735">If Number is</span></span>|<span data-ttu-id="42bd1-736">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-737">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-737">Empty</span></span>|<span data-ttu-id="42bd1-738">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-738">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-739">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="42bd1-739">Any other number</span></span>|<span data-ttu-id="42bd1-740">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="42bd1-741">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="42bd1-742">Beispielsweise ist `&O10` die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-743">In diesem Beispiel wird die `Oct`-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-744"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-745"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-746">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-747">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-748">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-748">Required.</span></span> <span data-ttu-id="42bd1-749">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-750">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-751">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-752">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-753">Wenn number</span><span class="sxs-lookup"><span data-stu-id="42bd1-753">If Number is</span></span>|<span data-ttu-id="42bd1-754">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-755">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-755">Empty</span></span>|<span data-ttu-id="42bd1-756">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-756">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-757">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="42bd1-757">Any other number</span></span>|<span data-ttu-id="42bd1-758">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="42bd1-759">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="42bd1-760">Beispielsweise ist `&O10` die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-761">In diesem Beispiel wird die `Oct`-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-762"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-763"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-764">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-765">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-766">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-766">Required.</span></span> <span data-ttu-id="42bd1-767">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-768">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-769">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-770">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-771">Wenn number</span><span class="sxs-lookup"><span data-stu-id="42bd1-771">If Number is</span></span>|<span data-ttu-id="42bd1-772">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-773">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-773">Empty</span></span>|<span data-ttu-id="42bd1-774">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-774">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-775">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="42bd1-775">Any other number</span></span>|<span data-ttu-id="42bd1-776">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="42bd1-777">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="42bd1-778">Beispielsweise ist `&O10` die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-779">In diesem Beispiel wird die `Oct`-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-780"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-781"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-782">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-783">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-784">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-784">Required.</span></span> <span data-ttu-id="42bd1-785">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-786">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-787">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-788">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-789">Wenn number</span><span class="sxs-lookup"><span data-stu-id="42bd1-789">If Number is</span></span>|<span data-ttu-id="42bd1-790">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-791">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-791">Empty</span></span>|<span data-ttu-id="42bd1-792">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-792">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-793">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="42bd1-793">Any other number</span></span>|<span data-ttu-id="42bd1-794">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="42bd1-795">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="42bd1-796">Beispielsweise ist `&O10` die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-797">In diesem Beispiel wird die `Oct`-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-798"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-799"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-800">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-801">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-802">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-802">Required.</span></span> <span data-ttu-id="42bd1-803">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-804">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-805">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-806">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-807">Wenn number</span><span class="sxs-lookup"><span data-stu-id="42bd1-807">If Number is</span></span>|<span data-ttu-id="42bd1-808">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-809">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-809">Empty</span></span>|<span data-ttu-id="42bd1-810">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-810">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-811">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="42bd1-811">Any other number</span></span>|<span data-ttu-id="42bd1-812">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="42bd1-813">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="42bd1-814">Beispielsweise ist `&O10` die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-815">In diesem Beispiel wird die `Oct`-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-816"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-817"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-818">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-819">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-820">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-820">Required.</span></span> <span data-ttu-id="42bd1-821">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="42bd1-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-822">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-823">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-824">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="42bd1-825">Wenn number</span><span class="sxs-lookup"><span data-stu-id="42bd1-825">If Number is</span></span>|<span data-ttu-id="42bd1-826">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="42bd1-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="42bd1-827">Leer</span><span class="sxs-lookup"><span data-stu-id="42bd1-827">Empty</span></span>|<span data-ttu-id="42bd1-828">Null (0)</span><span class="sxs-lookup"><span data-stu-id="42bd1-828">Zero (0)</span></span>|  
|<span data-ttu-id="42bd1-829">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="42bd1-829">Any other number</span></span>|<span data-ttu-id="42bd1-830">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="42bd1-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="42bd1-831">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="42bd1-832">Beispielsweise ist `&O10` die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="42bd1-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-833">In diesem Beispiel wird die `Oct`-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-834"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-835"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-836">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-837">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Str(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="42bd1-838">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-838">Required.</span></span> <span data-ttu-id="42bd1-839">Ein <see langword="Object" />, das einen beliebigen gültigen numerischen Ausdruck enthält.</span><span class="sxs-lookup"><span data-stu-id="42bd1-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="42bd1-840">Gibt eine <see langword="String" />-Darstellung dieser Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="42bd1-841">Eine <see langword="String" />-Darstellung einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-842">Wenn Zahlen in Zeichen folgen konvertiert werden, ist ein führendes Leerzeichen immer für das Vorzeichen `Number`reserviert.</span><span class="sxs-lookup"><span data-stu-id="42bd1-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="42bd1-843">Wenn `Number` positiv ist, enthält die zurückgegebene Zeichenfolge ein führendes Leerzeichen, und das Pluszeichen wird impliziert.</span><span class="sxs-lookup"><span data-stu-id="42bd1-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="42bd1-844">Eine negative Zahl umfasst das Minuszeichen (-) und keinen führenden Leerraum.</span><span class="sxs-lookup"><span data-stu-id="42bd1-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="42bd1-845">Verwenden Sie die `Format`-Funktion, um numerische Werte, die Sie formatieren möchten, als Datumsangaben, Uhrzeiten oder Währungen oder in anderen benutzerdefinierten Formaten zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="42bd1-846">Anders als die `Str`-Funktion enthält die `Format`-Funktion keinen führenden Raum für das Vorzeichen von `Number`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42bd1-847">Die `Str`-Funktion erkennt nur den Punkt (`.`) als gültiges Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="42bd1-848">Wenn verschiedene Dezimaltrennzeichen verwendet werden (z. b. in internationalen Anwendungen), verwenden Sie die Funktionen `CStr` oder `Format`, um eine Zahl in eine Zeichenfolge zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="42bd1-849">Um die Zeichen folgen Darstellung einer Zahl in einer bestimmten Kultur zu erhalten, verwenden Sie die `ToString(IFormatProvider)`-Methode der Zahl.</span><span class="sxs-lookup"><span data-stu-id="42bd1-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="42bd1-850">Verwenden Sie z. b. <xref:System.Double.ToString%2A>, wenn Sie einen Wert vom Typ `Double` in eine Zeichenfolge umrechnen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-851">In diesem Beispiel wird die `Str`-Funktion verwendet, um eine `String` Darstellung einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="42bd1-852">Wenn eine positive Zahl in eine Zeichenfolge konvertiert wird, ist ein führendes Leerzeichen immer für sein Vorzeichen reserviert.</span><span class="sxs-lookup"><span data-stu-id="42bd1-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42bd1-853"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="42bd1-854"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="42bd1-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="42bd1-855">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="42bd1-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-856">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="42bd1-857">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Val(char Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="42bd1-858">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-858">Required.</span></span> <span data-ttu-id="42bd1-859">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="42bd1-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="42bd1-860">Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="42bd1-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="42bd1-861">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="42bd1-862">Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</span><span class="sxs-lookup"><span data-stu-id="42bd1-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-863">`Val` Funktion stoppt das Lesen der Zeichenfolge beim ersten Zeichen, das nicht als Teil einer Zahl erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="42bd1-864">Symbole und Zeichen, die häufig als Teile numerischer Werte angesehen werden, wie z. b. Dollarzeichen und Kommas, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="42bd1-865">Die-Funktion erkennt jedoch die Basis-Präfixe `&O` (für oktal) und `&H` (hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="42bd1-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="42bd1-866">Leerzeichen, Tabstopps und Zeilenvorschub Zeichen werden aus dem-Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="42bd1-867">Der folgende-Rückruf gibt den Wert 1615198 zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="42bd1-868">Der folgende-Rückruf gibt den Dezimalwert-1 zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="42bd1-869">Die `Val`-Funktion erkennt nur den Punkt (`.`) als gültiges Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="42bd1-870">Wenn verschiedene Dezimaltrennzeichen verwendet werden, wie in internationalen Anwendungen, verwenden Sie stattdessen `CDbl` oder `CInt`, um eine Zeichenfolge in eine Zahl zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="42bd1-871">Verwenden Sie die `Parse(String, IFormatProvider)`-Methode des numerischen Typs, um die Zeichen folgen Darstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="42bd1-872">Verwenden Sie z. b. <xref:System.Double.Parse%2A?displayProperty=nameWithType>, wenn Sie eine Zeichenfolge in eine `Double`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="42bd1-873">Eine <xref:System.InvalidCastException> Ausnahme kann als Reaktion auf bestimmte ungewöhnliche Zahlenformate ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="42bd1-874">Beispielsweise löst der folgende Code diese Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="42bd1-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="42bd1-875">Der Konflikt zwischen der Zahl, die als `Double` formatiert ist, und den `Integer`-und `Long` Typzeichen wird vom Compiler abgefangen, wenn er nicht in einer Zeichenfolge enthalten wäre.</span><span class="sxs-lookup"><span data-stu-id="42bd1-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-876">Im folgenden Beispiel wird die `Val`-Funktion verwendet, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="42bd1-877">`Val` stoppt die Typumwandlung beim ersten Zeichen, das nicht als numerische Ziffer, numerischer Modifizierer, numerische Interpunktions Zeichen oder Leerraum interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="42bd1-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="42bd1-878"><paramref name="InputStr" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="42bd1-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-879"><paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-880">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Val(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="42bd1-881">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-881">Required.</span></span> <span data-ttu-id="42bd1-882">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="42bd1-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="42bd1-883">Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="42bd1-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="42bd1-884">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="42bd1-885">Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</span><span class="sxs-lookup"><span data-stu-id="42bd1-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-886">`Val` Funktion stoppt das Lesen der Zeichenfolge beim ersten Zeichen, das nicht als Teil einer Zahl erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="42bd1-887">Symbole und Zeichen, die häufig als Teile numerischer Werte angesehen werden, wie z. b. Dollarzeichen und Kommas, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="42bd1-888">Die-Funktion erkennt jedoch die Basis-Präfixe `&O` (für oktal) und `&H` (hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="42bd1-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="42bd1-889">Leerzeichen, Tabstopps und Zeilenvorschub Zeichen werden aus dem-Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="42bd1-890">Der folgende-Rückruf gibt den Wert 1234123 zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="42bd1-891">Der folgende-Rückruf gibt den Dezimalwert-1 zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="42bd1-892">Die `Val`-Funktion erkennt nur den Punkt (`.`) als gültiges Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="42bd1-893">Wenn andere Dezimaltrennzeichen verwendet werden, wie in internationalen Anwendungen, verwenden Sie stattdessen `CDbl` oder `CInt`, um eine Zeichenfolge in eine Zahl zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="42bd1-894">Verwenden Sie die `Parse(String, IFormatProvider)`-Methode des numerischen Typs, um die Zeichen folgen Darstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="42bd1-895">Verwenden Sie z. b. <xref:System.Double.Parse%2A?displayProperty=nameWithType>, wenn Sie eine Zeichenfolge in eine `Double`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42bd1-896">Eine <xref:System.InvalidCastException> Ausnahme kann als Reaktion auf bestimmte ungewöhnliche Zahlenformate ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="42bd1-897">Beispielsweise löst der folgende Code diese Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="42bd1-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="42bd1-898">Der Konflikt zwischen der Zahl, die als `Double` formatiert ist, und den `Integer`-und `Long` Typzeichen wird vom Compiler abgefangen, wenn der Konflikt nicht in Zeichen folgen enthalten wäre.</span><span class="sxs-lookup"><span data-stu-id="42bd1-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-899">Im folgenden Beispiel wird die `Val`-Funktion verwendet, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="42bd1-900">`Val` stoppt die Typumwandlung beim ersten Zeichen, das nicht als numerische Ziffer, numerischer Modifizierer, numerische Interpunktions Zeichen oder Leerraum interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="42bd1-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="42bd1-901"><paramref name="InputStr" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="42bd1-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-902"><paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-903">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Val(string InputStr) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="42bd1-904">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="42bd1-904">Required.</span></span> <span data-ttu-id="42bd1-905">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="42bd1-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="42bd1-906">Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="42bd1-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="42bd1-907">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="42bd1-908">Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</span><span class="sxs-lookup"><span data-stu-id="42bd1-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42bd1-909">`Val` Funktion stoppt das Lesen der Zeichenfolge beim ersten Zeichen, das nicht als Teil einer Zahl erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="42bd1-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="42bd1-910">Symbole und Zeichen, die häufig als Teile numerischer Werte angesehen werden, wie z. b. Dollarzeichen und Kommas, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="42bd1-911">Die-Funktion erkennt jedoch die Basis-Präfixe `&O` (für oktal) und `&H` (hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="42bd1-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="42bd1-912">Leerzeichen, Tabstopps und Zeilenvorschub Zeichen werden aus dem-Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="42bd1-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="42bd1-913">Der folgende-Rückruf gibt den Wert 1234123 zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="42bd1-914">Der folgende-Rückruf gibt den Dezimalwert-1 zurück.</span><span class="sxs-lookup"><span data-stu-id="42bd1-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="42bd1-915">Die `Val`-Funktion erkennt nur den Punkt (`.`) als gültiges Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="42bd1-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="42bd1-916">Wenn andere Dezimaltrennzeichen verwendet werden, wie in internationalen Anwendungen, verwenden Sie stattdessen `CDbl` oder `CInt`, um eine Zeichenfolge in eine Zahl zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="42bd1-917">Verwenden Sie die `Parse(String, IFormatProvider)`-Methode des numerischen Typs, um die Zeichen folgen Darstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="42bd1-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="42bd1-918">Verwenden Sie z. b. <xref:System.Double.Parse%2A?displayProperty=nameWithType>, wenn Sie eine Zeichenfolge in eine `Double`.</span><span class="sxs-lookup"><span data-stu-id="42bd1-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42bd1-919">Eine <xref:System.InvalidCastException> Ausnahme kann als Reaktion auf bestimmte ungewöhnliche Zahlenformate ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="42bd1-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="42bd1-920">Beispielsweise löst der folgende Code diese Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="42bd1-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="42bd1-921">Der Konflikt zwischen der Zahl, die als `Double` formatiert ist, und den `Integer`-und `Long` Typzeichen wird vom Compiler abgefangen, wenn der Konflikt nicht in Zeichen folgen enthalten wäre.</span><span class="sxs-lookup"><span data-stu-id="42bd1-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="42bd1-922">Im folgenden Beispiel wird die `Val`-Funktion verwendet, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="42bd1-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="42bd1-923">`Val` stoppt die Typumwandlung beim ersten Zeichen, das nicht als numerische Ziffer, numerischer Modifizierer, numerische Interpunktions Zeichen oder Leerraum interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="42bd1-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="42bd1-924"><paramref name="InputStr" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="42bd1-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42bd1-925"><paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span><span class="sxs-lookup"><span data-stu-id="42bd1-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="42bd1-926">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="42bd1-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

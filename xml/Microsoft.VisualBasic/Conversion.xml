<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="17f9663df373a96bd0268bb9ac91da83c9a425cc" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55358627" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3270c-101">Das <see langword="Conversion" />-Modul enthält Prozeduren, mit denen verschiedene Konvertierungsoperationen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="3270c-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-102">Dieses Modul unterstützt die Schlüsselwörter von Visual Basic und die Laufzeitbibliothek-Member, die konvertiert Dezimalzahlen in andere Basiszahlen, geben Sie Zahlen in Zeichenfolgen, Zeichenfolgen, Zahlen und einen Datentyp in einen anderen.</span><span class="sxs-lookup"><span data-stu-id="3270c-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-103">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-104">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="3270c-105">Schlüsselwörter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="3270c-106">Member der Visual Basic-Laufzeitbibliothek</span><span class="sxs-lookup"><span data-stu-id="3270c-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3270c-107">Das zu konvertierende Objekt.</span><span class="sxs-lookup"><span data-stu-id="3270c-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="3270c-108">Der Typ, in den das Objekt konvertiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="3270c-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="3270c-109">Konvertiert ein Objekt in den angegebenen Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="3270c-110">Ein Objekt, dessen Typ zur Laufzeit der angeforderte Zieltyp ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-111">Die `CTypeDynamic` -Methode konvertiert das Objekt übergeben, als die `Expression` Parameter, um den vom angegebenen Typ der `TargetType` Parameter.</span><span class="sxs-lookup"><span data-stu-id="3270c-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="3270c-112">Wenn das Objekt ein dynamisches Objekt, das `CTypeDynamic` -Methode angewendet wird, verfügbare dynamische Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="3270c-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="3270c-113">Die `CTypeDynamic` -Methode angewendet wird, dynamische Konvertierungen in Übereinstimmung mit der Konvertierungssemantik, die durch das Objekt selbst definiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="3270c-114">Wenn Sie ein dynamisches Objekt erbt <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` Methode versucht zuerst mithilfe einer benutzerdefinierten, statischen Konvertierung die Konvertierung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="3270c-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="3270c-115">Wenn die benutzerdefinierten, statische Konvertierung schlägt fehl, die `CTypeDynamic` Methode versucht, mithilfe der dynamischen Konvertierungen die Konvertierung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="3270c-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="3270c-116">Wenn ein dynamisches Objekt implementiert <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` Verfahren erhalten Vorrang vor, um dynamische Konvertierungen über eine benutzerdefinierte, statische Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="3270c-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-117">Im folgenden Beispiel wird die `CTypeDynamic` Methode, um ein dynamisches Objekt in eine Zeichenfolge zu konvertieren, indem die Konvertierung von dynamischen Objekts definiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="3270c-118">Arbeiten mit dynamischen Objekten (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="3270c-119">Exemplarische Vorgehensweise: Erstellen und Verwenden von dynamischen Objekten (C# und Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="3270c-120">Der Typ, in den das Objekt konvertiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="3270c-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="3270c-121">Das zu konvertierende Objekt.</span><span class="sxs-lookup"><span data-stu-id="3270c-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="3270c-122">Konvertiert ein Objekt in den angegebenen generischen Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="3270c-123">Ein Objekt, das statisch als der angeforderte generische Typ typisiert ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-124">Die `CTypeDynamic` -Methode konvertiert das Objekt übergeben, als die `Expression` Parameter, um den Typ, der vom angegebenen Typ des generischen Parameters.</span><span class="sxs-lookup"><span data-stu-id="3270c-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="3270c-125">Wenn das Objekt ein dynamisches Objekt, das `CTypeDynamic` -Methode angewendet wird, verfügbare dynamische Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="3270c-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="3270c-126">Die `CTypeDynamic` -Methode angewendet wird, dynamische Konvertierungen in Übereinstimmung mit der Konvertierungssemantik, die durch das Objekt selbst definiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="3270c-127">Wenn Sie ein dynamisches Objekt erbt <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` Methode versucht zuerst mithilfe einer benutzerdefinierten, statischen Konvertierung die Konvertierung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="3270c-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="3270c-128">Wenn die benutzerdefinierten, statische Konvertierung schlägt fehl, die `CTypeDynamic` Methode versucht, mithilfe der dynamischen Konvertierungen die Konvertierung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="3270c-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="3270c-129">Wenn ein dynamisches Objekt implementiert <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` Verfahren erhalten Vorrang vor, um dynamische Konvertierungen über eine benutzerdefinierte, statische Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="3270c-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-130">Im folgenden Beispiel wird die `CTypeDynamic` Methode, um ein dynamisches Objekt in eine Zeichenfolge zu konvertieren, indem die Konvertierung von dynamischen Objekts definiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="3270c-131">Arbeiten mit dynamischen Objekten (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="3270c-132">Exemplarische Vorgehensweise: Erstellen und Verwenden von dynamischen Objekten (C# und Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3270c-133">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="3270c-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3270c-134">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="3270c-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="3270c-135">Die Fehlermeldung, die dem letzten Laufzeitfehler entspricht.</span><span class="sxs-lookup"><span data-stu-id="3270c-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-136">Die `ErrorToString` Funktion untersucht die eigenschafteneinstellungen von der `Err` Objekt, mit dem letzten Laufzeitfehler angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="3270c-137">Der Rückgabewert von der `ErrorToString` Funktion entspricht der `Description` Eigenschaft der `Err` Objekt.</span><span class="sxs-lookup"><span data-stu-id="3270c-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="3270c-138">Wenn keine Laufzeitfehler aufgetreten ist, `ErrorToString` gibt eine Zeichenfolge der Länge 0 (null) ("").</span><span class="sxs-lookup"><span data-stu-id="3270c-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="3270c-139">In Visual Basic 6.0 und früheren Versionen wurde diese Funktionalität bereitgestellt, durch die `Error` Funktion.</span><span class="sxs-lookup"><span data-stu-id="3270c-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-140">Der folgende code verwendet die `ErrorToString` -Funktion zur Anzeige von Fehlermeldungen, die entsprechen den Ziffern der angegebenen Fehlermeldung.</span><span class="sxs-lookup"><span data-stu-id="3270c-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-141"><paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="3270c-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="3270c-142">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="3270c-142">Optional.</span></span> <span data-ttu-id="3270c-143">Eine beliebige gültige Fehlernummer.</span><span class="sxs-lookup"><span data-stu-id="3270c-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="3270c-144">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="3270c-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="3270c-145">Die Fehlermeldung, die einer bestimmten Fehlernummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="3270c-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-146">Die `ErrorToString` Funktion untersucht die eigenschafteneinstellungen von der `Err` Objekt, mit dem letzten Laufzeitfehler angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="3270c-147">Der Rückgabewert von der `ErrorToString` Funktion entspricht der `Description` Eigenschaft der `Err` Objekt.</span><span class="sxs-lookup"><span data-stu-id="3270c-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="3270c-148">Wenn `ErrorNumber` , aber nicht definiert ist, wird eine gültige Fehlernummer `ErrorToString` gibt die Zeichenfolge `"Application-defined or object-defined error."` Wenn `ErrorNumber` ist ungültig, ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="3270c-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="3270c-149">Wenn `ErrorNumber` weggelassen wird, wird die Nachricht entsprechend der aktuellen Laufzeit Fehler wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="3270c-150">Wenn keine Laufzeitfehler aufgetreten ist oder `ErrorNumber` ist 0 (null) `ErrorToString` gibt eine Zeichenfolge der Länge 0 (null) ("").</span><span class="sxs-lookup"><span data-stu-id="3270c-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="3270c-151">In Visual Basic 6.0 und früheren Versionen wurde diese Funktionalität bereitgestellt, durch die `Error` Funktion.</span><span class="sxs-lookup"><span data-stu-id="3270c-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-152">Der folgende code verwendet die `ErrorToString` -Funktion zur Anzeige von Fehlermeldungen, die entsprechen den Ziffern der angegebenen Fehlermeldung.</span><span class="sxs-lookup"><span data-stu-id="3270c-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-153"><paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="3270c-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3270c-154">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-155">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-155">Required.</span></span> <span data-ttu-id="3270c-156">Eine Zahl vom Typ <see langword="Decimal" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-157">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-158">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-159">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-160">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-161">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-162">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="3270c-163">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-164">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-165">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-166">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-167">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-168">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-169">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-170">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-171">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-172">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-173">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-174">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-175">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-176">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-177">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-178">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-179">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-179">Required.</span></span> <span data-ttu-id="3270c-180">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-181">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-182">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-183">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-184">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-185">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-186">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="3270c-187">Beginnend mit Visual Basic 15.8, die Leistung der `Double`-zu-ganzzahlige Konvertierung ist optimiert, wenn Sie den Rückgabewert von übergeben die `Fix` Methode, um eines der [ganzzahligen Konvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md), oder, wenn die `Double`Rückgabewert `Fix` wird implizit in eine Ganzzahl mit Vorzeichen konvertiert [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) festgelegt `Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="3270c-188">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="3270c-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="3270c-189">Das folgende Beispiel veranschaulicht diese eine optimierte Konvertierung:</span><span class="sxs-lookup"><span data-stu-id="3270c-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="3270c-190">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-191">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-192">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-193">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-194">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-195">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-196">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-197">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-198">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-199">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-200">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-201">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-202">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-203">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-204">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-205">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-206">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-206">Required.</span></span> <span data-ttu-id="3270c-207">Eine Zahl vom Typ <see langword="Short" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-208">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-209">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-210">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-211">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-212">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-213">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-214">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-215">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-216">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-217">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-218">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-219">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-220">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-221">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-222">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-223">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-224">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-225">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-226">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-227">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-228">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-229">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-230">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-230">Required.</span></span> <span data-ttu-id="3270c-231">Eine Zahl vom Typ <see langword="Integer" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-232">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-233">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-234">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-235">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-236">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-237">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-238">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-239">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-240">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-241">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-242">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-243">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-244">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-245">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-246">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-247">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-248">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-249">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-250">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-251">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-252">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-253">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-254">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-254">Required.</span></span> <span data-ttu-id="3270c-255">Eine Zahl vom Typ <see langword="Long" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-256">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-257">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-258">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-259">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-260">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-261">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-262">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-263">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-264">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-265">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-266">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-267">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-268">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-269">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-270">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-271">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-272">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-273">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-274">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-275">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-276">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-277">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-278">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-278">Required.</span></span> <span data-ttu-id="3270c-279">Eine Zahl vom Typ <see langword="Object" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="3270c-280">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="3270c-281">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-282">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-283">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-284">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-285">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-286">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="3270c-287">Beginnend mit Visual Basic-15.8, falls die `Number` Argument ist ein Objekt, deren Laufzeittyp `Double` oder `Single`, die Leistung der Konvertierung von Gleitkomma-point-in Ganzzahlwerte ist optimiert, wenn Sie den Rückgabewert von übergeben die `Fix` Methode, um eines der [ganzzahligen Konvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md), oder wenn der Rückgabewert von `Fix` wird automatisch in eine Ganzzahl mit Vorzeichen konvertiert [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf Off festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="3270c-288">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="3270c-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="3270c-289">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="3270c-290">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-291">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-292">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-293">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-294">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-295">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-296">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-297">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-298">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-299">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-300">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-301">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-302">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-303">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-304">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-305">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-306">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-306">Required.</span></span> <span data-ttu-id="3270c-307">Eine Zahl vom Typ <see langword="Single" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-308">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-309">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-310">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-311">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-312">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-313">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="3270c-314">Beginnend mit Visual Basic 15.8, die Leistung der `Single`-zu-ganzzahlige Konvertierung ist optimiert, wenn Sie den Rückgabewert von übergeben die `Fix` Methode, um eines der [ganzzahligen Konvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md), oder, wenn die `Single`Rückgabewert `Fix` wird automatisch in eine Ganzzahl mit Vorzeichen konvertiert [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf Off festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="3270c-315">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="3270c-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="3270c-316">Das folgende Beispiel veranschaulicht diese eine optimierte Konvertierung:</span><span class="sxs-lookup"><span data-stu-id="3270c-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="3270c-317">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-318">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-319">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-320">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-321">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-322">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-323">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-324">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-325">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-326">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-327">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-328">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-329">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-330">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-331">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-332">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3270c-333">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-334">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-334">Required.</span></span> <span data-ttu-id="3270c-335">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-336">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-337">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-338">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-339">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="3270c-339">If `Number` is</span></span>|<span data-ttu-id="3270c-340">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="3270c-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-341">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-341">Empty</span></span>|<span data-ttu-id="3270c-342">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-342">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-343">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="3270c-343">Any numeric value</span></span>|<span data-ttu-id="3270c-344">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="3270c-345">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="3270c-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="3270c-346">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-347">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-348"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-349"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-350">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="3270c-351">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="3270c-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-352">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-352">Required.</span></span> <span data-ttu-id="3270c-353">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-354">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-355">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-356">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-357">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="3270c-357">If `Number` is</span></span>|<span data-ttu-id="3270c-358">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="3270c-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-359">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-359">Empty</span></span>|<span data-ttu-id="3270c-360">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-360">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-361">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="3270c-361">Any numeric value</span></span>|<span data-ttu-id="3270c-362">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="3270c-363">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="3270c-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="3270c-364">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-365">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-366"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-367"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-368">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="3270c-369">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="3270c-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-370">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-370">Required.</span></span> <span data-ttu-id="3270c-371">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-372">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-373">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-374">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-375">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="3270c-375">If `Number` is</span></span>|<span data-ttu-id="3270c-376">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="3270c-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-377">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-377">Empty</span></span>|<span data-ttu-id="3270c-378">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-378">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-379">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="3270c-379">Any numeric value</span></span>|<span data-ttu-id="3270c-380">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="3270c-381">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="3270c-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="3270c-382">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-383">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-384"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-385"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-386">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="3270c-387">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="3270c-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-388">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-388">Required.</span></span> <span data-ttu-id="3270c-389">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-390">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-391">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-392">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-393">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="3270c-393">If `Number` is</span></span>|<span data-ttu-id="3270c-394">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="3270c-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-395">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-395">Empty</span></span>|<span data-ttu-id="3270c-396">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-396">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-397">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="3270c-397">Any numeric value</span></span>|<span data-ttu-id="3270c-398">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="3270c-399">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="3270c-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="3270c-400">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-401">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-402"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-403"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-404">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="3270c-405">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="3270c-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-406">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-406">Required.</span></span> <span data-ttu-id="3270c-407">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-408">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-409">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-410">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-411">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="3270c-411">If `Number` is</span></span>|<span data-ttu-id="3270c-412">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="3270c-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-413">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-413">Empty</span></span>|<span data-ttu-id="3270c-414">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-414">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-415">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="3270c-415">Any numeric value</span></span>|<span data-ttu-id="3270c-416">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="3270c-417">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="3270c-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="3270c-418">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-419">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-420"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-421"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-422">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="3270c-423">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="3270c-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-424">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-424">Required.</span></span> <span data-ttu-id="3270c-425">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-426">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-427">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-428">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-429">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="3270c-429">If `Number` is</span></span>|<span data-ttu-id="3270c-430">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="3270c-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-431">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-431">Empty</span></span>|<span data-ttu-id="3270c-432">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-432">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-433">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="3270c-433">Any numeric value</span></span>|<span data-ttu-id="3270c-434">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="3270c-435">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="3270c-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="3270c-436">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-437">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-438"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-439"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-440">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="3270c-441">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="3270c-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-442">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-442">Required.</span></span> <span data-ttu-id="3270c-443">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-444">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-445">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-446">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-447">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="3270c-447">If `Number` is</span></span>|<span data-ttu-id="3270c-448">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="3270c-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-449">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-449">Empty</span></span>|<span data-ttu-id="3270c-450">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-450">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-451">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="3270c-451">Any numeric value</span></span>|<span data-ttu-id="3270c-452">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="3270c-453">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="3270c-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="3270c-454">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-455">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-456"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-457"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-458">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="3270c-459">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="3270c-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-460">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-460">Required.</span></span> <span data-ttu-id="3270c-461">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-462">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-463">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-464">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-465">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="3270c-465">If `Number` is</span></span>|<span data-ttu-id="3270c-466">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="3270c-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-467">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-467">Empty</span></span>|<span data-ttu-id="3270c-468">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-468">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-469">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="3270c-469">Any numeric value</span></span>|<span data-ttu-id="3270c-470">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="3270c-471">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="3270c-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="3270c-472">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-473">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-474"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-475"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-476">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="3270c-477">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="3270c-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-478">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-478">Required.</span></span> <span data-ttu-id="3270c-479">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-480">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-481">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-482">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-483">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="3270c-483">If `Number` is</span></span>|<span data-ttu-id="3270c-484">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="3270c-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-485">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-485">Empty</span></span>|<span data-ttu-id="3270c-486">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-486">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-487">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="3270c-487">Any numeric value</span></span>|<span data-ttu-id="3270c-488">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="3270c-489">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="3270c-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="3270c-490">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-491">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-492"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-493"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-494">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="3270c-495">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="3270c-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3270c-496">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-497">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-497">Required.</span></span> <span data-ttu-id="3270c-498">Eine Zahl vom Typ <see langword="Decimal" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-499">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-500">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-501">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-502">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-503">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-504">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="3270c-505">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-506">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-507">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-508">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-509">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-510">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-511">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-512">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-513">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-514">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-515">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-516">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-517">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-518">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-519">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-520">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-521">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-521">Required.</span></span> <span data-ttu-id="3270c-522">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-523">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-524">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-525">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-526">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-527">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-528">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="3270c-529">Visual Basic-15.8 ab, die Leistung von doppelten Werten in ganzzahlige Konvertierung wird optimiert, wenn Sie, den Rückgabewert übergeben von der `Int` Methode, um eines der [ganzzahligen Konvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md), oder wenn der Double-Wert zurückgegebenes `Int` wird automatisch in eine Ganzzahl mit Vorzeichen konvertiert [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf Off festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="3270c-530">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="3270c-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="3270c-531">Das folgende Beispiel veranschaulicht diese eine optimierte Konvertierung:</span><span class="sxs-lookup"><span data-stu-id="3270c-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="3270c-532">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-533">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-534">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-535">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-536">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-537">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-538">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-539">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-540">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-541">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-542">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-543">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-544">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-545">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-546">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-547">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-548">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-548">Required.</span></span> <span data-ttu-id="3270c-549">Eine Zahl vom Typ <see langword="Short" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-550">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-551">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-552">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-553">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-554">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-555">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-556">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-557">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-558">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-559">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-560">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-561">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-562">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-563">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-564">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-565">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-566">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-567">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-568">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-569">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-570">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-571">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-572">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-572">Required.</span></span> <span data-ttu-id="3270c-573">Eine Zahl vom Typ <see langword="Integer" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-574">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-575">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-576">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-577">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-578">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-579">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-580">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-581">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-582">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-583">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-584">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-585">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-586">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-587">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-588">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-589">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-590">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-591">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-592">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-593">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-594">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-595">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-596">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-596">Required.</span></span> <span data-ttu-id="3270c-597">Eine Zahl vom Typ <see langword="Long" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-598">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-599">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-600">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-601">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-602">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-603">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-604">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-605">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-606">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-607">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-608">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-609">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-610">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-611">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-612">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-613">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-614">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-615">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-616">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-617">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-618">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-619">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-620">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-620">Required.</span></span> <span data-ttu-id="3270c-621">Eine Zahl vom Typ <see langword="Object" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="3270c-622">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="3270c-623">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-624">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-625">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-626">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-627">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-628">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="3270c-629">Beginnend mit Visual Basic-15.8, falls die `Number` Argument ist ein Objekt, deren Laufzeittyp `Double` oder `Single`, die Leistung der Konvertierung von Gleitkomma-point-in Ganzzahlwerte ist optimiert, wenn Sie den Rückgabewert von übergeben die `Int` Methode, um eines der [ganzzahligen Konvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md), oder wenn der Rückgabewert von `Int` wird automatisch in eine Ganzzahl mit Vorzeichen konvertiert [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf Off festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="3270c-630">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="3270c-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="3270c-631">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="3270c-632">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-633">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-634">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-635">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-636">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-637">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-638">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-639">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-640">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-641">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-642">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-643">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-644">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-645">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-646">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-647">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-648">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-648">Required.</span></span> <span data-ttu-id="3270c-649">Eine Zahl vom Typ <see langword="Single" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-650">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-651">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-652">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="3270c-653">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="3270c-654">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="3270c-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="3270c-655">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="3270c-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="3270c-656">Beginnend mit Visual Basic 15.8, die Leistung der `Single`-zu-ganzzahlige Konvertierung ist optimiert, wenn Sie den Rückgabewert von übergeben die `Int` Methode, um eines der [ganzzahligen Konvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md), oder, wenn die `Single`Rückgabewert `Int` wird automatisch in eine Ganzzahl mit Vorzeichen konvertiert [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf Off festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="3270c-657">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="3270c-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="3270c-658">Das folgende Beispiel veranschaulicht diese eine optimierte Konvertierung:</span><span class="sxs-lookup"><span data-stu-id="3270c-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="3270c-659">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="3270c-660">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="3270c-661">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="3270c-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="3270c-662">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="3270c-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="3270c-663">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="3270c-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="3270c-664">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="3270c-665">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="3270c-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="3270c-666">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="3270c-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="3270c-667">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="3270c-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-668">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-669">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-670">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3270c-671">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="3270c-672">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="3270c-673">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3270c-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-674">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3270c-675">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-676">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-676">Required.</span></span> <span data-ttu-id="3270c-677">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-678">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-679">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-680">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-681">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="3270c-681">If Number is</span></span>|<span data-ttu-id="3270c-682">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="3270c-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-683">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-683">Empty</span></span>|<span data-ttu-id="3270c-684">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-684">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-685">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="3270c-685">Any other number</span></span>|<span data-ttu-id="3270c-686">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="3270c-687">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="3270c-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="3270c-688">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-689">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-690"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-691"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-692">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-693">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-694">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-694">Required.</span></span> <span data-ttu-id="3270c-695">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-696">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-697">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-698">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-699">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="3270c-699">If Number is</span></span>|<span data-ttu-id="3270c-700">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="3270c-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-701">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-701">Empty</span></span>|<span data-ttu-id="3270c-702">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-702">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-703">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="3270c-703">Any other number</span></span>|<span data-ttu-id="3270c-704">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="3270c-705">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="3270c-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="3270c-706">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-707">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-708"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-709"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-710">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-711">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-712">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-712">Required.</span></span> <span data-ttu-id="3270c-713">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-714">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-715">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-716">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-717">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="3270c-717">If Number is</span></span>|<span data-ttu-id="3270c-718">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="3270c-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-719">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-719">Empty</span></span>|<span data-ttu-id="3270c-720">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-720">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-721">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="3270c-721">Any other number</span></span>|<span data-ttu-id="3270c-722">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="3270c-723">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="3270c-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="3270c-724">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-725">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-726"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-727"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-728">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-729">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-730">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-730">Required.</span></span> <span data-ttu-id="3270c-731">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-732">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-733">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-734">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-735">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="3270c-735">If Number is</span></span>|<span data-ttu-id="3270c-736">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="3270c-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-737">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-737">Empty</span></span>|<span data-ttu-id="3270c-738">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-738">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-739">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="3270c-739">Any other number</span></span>|<span data-ttu-id="3270c-740">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="3270c-741">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="3270c-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="3270c-742">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-743">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-744"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-745"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-746">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-747">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-748">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-748">Required.</span></span> <span data-ttu-id="3270c-749">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-750">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-751">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-752">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-753">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="3270c-753">If Number is</span></span>|<span data-ttu-id="3270c-754">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="3270c-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-755">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-755">Empty</span></span>|<span data-ttu-id="3270c-756">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-756">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-757">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="3270c-757">Any other number</span></span>|<span data-ttu-id="3270c-758">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="3270c-759">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="3270c-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="3270c-760">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-761">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-762"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-763"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-764">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-765">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-766">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-766">Required.</span></span> <span data-ttu-id="3270c-767">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-768">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-769">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-770">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-771">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="3270c-771">If Number is</span></span>|<span data-ttu-id="3270c-772">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="3270c-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-773">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-773">Empty</span></span>|<span data-ttu-id="3270c-774">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-774">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-775">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="3270c-775">Any other number</span></span>|<span data-ttu-id="3270c-776">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="3270c-777">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="3270c-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="3270c-778">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-779">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-780"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-781"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-782">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-783">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-784">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-784">Required.</span></span> <span data-ttu-id="3270c-785">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-786">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-787">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-788">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-789">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="3270c-789">If Number is</span></span>|<span data-ttu-id="3270c-790">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="3270c-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-791">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-791">Empty</span></span>|<span data-ttu-id="3270c-792">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-792">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-793">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="3270c-793">Any other number</span></span>|<span data-ttu-id="3270c-794">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="3270c-795">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="3270c-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="3270c-796">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-797">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-798"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-799"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-800">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-801">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-802">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-802">Required.</span></span> <span data-ttu-id="3270c-803">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-804">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-805">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-806">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-807">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="3270c-807">If Number is</span></span>|<span data-ttu-id="3270c-808">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="3270c-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-809">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-809">Empty</span></span>|<span data-ttu-id="3270c-810">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-810">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-811">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="3270c-811">Any other number</span></span>|<span data-ttu-id="3270c-812">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="3270c-813">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="3270c-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="3270c-814">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-815">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-816"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-817"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-818">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-819">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-820">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-820">Required.</span></span> <span data-ttu-id="3270c-821">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="3270c-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3270c-822">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-823">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="3270c-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-824">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="3270c-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="3270c-825">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="3270c-825">If Number is</span></span>|<span data-ttu-id="3270c-826">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="3270c-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="3270c-827">Empty</span><span class="sxs-lookup"><span data-stu-id="3270c-827">Empty</span></span>|<span data-ttu-id="3270c-828">Null (0)</span><span class="sxs-lookup"><span data-stu-id="3270c-828">Zero (0)</span></span>|  
|<span data-ttu-id="3270c-829">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="3270c-829">Any other number</span></span>|<span data-ttu-id="3270c-830">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="3270c-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="3270c-831">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="3270c-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="3270c-832">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-833">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-834"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-835"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-836">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-837">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3270c-838">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-838">Required.</span></span> <span data-ttu-id="3270c-839">Ein <see langword="Object" />, das einen beliebigen gültigen numerischen Ausdruck enthält.</span><span class="sxs-lookup"><span data-stu-id="3270c-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="3270c-840">Gibt eine <see langword="String" />-Darstellung dieser Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="3270c-841">Eine <see langword="String" />-Darstellung einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-842">Wenn Zahlen in Zeichenfolgen konvertiert werden, ist ein führendes Leerzeichen immer für das Vorzeichen des reserviert `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="3270c-843">Wenn `Number` positiv ist, enthält die zurückgegebene Zeichenfolge ein führendes Leerzeichen, und das Pluszeichen wird impliziert.</span><span class="sxs-lookup"><span data-stu-id="3270c-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="3270c-844">Eine negative Zahl ist, wird das Minuszeichen (-) und ohne führende Leerzeichen enthalten.</span><span class="sxs-lookup"><span data-stu-id="3270c-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="3270c-845">Verwenden der `Format` Funktion, um numerische Werte zu konvertieren, wie Datumsangaben, Uhrzeiten oder Währung oder in anderen benutzerdefinierten Formaten formatiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="3270c-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="3270c-846">Im Gegensatz zu den `Str` -Funktion, die `Format` Funktion enthält keine für das Vorzeichen von ein führendes Leerzeichen `Number`.</span><span class="sxs-lookup"><span data-stu-id="3270c-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3270c-847">Die `Str` Funktion erkennt nur den Punkt (`.`) als gültige Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="3270c-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="3270c-848">Wenn verschiedene Dezimaltrennzeichen (z. B. in internationale Anwendungen) verwendet werden, verwenden Sie die `CStr` oder `Format` Funktionen, um eine Zahl in eine Zeichenfolge konvertieren.</span><span class="sxs-lookup"><span data-stu-id="3270c-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="3270c-849">Um die Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur zu erhalten, verwenden Sie der Anzahl der `ToString(IFormatProvider)` Methode.</span><span class="sxs-lookup"><span data-stu-id="3270c-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="3270c-850">Verwenden Sie z. B. <xref:System.Double.ToString%2A> beim Konvertieren eines Werts vom Typ `Double` in eine Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="3270c-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3270c-851">Dieses Beispiel verwendet die `Str` -Funktion zum Zurückgeben einer `String` Zeichenfolgendarstellung einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="3270c-852">Wenn eine positive Zahl in eine Zeichenfolge konvertiert wird, wird ein führendes Leerzeichen bei seiner Anmeldung immer reserviert.</span><span class="sxs-lookup"><span data-stu-id="3270c-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3270c-853"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3270c-854"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="3270c-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="3270c-855">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="3270c-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-856">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3270c-857">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3270c-858">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-858">Required.</span></span> <span data-ttu-id="3270c-859">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="3270c-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="3270c-860">Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="3270c-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="3270c-861">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="3270c-862">Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</span><span class="sxs-lookup"><span data-stu-id="3270c-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-863">`Val` Funktion stoppt das Lesen der Zeichenfolge beim ersten Zeichen, das nicht als Teil einer Zahl erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="3270c-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="3270c-864">Symbole und Zeichen, die häufig als Teil von numerischen Werten, z. B. Währungssymbole und Kommas, erkannt werden, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="3270c-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="3270c-865">Die Funktion erkennt jedoch die Basispräfixe `&O` (für oktal) und `&H` (für hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="3270c-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="3270c-866">Leerzeichen, Tabulatoren und Zeilenvorschubzeichen werden aus dem Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="3270c-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="3270c-867">Der folgende Aufruf gibt den Wert 1615198 zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="3270c-868">Der folgende Aufruf gibt den decimal-Wert-1.</span><span class="sxs-lookup"><span data-stu-id="3270c-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="3270c-869">Die `Val` Funktion erkennt nur den Punkt (`.`) als gültige Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="3270c-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="3270c-870">Wenn verschiedene Dezimaltrennzeichen, wie in internationale Anwendungen verwendet werden, verwenden Sie `CDbl` oder `CInt` stattdessen zum Konvertieren einer Zeichenfolge in eine Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="3270c-871">Um die angegebene Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren, verwenden Sie des numerischen Typs `Parse(String, IFormatProvider)` Methode.</span><span class="sxs-lookup"><span data-stu-id="3270c-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="3270c-872">Verwenden Sie z. B. <xref:System.Double.Parse%2A?displayProperty=nameWithType> beim Konvertieren einer Zeichenfolge zu einer `Double`.</span><span class="sxs-lookup"><span data-stu-id="3270c-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="3270c-873">Ein <xref:System.InvalidCastException> Ausnahme als Reaktion auf bestimmte ungewöhnliche Zahlenformate ausgelöst werden kann.</span><span class="sxs-lookup"><span data-stu-id="3270c-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="3270c-874">Im folgenden Code wird beispielsweise diese Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="3270c-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="3270c-875">Der Konflikt zwischen der Anzahl als formatiert eine `Double` und die `Integer` und `Long` Typzeichen würde vom Compiler erkannt werden, wenn es in einer Zeichenfolge nicht enthalten waren.</span><span class="sxs-lookup"><span data-stu-id="3270c-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="3270c-876">Im folgenden Beispiel wird die `Val` Funktion, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="3270c-877">`Val` beendet die Konvertierung mit dem ersten Zeichen, das als eine Ziffer, numerischen Modifizierer, numerischen Satzzeichen oder Leerzeichen interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="3270c-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="3270c-878"><paramref name="InputStr" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="3270c-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-879"><paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-880">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3270c-881">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-881">Required.</span></span> <span data-ttu-id="3270c-882">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="3270c-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="3270c-883">Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="3270c-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="3270c-884">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="3270c-885">Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</span><span class="sxs-lookup"><span data-stu-id="3270c-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-886">`Val` Funktion stoppt das Lesen der Zeichenfolge beim ersten Zeichen, das nicht als Teil einer Zahl erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="3270c-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="3270c-887">Symbole und Zeichen, die häufig als Teil von numerischen Werten, z. B. Währungssymbole und Kommas, erkannt werden, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="3270c-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="3270c-888">Die Funktion erkennt jedoch die Basispräfixe `&O` (für oktal) und `&H` (für hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="3270c-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="3270c-889">Leerzeichen, Tabulatoren und Zeilenvorschubzeichen werden aus dem Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="3270c-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="3270c-890">Der folgende Aufruf gibt den Wert 1234123 zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="3270c-891">Der folgende Aufruf gibt den decimal-Wert-1.</span><span class="sxs-lookup"><span data-stu-id="3270c-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="3270c-892">Die `Val` Funktion erkennt nur den Punkt (`.`) als gültige Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="3270c-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="3270c-893">Verwenden Sie bei anderen Dezimaltrennzeichen, wie in internationale Anwendungen verwendet werden, `CDbl` oder `CInt` stattdessen zum Konvertieren einer Zeichenfolge in eine Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="3270c-894">Um die angegebene Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren, verwenden Sie des numerischen Typs `Parse(String, IFormatProvider)` Methode.</span><span class="sxs-lookup"><span data-stu-id="3270c-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="3270c-895">Verwenden Sie z. B. <xref:System.Double.Parse%2A?displayProperty=nameWithType> beim Konvertieren einer Zeichenfolge zu einer `Double`.</span><span class="sxs-lookup"><span data-stu-id="3270c-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3270c-896">Ein <xref:System.InvalidCastException> Ausnahme als Reaktion auf bestimmte ungewöhnliche Zahlenformate ausgelöst werden kann.</span><span class="sxs-lookup"><span data-stu-id="3270c-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="3270c-897">Im folgenden Code wird beispielsweise diese Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="3270c-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="3270c-898">Der Konflikt zwischen der Anzahl als formatiert eine `Double` und die `Integer` und `Long` Typzeichen werden vom Compiler abgefangen werden, wenn der Konflikt in Zeichenfolgen nicht enthalten waren.</span><span class="sxs-lookup"><span data-stu-id="3270c-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="3270c-899">Im folgenden Beispiel wird die `Val` Funktion, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="3270c-900">`Val` beendet die Konvertierung mit dem ersten Zeichen, das als eine Ziffer, numerischen Modifizierer, numerischen Satzzeichen oder Leerzeichen interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="3270c-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="3270c-901"><paramref name="InputStr" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="3270c-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-902"><paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-903">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="3270c-904">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="3270c-904">Required.</span></span> <span data-ttu-id="3270c-905">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="3270c-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="3270c-906">Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="3270c-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="3270c-907">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="3270c-908">Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</span><span class="sxs-lookup"><span data-stu-id="3270c-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3270c-909">`Val` Funktion stoppt das Lesen der Zeichenfolge beim ersten Zeichen, das nicht als Teil einer Zahl erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="3270c-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="3270c-910">Symbole und Zeichen, die häufig als Teil von numerischen Werten, z. B. Währungssymbole und Kommas, erkannt werden, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="3270c-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="3270c-911">Die Funktion erkennt jedoch die Basispräfixe `&O` (für oktal) und `&H` (für hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="3270c-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="3270c-912">Leerzeichen, Tabulatoren und Zeilenvorschubzeichen werden aus dem Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="3270c-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="3270c-913">Der folgende Aufruf gibt den Wert 1234123 zurück.</span><span class="sxs-lookup"><span data-stu-id="3270c-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="3270c-914">Der folgende Aufruf gibt den decimal-Wert-1.</span><span class="sxs-lookup"><span data-stu-id="3270c-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="3270c-915">Die `Val` Funktion erkennt nur den Punkt (`.`) als gültige Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="3270c-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="3270c-916">Verwenden Sie bei anderen Dezimaltrennzeichen, wie in internationale Anwendungen verwendet werden, `CDbl` oder `CInt` stattdessen zum Konvertieren einer Zeichenfolge in eine Zahl.</span><span class="sxs-lookup"><span data-stu-id="3270c-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="3270c-917">Um die angegebene Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren, verwenden Sie des numerischen Typs `Parse(String, IFormatProvider)` Methode.</span><span class="sxs-lookup"><span data-stu-id="3270c-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="3270c-918">Verwenden Sie z. B. <xref:System.Double.Parse%2A?displayProperty=nameWithType> beim Konvertieren einer Zeichenfolge zu einer `Double`.</span><span class="sxs-lookup"><span data-stu-id="3270c-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3270c-919">Ein <xref:System.InvalidCastException> Ausnahme kann ausgelöst werden, als Reaktion auf bestimmte ungewöhnliche Zahlenformate.</span><span class="sxs-lookup"><span data-stu-id="3270c-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="3270c-920">Im folgenden Code wird beispielsweise diese Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="3270c-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="3270c-921">Der Konflikt zwischen der Anzahl als formatiert eine `Double` und die `Integer` und `Long` Typzeichen werden vom Compiler abgefangen werden, wenn der Konflikt in Zeichenfolgen nicht enthalten waren.</span><span class="sxs-lookup"><span data-stu-id="3270c-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="3270c-922">Im folgenden Beispiel wird die `Val` Funktion, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="3270c-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="3270c-923">`Val` beendet die Konvertierung mit dem ersten Zeichen, das als eine Ziffer, numerischen Modifizierer, numerischen Satzzeichen oder Leerzeichen interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="3270c-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="3270c-924"><paramref name="InputStr" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="3270c-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3270c-925"><paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span><span class="sxs-lookup"><span data-stu-id="3270c-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3270c-926">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3270c-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
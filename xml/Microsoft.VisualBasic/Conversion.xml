<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a25845144db4c8ac809233e618e67a229b8c9446" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65156360" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die <see langword="Conversion" /> -Modul enthält Prozeduren, mit denen verschiedene Konvertierungsoperationen ausgeführt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Schlüsselwörter von Visual Basic und die Laufzeitbibliothek-Member, die konvertiert Dezimalzahlen in andere Basiszahlen, geben Sie Zahlen in Zeichenfolgen, Zeichenfolgen, Zahlen und einen Datentyp in einen anderen.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Schlüsselwörter (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Member der Visual Basic-Laufzeitbibliothek</related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Das zu konvertierende Objekt.</param>
        <param name="TargetType">Der Typ, der das Objekt zu konvertieren.</param>
        <summary>Konvertiert ein Objekt in den angegebenen Typ.</summary>
        <returns>Ein Objekt, dessen Typ zur Laufzeit der angeforderte Zieltyp ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `CTypeDynamic` -Methode konvertiert das Objekt übergeben, als die `Expression` Parameter, um den vom angegebenen Typ der `TargetType` Parameter. Wenn das Objekt ein dynamisches Objekt, das `CTypeDynamic` -Methode angewendet wird, verfügbare dynamische Konvertierungen.  
  
 Die `CTypeDynamic` -Methode angewendet wird, dynamische Konvertierungen in Übereinstimmung mit der Konvertierungssemantik, die durch das Objekt selbst definiert. Wenn Sie ein dynamisches Objekt erbt <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` Methode versucht zuerst mithilfe einer benutzerdefinierten, statischen Konvertierung die Konvertierung ausgeführt werden. Wenn die benutzerdefinierten, statische Konvertierung schlägt fehl, die `CTypeDynamic` Methode versucht, mithilfe der dynamischen Konvertierungen die Konvertierung ausgeführt werden. Wenn ein dynamisches Objekt implementiert <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` Verfahren erhalten Vorrang vor, um dynamische Konvertierungen über eine benutzerdefinierte, statische Konvertierungen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `CTypeDynamic` Methode, um ein dynamisches Objekt in eine Zeichenfolge zu konvertieren, indem die Konvertierung von dynamischen Objekts definiert.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Arbeiten mit dynamischen Objekten (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Exemplarische Vorgehensweise: Erstellen und Verwenden von dynamischen Objekten (C# und Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">Der Typ, der das Objekt zu konvertieren.</typeparam>
        <param name="Expression">Das zu konvertierende Objekt.</param>
        <summary>Konvertiert ein Objekt in den angegebenen generischen Typ an.</summary>
        <returns>Ein Objekt, das statisch als der angeforderte generische Typ typisiert ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `CTypeDynamic` -Methode konvertiert das Objekt übergeben, als die `Expression` Parameter, um den Typ, der vom angegebenen Typ des generischen Parameters. Wenn das Objekt ein dynamisches Objekt, das `CTypeDynamic` -Methode angewendet wird, verfügbare dynamische Konvertierungen.  
  
 Die `CTypeDynamic` -Methode angewendet wird, dynamische Konvertierungen in Übereinstimmung mit der Konvertierungssemantik, die durch das Objekt selbst definiert. Wenn Sie ein dynamisches Objekt erbt <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` Methode versucht zuerst mithilfe einer benutzerdefinierten, statischen Konvertierung die Konvertierung ausgeführt werden. Wenn die benutzerdefinierten, statische Konvertierung schlägt fehl, die `CTypeDynamic` Methode versucht, mithilfe der dynamischen Konvertierungen die Konvertierung ausgeführt werden. Wenn ein dynamisches Objekt implementiert <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` Verfahren erhalten Vorrang vor, um dynamische Konvertierungen über eine benutzerdefinierte, statische Konvertierungen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `CTypeDynamic` Methode, um ein dynamisches Objekt in eine Zeichenfolge zu konvertieren, indem die Konvertierung von dynamischen Objekts definiert.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Arbeiten mit dynamischen Objekten (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Exemplarische Vorgehensweise: Erstellen und Verwenden von dynamischen Objekten (C# und Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt die Fehlermeldung, die entspricht einer bestimmten Fehlernummer zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Fehlermeldung, die entspricht einer bestimmten Fehlernummer zurück.</summary>
        <returns>Die Fehlermeldung, die dem letzten Laufzeitfehler entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `ErrorToString` Funktion untersucht die eigenschafteneinstellungen von der `Err` Objekt, mit dem letzten Laufzeitfehler angegeben. Der Rückgabewert von der `ErrorToString` Funktion entspricht der `Description` Eigenschaft der `Err` Objekt. Wenn keine Laufzeitfehler aufgetreten ist, `ErrorToString` gibt eine Zeichenfolge der Länge 0 (null) ("").  
  
 In Visual Basic 6.0 und früheren Versionen wurde diese Funktionalität bereitgestellt, durch die `Error` Funktion.  
  
   
  
## Examples  
 Der folgende code verwendet die `ErrorToString` -Funktion zur Anzeige von Fehlermeldungen, die entsprechen den Ziffern der angegebenen Fehlermeldung.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">Dies ist optional. Eine beliebige gültige Fehlernummer.</param>
        <summary>Gibt die Fehlermeldung, die entspricht einer bestimmten Fehlernummer zurück.</summary>
        <returns>Die Fehlermeldung, die einer bestimmten Fehlernummer entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `ErrorToString` Funktion untersucht die eigenschafteneinstellungen von der `Err` Objekt, mit dem letzten Laufzeitfehler angegeben. Der Rückgabewert von der `ErrorToString` Funktion entspricht der `Description` Eigenschaft der `Err` Objekt. Wenn `ErrorNumber` , aber nicht definiert ist, wird eine gültige Fehlernummer `ErrorToString` gibt die Zeichenfolge `"Application-defined or object-defined error."` Wenn `ErrorNumber` ist ungültig, ein Fehler auftritt. Wenn `ErrorNumber` weggelassen wird, wird die Nachricht entsprechend der aktuellen Laufzeit Fehler wird zurückgegeben. Wenn keine Laufzeitfehler aufgetreten ist oder `ErrorNumber` ist 0 (null) `ErrorToString` gibt eine Zeichenfolge der Länge 0 (null) ("").  
  
 In Visual Basic 6.0 und früheren Versionen wurde diese Funktionalität bereitgestellt, durch die `Error` Funktion.  
  
   
  
## Examples  
 Der folgende code verwendet die `ErrorToString` -Funktion zur Anzeige von Fehlermeldungen, die entsprechen den Ziffern der angegebenen Fehlermeldung.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Decimal" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  

Beginnend mit Visual Basic 15.8, die Leistung der `Double`-zu-ganzzahlige Konvertierung ist optimiert, wenn Sie den Rückgabewert von übergeben die `Fix` Methode, um eines der [ganzzahligen Konvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md), oder, wenn die `Double`Rückgabewert `Fix` wird implizit in eine Ganzzahl mit Vorzeichen konvertiert [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) festgelegt `Off`. Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt. Das folgende Beispiel veranschaulicht diese eine optimierte Konvertierung:

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Short" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Integer" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Long" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Object" /> oder ein beliebiger gültiger numerischer Ausdruck. Wenn <paramref name="Number" /> enthält <see langword="Nothing" />, <see langword="Nothing" /> zurückgegeben wird.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  

Beginnend mit Visual Basic-15.8, falls die `Number` Argument ist ein Objekt, deren Laufzeittyp `Double` oder `Single`, die Leistung der Konvertierung von Gleitkomma-point-in Ganzzahlwerte ist optimiert, wenn Sie den Rückgabewert von übergeben die `Fix` Methode, um eines der [ganzzahligen Konvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md), oder wenn der Rückgabewert von `Fix` wird automatisch in eine Ganzzahl mit Vorzeichen konvertiert [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf Off festgelegt ist. Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt. Zum Beispiel:

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Single" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  
  
Beginnend mit Visual Basic 15.8, die Leistung der `Single`-zu-ganzzahlige Konvertierung ist optimiert, wenn Sie den Rückgabewert von übergeben die `Fix` Methode, um eines der [ganzzahligen Konvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md), oder, wenn die `Single`Rückgabewert `Fix` wird automatisch in eine Ganzzahl mit Vorzeichen konvertiert [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf Off festgelegt ist. Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt. Das folgende Beispiel veranschaulicht diese eine optimierte Konvertierung:
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn `Number` ist|Hex gibt zurück|  
|-|-|  
|Empty|Null (0)|  
|Jeden beliebigen numerischen Wert|Bis zu 16 hexadezimale Zeichen|  
  
 Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`. Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Vorgehensweise: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn `Number` ist|Hex gibt zurück|  
|-|-|  
|Empty|Null (0)|  
|Jeden beliebigen numerischen Wert|Bis zu 16 hexadezimale Zeichen|  
  
 Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`. Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Vorgehensweise: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn `Number` ist|Hex gibt zurück|  
|-|-|  
|Empty|Null (0)|  
|Jeden beliebigen numerischen Wert|Bis zu 16 hexadezimale Zeichen|  
  
 Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`. Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Vorgehensweise: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn `Number` ist|Hex gibt zurück|  
|-|-|  
|Empty|Null (0)|  
|Jeden beliebigen numerischen Wert|Bis zu 16 hexadezimale Zeichen|  
  
 Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`. Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Vorgehensweise: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn `Number` ist|Hex gibt zurück|  
|-|-|  
|Empty|Null (0)|  
|Jeden beliebigen numerischen Wert|Bis zu 16 hexadezimale Zeichen|  
  
 Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`. Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Vorgehensweise: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn `Number` ist|Hex gibt zurück|  
|-|-|  
|Empty|Null (0)|  
|Jeden beliebigen numerischen Wert|Bis zu 16 hexadezimale Zeichen|  
  
 Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`. Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Vorgehensweise: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn `Number` ist|Hex gibt zurück|  
|-|-|  
|Empty|Null (0)|  
|Jeden beliebigen numerischen Wert|Bis zu 16 hexadezimale Zeichen|  
  
 Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`. Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Vorgehensweise: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn `Number` ist|Hex gibt zurück|  
|-|-|  
|Empty|Null (0)|  
|Jeden beliebigen numerischen Wert|Bis zu 16 hexadezimale Zeichen|  
  
 Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`. Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Vorgehensweise: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn `Number` ist|Hex gibt zurück|  
|-|-|  
|Empty|Null (0)|  
|Jeden beliebigen numerischen Wert|Bis zu 16 hexadezimale Zeichen|  
  
 Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`. Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Vorgehensweise: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Decimal" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  
  
Visual Basic-15.8 ab, die Leistung von doppelten Werten in ganzzahlige Konvertierung wird optimiert, wenn Sie, den Rückgabewert übergeben von der `Int` Methode, um eines der [ganzzahligen Konvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md), oder wenn der Double-Wert zurückgegebenes `Int` wird automatisch in eine Ganzzahl mit Vorzeichen konvertiert [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf Off festgelegt ist. Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt. Das folgende Beispiel veranschaulicht diese eine optimierte Konvertierung:

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Short" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Integer" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Long" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Object" /> oder ein beliebiger gültiger numerischer Ausdruck. Wenn <paramref name="Number" /> enthält <see langword="Nothing" />, <see langword="Nothing" /> zurückgegeben wird.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  
  
Beginnend mit Visual Basic-15.8, falls die `Number` Argument ist ein Objekt, deren Laufzeittyp `Double` oder `Single`, die Leistung der Konvertierung von Gleitkomma-point-in Ganzzahlwerte ist optimiert, wenn Sie den Rückgabewert von übergeben die `Int` Methode, um eines der [ganzzahligen Konvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md), oder wenn der Rückgabewert von `Int` wird automatisch in eine Ganzzahl mit Vorzeichen konvertiert [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf Off festgelegt ist. Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt. Zum Beispiel:

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Single" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
        <returns>Der Integeranteil einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.  
  
 Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`. Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.  
  
 `Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`  
  
Beginnend mit Visual Basic 15.8, die Leistung der `Single`-zu-ganzzahlige Konvertierung ist optimiert, wenn Sie den Rückgabewert von übergeben die `Int` Methode, um eines der [ganzzahligen Konvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md), oder, wenn die `Single`Rückgabewert `Int` wird automatisch in eine Ganzzahl mit Vorzeichen konvertiert [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf Off festgelegt ist. Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt. Das folgende Beispiel veranschaulicht diese eine optimierte Konvertierung:

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück. Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl. Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`. Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen. Zum Beispiel:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Anzahl ist nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException">Anzahl ist kein numerischer Typ.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Mathematische Operationen: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Mathematische Funktionen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn die Anzahl ist|Oct-Rückgabe|  
|-|-|  
|Empty|Null (0)|  
|Jede andere Zahl|Bis zu 22 oktale Zeichen|  
  
 Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`. Z. B. `&O10` der Oktalnotation für decimal 8 ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn die Anzahl ist|Oct-Rückgabe|  
|-|-|  
|Empty|Null (0)|  
|Jede andere Zahl|Bis zu 22 oktale Zeichen|  
  
 Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`. Z. B. `&O10` der Oktalnotation für decimal 8 ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn die Anzahl ist|Oct-Rückgabe|  
|-|-|  
|Empty|Null (0)|  
|Jede andere Zahl|Bis zu 22 oktale Zeichen|  
  
 Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`. Z. B. `&O10` der Oktalnotation für decimal 8 ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn die Anzahl ist|Oct-Rückgabe|  
|-|-|  
|Empty|Null (0)|  
|Jede andere Zahl|Bis zu 22 oktale Zeichen|  
  
 Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`. Z. B. `&O10` der Oktalnotation für decimal 8 ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn die Anzahl ist|Oct-Rückgabe|  
|-|-|  
|Empty|Null (0)|  
|Jede andere Zahl|Bis zu 22 oktale Zeichen|  
  
 Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`. Z. B. `&O10` der Oktalnotation für decimal 8 ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn die Anzahl ist|Oct-Rückgabe|  
|-|-|  
|Empty|Null (0)|  
|Jede andere Zahl|Bis zu 22 oktale Zeichen|  
  
 Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`. Z. B. `&O10` der Oktalnotation für decimal 8 ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn die Anzahl ist|Oct-Rückgabe|  
|-|-|  
|Empty|Null (0)|  
|Jede andere Zahl|Bis zu 22 oktale Zeichen|  
  
 Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`. Z. B. `&O10` der Oktalnotation für decimal 8 ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn die Anzahl ist|Oct-Rückgabe|  
|-|-|  
|Empty|Null (0)|  
|Jede andere Zahl|Bis zu 22 oktale Zeichen|  
  
 Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`. Z. B. `&O10` der Oktalnotation für decimal 8 ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</summary>
        <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.  
  
|Wenn die Anzahl ist|Oct-Rückgabe|  
|-|-|  
|Empty|Null (0)|  
|Jede andere Zahl|Bis zu 22 oktale Zeichen|  
  
 Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`. Z. B. `&O10` der Oktalnotation für decimal 8 ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. Ein <see langword="Object" /> mit beliebiger gültiger numerischer Ausdruck.</param>
        <summary>Gibt eine <see langword="String" /> Zeichenfolgendarstellung einer Zahl.</summary>
        <returns>Eine <see langword="String" />-Darstellung einer Zahl.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Zahlen in Zeichenfolgen konvertiert werden, ist ein führendes Leerzeichen immer für das Vorzeichen des reserviert `Number`. Wenn `Number` positiv ist, enthält die zurückgegebene Zeichenfolge ein führendes Leerzeichen, und das Pluszeichen wird impliziert. Eine negative Zahl ist, wird das Minuszeichen (-) und ohne führende Leerzeichen enthalten.  
  
 Verwenden der `Format` Funktion, um numerische Werte zu konvertieren, wie Datumsangaben, Uhrzeiten oder Währung oder in anderen benutzerdefinierten Formaten formatiert werden sollen. Im Gegensatz zu den `Str` -Funktion, die `Format` Funktion enthält keine für das Vorzeichen von ein führendes Leerzeichen `Number`.  
  
> [!NOTE]
>  Die `Str` Funktion erkennt nur den Punkt (`.`) als gültige Dezimaltrennzeichen. Wenn verschiedene Dezimaltrennzeichen (z. B. in internationale Anwendungen) verwendet werden, verwenden Sie die `CStr` oder `Format` Funktionen, um eine Zahl in eine Zeichenfolge konvertieren. Um die Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur zu erhalten, verwenden Sie der Anzahl der `ToString(IFormatProvider)` Methode. Verwenden Sie z. B. <xref:System.Double.ToString%2A> beim Konvertieren eines Werts vom Typ `Double` in eine Zeichenfolge.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Str` -Funktion zum Zurückgeben einer `String` Zeichenfolgendarstellung einer Zahl. Wenn eine positive Zahl in eine Zeichenfolge konvertiert wird, wird ein führendes Leerzeichen bei seiner Anmeldung immer reserviert.  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> wurde nicht angegeben.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Number" /> ist kein numerischer Typ.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konvertierung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert. Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
        <summary>Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</summary>
        <returns>Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` Funktion stoppt das Lesen der Zeichenfolge beim ersten Zeichen, das nicht als Teil einer Zahl erkannt wird. Symbole und Zeichen, die häufig als Teil von numerischen Werten, z. B. Währungssymbole und Kommas, erkannt werden, werden nicht erkannt. Die Funktion erkennt jedoch die Basispräfixe `&O` (für oktal) und `&H` (für hexadezimal). Leerzeichen, Tabulatoren und Zeilenvorschubzeichen werden aus dem Argument entfernt.  
  
 Der folgende Aufruf gibt den Wert 1615198 zurück.  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
Der folgende Aufruf gibt den decimal-Wert-1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Die `Val` Funktion erkennt nur den Punkt (`.`) als gültige Dezimaltrennzeichen. Wenn verschiedene Dezimaltrennzeichen, wie in internationale Anwendungen verwendet werden, verwenden Sie `CDbl` oder `CInt` stattdessen zum Konvertieren einer Zeichenfolge in eine Zahl. Um die angegebene Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren, verwenden Sie des numerischen Typs `Parse(String, IFormatProvider)` Methode. Verwenden Sie z. B. <xref:System.Double.Parse%2A?displayProperty=nameWithType> beim Konvertieren einer Zeichenfolge zu einer `Double`.  
  
Ein <xref:System.InvalidCastException> Ausnahme als Reaktion auf bestimmte ungewöhnliche Zahlenformate ausgelöst werden kann. Im folgenden Code wird beispielsweise diese Ausnahme ausgelöst.  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

Der Konflikt zwischen der Anzahl als formatiert eine `Double` und die `Integer` und `Long` Typzeichen würde vom Compiler erkannt werden, wenn es in einer Zeichenfolge nicht enthalten waren.  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Val` Funktion, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben. `Val` beendet die Konvertierung mit dem ersten Zeichen, das als eine Ziffer, numerischen Modifizierer, numerischen Satzzeichen oder Leerzeichen interpretiert werden kann.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> ist zu groß.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert. Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
        <summary>Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</summary>
        <returns>Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` Funktion stoppt das Lesen der Zeichenfolge beim ersten Zeichen, das nicht als Teil einer Zahl erkannt wird. Symbole und Zeichen, die häufig als Teil von numerischen Werten, z. B. Währungssymbole und Kommas, erkannt werden, werden nicht erkannt. Die Funktion erkennt jedoch die Basispräfixe `&O` (für oktal) und `&H` (für hexadezimal). Leerzeichen, Tabulatoren und Zeilenvorschubzeichen werden aus dem Argument entfernt.  
  
 Der folgende Aufruf gibt den Wert 1234123 zurück.  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
Der folgende Aufruf gibt den decimal-Wert-1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Die `Val` Funktion erkennt nur den Punkt (`.`) als gültige Dezimaltrennzeichen. Verwenden Sie bei anderen Dezimaltrennzeichen, wie in internationale Anwendungen verwendet werden, `CDbl` oder `CInt` stattdessen zum Konvertieren einer Zeichenfolge in eine Zahl. Um die angegebene Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren, verwenden Sie des numerischen Typs `Parse(String, IFormatProvider)` Methode. Verwenden Sie z. B. <xref:System.Double.Parse%2A?displayProperty=nameWithType> beim Konvertieren einer Zeichenfolge zu einer `Double`.  
  
> [!NOTE]
>  Ein <xref:System.InvalidCastException> Ausnahme als Reaktion auf bestimmte ungewöhnliche Zahlenformate ausgelöst werden kann. Im folgenden Code wird beispielsweise diese Ausnahme ausgelöst.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Der Konflikt zwischen der Anzahl als formatiert eine `Double` und die `Integer` und `Long` Typzeichen werden vom Compiler abgefangen werden, wenn der Konflikt in Zeichenfolgen nicht enthalten waren.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Val` Funktion, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben. `Val` beendet die Konvertierung mit dem ersten Zeichen, das als eine Ziffer, numerischen Modifizierer, numerischen Satzzeichen oder Leerzeichen interpretiert werden kann.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> ist zu groß.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert. Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
        <summary>Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</summary>
        <returns>Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` Funktion stoppt das Lesen der Zeichenfolge beim ersten Zeichen, das nicht als Teil einer Zahl erkannt wird. Symbole und Zeichen, die häufig als Teil von numerischen Werten, z. B. Währungssymbole und Kommas, erkannt werden, werden nicht erkannt. Die Funktion erkennt jedoch die Basispräfixe `&O` (für oktal) und `&H` (für hexadezimal). Leerzeichen, Tabulatoren und Zeilenvorschubzeichen werden aus dem Argument entfernt.  
  
 Der folgende Aufruf gibt den Wert 1234123 zurück.  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
Der folgende Aufruf gibt den decimal-Wert-1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Die `Val` Funktion erkennt nur den Punkt (`.`) als gültige Dezimaltrennzeichen. Verwenden Sie bei anderen Dezimaltrennzeichen, wie in internationale Anwendungen verwendet werden, `CDbl` oder `CInt` stattdessen zum Konvertieren einer Zeichenfolge in eine Zahl. Um die angegebene Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren, verwenden Sie des numerischen Typs `Parse(String, IFormatProvider)` Methode. Verwenden Sie z. B. <xref:System.Double.Parse%2A?displayProperty=nameWithType> beim Konvertieren einer Zeichenfolge zu einer `Double`.  
  
> [!NOTE]
>  Ein <xref:System.InvalidCastException> Ausnahme kann ausgelöst werden, als Reaktion auf bestimmte ungewöhnliche Zahlenformate. Im folgenden Code wird beispielsweise diese Ausnahme ausgelöst.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Der Konflikt zwischen der Anzahl als formatiert eine `Double` und die `Integer` und `Long` Typzeichen werden vom Compiler abgefangen werden, wenn der Konflikt in Zeichenfolgen nicht enthalten waren.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Val` Funktion, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben. `Val` beendet die Konvertierung mit dem ersten Zeichen, das als eine Ziffer, numerischen Modifizierer, numerischen Satzzeichen oder Leerzeichen interpretiert werden kann.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> ist zu groß.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
  </Members>
</Type>
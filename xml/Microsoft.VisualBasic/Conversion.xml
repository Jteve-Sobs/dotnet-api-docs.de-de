<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8e0e14960480e0249f53d698cc92d75e8301b99" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659020" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7b3f8-101">Das <see langword="Conversion" />-Modul enthält Prozeduren, mit denen verschiedene Konvertierungsoperationen ausgeführt werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7b3f8-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-102">Dieses Modul unterstützt die Visual Basic-Schlüsselwörter und Laufzeit-Bibliothekscode-Elemente, die Dezimalzahlen in andere Basiszahlen konvertiert Zahlen in Zeichenfolgen, Zeichenfolgen, Zahlen und einen Datentyp-Typ in einen anderen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-103">Dieses Beispiel verwendet die `Hex` Funktion, um den hexadezimalen Wert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="7b3f8-104">Das zu konvertierende Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-104">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="7b3f8-105">Der Typ, in den das Objekt konvertiert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-105">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-106">Konvertiert ein Objekt in den angegebenen Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-106">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-107">Ein Objekt, dessen Typ zur Laufzeit der angeforderte Zieltyp ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-107">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-108">Die `CTypeDynamic` -Methode konvertiert das Objekt übergeben, als die `Expression` Parameter in den vom angegebenen Typ der `TargetType` Parameter.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="7b3f8-109">Wenn das Objekt ein dynamisches Objekt ist die `CTypeDynamic` Methode gilt verfügbare dynamische Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="7b3f8-110">Die `CTypeDynamic` Methode ermöglicht das dynamische Konvertierungen in Übereinstimmung mit der Konvertierungssemantik, die durch das Objekt selbst definiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="7b3f8-111">Falls ein dynamisches Objekt erbt <xref:System.Dynamic.DynamicObject>die `CTypeDynamic` -Methode zuerst versucht, eine benutzerdefinierte statische Konvertierung mithilfe der Konvertierung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="7b3f8-112">Wenn die benutzerdefinierten, statische Konvertierung schlägt fehl, die `CTypeDynamic` Methode versucht, mithilfe der dynamischen Konvertierungen die Konvertierung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="7b3f8-113">Wenn ein dynamisches Objekt implementiert <xref:System.Dynamic.IDynamicMetaObjectProvider>die `CTypeDynamic` -Methode erhalten Vorrang vor, um dynamische Konvertierungen über eine benutzerdefinierte, statische Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-114">Im folgenden Beispiel wird die `CTypeDynamic` Methode, um ein dynamisches Objekt in eine Zeichenfolge zu konvertieren, mit der Konvertierung von dynamischen Objekts definiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="7b3f8-115">Der Typ, in den das Objekt konvertiert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-115">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="7b3f8-116">Das zu konvertierende Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-116">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-117">Konvertiert ein Objekt in den angegebenen generischen Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-117">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-118">Ein Objekt, das statisch als der angeforderte generische Typ typisiert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-118">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-119">Die `CTypeDynamic` -Methode konvertiert das Objekt übergeben, als die `Expression` Parameter in den Typ, der durch den Typ des generischen Parameters angegeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="7b3f8-120">Wenn das Objekt ein dynamisches Objekt ist die `CTypeDynamic` Methode gilt verfügbare dynamische Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="7b3f8-121">Die `CTypeDynamic` Methode ermöglicht das dynamische Konvertierungen in Übereinstimmung mit der Konvertierungssemantik, die durch das Objekt selbst definiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="7b3f8-122">Falls ein dynamisches Objekt erbt <xref:System.Dynamic.DynamicObject>die `CTypeDynamic` -Methode zuerst versucht, eine benutzerdefinierte statische Konvertierung mithilfe der Konvertierung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="7b3f8-123">Wenn die benutzerdefinierten, statische Konvertierung schlägt fehl, die `CTypeDynamic` Methode versucht, mithilfe der dynamischen Konvertierungen die Konvertierung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="7b3f8-124">Wenn ein dynamisches Objekt implementiert <xref:System.Dynamic.IDynamicMetaObjectProvider>die `CTypeDynamic` -Methode erhalten Vorrang vor, um dynamische Konvertierungen über eine benutzerdefinierte, statische Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-125">Im folgenden Beispiel wird die `CTypeDynamic` Methode, um ein dynamisches Objekt in eine Zeichenfolge zu konvertieren, mit der Konvertierung von dynamischen Objekts definiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7b3f8-126">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-126">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7b3f8-127">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-127">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-128">Die Fehlermeldung, die dem letzten Laufzeitfehler entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-128">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-129">Die `ErrorToString` Funktion untersucht die eigenschafteneinstellungen des der `Err` Objekt, mit der neuesten Laufzeitfehler angegeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="7b3f8-130">Der Rückgabewert von der `ErrorToString` Funktion entspricht der `Description` Eigenschaft von der `Err` Objekt.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="7b3f8-131">Wenn kein Laufzeitfehler aufgetreten ist, `ErrorToString` gibt eine leere Zeichenfolge ("").</span><span class="sxs-lookup"><span data-stu-id="7b3f8-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="7b3f8-132">In Visual Basic 6.0 und früheren Versionen wird diese Funktionalität bereitgestellt wurde, durch die `Error` Funktion.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-133">Der folgende code verwendet die `ErrorToString` -Funktion zur Anzeige von Fehlermeldungen, die entsprechen den Zahlen angegebenen Fehler.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-134">
            <paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-134">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="7b3f8-135">Dies ist optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-135">Optional.</span>
          </span>
          <span data-ttu-id="7b3f8-136">Eine beliebige gültige Fehlernummer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-136">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-137">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-137">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-138">Die Fehlermeldung, die einer bestimmten Fehlernummer entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-138">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-139">Die `ErrorToString` Funktion untersucht die eigenschafteneinstellungen des der `Err` Objekt, mit der neuesten Laufzeitfehler angegeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="7b3f8-140">Der Rückgabewert von der `ErrorToString` Funktion entspricht der `Description` Eigenschaft von der `Err` Objekt.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="7b3f8-141">Wenn `ErrorNumber` eine gültige Fehlernummer, jedoch nicht definiert ist, `ErrorToString` gibt die Zeichenfolge `"Application-defined or object-defined error."` Wenn `ErrorNumber` ist ungültig, ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="7b3f8-142">Wenn `ErrorNumber` weggelassen wird, wird die letzte entsprechende Meldung zur Laufzeit Fehler zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="7b3f8-143">Wenn kein Laufzeitfehler aufgetreten ist oder `ErrorNumber` ist 0, `ErrorToString` gibt eine Zeichenfolge mit der Länge Null zurück ("").</span><span class="sxs-lookup"><span data-stu-id="7b3f8-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="7b3f8-144">In Visual Basic 6.0 und früheren Versionen wird diese Funktionalität bereitgestellt wurde, durch die `Error` Funktion.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-145">Der folgende code verwendet die `ErrorToString` -Funktion zur Anzeige von Fehlermeldungen, die entsprechen den Zahlen angegebenen Fehler.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-146">
            <paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-146">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7b3f8-147">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-147">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-148">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-148">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-149">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-149">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-150">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-151">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-151">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-152">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-152">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-153">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-154">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-155">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-156">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-157">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-158">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-159">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-160">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-161">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-162">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-163">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-164">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-165">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-166">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-166">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-167">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-167">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-168">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-168">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-169">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-169">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-170">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-171">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-171">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-172">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-172">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-173">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-174">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-175">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-176">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-177">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-178">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-179">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-180">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-181">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-182">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-183">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-184">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-185">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-186">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-186">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-187">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-187">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-188">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-188">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-189">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-189">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-190">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-191">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-191">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-192">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-192">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-193">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-194">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-195">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-196">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-197">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-198">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-199">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-200">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-201">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-202">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-203">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-204">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-205">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-206">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-206">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-207">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-207">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-208">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-208">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-209">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-209">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-210">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-211">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-211">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-212">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-212">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-213">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-214">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-215">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-216">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-217">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-218">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-219">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-220">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-221">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-222">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-223">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-224">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-225">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-226">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-226">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-227">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-227">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-228">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-228">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-229">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-229">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-230">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-231">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-231">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-232">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-232">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-233">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-234">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-235">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-236">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-237">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-238">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-239">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-240">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-241">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-242">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-243">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-244">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-245">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-246">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-246">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-247">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-247">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-248">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-248">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-249">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-249">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-250">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-251">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-251">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-252">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-252">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-253">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-254">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-255">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-256">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-257">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-258">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-259">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-260">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-261">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-262">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-263">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-264">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-265">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-266">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-266">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-267">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-267">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-268">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-268">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-269">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-269">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-270">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-271">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-271">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-272">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-272">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-273">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-274">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-275">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-276">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-277">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-278">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-279">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-280">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-281">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-282">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-283">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-284">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-285">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-286">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-286">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-287">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-287">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7b3f8-288">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-288">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-289">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-289">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-290">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-290">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-291">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-291">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-292">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-292">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-293">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-294">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-294">If `Number` is</span></span>|<span data-ttu-id="7b3f8-295">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="7b3f8-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-296">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-296">Empty</span></span>|<span data-ttu-id="7b3f8-297">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-297">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-298">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="7b3f8-298">Any numeric value</span></span>|<span data-ttu-id="7b3f8-299">Bis zu 16 Hexadezimalzeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-300">Sie können den hexadezimale Zahlen darstellen, direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7b3f8-301">Beispielsweise `&H10` Dezimal 16 in Hexadezimalschreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-302">Dieses Beispiel verwendet die `Hex` Funktion, um den hexadezimalen Wert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-303">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-303">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-304">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-304">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-305">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-305">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-306">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-306">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-307">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-307">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-308">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-308">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-309">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-310">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-310">If `Number` is</span></span>|<span data-ttu-id="7b3f8-311">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="7b3f8-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-312">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-312">Empty</span></span>|<span data-ttu-id="7b3f8-313">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-313">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-314">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="7b3f8-314">Any numeric value</span></span>|<span data-ttu-id="7b3f8-315">Bis zu 16 Hexadezimalzeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-316">Sie können den hexadezimale Zahlen darstellen, direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7b3f8-317">Beispielsweise `&H10` Dezimal 16 in Hexadezimalschreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-318">Dieses Beispiel verwendet die `Hex` Funktion, um den hexadezimalen Wert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-319">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-319">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-320">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-320">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-321">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-321">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-322">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-322">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-323">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-323">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-324">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-324">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-325">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-326">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-326">If `Number` is</span></span>|<span data-ttu-id="7b3f8-327">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="7b3f8-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-328">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-328">Empty</span></span>|<span data-ttu-id="7b3f8-329">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-329">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-330">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="7b3f8-330">Any numeric value</span></span>|<span data-ttu-id="7b3f8-331">Bis zu 16 Hexadezimalzeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-332">Sie können den hexadezimale Zahlen darstellen, direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7b3f8-333">Beispielsweise `&H10` Dezimal 16 in Hexadezimalschreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-334">Dieses Beispiel verwendet die `Hex` Funktion, um den hexadezimalen Wert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-335">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-335">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-336">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-336">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-337">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-337">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-338">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-338">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-339">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-339">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-340">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-340">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-341">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-342">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-342">If `Number` is</span></span>|<span data-ttu-id="7b3f8-343">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="7b3f8-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-344">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-344">Empty</span></span>|<span data-ttu-id="7b3f8-345">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-345">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-346">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="7b3f8-346">Any numeric value</span></span>|<span data-ttu-id="7b3f8-347">Bis zu 16 Hexadezimalzeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-348">Sie können den hexadezimale Zahlen darstellen, direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7b3f8-349">Beispielsweise `&H10` Dezimal 16 in Hexadezimalschreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-350">Dieses Beispiel verwendet die `Hex` Funktion, um den hexadezimalen Wert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-351">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-351">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-352">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-352">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-353">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-353">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-354">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-354">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-355">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-356">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-356">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-357">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-358">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-358">If `Number` is</span></span>|<span data-ttu-id="7b3f8-359">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="7b3f8-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-360">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-360">Empty</span></span>|<span data-ttu-id="7b3f8-361">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-361">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-362">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="7b3f8-362">Any numeric value</span></span>|<span data-ttu-id="7b3f8-363">Bis zu 16 Hexadezimalzeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-364">Sie können den hexadezimale Zahlen darstellen, direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7b3f8-365">Beispielsweise `&H10` Dezimal 16 in Hexadezimalschreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-366">Dieses Beispiel verwendet die `Hex` Funktion, um den hexadezimalen Wert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-367">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-367">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-368">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-368">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-369">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-369">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-370">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-370">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-371">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-371">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-372">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-373">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-374">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-374">If `Number` is</span></span>|<span data-ttu-id="7b3f8-375">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="7b3f8-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-376">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-376">Empty</span></span>|<span data-ttu-id="7b3f8-377">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-377">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-378">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="7b3f8-378">Any numeric value</span></span>|<span data-ttu-id="7b3f8-379">Bis zu 16 Hexadezimalzeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-380">Sie können den hexadezimale Zahlen darstellen, direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7b3f8-381">Beispielsweise `&H10` Dezimal 16 in Hexadezimalschreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-382">Dieses Beispiel verwendet die `Hex` Funktion, um den hexadezimalen Wert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-383">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-383">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-384">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-384">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-385">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-385">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-386">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-387">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-388">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-389">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-390">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-390">If `Number` is</span></span>|<span data-ttu-id="7b3f8-391">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="7b3f8-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-392">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-392">Empty</span></span>|<span data-ttu-id="7b3f8-393">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-393">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-394">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="7b3f8-394">Any numeric value</span></span>|<span data-ttu-id="7b3f8-395">Bis zu 16 Hexadezimalzeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-396">Sie können den hexadezimale Zahlen darstellen, direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7b3f8-397">Beispielsweise `&H10` Dezimal 16 in Hexadezimalschreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-398">Dieses Beispiel verwendet die `Hex` Funktion, um den hexadezimalen Wert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-399">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-400">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-401">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-401">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-402">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-402">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-403">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-403">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-404">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-404">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-405">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-406">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-406">If `Number` is</span></span>|<span data-ttu-id="7b3f8-407">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="7b3f8-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-408">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-408">Empty</span></span>|<span data-ttu-id="7b3f8-409">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-409">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-410">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="7b3f8-410">Any numeric value</span></span>|<span data-ttu-id="7b3f8-411">Bis zu 16 Hexadezimalzeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-412">Sie können den hexadezimale Zahlen darstellen, direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7b3f8-413">Beispielsweise `&H10` Dezimal 16 in Hexadezimalschreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-414">Dieses Beispiel verwendet die `Hex` Funktion, um den hexadezimalen Wert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-415">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-415">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-416">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-416">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-417">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-417">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-418">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-418">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-419">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-419">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-420">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-420">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-421">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-422">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-422">If `Number` is</span></span>|<span data-ttu-id="7b3f8-423">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="7b3f8-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-424">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-424">Empty</span></span>|<span data-ttu-id="7b3f8-425">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-425">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-426">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="7b3f8-426">Any numeric value</span></span>|<span data-ttu-id="7b3f8-427">Bis zu 16 Hexadezimalzeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-428">Sie können den hexadezimale Zahlen darstellen, direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7b3f8-429">Beispielsweise `&H10` Dezimal 16 in Hexadezimalschreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-430">Dieses Beispiel verwendet die `Hex` Funktion, um den hexadezimalen Wert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-431">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-431">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-432">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-432">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7b3f8-433">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-433">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-434">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-434">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-435">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-435">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-436">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-437">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-437">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-438">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-438">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-439">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-440">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-441">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-442">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-443">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-444">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-445">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-446">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-447">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-448">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-449">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-450">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-451">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-452">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-452">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-453">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-453">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-454">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-454">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-455">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-455">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-456">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-457">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-457">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-458">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-458">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-459">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-460">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-461">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-462">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-463">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-464">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-465">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-466">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-467">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-468">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-469">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-470">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-471">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-472">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-472">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-473">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-473">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-474">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-474">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-475">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-475">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-476">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-477">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-477">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-478">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-478">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-479">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-480">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-481">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-482">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-483">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-484">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-485">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-486">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-487">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-488">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-489">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-490">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-491">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-492">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-492">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-493">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-493">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-494">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-494">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-495">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-496">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-497">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-498">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-499">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-500">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-501">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-502">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-503">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-504">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-505">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-506">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-507">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-508">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-509">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-510">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-511">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-512">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-513">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-514">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-514">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-515">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-515">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-516">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-517">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-517">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-518">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-518">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-519">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-520">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-521">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-522">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-523">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-524">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-525">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-526">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-527">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-528">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-529">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-530">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-531">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-532">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-532">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-533">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-533">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-534">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-534">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-535">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-535">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-536">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-537">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-537">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-538">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-538">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-539">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-540">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-541">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-542">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-543">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-544">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-545">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-546">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-547">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-548">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-549">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-550">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-551">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-552">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-552">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-553">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-553">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-554">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-554">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-555">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-555">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7b3f8-556">Wenn <c>Number</c><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-557">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-557">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-558">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-558">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-559">Sowohl die `Int` und `Fix` Funktionen entfernen den Bruchteil der `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7b3f8-560">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`, wohingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7b3f8-561">Beispielsweise `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7b3f8-562">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7b3f8-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-563">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben ganzzahligen Teile einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7b3f8-564">Im Falle eines Arguments für negative Zahl die `Int` Funktion gibt der ersten negativen ganze Zahl kleiner oder gleich der Anzahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7b3f8-565">Im folgende Beispiel erfordert die Angabe `Option Strict Off` Da implizite Konvertierungen von Typ `Double` Eingabe `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7b3f8-566">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7b3f8-567">Allerdings `CInt` Rundet auf die nächste ganze Zahl, statt den Bruchteil der Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7b3f8-568">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7b3f8-569">Können Sie die `CInt` Funktion auf das Ergebnis eines Aufrufs von `Fix` oder `Int` um eine explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7b3f8-570">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="7b3f8-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7b3f8-571">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-572">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-572">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-573">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-573">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7b3f8-574">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-574">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-575">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-575">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-576">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-576">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-577">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-577">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-578">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-578">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-579">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-580">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-580">If Number is</span></span>|<span data-ttu-id="7b3f8-581">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="7b3f8-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-582">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-582">Empty</span></span>|<span data-ttu-id="7b3f8-583">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-583">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-584">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="7b3f8-584">Any other number</span></span>|<span data-ttu-id="7b3f8-585">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-586">Sie können Oktalzahlen direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7b3f8-587">Beispielsweise `&O10` der Oktalnotation für die Dezimalzahl 8 ist.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-588">Dieses Beispiel verwendet die `Oct` Funktion, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-589">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-589">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-590">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-590">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-591">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-591">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-592">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-592">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-593">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-593">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-594">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-594">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-595">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-596">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-596">If Number is</span></span>|<span data-ttu-id="7b3f8-597">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="7b3f8-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-598">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-598">Empty</span></span>|<span data-ttu-id="7b3f8-599">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-599">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-600">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="7b3f8-600">Any other number</span></span>|<span data-ttu-id="7b3f8-601">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-602">Sie können Oktalzahlen direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7b3f8-603">Beispielsweise `&O10` der Oktalnotation für die Dezimalzahl 8 ist.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-604">Dieses Beispiel verwendet die `Oct` Funktion, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-605">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-605">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-606">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-606">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-607">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-607">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-608">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-608">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-609">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-609">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-610">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-610">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-611">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-612">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-612">If Number is</span></span>|<span data-ttu-id="7b3f8-613">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="7b3f8-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-614">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-614">Empty</span></span>|<span data-ttu-id="7b3f8-615">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-615">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-616">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="7b3f8-616">Any other number</span></span>|<span data-ttu-id="7b3f8-617">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-618">Sie können Oktalzahlen direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7b3f8-619">Beispielsweise `&O10` der Oktalnotation für die Dezimalzahl 8 ist.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-620">Dieses Beispiel verwendet die `Oct` Funktion, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-621">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-621">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-622">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-622">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-623">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-623">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-624">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-624">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-625">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-625">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-626">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-626">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-627">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-628">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-628">If Number is</span></span>|<span data-ttu-id="7b3f8-629">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="7b3f8-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-630">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-630">Empty</span></span>|<span data-ttu-id="7b3f8-631">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-631">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-632">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="7b3f8-632">Any other number</span></span>|<span data-ttu-id="7b3f8-633">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-634">Sie können Oktalzahlen direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7b3f8-635">Beispielsweise `&O10` der Oktalnotation für die Dezimalzahl 8 ist.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-636">Dieses Beispiel verwendet die `Oct` Funktion, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-637">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-637">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-638">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-638">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-639">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-639">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-640">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-640">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-641">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-641">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-642">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-642">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-643">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-644">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-644">If Number is</span></span>|<span data-ttu-id="7b3f8-645">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="7b3f8-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-646">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-646">Empty</span></span>|<span data-ttu-id="7b3f8-647">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-647">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-648">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="7b3f8-648">Any other number</span></span>|<span data-ttu-id="7b3f8-649">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-650">Sie können Oktalzahlen direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7b3f8-651">Beispielsweise `&O10` der Oktalnotation für die Dezimalzahl 8 ist.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-652">Dieses Beispiel verwendet die `Oct` Funktion, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-653">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-653">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-654">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-654">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-655">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-655">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-656">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-656">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-657">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-657">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-658">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-658">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-659">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-660">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-660">If Number is</span></span>|<span data-ttu-id="7b3f8-661">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="7b3f8-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-662">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-662">Empty</span></span>|<span data-ttu-id="7b3f8-663">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-663">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-664">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="7b3f8-664">Any other number</span></span>|<span data-ttu-id="7b3f8-665">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-666">Sie können Oktalzahlen direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7b3f8-667">Beispielsweise `&O10` der Oktalnotation für die Dezimalzahl 8 ist.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-668">Dieses Beispiel verwendet die `Oct` Funktion, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-669">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-669">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-670">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-670">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-671">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-671">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-672">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-672">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-673">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-673">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-674">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-674">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-675">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-676">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-676">If Number is</span></span>|<span data-ttu-id="7b3f8-677">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="7b3f8-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-678">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-678">Empty</span></span>|<span data-ttu-id="7b3f8-679">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-679">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-680">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="7b3f8-680">Any other number</span></span>|<span data-ttu-id="7b3f8-681">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-682">Sie können Oktalzahlen direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7b3f8-683">Beispielsweise `&O10` der Oktalnotation für die Dezimalzahl 8 ist.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-684">Dieses Beispiel verwendet die `Oct` Funktion, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-685">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-685">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-686">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-686">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-687">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-687">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-688">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-688">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-689">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-689">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-690">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-690">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-691">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-692">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-692">If Number is</span></span>|<span data-ttu-id="7b3f8-693">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="7b3f8-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-694">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-694">Empty</span></span>|<span data-ttu-id="7b3f8-695">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-695">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-696">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="7b3f8-696">Any other number</span></span>|<span data-ttu-id="7b3f8-697">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-698">Sie können Oktalzahlen direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7b3f8-699">Beispielsweise `&O10` der Oktalnotation für die Dezimalzahl 8 ist.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-700">Dieses Beispiel verwendet die `Oct` Funktion, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-701">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-701">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-702">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-702">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-703">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-703">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-704">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-704">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-705">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-705">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-706">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-706">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-707">Wenn `Number` ist nicht bereits eine ganze Zahl, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7b3f8-708">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="7b3f8-708">If Number is</span></span>|<span data-ttu-id="7b3f8-709">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="7b3f8-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7b3f8-710">Empty</span><span class="sxs-lookup"><span data-stu-id="7b3f8-710">Empty</span></span>|<span data-ttu-id="7b3f8-711">Null (0)</span><span class="sxs-lookup"><span data-stu-id="7b3f8-711">Zero (0)</span></span>|  
|<span data-ttu-id="7b3f8-712">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="7b3f8-712">Any other number</span></span>|<span data-ttu-id="7b3f8-713">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="7b3f8-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7b3f8-714">Sie können Oktalzahlen direkt abgrenzen, indem Sie Zahlen im richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7b3f8-715">Beispielsweise `&O10` der Oktalnotation für die Dezimalzahl 8 ist.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-716">Dieses Beispiel verwendet die `Oct` Funktion, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-717">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-717">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-718">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-718">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7b3f8-719">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-719">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-720">Ein <see langword="Object" />, das einen beliebigen gültigen numerischen Ausdruck enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-720">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-721">Gibt eine <see langword="String" />-Darstellung dieser Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-721">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-722">Gibt eine <see langword="String" />-Darstellung dieser Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-722">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-723">Wenn Zahlen in Zeichenfolgen konvertiert werden, ist ein führendes Leerzeichen immer für das Vorzeichen des reserviert `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="7b3f8-724">Wenn `Number` positiv ist, enthält die zurückgegebene Zeichenfolge ein führendes Leerzeichen, und das Pluszeichen wird impliziert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="7b3f8-725">Eine negative Zahl, wird das Minuszeichen (-) und ohne führende Leerzeichen enthalten.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="7b3f8-726">Verwenden der `Format` Funktion, um numerische Werte konvertieren formatiert werden, wie Datumsangaben, Uhrzeiten oder Währung oder in anderen benutzerdefinierten Formaten sollen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="7b3f8-727">Im Gegensatz zu den `Str` -Funktion, die `Format` Funktion enthält kein führendes Leerzeichen für das Vorzeichen des `Number`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7b3f8-728">Die `Str` Funktion erkennt nur den Punkt (`.`) als gültiges Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="7b3f8-729">Wenn unterschiedliche Dezimaltrennzeichen (z. B. in internationalen Anwendungen) verwendet werden, verwenden die `CStr` oder `Format` Funktionen zum Konvertieren einer Zahl in eine Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="7b3f8-730">Um die Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur abzurufen, verwenden Sie der Anzahl `ToString(IFormatProvider)` Methode.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="7b3f8-731">Verwenden Sie z. B. <xref:System.Double.ToString%2A> beim Konvertieren eines Werts vom Typ `Double` in eine Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-732">Dieses Beispiel verwendet die `Str` Funktion zurückzugebende eine `String` Zeichenfolgendarstellung einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="7b3f8-733">Wenn eine positive Zahl in eine Zeichenfolge konvertiert wird, wird ein führendes Leerzeichen immer für das Vorzeichen reserviert.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b3f8-734">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-734">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="7b3f8-735">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-735">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7b3f8-736">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="7b3f8-737">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-737">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-738">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="7b3f8-739">Wenn <c>Expression</c> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-740">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-741">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-742">Die `Val` Funktion beendet das Lesen der Zeichenfolge am ersten Zeichen, das nicht als Teil einer Zahl erkannt.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="7b3f8-743">Symbole und Zeichen, die häufig Teile von numerischen Werten, z. B. das Dollarzeichen Punkte und Kommas, betrachtet werden, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="7b3f8-744">Die Funktion erkennt jedoch die Basispräfixe `&O` (für oktal) und `&H` (für hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="7b3f8-745">Leerzeichen, Tabulatoren und Zeilenvorschubzeichen werden aus dem Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="7b3f8-746">Der folgende Aufruf gibt den Wert 1615198 zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="7b3f8-747">Der folgende Aufruf gibt die decimal-Wert-1 zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="7b3f8-748">Die `Val` Funktion erkennt nur den Punkt (`.`) als gültiges Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="7b3f8-749">Verwenden Sie unterschiedliche Dezimaltrennzeichen verwendet werden, wie in internationalen Anwendungen `CDbl` oder `CInt` stattdessen zum Konvertieren einer Zeichenfolge in eine Zahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="7b3f8-750">Um die angegebene Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren, verwenden Sie des numerischen Typs `Parse(String, IFormatProvider)` Methode.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="7b3f8-751">Verwenden Sie z. B. <xref:System.Double.Parse%2A?displayProperty=nameWithType> beim Konvertieren einer Zeichenfolge zu einer `Double`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7b3f8-752">Ein <xref:System.InvalidCastException> Ausnahme kann ausgelöst werden, als Reaktion auf bestimmte ungewöhnliche Zahlenformate.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="7b3f8-753">Im folgenden Code wird z. B. diese Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="7b3f8-754">Der Konflikt zwischen der Zahl als formatiert eine `Double` und die `Integer` und `Long` Typzeichen würde vom Compiler abgefangen werden, wenn er nicht in einer Zeichenfolge enthalten wäre.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-755">Im folgenden Beispiel wird die `Val` Funktion, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="7b3f8-756">`Val` beendet das Konvertieren von am ersten Zeichen, das als numerische Ziffer, numerischen Modifizierer, numerisches Satzzeichen oder Leerzeichen interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="7b3f8-757">
            <paramref name="InputStr" /> ist zu groß.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-757">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-758">
            <paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-758">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="7b3f8-759">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-759">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-760">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="7b3f8-761">Wenn <c>Expression</c> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-762">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-763">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-764">Die `Val` Funktion beendet das Lesen der Zeichenfolge am ersten Zeichen, das nicht als Teil einer Zahl erkannt.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="7b3f8-765">Symbole und Zeichen, die häufig Teile von numerischen Werten, z. B. das Dollarzeichen Punkte und Kommas, betrachtet werden, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="7b3f8-766">Die Funktion erkennt jedoch die Basispräfixe `&O` (für oktal) und `&H` (für hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="7b3f8-767">Leerzeichen, Tabulatoren und Zeilenvorschubzeichen werden aus dem Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="7b3f8-768">Der folgende Aufruf gibt den Wert 1234123 zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="7b3f8-769">Der folgende Aufruf gibt die decimal-Wert-1 zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="7b3f8-770">Die `Val` Funktion erkennt nur den Punkt (`.`) als gültiges Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="7b3f8-771">Verwenden Sie bei anderen Dezimaltrennzeichen, wie in internationale Anwendungen verwendet werden `CDbl` oder `CInt` stattdessen zum Konvertieren einer Zeichenfolge in eine Zahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="7b3f8-772">Um die angegebene Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren, verwenden Sie des numerischen Typs `Parse(String, IFormatProvider)` Methode.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="7b3f8-773">Verwenden Sie z. B. <xref:System.Double.Parse%2A?displayProperty=nameWithType> beim Konvertieren einer Zeichenfolge zu einer `Double`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7b3f8-774">Ein <xref:System.InvalidCastException> Ausnahme kann ausgelöst werden, als Reaktion auf bestimmte ungewöhnliche Zahlenformate.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="7b3f8-775">Im folgenden Code wird z. B. diese Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="7b3f8-776">Der Konflikt zwischen der Zahl als formatierte eine `Double` und die `Integer` und `Long` Typzeichen würde vom Compiler aufgefangen, wenn der Konflikt nicht in Zeichenfolgen enthalten wären.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-777">Im folgenden Beispiel wird die `Val` Funktion, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="7b3f8-778">`Val` beendet das Konvertieren von am ersten Zeichen, das als numerische Ziffer, numerischen Modifizierer, numerisches Satzzeichen oder Leerzeichen interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="7b3f8-779">
            <paramref name="InputStr" /> ist zu groß.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-779">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-780">
            <paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-780">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="7b3f8-781">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-781">Required.</span>
          </span>
          <span data-ttu-id="7b3f8-782">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="7b3f8-783">Wenn <c>Expression</c> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b3f8-784">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b3f8-785">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b3f8-786">Die `Val` Funktion beendet das Lesen der Zeichenfolge am ersten Zeichen, das nicht als Teil einer Zahl erkannt.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="7b3f8-787">Symbole und Zeichen, die häufig Teile von numerischen Werten, z. B. das Dollarzeichen Punkte und Kommas, betrachtet werden, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="7b3f8-788">Die Funktion erkennt jedoch die Basispräfixe `&O` (für oktal) und `&H` (für hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="7b3f8-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="7b3f8-789">Leerzeichen, Tabulatoren und Zeilenvorschubzeichen werden aus dem Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="7b3f8-790">Der folgende Aufruf gibt den Wert 1234123 zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="7b3f8-791">Der folgende Aufruf gibt die decimal-Wert-1 zurück.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="7b3f8-792">Die `Val` Funktion erkennt nur den Punkt (`.`) als gültiges Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="7b3f8-793">Verwenden Sie bei anderen Dezimaltrennzeichen, wie in internationale Anwendungen verwendet werden `CDbl` oder `CInt` stattdessen zum Konvertieren einer Zeichenfolge in eine Zahl.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="7b3f8-794">Um die angegebene Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren, verwenden Sie des numerischen Typs `Parse(String, IFormatProvider)` Methode.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="7b3f8-795">Verwenden Sie z. B. <xref:System.Double.Parse%2A?displayProperty=nameWithType> beim Konvertieren einer Zeichenfolge zu einer `Double`.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7b3f8-796">Ein <xref:System.InvalidCastException> Ausnahme kann ausgelöst werden, als Reaktion auf bestimmte ungewöhnliche Zahlenformate.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="7b3f8-797">Im folgenden Code wird z. B. diese Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="7b3f8-798">Der Konflikt zwischen der Zahl als formatierte eine `Double` und die `Integer` und `Long` Typzeichen würde vom Compiler aufgefangen, wenn der Konflikt nicht in Zeichenfolgen enthalten wären.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="7b3f8-799">Im folgenden Beispiel wird die `Val` Funktion, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="7b3f8-800">`Val` beendet das Konvertieren von am ersten Zeichen, das als numerische Ziffer, numerischen Modifizierer, numerisches Satzzeichen oder Leerzeichen interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="7b3f8-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="7b3f8-801">
            <paramref name="InputStr" /> ist zu groß.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-801">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7b3f8-802">
            <paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b3f8-802">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>
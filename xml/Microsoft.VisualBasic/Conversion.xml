<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="093db67cb3c739ef9d2f91f8d2e98f666d35387b" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70614472" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6cea7-101">Das <see langword="Conversion" />-Modul enthält Prozeduren, mit denen verschiedene Konvertierungsoperationen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-102">Dieses Modul unterstützt die Visual Basic-sprach Schlüsselwörter und-Lauf Zeit Bibliothekselemente, die Dezimalzahlen in andere Basen, Zahlen in Zeichen folgen, Zeichen folgen in Zahlen und einen Datentyp in einen anderen konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-103">In diesem Beispiel wird `Hex` die-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-104">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="6cea7-105">Schlüsselwörter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="6cea7-106">Visual Basic von Lauf Zeit Bibliotheks Membern</span><span class="sxs-lookup"><span data-stu-id="6cea7-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="6cea7-107">Das zu konvertierende Objekt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="6cea7-108">Der Typ, in den das Objekt konvertiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="6cea7-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="6cea7-109">Konvertiert ein Objekt in den angegebenen Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="6cea7-110">Ein Objekt, dessen Typ zur Laufzeit der angeforderte Zieltyp ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-111">Die `CTypeDynamic` -Methode konvertiert das `Expression` als-Parameter übergebenen-Objekt in `TargetType` den vom-Parameter angegebenen Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="6cea7-112">Wenn das Objekt ein dynamisches Objekt ist, wendet `CTypeDynamic` die Methode verfügbare dynamische Konvertierungen an.</span><span class="sxs-lookup"><span data-stu-id="6cea7-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="6cea7-113">Die `CTypeDynamic` -Methode wendet dynamische Konvertierungen in Übereinstimmung mit der durch das-Objekt selbst definierten Konvertierungs Semantik an.</span><span class="sxs-lookup"><span data-stu-id="6cea7-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="6cea7-114">Wenn ein dynamisches Objekt von <xref:System.Dynamic.DynamicObject>erbt, versucht die `CTypeDynamic` -Methode zuerst, die Konvertierung mithilfe einer benutzerdefinierten, statischen Konvertierung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="6cea7-115">Wenn die benutzerdefinierte, statische Konvertierung fehlschlägt, versucht `CTypeDynamic` die-Methode, die Konvertierung mithilfe dynamischer Konvertierungen durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="6cea7-116">Wenn ein dynamisches Objekt implementiert <xref:System.Dynamic.IDynamicMetaObjectProvider>, gibt `CTypeDynamic` die Methode den dynamischen Konvertierungen Vorrang vor benutzerdefinierten, statischen Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-117">Im folgenden Beispiel wird die `CTypeDynamic` -Methode verwendet, um ein dynamisches Objekt in eine Zeichenfolge zu konvertieren, indem die durch das dynamische Objekt definierte Konvertierung verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="6cea7-118">Arbeiten mit dynamischen Objekten (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="6cea7-119">Exemplarische Vorgehensweise: Erstellen und Verwenden von dynamischen Objekten (C# und Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="6cea7-120">Der Typ, in den das Objekt konvertiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="6cea7-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="6cea7-121">Das zu konvertierende Objekt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="6cea7-122">Konvertiert ein Objekt in den angegebenen generischen Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="6cea7-123">Ein Objekt, das statisch als der angeforderte generische Typ typisiert ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-124">Die `CTypeDynamic` -Methode konvertiert das `Expression` als-Parameter übergebenen-Objekt in den Typ, der vom Typ des generischen Parameters angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="6cea7-125">Wenn das Objekt ein dynamisches Objekt ist, wendet `CTypeDynamic` die Methode verfügbare dynamische Konvertierungen an.</span><span class="sxs-lookup"><span data-stu-id="6cea7-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="6cea7-126">Die `CTypeDynamic` -Methode wendet dynamische Konvertierungen in Übereinstimmung mit der durch das-Objekt selbst definierten Konvertierungs Semantik an.</span><span class="sxs-lookup"><span data-stu-id="6cea7-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="6cea7-127">Wenn ein dynamisches Objekt von <xref:System.Dynamic.DynamicObject>erbt, versucht die `CTypeDynamic` -Methode zuerst, die Konvertierung mithilfe einer benutzerdefinierten, statischen Konvertierung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="6cea7-128">Wenn die benutzerdefinierte, statische Konvertierung fehlschlägt, versucht `CTypeDynamic` die-Methode, die Konvertierung mithilfe dynamischer Konvertierungen durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="6cea7-129">Wenn ein dynamisches Objekt implementiert <xref:System.Dynamic.IDynamicMetaObjectProvider>, gibt `CTypeDynamic` die Methode den dynamischen Konvertierungen Vorrang vor benutzerdefinierten, statischen Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-130">Im folgenden Beispiel wird die `CTypeDynamic` -Methode verwendet, um ein dynamisches Objekt in eine Zeichenfolge zu konvertieren, indem die durch das dynamische Objekt definierte Konvertierung verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="6cea7-131">Arbeiten mit dynamischen Objekten (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="6cea7-132">Exemplarische Vorgehensweise: Erstellen und Verwenden von dynamischen Objekten (C# und Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6cea7-133">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="6cea7-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cea7-134">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="6cea7-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-135">Die Fehlermeldung, die dem letzten Laufzeitfehler entspricht.</span><span class="sxs-lookup"><span data-stu-id="6cea7-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-136">Die `ErrorToString` -Funktion überprüft die Eigenschaften Einstellungen `Err` des-Objekts, um den aktuellen Laufzeitfehler zu identifizieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="6cea7-137">Der Rückgabewert der `ErrorToString` -Funktion entspricht der `Description` -Eigenschaft des `Err` -Objekts.</span><span class="sxs-lookup"><span data-stu-id="6cea7-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="6cea7-138">Wenn kein Laufzeitfehler aufgetreten ist, `ErrorToString` gibt eine Zeichenfolge der Länge 0 (null) zurück ("").</span><span class="sxs-lookup"><span data-stu-id="6cea7-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="6cea7-139">In Visual Basic Version 6,0 und früher wurde diese Funktion von der `Error` -Funktion bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-140">Im folgenden Code wird die `ErrorToString` -Funktion verwendet, um Fehlermeldungen anzuzeigen, die den angegebenen Fehlernummern entsprechen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-141"><paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="6cea7-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="6cea7-142">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="6cea7-142">Optional.</span></span> <span data-ttu-id="6cea7-143">Eine beliebige gültige Fehlernummer.</span><span class="sxs-lookup"><span data-stu-id="6cea7-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="6cea7-144">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="6cea7-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-145">Die Fehlermeldung, die einer bestimmten Fehlernummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="6cea7-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-146">Die `ErrorToString` -Funktion überprüft die Eigenschaften Einstellungen `Err` des-Objekts, um den aktuellen Laufzeitfehler zu identifizieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="6cea7-147">Der Rückgabewert der `ErrorToString` -Funktion entspricht der `Description` -Eigenschaft des `Err` -Objekts.</span><span class="sxs-lookup"><span data-stu-id="6cea7-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="6cea7-148">Wenn `ErrorNumber` eine gültige Fehlernummer ist, aber nicht definiert ist, wird die `"Application-defined or object-defined error."` Zeichen `ErrorNumber` Folge zurückgegeben, `ErrorToString` wenn ungültig ist, tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="6cea7-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="6cea7-149">Wenn `ErrorNumber` weggelassen wird, wird die Meldung zurückgegeben, die dem letzten Laufzeitfehler entspricht.</span><span class="sxs-lookup"><span data-stu-id="6cea7-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="6cea7-150">Wenn kein Laufzeitfehler aufgetreten ist oder `ErrorNumber` 0 ist, `ErrorToString` wird eine Zeichenfolge der Länge 0 (null) ("") zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="6cea7-151">In Visual Basic Version 6,0 und früher wurde diese Funktion von der `Error` -Funktion bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-152">Im folgenden Code wird die `ErrorToString` -Funktion verwendet, um Fehlermeldungen anzuzeigen, die den angegebenen Fehlernummern entsprechen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-153"><paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="6cea7-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6cea7-154">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-155">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-155">Required.</span></span> <span data-ttu-id="6cea7-156">Eine Zahl vom Typ <see langword="Decimal" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-157">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-158">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-159">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-160">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-161">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-162">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="6cea7-163">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-164">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-165">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-166">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-167">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-168">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-169">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-170">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-171">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-172">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-173">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-174">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-175">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-176">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-177">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-178">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-179">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-179">Required.</span></span> <span data-ttu-id="6cea7-180">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-181">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-182">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-183">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-184">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-185">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-186">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="6cea7-187">Ab Visual Basic 15,8 wird die Leistung der Konvertierung `Double`von zu ganzzahligen Daten optimiert, wenn Sie den von der `Fix` -Methode zurückgegebenen Wert an die ganzzahligen [Konvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md)übergeben oder `Double` wenn der Wert zurückgegeben wird. by `Fix` wird implizit in eine ganze Zahl konvertiert, bei der [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf `Off`festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="6cea7-188">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="6cea7-189">Das folgende Beispiel veranschaulicht eine solche optimierte Konvertierung:</span><span class="sxs-lookup"><span data-stu-id="6cea7-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="6cea7-190">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-191">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-192">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-193">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-194">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-195">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-196">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-197">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-198">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-199">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-200">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-201">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-202">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-203">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-204">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-205">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-206">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-206">Required.</span></span> <span data-ttu-id="6cea7-207">Eine Zahl vom Typ <see langword="Short" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-208">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-209">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-210">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-211">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-212">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-213">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-214">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-215">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-216">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-217">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-218">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-219">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-220">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-221">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-222">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-223">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-224">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-225">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-226">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-227">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-228">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-229">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-230">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-230">Required.</span></span> <span data-ttu-id="6cea7-231">Eine Zahl vom Typ <see langword="Integer" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-232">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-233">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-234">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-235">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-236">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-237">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-238">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-239">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-240">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-241">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-242">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-243">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-244">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-245">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-246">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-247">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-248">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-249">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-250">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-251">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-252">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-253">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-254">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-254">Required.</span></span> <span data-ttu-id="6cea7-255">Eine Zahl vom Typ <see langword="Long" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-256">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-257">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-258">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-259">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-260">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-261">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-262">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-263">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-264">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-265">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-266">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-267">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-268">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-269">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-270">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-271">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-272">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-273">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-274">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-275">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-276">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-277">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-278">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-278">Required.</span></span> <span data-ttu-id="6cea7-279">Eine Zahl vom Typ <see langword="Object" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="6cea7-280">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6cea7-281">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-282">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-283">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-284">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-285">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-286">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="6cea7-287">Beginnend mit Visual Basic 15,8, wenn das `Number` -Argument ein Objekt ist, dessen Lauf `Double` Zeittyp oder `Single`ist, wird die Leistung der Konvertierung von Gleit Komma-zu-ganzzahligen Daten optimiert, `Fix` Wenn Sie den von zurückgegebenen Wert übergeben. -Methode für alle ganzzahligen [Konvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md)oder, wenn der von `Fix` zurückgegebene Wert automatisch in eine ganze Zahl konvertiert wird, bei der die [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf OFF festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="6cea7-288">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="6cea7-289">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="6cea7-290">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-291">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-292">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-293">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-294">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-295">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-296">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-297">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-298">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-299">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-300">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-301">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-302">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-303">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-304">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-305">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-306">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-306">Required.</span></span> <span data-ttu-id="6cea7-307">Eine Zahl vom Typ <see langword="Single" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-308">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-309">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-310">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-311">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-312">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-313">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="6cea7-314">Ab Visual Basic 15,8 wird die Leistung der Konvertierung `Single`von zu ganzzahligen Daten optimiert, wenn Sie den von der `Fix` -Methode zurückgegebenen Wert an die ganzzahligen [Konvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md)übergeben oder `Single` wenn der Wert zurückgegeben wird. by `Fix` wird automatisch in eine ganze Zahl konvertiert, bei der [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf OFF festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="6cea7-315">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="6cea7-316">Das folgende Beispiel veranschaulicht eine solche optimierte Konvertierung:</span><span class="sxs-lookup"><span data-stu-id="6cea7-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="6cea7-317">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-318">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-319">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-320">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-321">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-322">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-323">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-324">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-325">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-326">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-327">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-328">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-329">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-330">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-331">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-332">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6cea7-333">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-334">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-334">Required.</span></span> <span data-ttu-id="6cea7-335">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-336">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-337">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-338">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-339">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="6cea7-339">If `Number` is</span></span>|<span data-ttu-id="6cea7-340">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-341">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-341">Empty</span></span>|<span data-ttu-id="6cea7-342">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-342">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-343">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="6cea7-343">Any numeric value</span></span>|<span data-ttu-id="6cea7-344">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6cea7-345">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6cea7-346">Beispielsweise `&H10` stellt Decimal 16 in hexadezimal Notation dar.</span><span class="sxs-lookup"><span data-stu-id="6cea7-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-347">In diesem Beispiel wird `Hex` die-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-348"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-349"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-350">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="6cea7-351">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="6cea7-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-352">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-352">Required.</span></span> <span data-ttu-id="6cea7-353">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-354">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-355">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-356">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-357">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="6cea7-357">If `Number` is</span></span>|<span data-ttu-id="6cea7-358">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-359">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-359">Empty</span></span>|<span data-ttu-id="6cea7-360">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-360">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-361">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="6cea7-361">Any numeric value</span></span>|<span data-ttu-id="6cea7-362">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6cea7-363">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6cea7-364">Beispielsweise `&H10` stellt Decimal 16 in hexadezimal Notation dar.</span><span class="sxs-lookup"><span data-stu-id="6cea7-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-365">In diesem Beispiel wird `Hex` die-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-366"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-367"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-368">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="6cea7-369">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="6cea7-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-370">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-370">Required.</span></span> <span data-ttu-id="6cea7-371">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-372">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-373">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-374">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-375">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="6cea7-375">If `Number` is</span></span>|<span data-ttu-id="6cea7-376">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-377">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-377">Empty</span></span>|<span data-ttu-id="6cea7-378">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-378">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-379">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="6cea7-379">Any numeric value</span></span>|<span data-ttu-id="6cea7-380">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6cea7-381">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6cea7-382">Beispielsweise `&H10` stellt Decimal 16 in hexadezimal Notation dar.</span><span class="sxs-lookup"><span data-stu-id="6cea7-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-383">In diesem Beispiel wird `Hex` die-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-384"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-385"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-386">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="6cea7-387">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="6cea7-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-388">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-388">Required.</span></span> <span data-ttu-id="6cea7-389">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-390">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-391">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-392">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-393">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="6cea7-393">If `Number` is</span></span>|<span data-ttu-id="6cea7-394">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-395">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-395">Empty</span></span>|<span data-ttu-id="6cea7-396">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-396">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-397">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="6cea7-397">Any numeric value</span></span>|<span data-ttu-id="6cea7-398">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6cea7-399">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6cea7-400">Beispielsweise `&H10` stellt Decimal 16 in hexadezimal Notation dar.</span><span class="sxs-lookup"><span data-stu-id="6cea7-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-401">In diesem Beispiel wird `Hex` die-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-402"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-403"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-404">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="6cea7-405">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="6cea7-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-406">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-406">Required.</span></span> <span data-ttu-id="6cea7-407">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-408">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-409">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-410">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-411">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="6cea7-411">If `Number` is</span></span>|<span data-ttu-id="6cea7-412">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-413">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-413">Empty</span></span>|<span data-ttu-id="6cea7-414">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-414">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-415">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="6cea7-415">Any numeric value</span></span>|<span data-ttu-id="6cea7-416">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6cea7-417">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6cea7-418">Beispielsweise `&H10` stellt Decimal 16 in hexadezimal Notation dar.</span><span class="sxs-lookup"><span data-stu-id="6cea7-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-419">In diesem Beispiel wird `Hex` die-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-420"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-421"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-422">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="6cea7-423">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="6cea7-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-424">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-424">Required.</span></span> <span data-ttu-id="6cea7-425">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-426">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-427">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-428">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-429">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="6cea7-429">If `Number` is</span></span>|<span data-ttu-id="6cea7-430">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-431">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-431">Empty</span></span>|<span data-ttu-id="6cea7-432">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-432">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-433">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="6cea7-433">Any numeric value</span></span>|<span data-ttu-id="6cea7-434">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6cea7-435">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6cea7-436">Beispielsweise `&H10` stellt Decimal 16 in hexadezimal Notation dar.</span><span class="sxs-lookup"><span data-stu-id="6cea7-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-437">In diesem Beispiel wird `Hex` die-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-438"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-439"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-440">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="6cea7-441">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="6cea7-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-442">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-442">Required.</span></span> <span data-ttu-id="6cea7-443">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-444">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-445">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-446">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-447">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="6cea7-447">If `Number` is</span></span>|<span data-ttu-id="6cea7-448">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-449">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-449">Empty</span></span>|<span data-ttu-id="6cea7-450">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-450">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-451">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="6cea7-451">Any numeric value</span></span>|<span data-ttu-id="6cea7-452">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6cea7-453">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6cea7-454">Beispielsweise `&H10` stellt Decimal 16 in hexadezimal Notation dar.</span><span class="sxs-lookup"><span data-stu-id="6cea7-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-455">In diesem Beispiel wird `Hex` die-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-456"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-457"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-458">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="6cea7-459">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="6cea7-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-460">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-460">Required.</span></span> <span data-ttu-id="6cea7-461">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-462">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-463">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-464">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-465">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="6cea7-465">If `Number` is</span></span>|<span data-ttu-id="6cea7-466">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-467">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-467">Empty</span></span>|<span data-ttu-id="6cea7-468">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-468">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-469">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="6cea7-469">Any numeric value</span></span>|<span data-ttu-id="6cea7-470">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6cea7-471">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6cea7-472">Beispielsweise `&H10` stellt Decimal 16 in hexadezimal Notation dar.</span><span class="sxs-lookup"><span data-stu-id="6cea7-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-473">In diesem Beispiel wird `Hex` die-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-474"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-475"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-476">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="6cea7-477">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="6cea7-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-478">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-478">Required.</span></span> <span data-ttu-id="6cea7-479">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-480">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-481">Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-482">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-483">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="6cea7-483">If `Number` is</span></span>|<span data-ttu-id="6cea7-484">Hex-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-485">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-485">Empty</span></span>|<span data-ttu-id="6cea7-486">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-486">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-487">Beliebiger numerischer Wert</span><span class="sxs-lookup"><span data-stu-id="6cea7-487">Any numeric value</span></span>|<span data-ttu-id="6cea7-488">Bis zu sechzehn hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6cea7-489">Hexadezimale Zahlen können direkt durch vorangehende Zahlen im richtigen Bereich mit `&H`dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6cea7-490">Beispielsweise `&H10` stellt Decimal 16 in hexadezimal Notation dar.</span><span class="sxs-lookup"><span data-stu-id="6cea7-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-491">In diesem Beispiel wird `Hex` die-Funktion verwendet, um den Hexadezimalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-492"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-493"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-494">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="6cea7-495">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span><span class="sxs-lookup"><span data-stu-id="6cea7-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6cea7-496">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-497">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-497">Required.</span></span> <span data-ttu-id="6cea7-498">Eine Zahl vom Typ <see langword="Decimal" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-499">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-500">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-501">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-502">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-503">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-504">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="6cea7-505">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-506">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-507">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-508">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-509">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-510">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-511">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-512">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-513">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-514">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-515">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-516">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-517">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-518">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-519">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-520">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-521">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-521">Required.</span></span> <span data-ttu-id="6cea7-522">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-523">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-524">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-525">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-526">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-527">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-528">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="6cea7-529">Ab Visual Basic 15,8 wird die Leistung der Konvertierung von Double in Integer optimiert, wenn Sie den von der `Int` -Methode zurückgegebenen Wert an die ganzzahligen [Konvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md)übergeben, oder wenn der Double-Wert von `Int` zurückgegeben wird. wird automatisch in eine ganze Zahl konvertiert, bei der [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf OFF festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="6cea7-530">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="6cea7-531">Das folgende Beispiel veranschaulicht eine solche optimierte Konvertierung:</span><span class="sxs-lookup"><span data-stu-id="6cea7-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="6cea7-532">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-533">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-534">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-535">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-536">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-537">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-538">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-539">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-540">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-541">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-542">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-543">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-544">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-545">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-546">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-547">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-548">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-548">Required.</span></span> <span data-ttu-id="6cea7-549">Eine Zahl vom Typ <see langword="Short" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-550">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-551">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-552">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-553">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-554">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-555">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-556">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-557">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-558">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-559">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-560">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-561">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-562">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-563">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-564">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-565">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-566">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-567">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-568">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-569">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-570">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-571">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-572">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-572">Required.</span></span> <span data-ttu-id="6cea7-573">Eine Zahl vom Typ <see langword="Integer" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-574">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-575">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-576">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-577">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-578">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-579">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-580">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-581">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-582">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-583">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-584">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-585">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-586">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-587">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-588">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-589">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-590">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-591">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-592">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-593">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-594">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-595">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-596">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-596">Required.</span></span> <span data-ttu-id="6cea7-597">Eine Zahl vom Typ <see langword="Long" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-598">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-599">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-600">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-601">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-602">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-603">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-604">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-605">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-606">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-607">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-608">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-609">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-610">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-611">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-612">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-613">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-614">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-615">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-616">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-617">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-618">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-619">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-620">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-620">Required.</span></span> <span data-ttu-id="6cea7-621">Eine Zahl vom Typ <see langword="Object" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="6cea7-622">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6cea7-623">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-624">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-625">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-626">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-627">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-628">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="6cea7-629">Beginnend mit Visual Basic 15,8, wenn das `Number` -Argument ein Objekt ist, dessen Lauf `Double` Zeittyp oder `Single`ist, wird die Leistung der Konvertierung von Gleit Komma-zu-ganzzahligen Daten optimiert, `Int` Wenn Sie den von zurückgegebenen Wert übergeben. -Methode für alle ganzzahligen [Konvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md)oder, wenn der von `Int` zurückgegebene Wert automatisch in eine ganze Zahl konvertiert wird, bei der die [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf OFF festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="6cea7-630">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="6cea7-631">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="6cea7-632">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-633">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-634">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-635">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-636">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-637">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-638">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-639">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-640">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-641">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-642">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-643">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-644">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-645">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-646">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-647">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-648">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-648">Required.</span></span> <span data-ttu-id="6cea7-649">Eine Zahl vom Typ <see langword="Single" /> oder ein beliebiger gültiger numerischer Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-650">Gibt den Integeranteil einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-651">Der Integeranteil einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-652">Sowohl die `Int` - `Fix` als auch die-Funktion entfernen den `Number` Bruch Teil von und geben den resultierenden ganzzahligen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6cea7-653">Der Unterschied `Int` zwischen `Fix` den Funktionen und besteht `Number` darin, dass `Int` , wenn negativ ist, die erste negative Ganzzahl `Number`kleiner oder `Fix` gleich zurückgibt, während die erste negative Ganzzahl zurückgibt. größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="6cea7-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6cea7-654">`Int` Konvertiert z. b.-8,4 in-9 und `Fix` konvertiert-8,4 in-8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6cea7-655">`Fix(number)`entspricht`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6cea7-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="6cea7-656">Ab Visual Basic 15,8 wird die Leistung der Konvertierung `Single`von zu ganzzahligen Daten optimiert, wenn Sie den von der `Int` -Methode zurückgegebenen Wert an die ganzzahligen [Konvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/conversion-functions.md)übergeben oder `Single` wenn der Wert zurückgegeben wird. by `Int` wird automatisch in eine ganze Zahl konvertiert, bei der [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) auf OFF festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="6cea7-657">Dank dieser Optimierung kann Code schneller ausgeführt werden. Code, der viele Ganzzahltypen konvertiert, wird bis zu doppelt so schnell ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="6cea7-658">Das folgende Beispiel veranschaulicht eine solche optimierte Konvertierung:</span><span class="sxs-lookup"><span data-stu-id="6cea7-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="6cea7-659">Dieses Beispiel veranschaulicht, wie `Int` die `Fix` -und-Funktionen ganzzahlige Teile von Zahlen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6cea7-660">Im Fall eines negativen Zahlen Arguments gibt die `Int` -Funktion die erste negative Ganzzahl zurück, die kleiner oder gleich der Zahl ist, und die `Fix` -Funktion gibt die erste negative Ganzzahl zurück, die größer oder gleich der Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6cea7-661">Das folgende Beispiel erfordert, dass Sie `Option Strict Off` angeben, da implizite Konvertierungen von `Integer` Typ `Double` in Typ unter `Option Strict On`nicht zulässig sind:</span><span class="sxs-lookup"><span data-stu-id="6cea7-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6cea7-662">Sie können die `CInt` -Funktion verwenden, um andere Datentypen explizit in `Integer` den `Option Strict Off`Typ zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6cea7-663">Allerdings `CInt` wird auf die nächste ganze Zahl gerundet, anstatt den Bruchteilen von Zahlen zu kürzen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6cea7-664">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6cea7-665">Sie können die `CInt` -Funktion für das Ergebnis eines `Fix` Aufrufes von `Int` oder verwenden, um eine explizite Konvertierung in eine ganze Zahl ohne Rundung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6cea7-666">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="6cea7-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6cea7-667">Weitere Informationen zu `CInt`finden Sie unter [Typkonvertierungs Funktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="6cea7-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-668">Number ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-669">Number ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-670">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="6cea7-671">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="6cea7-672">Mathematische Operationen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="6cea7-673">Mathematische Funktionen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6cea7-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-674">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6cea7-675">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-676">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-676">Required.</span></span> <span data-ttu-id="6cea7-677">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-678">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-679">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-680">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-681">Wenn number</span><span class="sxs-lookup"><span data-stu-id="6cea7-681">If Number is</span></span>|<span data-ttu-id="6cea7-682">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-683">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-683">Empty</span></span>|<span data-ttu-id="6cea7-684">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-684">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-685">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="6cea7-685">Any other number</span></span>|<span data-ttu-id="6cea7-686">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6cea7-687">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6cea7-688">Beispielsweise `&O10` ist die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-689">In diesem Beispiel wird `Oct` die-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-690"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-691"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-692">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-693">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-694">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-694">Required.</span></span> <span data-ttu-id="6cea7-695">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-696">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-697">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-698">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-699">Wenn number</span><span class="sxs-lookup"><span data-stu-id="6cea7-699">If Number is</span></span>|<span data-ttu-id="6cea7-700">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-701">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-701">Empty</span></span>|<span data-ttu-id="6cea7-702">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-702">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-703">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="6cea7-703">Any other number</span></span>|<span data-ttu-id="6cea7-704">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6cea7-705">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6cea7-706">Beispielsweise `&O10` ist die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-707">In diesem Beispiel wird `Oct` die-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-708"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-709"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-710">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-711">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-712">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-712">Required.</span></span> <span data-ttu-id="6cea7-713">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-714">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-715">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-716">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-717">Wenn number</span><span class="sxs-lookup"><span data-stu-id="6cea7-717">If Number is</span></span>|<span data-ttu-id="6cea7-718">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-719">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-719">Empty</span></span>|<span data-ttu-id="6cea7-720">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-720">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-721">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="6cea7-721">Any other number</span></span>|<span data-ttu-id="6cea7-722">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6cea7-723">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6cea7-724">Beispielsweise `&O10` ist die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-725">In diesem Beispiel wird `Oct` die-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-726"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-727"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-728">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-729">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-730">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-730">Required.</span></span> <span data-ttu-id="6cea7-731">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-732">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-733">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-734">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-735">Wenn number</span><span class="sxs-lookup"><span data-stu-id="6cea7-735">If Number is</span></span>|<span data-ttu-id="6cea7-736">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-737">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-737">Empty</span></span>|<span data-ttu-id="6cea7-738">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-738">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-739">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="6cea7-739">Any other number</span></span>|<span data-ttu-id="6cea7-740">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6cea7-741">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6cea7-742">Beispielsweise `&O10` ist die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-743">In diesem Beispiel wird `Oct` die-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-744"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-745"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-746">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-747">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-748">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-748">Required.</span></span> <span data-ttu-id="6cea7-749">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-750">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-751">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-752">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-753">Wenn number</span><span class="sxs-lookup"><span data-stu-id="6cea7-753">If Number is</span></span>|<span data-ttu-id="6cea7-754">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-755">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-755">Empty</span></span>|<span data-ttu-id="6cea7-756">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-756">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-757">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="6cea7-757">Any other number</span></span>|<span data-ttu-id="6cea7-758">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6cea7-759">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6cea7-760">Beispielsweise `&O10` ist die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-761">In diesem Beispiel wird `Oct` die-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-762"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-763"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-764">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-765">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-766">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-766">Required.</span></span> <span data-ttu-id="6cea7-767">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-768">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-769">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-770">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-771">Wenn number</span><span class="sxs-lookup"><span data-stu-id="6cea7-771">If Number is</span></span>|<span data-ttu-id="6cea7-772">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-773">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-773">Empty</span></span>|<span data-ttu-id="6cea7-774">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-774">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-775">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="6cea7-775">Any other number</span></span>|<span data-ttu-id="6cea7-776">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6cea7-777">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6cea7-778">Beispielsweise `&O10` ist die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-779">In diesem Beispiel wird `Oct` die-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-780"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-781"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-782">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-783">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-784">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-784">Required.</span></span> <span data-ttu-id="6cea7-785">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-786">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-787">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-788">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-789">Wenn number</span><span class="sxs-lookup"><span data-stu-id="6cea7-789">If Number is</span></span>|<span data-ttu-id="6cea7-790">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-791">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-791">Empty</span></span>|<span data-ttu-id="6cea7-792">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-792">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-793">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="6cea7-793">Any other number</span></span>|<span data-ttu-id="6cea7-794">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6cea7-795">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6cea7-796">Beispielsweise `&O10` ist die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-797">In diesem Beispiel wird `Oct` die-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-798"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-799"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-800">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-801">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-802">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-802">Required.</span></span> <span data-ttu-id="6cea7-803">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-804">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-805">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-806">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-807">Wenn number</span><span class="sxs-lookup"><span data-stu-id="6cea7-807">If Number is</span></span>|<span data-ttu-id="6cea7-808">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-809">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-809">Empty</span></span>|<span data-ttu-id="6cea7-810">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-810">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-811">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="6cea7-811">Any other number</span></span>|<span data-ttu-id="6cea7-812">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6cea7-813">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6cea7-814">Beispielsweise `&O10` ist die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-815">In diesem Beispiel wird `Oct` die-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-816"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-817"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-818">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-819">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-820">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-820">Required.</span></span> <span data-ttu-id="6cea7-821">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="6cea7-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-822">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-823">Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-824">Wenn `Number` nicht bereits eine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6cea7-825">Wenn number</span><span class="sxs-lookup"><span data-stu-id="6cea7-825">If Number is</span></span>|<span data-ttu-id="6cea7-826">Okt-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="6cea7-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6cea7-827">Empty</span><span class="sxs-lookup"><span data-stu-id="6cea7-827">Empty</span></span>|<span data-ttu-id="6cea7-828">NULL (0)</span><span class="sxs-lookup"><span data-stu-id="6cea7-828">Zero (0)</span></span>|  
|<span data-ttu-id="6cea7-829">Beliebige andere Zahl</span><span class="sxs-lookup"><span data-stu-id="6cea7-829">Any other number</span></span>|<span data-ttu-id="6cea7-830">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="6cea7-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6cea7-831">Sie können oktale Zahlen direkt durch vorangehende Zahlen im richtigen Bereich mit `&O`darstellen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6cea7-832">Beispielsweise `&O10` ist die oktale Notation für Decimal 8.</span><span class="sxs-lookup"><span data-stu-id="6cea7-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-833">In diesem Beispiel wird `Oct` die-Funktion verwendet, um den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-834"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-835"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-836">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-837">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6cea7-838">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-838">Required.</span></span> <span data-ttu-id="6cea7-839">Ein <see langword="Object" />, das einen beliebigen gültigen numerischen Ausdruck enthält.</span><span class="sxs-lookup"><span data-stu-id="6cea7-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6cea7-840">Gibt eine <see langword="String" />-Darstellung dieser Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="6cea7-841">Eine <see langword="String" />-Darstellung einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-842">Wenn Zahlen in Zeichen folgen konvertiert werden, ist ein führendes Leerzeichen für das Vorzeichen von `Number`immer reserviert.</span><span class="sxs-lookup"><span data-stu-id="6cea7-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="6cea7-843">Wenn `Number` positiv ist, enthält die zurückgegebene Zeichenfolge ein führendes Leerzeichen, und das Pluszeichen wird impliziert.</span><span class="sxs-lookup"><span data-stu-id="6cea7-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="6cea7-844">Eine negative Zahl umfasst das Minuszeichen (-) und keinen führenden Leerraum.</span><span class="sxs-lookup"><span data-stu-id="6cea7-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="6cea7-845">Verwenden Sie `Format` die-Funktion, um numerische Werte, die Sie formatieren möchten, als Datumsangaben, Uhrzeiten oder Währungen oder in anderen benutzerdefinierten Formaten zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="6cea7-846">Anders als `Str` bei der- `Format` Funktion enthält die-Funktion keinen führenden Leerraum für das `Number`Vorzeichen von.</span><span class="sxs-lookup"><span data-stu-id="6cea7-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cea7-847">Die `Str` -Funktion erkennt nur den Punkt`.`() als gültiges Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="6cea7-848">Wenn verschiedene Dezimaltrennzeichen verwendet werden (z. b. in internationalen Anwendungen), verwenden `CStr` Sie `Format` die-Funktion oder die-Funktion, um eine Zahl in eine Zeichenfolge zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="6cea7-849">Um die Zeichen folgen Darstellung einer Zahl in einer bestimmten Kultur zu erhalten, verwenden Sie die `ToString(IFormatProvider)` -Methode der Zahl.</span><span class="sxs-lookup"><span data-stu-id="6cea7-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="6cea7-850">Verwenden <xref:System.Double.ToString%2A> Sie z. b., wenn Sie einen `Double` Wert vom Typ in eine Zeichenfolge umwandelt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-851">In diesem Beispiel wird `Str` die-Funktion verwendet `String` , um eine-Darstellung einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="6cea7-852">Wenn eine positive Zahl in eine Zeichenfolge konvertiert wird, ist ein führendes Leerzeichen immer für sein Vorzeichen reserviert.</span><span class="sxs-lookup"><span data-stu-id="6cea7-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cea7-853"><paramref name="Number" /> wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="6cea7-854"><paramref name="Number" /> ist kein numerischer Typ.</span><span class="sxs-lookup"><span data-stu-id="6cea7-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="6cea7-855">Konvertierung: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="6cea7-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-856">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6cea7-857">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="6cea7-858">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-858">Required.</span></span> <span data-ttu-id="6cea7-859">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="6cea7-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="6cea7-860">Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="6cea7-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="6cea7-861">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="6cea7-862">Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</span><span class="sxs-lookup"><span data-stu-id="6cea7-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-863">`Val` Funktion stoppt das Lesen der Zeichenfolge beim ersten Zeichen, das nicht als Teil einer Zahl erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="6cea7-864">Symbole und Zeichen, die häufig als Teile numerischer Werte angesehen werden, wie z. b. Dollarzeichen und Kommas, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="6cea7-865">Die-Funktion erkennt jedoch die Basis-Präfixe `&O` (für oktal) und `&H` (für hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="6cea7-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="6cea7-866">Leerzeichen, Tabstopps und Zeilenvorschub Zeichen werden aus dem-Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="6cea7-867">Der folgende-Rückruf gibt den Wert 1615198 zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="6cea7-868">Der folgende-Rückruf gibt den Dezimalwert-1 zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="6cea7-869">Die `Val` -Funktion erkennt nur den Punkt`.`() als gültiges Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="6cea7-870">Wenn verschiedene Dezimaltrennzeichen verwendet werden, wie in internationalen Anwendungen, verwenden `CDbl` Sie `CInt` oder, um eine Zeichenfolge in eine Zahl zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="6cea7-871">Verwenden Sie die- `Parse(String, IFormatProvider)` Methode des numerischen Typs, um die Zeichen folgen Darstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="6cea7-872">Verwenden <xref:System.Double.Parse%2A?displayProperty=nameWithType> Sie z. b., wenn eine Zeichen `Double`Folge in eine-Zeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6cea7-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="6cea7-873">Eine <xref:System.InvalidCastException> Ausnahme kann als Reaktion auf bestimmte ungewöhnliche Zahlenformate ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="6cea7-874">Beispielsweise löst der folgende Code diese Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="6cea7-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="6cea7-875">Der Konflikt zwischen der Zahl, die als `Double` und die `Integer` Typzeichen und `Long` formatiert ist, wird vom Compiler abgefangen, wenn Sie nicht in einer Zeichenfolge enthalten war.</span><span class="sxs-lookup"><span data-stu-id="6cea7-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-876">Im folgenden Beispiel wird die `Val` -Funktion verwendet, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="6cea7-877">`Val`beendet die Typumwandlung beim ersten Zeichen, das nicht als numerische Ziffer, numerischer Modifizierer, numerische Interpunktions Zeichen oder Leerraum interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="6cea7-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="6cea7-878"><paramref name="InputStr" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="6cea7-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-879"><paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-880">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="6cea7-881">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-881">Required.</span></span> <span data-ttu-id="6cea7-882">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="6cea7-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="6cea7-883">Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="6cea7-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="6cea7-884">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="6cea7-885">Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</span><span class="sxs-lookup"><span data-stu-id="6cea7-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-886">`Val` Funktion stoppt das Lesen der Zeichenfolge beim ersten Zeichen, das nicht als Teil einer Zahl erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="6cea7-887">Symbole und Zeichen, die häufig als Teile numerischer Werte angesehen werden, wie z. b. Dollarzeichen und Kommas, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="6cea7-888">Die-Funktion erkennt jedoch die Basis-Präfixe `&O` (für oktal) und `&H` (für hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="6cea7-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="6cea7-889">Leerzeichen, Tabstopps und Zeilenvorschub Zeichen werden aus dem-Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="6cea7-890">Der folgende-Rückruf gibt den Wert 1234123 zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="6cea7-891">Der folgende-Rückruf gibt den Dezimalwert-1 zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="6cea7-892">Die `Val` -Funktion erkennt nur den Punkt`.`() als gültiges Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="6cea7-893">Wenn andere Dezimaltrennzeichen verwendet werden, wie in internationalen Anwendungen, verwenden `CDbl` Sie `CInt` oder, um eine Zeichenfolge in eine Zahl zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="6cea7-894">Verwenden Sie die- `Parse(String, IFormatProvider)` Methode des numerischen Typs, um die Zeichen folgen Darstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="6cea7-895">Verwenden <xref:System.Double.Parse%2A?displayProperty=nameWithType> Sie z. b., wenn eine Zeichen `Double`Folge in eine-Zeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6cea7-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cea7-896">Eine <xref:System.InvalidCastException> Ausnahme kann als Reaktion auf bestimmte ungewöhnliche Zahlenformate ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="6cea7-897">Beispielsweise löst der folgende Code diese Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="6cea7-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="6cea7-898">Der Konflikt zwischen der Zahl, die als `Double` und die `Integer` Typzeichen und `Long` formatiert ist, wird vom Compiler abgefangen, wenn der Konflikt nicht in Zeichen folgen enthalten war.</span><span class="sxs-lookup"><span data-stu-id="6cea7-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-899">Im folgenden Beispiel wird die `Val` -Funktion verwendet, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="6cea7-900">`Val`beendet die Typumwandlung beim ersten Zeichen, das nicht als numerische Ziffer, numerischer Modifizierer, numerische Interpunktions Zeichen oder Leerraum interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="6cea7-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="6cea7-901"><paramref name="InputStr" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="6cea7-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-902"><paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-903">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="6cea7-904">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="6cea7-904">Required.</span></span> <span data-ttu-id="6cea7-905">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="6cea7-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="6cea7-906">Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="6cea7-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="6cea7-907">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="6cea7-908">Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</span><span class="sxs-lookup"><span data-stu-id="6cea7-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cea7-909">`Val` Funktion stoppt das Lesen der Zeichenfolge beim ersten Zeichen, das nicht als Teil einer Zahl erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="6cea7-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="6cea7-910">Symbole und Zeichen, die häufig als Teile numerischer Werte angesehen werden, wie z. b. Dollarzeichen und Kommas, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="6cea7-911">Die-Funktion erkennt jedoch die Basis-Präfixe `&O` (für oktal) und `&H` (für hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="6cea7-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="6cea7-912">Leerzeichen, Tabstopps und Zeilenvorschub Zeichen werden aus dem-Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="6cea7-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="6cea7-913">Der folgende-Rückruf gibt den Wert 1234123 zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="6cea7-914">Der folgende-Rückruf gibt den Dezimalwert-1 zurück.</span><span class="sxs-lookup"><span data-stu-id="6cea7-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="6cea7-915">Die `Val` -Funktion erkennt nur den Punkt`.`() als gültiges Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="6cea7-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="6cea7-916">Wenn andere Dezimaltrennzeichen verwendet werden, wie in internationalen Anwendungen, verwenden `CDbl` Sie `CInt` oder, um eine Zeichenfolge in eine Zahl zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="6cea7-917">Verwenden Sie die- `Parse(String, IFormatProvider)` Methode des numerischen Typs, um die Zeichen folgen Darstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="6cea7-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="6cea7-918">Verwenden <xref:System.Double.Parse%2A?displayProperty=nameWithType> Sie z. b., wenn eine Zeichen `Double`Folge in eine-Zeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6cea7-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cea7-919">Eine <xref:System.InvalidCastException> Ausnahme kann als Reaktion auf bestimmte ungewöhnliche Zahlenformate ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="6cea7-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="6cea7-920">Beispielsweise löst der folgende Code diese Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="6cea7-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="6cea7-921">Der Konflikt zwischen der Zahl, die als `Double` und die `Integer` Typzeichen und `Long` formatiert ist, wird vom Compiler abgefangen, wenn der Konflikt nicht in Zeichen folgen enthalten war.</span><span class="sxs-lookup"><span data-stu-id="6cea7-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="6cea7-922">Im folgenden Beispiel wird die `Val` -Funktion verwendet, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="6cea7-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="6cea7-923">`Val`beendet die Typumwandlung beim ersten Zeichen, das nicht als numerische Ziffer, numerischer Modifizierer, numerische Interpunktions Zeichen oder Leerraum interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="6cea7-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="6cea7-924"><paramref name="InputStr" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="6cea7-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6cea7-925"><paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span><span class="sxs-lookup"><span data-stu-id="6cea7-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="6cea7-926">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="6cea7-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
